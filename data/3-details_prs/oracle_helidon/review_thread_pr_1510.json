{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzQzODEx", "number": 1510, "reviewThreads": {"totalCount": 65, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0NjoxNVrODoQTYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MjoyMVrODxwPNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTM2NzM3OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0NjoxNlrOF2sQQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NjozNVrOF4Lt-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MjQ4MQ==", "bodyText": "In helidon the directory, groupId, artifactId, and name are related (see Development guidelines).\nThe groupid would be io.helidon.messaging.kafka\nTha artifactid would be helidon-messaging-kafka\nName would be Helidon Messaging Kafka.\nAlso as this is fully dependent on MicroProfile (according to dependencies), this whole module should be under either under microprofile root module or in integrations root module.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392892481", "createdAt": "2020-03-16T09:46:16Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5Nzg4OQ==", "bodyText": "The package of the module has to be aligned as well.\nIf you put the module to microprofile/connectors/kafka, this would be the correct coordinates:\ngroupId: io.helidon.microprofile.connectors\nartifactId: helidon-microprofile-connectors-kafka\nname: Helidon MicroProfile Connectors Kafka\njava package: io.helidon.microprofile.connectors.kafka`", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392897889", "createdAt": "2020-03-16T09:55:55Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MjQ4MQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NjU2OA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394456568", "createdAt": "2020-03-18T15:56:35Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5MjQ4MQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTM3OTU5OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo0OTo0OVrOF2sX2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NjozOVrOF4LuPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NDQyNw==", "bodyText": "All version management must be done in dependencies pom. Also add dependencies label to this PR.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392894427", "createdAt": "2020-03-16T09:49:49Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>\n+    <artifactId>kafka-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Kafka Connector</name>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NjYzNg==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394456636", "createdAt": "2020-03-18T15:56:39Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>\n+    <artifactId>kafka-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Kafka Connector</name>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NDQyNw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTM4MTc3OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo1MDoyNVrOF2sZQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1Njo1NFrOF4LvKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NDc4NQ==", "bodyText": "This dependency is part of microprofile server dependency (in runtime scope).", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392894785", "createdAt": "2020-03-16T09:50:25Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>\n+    <artifactId>kafka-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Kafka Connector</name>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka_2.11</artifactId>\n+            <version>2.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- redirecting Weld logging to JUL logging -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1Njg3Mg==", "bodyText": "It is removed now", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394456872", "createdAt": "2020-03-18T15:56:54Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>\n+    <artifactId>kafka-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Kafka Connector</name>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka_2.11</artifactId>\n+            <version>2.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- redirecting Weld logging to JUL logging -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NDc4NQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTM4ODE4OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo1MjoxMFrOF2sdHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NzowOFrOF4Lv0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NTc3NA==", "bodyText": "Do not add any pluginManagement to modules.\nThis is already handles by the parent pom and has no place here.\nIf you need to run checkstyle, you can either use a script in etc/scripts, or you can execute maven with profile checkstyle.\nlogging.properties are automatically added to configuration if on the root of classpath, or in current directory.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392895774", "createdAt": "2020-03-16T09:52:10Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>\n+    <artifactId>kafka-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Kafka Connector</name>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka_2.11</artifactId>\n+            <version>2.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- redirecting Weld logging to JUL logging -->\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-jdk14</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.salesforce.kafka.test</groupId>\n+            <artifactId>kafka-junit5</artifactId>\n+            <version>3.1.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <pluginManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NzA0MA==", "bodyText": "It is removed", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394457040", "createdAt": "2020-03-18T15:57:08Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,121 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging</groupId>\n+        <artifactId>helidon-messaging-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors</groupId>\n+    <artifactId>kafka-connector</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Kafka Connector</name>\n+\n+    <dependencies>\n+\n+        <dependency>\n+            <groupId>io.helidon.microprofile.config</groupId>\n+            <artifactId>helidon-microprofile-config</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka-clients</artifactId>\n+            <version>2.3.0</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.kafka</groupId>\n+            <artifactId>kafka_2.11</artifactId>\n+            <version>2.3.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- redirecting Weld logging to JUL logging -->\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-jdk14</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.salesforce.kafka.test</groupId>\n+            <artifactId>kafka-junit5</artifactId>\n+            <version>3.1.1</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <pluginManagement>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5NTc3NA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTQwNTAxOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwOTo1Njo0MFrOF2snFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NzoyMFrOF4LwbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5ODMyNA==", "bodyText": "Helidon has a flat package structure - each module can only use one package (and spi if needed).", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392898324", "createdAt": "2020-03-16T09:56:40Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NzE5Nw==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394457197", "createdAt": "2020-03-18T15:57:20Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg5ODMyNA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTUyMDgwOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozMDoyMlrOF2tvSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyMjozMVrOF7WmYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNjgwOA==", "bodyText": "This method should be private (or package local)", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392916808", "createdAt": "2020-03-16T10:30:22Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MDU3Ng==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397780576", "createdAt": "2020-03-25T11:22:31Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxNjgwOA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTUyODkzOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozMTo1NlrOF2t0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyMzoyMFrOF7WoEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxODA3Mg==", "bodyText": "public method with no javadoc.\nAlso Helidon uses getters without get verb, so the method should be called consumers.\nI am not sure it should be public at all. Please minimize number of public methods that are not implementing interface methods.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392918072", "createdAt": "2020-03-16T10:31:56Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MTAxMQ==", "bodyText": "It is for testing purposes, to check that all resources are closed. Not it has package visibility and other name without get.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397781011", "createdAt": "2020-03-25T11:23:20Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxODA3Mg=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTUzOTE5OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozMzo1N1rOF2t63Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyMzo1OFrOF7WpgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxOTc3Mw==", "bodyText": "You are creating a new thread pool for each publisher. That is probably not intended.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392919773", "createdAt": "2020-03-16T10:33:57Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaConsumer<Object, Object> simpleKafkaConsumer = new SimpleKafkaConsumer<>(helidonConfig);\n+        consumers.add(simpleKafkaConsumer);\n+        return simpleKafkaConsumer.createPushPublisherBuilder(ThreadPoolSupplier.create(helidonConfig.get(\"executor-service\")).get());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MTM3Nw==", "bodyText": "Right, now it reuses a scheduler thread pool", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397781377", "createdAt": "2020-03-25T11:23:58Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaConsumer<Object, Object> simpleKafkaConsumer = new SimpleKafkaConsumer<>(helidonConfig);\n+        consumers.add(simpleKafkaConsumer);\n+        return simpleKafkaConsumer.createPushPublisherBuilder(ThreadPoolSupplier.create(helidonConfig.get(\"executor-service\")).get());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkxOTc3Mw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTU0MzU2OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozNDo1N1rOF2t96Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyNDoxNlrOF7WqLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMDU1Mw==", "bodyText": "In this case you do not close the producer.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392920553", "createdAt": "2020-03-16T10:34:57Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaConsumer<Object, Object> simpleKafkaConsumer = new SimpleKafkaConsumer<>(helidonConfig);\n+        consumers.add(simpleKafkaConsumer);\n+        return simpleKafkaConsumer.createPushPublisherBuilder(ThreadPoolSupplier.create(helidonConfig.get(\"executor-service\")).get());\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaProducer<Object, Object> simpleKafkaProducer = new SimpleKafkaProducer<>(helidonConfig);\n+        return ReactiveStreams.fromSubscriber(new Subscriber<Message<?>>() {\n+\n+            @Override\n+            public void onSubscribe(Subscription s) {\n+                s.request(Long.MAX_VALUE);\n+            }\n+\n+            @Override\n+            public void onNext(Message<?> message) {\n+                simpleKafkaProducer.produce(message.getPayload());\n+                message.ack();\n+            }\n+\n+            @Override\n+            public void onError(Throwable t) {\n+                LOGGER.log(Level.SEVERE, \"The Kafka subscription has failed\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MTU0OQ==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397781549", "createdAt": "2020-03-25T11:24:16Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaConsumer<Object, Object> simpleKafkaConsumer = new SimpleKafkaConsumer<>(helidonConfig);\n+        consumers.add(simpleKafkaConsumer);\n+        return simpleKafkaConsumer.createPushPublisherBuilder(ThreadPoolSupplier.create(helidonConfig.get(\"executor-service\")).get());\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaProducer<Object, Object> simpleKafkaProducer = new SimpleKafkaProducer<>(helidonConfig);\n+        return ReactiveStreams.fromSubscriber(new Subscriber<Message<?>>() {\n+\n+            @Override\n+            public void onSubscribe(Subscription s) {\n+                s.request(Long.MAX_VALUE);\n+            }\n+\n+            @Override\n+            public void onNext(Message<?> message) {\n+                simpleKafkaProducer.produce(message.getPayload());\n+                message.ack();\n+            }\n+\n+            @Override\n+            public void onError(Throwable t) {\n+                LOGGER.log(Level.SEVERE, \"The Kafka subscription has failed\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMDU1Mw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTU0NjI4OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozNToyNVrOF2t_qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyNDo0NFrOF7WrGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMTAwMw==", "bodyText": "No backpressure support may cause issues in reactive environment.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392921003", "createdAt": "2020-03-16T10:35:25Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaConsumer<Object, Object> simpleKafkaConsumer = new SimpleKafkaConsumer<>(helidonConfig);\n+        consumers.add(simpleKafkaConsumer);\n+        return simpleKafkaConsumer.createPushPublisherBuilder(ThreadPoolSupplier.create(helidonConfig.get(\"executor-service\")).get());\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaProducer<Object, Object> simpleKafkaProducer = new SimpleKafkaProducer<>(helidonConfig);\n+        return ReactiveStreams.fromSubscriber(new Subscriber<Message<?>>() {\n+\n+            @Override\n+            public void onSubscribe(Subscription s) {\n+                s.request(Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MTc4NA==", "bodyText": "It is now configured a configured parameter.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397781784", "createdAt": "2020-03-25T11:24:44Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.SimpleKafkaConsumer;\n+import io.helidon.messaging.kafka.SimpleKafkaProducer;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Partial implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+public class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-kafka\";\n+\n+    private Queue<SimpleKafkaConsumer<Object, Object>> consumers = new ConcurrentLinkedQueue<>();\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        SimpleKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+    }\n+\n+    public Collection<SimpleKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaConsumer<Object, Object> simpleKafkaConsumer = new SimpleKafkaConsumer<>(helidonConfig);\n+        consumers.add(simpleKafkaConsumer);\n+        return simpleKafkaConsumer.createPushPublisherBuilder(ThreadPoolSupplier.create(helidonConfig.get(\"executor-service\")).get());\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        SimpleKafkaProducer<Object, Object> simpleKafkaProducer = new SimpleKafkaProducer<>(helidonConfig);\n+        return ReactiveStreams.fromSubscriber(new Subscriber<Message<?>>() {\n+\n+            @Override\n+            public void onSubscribe(Subscription s) {\n+                s.request(Long.MAX_VALUE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMTAwMw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTU0OTk0OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDozNjowMVrOF2uB-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyNToyMFrOF7WsaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMTU5Mg==", "bodyText": "This class should not be public maybe?", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392921592", "createdAt": "2020-03-16T10:36:01Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MjEyMA==", "bodyText": "It has packaged visibility now", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397782120", "createdAt": "2020-03-25T11:25:20Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkyMTU5Mg=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYwNzgxOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0NzowOVrOF2ul4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyNTozN1rOF7Ws_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMDc4NA==", "bodyText": "Getter should not use get, also I guess this should not be public.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392930784", "createdAt": "2020-03-16T10:47:09Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private ConsumerRecord<K, V> consumerRecord;\n+    private CompletableFuture<Void> ackFuture = new CompletableFuture<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     */\n+    public KafkaMessage(ConsumerRecord<K, V> consumerRecord) {\n+        this.consumerRecord = consumerRecord;\n+    }\n+\n+    @Override\n+    public ConsumerRecord<K, V> getPayload() {\n+        return consumerRecord;\n+    }\n+\n+    public CompletableFuture<Void> getAckFuture() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MjI3MA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397782270", "createdAt": "2020-03-25T11:25:37Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private ConsumerRecord<K, V> consumerRecord;\n+    private CompletableFuture<Void> ackFuture = new CompletableFuture<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     */\n+    public KafkaMessage(ConsumerRecord<K, V> consumerRecord) {\n+        this.consumerRecord = consumerRecord;\n+    }\n+\n+    @Override\n+    public ConsumerRecord<K, V> getPayload() {\n+        return consumerRecord;\n+    }\n+\n+    public CompletableFuture<Void> getAckFuture() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMDc4NA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYxMDY2OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0ODowM1rOF2unxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMToyNzowNlrOF7Wv7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTI2OQ==", "bodyText": "Constructors may never be public in Helidon, unless required by CDI or JAX-RS.\nWe use factory methods (if need to be public).", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392931269", "createdAt": "2020-03-16T10:48:03Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private ConsumerRecord<K, V> consumerRecord;\n+    private CompletableFuture<Void> ackFuture = new CompletableFuture<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     */\n+    public KafkaMessage(ConsumerRecord<K, V> consumerRecord) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc4MzAyMQ==", "bodyText": "It has package visibility now", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397783021", "createdAt": "2020-03-25T11:27:06Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private ConsumerRecord<K, V> consumerRecord;\n+    private CompletableFuture<Void> ackFuture = new CompletableFuture<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     */\n+    public KafkaMessage(ConsumerRecord<K, V> consumerRecord) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTI2OQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYxMjUxOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0ODozNlrOF2upAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0MzowNVrOF7XRZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTU4NQ==", "bodyText": "Is there no support for ack in Kafka itself? This basically makes the ack method a no-op.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392931585", "createdAt": "2020-03-16T10:48:36Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private ConsumerRecord<K, V> consumerRecord;\n+    private CompletableFuture<Void> ackFuture = new CompletableFuture<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     */\n+    public KafkaMessage(ConsumerRecord<K, V> consumerRecord) {\n+        this.consumerRecord = consumerRecord;\n+    }\n+\n+    @Override\n+    public ConsumerRecord<K, V> getPayload() {\n+        return consumerRecord;\n+    }\n+\n+    public CompletableFuture<Void> getAckFuture() {\n+        return ackFuture;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        ackFuture.complete(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MTU4OA==", "bodyText": "I spoke with @danielkec about this. The thing is that polling from Kafka is a blocking operation, and in reactive streams we cannot have threads blocked. So we need some way to make it in non-blocking way.\nThe workaround to deal with this is the BackPressureLayer. There we are buffering events coming from polling. That KafkaMessage.ack() is communication with BackPressureLayer, instead of doing it with Kafka.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397791588", "createdAt": "2020-03-25T11:43:05Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private ConsumerRecord<K, V> consumerRecord;\n+    private CompletableFuture<Void> ackFuture = new CompletableFuture<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     */\n+    public KafkaMessage(ConsumerRecord<K, V> consumerRecord) {\n+        this.consumerRecord = consumerRecord;\n+    }\n+\n+    @Override\n+    public ConsumerRecord<K, V> getPayload() {\n+        return consumerRecord;\n+    }\n+\n+    public CompletableFuture<Void> getAckFuture() {\n+        return ackFuture;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        ackFuture.complete(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMTU4NQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYxNTIzOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo0OToyNVrOF2uqzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0MzozN1rOF7XSfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMjA0Ng==", "bodyText": "The name is not good.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392932046", "createdAt": "2020-03-16T10:49:25Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * Reactive streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class SimplePublisher<K, V> implements Publisher<KafkaMessage<K, V>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDU2Ng==", "bodyText": "Also do you expect users to use this class? If not, it must not be public.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392934566", "createdAt": "2020-03-16T10:54:01Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * Reactive streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class SimplePublisher<K, V> implements Publisher<KafkaMessage<K, V>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMjA0Ng=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MTg3MQ==", "bodyText": "It is not public and it is renamed.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397791871", "createdAt": "2020-03-25T11:43:37Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * Reactive streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class SimplePublisher<K, V> implements Publisher<KafkaMessage<K, V>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzMjA0Ng=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTYzMzMwOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1NDozM1rOF2u1rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMTo0NDowNVrOF7XTiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDgyOA==", "bodyText": "Public constructor cannot be used. Also if class is not to be public, this method will not be public.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392934828", "createdAt": "2020-03-16T10:54:33Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * Reactive streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class SimplePublisher<K, V> implements Publisher<KafkaMessage<K, V>> {\n+\n+    private Consumer<Subscriber<? super KafkaMessage<K, V>>> publisher;\n+\n+    /**\n+     * Create new Reactive Streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+     *\n+     * @param publisher {@link java.util.function.Consumer}\n+     */\n+    public SimplePublisher(Consumer<Subscriber<? super KafkaMessage<K, V>>> publisher) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzc5MjEzOQ==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397792139", "createdAt": "2020-03-25T11:44:05Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/connector/SimplePublisher.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka.connector;\n+\n+import java.util.function.Consumer;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * Reactive streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+public class SimplePublisher<K, V> implements Publisher<KafkaMessage<K, V>> {\n+\n+    private Consumer<Subscriber<? super KafkaMessage<K, V>>> publisher;\n+\n+    /**\n+     * Create new Reactive Streams publisher using {@link java.util.function.Consumer} instead of reactive streams.\n+     *\n+     * @param publisher {@link java.util.function.Consumer}\n+     */\n+    public SimplePublisher(Consumer<Subscriber<? super KafkaMessage<K, V>>> publisher) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNDgyOA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY0MDgyOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1Njo1N1rOF2u6eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjoxNjo0NFrOF7YWlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjA1OA==", "bodyText": "I am not sure why this class implements Properties - is this used to send to Kafka itself?\nIf not, this class should not implement Properties.\nI am not sure if the properties are \"free\" - if so, use an internal Map<String, String> to store them.\nIf not free, use explicit fields to store such configuration.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392936058", "createdAt": "2020-03-16T10:56:57Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjQyMg==", "bodyText": "Do not use get verb in getters.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392936422", "createdAt": "2020-03-16T10:57:39Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjA1OA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNzM1MA==", "bodyText": "Helidon classes (except for very specific cases) must be immutable. Properties is not immutable.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392937350", "createdAt": "2020-03-16T10:59:19Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjA1OA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwOTMwMQ==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397809301", "createdAt": "2020-03-25T12:16:44Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjA1OA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY0MjY1OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1NzozMFrOF2u7iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxMjoxNzozMlrOF7YYWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjMyOA==", "bodyText": "This should happen at the time this instance is created and stored in a field.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392936328", "createdAt": "2020-03-16T10:57:30Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";\n+\n+    /**\n+     * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config},\n+     * underscores in keys are translated to dots.\n+     *\n+     * @param config parent config of kafka key\n+     */\n+    KafkaConfigProperties(Config config) {\n+        config.asNodeList().get().forEach(this::addProperty);\n+    }\n+\n+    /**\n+     * Split comma separated topic names.\n+     *\n+     * @return list of topic names\n+     */\n+    public List<String> getTopicNameList() {\n+        return Arrays.stream(getProperty(TOPIC_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzgwOTc1NA==", "bodyText": "This class is not instanced anymore. It contains some utility static methods.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397809754", "createdAt": "2020-03-25T12:17:32Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";\n+\n+    /**\n+     * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config},\n+     * underscores in keys are translated to dots.\n+     *\n+     * @param config parent config of kafka key\n+     */\n+    KafkaConfigProperties(Config config) {\n+        config.asNodeList().get().forEach(this::addProperty);\n+    }\n+\n+    /**\n+     * Split comma separated topic names.\n+     *\n+     * @return list of topic names\n+     */\n+    public List<String> getTopicNameList() {\n+        return Arrays.stream(getProperty(TOPIC_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNjMyOA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY0NzE3OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1ODo0NlrOF2u-NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMDowN1rOF7caGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNzAxMg==", "bodyText": "If you want to get everything into a map, just use config.detach().asMap().ifPresent(map -> ...)", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392937012", "createdAt": "2020-03-16T10:58:46Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";\n+\n+    /**\n+     * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config},\n+     * underscores in keys are translated to dots.\n+     *\n+     * @param config parent config of kafka key\n+     */\n+    KafkaConfigProperties(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NTczOQ==", "bodyText": "Great, thanks", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397875739", "createdAt": "2020-03-25T14:00:07Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";\n+\n+    /**\n+     * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config},\n+     * underscores in keys are translated to dots.\n+     *\n+     * @param config parent config of kafka key\n+     */\n+    KafkaConfigProperties(Config config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNzAxMg=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY1MDA2OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/PartitionsAssignedLatch.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMDo1OTozNVrOF2vADw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMDoxNlrOF7cagg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNzQ4Nw==", "bodyText": "Why is this class public?", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392937487", "createdAt": "2020-03-16T10:59:35Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/PartitionsAssignedLatch.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;\n+import org.apache.kafka.common.TopicPartition;\n+\n+/**\n+ * Waiting latch for partition assigment, after that is consumer ready to receive.\n+ */\n+public class PartitionsAssignedLatch extends CountDownLatch implements ConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NTg0Mg==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397875842", "createdAt": "2020-03-25T14:00:16Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/PartitionsAssignedLatch.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;\n+import org.apache.kafka.common.TopicPartition;\n+\n+/**\n+ * Waiting latch for partition assigment, after that is consumer ready to receive.\n+ */\n+public class PartitionsAssignedLatch extends CountDownLatch implements ConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzNzQ4Nw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY1Nzc4OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowMTo0MlrOF2vErw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1Nzo0M1rOF4Lxzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzODY3MQ==", "bodyText": "If I understand correctly, we want an implementation for Microprofile reactive messaging. In such a case, this class should not be public.\nAlso the name is not very good.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392938671", "createdAt": "2020-03-16T11:01:42Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NzU1MQ==", "bodyText": "I have changed the name and visibility", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394457551", "createdAt": "2020-03-18T15:57:43Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzODY3MQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY2MjA0OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowMjo1M1rOF2vHRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjowMjoxMVrOF4L_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzOTMzNA==", "bodyText": "Never use public constructors in Helidon.\nIf this class should be public (in which case the name should change), use a Builder pattern as in other Helidon classes.\nYou may have a static factory method, such as create(String, Config), but should be limited to one such method.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392939334", "createdAt": "2020-03-16T11:02:53Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;\n+    private ExecutorService externalExecutorService;\n+    private final List<String> topicNameList;\n+    private final KafkaConsumer<K, V> consumer;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName key in configuration\n+     * @param config      Helidon {@link io.helidon.config.Config config}\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MTE2OA==", "bodyText": "I think that class was designed with 2 purposes:\n\nTo be integrated with cdi\nTo be used from any other code to consume from Kafka.\n\nI have simplified this class for the first point. There is only one constructor.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394461168", "createdAt": "2020-03-18T16:02:11Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;\n+    private ExecutorService externalExecutorService;\n+    private final List<String> topicNameList;\n+    private final KafkaConsumer<K, V> consumer;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName key in configuration\n+     * @param config      Helidon {@link io.helidon.config.Config config}\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzOTMzNA=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY2Mzc4OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowMzoyMlrOF2vIUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjowMzowOVrOF4MCng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzOTYwMw==", "bodyText": "Creating a new executor service for each request is wrong use of executors.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392939603", "createdAt": "2020-03-16T11:03:22Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;\n+    private ExecutorService externalExecutorService;\n+    private final List<String> topicNameList;\n+    private final KafkaConsumer<K, V> consumer;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName key in configuration\n+     * @param config      Helidon {@link io.helidon.config.Config config}\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config) {\n+        this(channelName, config, null);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName     key in configuration\n+     * @param config          Helidon {@link io.helidon.config.Config config}\n+     * @param consumerGroupId Custom group.id, can be null, overrides group.id from configuration\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config, String consumerGroupId) {\n+        this.properties = new KafkaConfigProperties(config.get(\"mp.messaging.incoming\").get(channelName));\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(consumerGroupId));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = channelName;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    public SimpleKafkaConsumer(Config config) {\n+        this.properties = new KafkaConfigProperties(config);\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(null));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = null;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Execute supplied consumer for each received record.\n+     *\n+     * @param function to be executed for each received record\n+     * @return {@link java.util.concurrent.Future}\n+     */\n+    public Future<?> consumeAsync(Consumer<ConsumerRecord<K, V>> function) {\n+        return this.consumeAsync(Executors.newWorkStealingPool(), null, function);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MTg1NA==", "bodyText": "This part is out.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394461854", "createdAt": "2020-03-18T16:03:09Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;\n+    private ExecutorService externalExecutorService;\n+    private final List<String> topicNameList;\n+    private final KafkaConsumer<K, V> consumer;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName key in configuration\n+     * @param config      Helidon {@link io.helidon.config.Config config}\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config) {\n+        this(channelName, config, null);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName     key in configuration\n+     * @param config          Helidon {@link io.helidon.config.Config config}\n+     * @param consumerGroupId Custom group.id, can be null, overrides group.id from configuration\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config, String consumerGroupId) {\n+        this.properties = new KafkaConfigProperties(config.get(\"mp.messaging.incoming\").get(channelName));\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(consumerGroupId));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = channelName;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    public SimpleKafkaConsumer(Config config) {\n+        this.properties = new KafkaConfigProperties(config);\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(null));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = null;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Execute supplied consumer for each received record.\n+     *\n+     * @param function to be executed for each received record\n+     * @return {@link java.util.concurrent.Future}\n+     */\n+    public Future<?> consumeAsync(Consumer<ConsumerRecord<K, V>> function) {\n+        return this.consumeAsync(Executors.newWorkStealingPool(), null, function);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjkzOTYwMw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY2ODM5OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowNDo0OVrOF2vLRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjowMzoyOVrOF4MDlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDM1Nw==", "bodyText": "Info messages should be only printed if we know it will happen only once per runtime of Helidon. I am not sure this is the case.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392940357", "createdAt": "2020-03-16T11:04:49Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;\n+    private ExecutorService externalExecutorService;\n+    private final List<String> topicNameList;\n+    private final KafkaConsumer<K, V> consumer;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName key in configuration\n+     * @param config      Helidon {@link io.helidon.config.Config config}\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config) {\n+        this(channelName, config, null);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName     key in configuration\n+     * @param config          Helidon {@link io.helidon.config.Config config}\n+     * @param consumerGroupId Custom group.id, can be null, overrides group.id from configuration\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config, String consumerGroupId) {\n+        this.properties = new KafkaConfigProperties(config.get(\"mp.messaging.incoming\").get(channelName));\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(consumerGroupId));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = channelName;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    public SimpleKafkaConsumer(Config config) {\n+        this.properties = new KafkaConfigProperties(config);\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(null));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = null;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Execute supplied consumer for each received record.\n+     *\n+     * @param function to be executed for each received record\n+     * @return {@link java.util.concurrent.Future}\n+     */\n+    public Future<?> consumeAsync(Consumer<ConsumerRecord<K, V>> function) {\n+        return this.consumeAsync(Executors.newWorkStealingPool(), null, function);\n+    }\n+\n+    /**\n+     * Execute supplied consumer by provided executor service for each received record.\n+     *\n+     * @param executorService Custom executor service used for spinning up polling thread and record consuming threads\n+     * @param customTopics    Can be null, list of topics appended to the list from configuration\n+     * @param function        Consumer method executed in new thread for each received record\n+     * @return The Future's get method will return null when consumer is closed\n+     */\n+    public Future<?> consumeAsync(ExecutorService executorService, List<String> customTopics,\n+                                  Consumer<ConsumerRecord<K, V>> function) {\n+        LOGGER.info(String.format(\"Initiating kafka consumer %s listening to topics: %s with groupId: %s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2MjEwMw==", "bodyText": "This is removed too.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394462103", "createdAt": "2020-03-18T16:03:29Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;\n+    private ExecutorService externalExecutorService;\n+    private final List<String> topicNameList;\n+    private final KafkaConsumer<K, V> consumer;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName key in configuration\n+     * @param config      Helidon {@link io.helidon.config.Config config}\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config) {\n+        this(channelName, config, null);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param channelName     key in configuration\n+     * @param config          Helidon {@link io.helidon.config.Config config}\n+     * @param consumerGroupId Custom group.id, can be null, overrides group.id from configuration\n+     * @see KafkaConfigProperties\n+     * @see io.helidon.config.Config\n+     */\n+    public SimpleKafkaConsumer(String channelName, Config config, String consumerGroupId) {\n+        this.properties = new KafkaConfigProperties(config.get(\"mp.messaging.incoming\").get(channelName));\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(consumerGroupId));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = channelName;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    public SimpleKafkaConsumer(Config config) {\n+        this.properties = new KafkaConfigProperties(config);\n+        this.properties.setProperty(KafkaConfigProperties.GROUP_ID, getOrGenerateGroupId(null));\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumerId = null;\n+        this.consumer = new KafkaConsumer<>(properties);\n+    }\n+\n+    /**\n+     * Execute supplied consumer for each received record.\n+     *\n+     * @param function to be executed for each received record\n+     * @return {@link java.util.concurrent.Future}\n+     */\n+    public Future<?> consumeAsync(Consumer<ConsumerRecord<K, V>> function) {\n+        return this.consumeAsync(Executors.newWorkStealingPool(), null, function);\n+    }\n+\n+    /**\n+     * Execute supplied consumer by provided executor service for each received record.\n+     *\n+     * @param executorService Custom executor service used for spinning up polling thread and record consuming threads\n+     * @param customTopics    Can be null, list of topics appended to the list from configuration\n+     * @param function        Consumer method executed in new thread for each received record\n+     * @return The Future's get method will return null when consumer is closed\n+     */\n+    public Future<?> consumeAsync(ExecutorService executorService, List<String> customTopics,\n+                                  Consumer<ConsumerRecord<K, V>> function) {\n+        LOGGER.info(String.format(\"Initiating kafka consumer %s listening to topics: %s with groupId: %s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MDM1Nw=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNTY4MTExOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMTowODozMlrOF2vS_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoxMjo0MVrOF4MdTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MjMzNQ==", "bodyText": "This seems to be mutable (and wrongly).\nIf the consumer is only for a single use, make sure you construct the instance with all the configuration, then have a method to start listening. This will simplify a lot of checks.\nAlso not sure why there is executorService and externalExecutorService", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r392942335", "createdAt": "2020-03-16T11:08:32Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ2ODY4Nw==", "bodyText": "Now it is simpler.\nRegarding the executors, I followed your suggestion about usage of one unique ScheduledExecutorService that is shared between all the kafka consumers.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394468687", "createdAt": "2020-03-18T16:12:41Z", "author": {"login": "jbescos"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/kafka/SimpleKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,322 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.Consumer;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+import io.helidon.messaging.kafka.connector.KafkaMessage;\n+import io.helidon.messaging.kafka.connector.SimplePublisher;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.ConsumerRecords;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Simple Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ * <p>\n+ * Usage:\n+ * <pre>{@code\n+ *   try (SimpleKafkaConsumer<Long, String> c = new SimpleKafkaConsumer<>(\"test-channel\", Config.create())) {\n+ *         c.consumeAsync(r -> System.out.println(r.value()));\n+ *   }\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+public class SimpleKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(SimpleKafkaConsumer.class.getName());\n+    private final KafkaConfigProperties properties;\n+\n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final String consumerId;\n+    private ExecutorService executorService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjk0MjMzNQ=="}, "originalCommit": {"oid": "ffd1d154247f0dd9a9252b0ea12aa2e948531bee"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDk5MzU4OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNTo1NDo0NVrOF4LoBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODowMjoyMlrOF4jiJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTA0Ng==", "bodyText": "I am not sure if this while is acceptable because of CPU usage. However I put it there because the time frame must be very small (few milliseconds) or zero.\nLet me know if you prefer other way, with count down latch for example.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394455046", "createdAt": "2020-03-18T15:54:45Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    // We need this flag to avoid this task is executed more than one time at the same time by ScheduledExecutorService\n+    private final AtomicBoolean running = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber, \n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0, \n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        while (running.get()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2afe1de6f909848b6b58d0a9079522ee9ef5858f"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NTQ2MA==", "bodyText": "I will do this with a synchronize.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394845460", "createdAt": "2020-03-19T07:59:10Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    // We need this flag to avoid this task is executed more than one time at the same time by ScheduledExecutorService\n+    private final AtomicBoolean running = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber, \n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0, \n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        while (running.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTA0Ng=="}, "originalCommit": {"oid": "2afe1de6f909848b6b58d0a9079522ee9ef5858f"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0Njc1Ng==", "bodyText": "In this case I think it is much better to use a lock.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394846756", "createdAt": "2020-03-19T08:02:22Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    // We need this flag to avoid this task is executed more than one time at the same time by ScheduledExecutorService\n+    private final AtomicBoolean running = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber, \n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0, \n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        while (running.get()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ1NTA0Ng=="}, "originalCommit": {"oid": "2afe1de6f909848b6b58d0a9079522ee9ef5858f"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTEzOTY5OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxNjoyNzo0M1rOF4NG3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMDo1N1rOF7cctQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3OTMyNg==", "bodyText": "Uf this was my super bad idea, we have to do something about this, it basically ignores backpressure. Something like this would be much better:\nhttps://github.com/oracle/helidon/blob/1e5ae594bc356ecd1283e487a7e7f85e26355ee9/microprofile/reactive-streams/src/main/java/io/helidon/microprofile/reactive/EmittingPublisher.java\nBut that depends on protected RS with SequentialSubscriber,\nI expect David to remove SequentialSubscriber from RS implemetation in #1511 so it gets little more complicated then.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394479326", "createdAt": "2020-03-18T16:27:43Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    // We need this flag to avoid this task is executed more than one time at the same time by ScheduledExecutorService\n+    private final AtomicBoolean running = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2afe1de6f909848b6b58d0a9079522ee9ef5858f"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NjQwNQ==", "bodyText": "I integrated the EmittingSubscriber", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397876405", "createdAt": "2020-03-25T14:00:57Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,207 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    // We need this flag to avoid this task is executed more than one time at the same time by ScheduledExecutorService\n+    private final AtomicBoolean running = new AtomicBoolean(false);\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDQ3OTMyNg=="}, "originalCommit": {"oid": "2afe1de6f909848b6b58d0a9079522ee9ef5858f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI4MzQ3OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjoyOToxNFrOF4sPRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMTowNlrOF7cdGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4OTM4MA==", "bodyText": "This field is never used", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394989380", "createdAt": "2020-03-19T12:29:14Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NjUwNA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397876504", "createdAt": "2020-03-25T14:01:06Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4OTM4MA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI4NjAxOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozMDowMlrOF4sQ7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMjo0MFrOF7chuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4OTgwNQ==", "bodyText": "Please do not extends Properties in KafkaConfigProperties.\nAdd a method toProperties to that class that would return the properties required by KafkaConsumer", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394989805", "createdAt": "2020-03-19T12:30:02Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3NzY5MQ==", "bodyText": "I implemented it differently", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397877691", "createdAt": "2020-03-25T14:02:40Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk4OTgwNQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI5MDUzOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozMToyMFrOF4sTvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNDowOFrOF7cmMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MDUyNw==", "bodyText": "config is an immutable snapshot - read configuration options when creating this instance.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394990527", "createdAt": "2020-03-19T12:31:20Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MDk2OQ==", "bodyText": "Not sure - is this about \"polling\" or \"pooling\"?\nIf this is how often we poll Kafka for changes, then the correct key should be poll-timeout and constant POLL_TIMEOUT.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394990969", "createdAt": "2020-03-19T12:32:12Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MDUyNw=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3ODgzMw==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397878833", "createdAt": "2020-03-25T14:04:08Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MDUyNw=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI5NTQyOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozMjo1M1rOF4sW9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowMzoxMVrOF7cjQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MTM1MQ==", "bodyText": "If you return a constant from Optional.orElseGet, then use Optional.orElse", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394991351", "createdAt": "2020-03-19T12:32:53Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3ODA4Mg==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397878082", "createdAt": "2020-03-25T14:03:11Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MTM1MQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI5NzI1OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozMzoyN1rOF4sYOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNDoxNVrOF7cmig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MTY3Mw==", "bodyText": "Method should be package private", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394991673", "createdAt": "2020-03-19T12:33:27Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3ODkyMg==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397878922", "createdAt": "2020-03-25T14:04:15Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MTY3Mw=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODI5Nzk2OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozMzozOVrOF4sYpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNDozMlrOF7cnZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MTc4MA==", "bodyText": "Method should be package private", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394991780", "createdAt": "2020-03-19T12:33:39Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3OTE0MA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397879140", "createdAt": "2020-03-25T14:04:32Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MTc4MA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMwMTg4OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozNDo1MVrOF4sbFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMzozMDowNlrOF4uZvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MjQwNA==", "bodyText": "If you unlock a lock, another thread may lock it before you close the consumer.\nThe taskLock should be unlocked in a finally block after consumer.close()", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394992404", "createdAt": "2020-03-19T12:34:51Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        taskLock.lock();\n+        taskLock.unlock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAyNDgzMQ==", "bodyText": "In this case there is no other thread that could run later because the scheduler was stopped before forever. Still I'm thinking there is a very rare scenario that:\n\nScheduler started a task, and it doesn't reach the lock.\nShutdown is executed.\nclose() is executed and blocks. So task of point 1 is waiting.\nTask run and fails with unexpected error because the kafka connection is closed.\n\nSo a part of doing what you said, I will modify BackPressureLayer to check !scheduler.isShutdown()", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r395024831", "createdAt": "2020-03-19T13:30:06Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        taskLock.lock();\n+        taskLock.unlock();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5MjQwNA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMxNTg2OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozOTowM1rOF4skMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNDo0MlrOF7cn3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NDczNg==", "bodyText": "Please replace with:\nContext.Builder contextBuilder = Context.builder()\n                .id(String.format(\"kafka-message-%s:\", UUID.randomUUID().toString()));\n\nContexts.context().ifPresent(contextBuilder::parent);\n        \nContexts.runInContext(contextBuilder.build(), runnable);", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394994736", "createdAt": "2020-03-19T12:39:03Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        taskLock.lock();\n+        taskLock.unlock();\n+        LOGGER.fine(\"Closing kafka consumer\");\n+        consumer.close();\n+    }\n+\n+    //Move to messaging incoming connector\n+    private void runInNewContext(Runnable runnable) {\n+        Context parentContext = Context.create();\n+        Context context = Context\n+                .builder()\n+                .parent(parentContext)\n+                .id(String.format(\"%s:message-%s\", parentContext.id(), UUID.randomUUID().toString()))\n+                .build();\n+        Contexts.runInContext(context, runnable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3OTI2MA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397879260", "createdAt": "2020-03-25T14:04:42Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        taskLock.lock();\n+        taskLock.unlock();\n+        LOGGER.fine(\"Closing kafka consumer\");\n+        consumer.close();\n+    }\n+\n+    //Move to messaging incoming connector\n+    private void runInNewContext(Runnable runnable) {\n+        Context parentContext = Context.create();\n+        Context context = Context\n+                .builder()\n+                .parent(parentContext)\n+                .id(String.format(\"%s:message-%s\", parentContext.id(), UUID.randomUUID().toString()))\n+                .build();\n+        Contexts.runInContext(context, runnable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NDczNg=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 150}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMxOTA4OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjozOTo1MVrOF4smIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNDo1M1rOF7coWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NTIzNA==", "bodyText": "Definitely pollTimeout not poolTimeout", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394995234", "createdAt": "2020-03-19T12:39:51Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        taskLock.lock();\n+        taskLock.unlock();\n+        LOGGER.fine(\"Closing kafka consumer\");\n+        consumer.close();\n+    }\n+\n+    //Move to messaging incoming connector\n+    private void runInNewContext(Runnable runnable) {\n+        Context parentContext = Context.create();\n+        Context context = Context\n+                .builder()\n+                .parent(parentContext)\n+                .id(String.format(\"%s:message-%s\", parentContext.id(), UUID.randomUUID().toString()))\n+                .build();\n+        Contexts.runInContext(context, runnable);\n+    }\n+\n+    private final class BackPressureLayer implements Runnable {\n+\n+        private final LinkedList<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+        private final LinkedList<CompletableFuture<Void>> ackFutures = new LinkedList<>();\n+        private final Subscriber<? super KafkaMessage<K, V>> subscriber;\n+        private final long poolTimeout;\n+\n+        private BackPressureLayer(Subscriber<? super KafkaMessage<K, V>> subscriber, long poolTimeout) {\n+            this.subscriber = subscriber;\n+            this.poolTimeout = poolTimeout;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                taskLock.lock();\n+                waitForAcksAndPoll();\n+                ConsumerRecord<K, V> cr;\n+                while ((cr = backPressureBuffer.poll()) != null) {\n+                    KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr);\n+                    ackFutures.add(kafkaMessage.getAckFuture());\n+                    runInNewContext(() -> subscriber.onNext(kafkaMessage));\n+                }\n+            } finally {\n+                taskLock.unlock();\n+            }\n+        }\n+\n+        /**\n+         * Naive impl of back pressure wise lazy poll.\n+         * Wait for the last batch of records to be acknowledged before commit and another poll.\n+         */\n+        private void waitForAcksAndPoll() {\n+            if (backPressureBuffer.isEmpty()) {\n+                try {\n+                    if (!ackFutures.isEmpty()) {\n+                        LOGGER.fine(String.format(\"Wait for %s ACKs\", ackFutures.size()));\n+                        CompletableFuture.allOf(ackFutures.toArray(new CompletableFuture[0])).get();\n+                        ackFutures.clear();\n+                        consumer.commitSync();\n+                    }\n+                    consumer.poll(Duration.ofMillis(poolTimeout)).forEach(backPressureBuffer::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 194}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3OTM4Ng==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397879386", "createdAt": "2020-03-25T14:04:53Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaConsumer.java", "diffHunk": "@@ -0,0 +1,206 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Basic Kafka consumer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaConsumer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaConsumer.class.getName());\n+    private static final String POOL_TIMEOUT = \"pool.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private final KafkaConfigProperties properties;\n+    private final Config config;\n+    private final Lock taskLock = new ReentrantLock();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final List<String> topicNameList;\n+    // It is not thread safe. It needs to be closed in the same thread it reads events.\n+    // We need to keep the reference here to be able to wake up from pooling when shuting down\n+    private final KafkaConsumer<K, V> consumer;\n+    private final ScheduledExecutorService scheduler;\n+\n+    /**\n+     * Kafka consumer created from {@link io.helidon.config.Config config}\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     * @param scheduler Helidon {@link java.util.concurrent.ScheduledExecutorService scheduler}\n+     */\n+    BasicKafkaConsumer(Config config, ScheduledExecutorService scheduler) {\n+        this.config = config;\n+        this.properties = new KafkaConfigProperties(config);\n+        this.topicNameList = properties.getTopicNameList();\n+        this.consumer = new KafkaConsumer<>(properties);\n+        this.scheduler = scheduler;\n+    }\n+\n+    /**\n+     * Create publisher builder.\n+     *\n+     * @return {@link org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder}\n+     */\n+    public PublisherBuilder<? extends Message<?>> createPushPublisherBuilder() {\n+        return ReactiveStreams.fromPublisher(new BasicPublisher<K, V>(subscriber -> {\n+            subscriber.onSubscribe(new Subscription() {\n+                @Override\n+                public void request(long n) {\n+                    // Pushing Kafka consumer doesn't support requests.\n+                }\n+\n+                @Override\n+                public void cancel() {\n+                    BasicKafkaConsumer.this.close();\n+                    LOGGER.log(Level.FINE, \"Subscription cancelled.\");\n+                }\n+            });\n+            consumer.subscribe(topicNameList, partitionsAssignedLatch);\n+            scheduler.scheduleAtFixedRate(new BackPressureLayer(subscriber,\n+                    config.get(POOL_TIMEOUT).asLong().asOptional().orElseGet(() -> 50L)), 0,\n+                    config.get(PERIOD_EXECUTIONS).asLong().asOptional().orElseGet(() -> 100L), TimeUnit.MILLISECONDS);\n+        }));\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned,\n+     * since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    public void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Close gracefully. Stops wakes possible blocked poll and close consumer.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        consumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        taskLock.lock();\n+        taskLock.unlock();\n+        LOGGER.fine(\"Closing kafka consumer\");\n+        consumer.close();\n+    }\n+\n+    //Move to messaging incoming connector\n+    private void runInNewContext(Runnable runnable) {\n+        Context parentContext = Context.create();\n+        Context context = Context\n+                .builder()\n+                .parent(parentContext)\n+                .id(String.format(\"%s:message-%s\", parentContext.id(), UUID.randomUUID().toString()))\n+                .build();\n+        Contexts.runInContext(context, runnable);\n+    }\n+\n+    private final class BackPressureLayer implements Runnable {\n+\n+        private final LinkedList<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+        private final LinkedList<CompletableFuture<Void>> ackFutures = new LinkedList<>();\n+        private final Subscriber<? super KafkaMessage<K, V>> subscriber;\n+        private final long poolTimeout;\n+\n+        private BackPressureLayer(Subscriber<? super KafkaMessage<K, V>> subscriber, long poolTimeout) {\n+            this.subscriber = subscriber;\n+            this.poolTimeout = poolTimeout;\n+        }\n+\n+        @Override\n+        public void run() {\n+            try {\n+                taskLock.lock();\n+                waitForAcksAndPoll();\n+                ConsumerRecord<K, V> cr;\n+                while ((cr = backPressureBuffer.poll()) != null) {\n+                    KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr);\n+                    ackFutures.add(kafkaMessage.getAckFuture());\n+                    runInNewContext(() -> subscriber.onNext(kafkaMessage));\n+                }\n+            } finally {\n+                taskLock.unlock();\n+            }\n+        }\n+\n+        /**\n+         * Naive impl of back pressure wise lazy poll.\n+         * Wait for the last batch of records to be acknowledged before commit and another poll.\n+         */\n+        private void waitForAcksAndPoll() {\n+            if (backPressureBuffer.isEmpty()) {\n+                try {\n+                    if (!ackFutures.isEmpty()) {\n+                        LOGGER.fine(String.format(\"Wait for %s ACKs\", ackFutures.size()));\n+                        CompletableFuture.allOf(ackFutures.toArray(new CompletableFuture[0])).get();\n+                        ackFutures.clear();\n+                        consumer.commitSync();\n+                    }\n+                    consumer.poll(Duration.ofMillis(poolTimeout)).forEach(backPressureBuffer::add);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NTIzNA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 194}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMyMDgxOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0MDoyMlrOF4snJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNTowNlrOF7co8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NTQ5NA==", "bodyText": "method should be package local", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394995494", "createdAt": "2020-03-19T12:40:22Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NTc5OA==", "bodyText": "(and all other public methods in this class)", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394995798", "createdAt": "2020-03-19T12:40:53Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NTQ5NA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3OTUzNg==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397879536", "createdAt": "2020-03-25T14:05:06Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NTQ5NA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMyNTkxOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0MTo1NFrOF4sqjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNToxNlrOF7cpiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NjM2Nw==", "bodyText": "Using null is not encouraged in Helidon. Would be better to send correct defaults rather than nulls - this is very error prone", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394996367", "createdAt": "2020-03-19T12:41:54Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {\n+        List<Future<RecordMetadata>> futureRecords =\n+                produceAsync(null, null, null, null, value, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg3OTY4OQ==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397879689", "createdAt": "2020-03-25T14:05:16Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {\n+        List<Future<RecordMetadata>> futureRecords =\n+                produceAsync(null, null, null, null, value, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5NjM2Nw=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMyOTYyOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0Mjo1NVrOF4ss1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNjo1NlrOF7cuNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5Njk0OQ==", "bodyText": "This is an error - throw an exception", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394996949", "createdAt": "2020-03-19T12:42:55Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {\n+        List<Future<RecordMetadata>> futureRecords =\n+                produceAsync(null, null, null, null, value, null);\n+        List<RecordMetadata> metadataList = new ArrayList<>(futureRecords.size());\n+\n+        for (Future<RecordMetadata> future : futureRecords) {\n+            try {\n+                metadataList.add(future.get());\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new RuntimeException(\"Failed to send topic\", e);\n+            }\n+        }\n+        return metadataList;\n+    }\n+\n+    /**\n+     * Produce asynchronously.\n+     *\n+     * @param value value to be produced\n+     * @return list of futures\n+     */\n+    public List<Future<RecordMetadata>> produceAsync(V value) {\n+        return produceAsync(null, null, null, null, value, null);\n+    }\n+\n+    /**\n+     * Send record to all provided topics, don't wait for server acknowledgement.\n+     *\n+     * @param customTopics Can be null, list of topics appended to the list from configuration,\n+     *                     record will be sent to all topics iteratively\n+     * @param partition    Can be null, if key is also null topic is sent to random partition\n+     * @param timestamp    Can be null System.currentTimeMillis() is used then\n+     * @param key          Can be null, if not, topics are grouped to partitions by key\n+     * @param value        Will be serialized by value.serializer class defined in configuration\n+     * @param headers      Can be null, custom headers for additional meta information if needed\n+     * @return Futures of server acknowledged metadata about sent topics\n+     */\n+    public List<Future<RecordMetadata>> produceAsync(List<String> customTopics,\n+                                                     Integer partition,\n+                                                     Long timestamp,\n+                                                     K key,\n+                                                     V value,\n+                                                     Iterable<Header> headers) {\n+\n+        List<String> mergedTopics = new ArrayList<>();\n+        mergedTopics.addAll(properties.getTopicNameList());\n+        mergedTopics.addAll(Optional.ofNullable(customTopics).orElse(Collections.emptyList()));\n+\n+        if (mergedTopics.isEmpty()) {\n+            LOGGER.warning(\"No topic names provided in configuration or by parameter. Nothing sent.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDg4Nw==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397880887", "createdAt": "2020-03-25T14:06:56Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/BasicKafkaProducer.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.ProducerRecord;\n+import org.apache.kafka.clients.producer.RecordMetadata;\n+import org.apache.kafka.common.header.Header;\n+\n+/**\n+ * Basic Kafka producer covering basic use-cases.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ * For more info about configuration see {@link KafkaConfigProperties}.\n+ * <p>\n+ * Usage:\n+ * <pre>{@code new SimpleKafkaProducer<Long, String>(\"job-done-producer\", Config.create())\n+ *             .produce(\"Hello world!\");\n+ * }</pre>\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see KafkaConfigProperties\n+ * @see io.helidon.config.Config\n+ */\n+class BasicKafkaProducer<K, V> implements Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(BasicKafkaProducer.class.getName());\n+    private final KafkaConfigProperties properties;\n+    private final KafkaProducer<K, V> producer;\n+\n+    /**\n+     * Kafka producer created from {@link io.helidon.config.Config config} under kafka-producerId,\n+     * see configuration {@link KafkaConfigProperties example}.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    BasicKafkaProducer(Config config) {\n+        properties = new KafkaConfigProperties(config);\n+        producer = new KafkaProducer<>(properties);\n+    }\n+\n+    /**\n+     * Send record to all provided topics,\n+     * blocking until all records are acknowledged by broker.\n+     *\n+     * @param value Will be serialized by <b>value.serializer</b> class\n+     *              defined in {@link KafkaConfigProperties configuration}\n+     * @return Server acknowledged metadata about sent topics\n+     */\n+    public List<RecordMetadata> produce(V value) {\n+        List<Future<RecordMetadata>> futureRecords =\n+                produceAsync(null, null, null, null, value, null);\n+        List<RecordMetadata> metadataList = new ArrayList<>(futureRecords.size());\n+\n+        for (Future<RecordMetadata> future : futureRecords) {\n+            try {\n+                metadataList.add(future.get());\n+            } catch (InterruptedException | ExecutionException e) {\n+                throw new RuntimeException(\"Failed to send topic\", e);\n+            }\n+        }\n+        return metadataList;\n+    }\n+\n+    /**\n+     * Produce asynchronously.\n+     *\n+     * @param value value to be produced\n+     * @return list of futures\n+     */\n+    public List<Future<RecordMetadata>> produceAsync(V value) {\n+        return produceAsync(null, null, null, null, value, null);\n+    }\n+\n+    /**\n+     * Send record to all provided topics, don't wait for server acknowledgement.\n+     *\n+     * @param customTopics Can be null, list of topics appended to the list from configuration,\n+     *                     record will be sent to all topics iteratively\n+     * @param partition    Can be null, if key is also null topic is sent to random partition\n+     * @param timestamp    Can be null System.currentTimeMillis() is used then\n+     * @param key          Can be null, if not, topics are grouped to partitions by key\n+     * @param value        Will be serialized by value.serializer class defined in configuration\n+     * @param headers      Can be null, custom headers for additional meta information if needed\n+     * @return Futures of server acknowledged metadata about sent topics\n+     */\n+    public List<Future<RecordMetadata>> produceAsync(List<String> customTopics,\n+                                                     Integer partition,\n+                                                     Long timestamp,\n+                                                     K key,\n+                                                     V value,\n+                                                     Iterable<Header> headers) {\n+\n+        List<String> mergedTopics = new ArrayList<>();\n+        mergedTopics.addAll(properties.getTopicNameList());\n+        mergedTopics.addAll(Optional.ofNullable(customTopics).orElse(Collections.emptyList()));\n+\n+        if (mergedTopics.isEmpty()) {\n+            LOGGER.warning(\"No topic names provided in configuration or by parameter. Nothing sent.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5Njk0OQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODMzNjAxOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConfigProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0NDo0M1rOF4swvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNzowMlrOF7cunA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5Nzk0OQ==", "bodyText": "This is never used.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394997949", "createdAt": "2020-03-19T12:44:43Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MDk4OA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397880988", "createdAt": "2020-03-25T14:07:02Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5Nzk0OQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM0MjA2OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConfigProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0NjozM1rOF4s0vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowOToyN1rOF7c1sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5ODk3Mw==", "bodyText": "This is not the correct way to do this (I mentioned this in my previous review.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394998973", "createdAt": "2020-03-19T12:46:33Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";\n+\n+    /**\n+     * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config},\n+     * underscores in keys are translated to dots.\n+     *\n+     * @param config parent config of kafka key\n+     */\n+    KafkaConfigProperties(Config config) {\n+        config.asNodeList().get().forEach(this::addProperty);\n+    }\n+\n+    /**\n+     * Split comma separated topic names.\n+     *\n+     * @return list of topic names\n+     */\n+    public List<String> getTopicNameList() {\n+        return Arrays.stream(getProperty(TOPIC_NAME)\n+                .split(\",\"))\n+                .map(String::trim)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void addProperty(Config c) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MjgwMA==", "bodyText": "Sorry I didn't notice github was hiding some comments.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397882800", "createdAt": "2020-03-25T14:09:27Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConfigProperties.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.stream.Collectors;\n+\n+import io.helidon.config.Config;\n+\n+/**\n+ * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config}.\n+ * Configuration format as specified in the MicroProfile Reactive Messaging\n+ * Specification https://github.com/eclipse/microprofile-reactive-messaging\n+ *\n+ * <p>\n+ * See example with YAML configuration:\n+ * <pre>{@code\n+ * mp.messaging:\n+ *   incoming:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.deserializer: org.apache.kafka.common.serialization.LongDeserializer\n+ *       value.deserializer: org.apache.kafka.common.serialization.StringDeserializer\n+ *\n+ *   outgoing:\n+ *     test-channel:\n+ *       bootstrap.servers: localhost:9092\n+ *       topic: graph-done\n+ *       key.serializer: org.apache.kafka.common.serialization.LongSerializer\n+ *       value.serializer: org.apache.kafka.common.serialization.StringSerializer\n+ *\n+ * }</pre>\n+ * <p>\n+ *\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaConfigProperties extends Properties {\n+\n+    /**\n+     * Topic or topics delimited by commas.\n+     */\n+    static final String TOPIC_NAME = \"topic\";\n+\n+    /**\n+     * Consumer group id.\n+     */\n+    static final String GROUP_ID = \"group.id\";\n+\n+    /**\n+     * Prepare Kafka properties from Helidon {@link io.helidon.config.Config Config},\n+     * underscores in keys are translated to dots.\n+     *\n+     * @param config parent config of kafka key\n+     */\n+    KafkaConfigProperties(Config config) {\n+        config.asNodeList().get().forEach(this::addProperty);\n+    }\n+\n+    /**\n+     * Split comma separated topic names.\n+     *\n+     * @return list of topic names\n+     */\n+    public List<String> getTopicNameList() {\n+        return Arrays.stream(getProperty(TOPIC_NAME)\n+                .split(\",\"))\n+                .map(String::trim)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private void addProperty(Config c) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5ODk3Mw=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM0NTYyOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0Nzo0NVrOF4s3OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowNzo0NFrOF7cwfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5OTYwOQ==", "bodyText": "Please use Helidon ScheduledThreadPoolSupplier, that is already fully configurable using Helidon Config", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394999609", "createdAt": "2020-03-19T12:47:45Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5OTY4Ng==", "bodyText": "Also supports context propagation.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r394999686", "createdAt": "2020-03-19T12:47:53Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5OTYwOQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMDM4Nw==", "bodyText": "scheduler = ScheduledThreadPoolSupplier.builder()\n                .threadNamePrefix(\"kafka-\")\n                .config(config)\n                .build()\n                .get();", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r395000387", "createdAt": "2020-03-19T12:49:14Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5OTYwOQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MTQ3MQ==", "bodyText": "Thanks for the information, I have modified it to that", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397881471", "createdAt": "2020-03-25T14:07:44Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk5OTYwOQ=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM1MjE2OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo0OTo0M1rOF4s7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDowOTo0MFrOF7c2RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMDY0Mw==", "bodyText": "This method should be private or package local.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r395000643", "createdAt": "2020-03-19T12:49:43Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4Mjk0OA==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397882948", "createdAt": "2020-03-25T14:09:40Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMDY0Mw=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM1NTE4OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo1MDozNVrOF4s9Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo1MDozNVrOF4s9Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTEwMg==", "bodyText": "Do not use info log level so much. If you want to log an info message, just log a single one in this method.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r395001102", "createdAt": "2020-03-19T12:50:35Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        LOGGER.info(\"Terminating KafkaConnectorFactory...\");\n+        // Stops the scheduler first to make sure no new task will be triggered meanwhile consumers are closing\n+        scheduler.shutdown();\n+        BasicKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+        BasicKafkaProducer<Object, Object> producer;\n+        while ((producer = producers.poll()) != null) {\n+            producer.close();\n+        }\n+        LOGGER.info(\"KafkaConnectorFactory terminated successfuly\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM1NjAzOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo1MDo1MVrOF4s9pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoxMDoxNFrOF7c32Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTI1Mg==", "bodyText": "Method should be package local.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r395001252", "createdAt": "2020-03-19T12:50:51Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        LOGGER.info(\"Terminating KafkaConnectorFactory...\");\n+        // Stops the scheduler first to make sure no new task will be triggered meanwhile consumers are closing\n+        scheduler.shutdown();\n+        BasicKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+        BasicKafkaProducer<Object, Object> producer;\n+        while ((producer = producers.poll()) != null) {\n+            producer.close();\n+        }\n+        LOGGER.info(\"KafkaConnectorFactory terminated successfuly\");\n+    }\n+\n+    public Collection<BasicKafkaConsumer<Object, Object>> getConsumers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MzM1Mw==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397883353", "createdAt": "2020-03-25T14:10:14Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        LOGGER.info(\"Terminating KafkaConnectorFactory...\");\n+        // Stops the scheduler first to make sure no new task will be triggered meanwhile consumers are closing\n+        scheduler.shutdown();\n+        BasicKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+        BasicKafkaProducer<Object, Object> producer;\n+        while ((producer = producers.poll()) != null) {\n+            producer.close();\n+        }\n+        LOGGER.info(\"KafkaConnectorFactory terminated successfuly\");\n+    }\n+\n+    public Collection<BasicKafkaConsumer<Object, Object>> getConsumers() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTI1Mg=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0ODM1ODYzOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMjo1MTo0MlrOF4s_bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNVQxNDoxMDozMVrOF7c4rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTcwOA==", "bodyText": "You should close the producer in onError as well, as onComplete may never be called.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r395001708", "createdAt": "2020-03-19T12:51:42Z", "author": {"login": "tomas-langer"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        LOGGER.info(\"Terminating KafkaConnectorFactory...\");\n+        // Stops the scheduler first to make sure no new task will be triggered meanwhile consumers are closing\n+        scheduler.shutdown();\n+        BasicKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+        BasicKafkaProducer<Object, Object> producer;\n+        while ((producer = producers.poll()) != null) {\n+            producer.close();\n+        }\n+        LOGGER.info(\"KafkaConnectorFactory terminated successfuly\");\n+    }\n+\n+    public Collection<BasicKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        BasicKafkaConsumer<Object, Object> basicKafkaConsumer = new BasicKafkaConsumer<>(helidonConfig, scheduler);\n+        consumers.add(basicKafkaConsumer);\n+        return basicKafkaConsumer.createPushPublisherBuilder();\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        BasicKafkaProducer<Object, Object> basicKafkaProducer = new BasicKafkaProducer<>(helidonConfig);\n+        producers.add(basicKafkaProducer);\n+        return ReactiveStreams.fromSubscriber(new Subscriber<Message<?>>() {\n+\n+            @Override\n+            public void onSubscribe(Subscription s) {\n+                s.request(Long.MAX_VALUE);\n+            }\n+\n+            @Override\n+            public void onNext(Message<?> message) {\n+                LOGGER.fine(\"On next received \" + message.getPayload());\n+                basicKafkaProducer.produce(message.getPayload());\n+                message.ack();\n+            }\n+\n+            @Override\n+            public void onError(Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Nzg4MzU2Ng==", "bodyText": "Done", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r397883566", "createdAt": "2020-03-25T14:10:31Z", "author": {"login": "jbescos"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnectorFactory.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.LinkedList;\n+import java.util.Queue;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Implementation of Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnectorFactory.CONNECTOR_NAME)\n+class KafkaConnectorFactory implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final String POOL_SIZE = \"kafka.connector.pool.size\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnectorFactory.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<BasicKafkaConsumer<Object, Object>> consumers = new LinkedList<>();\n+    private final Queue<BasicKafkaProducer<Object, Object>> producers = new LinkedList<>();\n+\n+    @Inject\n+    KafkaConnectorFactory(Config config) {\n+        scheduler = Executors.newScheduledThreadPool(config.get(POOL_SIZE)\n+                .asInt().asOptional().orElseGet(() -> 10));\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {\n+        LOGGER.info(\"Terminating KafkaConnectorFactory...\");\n+        // Stops the scheduler first to make sure no new task will be triggered meanwhile consumers are closing\n+        scheduler.shutdown();\n+        BasicKafkaConsumer<Object, Object> consumer;\n+        while ((consumer = consumers.poll()) != null) {\n+            consumer.close();\n+        }\n+        BasicKafkaProducer<Object, Object> producer;\n+        while ((producer = producers.poll()) != null) {\n+            producer.close();\n+        }\n+        LOGGER.info(\"KafkaConnectorFactory terminated successfuly\");\n+    }\n+\n+    public Collection<BasicKafkaConsumer<Object, Object>> getConsumers() {\n+        return consumers;\n+    }\n+\n+    @Override\n+    public PublisherBuilder<? extends Message<?>> getPublisherBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        BasicKafkaConsumer<Object, Object> basicKafkaConsumer = new BasicKafkaConsumer<>(helidonConfig, scheduler);\n+        consumers.add(basicKafkaConsumer);\n+        return basicKafkaConsumer.createPushPublisherBuilder();\n+    }\n+\n+    @Override\n+    public SubscriberBuilder<? extends Message<?>, Void> getSubscriberBuilder(org.eclipse.microprofile.config.Config config) {\n+        Config helidonConfig = (Config) config;\n+        BasicKafkaProducer<Object, Object> basicKafkaProducer = new BasicKafkaProducer<>(helidonConfig);\n+        producers.add(basicKafkaProducer);\n+        return ReactiveStreams.fromSubscriber(new Subscriber<Message<?>>() {\n+\n+            @Override\n+            public void onSubscribe(Subscription s) {\n+                s.request(Long.MAX_VALUE);\n+            }\n+\n+            @Override\n+            public void onNext(Message<?> message) {\n+                LOGGER.fine(\"On next received \" + message.getPayload());\n+                basicKafkaProducer.produce(message.getPayload());\n+                message.ack();\n+            }\n+\n+            @Override\n+            public void onError(Throwable t) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTAwMTcwOA=="}, "originalCommit": {"oid": "14b719af384ec92656a7de6608546824a533d797"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTE5NDMyOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/EmittingPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNzowNFrOF9k8Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMToxNzowNFrOF9k8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDExMjY2Ng==", "bodyText": "NPE rethrow was intentional, as its reserved as a signal for upstream (\u00a72.13) and this is not the place we are able to solve kafka client errors. On the other hand I am more and more convinced we should remove abstraction layer between BasicKafkaConsumer, BasicKafkaPublisher,  EmittingPublisher and create one specialized KafkaConsumingPublisher, which can be used in both Helidon MP and SE", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r400112666", "createdAt": "2020-03-30T11:17:04Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/EmittingPublisher.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.Logger;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Emitting reactive streams publisher to be used by {@code ReactiveStreams.fromPublisher},\n+ * should be deprecated in favor of {@code org.eclipse.microprofile.reactive.messaging.Emitter}\n+ * in the future version of messaging.\n+ *\n+ * @param <T> type of emitted item\n+ */\n+class EmittingPublisher<T> implements Publisher<T> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(EmittingPublisher.class.getName());\n+    private Subscriber<? super T> subscriber;\n+    private final AtomicReference<State> state = new AtomicReference<>(State.NOT_REQUESTED_YET);\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicBoolean terminated = new AtomicBoolean();\n+    private final Optional<Callback<Long>> requestsCallback;\n+\n+    protected EmittingPublisher(Optional<Callback<Long>> requestsCallback) {\n+        this.requestsCallback = requestsCallback;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        Objects.requireNonNull(subscriber, \"subscriber is null\");\n+        this.subscriber = subscriber;\n+        subscriber.onSubscribe(new Subscription() {\n+            @Override\n+            public void request(final long n) {\n+                if (n < 1) {\n+                    fail(new IllegalArgumentException(\"Rule \u00a73.9 violated: non-positive request amount is forbidden\"));\n+                }\n+                LOGGER.fine(String.format(\"Request %s events\", n));\n+                requested.updateAndGet(r -> Long.MAX_VALUE - r > n ? n + r : Long.MAX_VALUE);\n+                state.compareAndSet(State.NOT_REQUESTED_YET, State.READY_TO_EMIT);\n+                requestsCallback.ifPresent(callback -> callback.nofity(n));\n+            }\n+\n+            @Override\n+            public void cancel() {\n+                LOGGER.fine(\"Subscription cancelled\");\n+                state.compareAndSet(State.NOT_REQUESTED_YET, State.CANCELLED);\n+                state.compareAndSet(State.READY_TO_EMIT, State.CANCELLED);\n+            }\n+\n+        });\n+    }\n+\n+    /**\n+     * Properly fail the stream, set publisher to cancelled state and send {@code onError} signal downstream.\n+     * Signal {@code onError} is sent only once, any other call to this method is no-op.\n+     *\n+     * @param throwable Sent as {@code onError} signal\n+     */\n+    void fail(Throwable throwable) {\n+        if (!terminated.getAndSet(true) && subscriber != null) {\n+            state.compareAndSet(State.NOT_REQUESTED_YET, State.CANCELLED);\n+            state.compareAndSet(State.READY_TO_EMIT, State.CANCELLED);\n+            this.subscriber.onError(throwable);\n+        }\n+    }\n+\n+    /**\n+     * Properly complete the stream, set publisher to completed state and send {@code onComplete} signal downstream.\n+     * Signal {@code onComplete} is sent only once, any other call to this method is no-op.\n+     */\n+    void complete() {\n+        if (!terminated.getAndSet(true) && subscriber != null) {\n+            state.compareAndSet(State.NOT_REQUESTED_YET, State.COMPLETED);\n+            state.compareAndSet(State.READY_TO_EMIT, State.COMPLETED);\n+            this.subscriber.onComplete();\n+        }\n+    }\n+\n+    /**\n+     * Emit one item to the stream, if there is enough requested, item is signaled to downstream as {@code onNext}\n+     * and method returns true. If there is requested less than 1, nothing is sent and method returns false.\n+     *\n+     * @param item to be sent downstream\n+     * @return true if item successfully sent\n+     * @throws java.lang.IllegalStateException if publisher is cancelled\n+     */\n+    boolean emit(T item) {\n+        return this.state.get().emit(this, item);\n+    }\n+\n+    /**\n+     * Check if publisher is in terminal state CANCELLED.\n+     *\n+     * @return true if so\n+     */\n+    boolean isCancelled() {\n+        return this.state.get() == State.CANCELLED;\n+    }\n+\n+    /**\n+     * Check if publisher is in terminal state COMPLETED.\n+     *\n+     * @return true if so\n+     */\n+    boolean isCompleted() {\n+        return this.state.get() == State.COMPLETED;\n+    }\n+\n+    private enum State {\n+        NOT_REQUESTED_YET {\n+            @Override\n+            <T> boolean emit(EmittingPublisher<T> publisher, T item) {\n+                return false;\n+            }\n+        },\n+        READY_TO_EMIT {\n+            @Override\n+            <T> boolean emit(EmittingPublisher<T> publisher, T item) {\n+                if (publisher.requested.getAndDecrement() < 1) {\n+                    return false;\n+                }\n+                try {\n+                    publisher.subscriber.onNext(item);\n+                    return true;\n+                } catch (Throwable t) {\n+                    publisher.fail(t);\n+                    return false;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf791bbc62232b546d3e492a4e9bfb127a7a7a3"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjQ5MTYzOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1Njo0NlrOGDpHrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMDo1Njo0NlrOGDpHrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ3MjYyMA==", "bodyText": "Spotbugs is \"picky\", maxEvents doesn't have to be volatile at all. Kafka publisher should be unbounded in runtime so maxEvents shoudn't be needed. It can be tested like this:\npublic Publisher<KafkaMessage<String, Long>> createPublisher(long elements) {\n...\n        return ReactiveStreams.fromPublisher(\n                KafkaPublisher.build(Executors.newScheduledThreadPool(2), \n                        kafkaConsumer, \n                        Arrays.asList(TEST_TOPIC_1), \n                        1L, \n                        POLL_TIMEOUT, \n                        true))\n                .limit(elements);", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r406472620", "createdAt": "2020-04-09T20:56:46Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * This is an implementation of {@link org.reactivestreams.Publisher} that read events from\n+ * Kafka and push them downstream to one subscriber.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaPublisher<K, V> implements Publisher<KafkaMessage<K, V>>, Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaPublisher.class.getName());\n+    private static final String POLL_TIMEOUT = \"poll.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private static final String MAX_EVENTS = \"max.events\";\n+    private static final String ENABLE_AUTOCOMMIT = \"enable.auto.commit\";\n+    private static final String ACK_TIMEOUT = \"ack.timeout.millis\";\n+    private static final String LIMIT_NO_ACK = \"limit.no.ack\";\n+    private final Lock taskLock = new ReentrantLock();\n+    private final Queue<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+    private final Map<TopicPartition, List<KafkaMessage<K, V>>> pendingCommits = new HashMap<>();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final ScheduledExecutorService scheduler;\n+    private final Consumer<K, V> kafkaConsumer;\n+    private final AtomicLong requests = new AtomicLong();\n+    private final EmittingPublisher<KafkaMessage<K, V>> emiter =\n+            new EmittingPublisher<>(requested -> requests.addAndGet(requested));\n+    private final List<String> topics;\n+    private final long periodExecutions;\n+    private final long pollTimeout;\n+    private final boolean autoCommit;\n+    private final long ackTimeout;\n+    private final int limitNoAck;\n+    private volatile long maxEvents;\n+\n+    private KafkaPublisher(ScheduledExecutorService scheduler, Consumer<K, V> kafkaConsumer,\n+            List<String> topics, long pollTimeout, long periodExecutions, long maxEvents,\n+            boolean autoCommit, long ackTimeout, int limitNoAck) {\n+        this.scheduler = scheduler;\n+        this.kafkaConsumer = kafkaConsumer;\n+        this.topics = topics;\n+        this.periodExecutions = periodExecutions;\n+        this.pollTimeout = pollTimeout;\n+        this.maxEvents = maxEvents;\n+        this.autoCommit = autoCommit;\n+        this.ackTimeout = ackTimeout;\n+        this.limitNoAck = limitNoAck;\n+    }\n+\n+    /**\n+     * Starts to consume events from Kafka to send them downstream till\n+     * {@link io.helidon.microprofile.connectors.kafka.KafkaPublisher#close()} is invoked.\n+     * This execution runs in one thread that is triggered by the scheduler.\n+     */\n+    private void execute() {\n+        kafkaConsumer.subscribe(topics, partitionsAssignedLatch);\n+        // This thread reads from Kafka topics and push in kafkaBufferedEvents\n+        scheduler.scheduleAtFixedRate(() -> {\n+            try {\n+                // Need to lock to avoid onClose() is executed meanwhile task is running\n+                taskLock.lock();\n+                if (!scheduler.isShutdown() && !emiter.isTerminated()) {\n+                    int currentNoAck = currentNoAck();\n+                    if (currentNoAck < limitNoAck) {\n+                        if (backPressureBuffer.isEmpty()) {\n+                            try {\n+                                kafkaConsumer.poll(Duration.ofMillis(pollTimeout)).forEach(backPressureBuffer::add);\n+                            } catch (WakeupException e) {\n+                                LOGGER.fine(() -> \"It was requested to stop polling from channel\");\n+                            }\n+                        } else {\n+                            long totalToEmit = requests.get();\n+                            // Avoid index out bound exceptions\n+                            long eventsToEmit = Math.min(totalToEmit, backPressureBuffer.size());\n+                            for (long i = 0; i < eventsToEmit; i++) {\n+                                if (maxEvents == 0) {\n+                                    emiter.complete();\n+                                    break;\n+                                }\n+                                ConsumerRecord<K, V> cr = backPressureBuffer.poll();\n+                                KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr, autoCommit, ackTimeout);\n+                                if (!autoCommit) {\n+                                    TopicPartition key = new TopicPartition(kafkaMessage.getPayload().topic(),\n+                                            kafkaMessage.getPayload().partition());\n+                                    pendingCommits.computeIfAbsent(key, k -> new LinkedList<>()).add(kafkaMessage);\n+                                }\n+                                // Note that next execution will reach the user code inside @Incoming method.\n+                                // By spec, onNext MUST NOT block the Publisher, otherwise it will make problems.\n+                                runInNewContext(() ->  emiter.emit(kafkaMessage));\n+                                requests.decrementAndGet();\n+                                maxEvents--;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f634ae36ef5b9bd9df04b1349f7ef424f8949c65"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU1NzE0OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToxODoxNFrOGDpwhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOToyMjoxNlrOGFF0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MzA3OQ==", "bodyText": "Wakeup should normally get you from polling loop, but in our case its inside the scheduled runnable, It can be better to stop scheduler before wakeup and in the catch block jump out:\n} catch (WakeupException e) {\n  LOGGER.fine(() -> \"It was requested to stop polling from channel\");\n  return;\n}", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r406483079", "createdAt": "2020-04-09T21:18:14Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * This is an implementation of {@link org.reactivestreams.Publisher} that read events from\n+ * Kafka and push them downstream to one subscriber.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaPublisher<K, V> implements Publisher<KafkaMessage<K, V>>, Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaPublisher.class.getName());\n+    private static final String POLL_TIMEOUT = \"poll.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private static final String MAX_EVENTS = \"max.events\";\n+    private static final String ENABLE_AUTOCOMMIT = \"enable.auto.commit\";\n+    private static final String ACK_TIMEOUT = \"ack.timeout.millis\";\n+    private static final String LIMIT_NO_ACK = \"limit.no.ack\";\n+    private final Lock taskLock = new ReentrantLock();\n+    private final Queue<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+    private final Map<TopicPartition, List<KafkaMessage<K, V>>> pendingCommits = new HashMap<>();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final ScheduledExecutorService scheduler;\n+    private final Consumer<K, V> kafkaConsumer;\n+    private final AtomicLong requests = new AtomicLong();\n+    private final EmittingPublisher<KafkaMessage<K, V>> emiter =\n+            new EmittingPublisher<>(requested -> requests.addAndGet(requested));\n+    private final List<String> topics;\n+    private final long periodExecutions;\n+    private final long pollTimeout;\n+    private final boolean autoCommit;\n+    private final long ackTimeout;\n+    private final int limitNoAck;\n+    private volatile long maxEvents;\n+\n+    private KafkaPublisher(ScheduledExecutorService scheduler, Consumer<K, V> kafkaConsumer,\n+            List<String> topics, long pollTimeout, long periodExecutions, long maxEvents,\n+            boolean autoCommit, long ackTimeout, int limitNoAck) {\n+        this.scheduler = scheduler;\n+        this.kafkaConsumer = kafkaConsumer;\n+        this.topics = topics;\n+        this.periodExecutions = periodExecutions;\n+        this.pollTimeout = pollTimeout;\n+        this.maxEvents = maxEvents;\n+        this.autoCommit = autoCommit;\n+        this.ackTimeout = ackTimeout;\n+        this.limitNoAck = limitNoAck;\n+    }\n+\n+    /**\n+     * Starts to consume events from Kafka to send them downstream till\n+     * {@link io.helidon.microprofile.connectors.kafka.KafkaPublisher#close()} is invoked.\n+     * This execution runs in one thread that is triggered by the scheduler.\n+     */\n+    private void execute() {\n+        kafkaConsumer.subscribe(topics, partitionsAssignedLatch);\n+        // This thread reads from Kafka topics and push in kafkaBufferedEvents\n+        scheduler.scheduleAtFixedRate(() -> {\n+            try {\n+                // Need to lock to avoid onClose() is executed meanwhile task is running\n+                taskLock.lock();\n+                if (!scheduler.isShutdown() && !emiter.isTerminated()) {\n+                    int currentNoAck = currentNoAck();\n+                    if (currentNoAck < limitNoAck) {\n+                        if (backPressureBuffer.isEmpty()) {\n+                            try {\n+                                kafkaConsumer.poll(Duration.ofMillis(pollTimeout)).forEach(backPressureBuffer::add);\n+                            } catch (WakeupException e) {\n+                                LOGGER.fine(() -> \"It was requested to stop polling from channel\");\n+                            }\n+                        } else {\n+                            long totalToEmit = requests.get();\n+                            // Avoid index out bound exceptions\n+                            long eventsToEmit = Math.min(totalToEmit, backPressureBuffer.size());\n+                            for (long i = 0; i < eventsToEmit; i++) {\n+                                if (maxEvents == 0) {\n+                                    emiter.complete();\n+                                    break;\n+                                }\n+                                ConsumerRecord<K, V> cr = backPressureBuffer.poll();\n+                                KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr, autoCommit, ackTimeout);\n+                                if (!autoCommit) {\n+                                    TopicPartition key = new TopicPartition(kafkaMessage.getPayload().topic(),\n+                                            kafkaMessage.getPayload().partition());\n+                                    pendingCommits.computeIfAbsent(key, k -> new LinkedList<>()).add(kafkaMessage);\n+                                }\n+                                // Note that next execution will reach the user code inside @Incoming method.\n+                                // By spec, onNext MUST NOT block the Publisher, otherwise it will make problems.\n+                                runInNewContext(() ->  emiter.emit(kafkaMessage));\n+                                requests.decrementAndGet();\n+                                maxEvents--;\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\n+                                String.format(\"Current pending %s acks has overflown the limit of %s \",\n+                                        currentNoAck, limitNoAck));\n+                    }\n+                }\n+                // Commit ACKs\n+                processACK();\n+            } catch (Exception e) {\n+                LOGGER.log(Level.SEVERE, \"KafkaPublisher failed\", e);\n+                emiter.fail(e);\n+            } finally {\n+                taskLock.unlock();\n+            }\n+        }, 0, periodExecutions, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private int currentNoAck() {\n+        return pendingCommits.values().stream().map(list -> list.size()).reduce((a, b) -> a + b).orElse(0);\n+    }\n+\n+    /**\n+     * Process the ACKs only if enable.auto.commit is false.\n+     * This will search events that are ACK and it will commit them to Kafka.\n+     * What ever the commit was success of not, it will be notified to the message.\n+     */\n+    private void processACK() {\n+        Map<TopicPartition, OffsetAndMetadata> offsets = new LinkedHashMap<>();\n+        List<KafkaMessage<K, V>> notifications = new LinkedList<>();\n+        // Commit highest offset + 1 of each partition that was ACK, and remove from pending\n+        for (Entry<TopicPartition, List<KafkaMessage<K, V>>> entry : pendingCommits.entrySet()) {\n+            // No need to sort it, offsets are consumed in order\n+            List<KafkaMessage<K, V>> byPartition = entry.getValue();\n+            Iterator<KafkaMessage<K, V>> iterator = byPartition.iterator();\n+            KafkaMessage<K, V> highest = null;\n+            while (iterator.hasNext()) {\n+                KafkaMessage<K, V> element = iterator.next();\n+                if (element.isAck()) {\n+                    notifications.add(element);\n+                    highest = element;\n+                    iterator.remove();\n+                } else {\n+                    break;\n+                }\n+            }\n+            if (highest != null) {\n+                OffsetAndMetadata offset = new OffsetAndMetadata(highest.getPayload().offset() + 1);\n+                LOGGER.fine(() -> String.format(\"Will commit %s %s\", entry.getKey(), offset));\n+                offsets.put(entry.getKey(), offset);\n+            }\n+        }\n+        if (!notifications.isEmpty()) {\n+            Optional<RuntimeException> exception = commitInKafka(offsets);\n+            notifications.stream().forEach(message -> {\n+                exception.ifPresent(ex -> message.exception(ex));\n+                message.wakeUp();\n+            });\n+        }\n+    }\n+\n+    private Optional<RuntimeException> commitInKafka(Map<TopicPartition, OffsetAndMetadata> offsets) {\n+        LOGGER.fine(() -> String.format(\"%s events to commit: \", offsets.size()));\n+        LOGGER.fine(() -> String.format(\"%s\", offsets));\n+        try {\n+            kafkaConsumer.commitSync(offsets);\n+            LOGGER.fine(() -> \"The commit was successful\");\n+            return Optional.empty();\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.SEVERE, \"Unable to commit in Kafka \" + offsets, e);\n+            return Optional.of(e);\n+        }\n+    }\n+\n+    /**\n+     * Closes the connections to Kafka and stops to process new events.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        kafkaConsumer.wakeup();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f634ae36ef5b9bd9df04b1349f7ef424f8949c65"}, "originalPosition": 225}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzk5MTQ3Mg==", "bodyText": "You already stopped it in connector, sorry", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r407991472", "createdAt": "2020-04-14T09:22:16Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * This is an implementation of {@link org.reactivestreams.Publisher} that read events from\n+ * Kafka and push them downstream to one subscriber.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaPublisher<K, V> implements Publisher<KafkaMessage<K, V>>, Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaPublisher.class.getName());\n+    private static final String POLL_TIMEOUT = \"poll.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private static final String MAX_EVENTS = \"max.events\";\n+    private static final String ENABLE_AUTOCOMMIT = \"enable.auto.commit\";\n+    private static final String ACK_TIMEOUT = \"ack.timeout.millis\";\n+    private static final String LIMIT_NO_ACK = \"limit.no.ack\";\n+    private final Lock taskLock = new ReentrantLock();\n+    private final Queue<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+    private final Map<TopicPartition, List<KafkaMessage<K, V>>> pendingCommits = new HashMap<>();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final ScheduledExecutorService scheduler;\n+    private final Consumer<K, V> kafkaConsumer;\n+    private final AtomicLong requests = new AtomicLong();\n+    private final EmittingPublisher<KafkaMessage<K, V>> emiter =\n+            new EmittingPublisher<>(requested -> requests.addAndGet(requested));\n+    private final List<String> topics;\n+    private final long periodExecutions;\n+    private final long pollTimeout;\n+    private final boolean autoCommit;\n+    private final long ackTimeout;\n+    private final int limitNoAck;\n+    private volatile long maxEvents;\n+\n+    private KafkaPublisher(ScheduledExecutorService scheduler, Consumer<K, V> kafkaConsumer,\n+            List<String> topics, long pollTimeout, long periodExecutions, long maxEvents,\n+            boolean autoCommit, long ackTimeout, int limitNoAck) {\n+        this.scheduler = scheduler;\n+        this.kafkaConsumer = kafkaConsumer;\n+        this.topics = topics;\n+        this.periodExecutions = periodExecutions;\n+        this.pollTimeout = pollTimeout;\n+        this.maxEvents = maxEvents;\n+        this.autoCommit = autoCommit;\n+        this.ackTimeout = ackTimeout;\n+        this.limitNoAck = limitNoAck;\n+    }\n+\n+    /**\n+     * Starts to consume events from Kafka to send them downstream till\n+     * {@link io.helidon.microprofile.connectors.kafka.KafkaPublisher#close()} is invoked.\n+     * This execution runs in one thread that is triggered by the scheduler.\n+     */\n+    private void execute() {\n+        kafkaConsumer.subscribe(topics, partitionsAssignedLatch);\n+        // This thread reads from Kafka topics and push in kafkaBufferedEvents\n+        scheduler.scheduleAtFixedRate(() -> {\n+            try {\n+                // Need to lock to avoid onClose() is executed meanwhile task is running\n+                taskLock.lock();\n+                if (!scheduler.isShutdown() && !emiter.isTerminated()) {\n+                    int currentNoAck = currentNoAck();\n+                    if (currentNoAck < limitNoAck) {\n+                        if (backPressureBuffer.isEmpty()) {\n+                            try {\n+                                kafkaConsumer.poll(Duration.ofMillis(pollTimeout)).forEach(backPressureBuffer::add);\n+                            } catch (WakeupException e) {\n+                                LOGGER.fine(() -> \"It was requested to stop polling from channel\");\n+                            }\n+                        } else {\n+                            long totalToEmit = requests.get();\n+                            // Avoid index out bound exceptions\n+                            long eventsToEmit = Math.min(totalToEmit, backPressureBuffer.size());\n+                            for (long i = 0; i < eventsToEmit; i++) {\n+                                if (maxEvents == 0) {\n+                                    emiter.complete();\n+                                    break;\n+                                }\n+                                ConsumerRecord<K, V> cr = backPressureBuffer.poll();\n+                                KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr, autoCommit, ackTimeout);\n+                                if (!autoCommit) {\n+                                    TopicPartition key = new TopicPartition(kafkaMessage.getPayload().topic(),\n+                                            kafkaMessage.getPayload().partition());\n+                                    pendingCommits.computeIfAbsent(key, k -> new LinkedList<>()).add(kafkaMessage);\n+                                }\n+                                // Note that next execution will reach the user code inside @Incoming method.\n+                                // By spec, onNext MUST NOT block the Publisher, otherwise it will make problems.\n+                                runInNewContext(() ->  emiter.emit(kafkaMessage));\n+                                requests.decrementAndGet();\n+                                maxEvents--;\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\n+                                String.format(\"Current pending %s acks has overflown the limit of %s \",\n+                                        currentNoAck, limitNoAck));\n+                    }\n+                }\n+                // Commit ACKs\n+                processACK();\n+            } catch (Exception e) {\n+                LOGGER.log(Level.SEVERE, \"KafkaPublisher failed\", e);\n+                emiter.fail(e);\n+            } finally {\n+                taskLock.unlock();\n+            }\n+        }, 0, periodExecutions, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private int currentNoAck() {\n+        return pendingCommits.values().stream().map(list -> list.size()).reduce((a, b) -> a + b).orElse(0);\n+    }\n+\n+    /**\n+     * Process the ACKs only if enable.auto.commit is false.\n+     * This will search events that are ACK and it will commit them to Kafka.\n+     * What ever the commit was success of not, it will be notified to the message.\n+     */\n+    private void processACK() {\n+        Map<TopicPartition, OffsetAndMetadata> offsets = new LinkedHashMap<>();\n+        List<KafkaMessage<K, V>> notifications = new LinkedList<>();\n+        // Commit highest offset + 1 of each partition that was ACK, and remove from pending\n+        for (Entry<TopicPartition, List<KafkaMessage<K, V>>> entry : pendingCommits.entrySet()) {\n+            // No need to sort it, offsets are consumed in order\n+            List<KafkaMessage<K, V>> byPartition = entry.getValue();\n+            Iterator<KafkaMessage<K, V>> iterator = byPartition.iterator();\n+            KafkaMessage<K, V> highest = null;\n+            while (iterator.hasNext()) {\n+                KafkaMessage<K, V> element = iterator.next();\n+                if (element.isAck()) {\n+                    notifications.add(element);\n+                    highest = element;\n+                    iterator.remove();\n+                } else {\n+                    break;\n+                }\n+            }\n+            if (highest != null) {\n+                OffsetAndMetadata offset = new OffsetAndMetadata(highest.getPayload().offset() + 1);\n+                LOGGER.fine(() -> String.format(\"Will commit %s %s\", entry.getKey(), offset));\n+                offsets.put(entry.getKey(), offset);\n+            }\n+        }\n+        if (!notifications.isEmpty()) {\n+            Optional<RuntimeException> exception = commitInKafka(offsets);\n+            notifications.stream().forEach(message -> {\n+                exception.ifPresent(ex -> message.exception(ex));\n+                message.wakeUp();\n+            });\n+        }\n+    }\n+\n+    private Optional<RuntimeException> commitInKafka(Map<TopicPartition, OffsetAndMetadata> offsets) {\n+        LOGGER.fine(() -> String.format(\"%s events to commit: \", offsets.size()));\n+        LOGGER.fine(() -> String.format(\"%s\", offsets));\n+        try {\n+            kafkaConsumer.commitSync(offsets);\n+            LOGGER.fine(() -> \"The commit was successful\");\n+            return Optional.empty();\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.SEVERE, \"Unable to commit in Kafka \" + offsets, e);\n+            return Optional.of(e);\n+        }\n+    }\n+\n+    /**\n+     * Closes the connections to Kafka and stops to process new events.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        kafkaConsumer.wakeup();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4MzA3OQ=="}, "originalCommit": {"oid": "f634ae36ef5b9bd9df04b1349f7ef424f8949c65"}, "originalPosition": 225}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMjU2NDIwOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyMDozMVrOGDp0tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQyMToyMDozMVrOGDp0tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjQ4NDE1MQ==", "bodyText": "Can be swallowed by used code, would be great to log it", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r406484151", "createdAt": "2020-04-09T21:20:31Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaPublisher.java", "diffHunk": "@@ -0,0 +1,311 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * This is an implementation of {@link org.reactivestreams.Publisher} that read events from\n+ * Kafka and push them downstream to one subscriber.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaPublisher<K, V> implements Publisher<KafkaMessage<K, V>>, Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaPublisher.class.getName());\n+    private static final String POLL_TIMEOUT = \"poll.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private static final String MAX_EVENTS = \"max.events\";\n+    private static final String ENABLE_AUTOCOMMIT = \"enable.auto.commit\";\n+    private static final String ACK_TIMEOUT = \"ack.timeout.millis\";\n+    private static final String LIMIT_NO_ACK = \"limit.no.ack\";\n+    private final Lock taskLock = new ReentrantLock();\n+    private final Queue<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+    private final Map<TopicPartition, List<KafkaMessage<K, V>>> pendingCommits = new HashMap<>();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final ScheduledExecutorService scheduler;\n+    private final Consumer<K, V> kafkaConsumer;\n+    private final AtomicLong requests = new AtomicLong();\n+    private final EmittingPublisher<KafkaMessage<K, V>> emiter =\n+            new EmittingPublisher<>(requested -> requests.addAndGet(requested));\n+    private final List<String> topics;\n+    private final long periodExecutions;\n+    private final long pollTimeout;\n+    private final boolean autoCommit;\n+    private final long ackTimeout;\n+    private final int limitNoAck;\n+    private volatile long maxEvents;\n+\n+    private KafkaPublisher(ScheduledExecutorService scheduler, Consumer<K, V> kafkaConsumer,\n+            List<String> topics, long pollTimeout, long periodExecutions, long maxEvents,\n+            boolean autoCommit, long ackTimeout, int limitNoAck) {\n+        this.scheduler = scheduler;\n+        this.kafkaConsumer = kafkaConsumer;\n+        this.topics = topics;\n+        this.periodExecutions = periodExecutions;\n+        this.pollTimeout = pollTimeout;\n+        this.maxEvents = maxEvents;\n+        this.autoCommit = autoCommit;\n+        this.ackTimeout = ackTimeout;\n+        this.limitNoAck = limitNoAck;\n+    }\n+\n+    /**\n+     * Starts to consume events from Kafka to send them downstream till\n+     * {@link io.helidon.microprofile.connectors.kafka.KafkaPublisher#close()} is invoked.\n+     * This execution runs in one thread that is triggered by the scheduler.\n+     */\n+    private void execute() {\n+        kafkaConsumer.subscribe(topics, partitionsAssignedLatch);\n+        // This thread reads from Kafka topics and push in kafkaBufferedEvents\n+        scheduler.scheduleAtFixedRate(() -> {\n+            try {\n+                // Need to lock to avoid onClose() is executed meanwhile task is running\n+                taskLock.lock();\n+                if (!scheduler.isShutdown() && !emiter.isTerminated()) {\n+                    int currentNoAck = currentNoAck();\n+                    if (currentNoAck < limitNoAck) {\n+                        if (backPressureBuffer.isEmpty()) {\n+                            try {\n+                                kafkaConsumer.poll(Duration.ofMillis(pollTimeout)).forEach(backPressureBuffer::add);\n+                            } catch (WakeupException e) {\n+                                LOGGER.fine(() -> \"It was requested to stop polling from channel\");\n+                            }\n+                        } else {\n+                            long totalToEmit = requests.get();\n+                            // Avoid index out bound exceptions\n+                            long eventsToEmit = Math.min(totalToEmit, backPressureBuffer.size());\n+                            for (long i = 0; i < eventsToEmit; i++) {\n+                                if (maxEvents == 0) {\n+                                    emiter.complete();\n+                                    break;\n+                                }\n+                                ConsumerRecord<K, V> cr = backPressureBuffer.poll();\n+                                KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr, autoCommit, ackTimeout);\n+                                if (!autoCommit) {\n+                                    TopicPartition key = new TopicPartition(kafkaMessage.getPayload().topic(),\n+                                            kafkaMessage.getPayload().partition());\n+                                    pendingCommits.computeIfAbsent(key, k -> new LinkedList<>()).add(kafkaMessage);\n+                                }\n+                                // Note that next execution will reach the user code inside @Incoming method.\n+                                // By spec, onNext MUST NOT block the Publisher, otherwise it will make problems.\n+                                runInNewContext(() ->  emiter.emit(kafkaMessage));\n+                                requests.decrementAndGet();\n+                                maxEvents--;\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\n+                                String.format(\"Current pending %s acks has overflown the limit of %s \",\n+                                        currentNoAck, limitNoAck));\n+                    }\n+                }\n+                // Commit ACKs\n+                processACK();\n+            } catch (Exception e) {\n+                LOGGER.log(Level.SEVERE, \"KafkaPublisher failed\", e);\n+                emiter.fail(e);\n+            } finally {\n+                taskLock.unlock();\n+            }\n+        }, 0, periodExecutions, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private int currentNoAck() {\n+        return pendingCommits.values().stream().map(list -> list.size()).reduce((a, b) -> a + b).orElse(0);\n+    }\n+\n+    /**\n+     * Process the ACKs only if enable.auto.commit is false.\n+     * This will search events that are ACK and it will commit them to Kafka.\n+     * What ever the commit was success of not, it will be notified to the message.\n+     */\n+    private void processACK() {\n+        Map<TopicPartition, OffsetAndMetadata> offsets = new LinkedHashMap<>();\n+        List<KafkaMessage<K, V>> notifications = new LinkedList<>();\n+        // Commit highest offset + 1 of each partition that was ACK, and remove from pending\n+        for (Entry<TopicPartition, List<KafkaMessage<K, V>>> entry : pendingCommits.entrySet()) {\n+            // No need to sort it, offsets are consumed in order\n+            List<KafkaMessage<K, V>> byPartition = entry.getValue();\n+            Iterator<KafkaMessage<K, V>> iterator = byPartition.iterator();\n+            KafkaMessage<K, V> highest = null;\n+            while (iterator.hasNext()) {\n+                KafkaMessage<K, V> element = iterator.next();\n+                if (element.isAck()) {\n+                    notifications.add(element);\n+                    highest = element;\n+                    iterator.remove();\n+                } else {\n+                    break;\n+                }\n+            }\n+            if (highest != null) {\n+                OffsetAndMetadata offset = new OffsetAndMetadata(highest.getPayload().offset() + 1);\n+                LOGGER.fine(() -> String.format(\"Will commit %s %s\", entry.getKey(), offset));\n+                offsets.put(entry.getKey(), offset);\n+            }\n+        }\n+        if (!notifications.isEmpty()) {\n+            Optional<RuntimeException> exception = commitInKafka(offsets);\n+            notifications.stream().forEach(message -> {\n+                exception.ifPresent(ex -> message.exception(ex));\n+                message.wakeUp();\n+            });\n+        }\n+    }\n+\n+    private Optional<RuntimeException> commitInKafka(Map<TopicPartition, OffsetAndMetadata> offsets) {\n+        LOGGER.fine(() -> String.format(\"%s events to commit: \", offsets.size()));\n+        LOGGER.fine(() -> String.format(\"%s\", offsets));\n+        try {\n+            kafkaConsumer.commitSync(offsets);\n+            LOGGER.fine(() -> \"The commit was successful\");\n+            return Optional.empty();\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.SEVERE, \"Unable to commit in Kafka \" + offsets, e);\n+            return Optional.of(e);\n+        }\n+    }\n+\n+    /**\n+     * Closes the connections to Kafka and stops to process new events.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        kafkaConsumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        try {\n+            taskLock.lock();\n+            processACK();\n+            LOGGER.fine(() -> \"Pending ACKs: \" + pendingCommits.size());\n+            // Terminate waiting ACKs\n+            pendingCommits.values().stream().flatMap(List::stream).forEach(message -> message.wakeUp());\n+            kafkaConsumer.close();\n+            emiter.complete();\n+        } catch (RuntimeException e) {\n+            emiter.fail(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f634ae36ef5b9bd9df04b1349f7ef424f8949c65"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNDU3NDc4OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaMessage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoyNzo0NVrOGD8Avw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxNDoyNzo0NVrOGD8Avw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjc4MjE0Mw==", "bodyText": "ack is going to be called frequently, can we avoid spinning up ForkJoinPool and reuse emit loop we already have? I know it introduces another queue", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r406782143", "createdAt": "2020-04-10T14:27:45Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaMessage<K, V> implements Message<ConsumerRecord<K, V>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaMessage.class.getName());\n+    private final ConsumerRecord<K, V> consumerRecord;\n+    private final AtomicBoolean ack = new AtomicBoolean(false);\n+    private final CountDownLatch waitForCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicReference<Exception> ackException = new AtomicReference<>();\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord {@link org.apache.kafka.clients.consumer.ConsumerRecord}\n+     * @param autoCommit when false it will ack will wait till it is really commited in Kafka,\n+     *        otherwise there is no waiting time because it was committed already.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *        the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaMessage(ConsumerRecord<K, V> consumerRecord, boolean autoCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.waitForCommit = new CountDownLatch(autoCommit ? 0 : 1);\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public ConsumerRecord<K, V> getPayload() {\n+        return consumerRecord;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        ack.set(true);\n+        return CompletableFuture.runAsync(() -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f634ae36ef5b9bd9df04b1349f7ef424f8949c65"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzcyMTk4OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/EmittingPublisher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzowMjo1MFrOGFNjFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzowMjo1MFrOGFNjFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODExODAzOQ==", "bodyText": "This is my bug, it should have had a bottom bound\nif (publisher.requested.getAndUpdate(r -> r > 0 ? r - 1 : 0) < 1) {", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408118039", "createdAt": "2020-04-14T13:02:50Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/EmittingPublisher.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.Logger;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Emitting reactive streams publisher to be used by {@code ReactiveStreams.fromPublisher},\n+ * should be deprecated in favor of {@code org.eclipse.microprofile.reactive.messaging.Emitter}\n+ * in the future version of messaging.\n+ *\n+ * @param <T> type of emitted item\n+ */\n+class EmittingPublisher<T> implements Publisher<T> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(EmittingPublisher.class.getName());\n+    private Subscriber<? super T> subscriber;\n+    private final AtomicReference<State> state = new AtomicReference<>(State.NOT_REQUESTED_YET);\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicBoolean terminated = new AtomicBoolean();\n+    private final Callback<Long> requestsCallback;\n+\n+    protected EmittingPublisher(Callback<Long> requestsCallback) {\n+        this.requestsCallback = requestsCallback;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        Objects.requireNonNull(subscriber, \"subscriber is null\");\n+        this.subscriber = subscriber;\n+        subscriber.onSubscribe(new Subscription() {\n+            @Override\n+            public void request(final long n) {\n+                if (n < 1) {\n+                    fail(new IllegalArgumentException(\"Rule \u00a73.9 violated: non-positive request amount is forbidden\"));\n+                }\n+                LOGGER.fine(String.format(\"Request %s events\", n));\n+                requested.updateAndGet(r -> Long.MAX_VALUE - r > n ? n + r : Long.MAX_VALUE);\n+                state.compareAndSet(State.NOT_REQUESTED_YET, State.READY_TO_EMIT);\n+                requestsCallback.nofity(n);\n+            }\n+\n+            @Override\n+            public void cancel() {\n+                LOGGER.fine(\"Subscription cancelled\");\n+                state.compareAndSet(State.NOT_REQUESTED_YET, State.CANCELLED);\n+                state.compareAndSet(State.READY_TO_EMIT, State.CANCELLED);\n+                EmittingPublisher.this.subscriber = null;\n+            }\n+\n+        });\n+    }\n+\n+    /**\n+     * Properly fail the stream, set publisher to cancelled state and send {@code onError} signal downstream.\n+     * Signal {@code onError} is sent only once, any other call to this method is no-op.\n+     *\n+     * @param throwable Sent as {@code onError} signal\n+     */\n+    void fail(Throwable throwable) {\n+        if (!terminated.getAndSet(true) && subscriber != null) {\n+            state.compareAndSet(State.NOT_REQUESTED_YET, State.CANCELLED);\n+            state.compareAndSet(State.READY_TO_EMIT, State.CANCELLED);\n+            this.subscriber.onError(throwable);\n+        }\n+    }\n+\n+    /**\n+     * Properly complete the stream, set publisher to completed state and send {@code onComplete} signal downstream.\n+     * Signal {@code onComplete} is sent only once, any other call to this method is no-op.\n+     */\n+    void complete() {\n+        if (!terminated.getAndSet(true) && subscriber != null) {\n+            state.compareAndSet(State.NOT_REQUESTED_YET, State.COMPLETED);\n+            state.compareAndSet(State.READY_TO_EMIT, State.COMPLETED);\n+            this.subscriber.onComplete();\n+        }\n+    }\n+\n+    /**\n+     * Emit one item to the stream, if there is enough requested, item is signaled to downstream as {@code onNext}\n+     * and method returns true. If there is requested less than 1, nothing is sent and method returns false.\n+     *\n+     * @param item to be sent downstream\n+     * @return true if item successfully sent\n+     * @throws java.lang.IllegalStateException if publisher is cancelled\n+     */\n+    boolean emit(T item) {\n+        return this.state.get().emit(this, item);\n+    }\n+\n+    boolean isTerminated() {\n+        return terminated.get();\n+    }\n+\n+    /**\n+     * Check if publisher is in terminal state CANCELLED.\n+     *\n+     * @return true if so\n+     */\n+    boolean isCancelled() {\n+        return this.state.get() == State.CANCELLED;\n+    }\n+\n+    /**\n+     * Check if publisher is in terminal state COMPLETED.\n+     *\n+     * @return true if so\n+     */\n+    boolean isCompleted() {\n+        return this.state.get() == State.COMPLETED;\n+    }\n+\n+    private enum State {\n+        NOT_REQUESTED_YET {\n+            @Override\n+            <T> boolean emit(EmittingPublisher<T> publisher, T item) {\n+                return false;\n+            }\n+        },\n+        READY_TO_EMIT {\n+            @Override\n+            <T> boolean emit(EmittingPublisher<T> publisher, T item) {\n+                if (publisher.requested.getAndDecrement() < 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb915d2406926c4a51ac9237bf797680511beb7a"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgxNDU1OnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDoyNFrOGFOctA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDoyNFrOGFOctA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMjc4OA==", "bodyText": "Needs to be public to be usable in Helidon SE", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408132788", "createdAt": "2020-04-14T13:24:24Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+/**\n+ * Implementation of Kafka Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnector.CONNECTOR_NAME)\n+public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnector.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<Closeable> resourcesToClose = new LinkedList<>();\n+\n+    /**\n+     * Constructor to instance KafkaConnectorFactory.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    @Inject\n+    KafkaConnector(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb915d2406926c4a51ac9237bf797680511beb7a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzgxNzIxOnYy", "diffSide": "RIGHT", "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnector.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDo1NVrOGFOePA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMzoyNDo1NVrOGFOePA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODEzMzE4MA==", "bodyText": "Needs to be public to be usable in Helidon SE", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408133180", "createdAt": "2020-04-14T13:24:55Z", "author": {"login": "danielkec"}, "path": "microprofile/connectors/kafka/src/main/java/io/helidon/microprofile/connectors/kafka/KafkaConnector.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+/**\n+ * Implementation of Kafka Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnector.CONNECTOR_NAME)\n+public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnector.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<Closeable> resourcesToClose = new LinkedList<>();\n+\n+    /**\n+     * Constructor to instance KafkaConnectorFactory.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    @Inject\n+    KafkaConnector(Config config) {\n+        scheduler = ScheduledThreadPoolSupplier.builder()\n+                .threadNamePrefix(\"kafka-\")\n+                .config(config)\n+                .build()\n+                .get();\n+    }\n+\n+    /**\n+     * Called when container is terminated.\n+     *\n+     * @param event termination event\n+     */\n+    void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb915d2406926c4a51ac9237bf797680511beb7a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE4NTY5OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MzoyNlrOGFSGEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0MzoyNlrOGFSGEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5MjUyOA==", "bodyText": "Only this should be needed instead:\n         <dependency>\n            <groupId>org.eclipse.microprofile.reactive.messaging</groupId>\n            <artifactId>microprofile-reactive-messaging-api</artifactId>\n            <exclusions>\n                <exclusion>\n                    <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>\n                    <artifactId>microprofile-reactive-streams-operators-api</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>\n                    <artifactId>microprofile-reactive-streams-operators-core</artifactId>\n                </exclusion>\n                <exclusion>\n                    <groupId>javax.enterprise</groupId>\n                    <artifactId>cdi-api</artifactId>\n                </exclusion>\n            </exclusions>\n        </dependency>\n        <dependency>\n            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>io.helidon.config</groupId>\n            <artifactId>helidon-config</artifactId>\n        </dependency>", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408192528", "createdAt": "2020-04-14T14:43:26Z", "author": {"login": "danielkec"}, "path": "messaging/connectors/kafka/pom.xml", "diffHunk": "@@ -0,0 +1,110 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>io.helidon.messaging.connectors</groupId>\n+        <artifactId>helidon-messaging-connectors</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.messaging.connectors.kafka</groupId>\n+    <artifactId>helidon-messaging-connectors-kafka</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Helidon Messaging Connectors Kafka</name>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-failsafe-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <goals>\n+                            <goal>integration-test</goal>\n+                            <goal>verify</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+                <configuration>\n+                    <includes>\n+                        <include>**/*TckTest.java</include>\n+                    </includes>\n+                </configuration>\n+                <dependencies>\n+                    <dependency>\n+                        <groupId>org.apache.maven.surefire</groupId>\n+                        <artifactId>surefire-testng</artifactId>\n+                        <version>${version.lib.surefire.testng}</version>\n+                    </dependency>\n+                </dependencies>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.server</groupId>\n+            <artifactId>helidon-microprofile-server</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+            <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDE5NzQxOnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNDo0NTozOFrOGFSNcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxODoyMjowOVrOGFbUMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NDQxOA==", "bodyText": "Backpressure is not driven by anything here, use .request(Long.MAX) instead pls. no need for request counting", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408194418", "createdAt": "2020-04-14T14:45:38Z", "author": {"login": "danielkec"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+/**\n+ * Reactive streams subscriber implementation.\n+ *\n+ * @param <T> kafka record value type\n+ */\n+class KafkaSubscriber<T> implements Subscriber<Message<T>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaSubscriber.class.getName());\n+    private static final String BACKPRESSURE_SIZE_KEY = \"backpressure.size\";\n+    private static final long BACKPRESSURE_SIZE_DEFAULT = 5;\n+    private final long backpressure;\n+    private final AtomicLong backpressureCounter = new AtomicLong();\n+    private final BasicKafkaProducer<?, T> producer;\n+    private Subscription subscription;\n+\n+    private KafkaSubscriber(BasicKafkaProducer<?, T> producer, long backpressure){\n+        this.backpressure = backpressure;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        if (this.subscription == null) {\n+            this.subscription = subscription;\n+            this.subscription.request(backpressure);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNTM0OQ==", "bodyText": "Backpressure has its place\n\nwhen reading messages from Kafka and delivering them to consumers, we should not deliver more than requested\nwhen writing message to Kafka and reading them from producers, we should not request more than we can send at that time\n\nIn both cases, requesting Long.MAX may result in memory issues, as the messages need to be buffered, or in thread issues, as you would block threads.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408315349", "createdAt": "2020-04-14T17:35:48Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+/**\n+ * Reactive streams subscriber implementation.\n+ *\n+ * @param <T> kafka record value type\n+ */\n+class KafkaSubscriber<T> implements Subscriber<Message<T>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaSubscriber.class.getName());\n+    private static final String BACKPRESSURE_SIZE_KEY = \"backpressure.size\";\n+    private static final long BACKPRESSURE_SIZE_DEFAULT = 5;\n+    private final long backpressure;\n+    private final AtomicLong backpressureCounter = new AtomicLong();\n+    private final BasicKafkaProducer<?, T> producer;\n+    private Subscription subscription;\n+\n+    private KafkaSubscriber(BasicKafkaProducer<?, T> producer, long backpressure){\n+        this.backpressure = backpressure;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        if (this.subscription == null) {\n+            this.subscription = subscription;\n+            this.subscription.request(backpressure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NDQxOA=="}, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMzOTMzNA==", "bodyText": "No doubt about that, but without taking result of producer.produceAsync(message.getPayload()); in to the account its just unbounded stream with more bureaucracy", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408339334", "createdAt": "2020-04-14T18:14:49Z", "author": {"login": "danielkec"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+/**\n+ * Reactive streams subscriber implementation.\n+ *\n+ * @param <T> kafka record value type\n+ */\n+class KafkaSubscriber<T> implements Subscriber<Message<T>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaSubscriber.class.getName());\n+    private static final String BACKPRESSURE_SIZE_KEY = \"backpressure.size\";\n+    private static final long BACKPRESSURE_SIZE_DEFAULT = 5;\n+    private final long backpressure;\n+    private final AtomicLong backpressureCounter = new AtomicLong();\n+    private final BasicKafkaProducer<?, T> producer;\n+    private Subscription subscription;\n+\n+    private KafkaSubscriber(BasicKafkaProducer<?, T> producer, long backpressure){\n+        this.backpressure = backpressure;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        if (this.subscription == null) {\n+            this.subscription = subscription;\n+            this.subscription.request(backpressure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NDQxOA=="}, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODM0MzYwMQ==", "bodyText": "Jorge already came with nice idea of combining callbacks", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408343601", "createdAt": "2020-04-14T18:22:09Z", "author": {"login": "danielkec"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+/**\n+ * Reactive streams subscriber implementation.\n+ *\n+ * @param <T> kafka record value type\n+ */\n+class KafkaSubscriber<T> implements Subscriber<Message<T>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaSubscriber.class.getName());\n+    private static final String BACKPRESSURE_SIZE_KEY = \"backpressure.size\";\n+    private static final long BACKPRESSURE_SIZE_DEFAULT = 5;\n+    private final long backpressure;\n+    private final AtomicLong backpressureCounter = new AtomicLong();\n+    private final BasicKafkaProducer<?, T> producer;\n+    private Subscription subscription;\n+\n+    private KafkaSubscriber(BasicKafkaProducer<?, T> producer, long backpressure){\n+        this.backpressure = backpressure;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        if (this.subscription == null) {\n+            this.subscription = subscription;\n+            this.subscription.request(backpressure);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODE5NDQxOA=="}, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDc5MjQ1OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/EmittingPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1NjoxOFrOGFYFbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNjo1NjoxOFrOGFYFbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODI5MDY3MA==", "bodyText": "When you do less than warning levels of logging, please use the lambda approach:\nLogger.fine(() -> String.format(\"...\", n)) - otherwise the string formatting is evaluated for every single request.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408290670", "createdAt": "2020-04-14T16:56:18Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/EmittingPublisher.java", "diffHunk": "@@ -0,0 +1,177 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+import java.util.logging.Logger;\n+\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Emitting reactive streams publisher to be used by {@code ReactiveStreams.fromPublisher},\n+ * should be deprecated in favor of {@code org.eclipse.microprofile.reactive.messaging.Emitter}\n+ * in the future version of messaging.\n+ *\n+ * @param <T> type of emitted item\n+ */\n+class EmittingPublisher<T> implements Publisher<T> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(EmittingPublisher.class.getName());\n+    private Subscriber<? super T> subscriber;\n+    private final AtomicReference<State> state = new AtomicReference<>(State.NOT_REQUESTED_YET);\n+    private final AtomicLong requested = new AtomicLong();\n+    private final AtomicBoolean terminated = new AtomicBoolean();\n+    private final Callback<Long> requestsCallback;\n+\n+    EmittingPublisher(Callback<Long> requestsCallback) {\n+        this.requestsCallback = requestsCallback;\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super T> subscriber) {\n+        Objects.requireNonNull(subscriber, \"subscriber is null\");\n+        this.subscriber = subscriber;\n+        subscriber.onSubscribe(new Subscription() {\n+            @Override\n+            public void request(final long n) {\n+                if (n < 1) {\n+                    fail(new IllegalArgumentException(\"Rule \u00a73.9 violated: non-positive request amount is forbidden\"));\n+                }\n+                LOGGER.fine(String.format(\"Request %s events\", n));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkyNTE2OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConnector.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMDowNlrOGFZYYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMTo1NlrOGFZchg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMTkwNQ==", "bodyText": "If this class should be part of Helidon SE, then the public constructor is an issue.\nAlso you need to add a Builder for any configurable options - in Helidon SE, most of things that can be done using Config should be doable using Builder and vice-versa", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408311905", "createdAt": "2020-04-14T17:30:06Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConnector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+/**\n+ * Implementation of Kafka Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnector.CONNECTOR_NAME)\n+public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnector.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<Closeable> resourcesToClose = new LinkedList<>();\n+\n+    /**\n+     * Constructor to instance KafkaConnectorFactory.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    @Inject\n+    public KafkaConnector(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMjk2Ng==", "bodyText": "For correct SE/MP split, I think you should:\n\nRemove public constructor from this class\nCreate a builder that also supports config through config(Config) method as other builders in Helidon\nAdd a CDI extension for Kafka connector to another module, that would create the connector instance for MP messaging correctly injecting values using CDI", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408312966", "createdAt": "2020-04-14T17:31:56Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConnector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+/**\n+ * Implementation of Kafka Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnector.CONNECTOR_NAME)\n+public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnector.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<Closeable> resourcesToClose = new LinkedList<>();\n+\n+    /**\n+     * Constructor to instance KafkaConnectorFactory.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    @Inject\n+    public KafkaConnector(Config config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMTkwNQ=="}, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkzMzE0OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConnector.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMjoxOFrOGFZdcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMjoxOFrOGFZdcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMzIwMQ==", "bodyText": "@Observes methods should not be public", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408313201", "createdAt": "2020-04-14T17:32:18Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConnector.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Queue;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.BeforeDestroyed;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.helidon.common.configurable.ScheduledThreadPoolSupplier;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+import org.eclipse.microprofile.reactive.streams.operators.PublisherBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+\n+/**\n+ * Implementation of Kafka Connector as described in the MicroProfile Reactive Messaging Specification.\n+ */\n+@ApplicationScoped\n+@Connector(KafkaConnector.CONNECTOR_NAME)\n+public class KafkaConnector implements IncomingConnectorFactory, OutgoingConnectorFactory {\n+\n+    /**\n+     * Microprofile messaging Kafka connector name.\n+     */\n+    static final String CONNECTOR_NAME = \"helidon-kafka\";\n+    private static final Logger LOGGER = Logger.getLogger(KafkaConnector.class.getName());\n+    private final ScheduledExecutorService scheduler;\n+    private final Queue<Closeable> resourcesToClose = new LinkedList<>();\n+\n+    /**\n+     * Constructor to instance KafkaConnectorFactory.\n+     *\n+     * @param config Helidon {@link io.helidon.config.Config config}\n+     */\n+    @Inject\n+    public KafkaConnector(Config config) {\n+        scheduler = ScheduledThreadPoolSupplier.builder()\n+                .threadNamePrefix(\"kafka-\")\n+                .config(config)\n+                .build()\n+                .get();\n+    }\n+\n+    /**\n+     * Called when container is terminated. If it is not running in a container it must be explicitly invoked\n+     * to terminate the messaging and release Kafka connections.\n+     *\n+     * @param event termination event\n+     */\n+    public void terminate(@Observes @BeforeDestroyed(ApplicationScoped.class) Object event) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDkzNzg5OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaPublisher.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMzozMFrOGFZgcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozMzozMFrOGFZgcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxMzk2OA==", "bodyText": "This is a use case for a builder.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408313968", "createdAt": "2020-04-14T17:33:30Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaPublisher.java", "diffHunk": "@@ -0,0 +1,312 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.io.Closeable;\n+import java.time.Duration;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Optional;\n+import java.util.Queue;\n+import java.util.UUID;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.locks.Lock;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.common.context.Contexts;\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.consumer.Consumer;\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.clients.consumer.KafkaConsumer;\n+import org.apache.kafka.clients.consumer.OffsetAndMetadata;\n+import org.apache.kafka.common.TopicPartition;\n+import org.apache.kafka.common.errors.WakeupException;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+\n+/**\n+ * This is an implementation of {@link org.reactivestreams.Publisher} that read events from\n+ * Kafka and push them downstream to one subscriber.\n+ * Configurable by Helidon {@link io.helidon.config.Config Config},\n+ *\n+ * @param <K> Key type\n+ * @param <V> Value type\n+ * @see io.helidon.config.Config\n+ */\n+class KafkaPublisher<K, V> implements Publisher<KafkaMessage<K, V>>, Closeable {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaPublisher.class.getName());\n+    private static final String POLL_TIMEOUT = \"poll.timeout\";\n+    private static final String PERIOD_EXECUTIONS = \"period.executions\";\n+    private static final String ENABLE_AUTOCOMMIT = \"enable.auto.commit\";\n+    private static final String ACK_TIMEOUT = \"ack.timeout.millis\";\n+    private static final String LIMIT_NO_ACK = \"limit.no.ack\";\n+    private final Lock taskLock = new ReentrantLock();\n+    private final Queue<ConsumerRecord<K, V>> backPressureBuffer = new LinkedList<>();\n+    private final Map<TopicPartition, List<KafkaMessage<K, V>>> pendingCommits = new HashMap<>();\n+    private final PartitionsAssignedLatch partitionsAssignedLatch = new PartitionsAssignedLatch();\n+    private final ScheduledExecutorService scheduler;\n+    private final Consumer<K, V> kafkaConsumer;\n+    private final AtomicLong requests = new AtomicLong();\n+    private final EmittingPublisher<KafkaMessage<K, V>> emiter =\n+            new EmittingPublisher<>(requested -> requests.addAndGet(requested));\n+    private final List<String> topics;\n+    private final long periodExecutions;\n+    private final long pollTimeout;\n+    private final boolean autoCommit;\n+    private final long ackTimeout;\n+    private final int limitNoAck;\n+\n+    private KafkaPublisher(ScheduledExecutorService scheduler, Consumer<K, V> kafkaConsumer,\n+            List<String> topics, long pollTimeout, long periodExecutions,\n+            boolean autoCommit, long ackTimeout, int limitNoAck) {\n+        this.scheduler = scheduler;\n+        this.kafkaConsumer = kafkaConsumer;\n+        this.topics = topics;\n+        this.periodExecutions = periodExecutions;\n+        this.pollTimeout = pollTimeout;\n+        this.autoCommit = autoCommit;\n+        this.ackTimeout = ackTimeout;\n+        this.limitNoAck = limitNoAck;\n+    }\n+\n+    /**\n+     * Starts to consume events from Kafka to send them downstream till\n+     * {@link io.helidon.messaging.connectors.kafka.KafkaPublisher#close()} is invoked.\n+     * This execution runs in one thread that is triggered by the scheduler.\n+     */\n+    private void execute() {\n+        kafkaConsumer.subscribe(topics, partitionsAssignedLatch);\n+        // This thread reads from Kafka topics and push in kafkaBufferedEvents\n+        scheduler.scheduleAtFixedRate(() -> {\n+            try {\n+                // Need to lock to avoid onClose() is executed meanwhile task is running\n+                taskLock.lock();\n+                if (!scheduler.isShutdown() && !emiter.isTerminated()) {\n+                    int currentNoAck = currentNoAck();\n+                    if (currentNoAck < limitNoAck) {\n+                        if (backPressureBuffer.isEmpty()) {\n+                            try {\n+                                kafkaConsumer.poll(Duration.ofMillis(pollTimeout)).forEach(backPressureBuffer::add);\n+                            } catch (WakeupException e) {\n+                                LOGGER.fine(() -> \"It was requested to stop polling from channel\");\n+                            }\n+                        } else {\n+                            long totalToEmit = requests.get();\n+                            // Avoid index out bound exceptions\n+                            long eventsToEmit = Math.min(totalToEmit, backPressureBuffer.size());\n+                            for (long i = 0; i < eventsToEmit; i++) {\n+                                ConsumerRecord<K, V> cr = backPressureBuffer.poll();\n+                                CompletableFuture<Void> kafkaCommit = new CompletableFuture<>();\n+                                KafkaMessage<K, V> kafkaMessage = new KafkaMessage<>(cr, kafkaCommit, ackTimeout);\n+                                if (!autoCommit) {\n+                                    TopicPartition key = new TopicPartition(kafkaMessage.getPayload().topic(),\n+                                            kafkaMessage.getPayload().partition());\n+                                    pendingCommits.computeIfAbsent(key, k -> new LinkedList<>()).add(kafkaMessage);\n+                                } else {\n+                                    kafkaCommit.complete(null);\n+                                }\n+                                // Note that next execution will reach the user code inside @Incoming method.\n+                                // By spec, onNext MUST NOT block the Publisher, otherwise it will make problems.\n+                                runInNewContext(() ->  emiter.emit(kafkaMessage));\n+                                requests.decrementAndGet();\n+                            }\n+                        }\n+                    } else {\n+                        throw new IllegalStateException(\n+                                String.format(\"Current pending %s acks has overflown the limit of %s \",\n+                                        currentNoAck, limitNoAck));\n+                    }\n+                }\n+                // Commit ACKs\n+                processACK();\n+            } catch (Exception e) {\n+                LOGGER.log(Level.SEVERE, \"KafkaPublisher failed\", e);\n+                emiter.fail(e);\n+            } finally {\n+                taskLock.unlock();\n+            }\n+        }, 0, periodExecutions, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private int currentNoAck() {\n+        return pendingCommits.values().stream().map(list -> list.size()).reduce((a, b) -> a + b).orElse(0);\n+    }\n+\n+    /**\n+     * Process the ACKs only if enable.auto.commit is false.\n+     * This will search events that are ACK and it will commit them to Kafka.\n+     * Those events that are committed will make the {@link KafkaMessage#ack()}\n+     * to complete.\n+     */\n+    private void processACK() {\n+        if (!autoCommit) {\n+            Map<TopicPartition, OffsetAndMetadata> offsets = new LinkedHashMap<>();\n+            List<KafkaMessage<K, V>> messagesToCommit = new LinkedList<>();\n+            // Commit highest offset + 1 of each partition that was ACK, and remove from pending\n+            for (Entry<TopicPartition, List<KafkaMessage<K, V>>> entry : pendingCommits.entrySet()) {\n+                // No need to sort it, offsets are consumed in order\n+                List<KafkaMessage<K, V>> byPartition = entry.getValue();\n+                Iterator<KafkaMessage<K, V>> iterator = byPartition.iterator();\n+                KafkaMessage<K, V> highest = null;\n+                while (iterator.hasNext()) {\n+                    KafkaMessage<K, V> element = iterator.next();\n+                    if (element.isAck()) {\n+                        messagesToCommit.add(element);\n+                        highest = element;\n+                        iterator.remove();\n+                    } else {\n+                        break;\n+                    }\n+                }\n+                if (highest != null) {\n+                    OffsetAndMetadata offset = new OffsetAndMetadata(highest.getPayload().offset() + 1);\n+                    LOGGER.fine(() -> String.format(\"Will commit %s %s\", entry.getKey(), offset));\n+                    offsets.put(entry.getKey(), offset);\n+                }\n+            }\n+            if (!messagesToCommit.isEmpty()) {\n+                Optional<RuntimeException> exception = commitInKafka(offsets);\n+                messagesToCommit.stream().forEach(message -> {\n+                    exception.ifPresentOrElse(\n+                            ex -> message.kafkaCommit().completeExceptionally(ex),\n+                            () -> message.kafkaCommit().complete(null));\n+                });\n+            }\n+        }\n+    }\n+\n+    private Optional<RuntimeException> commitInKafka(Map<TopicPartition, OffsetAndMetadata> offsets) {\n+        LOGGER.fine(() -> String.format(\"%s events to commit: \", offsets.size()));\n+        LOGGER.fine(() -> String.format(\"%s\", offsets));\n+        try {\n+            kafkaConsumer.commitSync(offsets);\n+            LOGGER.fine(() -> \"The commit was successful\");\n+            return Optional.empty();\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.SEVERE, \"Unable to commit in Kafka \" + offsets, e);\n+            return Optional.of(e);\n+        }\n+    }\n+\n+    /**\n+     * Closes the connections to Kafka and stops to process new events.\n+     */\n+    @Override\n+    public void close() {\n+        // Stops pooling\n+        kafkaConsumer.wakeup();\n+        // Wait that current task finishes in case it is still running\n+        try {\n+            taskLock.lock();\n+            LOGGER.fine(() -> \"Pending ACKs: \" + pendingCommits.size());\n+            // Terminate waiting ACKs\n+            pendingCommits.values().stream().flatMap(List::stream)\n+            .forEach(message ->\n+            message.kafkaCommit().completeExceptionally(new TimeoutException(\"Aborted because KafkaPublisher is shutting down\")));\n+            kafkaConsumer.close();\n+            emiter.complete();\n+        } catch (RuntimeException e) {\n+            LOGGER.log(Level.SEVERE, \"Error closing KafkaPublisher\", e);\n+            emiter.fail(e);\n+        } finally {\n+            taskLock.unlock();\n+        }\n+        LOGGER.fine(() -> \"Closed\");\n+    }\n+\n+    //Move to messaging incoming connector\n+    protected void runInNewContext(Runnable runnable) {\n+        Context.Builder contextBuilder = Context.builder()\n+                .id(String.format(\"kafka-message-%s:\", UUID.randomUUID().toString()));\n+        Contexts.context().ifPresent(contextBuilder::parent);\n+        Contexts.runInContext(contextBuilder.build(), runnable);\n+    }\n+\n+    @Override\n+    public void subscribe(Subscriber<? super KafkaMessage<K, V>> subscriber) {\n+        emiter.subscribe(subscriber);\n+    }\n+\n+    /**\n+     * Blocks current thread until partitions are assigned, since when is consumer effectively ready to receive.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.lang.InterruptedException        if the current thread is interrupted while waiting\n+     * @throws java.util.concurrent.TimeoutException if the timeout is reached\n+     */\n+    void waitForPartitionAssigment(long timeout, TimeUnit unit) throws InterruptedException, TimeoutException {\n+        if (!partitionsAssignedLatch.await(timeout, unit)) {\n+            throw new TimeoutException(\"Timeout for subscription reached\");\n+        }\n+    }\n+\n+    /**\n+     * Creates a new instance of ReactiveKafkaPublisher given a scheduler and the configuration and it starts to publish.\n+     *\n+     * Note: after creating a KafkaPublisher you must always\n+     * {@link io.helidon.messaging.connectors.kafka.KafkaPublisher#close()} it to avoid resource leaks.\n+     *\n+     * @param <K> Key type\n+     * @param <V> Value type\n+     * @param scheduler It will trigger the task execution when\n+     * {@link io.helidon.messaging.connectors.kafka.KafkaPublisher#execute()} is invoked\n+     * @param config With the KafkaPublisher required parameters\n+     * @return A new instance of ReactiveKafkaPublisher\n+     */\n+    static <K, V> KafkaPublisher<K, V> build(ScheduledExecutorService scheduler, Config config){\n+        Map<String, Object> kafkaConfig = HelidonToKafkaConfigParser.toMap(config);\n+        List<String> topics = HelidonToKafkaConfigParser.topicNameList(kafkaConfig);\n+        if (topics.isEmpty()) {\n+            throw new IllegalArgumentException(\"The topic is a required configuration value\");\n+        }\n+        Consumer<K, V> kafkaConsumer = new KafkaConsumer<>(kafkaConfig);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 291}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2MDExOnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOToyOFrOGFZudA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOToyOFrOGFZudA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzU1Ng==", "bodyText": "The only allows factory method is create unless there is a good reason not to use it. I do not see a good reason, so please rename to create(Config) (even though this is package local only)", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408317556", "createdAt": "2020-04-14T17:39:28Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+/**\n+ * Reactive streams subscriber implementation.\n+ *\n+ * @param <T> kafka record value type\n+ */\n+class KafkaSubscriber<T> implements Subscriber<Message<T>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaSubscriber.class.getName());\n+    private static final String BACKPRESSURE_SIZE_KEY = \"backpressure.size\";\n+    private static final long BACKPRESSURE_SIZE_DEFAULT = 5;\n+    private final long backpressure;\n+    private final AtomicLong backpressureCounter = new AtomicLong();\n+    private final BasicKafkaProducer<?, T> producer;\n+    private Subscription subscription;\n+\n+    private KafkaSubscriber(BasicKafkaProducer<?, T> producer, long backpressure){\n+        this.backpressure = backpressure;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        if (this.subscription == null) {\n+            this.subscription = subscription;\n+            this.subscription.request(backpressure);\n+        } else {\n+            subscription.cancel();\n+        }\n+    }\n+\n+    @Override\n+    public void onNext(Message<T> message) {\n+        Objects.requireNonNull(message);\n+        producer.produceAsync(message.getPayload());\n+        message.ack();\n+        if (backpressureCounter.incrementAndGet() == backpressure) {\n+            backpressureCounter.set(0);\n+            subscription.request(backpressure);\n+        }\n+    }\n+\n+    @Override\n+    public void onError(Throwable t) {\n+        Objects.requireNonNull(t);\n+        LOGGER.log(Level.SEVERE, \"The Kafka subscription has failed\", t);\n+        producer.close();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        LOGGER.fine(\"Subscriber has finished\");\n+        producer.close();\n+    }\n+\n+    /**\n+     * Creates a new instance of KafkaSubscriber given the configuration.\n+     * Note: Every new instance of this type opens Kafka resources and it will be opened\n+     * till onComplete() or onError() is invoked.\n+     *\n+     * @param <T> The type to push\n+     * @param config With the KafkaSubscriber required parameters\n+     * @return A new KafkaSubscriber instance\n+     */\n+    static <T> KafkaSubscriber<T> build(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2MTk2OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOTo1NlrOGFZvhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzozOTo1NlrOGFZvhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxNzgzMQ==", "bodyText": "Please do not do this.\nUse a builder if you want to specify details and fill them either manually or from config.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408317831", "createdAt": "2020-04-14T17:39:56Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaSubscriber.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import io.helidon.config.Config;\n+\n+import org.apache.kafka.clients.producer.KafkaProducer;\n+import org.apache.kafka.clients.producer.Producer;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+/**\n+ * Reactive streams subscriber implementation.\n+ *\n+ * @param <T> kafka record value type\n+ */\n+class KafkaSubscriber<T> implements Subscriber<Message<T>> {\n+\n+    private static final Logger LOGGER = Logger.getLogger(KafkaSubscriber.class.getName());\n+    private static final String BACKPRESSURE_SIZE_KEY = \"backpressure.size\";\n+    private static final long BACKPRESSURE_SIZE_DEFAULT = 5;\n+    private final long backpressure;\n+    private final AtomicLong backpressureCounter = new AtomicLong();\n+    private final BasicKafkaProducer<?, T> producer;\n+    private Subscription subscription;\n+\n+    private KafkaSubscriber(BasicKafkaProducer<?, T> producer, long backpressure){\n+        this.backpressure = backpressure;\n+        this.producer = producer;\n+    }\n+\n+    @Override\n+    public void onSubscribe(Subscription subscription) {\n+        if (this.subscription == null) {\n+            this.subscription = subscription;\n+            this.subscription.request(backpressure);\n+        } else {\n+            subscription.cancel();\n+        }\n+    }\n+\n+    @Override\n+    public void onNext(Message<T> message) {\n+        Objects.requireNonNull(message);\n+        producer.produceAsync(message.getPayload());\n+        message.ack();\n+        if (backpressureCounter.incrementAndGet() == backpressure) {\n+            backpressureCounter.set(0);\n+            subscription.request(backpressure);\n+        }\n+    }\n+\n+    @Override\n+    public void onError(Throwable t) {\n+        Objects.requireNonNull(t);\n+        LOGGER.log(Level.SEVERE, \"The Kafka subscription has failed\", t);\n+        producer.close();\n+    }\n+\n+    @Override\n+    public void onComplete() {\n+        LOGGER.fine(\"Subscriber has finished\");\n+        producer.close();\n+    }\n+\n+    /**\n+     * Creates a new instance of KafkaSubscriber given the configuration.\n+     * Note: Every new instance of this type opens Kafka resources and it will be opened\n+     * till onComplete() or onError() is invoked.\n+     *\n+     * @param <T> The type to push\n+     * @param config With the KafkaSubscriber required parameters\n+     * @return A new KafkaSubscriber instance\n+     */\n+    static <T> KafkaSubscriber<T> build(Config config) {\n+        Map<String, Object> kafkaConfig = HelidonToKafkaConfigParser.toMap(config);\n+        List<String> topics = HelidonToKafkaConfigParser.topicNameList(kafkaConfig);\n+        if (topics.isEmpty()) {\n+            throw new IllegalArgumentException(\"The topic is a required configuration value\");\n+        }\n+        long backpressure = config.get(BACKPRESSURE_SIZE_KEY).asLong().orElse(BACKPRESSURE_SIZE_DEFAULT);\n+        return new KafkaSubscriber<T>(new BasicKafkaProducer<>(topics, new KafkaProducer<>(kafkaConfig)), backpressure);\n+    }\n+\n+    // For tests", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2NDkyOnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/PartitionsAssignedLatch.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MDo0M1rOGFZxVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQwNTo0NjoxNlrOGFqoPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODI5Mw==", "bodyText": "This seems not to do anything useful. Isn't the contract of ConsumerRebalancerListener a bit more complicated?", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408318293", "createdAt": "2020-04-14T17:40:43Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/PartitionsAssignedLatch.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.logging.Logger;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;\n+import org.apache.kafka.common.TopicPartition;\n+\n+/**\n+ * Waiting latch for partition assigment, after that is consumer ready to receive.\n+ */\n+class PartitionsAssignedLatch extends CountDownLatch implements ConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODU5NDQ5NQ==", "bodyText": "From the point of view of reading new events, we don't care about the partitions because we don't specify them.\nBut this could affects pending commits. This is the current strategy when this happens:\n\nEvent is coming from partition A.\nUser is processing it.\nKafka revoke that partition.\nUser ack, commit is sent.\nKafka should throw CommitFailedException, because that partition doesn't exist.\nThe exception is sent to the ack, so user can decide. Note that publisher doesn't fail in this scenario, but the user can cancel the subscription if he wants to.\n\nOnce partition is up again, Kafka should send the message again (because it was not successfully committed).", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408594495", "createdAt": "2020-04-15T05:46:16Z", "author": {"login": "jbescos"}, "path": "messaging/connectors/kafka/src/main/java/io/helidon/messaging/connectors/kafka/PartitionsAssignedLatch.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Collection;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.logging.Logger;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRebalanceListener;\n+import org.apache.kafka.common.TopicPartition;\n+\n+/**\n+ * Waiting latch for partition assigment, after that is consumer ready to receive.\n+ */\n+class PartitionsAssignedLatch extends CountDownLatch implements ConsumerRebalanceListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxODI5Mw=="}, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk2OTc2OnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/main/java/module-info.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTo1NVrOGFZ0XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MTo1NVrOGFZ0XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxOTA2OQ==", "bodyText": "Helidon MP implementations must not be required in an SE module.\nIf you want to split into SE/MP, then SE modules can only depend on other SE modules.\nSE modules can depend on MP APIs and SPIs of the specifications.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408319069", "createdAt": "2020-04-14T17:41:55Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+module io.helidon.microprofile.connectors.kafka {\n+    requires java.logging;\n+\n+    requires static cdi.api;\n+    requires static javax.inject;\n+    requires static java.activation;\n+    requires static kafka.clients;\n+    requires io.helidon.microprofile.config;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNDk3MTQyOnYy", "diffSide": "RIGHT", "path": "messaging/connectors/kafka/src/test/java/io/helidon/messaging/connectors/kafka/AbstractSampleBean.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MjoyMVrOGFZ1aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxNzo0MjoyMVrOGFZ1aQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODMxOTMzNw==", "bodyText": "This is a CDI bean, should not be part of SE impementation at all.", "url": "https://github.com/oracle/helidon/pull/1510#discussion_r408319337", "createdAt": "2020-04-14T17:42:21Z", "author": {"login": "tomas-langer"}, "path": "messaging/connectors/kafka/src/test/java/io/helidon/messaging/connectors/kafka/AbstractSampleBean.java", "diffHunk": "@@ -0,0 +1,238 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.helidon.messaging.connectors.kafka.KafkaMessage;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.eclipse.microprofile.reactive.streams.operators.SubscriberBuilder;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * This class contains the outputs of the tests. In order to avoid that one test mess up in the results\n+ * of other tests (this could happen when some data is produced in one test and it is not committed),\n+ * there are many subclasses of AbstractSampleBean.\n+ */\n+abstract class AbstractSampleBean {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29ac5c1aa06b0c527a9dec6c1e8c8117ae1ee425"}, "originalPosition": 48}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 284, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}