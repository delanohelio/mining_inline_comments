{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MjA1ODU1", "number": 2353, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMFrOEjHV2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNjo0NlrOEj7Vfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjU1ODk2OnYy", "diffSide": "RIGHT", "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMFrOHRSsVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzoyOTozMFrOHSjxKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ==", "bodyText": "Would be nice to add something like boolean dirtiesContext() default false; if we want fresh container for every test", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r487894101", "createdAt": "2020-09-14T13:02:30Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NDE0OQ==", "bodyText": "Related question, how do JUnit extensions work if TestA runs before TestB and sets config, extensions and beans. Can TestB run with a fresh environment?", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r487984149", "createdAt": "2020-09-14T14:38:36Z", "author": {"login": "spericas"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAzNTM5Nw==", "bodyText": "Can be done by injecting beans to the test methods params instead", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488035397", "createdAt": "2020-09-14T15:43:44Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2MjY4NQ==", "bodyText": "That is quite expensive and complicated. Considering the test class itself is supposed to be a CDI bean, shutting the container and starting it again between tests would be unexpected (as you would need to run the next test method on a different instance of the bean)", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488162685", "createdAt": "2020-09-14T19:14:43Z", "author": {"login": "tomas-langer"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1MzI1NA==", "bodyText": "I will try to do the following and see how complex it is:\nAllow @HelidonTest(resetPerTest=true)\nIn such a case:\n\nNo injection allowed into the class itself or using constructor\nAnnotations would be combined from class level and method levels\nEach method would run in a separate container\nTest methods can have SeContainer as a parameter", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488853254", "createdAt": "2020-09-15T17:45:52Z", "author": {"login": "tomas-langer"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMTE5OA==", "bodyText": "Awesome thats exactly it! Works like a charm!\n    private WebClient client;\n    private TestMessagingBean bean;\n\n    @BeforeEach\n    void beforeEach() {\n        ServerCdiExtension server = CDI.current().select(ServerCdiExtension.class).get();\n        bean = CDI.current().select(TestMessagingBean.class).get();\n        client = WebClient.builder()\n                .baseUri(\"http://localhost:\" + server.port())\n                .addReader(JsonpSupport.reader())\n                .build();\n    }\n\n    @Test\n    void alivenessWithErrorSignal(SeContainer seContainer) {\n        TestMessagingBean bean = seContainer.select(TestMessagingBean.class).get();", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r489221198", "createdAt": "2020-09-16T07:27:16Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyMjQ0MQ==", "bodyText": "And its faster!\nContainer per method coded manually:\n\nContainer per method with @HelidonTest(resetPerTest = true):", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r489222441", "createdAt": "2020-09-16T07:29:30Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjc3MzUwOnYy", "diffSide": "RIGHT", "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MjozMlrOHRUqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzowNjoyMFrOHSjBEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA==", "bodyText": "Works when injecting to field, but constructor param is not injected in my case:\n@HelidonTest(discovery = false)\n@AddBeans({\n        @AddBean(MessagingLivenessCheck.class),\n        @AddBean(TestMessagingBean.class),\n})\n@AddExtensions({\n        @AddExtension(ConfigCdiExtension.class),\n        @AddExtension(ServerCdiExtension.class),\n        @AddExtension(JaxRsCdiExtension.class),\n        @AddExtension(HealthCdiExtension.class),\n        @AddExtension(MessagingCdiExtension.class),\n})\npublic class MessagingHealthTest {\n\n    private WebClient client;\n\n    @Inject\n    public MessagingHealthTest(ServerCdiExtension server) {\n        //ServerCdiExtension server = CDI.current().select(ServerCdiExtension.class).get();\n        client = WebClient.builder()\n                .baseUri(\"http://localhost:\" + server.port())\n                .addReader(JsonpSupport.reader())\n                .build();\n    }\norg.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [io.helidon.microprofile.server.ServerCdiExtension arg0] in constructor [public io.helidon.microprofile.messaging.health.MessagingHealthTest(io.helidon.microprofile.server.ServerCdiExtension)", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r487926410", "createdAt": "2020-09-14T13:42:32Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyODk0Mw==", "bodyText": "Turns out io.helidon.microprofile.tests.junit5.HelidonJunitExtension#interceptTestClassConstructor didn't get invoked at all.\nBut when implementing org.junit.jupiter.api.extension.ParameterResolver\n    @Override\n    public boolean supportsParameter(final ParameterContext parameterContext, final ExtensionContext extensionContext) throws ParameterResolutionException {\n        return !container.select(parameterContext.getParameter().getType()).isUnsatisfied();\n    }\n\n    @Override\n    public Object resolveParameter(final ParameterContext parameterContext, final ExtensionContext extensionContext) throws ParameterResolutionException {\n        return container.select(parameterContext.getParameter().getType()).get();\n    }\nConstructor params get resolved", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r487928943", "createdAt": "2020-09-14T13:45:05Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2Mzg0Ng==", "bodyText": "I will look into the constructor injection", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488163846", "createdAt": "2020-09-14T19:16:45Z", "author": {"login": "tomas-langer"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NDgyNg==", "bodyText": "On the other hand people usually do not expect to add constructors to their test classes...", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488164826", "createdAt": "2020-09-14T19:18:33Z", "author": {"login": "tomas-langer"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE2NzgzMw==", "bodyText": "But when the test class becomes a bean ... \ud83d\ude04 , there is no other beforeAll invoked after injection", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488167833", "createdAt": "2020-09-14T19:24:21Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE3NTI3MQ==", "bodyText": "More of a nice to have than a must have IMO", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488175271", "createdAt": "2020-09-14T19:39:04Z", "author": {"login": "spericas"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMjM2Mw==", "bodyText": "This seems to be a small \"miss-design\" in Junit - they obtain argument definitions, argument values, and then their code is ignored, as I use CDI to instantiate the bean (so all of that gets discarded).\nI have created a workaround that does not actually select the constructor parameters from CDI and just returns default values (null or primitive type). Added a test as well", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r488822363", "createdAt": "2020-09-15T17:01:52Z", "author": {"login": "tomas-langer"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIxMDEyOA==", "bodyText": "Thx for the hint @PostConstruct is just the beforeAll I needed\n@HelidonTest(resetPerTest = false)\n@DisableDiscovery\n@AddBeans({\n        @AddBean(MessagingLivenessCheck.class),\n        @AddBean(TestMessagingBean.class),\n})\n@AddExtensions({\n        @AddExtension(ConfigCdiExtension.class),\n        @AddExtension(ServerCdiExtension.class),\n        @AddExtension(JaxRsCdiExtension.class),\n        @AddExtension(HealthCdiExtension.class),\n        @AddExtension(MessagingCdiExtension.class),\n})\nclass MessagingHealthTest {\n\n    private WebClient client;\n\n    @Inject\n    ServerCdiExtension server;\n\n    @Inject\n    TestMessagingBean bean;\n\n    @PostConstruct\n    void beforeAll() {\n        client = WebClient.builder()\n                .baseUri(\"http://localhost:\" + server.port())\n                .addReader(JsonpSupport.reader())\n                .build();\n    }", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r489210128", "createdAt": "2020-09-16T07:06:20Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA=="}, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2MTA3Nzc0OnYy", "diffSide": "RIGHT", "path": "docs/mp/testing/01_testing.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNjo0NlrOHSkBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMDo0NzoxN1rOHSrI-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNjUxMQ==", "bodyText": "sued", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r489226511", "createdAt": "2020-09-16T07:36:46Z", "author": {"login": "danielkec"}, "path": "docs/mp/testing/01_testing.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Testing with JUnit5\n+:h1Prefix: MP\n+:pagename: testing\n+:description: Helidon Testing\n+:keywords: helidon, mp, test, testing\n+\n+Helidon provides built-in test support for CDI testing in JUnit5.\n+\n+== Dependency\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile.tests</groupId>\n+    <artifactId>helidon-microprofile-tests-junit5</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+== Usage - default\n+A test can be annotated with `io.helidon.microprofile.tests.junit5.HelidonTest` annotation to mark it as a\n+CDI test. This annotation will start the CDI container before any test method is invoked, and stop it after\n+the last method is invoked. This annotation also enables injection into the test class itself.\n+\n+In addition to this simplification, the following annotations are supported:\n+\n+- `io.helidon.microprofile.tests.junit5.AddBean` - to add one or more beans to the container\n+        (if not part of a bean archive, or when discovery is disabled)\n+- `io.helidon.microprofile.tests.junit5.AddExtension` - to add one or more CDI extensions to the container\n+        (if not added through service loader, or when discovery is disabled)\n+- `io.helidon.microprofile.tests.junit5.AddConfig` - to add one or more configuration properties to MicroProfile config\n+        without the need of creating a `microprofile-config.properties` file\n+\n+[source,java]\n+.Code sample\n+----\n+@HelidonTest\n+@DisableDiscovery\n+@AddBean(MyBean.class)\n+@AddExtension(ConfigCdiExtension.class)\n+@AddConfig(key = \"app.greeting\", value = \"TestHello\")\n+class TestNoDiscovery {\n+    @Inject\n+    private MyBean myBean;\n+\n+    @Test\n+    void testGreeting() {\n+        assertThat(myBean, notNullValue());\n+        assertThat(myBean.greeting(), is(\"TestHello\"));\n+    }\n+}\n+----\n+\n+== Usage - per method CDI container\n+A test can be annotated as follows:\n+\n+`@HelidonTest(resetPerTest = true)`\n+\n+This will change the behavior as follows:\n+\n+- A new CDI container is created for each test method invocation\n+- annotations to add config, beans and extension can be added for each method in addition to the class\n+- you cannot inject fields or constructor parameters of the test class itself (as a single instance is shared by more containers)\n+- you can add `SeContainer` as a method parameter of any test method and you will get the current container\n+\n+== Usage - configuration\n+In addition to the `@AddConfig` annotation, you can also use\n+ `@Configuration`.\n+\n+This allows you to do the following:\n+\n+- when `useExisting` is set to `true`, the configuration will not be changed\n+        and current MP configuration will be sued", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643016b9fc2fc4d141da78e4a02ef85b3c66c116"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM0MzIyNQ==", "bodyText": "the court room awaits", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r489343225", "createdAt": "2020-09-16T10:47:17Z", "author": {"login": "tomas-langer"}, "path": "docs/mp/testing/01_testing.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Testing with JUnit5\n+:h1Prefix: MP\n+:pagename: testing\n+:description: Helidon Testing\n+:keywords: helidon, mp, test, testing\n+\n+Helidon provides built-in test support for CDI testing in JUnit5.\n+\n+== Dependency\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile.tests</groupId>\n+    <artifactId>helidon-microprofile-tests-junit5</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+== Usage - default\n+A test can be annotated with `io.helidon.microprofile.tests.junit5.HelidonTest` annotation to mark it as a\n+CDI test. This annotation will start the CDI container before any test method is invoked, and stop it after\n+the last method is invoked. This annotation also enables injection into the test class itself.\n+\n+In addition to this simplification, the following annotations are supported:\n+\n+- `io.helidon.microprofile.tests.junit5.AddBean` - to add one or more beans to the container\n+        (if not part of a bean archive, or when discovery is disabled)\n+- `io.helidon.microprofile.tests.junit5.AddExtension` - to add one or more CDI extensions to the container\n+        (if not added through service loader, or when discovery is disabled)\n+- `io.helidon.microprofile.tests.junit5.AddConfig` - to add one or more configuration properties to MicroProfile config\n+        without the need of creating a `microprofile-config.properties` file\n+\n+[source,java]\n+.Code sample\n+----\n+@HelidonTest\n+@DisableDiscovery\n+@AddBean(MyBean.class)\n+@AddExtension(ConfigCdiExtension.class)\n+@AddConfig(key = \"app.greeting\", value = \"TestHello\")\n+class TestNoDiscovery {\n+    @Inject\n+    private MyBean myBean;\n+\n+    @Test\n+    void testGreeting() {\n+        assertThat(myBean, notNullValue());\n+        assertThat(myBean.greeting(), is(\"TestHello\"));\n+    }\n+}\n+----\n+\n+== Usage - per method CDI container\n+A test can be annotated as follows:\n+\n+`@HelidonTest(resetPerTest = true)`\n+\n+This will change the behavior as follows:\n+\n+- A new CDI container is created for each test method invocation\n+- annotations to add config, beans and extension can be added for each method in addition to the class\n+- you cannot inject fields or constructor parameters of the test class itself (as a single instance is shared by more containers)\n+- you can add `SeContainer` as a method parameter of any test method and you will get the current container\n+\n+== Usage - configuration\n+In addition to the `@AddConfig` annotation, you can also use\n+ `@Configuration`.\n+\n+This allows you to do the following:\n+\n+- when `useExisting` is set to `true`, the configuration will not be changed\n+        and current MP configuration will be sued", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNjUxMQ=="}, "originalCommit": {"oid": "643016b9fc2fc4d141da78e4a02ef85b3c66c116"}, "originalPosition": 92}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 406, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}