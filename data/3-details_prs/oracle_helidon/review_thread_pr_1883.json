{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTQxNjE2", "number": 1883, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0MDozMVrOEANLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0MDozMVrOEANLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjUxMzkyOnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/NettyClientHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0MDozMVrOGbV9Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzo0MDozMVrOGbV9Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMyNDQ5OQ==", "bodyText": "This approach is not correct.\n\nyou will create a new Single every time method close is called\nyou should create a new single for each response\nisClosed may use the cf.isDone rather than this strange construct", "url": "https://github.com/oracle/helidon/pull/1883#discussion_r431324499", "createdAt": "2020-05-27T17:40:31Z", "author": {"login": "tomas-langer"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/NettyClientHandler.java", "diffHunk": "@@ -273,27 +279,44 @@ public int emit(final ByteBuf buf) {\n \n     final class ResponseCloser {\n \n-        private final AtomicBoolean closed;\n+        private final AtomicReference<Single<Void>> singleClosed;\n         private final ChannelHandlerContext ctx;\n+        private final CompletableFuture<Void> cf;\n \n         ResponseCloser(ChannelHandlerContext ctx) {\n             this.ctx = ctx;\n-            this.closed = new AtomicBoolean();\n+            this.singleClosed = new AtomicReference<>();\n+            cf = new CompletableFuture<>();\n         }\n \n         boolean isClosed() {\n-            return closed.get();\n+            return singleClosed.get() != null;\n         }\n \n-        ChannelFuture close() {\n-            if (closed.compareAndSet(false, true)) {\n+        /**\n+         * Asynchronous close method.\n+         *\n+         * @return single of the closing process\n+         */\n+        Single<Void> close() {\n+            if (singleClosed.compareAndSet(null, Single.from(cf, true))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0175164ae75263e5d0a28f62892cad7bf356ca53"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 581, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}