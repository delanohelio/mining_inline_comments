{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NDYzNzk5", "number": 2257, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDowN1rOEYZk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMjo1OFrOEYZoWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDIwMzI4OnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMDowN1rOHAtuzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyOTozN1rOHAuBUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTMxMQ==", "bodyText": "public method in a non-public class, also no javadoc", "url": "https://github.com/oracle/helidon/pull/2257#discussion_r470511311", "createdAt": "2020-08-14T09:20:07Z", "author": {"login": "tomas-langer"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "diffHunk": "@@ -50,13 +52,18 @@ WebClientServiceRequest clientServiceRequest() {\n         return services;\n     }\n \n+    public long requestId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e5a888ed0cc179a7e7d3383cb82fbddf2632382"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxNjA1MQ==", "bodyText": "ehm... yes.. This should be package private", "url": "https://github.com/oracle/helidon/pull/2257#discussion_r470516051", "createdAt": "2020-08-14T09:29:37Z", "author": {"login": "Verdent"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "diffHunk": "@@ -50,13 +52,18 @@ WebClientServiceRequest clientServiceRequest() {\n         return services;\n     }\n \n+    public long requestId() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMTMxMQ=="}, "originalCommit": {"oid": "0e5a888ed0cc179a7e7d3383cb82fbddf2632382"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MDIxMjA4OnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOToyMjo1OFrOHAt0GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwOTo1ODoyN1rOHAu4yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMjY2NA==", "bodyText": "If we want to have request id, it should be configurable (esp. when using tracing, we may want to bind it to the trace id).", "url": "https://github.com/oracle/helidon/pull/2257#discussion_r470512664", "createdAt": "2020-08-14T09:22:58Z", "author": {"login": "tomas-langer"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java", "diffHunk": "@@ -147,7 +149,8 @@ private WebClientRequestBuilderImpl(LazyValue<NioEventLoopGroup> eventGroup,\n         this.services = configuration.clientServices();\n         this.readerContext = MessageBodyReaderContext.create(configuration.readerContext());\n         this.writerContext = MessageBodyWriterContext.create(configuration.writerContext(), headers);\n-        Context.Builder contextBuilder = Context.builder().id(\"webclient-\" + REQUEST_NUMBER.incrementAndGet());\n+        this.requestId = REQUEST_NUMBER.incrementAndGet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e5a888ed0cc179a7e7d3383cb82fbddf2632382"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUzMDI1MQ==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/2257#discussion_r470530251", "createdAt": "2020-08-14T09:58:27Z", "author": {"login": "Verdent"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/WebClientRequestBuilderImpl.java", "diffHunk": "@@ -147,7 +149,8 @@ private WebClientRequestBuilderImpl(LazyValue<NioEventLoopGroup> eventGroup,\n         this.services = configuration.clientServices();\n         this.readerContext = MessageBodyReaderContext.create(configuration.readerContext());\n         this.writerContext = MessageBodyWriterContext.create(configuration.writerContext(), headers);\n-        Context.Builder contextBuilder = Context.builder().id(\"webclient-\" + REQUEST_NUMBER.incrementAndGet());\n+        this.requestId = REQUEST_NUMBER.incrementAndGet();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDUxMjY2NA=="}, "originalCommit": {"oid": "0e5a888ed0cc179a7e7d3383cb82fbddf2632382"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 485, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}