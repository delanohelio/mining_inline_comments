{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2MjA1ODU1", "number": 2353, "title": "MP Testing", "bodyText": "Signed-off-by: Tomas Langer tomas.langer@oracle.com\nResolves #2364\nSupport for MP testing allowing the following:\n@HelidonTest\nclass TestAutoDiscovery {\n    @Inject\n    @ConfigProperty(name=\"app.greeting\")\n    private String greeting;\n\n    @Test\n    void testGreeting() {\n        assertThat(greeting, is(\"TestHello\"));\n    }\n}\nOr for more complex tests:\n@HelidonTest\n@DisableDiscovery\n@AddBean(MyBean.class)\n@AddExtension(ConfigCdiExtension.class)\n@AddConfig(key = \"app.greeting\", value = \"TestHello\")\nclass TestNoDiscovery {\n    @Inject\n    private MyBean myBean;\n\n    @Test\n    void testGreeting() {\n        assertThat(myBean, notNullValue());\n        assertThat(myBean.greeting(), is(\"TestHello\"));\n    }\n}", "createdAt": "2020-09-13T16:28:00Z", "url": "https://github.com/oracle/helidon/pull/2353", "merged": true, "mergeCommit": {"oid": "d6bfedfccdd0e98839de2579b9951619daf622ba"}, "closed": true, "closedAt": "2020-09-16T15:58:01Z", "author": {"login": "tomas-langer"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdIy1qnAFqTQ4NzcyOTQ4NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJa83ZAFqTQ4OTU0MTMxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzI5NDg1", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-487729485", "createdAt": "2020-09-14T13:02:30Z", "commit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMFrOHRSsVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzowMjozMFrOHRSsVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzg5NDEwMQ==", "bodyText": "Would be nice to add something like boolean dirtiesContext() default false; if we want fresh container for every test", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r487894101", "createdAt": "2020-09-14T13:02:30Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonTest.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+/**\n+ * An annotation making this test class a CDI bean with support for injection.\n+ * <p>\n+ * There is no need to provide {@code beans.xml} (actually it is not recommended, as it would combine beans\n+ * from all tests), instead use {@link io.helidon.microprofile.tests.junit5.AddBean},\n+ * {@link io.helidon.microprofile.tests.junit5.AddExtension}, and {@link io.helidon.microprofile.tests.junit5.AddConfig}\n+ * annotations to control the shape of the container.\n+ */\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.TYPE)\n+@ExtendWith(HelidonJunitExtension.class)\n+public @interface HelidonTest {\n+    /**\n+     * Whether discovery is automated or disabled.\n+     * <p>\n+     * When discovery is enabled, the whole classpath is scanned for bean archives (jar files containing\n+     * {@code META-INF/beans.xml}) and all beans and extensions are added automatically.\n+     * <p>\n+     * When discovery is disabled, CDI would only contain the CDI implementation itself and beans and extensions added\n+     * through annotations {@link io.helidon.microprofile.tests.junit5.AddBean} and\n+     * {@link io.helidon.microprofile.tests.junit5.AddExtension}\n+     *\n+     * @return whether to do discovery, defaults to {@code true}\n+     */\n+    boolean discovery() default true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3NzgxMjYz", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-487781263", "createdAt": "2020-09-14T13:42:32Z", "commit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MjozMlrOHRUqig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo0MjozMlrOHRUqig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzkyNjQxMA==", "bodyText": "Works when injecting to field, but constructor param is not injected in my case:\n@HelidonTest(discovery = false)\n@AddBeans({\n        @AddBean(MessagingLivenessCheck.class),\n        @AddBean(TestMessagingBean.class),\n})\n@AddExtensions({\n        @AddExtension(ConfigCdiExtension.class),\n        @AddExtension(ServerCdiExtension.class),\n        @AddExtension(JaxRsCdiExtension.class),\n        @AddExtension(HealthCdiExtension.class),\n        @AddExtension(MessagingCdiExtension.class),\n})\npublic class MessagingHealthTest {\n\n    private WebClient client;\n\n    @Inject\n    public MessagingHealthTest(ServerCdiExtension server) {\n        //ServerCdiExtension server = CDI.current().select(ServerCdiExtension.class).get();\n        client = WebClient.builder()\n                .baseUri(\"http://localhost:\" + server.port())\n                .addReader(JsonpSupport.reader())\n                .build();\n    }\norg.junit.jupiter.api.extension.ParameterResolutionException: No ParameterResolver registered for parameter [io.helidon.microprofile.server.ServerCdiExtension arg0] in constructor [public io.helidon.microprofile.messaging.health.MessagingHealthTest(io.helidon.microprofile.server.ServerCdiExtension)", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r487926410", "createdAt": "2020-09-14T13:42:32Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/junit5/src/main/java/io/helidon/microprofile/tests/junit5/HelidonJunitExtension.java", "diffHunk": "@@ -0,0 +1,160 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.tests.junit5;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.Modifier;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.RequestScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.BeforeBeanDiscovery;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.inject.Singleton;\n+\n+import io.helidon.config.mp.MpConfigSources;\n+\n+import org.eclipse.microprofile.config.Config;\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.extension.AfterAllCallback;\n+import org.junit.jupiter.api.extension.BeforeAllCallback;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.InvocationInterceptor;\n+import org.junit.jupiter.api.extension.ReflectiveInvocationContext;\n+\n+/**\n+ * Junit5 extension to support Helidon CDI container in tests.\n+ */\n+class HelidonJunitExtension implements BeforeAllCallback, AfterAllCallback, InvocationInterceptor {\n+    private Config config;\n+    private ConfigProviderResolver instance;\n+    private SeContainer container;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void beforeAll(ExtensionContext context) {\n+        Class<?> testClass = context.getRequiredTestClass();\n+\n+        // prepare configuration\n+        Map<String, String> additionalConfig = new HashMap<>();\n+        additionalConfig.put(\"mp.initializer.allow\", \"true\");\n+        additionalConfig.put(\"mp.initializer.no-warn\", \"true\");\n+\n+        AddConfig[] configAnnotations = testClass.getAnnotationsByType(AddConfig.class);\n+\n+        for (AddConfig configAnnotation : configAnnotations) {\n+            additionalConfig.put(configAnnotation.key(), configAnnotation.value());\n+        }\n+\n+        instance = ConfigProviderResolver.instance();\n+        config = instance.getBuilder()\n+                .withSources(MpConfigSources.create(additionalConfig))\n+                .addDefaultSources()\n+                .addDiscoveredSources()\n+                .addDiscoveredConverters()\n+                .build();\n+        instance.registerConfig(config, Thread.currentThread().getContextClassLoader());\n+\n+        // now let's prepare the CDI bootstrapping\n+        SeContainerInitializer initializer = SeContainerInitializer.newInstance();\n+\n+        HelidonTest testAnnot = testClass.getAnnotation(HelidonTest.class);\n+        if (testAnnot != null) {\n+            if (!testAnnot.discovery()) {\n+                initializer.disableDiscovery();\n+            }\n+        }\n+\n+        AddBean[] addBeans = testClass.getAnnotationsByType(AddBean.class);\n+        initializer.addExtensions(new AddBeansExtension(testClass, addBeans));\n+\n+        AddExtension[] addExtensions = testClass.getAnnotationsByType(AddExtension.class);\n+        for (AddExtension addExtension : addExtensions) {\n+            Class<? extends Extension> extensionClass = addExtension.value();\n+            if (Modifier.isPublic(extensionClass.getModifiers())) {\n+                initializer.addExtensions(addExtension.value());\n+            } else {\n+                throw new IllegalArgumentException(\"Extension classes must be public, but \" + extensionClass\n+                        .getName() + \" is not\");\n+            }\n+        }\n+\n+        container = initializer.initialize();\n+    }\n+\n+    @Override\n+    public void afterAll(ExtensionContext context) {\n+        if (container != null) {\n+            container.close();\n+        }\n+        if (instance != null && config != null) {\n+            instance.releaseConfig(config);\n+        }\n+    }\n+\n+    @Override\n+    public <T> T interceptTestClassConstructor(Invocation<T> invocation,\n+                                               ReflectiveInvocationContext<Constructor<T>> invocationContext,\n+                                               ExtensionContext extensionContext) {\n+\n+        // we need to replace instantiation with CDI lookup, to properly injection into fields (and constructors)\n+        invocation.skip();\n+\n+        return container.select(invocationContext.getExecutable().getDeclaringClass())\n+                .get();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "originalPosition": 124}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4MDg0NDI1", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-488084425", "createdAt": "2020-09-14T19:39:55Z", "commit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6e526b28f95e75ccb831a44eac43b4b4a67ec7c1", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/6e526b28f95e75ccb831a44eac43b4b4a67ec7c1", "committedDate": "2020-09-13T22:53:37Z", "message": "Update package-info.java\n\nCheckstyle fix"}, "afterCommit": {"oid": "c99bacbd3081d3f0847857d559b6e6d0b0cf1e4c", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/c99bacbd3081d3f0847857d559b6e6d0b0cf1e4c", "committedDate": "2020-09-15T19:29:18Z", "message": "Added support for\n * per test method CDI container.\n * custom config sources\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0d6336cb2e59ad127fd171e3db4ae9ac7b66f0f", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/d0d6336cb2e59ad127fd171e3db4ae9ac7b66f0f", "committedDate": "2020-09-15T19:34:37Z", "message": "MP Testing\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b7ee0723629cff50c77190619466c9ab1a7dcfd", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/0b7ee0723629cff50c77190619466c9ab1a7dcfd", "committedDate": "2020-09-15T19:34:37Z", "message": "Added support for\n * per test method CDI container.\n * custom config sources\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5729e78cce664823ac684e3abbe329908b40b283", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/5729e78cce664823ac684e3abbe329908b40b283", "committedDate": "2020-09-15T20:04:29Z", "message": "Rebased and checkstyle fixed.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c99bacbd3081d3f0847857d559b6e6d0b0cf1e4c", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/c99bacbd3081d3f0847857d559b6e6d0b0cf1e4c", "committedDate": "2020-09-15T19:29:18Z", "message": "Added support for\n * per test method CDI container.\n * custom config sources\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "5729e78cce664823ac684e3abbe329908b40b283", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/5729e78cce664823ac684e3abbe329908b40b283", "committedDate": "2020-09-15T20:04:29Z", "message": "Rebased and checkstyle fixed.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9d029e891facd60fb529a3a07b4af9a4cc76983", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/c9d029e891facd60fb529a3a07b4af9a4cc76983", "committedDate": "2020-09-15T20:31:35Z", "message": "We now only care about constructor parameters.\nMethod parameter is only checked when running in per-method mode.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "643016b9fc2fc4d141da78e4a02ef85b3c66c116", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/643016b9fc2fc4d141da78e4a02ef85b3c66c116", "committedDate": "2020-09-15T20:34:15Z", "message": "Added test scope when using the integration.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzUyNDU5", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-489352459", "createdAt": "2020-09-16T07:36:46Z", "commit": {"oid": "643016b9fc2fc4d141da78e4a02ef85b3c66c116"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNjo0NlrOHSkBDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNzozNjo0NlrOHSkBDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTIyNjUxMQ==", "bodyText": "sued", "url": "https://github.com/oracle/helidon/pull/2353#discussion_r489226511", "createdAt": "2020-09-16T07:36:46Z", "author": {"login": "danielkec"}, "path": "docs/mp/testing/01_testing.adoc", "diffHunk": "@@ -0,0 +1,93 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Testing with JUnit5\n+:h1Prefix: MP\n+:pagename: testing\n+:description: Helidon Testing\n+:keywords: helidon, mp, test, testing\n+\n+Helidon provides built-in test support for CDI testing in JUnit5.\n+\n+== Dependency\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.microprofile.tests</groupId>\n+    <artifactId>helidon-microprofile-tests-junit5</artifactId>\n+    <scope>test</scope>\n+</dependency>\n+----\n+\n+== Usage - default\n+A test can be annotated with `io.helidon.microprofile.tests.junit5.HelidonTest` annotation to mark it as a\n+CDI test. This annotation will start the CDI container before any test method is invoked, and stop it after\n+the last method is invoked. This annotation also enables injection into the test class itself.\n+\n+In addition to this simplification, the following annotations are supported:\n+\n+- `io.helidon.microprofile.tests.junit5.AddBean` - to add one or more beans to the container\n+        (if not part of a bean archive, or when discovery is disabled)\n+- `io.helidon.microprofile.tests.junit5.AddExtension` - to add one or more CDI extensions to the container\n+        (if not added through service loader, or when discovery is disabled)\n+- `io.helidon.microprofile.tests.junit5.AddConfig` - to add one or more configuration properties to MicroProfile config\n+        without the need of creating a `microprofile-config.properties` file\n+\n+[source,java]\n+.Code sample\n+----\n+@HelidonTest\n+@DisableDiscovery\n+@AddBean(MyBean.class)\n+@AddExtension(ConfigCdiExtension.class)\n+@AddConfig(key = \"app.greeting\", value = \"TestHello\")\n+class TestNoDiscovery {\n+    @Inject\n+    private MyBean myBean;\n+\n+    @Test\n+    void testGreeting() {\n+        assertThat(myBean, notNullValue());\n+        assertThat(myBean.greeting(), is(\"TestHello\"));\n+    }\n+}\n+----\n+\n+== Usage - per method CDI container\n+A test can be annotated as follows:\n+\n+`@HelidonTest(resetPerTest = true)`\n+\n+This will change the behavior as follows:\n+\n+- A new CDI container is created for each test method invocation\n+- annotations to add config, beans and extension can be added for each method in addition to the class\n+- you cannot inject fields or constructor parameters of the test class itself (as a single instance is shared by more containers)\n+- you can add `SeContainer` as a method parameter of any test method and you will get the current container\n+\n+== Usage - configuration\n+In addition to the `@AddConfig` annotation, you can also use\n+ `@Configuration`.\n+\n+This allows you to do the following:\n+\n+- when `useExisting` is set to `true`, the configuration will not be changed\n+        and current MP configuration will be sued", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "643016b9fc2fc4d141da78e4a02ef85b3c66c116"}, "originalPosition": 92}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MzgzODA1", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-489383805", "createdAt": "2020-09-16T08:17:31Z", "commit": {"oid": "643016b9fc2fc4d141da78e4a02ef85b3c66c116"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448c03f11178c344b7308c1d645096a20a16aa67", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/448c03f11178c344b7308c1d645096a20a16aa67", "committedDate": "2020-09-16T10:47:46Z", "message": "Typo fixed.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTAzMzYx", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-489503361", "createdAt": "2020-09-16T10:49:22Z", "commit": {"oid": "448c03f11178c344b7308c1d645096a20a16aa67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5NTQxMzEx", "url": "https://github.com/oracle/helidon/pull/2353#pullrequestreview-489541311", "createdAt": "2020-09-16T11:46:34Z", "commit": {"oid": "448c03f11178c344b7308c1d645096a20a16aa67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 452, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}