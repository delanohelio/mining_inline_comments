{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwMjk1NTg5", "number": 2557, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNDoyNFrOFCU53Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxOTo0NFrOFCVG3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTgzOTY1OnYy", "diffSide": "RIGHT", "path": "dependencies/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNDoyNFrOIBag-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMzozNlrOIBbtgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1MzkxNQ==", "bodyText": "ojdbc should not be part of this PR", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538353915", "createdAt": "2020-12-08T13:14:24Z", "author": {"login": "tomas-langer"}, "path": "dependencies/pom.xml", "diffHunk": "@@ -100,7 +100,8 @@\n         <version.lib.mockito>2.23.4</version.lib.mockito>\n         <version.lib.mongodb.reactivestreams>1.11.0</version.lib.mongodb.reactivestreams>\n         <version.lib.mssql-jdbc>8.4.1.jre8</version.lib.mssql-jdbc>\n-        <version.lib.mysql-connector-java>8.0.11</version.lib.mysql-connector-java>\n+        <version.lib.oracle.ojdbc10>19.3.0.0</version.lib.oracle.ojdbc10>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MzUwNQ==", "bodyText": "Removed", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538373505", "createdAt": "2020-12-08T13:33:36Z", "author": {"login": "Tomas-Kraus"}, "path": "dependencies/pom.xml", "diffHunk": "@@ -100,7 +100,8 @@\n         <version.lib.mockito>2.23.4</version.lib.mockito>\n         <version.lib.mongodb.reactivestreams>1.11.0</version.lib.mongodb.reactivestreams>\n         <version.lib.mssql-jdbc>8.4.1.jre8</version.lib.mssql-jdbc>\n-        <version.lib.mysql-connector-java>8.0.11</version.lib.mysql-connector-java>\n+        <version.lib.oracle.ojdbc10>19.3.0.0</version.lib.oracle.ojdbc10>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1MzkxNQ=="}, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTg0MDkyOnYy", "diffSide": "RIGHT", "path": "etc/dependency-check-suppression.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNDozNVrOIBah1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoyNzowMFrOIBbSwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NDEzNA==", "bodyText": "This is unrelated to this PR", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538354134", "createdAt": "2020-12-08T13:14:35Z", "author": {"login": "tomas-langer"}, "path": "etc/dependency-check-suppression.xml", "diffHunk": "@@ -123,4 +123,29 @@\n    <vulnerabilityName>CVE-2020-15250</vulnerabilityName>\n </suppress>\n \n+<!-- grpc -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM2NjY1Nw==", "bodyText": "Yes, this is my fault. I copied master version here to remove all my changes. Unfortunately someone changed it since I made my fork.", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538366657", "createdAt": "2020-12-08T13:27:00Z", "author": {"login": "Tomas-Kraus"}, "path": "etc/dependency-check-suppression.xml", "diffHunk": "@@ -123,4 +123,29 @@\n    <vulnerabilityName>CVE-2020-15250</vulnerabilityName>\n </suppress>\n \n+<!-- grpc -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NDEzNA=="}, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTg1MzU4OnYy", "diffSide": "RIGHT", "path": "tests/integration/dbclient/jdbc/src/test/java/io/helidon/tests/integration/dbclient/jdbc/init/CheckIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxNjo0NFrOIBap-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozMjo1N1rOIBbrCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NjIxOA==", "bodyText": "This is not very useful - please add ex as parameter to log statement, so we get a stack trace when running in fine or finest log level", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538356218", "createdAt": "2020-12-08T13:16:44Z", "author": {"login": "tomas-langer"}, "path": "tests/integration/dbclient/jdbc/src/test/java/io/helidon/tests/integration/dbclient/jdbc/init/CheckIT.java", "diffHunk": "@@ -71,10 +76,15 @@ public void accept(Config config) {\n                     connected = true;\n                     return;\n                 } catch (SQLException ex) {\n-                    LOGGER.info(() -> String.format(\"Connection check: %s\", ex.getMessage()));\n+                    LOGGER.fine(() -> String.format(\"Connection check: %s\", ex.getMessage()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3Mjg3Mg==", "bodyText": "Done.", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538372872", "createdAt": "2020-12-08T13:32:57Z", "author": {"login": "Tomas-Kraus"}, "path": "tests/integration/dbclient/jdbc/src/test/java/io/helidon/tests/integration/dbclient/jdbc/init/CheckIT.java", "diffHunk": "@@ -71,10 +76,15 @@ public void accept(Config config) {\n                     connected = true;\n                     return;\n                 } catch (SQLException ex) {\n-                    LOGGER.info(() -> String.format(\"Connection check: %s\", ex.getMessage()));\n+                    LOGGER.fine(() -> String.format(\"Connection check: %s\", ex.getMessage()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NjIxOA=="}, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTg2MzQyOnYy", "diffSide": "RIGHT", "path": "tests/integration/jpa/appl/src/main/java/io/helidon/tests/integration/jpa/appl/Dispatcher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxODoxNVrOIBawPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozODoxNVrOIBcAdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NzgyMw==", "bodyText": "This seems too complicated.\nMaybe extract to method and catch the NoSuchMethodException just once?", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538357823", "createdAt": "2020-12-08T13:18:15Z", "author": {"login": "tomas-langer"}, "path": "tests/integration/jpa/appl/src/main/java/io/helidon/tests/integration/jpa/appl/Dispatcher.java", "diffHunk": "@@ -106,44 +110,48 @@ private Handle getHandle(final String name) {\n         }\n         final String className = name.substring(0, serpPos);\n         final String methodName = name.substring(serpPos + 1, nameLen);\n-        if (\"InsertIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        insertIt,\n-                        InsertIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else if (\"UpdateIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        updateIt,\n-                        UpdateIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else if (\"DeleteIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        deleteIt,\n-                        DeleteIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else if (\"QueryIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        queryIt,\n-                        QueryIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else {\n+        if (null == className) {\n             result.fail(\"Unknown test class: \" + className);\n+        } else switch (className) {\n+            case \"InsertIT\":", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3ODM1Ng==", "bodyText": "This will be completely redesigned when I'll be writing native image tests for DB Client. In this case I just wanted to find some working solution to simply run tests in MP application environment and return results.\nNext step is to make it jUnit like as much as possible and scan all classes for specific annotated classes/methods so this whole piece of code will be removed.\nI'll extract method for now to make it better readable.", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538378356", "createdAt": "2020-12-08T13:38:15Z", "author": {"login": "Tomas-Kraus"}, "path": "tests/integration/jpa/appl/src/main/java/io/helidon/tests/integration/jpa/appl/Dispatcher.java", "diffHunk": "@@ -106,44 +110,48 @@ private Handle getHandle(final String name) {\n         }\n         final String className = name.substring(0, serpPos);\n         final String methodName = name.substring(serpPos + 1, nameLen);\n-        if (\"InsertIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        insertIt,\n-                        InsertIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else if (\"UpdateIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        updateIt,\n-                        UpdateIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else if (\"DeleteIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        deleteIt,\n-                        DeleteIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else if (\"QueryIT\".equals(className)) {\n-            try {\n-                return new Handle(\n-                        queryIt,\n-                        QueryIT.class.getDeclaredMethod(methodName, TestResult.class),\n-                        result);\n-            } catch (NoSuchMethodException ex) {\n-                result.throwed(ex);\n-            }\n-        } else {\n+        if (null == className) {\n             result.fail(\"Unknown test class: \" + className);\n+        } else switch (className) {\n+            case \"InsertIT\":", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1NzgyMw=="}, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3OTg3Mjk1OnYy", "diffSide": "RIGHT", "path": "tests/integration/jpa/appl/src/main/resources/META-INF/microprofile-config.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzoxOTo0NFrOIBa2eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozNDozM1rOIBbxkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1OTQxNg==", "bodyText": "please remove the commented out text", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538359416", "createdAt": "2020-12-08T13:19:44Z", "author": {"login": "tomas-langer"}, "path": "tests/integration/jpa/appl/src/main/resources/META-INF/microprofile-config.properties", "diffHunk": "@@ -17,7 +17,14 @@\n mp.initializer.allow=true\n mp.initializer.no-warn=true\n features.print-details=true\n-javax.sql.DataSource.test.dataSource.url=jdbc:h2:tcp://localhost:9092/test\n-javax.sql.DataSource.test.dataSource.user=sa\n-javax.sql.DataSource.test.dataSource.password=\n-javax.sql.DataSource.test.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\n\\ No newline at end of file\n+javax.sql.DataSource.test.dataSource.url=${db.url}\n+javax.sql.DataSource.test.dataSource.user=${db.user}\n+javax.sql.DataSource.test.dataSource.password=${db.password}\n+javax.sql.DataSource.test.dataSourceClassName=${db.datasource}\n+\n+#        \"org.postgresql.xa.PGXADataSource\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NDU0NQ==", "bodyText": "Done.", "url": "https://github.com/oracle/helidon/pull/2557#discussion_r538374545", "createdAt": "2020-12-08T13:34:33Z", "author": {"login": "Tomas-Kraus"}, "path": "tests/integration/jpa/appl/src/main/resources/META-INF/microprofile-config.properties", "diffHunk": "@@ -17,7 +17,14 @@\n mp.initializer.allow=true\n mp.initializer.no-warn=true\n features.print-details=true\n-javax.sql.DataSource.test.dataSource.url=jdbc:h2:tcp://localhost:9092/test\n-javax.sql.DataSource.test.dataSource.user=sa\n-javax.sql.DataSource.test.dataSource.password=\n-javax.sql.DataSource.test.dataSourceClassName=org.h2.jdbcx.JdbcDataSource\n\\ No newline at end of file\n+javax.sql.DataSource.test.dataSource.url=${db.url}\n+javax.sql.DataSource.test.dataSource.user=${db.user}\n+javax.sql.DataSource.test.dataSource.password=${db.password}\n+javax.sql.DataSource.test.dataSourceClassName=${db.datasource}\n+\n+#        \"org.postgresql.xa.PGXADataSource\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM1OTQxNg=="}, "originalCommit": {"oid": "a74b9b6c786a273f9e9e596c15f4fa412231ff21"}, "originalPosition": 14}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 369, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}