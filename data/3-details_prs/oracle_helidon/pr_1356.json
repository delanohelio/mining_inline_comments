{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzA3MjI2", "number": 1356, "title": "New media support API.", "bodyText": "Reworked media support API, to be used by the upcoming HTTP client and multipart support.", "createdAt": "2020-02-06T04:51:00Z", "url": "https://github.com/oracle/helidon/pull/1356", "merged": true, "mergeCommit": {"oid": "fde8b42ed0b9d528b005e9453869e41b4e8476d4"}, "closed": true, "closedAt": "2020-02-11T18:52:20Z", "author": {"login": "romain-grecourt"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcB0-plABqjMwMTYwNjEwODA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDV3CxgFqTM1Njg4Mjg2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07b191378842ac9a9cb547bd56a60426262994fc", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/07b191378842ac9a9cb547bd56a60426262994fc", "committedDate": "2020-02-06T07:44:16Z", "message": "exclude spotbugs error"}, "afterCommit": {"oid": "80609edf07cee577ca230ef6204bccf3f21b35d5", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/80609edf07cee577ca230ef6204bccf3f21b35d5", "committedDate": "2020-02-07T01:21:58Z", "message": "More cleanups:\n - make constructor of HashParameters protected, add factory methods\n - minimize changes (i.e remove changes that are not critical and directly related to this PR)\n - change the static get() methods to create()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86cba68bc6443c8c814e0c33e65d73df08b305e6", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/86cba68bc6443c8c814e0c33e65d73df08b305e6", "committedDate": "2020-02-07T02:47:02Z", "message": "New media support API."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0059eeed3a193b80ea7506b993f521024febbbf", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/d0059eeed3a193b80ea7506b993f521024febbbf", "committedDate": "2020-02-07T02:47:02Z", "message": "fix a javadoc error and a spotbugs error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42e89c6a7a4371ac834d639fe925865067c9665b", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/42e89c6a7a4371ac834d639fe925865067c9665b", "committedDate": "2020-02-07T02:47:02Z", "message": "fix more spotbugs errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0daafd91f7efdb50e50b08fe5ed5b7e33fc9220", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/a0daafd91f7efdb50e50b08fe5ed5b7e33fc9220", "committedDate": "2020-02-07T02:47:02Z", "message": "exclude spotbugs error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64da0a2e8f65eb5c75a7344b28bfae62fc00ae5c", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/64da0a2e8f65eb5c75a7344b28bfae62fc00ae5c", "committedDate": "2020-02-07T02:47:02Z", "message": "More cleanups:\n - make constructor of HashParameters protected, add factory methods\n - minimize changes (i.e remove changes that are not critical and directly related to this PR)\n - change the static get() methods to create()"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80609edf07cee577ca230ef6204bccf3f21b35d5", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/80609edf07cee577ca230ef6204bccf3f21b35d5", "committedDate": "2020-02-07T01:21:58Z", "message": "More cleanups:\n - make constructor of HashParameters protected, add factory methods\n - minimize changes (i.e remove changes that are not critical and directly related to this PR)\n - change the static get() methods to create()"}, "afterCommit": {"oid": "64da0a2e8f65eb5c75a7344b28bfae62fc00ae5c", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/64da0a2e8f65eb5c75a7344b28bfae62fc00ae5c", "committedDate": "2020-02-07T02:47:02Z", "message": "More cleanups:\n - make constructor of HashParameters protected, add factory methods\n - minimize changes (i.e remove changes that are not critical and directly related to this PR)\n - change the static get() methods to create()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/80ff0625ef55e4607cce1e08bd1dbabf77ca05b4", "committedDate": "2020-02-07T04:04:24Z", "message": "fix copyright errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTgwNjIw", "url": "https://github.com/oracle/helidon/pull/1356#pullrequestreview-355180620", "createdAt": "2020-02-07T14:11:42Z", "commit": {"oid": "07b191378842ac9a9cb547bd56a60426262994fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMjo1MFrOFm-i5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDo0NjoxOVrOFm_UeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDk0OQ==", "bodyText": "These exception check can be done more elegantly by\nassertThrows(ExecutionException.class, () -> readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\"));", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r376414949", "createdAt": "2020-02-07T14:22:50Z", "author": {"login": "Verdent"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNjI0OQ==", "bodyText": "I think this is some leftover which can be removed.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r376426249", "createdAt": "2020-02-07T14:43:49Z", "author": {"login": "Verdent"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java", "diffHunk": "@@ -38,6 +38,7 @@\n import java.util.stream.Collectors;\n \n import io.helidon.common.http.AlreadyCompletedException;\n+import io.helidon.common.http.HashParameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzY0MQ==", "bodyText": "Should not be io.helidon.common.http.ContextualRegistry an import instead of having it written like this?", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r376427641", "createdAt": "2020-02-07T14:46:19Z", "author": {"login": "Verdent"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java", "diffHunk": "@@ -100,12 +103,13 @@\n         // the contextual registry needs to be created as a different type is expected. Once we remove ContextualRegistry\n         // we can simply use the one from config\n         Context context = config.context();\n-        if (context instanceof ContextualRegistry) {\n-            this.contextualRegistry = (ContextualRegistry) context;\n+        if (context instanceof io.helidon.common.http.ContextualRegistry) {\n+            this.contextualRegistry = (io.helidon.common.http.ContextualRegistry) context;\n         } else {\n-            this.contextualRegistry = ContextualRegistry.create(config.context());\n+            this.contextualRegistry = io.helidon.common.http.ContextualRegistry.create(config.context());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1OTQ0Mjg0", "url": "https://github.com/oracle/helidon/pull/1356#pullrequestreview-355944284", "createdAt": "2020-02-10T13:43:24Z", "commit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0MzoyNFrOFnmeGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1ODoyNVrOFnm_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTA4Mg==", "bodyText": "The All rights reserved. should be removed. Not sure why the copyright plugin ignores this", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377069082", "createdAt": "2020-02-10T13:43:24Z", "author": {"login": "tomas-langer"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTkxNw==", "bodyText": "This seems to be just reformatted. Please do not reformat existing code unless necessary or an issue - e.g. the line 73 is OK, lines 69-70 not.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377069917", "createdAt": "2020-02-10T13:44:54Z", "author": {"login": "tomas-langer"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -66,22 +66,43 @@\n     private final Class<?> rawType;\n \n     /**\n-     * Constructs a new generic type, using the provided generic type information and\n-     * deriving the class.\n+     * Constructs a new generic type, using the provided generic type\n+     * information and deriving the class.\n      *\n      * @param genericType the generic type\n-     * @param <N>         generic type of the returned GenericType\n+     * @param <N> generic type of the returned GenericType\n      * @return new type wrapping the provided type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MDU3Nw==", "bodyText": "The line breaks were intentional. Do not reformat code...", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377070577", "createdAt": "2020-02-10T13:46:10Z", "author": {"login": "tomas-langer"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -164,11 +185,9 @@ public boolean equals(Object obj) {\n         if (this == obj) {\n             return true;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTE3MA==", "bodyText": "The javadoc is wrong. You cannot return \"this instance\" as this is a static method", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071170", "createdAt": "2020-02-10T13:47:06Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -54,16 +54,21 @@ protected CharMatcher() {\n     /**\n      * Determines whether a character is ASCII, meaning that its code point is less than 128.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code ASCII})\n+     * @return this CharMatcher instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTQ4Mw==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071483", "createdAt": "2020-02-10T13:47:40Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -54,16 +54,21 @@ protected CharMatcher() {\n     /**\n      * Determines whether a character is ASCII, meaning that its code point is less than 128.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code ASCII})\n+     * @return this CharMatcher instance\n      */\n     public static CharMatcher ascii() {\n         return Ascii.INSTANCE;\n     }\n \n     /**\n-     * Returns a {@code char} matcher that matches any character except the one specified.\n+     * Returns a {@code char} matcher that matches any character except the one\n+     * specified.\n      *\n-     * <p>To negate another {@code CharMatcher}, use {@link #negate()}.\n+     * <p>\n+     * To negate another {@code CharMatcher}, use {@link #negate()}.\n+     *\n+     * @param match the character that should not match\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTUxMQ==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071511", "createdAt": "2020-02-10T13:47:43Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -72,7 +77,7 @@ public static CharMatcher isNot(final char match) {\n     /**\n      * Matches any character.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code ANY})\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTU3MA==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071570", "createdAt": "2020-02-10T13:47:50Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -81,7 +86,7 @@ public static CharMatcher any() {\n     /**\n      * Matches no characters.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code NONE})\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTY2NQ==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071665", "createdAt": "2020-02-10T13:47:58Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -91,14 +96,16 @@ public static CharMatcher none() {\n      * Determines whether a character is an ISO control character as specified by\n      * {@link Character#isISOControl(char)}.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code JAVA_ISO_CONTROL})\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTc2Nw==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071767", "createdAt": "2020-02-10T13:48:09Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -91,14 +96,16 @@ public static CharMatcher none() {\n      * Determines whether a character is an ISO control character as specified by\n      * {@link Character#isISOControl(char)}.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code JAVA_ISO_CONTROL})\n+     * @return CharMatcher\n      */\n     public static CharMatcher javaIsoControl() {\n         return JavaIsoControl.INSTANCE;\n     }\n \n     /**\n      * Returns a {@code char} matcher that matches only one specified character.\n+     * @param match the character that should match\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTgyMQ==", "bodyText": "javadoc for return is not correct (please fix for all methods)", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071821", "createdAt": "2020-02-10T13:48:14Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -111,6 +118,8 @@ public static CharMatcher is(final char match) {\n     /**\n      * Returns a {@code char} matcher that matches any character not present in the given character\n      * sequence.\n+     * @param sequence all the characters that should not be matched\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQ5NA==", "bodyText": "As this is a backward incompatible version - should we keep Content in and remove it in 3.0, or just remove it immediately?", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377072494", "createdAt": "2020-02-10T13:49:26Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/Content.java", "diffHunk": "@@ -40,7 +40,9 @@\n  * It is possible to register function to convert publisher to {@link CompletionStage} of a single entity using\n  * {@link #registerReader(Class, Reader)} or {@link #registerReader(Predicate, Reader)} methods. It\n  * is then possible to use {@link #as(Class)} method to obtain such entity.\n+ * @deprecated use {@code io.helidon.media.common.MessageBodyReadableContent} instead\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mzk3Mg==", "bodyText": "As this is now a public class, an explanation of what concatenation means in this context would be good. I have no idea.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377073972", "createdAt": "2020-02-10T13:52:16Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/HashParameters.java", "diffHunk": "@@ -110,7 +137,7 @@ public static HashParameters concat(Parameters... parameters) {\n     /**\n      * Creates new instance of {@link HashParameters} as a concatenation of provided parameters.\n      *\n-     * @param parameters parameters to concat.\n+     * @param parameters parameters to concatenate.\n      * @return a concatenation, never {@code null}.\n      */\n     public static HashParameters concat(Iterable<Parameters> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTUzMA==", "bodyText": "Our APIs should neither expect nor return null. Please refactor the method and usage to only invoke if not null", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377075530", "createdAt": "2020-02-10T13:55:04Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/Utils.java", "diffHunk": "@@ -80,6 +80,22 @@ private Utils() {\n         return result;\n     }\n \n+    /**\n+     * Unwrap from double-quotes - if exists.\n+     *\n+     * @param str string to unwrap.\n+     * @return unwrapped string.\n+     */\n+    public static String unwrap(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzM3NQ==", "bodyText": "+1", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377077375", "createdAt": "2020-02-10T13:58:07Z", "author": {"login": "tomas-langer"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDk0OQ=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzUyNg==", "bodyText": "use assertThrows", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377077526", "createdAt": "2020-02-10T13:58:25Z", "author": {"login": "tomas-langer"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }\n+    }\n+\n+    @Test\n+    public void simpleJsonArray() throws Exception {\n+        JsonArray array = readJsonArray(\"[ \\\"val\\\" ]\");\n+        assertThat(array, is(notNullValue()));\n+        assertThat(array.getString(0), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void invalidJson() throws Exception {\n+        try {\n+            readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "627ed2e3bc3c004772bb2fc74da641a24da68cf4", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/627ed2e3bc3c004772bb2fc74da641a24da68cf4", "committedDate": "2020-02-10T20:55:53Z", "message": "incorporate review feedback"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1496770e538c97c611f68a62ccab96390a363401", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/1496770e538c97c611f68a62ccab96390a363401", "committedDate": "2020-02-10T20:50:31Z", "message": "incorporate review feedback"}, "afterCommit": {"oid": "627ed2e3bc3c004772bb2fc74da641a24da68cf4", "author": {"user": {"login": "romain-grecourt", "name": "Romain Grecourt"}}, "url": "https://github.com/oracle/helidon/commit/627ed2e3bc3c004772bb2fc74da641a24da68cf4", "committedDate": "2020-02-10T20:55:53Z", "message": "incorporate review feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2Nzk2NTAx", "url": "https://github.com/oracle/helidon/pull/1356#pullrequestreview-356796501", "createdAt": "2020-02-11T16:20:05Z", "commit": {"oid": "627ed2e3bc3c004772bb2fc74da641a24da68cf4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2ODgyODY2", "url": "https://github.com/oracle/helidon/pull/1356#pullrequestreview-356882866", "createdAt": "2020-02-11T18:15:59Z", "commit": {"oid": "627ed2e3bc3c004772bb2fc74da641a24da68cf4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 900, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}