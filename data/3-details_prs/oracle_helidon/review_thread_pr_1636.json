{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzkxNzYw", "number": 1636, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDowOTowOVrOD_1I5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxODo1M1rOD_1VKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjU3NTA4OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDowOTowOVrOGauiQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyNzowMFrOGbVd3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODU5Mw==", "bodyText": "Rename to property.", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430678593", "createdAt": "2020-05-26T20:09:09Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConfigBuilder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import io.helidon.messaging.ConnectorConfigBuilder;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+\n+/**\n+ * Build Kafka specific config.\n+ */\n+public final class KafkaConfigBuilder extends ConnectorConfigBuilder {\n+\n+    KafkaConfigBuilder() {\n+        super();\n+        super.put(ConnectorFactory.CONNECTOR_ATTRIBUTE, KafkaConnector.CONNECTOR_NAME);\n+    }\n+\n+    /**\n+     * Add custom property.\n+     *\n+     * @param key   property key\n+     * @param value property value\n+     * @return this builder\n+     */\n+    public KafkaConfigBuilder put(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjQ0NA==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431316444", "createdAt": "2020-05-27T17:27:00Z", "author": {"login": "danielkec"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConfigBuilder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import io.helidon.messaging.ConnectorConfigBuilder;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+\n+/**\n+ * Build Kafka specific config.\n+ */\n+public final class KafkaConfigBuilder extends ConnectorConfigBuilder {\n+\n+    KafkaConfigBuilder() {\n+        super();\n+        super.put(ConnectorFactory.CONNECTOR_ATTRIBUTE, KafkaConnector.CONNECTOR_NAME);\n+    }\n+\n+    /**\n+     * Add custom property.\n+     *\n+     * @param key   property key\n+     * @param value property value\n+     * @return this builder\n+     */\n+    public KafkaConfigBuilder put(String key, String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODU5Mw=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjU4MjI4OnYy", "diffSide": "RIGHT", "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxMToyM1rOGaumyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyNzowOVrOGbVeLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTc1NQ==", "bodyText": "rename to property", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430679755", "createdAt": "2020-05-26T20:11:23Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjUyNQ==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431316525", "createdAt": "2020-05-27T17:27:09Z", "author": {"login": "danielkec"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTc1NQ=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjU4MjkwOnYy", "diffSide": "RIGHT", "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxMTozNVrOGaunLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyNzoxOFrOGbVegg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTg1Mw==", "bodyText": "rename to config", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430679853", "createdAt": "2020-05-26T20:11:35Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {\n+        configuration.put(key, value);\n+        return this;\n+    }\n+\n+    ConnectorConfigBuilder putAll(Config configToPut) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNjYxMA==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431316610", "createdAt": "2020-05-27T17:27:18Z", "author": {"login": "danielkec"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {\n+        configuration.put(key, value);\n+        return this;\n+    }\n+\n+    ConnectorConfigBuilder putAll(Config configToPut) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTg1Mw=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MjYwNjQ4OnYy", "diffSide": "RIGHT", "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoxODo1M1rOGau2Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzoyODo1NVrOGbViXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ==", "bodyText": "Create a thread pool only if at least one emitter is configured.\nGet it before the forEach pool and store the executor service instance.\nClose it when closing meessaging.", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430683711", "createdAt": "2020-05-26T20:18:53Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NDA4NQ==", "bodyText": "use an identifier of messaging for\n\nthread name prefix\nhelidon context", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430684085", "createdAt": "2020-05-26T20:19:35Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NTM1MQ==", "bodyText": "Make sure there is:\n\nThere is a \"messaging\" io.helidon.common.Context instance for the messaging instance\nThere is a \"message\" Context for each message flowing through the messaging (the same one from message producer to message consumer(s), with parent configured to 1.", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430685351", "createdAt": "2020-05-26T20:21:58Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMxNzU5Ng==", "bodyText": "fixed, context is unique for every message see io.helidon.messaging.ContextSubscriber", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r431317596", "createdAt": "2020-05-27T17:28:55Z", "author": {"login": "danielkec"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 628, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}