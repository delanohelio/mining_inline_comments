{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0NzkxNDkz", "number": 2133, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoyNTowNFrOEMXR4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0OTo1OVrOEMX0Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMzk5Nzc3OnYy", "diffSide": "RIGHT", "path": "common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoyNTowNFrOGubX6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzoyNTowNFrOGubX6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTMzNjE2OA==", "bodyText": "publisher.write(0);         // first\nsubscriber.assertEmpty();\npublisher.flush();             // second\nsubscriber.assertItemCount(2);", "url": "https://github.com/oracle/helidon/pull/2133#discussion_r451336168", "createdAt": "2020-07-08T07:25:04Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java", "diffHunk": "@@ -167,6 +167,37 @@ public void onNext(ByteBuffer item) {\n         publisher.close();\n     }\n \n+    @Test\n+    void testByteAtTimeBuffer() throws IOException {\n+        MultiFromOutputStream publisher = IoMulti.createOutputStream();\n+        TestSubscriber<ByteBuffer> subscriber = new TestSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.requestMax();\n+        publisher.write(0);\n+        publisher.write(0);\n+        publisher.write(0);         // first\n+        publisher.flush();             // second\n+        long size = subscriber.getItems().stream().count();\n+        assertThat(size, is(equalTo(2L)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dcac3f383034b129f9b9e96ed4f0318ec08e0b"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDA4NTg2OnYy", "diffSide": "RIGHT", "path": "common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0OTo1OVrOGucNQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwNzo0OTo1OVrOGucNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM0OTgyNw==", "bodyText": "subscriber.requestMax();\n        publisher.write(0);                  // first\n        subscriber.assertEmpty();\n        publisher.write(new byte[] { 0 });   // second\n        subscriber.assertItemCount(2);\n        publisher.write(0);\n        publisher.write(0);                  // third\n        subscriber.assertItemCount(2);\n        publisher.write(new byte[] { 0 });   // fourth\n        subscriber.assertItemCount(4);\n        publisher.write(0);                  // fifth\n        subscriber.assertItemCount(4);\n        publisher.close();\n        subscriber.assertItemCount(5).assertComplete();", "url": "https://github.com/oracle/helidon/pull/2133#discussion_r451349827", "createdAt": "2020-07-08T07:49:59Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/test/java/io/helidon/common/reactive/MultiFromOutputStreamTest.java", "diffHunk": "@@ -167,6 +167,37 @@ public void onNext(ByteBuffer item) {\n         publisher.close();\n     }\n \n+    @Test\n+    void testByteAtTimeBuffer() throws IOException {\n+        MultiFromOutputStream publisher = IoMulti.createOutputStream();\n+        TestSubscriber<ByteBuffer> subscriber = new TestSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.requestMax();\n+        publisher.write(0);\n+        publisher.write(0);\n+        publisher.write(0);         // first\n+        publisher.flush();             // second\n+        long size = subscriber.getItems().stream().count();\n+        assertThat(size, is(equalTo(2L)));\n+    }\n+\n+    @Test\n+    void testByteAtTimeBufferArray() throws IOException {\n+        MultiFromOutputStream publisher = IoMulti.createOutputStream();\n+        TestSubscriber<ByteBuffer> subscriber = new TestSubscriber<>();\n+        publisher.subscribe(subscriber);\n+        subscriber.requestMax();\n+        publisher.write(0);                // first\n+        publisher.write(new byte[] { 0 });    // second\n+        publisher.write(0);\n+        publisher.write(0);                // third\n+        publisher.write(new byte[] { 0 });    // fourth\n+        publisher.write(0);                // fifth\n+        publisher.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33dcac3f383034b129f9b9e96ed4f0318ec08e0b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 453, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}