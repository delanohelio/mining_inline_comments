{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM5Njk0NjI0", "number": 2605, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNTo0NlrOFFHeTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODozMDo1NVrOFFvf9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwOTA5NjQ3OnYy", "diffSide": "RIGHT", "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODowNTo0NlrOIFdXCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzowNToyMlrOIGJ5Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw==", "bodyText": "\"ByteBuf.release() was not called before it was garbage collected\"", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r542594827", "createdAt": "2020-12-14T18:05:46Z", "author": {"login": "ljnelson"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n+                leakIntercepted = true;\n+            }\n+            if (record.getLevel() == Level.SEVERE &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjgwOTAzNA==", "bodyText": "This is an assertion for a log message emitted by Netty, see https://github.com/netty/netty/blob/44f85bba5f47df885dbbe5243d008220bfbab5ca/common/src/main/java/io/netty/util/ResourceLeakDetector.java#L320", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r542809034", "createdAt": "2020-12-14T21:27:31Z", "author": {"login": "romain-grecourt"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n+                leakIntercepted = true;\n+            }\n+            if (record.getLevel() == Level.SEVERE &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, "originalCommit": {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Mjg0NTY2OA==", "bodyText": "Oh! I see; @danielkec I suppose you should revert the change then.", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r542845668", "createdAt": "2020-12-14T22:01:35Z", "author": {"login": "ljnelson"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n+                leakIntercepted = true;\n+            }\n+            if (record.getLevel() == Level.SEVERE &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, "originalCommit": {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMwNDkyOA==", "bodyText": "Need for better commentary empirically verified \ud83d\ude04", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r543304928", "createdAt": "2020-12-15T12:35:28Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n+                leakIntercepted = true;\n+            }\n+            if (record.getLevel() == Level.SEVERE &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, "originalCommit": {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzMyNDUwMw==", "bodyText": "Added better description, the test is more complicated than I would like it to be, I just didn't found any nicer way to do it without heavy mocking.", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r543324503", "createdAt": "2020-12-15T13:05:22Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,171 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {\n+                leakIntercepted = true;\n+            }\n+            if (record.getLevel() == Level.SEVERE &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: ByteBuf.release() was not called before it's garbage-collected.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjU5NDgyNw=="}, "originalCommit": {"oid": "4b6a8047885b3edf8fb40c56ab82508e276ffb3f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNTY1NDMwOnYy", "diffSide": "RIGHT", "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxODozMDo1NVrOIGZ2gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxMDo0NDozNFrOIG_AyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NTkyMg==", "bodyText": "This one I assume needs to be the same as line 66?", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r543585922", "createdAt": "2020-12-15T18:30:55Z", "author": {"login": "ljnelson"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            // look for ByteBufRequestChunk's leak detection records\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cce629566212838e6ee50562e155c41ba30eb6d3"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDE5NDc2MA==", "bodyText": "No its different check and it has its own message, They just happens to have very similar but not exactly same messages. I am tracking both to be extra safe", "url": "https://github.com/oracle/helidon/pull/2605#discussion_r544194760", "createdAt": "2020-12-16T10:44:34Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/DataChunkReleaseTest.java", "diffHunk": "@@ -0,0 +1,180 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.util.Optional;\n+import java.util.concurrent.TimeUnit;\n+import java.util.logging.Handler;\n+import java.util.logging.Level;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.media.common.DefaultMediaSupport;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.endsWith;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.util.ResourceLeakDetector;\n+import io.netty.util.internal.StringUtil;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+public class DataChunkReleaseTest {\n+\n+    static Logger dataChunkLogger = Logger.getLogger(ByteBufRequestChunk.class.getName());\n+    static Logger leakDetectorLogger = Logger.getLogger(io.netty.util.ResourceLeakDetector.class.getName());\n+\n+    static volatile boolean leakIntercepted = false;\n+\n+    private static String originalLeakDetectionLevel;\n+    private static String originalLeakDetectionSamplingInterval;\n+    private static final Handler testHandler = new Handler() {\n+        @Override\n+        public void publish(final LogRecord record) {\n+            // look for ByteBufRequestChunk's leak detection records\n+            if (record.getLevel() == Level.WARNING &&\n+                    record.getMessage()\n+                            .startsWith(\"LEAK: RequestChunk.release() was not called before it was garbage collected.\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzU4NTkyMg=="}, "originalCommit": {"oid": "cce629566212838e6ee50562e155c41ba30eb6d3"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 380, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}