{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2NzU3MjYz", "number": 2308, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNzoyNlrOEfEVQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNzoyNlrOEfEVQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDEyMjkxOnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/MediaType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMDoyNzoyNlrOHLHAwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMTowODowMlrOHLISmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTI2Ng==", "bodyText": "You can avoid the HashMap creation in probably the vast majority of cases by testing parameters.isEmpty() first.  Then, you can move line 363 up as well and simplify.  e.g.:\nif (parameters.isEmpty()) {\n  mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n} else {\n  Map<String, String> normalizedParameters = new HashMap<>();\n  for (Map.Entry<String, String> entry : parameters.entrySet()) {\n    String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n    normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n  }\n}\nif (mediaType == null) {\n  mediaType = MediaType.builder()\n    .type(normalizedType)\n    .subtype(normalizedSubtype)\n    .parameters(normalizedParameters)\n    .build();\n}", "url": "https://github.com/oracle/helidon/pull/2308#discussion_r481411266", "createdAt": "2020-09-01T20:27:26Z", "author": {"login": "ljnelson"}, "path": "common/http/src/main/java/io/helidon/common/http/MediaType.java", "diffHunk": "@@ -268,21 +351,26 @@ private static MediaType create(String type, String subtype,\n             throw new IllegalStateException(\n                     \"A wildcard type cannot be used with a non-wildcard subtype\");\n         }\n-        Map<String, String> builder = new HashMap<>();\n+        Map<String, String> normalizedParameters = new HashMap<>();\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\n             String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n-            builder.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n+            normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n         }\n \n-        MediaType mediaType = MediaType.builder()\n-                .type(normalizedType)\n-                .subtype(normalizedSubtype)\n-                .parameters(builder)\n-                .build();\n+        MediaType mediaType = null;\n \n         // Return one of the constants if the media type is a known type.\n-        //TODO or else get?\n-        return Optional.ofNullable(KNOWN_TYPES.get(mediaType)).orElse(mediaType);\n+        if (normalizedParameters.isEmpty()) {\n+            mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73d65bfaa97327cb27a0c7402550a91c77036f15"}, "originalPosition": 289}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQzMjIxOQ==", "bodyText": "fixed.", "url": "https://github.com/oracle/helidon/pull/2308#discussion_r481432219", "createdAt": "2020-09-01T21:08:02Z", "author": {"login": "romain-grecourt"}, "path": "common/http/src/main/java/io/helidon/common/http/MediaType.java", "diffHunk": "@@ -268,21 +351,26 @@ private static MediaType create(String type, String subtype,\n             throw new IllegalStateException(\n                     \"A wildcard type cannot be used with a non-wildcard subtype\");\n         }\n-        Map<String, String> builder = new HashMap<>();\n+        Map<String, String> normalizedParameters = new HashMap<>();\n         for (Map.Entry<String, String> entry : parameters.entrySet()) {\n             String attribute = Tokenizer.normalize(TOKEN_MATCHER, entry.getKey());\n-            builder.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n+            normalizedParameters.put(attribute, normalizeParameterValue(attribute, entry.getValue()));\n         }\n \n-        MediaType mediaType = MediaType.builder()\n-                .type(normalizedType)\n-                .subtype(normalizedSubtype)\n-                .parameters(builder)\n-                .build();\n+        MediaType mediaType = null;\n \n         // Return one of the constants if the media type is a known type.\n-        //TODO or else get?\n-        return Optional.ofNullable(KNOWN_TYPES.get(mediaType)).orElse(mediaType);\n+        if (normalizedParameters.isEmpty()) {\n+            mediaType = KNOWN_TYPES.get(normalizedType + '/' + normalizedSubtype);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQxMTI2Ng=="}, "originalCommit": {"oid": "73d65bfaa97327cb27a0c7402550a91c77036f15"}, "originalPosition": 289}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 386, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}