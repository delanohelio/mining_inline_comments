{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NzM3NzAw", "number": 2357, "title": "Disable automatic propagation from security providers", "bodyText": "Resolves #2275\nAdded detailed provider documentation.\nProviders now require outbound section in configuration (or through a builder via OutboundConfig) to add outbound security to outbound requests.", "createdAt": "2020-09-14T16:25:51Z", "url": "https://github.com/oracle/helidon/pull/2357", "merged": true, "mergeCommit": {"oid": "7f1a1ad865416f90fc08be2ad87b544980eb641d"}, "closed": true, "closedAt": "2020-09-30T16:18:46Z", "author": {"login": "tomas-langer"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdKGlcAAFqTQ5MTQ4MDkyNg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNkdnhgFqTQ5ODI2MzU3MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkxNDgwOTI2", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-491480926", "createdAt": "2020-09-18T13:47:53Z", "commit": {"oid": "56f4d8cdfe4e6e1163126f1746b3ca0680509900"}, "state": "DISMISSED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzo0Nzo1M1rOHUN6PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyOToyNlrOHUPnpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2MTQ2OA==", "bodyText": "will return an abstain result instead of failure", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r490961468", "createdAt": "2020-09-18T13:47:53Z", "author": {"login": "ljamen"}, "path": "docs/common/security/providers/google-login.adoc", "diffHunk": "@@ -0,0 +1,110 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+=== Google Login Provider\n+:description: Helidon Security Google Login Provider\n+:keywords: helidon, security, google\n+\n+Authenticates a token from request against Google identity provider\n+\n+==== Setup\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.security.providers</groupId>\n+    <artifactId>helidon-security-providers-google-login</artifactId>\n+</dependency>\n+----\n+\n+[source,text]\n+.Provider class name\n+----\n+io.helidon.security.providers.google.login.GoogleTokenProvider\n+----\n+\n+[source,text]\n+.Provider configuration key\n+----\n+google-login\n+----\n+\n+==== Example code\n+https://github.com/oracle/helidon/tree/master/examples/security/google-login[]\n+\n+[source,yaml]\n+.Configuration example\n+----\n+security:\n+  providers:\n+    - provider:\n+        client-id: \"Google client id\"\n+----\n+\n+==== Configuration options\n+The following table shows all configuration options of the provider and their default values\n+\n+[cols=\"2,2,5\"]\n+\n+|===\n+|key |default value |description\n+\n+|`client-id` |{nbsp} |Client id of an application. To create an application, use\n+    the Google developer console (https://developers.google.com/identity/sign-in/web/sign-in)\n+|`optional` |`false` |If set to `true`, failure to authenticate with return an abstain result instead of failure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4d8cdfe4e6e1163126f1746b3ca0680509900"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NTgzNQ==", "bodyText": "there are several options for identifying which username and password to propagate:", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r490965835", "createdAt": "2020-09-18T13:54:19Z", "author": {"login": "ljamen"}, "path": "docs/common/security/providers/http-basic-auth.adoc", "diffHunk": "@@ -0,0 +1,144 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2018, 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+=== HTTP Basic Authentication Provider\n+:description: Helidon Security HTTP Basic Provider\n+:keywords: helidon, security, basic\n+\n+HTTP Basic authentication support\n+\n+==== Setup\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.security.providers</groupId>\n+    <artifactId>helidon-security-providers-http-auth</artifactId>\n+</dependency>\n+----\n+\n+[source,text]\n+.Provider class name\n+----\n+io.helidon.security.providers.httpauth.HttpBasicAuthProvider\n+----\n+\n+[source,text]\n+.Provider configuration key\n+----\n+http-basic-auth\n+----\n+\n+==== Example code\n+https://github.com/oracle/helidon/tree/master/examples/security/outbound-override[]\n+\n+[source,yaml]\n+.Configuration example\n+----\n+security:\n+  providers:\n+  - http-basic-auth:\n+      realm: \"helidon\"\n+      users:\n+      - login: \"john\"\n+        password: \"${CLEAR=password}\"\n+        roles: [\"admin\"]\n+      - login: \"jack\"\n+        password: \"password\"\n+        roles: [\"user\", \"admin\"]\n+      outbound:\n+        - name: \"internal-services\"\n+          hosts: [\"*.example.org\"]\n+          # Propagates current user's identity or identity from request property\n+          outbound-token:\n+            header: \"X-Internal-Auth\"\n+        - name: \"partner-service\"\n+          hosts: [\"*.partner.org\"]\n+          # Uses this username and password\n+          username: \"partner-user-1\"\n+          password: \"${CLEAR=password}\"\n+----\n+\n+==== Configuration options\n+The following table shows all configuration options of the provider and their default values\n+\n+[cols=\"2,2,5\"]\n+\n+|===\n+|key |default value |description\n+\n+|`realm` |`helidon` |The realm shown in challenge when user accesses a service without authentication\n+|`principal-type` |`USER` |Type of authenticated entity - either `USER` or `SERVICE`, can be used in combination with\n+                            other authentication mechanism to authenticate both the user (as in person sitting in front of a computer)\n+                            and a service (as in the application requesting this service on user's behalf)\n+|`users` |{nbsp} |List of users when using configuration based approach. As an alternative, you can implement a java service (see below).\n+|`outbound` |{nbsp} |A list of outbound configurations\n+|`outbound.*.name` |{nbsp} |Required name of outbound configuration\n+|`outbound.*.username` |{nbsp} |Optional username used for outbound security; if not provided, current identity is propagated\n+|`outbound.*.password` |{nbsp} |Optional password used for outbound security\n+|`outbound.*.transports` |any transport |An array of transports this outbound configuration should be used for\n+|`outbound.*.hosts` |any host |An array of hosts this outbound configuration should be used for, can be a regular expression\n+|`outbound.*.paths` |any path |An array of paths this outbound configuration should be used for (such as `/greet`), can be a regular expression\n+|`outbound.*.methods` |any method |An array of HTTP methods this outbound configuration should be used for\n+|`outbound.*.outbound-token` |`Authorization` header with `basic` prefix |Configuration of outbound header used to propagate\n+|`outbound.*.outbound-token.header` |{nbsp} |Name of the header used to propagate the token\n+|`outbound.*.outbound-token.prefix` |{nbsp} |Prefix for the header value, such as `\"basic \"` (only one of `prefix`, `regexp` and `format` should be defined, `regexp` wins over `prefix`, `format` wins over `regexp`)\n+|`outbound.*.outbound-token.format` |{nbsp} |String format with a single parameter to create the header value, such as `\"basic %1s\"`\n+|`outbound.*.outbound-token.regexp` |{nbsp} |Regular expression to create the header value, such as `\"basic (.*)\"`\n+|===\n+\n+==== How does it work?\n+See https://tools.ietf.org/html/rfc7617[].\n+\n+*Authentication of request*\n+\n+When a request is received without the `Authorization: basic ....` header, a challenge is returned to provide such\n+authentication.\n+\n+When a request is received with the `Authorization: basic ....` header, the username and password is validated\n+against configured users (and users obtained from custom service if any provided).\n+\n+Subject is created based on the username and roles provided by the user store.\n+\n+*Identity propagation*\n+\n+When identity propagation is configured, there are several options how we identify username and password to propagate:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4d8cdfe4e6e1163126f1746b3ca0680509900"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk2NzIyMg==", "bodyText": "perhaps this should be a Caution or Warning vs a note? Seems incredibly important.", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r490967222", "createdAt": "2020-09-18T13:56:26Z", "author": {"login": "ljamen"}, "path": "docs/common/security/providers/http-basic-auth.adoc", "diffHunk": "@@ -0,0 +1,144 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2018, 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+=== HTTP Basic Authentication Provider\n+:description: Helidon Security HTTP Basic Provider\n+:keywords: helidon, security, basic\n+\n+HTTP Basic authentication support\n+\n+==== Setup\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.security.providers</groupId>\n+    <artifactId>helidon-security-providers-http-auth</artifactId>\n+</dependency>\n+----\n+\n+[source,text]\n+.Provider class name\n+----\n+io.helidon.security.providers.httpauth.HttpBasicAuthProvider\n+----\n+\n+[source,text]\n+.Provider configuration key\n+----\n+http-basic-auth\n+----\n+\n+==== Example code\n+https://github.com/oracle/helidon/tree/master/examples/security/outbound-override[]\n+\n+[source,yaml]\n+.Configuration example\n+----\n+security:\n+  providers:\n+  - http-basic-auth:\n+      realm: \"helidon\"\n+      users:\n+      - login: \"john\"\n+        password: \"${CLEAR=password}\"\n+        roles: [\"admin\"]\n+      - login: \"jack\"\n+        password: \"password\"\n+        roles: [\"user\", \"admin\"]\n+      outbound:\n+        - name: \"internal-services\"\n+          hosts: [\"*.example.org\"]\n+          # Propagates current user's identity or identity from request property\n+          outbound-token:\n+            header: \"X-Internal-Auth\"\n+        - name: \"partner-service\"\n+          hosts: [\"*.partner.org\"]\n+          # Uses this username and password\n+          username: \"partner-user-1\"\n+          password: \"${CLEAR=password}\"\n+----\n+\n+==== Configuration options\n+The following table shows all configuration options of the provider and their default values\n+\n+[cols=\"2,2,5\"]\n+\n+|===\n+|key |default value |description\n+\n+|`realm` |`helidon` |The realm shown in challenge when user accesses a service without authentication\n+|`principal-type` |`USER` |Type of authenticated entity - either `USER` or `SERVICE`, can be used in combination with\n+                            other authentication mechanism to authenticate both the user (as in person sitting in front of a computer)\n+                            and a service (as in the application requesting this service on user's behalf)\n+|`users` |{nbsp} |List of users when using configuration based approach. As an alternative, you can implement a java service (see below).\n+|`outbound` |{nbsp} |A list of outbound configurations\n+|`outbound.*.name` |{nbsp} |Required name of outbound configuration\n+|`outbound.*.username` |{nbsp} |Optional username used for outbound security; if not provided, current identity is propagated\n+|`outbound.*.password` |{nbsp} |Optional password used for outbound security\n+|`outbound.*.transports` |any transport |An array of transports this outbound configuration should be used for\n+|`outbound.*.hosts` |any host |An array of hosts this outbound configuration should be used for, can be a regular expression\n+|`outbound.*.paths` |any path |An array of paths this outbound configuration should be used for (such as `/greet`), can be a regular expression\n+|`outbound.*.methods` |any method |An array of HTTP methods this outbound configuration should be used for\n+|`outbound.*.outbound-token` |`Authorization` header with `basic` prefix |Configuration of outbound header used to propagate\n+|`outbound.*.outbound-token.header` |{nbsp} |Name of the header used to propagate the token\n+|`outbound.*.outbound-token.prefix` |{nbsp} |Prefix for the header value, such as `\"basic \"` (only one of `prefix`, `regexp` and `format` should be defined, `regexp` wins over `prefix`, `format` wins over `regexp`)\n+|`outbound.*.outbound-token.format` |{nbsp} |String format with a single parameter to create the header value, such as `\"basic %1s\"`\n+|`outbound.*.outbound-token.regexp` |{nbsp} |Regular expression to create the header value, such as `\"basic (.*)\"`\n+|===\n+\n+==== How does it work?\n+See https://tools.ietf.org/html/rfc7617[].\n+\n+*Authentication of request*\n+\n+When a request is received without the `Authorization: basic ....` header, a challenge is returned to provide such\n+authentication.\n+\n+When a request is received with the `Authorization: basic ....` header, the username and password is validated\n+against configured users (and users obtained from custom service if any provided).\n+\n+Subject is created based on the username and roles provided by the user store.\n+\n+*Identity propagation*\n+\n+When identity propagation is configured, there are several options how we identify username and password to propagate:\n+\n+1. We propagate the current username and password (inbound request must be authenticated using basic authentication).\n+2. We use username and password from an explicitly configured property (See `HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_USER`\n+    and `HttpBasicAuthProvider.EP_PROPERTY_OUTBOUND_PASSWORD`)\n+3. We use username and password associated with an outbound target (see example configuration above)\n+\n+Identity is propagated only if:\n+\n+1. There is an outbound target configured for the endpoint\n+2. Or there is an explicitly configured username/password for the current request (through request property)\n+\n+*Custom user store*\n+\n+Java service loader service `io.helidon.security.providers.httpauth.spi.UserStoreService` can be implemented to provide\n+ users to the provider, such as when validated against an internal database or LDAP server.\n+The user store is defined so you never need the clear text password of the user.\n+\n+_Note on security of HTTP Basic Authenticaton (or lack thereof)_\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4d8cdfe4e6e1163126f1746b3ca0680509900"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk3NjY1NA==", "bodyText": "This option is in several pages but is described differently in each. (Just FYI)\nIf set to true, the provider will return \"ABSTAIN\" rather than \"FAILURE\" if token is not present in request\nIf set to true, failure to authenticate will cause this provider to report abstain result, not failure\nIf set to true, provider will abstain rather than fail if the header is not available", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r490976654", "createdAt": "2020-09-18T14:11:01Z", "author": {"login": "ljamen"}, "path": "docs/common/security/providers/jwt.adoc", "diffHunk": "@@ -0,0 +1,119 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+=== JWT Provider\n+:description: Helidon Security JWT Provider\n+:keywords: helidon, security, jwt\n+\n+JWT token authentication and outbound security provider.\n+\n+==== Setup\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.security.providers</groupId>\n+    <artifactId>helidon-security-providers-jwt</artifactId>\n+</dependency>\n+----\n+\n+[source,text]\n+.Provider class name\n+----\n+io.helidon.security.providers.jwt.JwtProvider\n+----\n+\n+[source,text]\n+.Provider configuration key\n+----\n+jwt\n+----\n+\n+==== Example code\n+https://github.com/oracle/helidon/tree/master/examples/security/outbound-override[]\n+\n+[source,yaml]\n+.Configuration example\n+----\n+security:\n+  providers:\n+    - provider:\n+        atn-token:\n+          jwk.resource.resource-path: \"verifying-jwk.json\"\n+          jwt-audience: \"http://my.service\"\n+        sign-token:\n+          jwk.resource.resource-path: \"signing-jwk.json\"\n+          jwt-issuer: \"http://my.server/identity\"\n+          outbound:\n+          - name: \"propagate-token\"\n+            hosts: [\"*.internal.org\"]\n+          - name: \"generate-token\"\n+            hosts: [\"1.partner-service\"]\n+            jwk-kid: \"partner-1\"\n+            jwt-kid: \"helidon\"\n+            jwt-audience: \"http://1.partner-service\"\n+----\n+\n+==== Configuration options\n+The following table shows all configuration options of the provider and their default values\n+\n+[cols=\"2,2,5\"]\n+\n+|===\n+|key |default value |description\n+\n+|`optional` |`false` |If set to true, the provider will return \"ABSTAIN\" rather than \"FAILURE\" if token is not present in request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4d8cdfe4e6e1163126f1746b3ca0680509900"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4OTQ3OA==", "bodyText": "@param c configuration (is that 'c' correct here?)", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r490989478", "createdAt": "2020-09-18T14:29:26Z", "author": {"login": "ljamen"}, "path": "security/providers/common/src/main/java/io/helidon/security/providers/common/OutboundTarget.java", "diffHunk": "@@ -101,7 +101,13 @@ private OutboundTarget(Builder builder) {\n         }\n     }\n \n-    static OutboundTarget create(Config c) {\n+    /**\n+     * Create a target from configuration.\n+     *\n+     * @param c configuration on the node of a single outbound target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56f4d8cdfe4e6e1163126f1746b3ca0680509900"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDI5MDcz", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-494429073", "createdAt": "2020-09-23T08:37:57Z", "commit": {"oid": "f47f4009ed0cd2f972ee1419a88efff9b87eea44"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Mjk5NTc5", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-495299579", "createdAt": "2020-09-24T07:42:30Z", "commit": {"oid": "bbe22851f23fb163de6fcb0a9334943cc8f79ae4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0MjozMFrOHXNu0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo0MjozMFrOHXNu0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEwNDI3Mg==", "bodyText": "Broken link?", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494104272", "createdAt": "2020-09-24T07:42:30Z", "author": {"login": "danielkec"}, "path": "docs/common/security/providers/abac.adoc", "diffHunk": "@@ -0,0 +1,235 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+=== ABAC Provider\n+:description: Helidon Security ABAC Provider\n+:keywords: helidon, security, authorization, abac\n+\n+Attribute based access control authorization provider.\n+\n+==== Setup\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.security.providers</groupId>\n+    <artifactId>helidon-security-providers-abac</artifactId>\n+</dependency>\n+----\n+\n+[source,text]\n+.Provider class name\n+----\n+io.helidon.security.providers.abac.AbacProvider\n+----\n+\n+[source,text]\n+.Provider configuration key\n+----\n+abac\n+----\n+\n+==== Example code\n+https://github.com/oracle/helidon/tree/master/examples/security/attribute-based-access-control[]\n+\n+[source,yaml]\n+.Configuration example\n+----\n+security:\n+  providers:\n+    - abac:\n+----\n+\n+==== Configuration options\n+The following table shows all configuration options of the provider and their default values\n+\n+[cols=\"2,2,5\"]\n+\n+|===\n+|key |default value |description\n+\n+|`fail-on-unvalidated` |`true` |\"Unvalidated\" means: an attribute is defined, but there is no validator available for it\n+|`fail-if-none-validated` |`true` |\"None validated\" means: there was not a single attribute that was validated\n+|===\n+\n+==== How does it work?\n+ABAC uses available validators and validates them against attributes of the authenticated\n+ user.\n+\n+Combinations of `fail-on-unvalidated` and `fail-if-none-validated`:\n+\n+1. `true` & `true`: Will fail if any attribute is not validated and if any has failed validation\n+2. `false` & `true`: Will fail if there is one or more attributes present and NONE of them is validated or if any has failed validation,\n+        Will NOT fail if there is at least one validated attribute and any number of not validated attributes (and NONE failed)\n+3. `false` & `false`: Will fail if there is any attribute that failed validation,\n+        Will NOT fail if there are no failed validation or if there are NONE validated\n+\n+\n+Any attribute of the following objects can be used:\n+\n+- environment (such as time of request) - e.g. env.time.year\n+- subject (user) - e.g. subject.principal.id\n+- subject (service) - e.g. service.principal.id\n+- object (must be explicitly invoked by developer in code, as object cannot be automatically added to security context) - e.g. object.owner\n+\n+This provider checks that all defined ABAC validators are validated.\n+If there is a definition for a validator that is not checked,\n+the request is denied (depending on configuration as mentioned above).\n+\n+ABAC provider also allows an object to be used in authorization process, such\n+as when evaluating if an object's owner is the current user.\n+The following example uses the Expression language validator to demonstrate the point\n+in a JAX-RS resource:\n+\n+[source,java]\n+.Example of using an object\n+----\n+@Authenticated\n+@Path(\"/abac\")\n+public class AbacResource {\n+  @GET\n+  @Authorized(explicit = true)\n+  @PolicyStatement(\"${env.time.year >= 2017 && object.owner == subject.principal.id}\")\n+  public Response process(@Context SecurityContext context) {\n+      // probably looked up from a database\n+      SomeResource res = new SomeResource(\"user\");\n+      AuthorizationResponse atzResponse = context.authorize(res);\n+\n+      if (atzResponse.isPermitted()) {\n+          //do the update\n+          return Response.ok().entity(\"fine, sir\").build();\n+      } else {\n+          return Response.status(Response.Status.FORBIDDEN)\n+                  .entity(atzResponse.getDescription().orElse(\"Access not granted\"))\n+                  .build();\n+      }\n+  }\n+}\n+----\n+\n+\n+*The following validators are implemented:*\n+\n+* <<Role Validator,Roles>>\n+* <<Scope Validator,Scopes>>\n+* <<Expression Language Policy Validator,EL Policy>>\n+* <<Time Validator,Time>>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbe22851f23fb163de6fcb0a9334943cc8f79ae4"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1MzA5MTYw", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-495309160", "createdAt": "2020-09-24T07:55:22Z", "commit": {"oid": "bbe22851f23fb163de6fcb0a9334943cc8f79ae4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo1NToyMlrOHXONiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzo1NToyMlrOHXONiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDExMjEzNw==", "bodyText": "`` seems to not being rendered by ascii doc", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494112137", "createdAt": "2020-09-24T07:55:22Z", "author": {"login": "danielkec"}, "path": "docs/common/security/providers/idcs-role-mapper.adoc", "diffHunk": "@@ -0,0 +1,94 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+=== IDCS Role Mapper\n+:description: Helidon Security IDCS Role Mapper Provider\n+:keywords: helidon, security, idcs\n+\n+A role mapper to retrieve roles from Oracle IDCS.\n+\n+==== Setup\n+\n+[source,xml]\n+.Maven dependency\n+----\n+<dependency>\n+    <groupId>io.helidon.security.providers</groupId>\n+    <artifactId>helidon-security-providers-idcs-mapper</artifactId>\n+</dependency>\n+----\n+\n+[source,text]\n+.Provider class name\n+----\n+io.helidon.security.providers.idcs.mapper.IdcsRoleMapperProvider\n+----\n+\n+[source,text]\n+.Provider configuration key\n+----\n+idcs-role-mapper\n+----\n+\n+==== Example code\n+https://github.com/oracle/helidon/tree/master/examples/security/idcs-login/[]\n+\n+[source,yaml]\n+.Configuration example\n+----\n+security:\n+  providers:\n+    - idcs-role-mapper:\n+        multitenant: false\n+        oidc-config:\n+            client-id: \"client-id\"\n+            client-secret: \"client-secret\"\n+            identity-uri: \"IDCS identity server address\"\n+----\n+\n+==== Configuration options\n+The following table shows all configuration options of the provider and their default values\n+\n+[cols=\"2,2,5\"]\n+\n+|===\n+|key |default value |description\n+\n+|`multitenant` |`true` |Whether to support multi-tenancy with this provider\n+|`idcs-tenant-handler` |Header `X-USER-IDENTITY-SERVICE-GUID` |Multi-tenant specific `TokenHandler` configuration to retrieve the tenant id\n+|`idcs-app-name-handler` |Header `X-RESOURCE-SERVICE-INSTANCE-IDENTITY-APPNAME` |Multi-tenant specific `TokenHandler` configuration to retrieve the application name\n+|`cache-config` |{nbsp} |Configuration of cache of roles for subjects\n+|`cache-config.cache-enabled` |`true` |Possibility to disable the cache altogether\n+|`cache-config.max-size` |`100_000` |Maximal number of records in the cache\n+|`cache-config.cache-timeout-millis` |1 hour |Cache timeout in milliseconds\n+|`cache-config.cache-evict-delay-millis` |1 minute |How long to wait before starting the first eviction process\n+|`cache-config.cache-evict-period-millis` |5 minutes |Period of running the eviction process\n+|`cache-config.parallelism-threshold` |`10_000` |Threshold as used by `ConcurrentHashMap.forEachKey`\n+|`cache-config.evictor-class` |`` |Implementation of `BiFunction` that receives key and value, and returns `true` for records that should be removed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbe22851f23fb163de6fcb0a9334943cc8f79ae4"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTMzMzMx", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-495933331", "createdAt": "2020-09-24T20:38:35Z", "commit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDozODozNVrOHXryBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDozODozNVrOHXryBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU5NjYxMg==", "bodyText": "Does the comment still apply? identity propagation is disabled by default", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494596612", "createdAt": "2020-09-24T20:38:35Z", "author": {"login": "danielkec"}, "path": "security/providers/oidc/src/main/java/io/helidon/security/providers/oidc/OidcProvider.java", "diffHunk": "@@ -566,7 +571,7 @@ private Principal buildPrincipal(Jwt jwt) {\n         private OidcConfig oidcConfig;\n         // identity propagation is disabled by default. In general we should not reuse the same token\n         // for outbound calls, unless it is the same audience\n-        private boolean propagate;\n+        private Boolean propagate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1OTQ0MzEw", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-495944310", "createdAt": "2020-09-24T20:55:45Z", "commit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1NTo0NlrOHXsUAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDo1NTo0NlrOHXsUAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDYwNTMxNA==", "bodyText": "This could also work\nOptional<BasicPrivateCredentials> creds = secContext.user()\n                    .flatMap(this::credentialsFromSubject)\n                    .or(secContext::service)\n                    .flatMap(this::credentialsFromSubject);", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r494605314", "createdAt": "2020-09-24T20:55:46Z", "author": {"login": "danielkec"}, "path": "security/providers/http-auth/src/main/java/io/helidon/security/providers/httpauth/HttpBasicAuthProvider.java", "diffHunk": "@@ -116,54 +128,67 @@ public boolean isOutboundSupported(ProviderRequest providerRequest,\n             return true;\n         }\n \n-        SecurityContext secContext = providerRequest.securityContext();\n-\n-        boolean userSupported = secContext.user()\n-                .flatMap(user -> user.privateCredential(BasicPrivateCredentials.class))\n-                .isPresent();\n-\n-        boolean serviceSupported = secContext.service()\n-                .map(user -> user.privateCredential(BasicPrivateCredentials.class))\n-                .isPresent();\n-\n-        return userSupported || serviceSupported;\n+        return outboundTargetsExist;\n     }\n \n     @Override\n     protected OutboundSecurityResponse syncOutbound(ProviderRequest providerRequest,\n                                                     SecurityEnvironment outboundEnv,\n                                                     EndpointConfig outboundEp) {\n \n-        // first resolve user to use\n+        // explicit username in request properties\n         Optional<Object> maybeUsername = outboundEp.abacAttribute(EP_PROPERTY_OUTBOUND_USER);\n         if (maybeUsername.isPresent()) {\n             String username = maybeUsername.get().toString();\n             char[] password = passwordFromEndpoint(outboundEp);\n \n-            return toBasicAuthOutbound(username, password);\n+            return toBasicAuthOutbound(outboundEnv,\n+                                       HttpBasicOutboundConfig.DEFAULT_TOKEN_HANDLER,\n+                                       username,\n+                                       password);\n         }\n \n-        // and if not present, use the one from request\n-        SecurityContext secContext = providerRequest.securityContext();\n-\n-        // first try user\n-        Optional<BasicPrivateCredentials> creds = secContext.user()\n-                .flatMap(this::credentialsFromSubject);\n+        var target = outboundConfig.findTargetCustomObject(outboundEnv,\n+                                                           HttpBasicOutboundConfig.class,\n+                                                           HttpBasicOutboundConfig::create,\n+                                                           HttpBasicOutboundConfig::create);\n \n-        if (!creds.isPresent()) {\n-            // if not present, try service\n-            creds = secContext.service()\n-                    .flatMap(this::credentialsFromSubject);\n+        if (target.isEmpty()) {\n+            return OutboundSecurityResponse.abstain();\n         }\n \n-        Optional<char[]> overridePassword = outboundEp.abacAttribute(EP_PROPERTY_OUTBOUND_PASSWORD)\n-                .map(String::valueOf)\n-                .map(String::toCharArray);\n+        HttpBasicOutboundConfig outboundConfig = target.get();\n+\n+        if (outboundConfig.hasExplicitUser()) {\n+            // use configured user\n+            return toBasicAuthOutbound(outboundEnv,\n+                                       outboundConfig.tokenHandler(),\n+                                       outboundConfig.explicitUser(),\n+                                       outboundConfig.explicitPassword());\n+        } else {\n+            // propagate current user (if possible)\n+            SecurityContext secContext = providerRequest.securityContext();\n+            // first try user\n+            Optional<BasicPrivateCredentials> creds = secContext.user()\n+                    .flatMap(this::credentialsFromSubject);\n+            if (creds.isEmpty()) {\n+                // if not present, try service\n+                creds = secContext.service()\n+                        .flatMap(this::credentialsFromSubject);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NTIyNTE3", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-496522517", "createdAt": "2020-09-25T15:23:19Z", "commit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNToyMzoxOVrOHYIM5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxNToyMzoxOVrOHYIM5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTA2MjI0NQ==", "bodyText": "Yaml at its best", "url": "https://github.com/oracle/helidon/pull/2357#discussion_r495062245", "createdAt": "2020-09-25T15:23:19Z", "author": {"login": "danielkec"}, "path": "examples/security/webserver-signatures/src/main/resources/service1.yaml", "diffHunk": "@@ -57,16 +59,17 @@ security:\n             signature:\n               key-id: \"service1-rsa\"\n               private-key:\n-                # path to keystore\n-                keystore-path: \"src/main/resources/keystore.p12\"\n-                # Keystore type\n-                # PKCS12, JSK or RSA (not really a keystore, but directly the linux style private key unencrypted)\n-                # defaults to jdk default\n-                keystore-type: \"PKCS12\"\n-                # password of the keystore\n-                keystore-passphrase: \"password\"\n-                # alias of the key to sign request\n-                key-alias: \"myPrivateKey\"\n+                keystore:\n+                  # path to keystore\n+                  resource.path: \"src/main/resources/keystore.p12\"\n+                  # Keystore type\n+                  # PKCS12, JSK or RSA (not really a keystore, but directly the linux style private key unencrypted)\n+                  # defaults to jdk default\n+                  type: \"PKCS12\"\n+                  # password of the keystore\n+                  passphrase: \"password\"\n+                  # alias of the key to sign request\n+                  key.alias: \"myPrivateKey\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NTI5MTY0", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-496529164", "createdAt": "2020-09-25T15:31:34Z", "commit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9f8c1986caddbb4083d89b9cb855c74e810fd88", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f9f8c1986caddbb4083d89b9cb855c74e810fd88", "committedDate": "2020-09-25T17:48:40Z", "message": "Squashable-1\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc4a8fff878a7df4a0d79f4019111d73b0472675", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/fc4a8fff878a7df4a0d79f4019111d73b0472675", "committedDate": "2020-09-25T17:48:40Z", "message": "Security providers no long automatically propagate.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dfdfe7deca38f4e5d6da4e623681017664cf6a4b", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/dfdfe7deca38f4e5d6da4e623681017664cf6a4b", "committedDate": "2020-09-25T17:48:40Z", "message": "Fixed tests and examples.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e52e920f59a38f4c01d182f16332543ce6858bc", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/8e52e920f59a38f4c01d182f16332543ce6858bc", "committedDate": "2020-09-25T17:48:40Z", "message": "Review fix.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3bff318c9e20e4eaeaa9322f37abad9c5c751be5", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/3bff318c9e20e4eaeaa9322f37abad9c5c751be5", "committedDate": "2020-09-25T17:48:40Z", "message": "Fixed documentation review issues.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99fe7fe387f75937e110d7ec23ec2e8a2a0cfd4f", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/99fe7fe387f75937e110d7ec23ec2e8a2a0cfd4f", "committedDate": "2020-09-25T17:48:40Z", "message": "Review fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "committedDate": "2020-09-25T17:48:40Z", "message": "Moved security to shared from common to align with other docs.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/154c8ac0c8a190f8bfc8892ae5dba7774cc6adc2", "committedDate": "2020-09-24T15:39:48Z", "message": "Review fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/4bf4ac9f6eeda81b355582d3c598941b12a9e3a8", "committedDate": "2020-09-25T17:48:40Z", "message": "Moved security to shared from common to align with other docs.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3Nzg0MjM0", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-497784234", "createdAt": "2020-09-28T18:19:11Z", "commit": {"oid": "4bf4ac9f6eeda81b355582d3c598941b12a9e3a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MjYzNTcx", "url": "https://github.com/oracle/helidon/pull/2357#pullrequestreview-498263571", "createdAt": "2020-09-29T09:07:11Z", "commit": {"oid": "4bf4ac9f6eeda81b355582d3c598941b12a9e3a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 456, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}