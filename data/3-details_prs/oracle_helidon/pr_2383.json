{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkwOTgwNDYx", "number": 2383, "title": "DBClient integration tests for MySQL, MadiaDB, PostgreSQL and MS SQL", "bodyText": "Added DBClient IT for more databases and JDBC drivers.\nTo run the tests, type:\ncd <helidon_src>/tests/integration/dbclient\nmvn clean install -D<db> -Pdocker -pl common,jdbc\n\nWhere\n\n<helidon_src> is your Helidon source tree directory\nand <db> is value from:\n\nmysql\nmariadb\npgsql\nmssql", "createdAt": "2020-09-22T14:26:46Z", "url": "https://github.com/oracle/helidon/pull/2383", "merged": true, "mergeCommit": {"oid": "317d5e36fb21f1f5b092f592c99278cfe4d0f6a9"}, "closed": true, "closedAt": "2020-10-12T13:04:14Z", "author": {"login": "Tomas-Kraus"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLYvFQgH2gAyNDkwOTgwNDYxOmQ1MGJkNzY0NWI1ZjE2MjEzMDlhMzU1YWI0ODY5Y2FiODUxMjZhOWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdRzo15gFqTUwNjU5OTkzNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d", "author": {"user": {"login": "Tomas-Kraus", "name": "Tom\u00e1\u0161 Kraus"}}, "url": "https://github.com/oracle/helidon/commit/d50bd7645b5f1621309a355ab4869cab85126a9d", "committedDate": "2020-09-22T14:19:33Z", "message": "DBClient integration tests for MySQL, MadiaDB, PostgreSQL and MS SQL Server.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTA2MzI3", "url": "https://github.com/oracle/helidon/pull/2383#pullrequestreview-494506327", "createdAt": "2020-09-23T10:13:22Z", "commit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoxMzoyMlrOHWjVKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoyNDowOFrOHWj7kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwOTU3Nw==", "bodyText": "used in database health checks", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493409577", "createdAt": "2020-09-23T10:13:22Z", "author": {"login": "tomas-langer"}, "path": "dbclient/dbclient/src/main/java/io/helidon/dbclient/DbClient.java", "diffHunk": "@@ -57,8 +57,14 @@\n      */\n     <U, T extends Subscribable<U>> T execute(Function<DbExecute, T> executor);\n \n+    /**\n+     * Name of the named statement used in database ping.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMzM5Mw==", "bodyText": "Please do not do this, use\nLogger.FINER(() -> String.format(\"...\") or equivalent method with a lambda - it achieves the same thing without additional if statement in the code", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493413393", "createdAt": "2020-09-23T10:17:37Z", "author": {"login": "tomas-langer"}, "path": "dbclient/health/src/main/java/io/helidon/dbclient/health/DbClientHealthCheck.java", "diffHunk": "@@ -58,39 +72,204 @@ public static Builder builder(DbClient dbClient) {\n         return new Builder(dbClient);\n     }\n \n+    /**\n+     * Execute the ping statement.\n+     *\n+     * @return {@code Awaitable} instance to wait for\n+     */\n+    protected abstract Awaitable<?> execPing();\n+\n     @Override\n     public HealthCheckResponse call() {\n-        HealthCheckResponseBuilder builder = HealthCheckResponse.builder()\n-                .name(name);\n+        HealthCheckResponseBuilder builder = HealthCheckResponse.builder().name(name);\n \n         try {\n-            dbClient.ping().await(10, TimeUnit.SECONDS);\n+            execPing().await(timeoutSeconds, TimeUnit.SECONDS);\n             builder.up();\n         } catch (Throwable e) {\n             builder.down();\n             builder.withData(\"ErrorMessage\", e.getMessage());\n             builder.withData(\"ErrorClass\", e.getClass().getName());\n-            e.printStackTrace();\n+            // Do not process logging arguments until it makes sense.\n+            if (LOGGER.isLoggable(Level.FINER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxMzU5MA==", "bodyText": "LOGGER.finest instead", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493413590", "createdAt": "2020-09-23T10:17:55Z", "author": {"login": "tomas-langer"}, "path": "dbclient/health/src/main/java/io/helidon/dbclient/health/DbClientHealthCheck.java", "diffHunk": "@@ -58,39 +72,204 @@ public static Builder builder(DbClient dbClient) {\n         return new Builder(dbClient);\n     }\n \n+    /**\n+     * Execute the ping statement.\n+     *\n+     * @return {@code Awaitable} instance to wait for\n+     */\n+    protected abstract Awaitable<?> execPing();\n+\n     @Override\n     public HealthCheckResponse call() {\n-        HealthCheckResponseBuilder builder = HealthCheckResponse.builder()\n-                .name(name);\n+        HealthCheckResponseBuilder builder = HealthCheckResponse.builder().name(name);\n \n         try {\n-            dbClient.ping().await(10, TimeUnit.SECONDS);\n+            execPing().await(timeoutSeconds, TimeUnit.SECONDS);\n             builder.up();\n         } catch (Throwable e) {\n             builder.down();\n             builder.withData(\"ErrorMessage\", e.getMessage());\n             builder.withData(\"ErrorClass\", e.getClass().getName());\n-            e.printStackTrace();\n+            // Do not process logging arguments until it makes sense.\n+            if (LOGGER.isLoggable(Level.FINER)) {\n+                LOGGER.log(Level.FINER, String.format(\n+                        \"Database %s is not responding: %s\", dbClient.dbType(), e.getMessage()), e);\n+            }\n         }\n \n         return builder.build();\n     }\n \n+    protected DbClient dbClient() {\n+        return dbClient;\n+    }\n+\n+    /**\n+     * Database health check which calls default DBClient's {@code ping} method.\n+     */\n+    private static final class DbClientHealthCheckAsPing extends DbClientHealthCheck {\n+\n+        private DbClientHealthCheckAsPing(Builder builder) {\n+            super(builder);\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsPing\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNDM3Nw==", "bodyText": "Please do not put Javadoc on private fields, use either single line or multi line comment instead.", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493414377", "createdAt": "2020-09-23T10:18:50Z", "author": {"login": "tomas-langer"}, "path": "dbclient/health/src/main/java/io/helidon/dbclient/health/DbClientHealthCheck.java", "diffHunk": "@@ -58,39 +72,204 @@ public static Builder builder(DbClient dbClient) {\n         return new Builder(dbClient);\n     }\n \n+    /**\n+     * Execute the ping statement.\n+     *\n+     * @return {@code Awaitable} instance to wait for\n+     */\n+    protected abstract Awaitable<?> execPing();\n+\n     @Override\n     public HealthCheckResponse call() {\n-        HealthCheckResponseBuilder builder = HealthCheckResponse.builder()\n-                .name(name);\n+        HealthCheckResponseBuilder builder = HealthCheckResponse.builder().name(name);\n \n         try {\n-            dbClient.ping().await(10, TimeUnit.SECONDS);\n+            execPing().await(timeoutSeconds, TimeUnit.SECONDS);\n             builder.up();\n         } catch (Throwable e) {\n             builder.down();\n             builder.withData(\"ErrorMessage\", e.getMessage());\n             builder.withData(\"ErrorClass\", e.getClass().getName());\n-            e.printStackTrace();\n+            // Do not process logging arguments until it makes sense.\n+            if (LOGGER.isLoggable(Level.FINER)) {\n+                LOGGER.log(Level.FINER, String.format(\n+                        \"Database %s is not responding: %s\", dbClient.dbType(), e.getMessage()), e);\n+            }\n         }\n \n         return builder.build();\n     }\n \n+    protected DbClient dbClient() {\n+        return dbClient;\n+    }\n+\n+    /**\n+     * Database health check which calls default DBClient's {@code ping} method.\n+     */\n+    private static final class DbClientHealthCheckAsPing extends DbClientHealthCheck {\n+\n+        private DbClientHealthCheckAsPing(Builder builder) {\n+            super(builder);\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsPing\");\n+        }\n+\n+        @Override\n+        protected Awaitable<Void> execPing() {\n+            return dbClient().ping();\n+        }\n+\n+    }\n+\n+    /**\n+     * Database health check which calls DBClient's {@code namedDml} method.\n+     */\n+    private static final class DbClientHealthCheckAsNamedDml extends DbClientHealthCheck {\n+\n+        /** Name of the statement. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNTg1OA==", "bodyText": "Maybe a multiline comment would be a better fit?", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493415858", "createdAt": "2020-09-23T10:20:18Z", "author": {"login": "tomas-langer"}, "path": "dbclient/health/src/main/java/io/helidon/dbclient/health/DbClientHealthCheck.java", "diffHunk": "@@ -58,39 +72,204 @@ public static Builder builder(DbClient dbClient) {\n         return new Builder(dbClient);\n     }\n \n+    /**\n+     * Execute the ping statement.\n+     *\n+     * @return {@code Awaitable} instance to wait for\n+     */\n+    protected abstract Awaitable<?> execPing();\n+\n     @Override\n     public HealthCheckResponse call() {\n-        HealthCheckResponseBuilder builder = HealthCheckResponse.builder()\n-                .name(name);\n+        HealthCheckResponseBuilder builder = HealthCheckResponse.builder().name(name);\n \n         try {\n-            dbClient.ping().await(10, TimeUnit.SECONDS);\n+            execPing().await(timeoutSeconds, TimeUnit.SECONDS);\n             builder.up();\n         } catch (Throwable e) {\n             builder.down();\n             builder.withData(\"ErrorMessage\", e.getMessage());\n             builder.withData(\"ErrorClass\", e.getClass().getName());\n-            e.printStackTrace();\n+            // Do not process logging arguments until it makes sense.\n+            if (LOGGER.isLoggable(Level.FINER)) {\n+                LOGGER.log(Level.FINER, String.format(\n+                        \"Database %s is not responding: %s\", dbClient.dbType(), e.getMessage()), e);\n+            }\n         }\n \n         return builder.build();\n     }\n \n+    protected DbClient dbClient() {\n+        return dbClient;\n+    }\n+\n+    /**\n+     * Database health check which calls default DBClient's {@code ping} method.\n+     */\n+    private static final class DbClientHealthCheckAsPing extends DbClientHealthCheck {\n+\n+        private DbClientHealthCheckAsPing(Builder builder) {\n+            super(builder);\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsPing\");\n+        }\n+\n+        @Override\n+        protected Awaitable<Void> execPing() {\n+            return dbClient().ping();\n+        }\n+\n+    }\n+\n+    /**\n+     * Database health check which calls DBClient's {@code namedDml} method.\n+     */\n+    private static final class DbClientHealthCheckAsNamedDml extends DbClientHealthCheck {\n+\n+        /** Name of the statement. */\n+        private final String statementName;\n+\n+        private DbClientHealthCheckAsNamedDml(Builder builder) {\n+            super(builder);\n+            this.statementName = builder.statementName;\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsNamedDml\");\n+        }\n+\n+        @Override\n+        protected Awaitable<?> execPing() {\n+            return dbClient().execute(exec -> exec.namedDml(statementName));\n+        }\n+\n+    }\n+\n+    /**\n+     * Database health check which calls DBClient's {@code dml} method.\n+     */\n+    private static final class DbClientHealthCheckAsDml extends DbClientHealthCheck {\n+\n+        /** Custom statement. */\n+        private final String statement;\n+\n+        private DbClientHealthCheckAsDml(Builder builder) {\n+            super(builder);\n+            this.statement = builder.statement;\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsDml\");\n+        }\n+\n+        @Override\n+        protected Awaitable<?> execPing() {\n+            return dbClient().execute(exec -> exec.dml(statement));\n+        }\n+\n+    }\n+\n+    /**\n+     * Database health check which calls DBClient's {@code namedQuery} method.\n+     */\n+    private static final class DbClientHealthCheckAsNamedQuery extends DbClientHealthCheck {\n+\n+        /** Name of the statement. */\n+        private final String statementName;\n+\n+        private DbClientHealthCheckAsNamedQuery(Builder builder) {\n+            super(builder);\n+            this.statementName = builder.statementName;\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsNamedQuery\");\n+        }\n+\n+        @Override\n+        protected Awaitable<?> execPing() {\n+            return dbClient()\n+                    .execute(exec -> exec.namedQuery(statementName).forEach(it -> {}));\n+        }\n+\n+    }\n+\n+    /**\n+     * Database health check which calls DBClient's {@code query} method.\n+     */\n+    private static final class DbClientHealthCheckAsQuery extends DbClientHealthCheck {\n+\n+        /** Custom statement. */\n+        private final String statement;\n+\n+        private DbClientHealthCheckAsQuery(Builder builder) {\n+            super(builder);\n+            this.statement = builder.statement;\n+            LOGGER.log(Level.FINEST, \"Created an instance of DbClientHealthCheckAsQuery\");\n+        }\n+\n+        @Override\n+        protected Awaitable<?> execPing() {\n+            return dbClient()\n+                    .execute(exec -> exec.query(statement).forEach(it -> {}));\n+        }\n+\n+    }\n+\n     /**\n      * Fluent API builder for {@link DbClientHealthCheck}.\n+     * Default health check setup will call named DML statement with name {@code ping}.\n+     * This named DML statement shall be configured in {@code statements} section\n+     * of the DBClient configuration file.\n      */\n     public static final class Builder implements io.helidon.common.Builder<DbClientHealthCheck> {\n+\n+        /** Helidon database client. */\n         private final DbClient database;\n+        /** Health check name. */\n         private String name;\n+        /** Health check timeout in seconds (to wait for statement execution response). */\n+        private int timeoutSeconds;\n+\n+        // Those two boolean variables define 4 ways of query execution:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxODUxOQ==", "bodyText": "When configuring timeout in code, please use\ntimeout(long duration, TimeUnit timeUnit)\nor you need to name the method to be clear (e.g. timeoutSeconds) - in this case I would prefer the first one\nIf there is support for it in config, the configurable value must be timeout-seconds or timeout-millis and the code that converts it calls the method with TimeUnit)", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493418519", "createdAt": "2020-09-23T10:23:13Z", "author": {"login": "tomas-langer"}, "path": "dbclient/health/src/main/java/io/helidon/dbclient/health/DbClientHealthCheck.java", "diffHunk": "@@ -104,6 +283,64 @@ public Builder name(String name) {\n             this.name = name;\n             return this;\n         }\n+\n+        /**\n+         * Set health check statement type to query.\n+         * Default health check statement type is DML.\n+         *\n+         * @return updated builder instance\n+         */\n+        public Builder query() {\n+            this.isDML = false;\n+            this.isNamedstatement = true;\n+            return this;\n+        }\n+\n+        /**\n+         * Set custom statement name.\n+         * Default statement name value is {@code ping}.\n+         *\n+         * @param name custom statement name.\n+         * @return updated builder instance\n+         */\n+        public Builder statementName(String name) {\n+            if (statement != null) {\n+                throw new UnsupportedOperationException(\n+                        \"Can't use both statementName and statement methods in a single builder instance!\");\n+            }\n+            this.isNamedstatement = true;\n+            this.statementName = name;\n+            return this;\n+        }\n+\n+        /**\n+         * Set custom statement.\n+         *\n+         * @param statement custom statement name.\n+         * @return updated builder instance\n+         */\n+        public Builder statement(String statement) {\n+            if (statementName != null) {\n+                throw new UnsupportedOperationException(\n+                        \"Can't use both statementName and statement methods in a single builder instance!\");\n+            }\n+            this.isNamedstatement = false;\n+            this.statement = statement;\n+            return this;\n+        }\n+\n+        /**\n+         * Set custom timeout to wait for statement execution response.\n+         * Default value is {@code 10} seconds.\n+         *\n+         * @param seconds number of seconds to wait for statement execution response\n+         * @return updated builder instance\n+         */\n+        public Builder timeout(int seconds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 310}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxOTQxMA==", "bodyText": "This method should probably be deprecated, as the health check may be either DML or Query.", "url": "https://github.com/oracle/helidon/pull/2383#discussion_r493419410", "createdAt": "2020-09-23T10:24:08Z", "author": {"login": "tomas-langer"}, "path": "dbclient/jdbc/src/main/java/io/helidon/dbclient/jdbc/JdbcDbClient.java", "diffHunk": "@@ -209,7 +209,7 @@ public T apply(Throwable t) {\n \n     @Override\n     public Single<Void> ping() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d50bd7645b5f1621309a355ab4869cab85126a9d"}, "originalPosition": 3}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d0b32c3ec196e164b3efd86ec153c5053b44d5ec", "author": {"user": {"login": "Tomas-Kraus", "name": "Tom\u00e1\u0161 Kraus"}}, "url": "https://github.com/oracle/helidon/commit/d0b32c3ec196e164b3efd86ec153c5053b44d5ec", "committedDate": "2020-09-23T11:39:52Z", "message": "Changes requested in PR.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "902e59cb39691d1b55d47c16bfc5f147532ad29d", "author": {"user": {"login": "Tomas-Kraus", "name": "Tom\u00e1\u0161 Kraus"}}, "url": "https://github.com/oracle/helidon/commit/902e59cb39691d1b55d47c16bfc5f147532ad29d", "committedDate": "2020-09-24T10:47:46Z", "message": "Fixed javadoc build issue.\n\nSigned-off-by: Tomas Kraus <Tomas.Kraus@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA1NjYyNDEx", "url": "https://github.com/oracle/helidon/pull/2383#pullrequestreview-505662411", "createdAt": "2020-10-09T13:16:34Z", "commit": {"oid": "902e59cb39691d1b55d47c16bfc5f147532ad29d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6036d8ce5488e91a572ca81eb95dd964c9b1f2f3", "author": {"user": {"login": "Tomas-Kraus", "name": "Tom\u00e1\u0161 Kraus"}}, "url": "https://github.com/oracle/helidon/commit/6036d8ce5488e91a572ca81eb95dd964c9b1f2f3", "committedDate": "2020-10-12T10:41:33Z", "message": "Merge branch 'master' into DBC_IT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA2NTk5OTM2", "url": "https://github.com/oracle/helidon/pull/2383#pullrequestreview-506599936", "createdAt": "2020-10-12T13:03:43Z", "commit": {"oid": "6036d8ce5488e91a572ca81eb95dd964c9b1f2f3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 470, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}