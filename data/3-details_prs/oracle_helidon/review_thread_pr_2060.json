{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODMwOTQz", "number": 2060, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoxMToxMVrOEHA8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozOToyNVrOEHCkCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzkwOTgxOnYy", "diffSide": "RIGHT", "path": "config/config/src/main/java/io/helidon/config/BuilderImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoxMToxMVrOGmKdGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoxMToxMVrOGmKdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3MDM2MQ==", "bodyText": "Maybe we could add some disableMutableSources or something similar in the future", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442670361", "createdAt": "2020-06-19T07:11:11Z", "author": {"login": "danielkec"}, "path": "config/config/src/main/java/io/helidon/config/BuilderImpl.java", "diffHunk": "@@ -605,6 +584,7 @@ private EmptyConfigHolder() {\n                 .disableSystemPropertiesSource()\n                 .disableParserServices()\n                 .disableFilterServices()\n+                .changesExecutor(command -> {})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk3ODM4OnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozNToxN1rOGmLGnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyNDo0NFrOGmOJLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDk4OA==", "bodyText": "Can we assert those resolved PATH values equals with System.getenv(\"PATH\")?", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442680988", "createdAt": "2020-06-19T07:35:17Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);\n+\n+            io.helidon.config.Config helidonConfig = (io.helidon.config.Config) myConfig;\n+            // should work if we use it as SE as well\n+            helidonConfig.get(\"path\").asString().get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDc5Ng==", "bodyText": "Using custom env var, validating content.", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442730796", "createdAt": "2020-06-19T09:24:44Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);\n+\n+            io.helidon.config.Config helidonConfig = (io.helidon.config.Config) myConfig;\n+            // should work if we use it as SE as well\n+            helidonConfig.get(\"path\").asString().get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MDk4OA=="}, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODAyMDgzOnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0ODo1OFrOGmLgRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyMzo1OFrOGmOHsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzU1Ng==", "bodyText": "Failing on windows java.util.NoSuchElementException: Property \"path\" is not available in configuration", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442687556", "createdAt": "2020-06-19T07:48:58Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4OTk0Mw==", "bodyText": "Because its Path", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442689943", "createdAt": "2020-06-19T07:54:01Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzU1Ng=="}, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDQxOA==", "bodyText": "Using an env var configured in pom.xml now.", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442730418", "createdAt": "2020-06-19T09:23:58Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/test/java/io/helidon/config/mp/MpConfigTest.java", "diffHunk": "@@ -274,5 +275,29 @@ public static void reset() {\n             counter.set(0);\n         }\n     }\n+\n+    @Test\n+    void testEnvVar() {\n+        ConfigProviderResolver instance = ConfigProviderResolver.instance();\n+        ClassLoader myCl = Thread.currentThread().getContextClassLoader();\n+        Config current = ConfigProvider.getConfig(myCl);\n+\n+        try {\n+            instance.registerConfig(instance.getBuilder()\n+                                            .withSources(MpConfigSources.environmentVariables())\n+                                            .build(),\n+                                    myCl);\n+            Config myConfig = instance.getConfig(myCl);\n+            // this must not throw an exception - path should be on any environment\n+            // and the MP env var processing should make it available\n+            String path = myConfig.getValue(\"path\", String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4NzU1Ng=="}, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODE3NDgwOnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozOToyNVrOGmNBPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwOToyNDoyNlrOGmOIkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjM4MQ==", "bodyText": "io.helidon.config.mp.MpConfigProviderResolver#registerConfig has no defense against null and registered config is stored in io.helidon.config.mp.MpConfigProviderResolver#CONFIGS map with null key, but that Config is not acessible any more because getConfig has defense against null\n    public Config getConfig(ClassLoader loader) {\n        if (null == loader) {\n            loader = ClassLoader.getSystemClassLoader();\n        }", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442712381", "createdAt": "2020-06-19T08:39:25Z", "author": {"login": "danielkec"}, "path": "microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java", "diffHunk": "@@ -76,6 +132,38 @@ void customValueOverride() {\n         assertThat(c.getValue(TEST_KEY, String.class), is(TEST_TOPIC_CUSTOM));\n     }\n \n+    @Test\n+    void putAllTestMp() {\n+        Map<String, String> propMap = Map.of(\n+                \"mp.messaging.outcoming.test-channel.\" + TEST_KEY, TEST_TOPIC_CONFIG\n+        );\n+\n+        Map<String, String> propMap2 = Map.of(\n+                \"mp.messaging.connector.\" + TEST_CONNECTOR + \".\" + ADDITION_ATTR_1, ADDITION_ATTR_1_VALUE,\n+                \"mp.messaging.connector.\" + TEST_CONNECTOR + \".\" + ADDITION_ATTR_2, ADDITION_ATTR_2_VALUE\n+        );\n+\n+        resolver.registerConfig(resolver.getBuilder()\n+                                        .withSources(MpConfigSources.create(propMap))\n+                                        .build(), null);\n+\n+        Config config = (Config) resolver.getConfig();\n+\n+        resolver.registerConfig(resolver.getBuilder()\n+                                        .withSources(MpConfigSources.create(propMap2))\n+                                        .build(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjczMDY0MA==", "bodyText": "Fixed all instances to work the same - if loader is null, use context class loader.", "url": "https://github.com/oracle/helidon/pull/2060#discussion_r442730640", "createdAt": "2020-06-19T09:24:26Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AdHocConfigBuilderTest.java", "diffHunk": "@@ -76,6 +132,38 @@ void customValueOverride() {\n         assertThat(c.getValue(TEST_KEY, String.class), is(TEST_TOPIC_CUSTOM));\n     }\n \n+    @Test\n+    void putAllTestMp() {\n+        Map<String, String> propMap = Map.of(\n+                \"mp.messaging.outcoming.test-channel.\" + TEST_KEY, TEST_TOPIC_CONFIG\n+        );\n+\n+        Map<String, String> propMap2 = Map.of(\n+                \"mp.messaging.connector.\" + TEST_CONNECTOR + \".\" + ADDITION_ATTR_1, ADDITION_ATTR_1_VALUE,\n+                \"mp.messaging.connector.\" + TEST_CONNECTOR + \".\" + ADDITION_ATTR_2, ADDITION_ATTR_2_VALUE\n+        );\n+\n+        resolver.registerConfig(resolver.getBuilder()\n+                                        .withSources(MpConfigSources.create(propMap))\n+                                        .build(), null);\n+\n+        Config config = (Config) resolver.getConfig();\n+\n+        resolver.registerConfig(resolver.getBuilder()\n+                                        .withSources(MpConfigSources.create(propMap2))\n+                                        .build(), null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcxMjM4MQ=="}, "originalCommit": {"oid": "968aa6d58241ed134975b23bfd72dcc82dbf31dc"}, "originalPosition": 108}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 541, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}