{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1Mjg5MTc3", "number": 2591, "title": "Support for HTTP pipelining", "bodyText": "This patch ensures that responses are ordered correctly when HTTP pipelining is used. If multiple requests are received over the same connection, the corresponding responses need to be ordered according to the spec. It also affects pipelining over HTTP/2 connections. The crux of the fix is to wait for the previous response to complete before writing data for the current one. Thanks to @olotenko.", "createdAt": "2020-12-09T16:08:10Z", "url": "https://github.com/oracle/helidon/pull/2591", "merged": true, "mergeCommit": {"oid": "4e866445ff3bc7b18aa7651ece091f8dee45dde9"}, "closed": true, "closedAt": "2020-12-10T20:30:41Z", "author": {"login": "spericas"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdj62WzgH2gAyNTM1Mjg5MTc3OjI2OTQ2NTcxYjIzMzA5MjVlYTU1YThkNjg0YzgyNjdhZDc5N2E2MTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk5XymgFqTU0OTU3NTczNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "26946571b2330925ea55a8d684c8267ad797a618", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/26946571b2330925ea55a8d684c8267ad797a618", "committedDate": "2020-12-07T19:38:27Z", "message": "Initial support for HTTP pipelining with test.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9099b7d776366c8189daec7f31a0982ab0b43dd7", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/9099b7d776366c8189daec7f31a0982ab0b43dd7", "committedDate": "2020-12-07T20:57:33Z", "message": "Some minor fixes and removal of unused thread variable.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "223e7b3a3d9e2a7f4d768c28acf7758caca9b42a", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/223e7b3a3d9e2a7f4d768c28acf7758caca9b42a", "committedDate": "2020-12-08T21:01:31Z", "message": "New pipelining test that uses HTTP/2 and OkHttp client.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "329eef2a5f798e674d9228cc63b080dca89b6720", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/329eef2a5f798e674d9228cc63b080dca89b6720", "committedDate": "2020-12-09T15:57:01Z", "message": "Some minor changes and comments.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/45963f04d7432f5a76ffd445b305c188df67396a", "committedDate": "2020-12-09T16:10:05Z", "message": "Removed unused static.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDY3ODUx", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-548467851", "createdAt": "2020-12-09T18:19:12Z", "commit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxOToxMlrOICi11w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoxOToxMlrOICi11w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTUzODkwMw==", "bodyText": "Readability nit: prev should probably be something like previousRequestFuture to \"look like\", e.g., responseFuture, headersFuture, etc.", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r539538903", "createdAt": "2020-12-09T18:19:12Z", "author": {"login": "ljnelson"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/BareResponseImpl.java", "diffHunk": "@@ -79,27 +78,28 @@\n     private volatile DefaultHttpResponse response;\n     private volatile boolean lengthOptimization;\n     private volatile boolean isWebSocketUpgrade = false;\n+    private CompletableFuture<?> prev;\n \n     /**\n      * @param ctx the channel handler context\n      * @param request the request\n      * @param requestContentConsumed whether the request content is consumed\n-     * @param thread the outbound event loop thread which will be used to write the response\n+     * @param prev Future that represents previous request completion for HTTP pipelining\n      * @param requestId the correlation ID that is added to the log statements\n      */\n     BareResponseImpl(ChannelHandlerContext ctx,\n                      HttpRequest request,\n                      BooleanSupplier requestContentConsumed,\n-                     Thread thread,\n+                     CompletableFuture<?> prev,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDczNDEz", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-548473413", "createdAt": "2020-12-09T18:23:12Z", "commit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyMzoxM1rOICjA7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyMzoxM1rOICjA7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0MTc0MA==", "bodyText": "await(10, TimeUnit.SECONDS)", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r539541740", "createdAt": "2020-12-09T18:23:13Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/HttpPipelineTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import okhttp3.Call;\n+import okhttp3.Callback;\n+import okhttp3.Interceptor;\n+import okhttp3.MediaType;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+/**\n+ * Test support for HTTP 1.1 pipelining.\n+ */\n+public class HttpPipelineTest {\n+    private static final Logger LOGGER = Logger.getLogger(HttpPipelineTest.class.getName());\n+\n+    private static WebServer webServer;\n+    private static AtomicInteger counter = new AtomicInteger(0);\n+    private static ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(1);\n+    private static OkHttpClient client;\n+\n+    private static class LoggingInterceptor implements Interceptor {\n+        @Override\n+        public okhttp3.Response intercept(Interceptor.Chain chain) throws IOException {\n+            Request request = chain.request();\n+\n+            long t1 = System.nanoTime();\n+            System.out.println(String.format(\"Sending request %s on %s%n%s\",\n+                    request.url(), chain.connection(), request.headers()));\n+\n+            Response response = chain.proceed(request);\n+\n+            long t2 = System.nanoTime();\n+            System.out.println(String.format(\"Received response for %s in %.1fms%nProtocol is %s%n%s\",\n+                    response.request().url(), (t2 - t1) / 1e6d, response.protocol(), response.headers()));\n+\n+            return response;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void startServer() throws Exception {\n+        startServer(0);\n+    }\n+\n+    @AfterAll\n+    public static void close() throws Exception {\n+        if (webServer != null) {\n+            webServer.shutdown()\n+                    .toCompletableFuture()\n+                    .get(10, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private static void startServer(int port) throws Exception {\n+        webServer = WebServer.builder()\n+                .experimental(ExperimentalConfiguration.builder().http2(\n+                        Http2Configuration.builder().enable(true).build()).build())\n+                .port(port)\n+                .routing(Routing.builder()\n+                        .put(\"/\", (req, res) -> {\n+                            counter.set(0);\n+                            res.send();\n+                        })\n+                        .get(\"/\", (req, res) -> {\n+                            int n = counter.getAndIncrement();\n+                            int delay = (n % 2 == 0) ? 1000 : 0;    // alternate delay 1 second and no delay\n+                            executor.schedule(() -> res.status(Http.Status.OK_200).send(\"Response \" + n + \"\\n\"),\n+                                    delay, TimeUnit.MILLISECONDS);\n+                        })\n+                        .build())\n+                .build()\n+                .start()\n+                .toCompletableFuture()\n+                .get(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDc4MDM2", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-548478036", "createdAt": "2020-12-09T18:27:44Z", "commit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNzo0NFrOICjNMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODoyNzo0NFrOICjNMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU0NDg4Mw==", "bodyText": "Will be the assertion error thrown on correct thread?", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r539544883", "createdAt": "2020-12-09T18:27:44Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/HttpPipelineTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import javax.net.ssl.X509TrustManager;\n+import java.io.IOException;\n+import java.net.URL;\n+import java.security.cert.X509Certificate;\n+import java.util.Collections;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.ScheduledThreadPoolExecutor;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.webserver.utils.SocketHttpClient;\n+\n+import okhttp3.Call;\n+import okhttp3.Callback;\n+import okhttp3.Interceptor;\n+import okhttp3.MediaType;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.RequestBody;\n+import okhttp3.Response;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+\n+/**\n+ * Test support for HTTP 1.1 pipelining.\n+ */\n+public class HttpPipelineTest {\n+    private static final Logger LOGGER = Logger.getLogger(HttpPipelineTest.class.getName());\n+\n+    private static WebServer webServer;\n+    private static AtomicInteger counter = new AtomicInteger(0);\n+    private static ScheduledExecutorService executor = new ScheduledThreadPoolExecutor(1);\n+    private static OkHttpClient client;\n+\n+    private static class LoggingInterceptor implements Interceptor {\n+        @Override\n+        public okhttp3.Response intercept(Interceptor.Chain chain) throws IOException {\n+            Request request = chain.request();\n+\n+            long t1 = System.nanoTime();\n+            System.out.println(String.format(\"Sending request %s on %s%n%s\",\n+                    request.url(), chain.connection(), request.headers()));\n+\n+            Response response = chain.proceed(request);\n+\n+            long t2 = System.nanoTime();\n+            System.out.println(String.format(\"Received response for %s in %.1fms%nProtocol is %s%n%s\",\n+                    response.request().url(), (t2 - t1) / 1e6d, response.protocol(), response.headers()));\n+\n+            return response;\n+        }\n+    }\n+\n+    @BeforeAll\n+    public static void startServer() throws Exception {\n+        startServer(0);\n+    }\n+\n+    @AfterAll\n+    public static void close() throws Exception {\n+        if (webServer != null) {\n+            webServer.shutdown()\n+                    .toCompletableFuture()\n+                    .get(10, TimeUnit.SECONDS);\n+        }\n+    }\n+\n+    private static void startServer(int port) throws Exception {\n+        webServer = WebServer.builder()\n+                .experimental(ExperimentalConfiguration.builder().http2(\n+                        Http2Configuration.builder().enable(true).build()).build())\n+                .port(port)\n+                .routing(Routing.builder()\n+                        .put(\"/\", (req, res) -> {\n+                            counter.set(0);\n+                            res.send();\n+                        })\n+                        .get(\"/\", (req, res) -> {\n+                            int n = counter.getAndIncrement();\n+                            int delay = (n % 2 == 0) ? 1000 : 0;    // alternate delay 1 second and no delay\n+                            executor.schedule(() -> res.status(Http.Status.OK_200).send(\"Response \" + n + \"\\n\"),\n+                                    delay, TimeUnit.MILLISECONDS);\n+                        })\n+                        .build())\n+                .build()\n+                .start()\n+                .toCompletableFuture()\n+                .get(10, TimeUnit.SECONDS);\n+\n+        OkHttpClient.Builder clientBuilder = new OkHttpClient.Builder()\n+                .addNetworkInterceptor(new LoggingInterceptor())\n+                .protocols(Collections.singletonList(Protocol.H2_PRIOR_KNOWLEDGE));\n+        client = clientBuilder.build();\n+\n+        LOGGER.info(\"Started server at: https://localhost:\" + webServer.port());\n+    }\n+\n+    /**\n+     * Pipelines request_0 and request_1 and makes sure responses are returned in the\n+     * correct order. Note that the server will delay the response for request_0 to\n+     * make sure they are properly synchronized.\n+     *\n+     * @throws Exception If there are connection problems.\n+     */\n+    @Test\n+    public void testPipelining() throws Exception {\n+        try (SocketHttpClient s = new SocketHttpClient(webServer)) {\n+            s.request(Http.Method.PUT, \"/\");        // reset server\n+            s.request(Http.Method.GET, \"/\");        // request_0\n+            s.request(Http.Method.GET, \"/\");        // request_1\n+            String put = s.receive();\n+            assertThat(put, notNullValue());\n+            String get0 = s.receive();\n+            assertThat(get0, containsString(\"Response 0\"));\n+            String get1 = s.receive();\n+            assertThat(get1, containsString(\"Response 1\"));\n+        }\n+    }\n+\n+    /**\n+     * Same as previous test but using HTTP/2 and OkHttp as async client.\n+     */\n+    @Test\n+    public void testPipeliningHttp2() throws Exception {\n+        MediaType mt = MediaType.get(\"text/plain\");\n+        URL url = new URL(\"http://localhost:\" + webServer.port() + \"/\");\n+        Request put = new Request.Builder().url(url).put(RequestBody.create(mt, \"\")).build();\n+        client.newCall(put).execute();\n+\n+        Request get = new Request.Builder().url(url).build();\n+        CompletableFuture<?> cf0 = new CompletableFuture<>();\n+        CompletableFuture<?> cf1 = new CompletableFuture<>();\n+\n+        client.newCall(get).enqueue(new Callback() {\n+            @Override\n+            public void onFailure(Call call, IOException e) {\n+                cf0.completeExceptionally(e);\n+            }\n+\n+            @Override\n+            public void onResponse(Call call, Response r0) throws IOException {\n+                LOGGER.info(\"Received r0\");\n+                if (cf1.isDone()) {\n+                    LOGGER.info(\"Expected r0 before r1\");\n+                    cf0.completeExceptionally(new RuntimeException(\"Expected r0 before r1\"));\n+                } else {\n+                    assertThat(r0.body().string(), containsString(\"Response 0\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "originalPosition": 177}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NDg2NTY1", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-548486565", "createdAt": "2020-12-09T18:35:49Z", "commit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNTo0OVrOICjjCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODozNTo0OVrOICjjCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU1MDQ3Mw==", "bodyText": "Why do you have to specify the version, isn't that managed by the helidon-project parent pom ?", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r539550473", "createdAt": "2020-12-09T18:35:49Z", "author": {"login": "romain-grecourt"}, "path": "webserver/webserver/pom.xml", "diffHunk": "@@ -161,5 +161,11 @@\n             <artifactId>helidon-config-testing</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>com.squareup.okhttp3</groupId>\n+            <artifactId>okhttp</artifactId>\n+            <version>${version.lib.okhttp3}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "45963f04d7432f5a76ffd445b305c188df67396a"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47de1a64f25fa7f1c60a30c513f5c6af35042705", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/47de1a64f25fa7f1c60a30c513f5c6af35042705", "committedDate": "2020-12-09T18:44:06Z", "message": "A few minor fixes: variable renames, removal of artifact version in pom, etc.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3e33bab7b1bfbaf7eeef509008314663713fa3a", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/c3e33bab7b1bfbaf7eeef509008314663713fa3a", "committedDate": "2020-12-09T18:46:40Z", "message": "Shorten variable name.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NTAyNTAx", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-548502501", "createdAt": "2020-12-09T18:50:46Z", "commit": {"oid": "c3e33bab7b1bfbaf7eeef509008314663713fa3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo1MDo0NlrOICkLCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQxODo1MDo0NlrOICkLCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTU2MDcxMg==", "bodyText": "I am unsure of the threading implications of who can modify this field, but I see it being modified in several places.  Does it need to be volatile?", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r539560712", "createdAt": "2020-12-09T18:50:46Z", "author": {"login": "ljnelson"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/BareResponseImpl.java", "diffHunk": "@@ -78,19 +78,19 @@\n     private volatile DefaultHttpResponse response;\n     private volatile boolean lengthOptimization;\n     private volatile boolean isWebSocketUpgrade = false;\n-    private CompletableFuture<?> previousRequestFuture;\n+    private CompletableFuture<?> prevRequestFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3e33bab7b1bfbaf7eeef509008314663713fa3a"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7bcb7b9b7b2ea7e9de585483e9acebf0266b1c41", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/7bcb7b9b7b2ea7e9de585483e9acebf0266b1c41", "committedDate": "2020-12-09T19:26:00Z", "message": "Use volatile for prevRequestFuture field.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "364b368e62057b72972d4304748b197dd400ac04", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/364b368e62057b72972d4304748b197dd400ac04", "committedDate": "2020-12-09T19:29:56Z", "message": "One more variable rename.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4NjI0NjM1", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-548624635", "createdAt": "2020-12-09T21:28:33Z", "commit": {"oid": "47de1a64f25fa7f1c60a30c513f5c6af35042705"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMToyODozM1rOICqTXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMToyODozM1rOICqTXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY2MTE1MQ==", "bodyText": "Since we are into renaming, I'd like to make sure the meaning is documented to be not only previous request, but really any chunk.\n(N.B.: onNext may push several content chunks for the same request, so prev would reference the future for those chunks)", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r539661151", "createdAt": "2020-12-09T21:28:33Z", "author": {"login": "olotenko"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/BareResponseImpl.java", "diffHunk": "@@ -78,19 +78,19 @@\n     private volatile DefaultHttpResponse response;\n     private volatile boolean lengthOptimization;\n     private volatile boolean isWebSocketUpgrade = false;\n-    private CompletableFuture<?> prev;\n+    private CompletableFuture<?> previousRequestFuture;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47de1a64f25fa7f1c60a30c513f5c6af35042705"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba7d4347fca194a54307b3f34bcf3badbec882de", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/ba7d4347fca194a54307b3f34bcf3badbec882de", "committedDate": "2020-12-10T16:29:56Z", "message": "Cleanup use of volatile keyword in BareResponseImpl. Renamed variable.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTU3ODQ5", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-549557849", "createdAt": "2020-12-10T20:03:29Z", "commit": {"oid": "ba7d4347fca194a54307b3f34bcf3badbec882de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTY2OTM1", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-549566935", "createdAt": "2020-12-10T20:16:21Z", "commit": {"oid": "ba7d4347fca194a54307b3f34bcf3badbec882de"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDoxNjoyMlrOIDbhHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMDoxNjoyMlrOIDbhHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQ2NzQ4Nw==", "bodyText": "Why declare local var?", "url": "https://github.com/oracle/helidon/pull/2591#discussion_r540467487", "createdAt": "2020-12-10T20:16:22Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/ForwardingHandler.java", "diffHunk": "@@ -144,7 +156,9 @@ protected void channelRead0(ChannelHandlerContext ctx, Object msg) {\n             // Queue, context and publisher creation\n             ReferenceHoldingQueue<DataChunk> queue = new ReferenceHoldingQueue<>();\n             queues.add(queue);\n-            requestContext = new RequestContext(new HttpRequestScopedPublisher(ctx, queue), request);\n+            RequestContext requestContext = new RequestContext(new HttpRequestScopedPublisher(ctx, queue), request);\n+            this.requestContext = requestContext;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba7d4347fca194a54307b3f34bcf3badbec882de"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NTc1NzM2", "url": "https://github.com/oracle/helidon/pull/2591#pullrequestreview-549575736", "createdAt": "2020-12-10T20:29:05Z", "commit": {"oid": "ba7d4347fca194a54307b3f34bcf3badbec882de"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 412, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}