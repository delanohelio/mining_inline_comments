{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxNzA3MjI2", "number": 1356, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMjo1MFrODeCUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1ODoyNVrODednOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODIxOTE1OnYy", "diffSide": "RIGHT", "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDoyMjo1MFrOFm-i5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDo1NDoxNVrOFn1Muw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDk0OQ==", "bodyText": "These exception check can be done more elegantly by\nassertThrows(ExecutionException.class, () -> readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\"));", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r376414949", "createdAt": "2020-02-07T14:22:50Z", "author": {"login": "Verdent"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzM3NQ==", "bodyText": "+1", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377077375", "createdAt": "2020-02-10T13:58:07Z", "author": {"login": "tomas-langer"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDk0OQ=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMDM5NQ==", "bodyText": "I've made the change, but note that means giving up on checking the exception cause.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377310395", "createdAt": "2020-02-10T20:54:15Z", "author": {"login": "romain-grecourt"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQxNDk0OQ=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODI5MjUzOnYy", "diffSide": "RIGHT", "path": "webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDo0Mzo0OVrOFm_PCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDo0OToyOFrOFn1Dog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNjI0OQ==", "bodyText": "I think this is some leftover which can be removed.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r376426249", "createdAt": "2020-02-07T14:43:49Z", "author": {"login": "Verdent"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java", "diffHunk": "@@ -38,6 +38,7 @@\n import java.util.stream.Collectors;\n \n import io.helidon.common.http.AlreadyCompletedException;\n+import io.helidon.common.http.HashParameters;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMwODA2Ng==", "bodyText": "This class extends HashParameters, since I've refactored it out of the webserver package, it only shows as import for this change.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377308066", "createdAt": "2020-02-10T20:49:28Z", "author": {"login": "romain-grecourt"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/HashResponseHeaders.java", "diffHunk": "@@ -38,6 +38,7 @@\n import java.util.stream.Collectors;\n \n import io.helidon.common.http.AlreadyCompletedException;\n+import io.helidon.common.http.HashParameters;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNjI0OQ=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODMwMTU3OnYy", "diffSide": "RIGHT", "path": "webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDo0NjoxOVrOFm_UeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxNjoxOToyN1rOFoPjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzY0MQ==", "bodyText": "Should not be io.helidon.common.http.ContextualRegistry an import instead of having it written like this?", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r376427641", "createdAt": "2020-02-07T14:46:19Z", "author": {"login": "Verdent"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java", "diffHunk": "@@ -100,12 +103,13 @@\n         // the contextual registry needs to be created as a different type is expected. Once we remove ContextualRegistry\n         // we can simply use the one from config\n         Context context = config.context();\n-        if (context instanceof ContextualRegistry) {\n-            this.contextualRegistry = (ContextualRegistry) context;\n+        if (context instanceof io.helidon.common.http.ContextualRegistry) {\n+            this.contextualRegistry = (io.helidon.common.http.ContextualRegistry) context;\n         } else {\n-            this.contextualRegistry = ContextualRegistry.create(config.context());\n+            this.contextualRegistry = io.helidon.common.http.ContextualRegistry.create(config.context());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MDM4NQ==", "bodyText": "This is the only way to avoid deprecated compiler warning.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377270385", "createdAt": "2020-02-10T19:30:41Z", "author": {"login": "romain-grecourt"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java", "diffHunk": "@@ -100,12 +103,13 @@\n         // the contextual registry needs to be created as a different type is expected. Once we remove ContextualRegistry\n         // we can simply use the one from config\n         Context context = config.context();\n-        if (context instanceof ContextualRegistry) {\n-            this.contextualRegistry = (ContextualRegistry) context;\n+        if (context instanceof io.helidon.common.http.ContextualRegistry) {\n+            this.contextualRegistry = (io.helidon.common.http.ContextualRegistry) context;\n         } else {\n-            this.contextualRegistry = ContextualRegistry.create(config.context());\n+            this.contextualRegistry = io.helidon.common.http.ContextualRegistry.create(config.context());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzY0MQ=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Nzc0MjIyOQ==", "bodyText": "We need to remove ContextualRegistry before 2.0 is released anyway, so no problem", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377742229", "createdAt": "2020-02-11T16:19:27Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/NettyWebServer.java", "diffHunk": "@@ -100,12 +103,13 @@\n         // the contextual registry needs to be created as a different type is expected. Once we remove ContextualRegistry\n         // we can simply use the one from config\n         Context context = config.context();\n-        if (context instanceof ContextualRegistry) {\n-            this.contextualRegistry = (ContextualRegistry) context;\n+        if (context instanceof io.helidon.common.http.ContextualRegistry) {\n+            this.contextualRegistry = (io.helidon.common.http.ContextualRegistry) context;\n         } else {\n-            this.contextualRegistry = ContextualRegistry.create(config.context());\n+            this.contextualRegistry = io.helidon.common.http.ContextualRegistry.create(config.context());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyNzY0MQ=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjYzNDY0OnYy", "diffSide": "RIGHT", "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0MzoyNFrOFnmeGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMDo1NDo0N1rOFn1NuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTA4Mg==", "bodyText": "The All rights reserved. should be removed. Not sure why the copyright plugin ignores this", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377069082", "createdAt": "2020-02-10T13:43:24Z", "author": {"login": "tomas-langer"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI2OTM0Ng==", "bodyText": "I've only updated the year in these copyright changes, can we do that change in a separate PR ?", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377269346", "createdAt": "2020-02-10T19:28:44Z", "author": {"login": "romain-grecourt"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTA4Mg=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMxMDY0OQ==", "bodyText": "Marking this as resolved since I think we should solve this issue for all of Helidon not just for this PR.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377310649", "createdAt": "2020-02-10T20:54:47Z", "author": {"login": "romain-grecourt"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -1,5 +1,5 @@\n /*\n- * Copyright (c) 2018, 2019 Oracle and/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTA4Mg=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY0MDA1OnYy", "diffSide": "RIGHT", "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NDo1NFrOFnmhXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozMDowNVrOFnyvQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTkxNw==", "bodyText": "This seems to be just reformatted. Please do not reformat existing code unless necessary or an issue - e.g. the line 73 is OK, lines 69-70 not.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377069917", "createdAt": "2020-02-10T13:44:54Z", "author": {"login": "tomas-langer"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -66,22 +66,43 @@\n     private final Class<?> rawType;\n \n     /**\n-     * Constructs a new generic type, using the provided generic type information and\n-     * deriving the class.\n+     * Constructs a new generic type, using the provided generic type\n+     * information and deriving the class.\n      *\n      * @param genericType the generic type\n-     * @param <N>         generic type of the returned GenericType\n+     * @param <N> generic type of the returned GenericType\n      * @return new type wrapping the provided type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MDA4Mg==", "bodyText": "Roger that, I've tried to avoid these as much as possible ; but sometimes I can't help it :p", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377270082", "createdAt": "2020-02-10T19:30:05Z", "author": {"login": "romain-grecourt"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -66,22 +66,43 @@\n     private final Class<?> rawType;\n \n     /**\n-     * Constructs a new generic type, using the provided generic type information and\n-     * deriving the class.\n+     * Constructs a new generic type, using the provided generic type\n+     * information and deriving the class.\n      *\n      * @param genericType the generic type\n-     * @param <N>         generic type of the returned GenericType\n+     * @param <N> generic type of the returned GenericType\n      * @return new type wrapping the provided type", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA2OTkxNw=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY0NDMyOnYy", "diffSide": "RIGHT", "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NjoxMFrOFnmj8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NjoxMFrOFnmj8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MDU3Nw==", "bodyText": "The line breaks were intentional. Do not reformat code...", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377070577", "createdAt": "2020-02-10T13:46:10Z", "author": {"login": "tomas-langer"}, "path": "common/common/src/main/java/io/helidon/common/GenericType.java", "diffHunk": "@@ -164,11 +185,9 @@ public boolean equals(Object obj) {\n         if (this == obj) {\n             return true;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY0ODUxOnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NzowNlrOFnmmQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0NzowNlrOFnmmQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTE3MA==", "bodyText": "The javadoc is wrong. You cannot return \"this instance\" as this is a static method", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071170", "createdAt": "2020-02-10T13:47:06Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -54,16 +54,21 @@ protected CharMatcher() {\n     /**\n      * Determines whether a character is ASCII, meaning that its code point is less than 128.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code ASCII})\n+     * @return this CharMatcher instance", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1MDYyOnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo0MFrOFnmnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo0MFrOFnmnew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTQ4Mw==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071483", "createdAt": "2020-02-10T13:47:40Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -54,16 +54,21 @@ protected CharMatcher() {\n     /**\n      * Determines whether a character is ASCII, meaning that its code point is less than 128.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code ASCII})\n+     * @return this CharMatcher instance\n      */\n     public static CharMatcher ascii() {\n         return Ascii.INSTANCE;\n     }\n \n     /**\n-     * Returns a {@code char} matcher that matches any character except the one specified.\n+     * Returns a {@code char} matcher that matches any character except the one\n+     * specified.\n      *\n-     * <p>To negate another {@code CharMatcher}, use {@link #negate()}.\n+     * <p>\n+     * To negate another {@code CharMatcher}, use {@link #negate()}.\n+     *\n+     * @param match the character that should not match\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1MDc4OnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo0M1rOFnmnlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo0M1rOFnmnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTUxMQ==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071511", "createdAt": "2020-02-10T13:47:43Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -72,7 +77,7 @@ public static CharMatcher isNot(final char match) {\n     /**\n      * Matches any character.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code ANY})\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1MTIxOnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo1MFrOFnmn0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo1MFrOFnmn0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTU3MA==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071570", "createdAt": "2020-02-10T13:47:50Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -81,7 +86,7 @@ public static CharMatcher any() {\n     /**\n      * Matches no characters.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code NONE})\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1MTg3OnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo1OFrOFnmoMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0Nzo1OFrOFnmoMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTY2NQ==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071665", "createdAt": "2020-02-10T13:47:58Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -91,14 +96,16 @@ public static CharMatcher none() {\n      * Determines whether a character is an ISO control character as specified by\n      * {@link Character#isISOControl(char)}.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code JAVA_ISO_CONTROL})\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1MjQ4OnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0ODowOVrOFnmolw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0ODowOVrOFnmolw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTc2Nw==", "bodyText": "javadoc for return is not correct", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071767", "createdAt": "2020-02-10T13:48:09Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -91,14 +96,16 @@ public static CharMatcher none() {\n      * Determines whether a character is an ISO control character as specified by\n      * {@link Character#isISOControl(char)}.\n      *\n-     * @since 19.0 (since 1.0 as constant {@code JAVA_ISO_CONTROL})\n+     * @return CharMatcher\n      */\n     public static CharMatcher javaIsoControl() {\n         return JavaIsoControl.INSTANCE;\n     }\n \n     /**\n      * Returns a {@code char} matcher that matches only one specified character.\n+     * @param match the character that should match\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1Mjg3OnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0ODoxNFrOFnmozQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0ODoxNFrOFnmozQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MTgyMQ==", "bodyText": "javadoc for return is not correct (please fix for all methods)", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377071821", "createdAt": "2020-02-10T13:48:14Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/CharMatcher.java", "diffHunk": "@@ -111,6 +118,8 @@ public static CharMatcher is(final char match) {\n     /**\n      * Returns a {@code char} matcher that matches any character not present in the given character\n      * sequence.\n+     * @param sequence all the characters that should not be matched\n+     * @return CharMatcher", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY1NzM3OnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/Content.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo0OToyNlrOFnmrbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQyMToyNzozM1rOFn2KdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQ5NA==", "bodyText": "As this is a backward incompatible version - should we keep Content in and remove it in 3.0, or just remove it immediately?", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377072494", "createdAt": "2020-02-10T13:49:26Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/Content.java", "diffHunk": "@@ -40,7 +40,9 @@\n  * It is possible to register function to convert publisher to {@link CompletionStage} of a single entity using\n  * {@link #registerReader(Class, Reader)} or {@link #registerReader(Predicate, Reader)} methods. It\n  * is then possible to use {@link #as(Class)} method to obtain such entity.\n+ * @deprecated use {@code io.helidon.media.common.MessageBodyReadableContent} instead\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MTIzNA==", "bodyText": "That's a very good question. I did the work initially for 1.x, now that we are at 2.x we should rethink this. Let's track this item in a separate issue.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377271234", "createdAt": "2020-02-10T19:32:24Z", "author": {"login": "romain-grecourt"}, "path": "common/http/src/main/java/io/helidon/common/http/Content.java", "diffHunk": "@@ -40,7 +40,9 @@\n  * It is possible to register function to convert publisher to {@link CompletionStage} of a single entity using\n  * {@link #registerReader(Class, Reader)} or {@link #registerReader(Predicate, Reader)} methods. It\n  * is then possible to use {@link #as(Class)} method to obtain such entity.\n+ * @deprecated use {@code io.helidon.media.common.MessageBodyReadableContent} instead\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQ5NA=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI5NzA2Mg==", "bodyText": "E.g., I'd like to remove the old Reader / Writer  interfaces with all the corresponding registerReader / registerWriter method and instead use the new .context() methods.\nThe .content() method remains, so that keeps some kind of compatibility, also I'm positive that there is not much code declaring variables of type Content ; so we should feel OK in removing the Content interface.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377297062", "createdAt": "2020-02-10T20:25:48Z", "author": {"login": "romain-grecourt"}, "path": "common/http/src/main/java/io/helidon/common/http/Content.java", "diffHunk": "@@ -40,7 +40,9 @@\n  * It is possible to register function to convert publisher to {@link CompletionStage} of a single entity using\n  * {@link #registerReader(Class, Reader)} or {@link #registerReader(Predicate, Reader)} methods. It\n  * is then possible to use {@link #as(Class)} method to obtain such entity.\n+ * @deprecated use {@code io.helidon.media.common.MessageBodyReadableContent} instead\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQ5NA=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzMyNjE5Ng==", "bodyText": "I've created #1375", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377326196", "createdAt": "2020-02-10T21:27:33Z", "author": {"login": "romain-grecourt"}, "path": "common/http/src/main/java/io/helidon/common/http/Content.java", "diffHunk": "@@ -40,7 +40,9 @@\n  * It is possible to register function to convert publisher to {@link CompletionStage} of a single entity using\n  * {@link #registerReader(Class, Reader)} or {@link #registerReader(Predicate, Reader)} methods. It\n  * is then possible to use {@link #as(Class)} method to obtain such entity.\n+ * @deprecated use {@code io.helidon.media.common.MessageBodyReadableContent} instead\n  */\n+@Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3MjQ5NA=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY2NzM2OnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/HashParameters.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1MjoxNlrOFnmxNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozMjo1N1rOFny0xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mzk3Mg==", "bodyText": "As this is now a public class, an explanation of what concatenation means in this context would be good. I have no idea.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377073972", "createdAt": "2020-02-10T13:52:16Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/HashParameters.java", "diffHunk": "@@ -110,7 +137,7 @@ public static HashParameters concat(Parameters... parameters) {\n     /**\n      * Creates new instance of {@link HashParameters} as a concatenation of provided parameters.\n      *\n-     * @param parameters parameters to concat.\n+     * @param parameters parameters to concatenate.\n      * @return a concatenation, never {@code null}.\n      */\n     public static HashParameters concat(Iterable<Parameters> parameters) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MTQ5Mw==", "bodyText": "Ok will do.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377271493", "createdAt": "2020-02-10T19:32:57Z", "author": {"login": "romain-grecourt"}, "path": "common/http/src/main/java/io/helidon/common/http/HashParameters.java", "diffHunk": "@@ -110,7 +137,7 @@ public static HashParameters concat(Parameters... parameters) {\n     /**\n      * Creates new instance of {@link HashParameters} as a concatenation of provided parameters.\n      *\n-     * @param parameters parameters to concat.\n+     * @param parameters parameters to concatenate.\n      * @return a concatenation, never {@code null}.\n      */\n     public static HashParameters concat(Iterable<Parameters> parameters) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3Mzk3Mg=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY3NzQyOnYy", "diffSide": "RIGHT", "path": "common/http/src/main/java/io/helidon/common/http/Utils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1NTowNFrOFnm3Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTozNToyNFrOFny5Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTUzMA==", "bodyText": "Our APIs should neither expect nor return null. Please refactor the method and usage to only invoke if not null", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377075530", "createdAt": "2020-02-10T13:55:04Z", "author": {"login": "tomas-langer"}, "path": "common/http/src/main/java/io/helidon/common/http/Utils.java", "diffHunk": "@@ -80,6 +80,22 @@ private Utils() {\n         return result;\n     }\n \n+    /**\n+     * Unwrap from double-quotes - if exists.\n+     *\n+     * @param str string to unwrap.\n+     * @return unwrapped string.\n+     */\n+    public static String unwrap(String str) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3MjYwNw==", "bodyText": "I've moved that method from an existing place, I take the blame since I'm making it \"public\" ; will make the change.", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377272607", "createdAt": "2020-02-10T19:35:24Z", "author": {"login": "romain-grecourt"}, "path": "common/http/src/main/java/io/helidon/common/http/Utils.java", "diffHunk": "@@ -80,6 +80,22 @@ private Utils() {\n         return result;\n     }\n \n+    /**\n+     * Unwrap from double-quotes - if exists.\n+     *\n+     * @param str string to unwrap.\n+     * @return unwrapped string.\n+     */\n+    public static String unwrap(String str) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NTUzMA=="}, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjY5MDUxOnYy", "diffSide": "RIGHT", "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1ODoyNVrOFnm_Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxMzo1ODoyNVrOFnm_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzA3NzUyNg==", "bodyText": "use assertThrows", "url": "https://github.com/oracle/helidon/pull/1356#discussion_r377077526", "createdAt": "2020-02-10T13:58:25Z", "author": {"login": "tomas-langer"}, "path": "media/jsonp/common/src/test/java/io/helidon/media/jsonp/common/JsonpReaderTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright (c) 2017, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.media.jsonp.common;\n+\n+import io.helidon.common.GenericType;\n+\n+import javax.json.JsonArray;\n+import javax.json.JsonException;\n+import javax.json.JsonObject;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.media.common.MessageBodyReaderContext;\n+import io.helidon.common.reactive.Single;\n+import java.util.concurrent.ExecutionException;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.instanceOf;\n+import static org.hamcrest.CoreMatchers.notNullValue;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+/**\n+ * The JsonContentReaderTest.\n+ */\n+public class JsonpReaderTest {\n+\n+    private final static MessageBodyReaderContext CONTEXT = MessageBodyReaderContext.create();\n+\n+    private final static JsonpBodyReader READER = JsonProcessing.create().newReader();\n+\n+    @Test\n+    public void simpleJsonObject() throws Exception {\n+        JsonObject jsonObject = readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+        assertThat(jsonObject, is(notNullValue()));\n+        assertThat(jsonObject.getJsonString(\"p\").getString(), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void incompatibleTypes() throws Exception {\n+        try {\n+            readJsonArray(\"{ \\\"p\\\" : \\\"val\\\" }\");\n+            fail(\"Should have thrown an exception\");\n+        } catch (ExecutionException ex) {\n+            assertThat(ex.getCause(), is(instanceOf(JsonException.class)));\n+        }\n+    }\n+\n+    @Test\n+    public void simpleJsonArray() throws Exception {\n+        JsonArray array = readJsonArray(\"[ \\\"val\\\" ]\");\n+        assertThat(array, is(notNullValue()));\n+        assertThat(array.getString(0), is(equalTo(\"val\")));\n+    }\n+\n+    @Test\n+    public void invalidJson() throws Exception {\n+        try {\n+            readJsonObject(\"{ \\\"p\\\" : \\\"val\\\" \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80ff0625ef55e4607cce1e08bd1dbabf77ca05b4"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 320, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}