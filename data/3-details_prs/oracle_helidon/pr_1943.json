{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDE5NjA2", "number": 1943, "title": "MultiFromOutputStream blocking close refactor", "bodyText": "Fixes https://gitlab-odx.oracledx.com/helidon/helidon/-/issues/18\nSigned-off-by: Daniel Kec daniel.kec@oracle.com", "createdAt": "2020-06-08T10:02:03Z", "url": "https://github.com/oracle/helidon/pull/1943", "merged": true, "mergeCommit": {"oid": "6e4e3aa3e749c9280eea06f927004cb7e4cfd940"}, "closed": true, "closedAt": "2020-06-12T18:00:54Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcpNfqyAH2gAyNDMxMDE5NjA2OmM3MDhmMjQ2MmQ1ZGU0ODgyZTRiZDQ0M2Y0Y2JhYWJjNjYwMDA3NTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqmwzaAFqTQyOTkzNzY3Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c708f2462d5de4882e4bd443f4cbaabc66000759", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/c708f2462d5de4882e4bd443f4cbaabc66000759", "committedDate": "2020-06-08T10:00:20Z", "message": "MultiFromOutputStream cs swap removal\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06c45a0e10b93dd5d27d32564ef624628bedf360", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/06c45a0e10b93dd5d27d32564ef624628bedf360", "committedDate": "2020-06-08T15:44:54Z", "message": "Don't wait for close\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2Mzc5MDkw", "url": "https://github.com/oracle/helidon/pull/1943#pullrequestreview-426379090", "createdAt": "2020-06-08T15:51:45Z", "commit": {"oid": "06c45a0e10b93dd5d27d32564ef624628bedf360"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1MTo0NVrOGgk5Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo1MTo0NVrOGgk5Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgxMjA1NQ==", "bodyText": "@romain-grecourt Is this still actual? There is no exception downstream can propagate to upstream except NPO, also is blocking of close still neccessary? Only proper way to complete is from upstream's side or maybe wait for cancel from downstream, but in such case we cant complete from upstream with close which is blocked by waiting for cancel.", "url": "https://github.com/oracle/helidon/pull/1943#discussion_r436812055", "createdAt": "2020-06-08T15:51:45Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiFromOutputStream.java", "diffHunk": "@@ -116,48 +102,6 @@ public void write(int b) throws IOException {\n     @Override\n     public void close() throws IOException {\n         complete();\n-\n-        if (!written.get() && !completionResult.isCompletedExceptionally()) {\n-            // no need to wait for\n-            return;\n-        }\n-        try {\n-            completionResult.get(timeout, TimeUnit.MILLISECONDS);\n-        } catch (CancellationException e) {\n-            throw new IOException(e);\n-        } catch (InterruptedException e) {\n-            Thread.currentThread().interrupt();\n-            throw new IOException(e);\n-        } catch (ExecutionException e) {\n-            throw new IOException(e.getCause());\n-        } catch (TimeoutException e) {\n-            throw new IOException(\"Timed out while waiting for subscriber to read data\", e);\n-        }\n-    }\n-\n-    /**\n-     * Signals this publishing output stream that it can safely return from otherwise blocking invocation\n-     * to it's {@link #close()} method.\n-     * Subsequent multiple invocations of this method are allowed, but have no effect on this publishing output stream.\n-     * <p>\n-     * When the {@link #close()} method on this output stream is invoked, it will block waiting for a signal to complete.\n-     * This is useful in cases, when the receiving side needs to synchronize it's completion with the publisher, e.g. to\n-     * ensure that any resources used by the subscribing party are not released prematurely due to a premature exit from\n-     * publishing output stream {@code close()} method.\n-     * <p>\n-     * Additionally, this mechanism can be used to propagate any downstream completion exceptions back to this publisher\n-     * and up it's call stack. When a non-null {@code throwable} parameter is passed into the method, it will be wrapped\n-     * in an {@link IOException} and thrown from the {@code close()} method when it is invoked.\n-     *\n-     * @param throwable represents a completion error condition that should be thrown when a {@code close()} method is invoked\n-     *                  on this publishing output stream. If set to {@code null}, the {@code close()} method will exit normally.\n-     */\n-    void signalCloseComplete(Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c45a0e10b93dd5d27d32564ef624628bedf360"}, "originalPosition": 110}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjM3NDA2", "url": "https://github.com/oracle/helidon/pull/1943#pullrequestreview-429637406", "createdAt": "2020-06-12T10:36:29Z", "commit": {"oid": "06c45a0e10b93dd5d27d32564ef624628bedf360"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5OTM3Njcy", "url": "https://github.com/oracle/helidon/pull/1943#pullrequestreview-429937672", "createdAt": "2020-06-12T18:00:36Z", "commit": {"oid": "06c45a0e10b93dd5d27d32564ef624628bedf360"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 558, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}