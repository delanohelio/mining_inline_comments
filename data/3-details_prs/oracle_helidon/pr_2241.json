{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0NTg3NDY3", "number": 2241, "title": "Support for bean producers in different package than beans that have \u2026", "bodyText": "\u2026package local methods.\nResolves #2223\nSigned-off-by: Tomas Langer tomas.langer@oracle.com", "createdAt": "2020-08-07T12:51:25Z", "url": "https://github.com/oracle/helidon/pull/2241", "merged": true, "mergeCommit": {"oid": "4dfb573d17a90f99db67e5d815a760784a7f1bfd"}, "closed": true, "closedAt": "2020-08-13T18:54:52Z", "author": {"login": "tomas-langer"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8j5PKAH2gAyNDY0NTg3NDY3Ojk2NThlZDI3MTZlMzc3ZGEwM2JmMDdiOGU1YjA4ZmYyYTdjMTI4OTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-iNgtgFqTQ2NjkwMjQwNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/9658ed2716e377da03bf07b8e5b08ff2a7c12897", "committedDate": "2020-08-07T12:50:44Z", "message": "Support for bean producers in different package than beans that have package local methods.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzc2MzU0", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-463376354", "createdAt": "2020-08-07T14:50:44Z", "commit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1MDo0NVrOG9c6Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1MDo0NVrOG9c6Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA4OTk3OA==", "bodyText": "Maybe refactor so this statement happens only once instead of twice, so something like:\ntry {\n    return defineClassSamePackage()...\n} catch (Exception e) {\n    if (samePackage(originalClass, className)) {\n        throw e or wrapped e;\n    } else {\n        // carry on\n    }\n}", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467089978", "createdAt": "2020-08-07T14:50:45Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -75,8 +76,17 @@ public boolean supportsClassDefining() {\n             // classloader, preventing it from seeing these fields/methods\n             return defineClassSamePackage(originalClass, className, classBytes, off, len);\n         } else {\n-            // use a custom classloader to define classes in a new package\n-            return wrapCl(originalClass.getClassLoader()).doDefineClass(originalClass, className, classBytes, off, len);\n+            // try to use same package approach (maybe in same module?) to support package local methods\n+            try {\n+                return defineClassSamePackage(originalClass, className, classBytes, off, len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzc2NTEz", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-463376513", "createdAt": "2020-08-07T14:50:57Z", "commit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1MDo1N1rOG9c6pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNDo1MDo1N1rOG9c6pA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5MDA4NA==", "bodyText": "Same as above", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467090084", "createdAt": "2020-08-07T14:50:57Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -91,8 +101,17 @@ public boolean supportsClassDefining() {\n         if (samePackage(originalClass, className)) {\n             return defineClassSamePackage(originalClass, className, classBytes, off, len);\n         } else {\n-            return wrapCl(originalClass.getClassLoader())\n-                    .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n+            // try to use same package approach (maybe in same module?) to support package local methods\n+            try {\n+                return defineClassSamePackage(originalClass, className, classBytes, off, len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzc2ODM1", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-463376835", "createdAt": "2020-08-07T14:51:21Z", "commit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "161d526a6d4133e765c838fc9e2cd7dc361921da", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/161d526a6d4133e765c838fc9e2cd7dc361921da", "committedDate": "2020-08-07T15:04:23Z", "message": "Refactor to call each method just once.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMzg5Mzg0", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-463389384", "createdAt": "2020-08-07T15:07:27Z", "commit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowNzoyOFrOG9dgSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QxNTowNzoyOFrOG9dgSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NzA5OTcyMQ==", "bodyText": "Thinking about it, this worries me.  If I have a nested class, won't this chop off the nested class name?  e.g. com.foo.Bar$Baz$various$proxy$related$bits: you'll conclude here that the proxied class name is com.foo.Bar, which is incorrect.  Or maybe this is intentional in some way, as the outer class (Bar) will of course be in the same package as the nested (and proxied) class (Bar$Baz) so it doesn't matter in practice?  Maybe a comment to further clarify here what you're doing?", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r467099721", "createdAt": "2020-08-07T15:07:28Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -117,8 +136,20 @@ public boolean supportsClassDefining() {\n                 // it also needs to open the package we are doing the lookup in\n                 myModule.addReads(classModule);\n             }\n+\n+            // I would like to create a private lookup in the same package as the proxied class, so let's\n+            // try to load it\n+            String proxiedClassName = className.substring(0, className.indexOf('$'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9658ed2716e377da03bf07b8e5b08ff2a7c12897"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NDExNTE3", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-464411517", "createdAt": "2020-08-10T17:00:18Z", "commit": {"oid": "161d526a6d4133e765c838fc9e2cd7dc361921da"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowMDoxOFrOG-XZ1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxNzowMDoxOFrOG-XZ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODA0ODM0MQ==", "bodyText": "I don't know enough about this to have a strong opinion, but let's say the private lookup fails.  Shouldn't we still endeavor to use MethodHandles.Lookup#defineClass(byte[]) to define the class instead of widening the access of ClassLoader#defineClass(byte[])?  Maybe using a public lookup rather than a private one?", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468048341", "createdAt": "2020-08-10T17:00:18Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -88,11 +98,23 @@ public boolean supportsClassDefining() {\n                                 int len,\n                                 ProtectionDomain protectionDomain) throws ClassFormatError {\n \n-        if (samePackage(originalClass, className)) {\n-            return defineClassSamePackage(originalClass, className, classBytes, off, len);\n-        } else {\n-            return wrapCl(originalClass.getClassLoader())\n-                    .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);\n+        // always try to define in private lookup, if fails (and not same package), try using a different classloader\n+        try {\n+            return defineClassPrivateLookup(originalClass, className, classBytes, off, len);\n+        } catch (Exception e) {\n+            if (samePackage(originalClass, className)) {\n+                // when same package, we must use private lookup (as we may use package local)\n+                throw e;\n+            } else {\n+                LOGGER.log(Level.FINEST,\n+                           \"Failed to create class \" + className + \" in same classloader. Will use a different one\",\n+                           e);\n+\n+                // other cases (except for a few edge cases, such as producer in a different package and usage\n+                // of bean in the same package) we can live with a different classloader to hold the proxy class\n+                return wrapCl(originalClass.getClassLoader())\n+                        .doDefineClass(originalClass, className, classBytes, off, len, protectionDomain);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "161d526a6d4133e765c838fc9e2cd7dc361921da"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "117ad853feaef30e9ee12cfa888fe0380143b0de", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/117ad853feaef30e9ee12cfa888fe0380143b0de", "committedDate": "2020-08-10T17:47:28Z", "message": "Review comments.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34e9e501b2cff07d7c1ba3721b1a2597dae8cf12", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/34e9e501b2cff07d7c1ba3721b1a2597dae8cf12", "committedDate": "2020-08-11T18:44:06Z", "message": "Update to proxy services\n- name is generated with super interface first\n- proxy classes are defined using private lookup when in original package\n- proxy classes are defined using a class loader for weld specific packages\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74bfb48cd9c2f6008cd85f20181e6d02eaeec603", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/74bfb48cd9c2f6008cd85f20181e6d02eaeec603", "committedDate": "2020-08-11T20:26:15Z", "message": "Update to proxy services\n- name is generated with super interface first\n- proxy classes are defined using private lookup when in original package\n- proxy classes are defined using a class loader for weld specific packages\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "561734815864a068cb6a90562d102b8ebedbedf0", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/561734815864a068cb6a90562d102b8ebedbedf0", "committedDate": "2020-08-11T20:39:46Z", "message": "Adding opens statements for Helidon cdi module\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDc1MDE3", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-465475017", "createdAt": "2020-08-11T22:36:47Z", "commit": {"oid": "561734815864a068cb6a90562d102b8ebedbedf0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjozNjo0N1rOG_Lkww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjozNjo0N1rOG_Lkww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODkwMzEwNw==", "bodyText": "Is there any reason not to just go with this strategy?  That is, is anything gained by first trying lookupClassName?  My understanding is that a lookup class with respect to MethodHandles.Lookup is used only for its package and module\u2014and an enclosing or top level class should be fine here.", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r468903107", "createdAt": "2020-08-11T22:36:47Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +135,91 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name based on full class name (e.g. for inner classes)\n+            String lookupClassName;\n+            // lookup class name based on the first class in the name\n+            String fallbackLookupClassName;\n+\n+            if (className.contains(\"$\")) {\n+                // fallback is the package + first name in the compound proxy class name\n+                fallbackLookupClassName = className.substring(0, className.indexOf('$'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "561734815864a068cb6a90562d102b8ebedbedf0"}, "originalPosition": 103}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDc2MjI3", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-465476227", "createdAt": "2020-08-11T22:39:46Z", "commit": {"oid": "561734815864a068cb6a90562d102b8ebedbedf0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92f89db999e9ae8d627e3c5314a5450f8185e7f7", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/92f89db999e9ae8d627e3c5314a5450f8185e7f7", "committedDate": "2020-08-12T09:35:17Z", "message": "Simplify private lookup\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzEzMDE5", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-466313019", "createdAt": "2020-08-12T22:13:26Z", "commit": {"oid": "92f89db999e9ae8d627e3c5314a5450f8185e7f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoxMzoyNlrOG_0pyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoxMzoyNlrOG_0pyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjEzNg==", "bodyText": "contains effectively does an indexOf; no need to do indexOf again.  I'd rewrite this block something like this:\nfinal int index = className.indexOf('$');\nlookupClassName = index < 0 ? className : className.substring(0, index);", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469576136", "createdAt": "2020-08-12T22:13:26Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,75 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            String lookupClassName;\n+\n+            if (className.contains(\"$\")) {\n+                // package + first name in the compound proxy class name\n+                lookupClassName = className.substring(0, className.indexOf('$'));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92f89db999e9ae8d627e3c5314a5450f8185e7f7"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MzEzODYz", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-466313863", "createdAt": "2020-08-12T22:15:07Z", "commit": {"oid": "92f89db999e9ae8d627e3c5314a5450f8185e7f7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoxNTowN1rOG_0sgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoxNTowN1rOG_0sgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3NjgzMg==", "bodyText": "Similarly, I think this can all be simplified based on whether index < 0.  So:\nfinal Class<?> lookupClass = index < 0 ? originalClass : tryLoading(cl, lookupClassName);", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r469576832", "createdAt": "2020-08-12T22:15:07Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,75 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            String lookupClassName;\n+\n+            if (className.contains(\"$\")) {\n+                // package + first name in the compound proxy class name\n+                lookupClassName = className.substring(0, className.indexOf('$'));\n+            } else {\n+                lookupClassName = className;\n+            }\n+\n+            // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+            // first if the producer class and the lookup class name is the same, just use the existing class\n+            Class<?> lookupClass = lookupClassName.equals(originalClass.getName()) ? originalClass : null;\n+\n+            ClassLoader cl = originalClass.getClassLoader();\n+\n+            if (null == lookupClass) {\n+                // try to load the full class name\n+                lookupClass = tryLoading(cl, lookupClassName);\n+            }\n+\n+            if (null == lookupClass) {\n+                // and if that fails, just use the bean producer class\n+                lookupClass = originalClass;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "92f89db999e9ae8d627e3c5314a5450f8185e7f7"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "committedDate": "2020-08-13T10:15:59Z", "message": "Review comment.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8001e059deb5815c6960c7cdafbe6c7aff572314", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/8001e059deb5815c6960c7cdafbe6c7aff572314", "committedDate": "2020-08-13T09:08:31Z", "message": "Review comment.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/60eb5350ca857d4bb1833d95055ff3e89c21b9d5", "committedDate": "2020-08-13T10:15:59Z", "message": "Review comment.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODkwOTI5", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-466890929", "createdAt": "2020-08-13T15:47:44Z", "commit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0Nzo0NFrOHARnIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0Nzo0NFrOHARnIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MDU5Mw==", "bodyText": "tiny nit: you already stored index; just reuse it instead of className.indexOf('$') again", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r470050593", "createdAt": "2020-08-13T15:47:44Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,65 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            // proxy name must contain the $ - if it does not, we just use the originalClass as that is safe\n+            int index = className.indexOf('$');\n+\n+            Class<?> lookupClass;\n+            if (index < 0) {\n+                LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n+                                      + \" original class name: \" + originalClass.getName());\n+                lookupClass = originalClass;\n+            } else {\n+                // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+                // use the \"extracted\" lookup class name, if that fails, use the original class\n+                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODkyMDg4", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-466892088", "createdAt": "2020-08-13T15:49:01Z", "commit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0OTowMVrOHARqbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo0OTowMVrOHARqbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MTQzNw==", "bodyText": "Nit: just do return originalClass.getClassLoader().loadClass(className); no need to define a local variable.", "url": "https://github.com/oracle/helidon/pull/2241#discussion_r470051437", "createdAt": "2020-08-13T15:49:01Z", "author": {"login": "ljnelson"}, "path": "microprofile/cdi/src/main/java/io/helidon/microprofile/cdi/HelidonProxyServices.java", "diffHunk": "@@ -110,39 +133,65 @@ public boolean supportsClassDefining() {\n \n         LOGGER.finest(\"Defining class \" + className + \" original class: \" + originalClass.getName());\n \n+        MethodHandles.Lookup lookup;\n+\n         try {\n-            Module classModule = originalClass.getModule();\n-            if (!myModule.canRead(classModule)) {\n+            // lookup class name \"guessed\" from the class name of the proxy\n+            // proxy name must contain the $ - if it does not, we just use the originalClass as that is safe\n+            int index = className.indexOf('$');\n+\n+            Class<?> lookupClass;\n+            if (index < 0) {\n+                LOGGER.finest(() -> \"Attempt to define a proxy class without a $ in its name. Class name: \" + className + \",\"\n+                                      + \" original class name: \" + originalClass.getName());\n+                lookupClass = originalClass;\n+            } else {\n+                // I would like to create a private lookup in the same package as the proxied class, so let's do it\n+                // use the \"extracted\" lookup class name, if that fails, use the original class\n+                lookupClass = tryLoading(originalClass, className.substring(0, className.indexOf('$')));\n+            }\n+\n+            Module lookupClassModule = lookupClass.getModule();\n+            if (!myModule.canRead(lookupClassModule)) {\n                 // we need to read the module to be able to create a private lookup in it\n                 // it also needs to open the package we are doing the lookup in\n-                myModule.addReads(classModule);\n+                myModule.addReads(lookupClassModule);\n             }\n+\n             // next line would fail if the module does not open its package, with a very meaningful error message\n-            MethodHandles.Lookup lookup = MethodHandles.privateLookupIn(originalClass, MethodHandles.lookup());\n-            if (classBytes.length == len) {\n-                return lookup.defineClass(classBytes);\n-            } else {\n-                byte[] bytes = new byte[len];\n-                System.arraycopy(classBytes, off, bytes, 0, len);\n-                return lookup.defineClass(bytes);\n-            }\n+            lookup = MethodHandles.privateLookupIn(lookupClass, MethodHandles.lookup());\n         } catch (IllegalAccessException e) {\n             throw new RuntimeException(\"Failed to define class \" + className, e);\n         }\n+\n+        return defineClass(lookup, className, classBytes, off, len);\n     }\n \n-    private boolean samePackage(Class<?> originalClass, String className) {\n-        String origPackage = originalClass.getPackageName();\n-        String newPackage = packageName(className);\n-        return newPackage.equals(origPackage);\n+    private Class<?> tryLoading(Class<?> originalClass, String className) {\n+        try {\n+            ClassLoader cl = originalClass.getClassLoader();\n+            return cl.loadClass(className);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2ODkyNDAx", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-466892401", "createdAt": "2020-08-13T15:49:24Z", "commit": {"oid": "60eb5350ca857d4bb1833d95055ff3e89c21b9d5"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b", "committedDate": "2020-08-13T15:58:28Z", "message": "Review comment again.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2OTAyNDA2", "url": "https://github.com/oracle/helidon/pull/2241#pullrequestreview-466902406", "createdAt": "2020-08-13T16:00:55Z", "commit": {"oid": "0d6fba7f1a6a904d62607bab66d5f3a9cb95aa2b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 530, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}