{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyNzAwMDc3", "number": 1861, "title": "Service loader added to MediaContext", "bodyText": "", "createdAt": "2020-05-25T11:24:56Z", "url": "https://github.com/oracle/helidon/pull/1861", "merged": true, "mergeCommit": {"oid": "4e55096c71a4b78b65c2442705723ce05b9d57df"}, "closed": true, "closedAt": "2020-05-27T10:54:10Z", "author": {"login": "Verdent"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABckwoKYAFqTQxNzczMzY3Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABclWY3UgFqTQxOTA0NTA5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzMzNjc3", "url": "https://github.com/oracle/helidon/pull/1861#pullrequestreview-417733677", "createdAt": "2020-05-25T14:06:07Z", "commit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNjowN1rOGaCRMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQxNDowNjozMVrOGaCR-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzMyOQ==", "bodyText": "please do not use from classpath anywhere. Use from Java Service Loader", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429953329", "createdAt": "2020-05-25T14:06:07Z", "author": {"login": "tomas-langer"}, "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTk1MzUyOQ==", "bodyText": "Similar - it is not \"system loader\", it is \"Java Service Loader\"", "url": "https://github.com/oracle/helidon/pull/1861#discussion_r429953529", "createdAt": "2020-05-25T14:06:31Z", "author": {"login": "tomas-langer"}, "path": "media/common/src/main/java/io/helidon/media/common/MediaContext.java", "diffHunk": "@@ -112,105 +140,202 @@ private Builder() {\n          *     <th>description</th>\n          * </tr>\n          * <tr>\n-         *     <td>server-errors-include-stack-traces</td>\n-         *     <td>Whether stack traces should be included in the response (server only)</td>\n-         * </tr>\n-         * <tr>\n          *     <td>register-defaults</td>\n          *     <td>Whether to register default reader and writers</td>\n          * </tr>\n+         * <tr>\n+         *     <td>discover-services</td>\n+         *     <td>Whether to discover services via service loader</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>filter-services</td>\n+         *     <td>Whether to filter discovered services by service names in services section</td>\n+         * </tr>\n+         * <tr>\n+         *     <td>services</td>\n+         *     <td>Configuration section for each service. Each entry has to have \"name\" parameter.\n+         *     It is also used for filtering of loaded services.</td>\n+         * </tr>\n          * </table>\n+         *\n          * @param config a {@link Config}\n          * @return this {@link Builder}\n          */\n         public Builder config(Config config) {\n-            config.get(\"server-errors-include-stack-traces\").asBoolean().ifPresent(this::includeStackTraces);\n             config.get(\"register-defaults\").asBoolean().ifPresent(this::registerDefaults);\n+            config.get(\"discover-services\").asBoolean().ifPresent(this::discoverServices);\n+            config.get(\"filter-services\").asBoolean().ifPresent(this::filterServices);\n+            config.get(\"services\")\n+                    .asNodeList()\n+                    .ifPresent(it -> it.forEach(serviceConfig -> {\n+                        String name = serviceConfig.get(SERVICE_NAME).asString().get();\n+                        servicesConfig.merge(name,\n+                                             serviceConfig.detach().asMap().orElseGet(Map::of),\n+                                             (first, second) -> {\n+                                                 HashMap<String, String> result = new HashMap<>(first);\n+                                                 result.putAll(second);\n+                                                 return result;\n+                                             });\n+                    }));\n             return this;\n         }\n \n         @Override\n         public Builder addMediaSupport(MediaSupport mediaSupport) {\n             Objects.requireNonNull(mediaSupport);\n-            mediaSupport.register(readerContext, writerContext);\n+            mediaSupports.add(mediaSupport);\n+            return this;\n+        }\n+\n+        /**\n+         * Adds new instance of {@link MediaSupport} with specific priority.\n+         *\n+         * @param mediaSupport media support\n+         * @param priority priority\n+         * @return updated instance of the builder\n+         */\n+        public Builder addMediaSupport(MediaSupport mediaSupport, int priority) {\n+            Objects.requireNonNull(mediaSupport);\n+            services.addService((config) -> mediaSupport, priority);\n             return this;\n         }\n \n         @Override\n         public Builder addReader(MessageBodyReader<?> reader) {\n-            readerContext.registerReader(reader);\n+            builderReaders.add(reader);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamReader(MessageBodyStreamReader<?> streamReader) {\n-            readerContext.registerReader(streamReader);\n+            builderStreamReaders.add(streamReader);\n             return this;\n         }\n \n         @Override\n         public Builder addWriter(MessageBodyWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+            builderWriters.add(writer);\n             return this;\n         }\n \n         @Override\n         public Builder addStreamWriter(MessageBodyStreamWriter<?> streamWriter) {\n-            writerContext.registerWriter(streamWriter);\n+            builderStreamWriter.add(streamWriter);\n             return this;\n         }\n \n         /**\n-         * Register a new stream reader.\n-         * @param reader reader to register\n+         * Whether defaults should be included.\n+         *\n+         * @param registerDefaults register defaults\n          * @return this builder instance\n          */\n-        public Builder registerStreamReader(MessageBodyStreamReader<?> reader) {\n-            readerContext.registerReader(reader);\n+        public Builder registerDefaults(boolean registerDefaults) {\n+            this.registerDefaults = registerDefaults;\n             return this;\n         }\n \n         /**\n-         * Register a new stream writer.\n-         * @param writer writer to register\n+         * Whether stack traces should be included in response.\n+         *\n+         * This is server side setting.\n+         *\n+         * @param includeStackTraces include stack traces\n          * @return this builder instance\n          */\n-        public Builder registerStreamWriter(MessageBodyStreamWriter<?> writer) {\n-            writerContext.registerWriter(writer);\n+        public Builder includeStackTraces(boolean includeStackTraces) {\n+            servicesConfig.computeIfAbsent(DEFAULTS_NAME, k -> new HashMap<>())\n+                    .put(DEFAULTS_INCLUDE_STACK_TRACES, Boolean.toString(includeStackTraces));\n             return this;\n         }\n \n         /**\n-         * Whether defaults should be included.\n+         * Whether system loader should be used to load {@link MediaSupportProvider} from classpath.\n          *\n-         * @param registerDefaults register defaults\n+         * @param discoverServices use system loader", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2758f244d5c084313e2303fc72886ad75c458567"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3NzYwOTMw", "url": "https://github.com/oracle/helidon/pull/1861#pullrequestreview-417760930", "createdAt": "2020-05-25T14:53:41Z", "commit": {"oid": "d38a6e5d32222f7d0c0f97c1b43ef0b616b4844a"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODU4MTE4", "url": "https://github.com/oracle/helidon/pull/1861#pullrequestreview-417858118", "createdAt": "2020-05-25T19:48:55Z", "commit": {"oid": "1884134b01c9ed7597403aac238f2984b850f368"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MTg4MTk0", "url": "https://github.com/oracle/helidon/pull/1861#pullrequestreview-418188194", "createdAt": "2020-05-26T10:59:29Z", "commit": {"oid": "94ec41b5129249e5d6d068429011f8c32aa37cb9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTMyMjg1", "url": "https://github.com/oracle/helidon/pull/1861#pullrequestreview-418532285", "createdAt": "2020-05-26T17:44:02Z", "commit": {"oid": "94ec41b5129249e5d6d068429011f8c32aa37cb9"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb7cbdf38c18f355fdbd6445efb5ddef12eb829f", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/cb7cbdf38c18f355fdbd6445efb5ddef12eb829f", "committedDate": "2020-05-27T08:59:14Z", "message": "merge finished\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36ac50b6c375c6ee63840ba8876e42b9bede6483", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/36ac50b6c375c6ee63840ba8876e42b9bede6483", "committedDate": "2020-05-27T09:02:09Z", "message": "Media support now loadable via class loader\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "394c232e69abf23f8b29a951480d5c6359859341", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/394c232e69abf23f8b29a951480d5c6359859341", "committedDate": "2020-05-27T09:02:10Z", "message": "checkstyle fix\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "618624f2486d436487aa1775d115586f2b4258f3", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/618624f2486d436487aa1775d115586f2b4258f3", "committedDate": "2020-05-27T09:02:11Z", "message": "minor changes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "318d78c55f82a44f6c1c12cba87de6226361ea57", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/318d78c55f82a44f6c1c12cba87de6226361ea57", "committedDate": "2020-05-27T09:02:11Z", "message": "another javadoc fix\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34ce8ebf651115f4b603d13326d2c6d192711339", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/34ce8ebf651115f4b603d13326d2c6d192711339", "committedDate": "2020-05-27T09:02:11Z", "message": "change\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eafc9150fa1e177d108fa5657b9a57dfa7be607", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/2eafc9150fa1e177d108fa5657b9a57dfa7be607", "committedDate": "2020-05-27T09:02:12Z", "message": "method name change\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f91cb21bb2dd3ac9f9983da4fcd23193cb1d6537", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/f91cb21bb2dd3ac9f9983da4fcd23193cb1d6537", "committedDate": "2020-05-27T09:02:12Z", "message": "name reader changed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "47907f7f573d8d57df2bc16072048dc9c1c42a1c", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/47907f7f573d8d57df2bc16072048dc9c1c42a1c", "committedDate": "2020-05-27T09:02:12Z", "message": "config name updated\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "31e9ed591de6f49793ccf50d14c0f1614d52b4e9", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/31e9ed591de6f49793ccf50d14c0f1614d52b4e9", "committedDate": "2020-05-27T09:03:15Z", "message": "iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77487b41929e5285af4ec19399ca936b339dcf9d", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/77487b41929e5285af4ec19399ca936b339dcf9d", "committedDate": "2020-05-27T09:03:16Z", "message": "MessageBodyOperators iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94ec41b5129249e5d6d068429011f8c32aa37cb9", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/94ec41b5129249e5d6d068429011f8c32aa37cb9", "committedDate": "2020-05-26T08:11:06Z", "message": "MessageBodyOperators iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}, "afterCommit": {"oid": "77487b41929e5285af4ec19399ca936b339dcf9d", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/77487b41929e5285af4ec19399ca936b339dcf9d", "committedDate": "2020-05-27T09:03:16Z", "message": "MessageBodyOperators iterator revert\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edfb9a3bb5d24c8bb4ee9ec58cfc5752ded3223a", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/edfb9a3bb5d24c8bb4ee9ec58cfc5752ded3223a", "committedDate": "2020-05-27T09:26:43Z", "message": "Multipart merge\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MDQ1MDk5", "url": "https://github.com/oracle/helidon/pull/1861#pullrequestreview-419045099", "createdAt": "2020-05-27T10:06:22Z", "commit": {"oid": "edfb9a3bb5d24c8bb4ee9ec58cfc5752ded3223a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 648, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}