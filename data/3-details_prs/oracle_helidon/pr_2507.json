{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MjkzNTkw", "number": 2507, "title": "Add vetoed-bean support to metrics CDI extension", "bodyText": "Resolves #2492\nThere are two overall changes so that we honor other CDI extensions' vetoes of beans.\n\n\nPreviously, we defined metrics for annotated elements in the ProcessAnnotatedType observer. This incorrectly included beans which other extension might have vetoed.\nInstead,  now the ProcessAnnotatedType observer records the Java class for each annotated type identified by CDI as being annotated with a metrics annotation.\nLater, CDI invokes a new ProcessManagedBean observer only for beans which were not vetoed. This by itself takes care of honoring bean vetoes by other extensions.\nBut this new observer runs for every bean, whether decorated with a metrics annotation or not. We have to check each constructor and method in every bean we process to look for metrics annotations.\nThis new observer will do that processing only if the type in the ProcessManagedBean appears in the collection of metrics-annotated classes prepared by the ProcessAnnotatedType observer. This observer also maintains a collection of types that have been processes. An AfterDeploymentValidation observer method uses the collections to log (FINE) any vetoed beans that the extension decided to not process.\n\n\nA relatively recent change to MP metrics includes automatically adding (if configured) a SimpleTimer metric to every JAX-RS endpoint method. Previously, we did this by:\n\n\nUsing a ProcessAnnotatedType observer on the HTTP operation annotations (@GET, @PUT, etc.) which would store each Method that had one of the HTTP method annotations and add a synthetic annotation @SyntheticSimplyTimed to the CDI AnnotatedMethod for the method.\n\n\nUsing an AfterBeanValidation observer to go through each such saved Method and create the corresponding SimpleTimer metric.\n\n\nBut that would create metrics for methods on vetoed beans.\nWith this PR, the ProcessAnnotatedType observer:\n\nAdds the synthetic annotation to the relevant methods in the AnnotatedType, and\nRecords a map entry with key = the Java class and value = collection of Methods with a JAX-RS operation annotation.\n\nA new ProcessManagedBean observer checks the Java class of the bean against the map, and if found registers the synthetic SimpleTimer metrics for each method stored as the map entry's value.\n\n\nThe net result of these pairs of observers is that the extension efficiently creates the metrics for metrics-annotated and JAX-RS-annotated methods but only for non-vetoed beans.", "createdAt": "2020-11-05T19:35:02Z", "url": "https://github.com/oracle/helidon/pull/2507", "merged": true, "mergeCommit": {"oid": "e7dd2c1f6cd5db45cd0f41d71cecc2160f78b327"}, "closed": true, "closedAt": "2020-11-06T00:20:16Z", "author": {"login": "tjquinno"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZBbrqgH2gAyNTE2MjkzNTkwOmM1MWZmN2YwZWZiZDYzMDYyOTNjOTY0NjNhOTEzNDcxOGNjYTVmOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdZp4aYAFqTUyNDcxMzg4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c51ff7f0efbd6306293c96463a9134718cca5f93", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/c51ff7f0efbd6306293c96463a9134718cca5f93", "committedDate": "2020-11-03T23:05:29Z", "message": "Convert tests to use the new infrastructure\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3510d82e9d852c7edc939bd5a96ccfa4bab1ae41", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/3510d82e9d852c7edc939bd5a96ccfa4bab1ae41", "committedDate": "2020-11-03T23:35:39Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44a71292a320e2caa54f247ca3f2931a2691a172", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/44a71292a320e2caa54f247ca3f2931a2691a172", "committedDate": "2020-11-04T13:42:50Z", "message": "Fix scope of Helidon test JUnit5 artifact"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972d40fb18e55ec792e8e3f459271664010eb1d9", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/972d40fb18e55ec792e8e3f459271664010eb1d9", "committedDate": "2020-11-04T17:23:43Z", "message": "Use ProcessManagedBean instead of ProcessAnnotatedType to actually define metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9e069bce7bf19fa6a8612cc2330423e82c569db", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d9e069bce7bf19fa6a8612cc2330423e82c569db", "committedDate": "2020-11-05T18:46:15Z", "message": "Convert tests to use the new infrastructure\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "694d0fe0c46fb4c8da17d5a8a064ca6c7529e207", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/694d0fe0c46fb4c8da17d5a8a064ca6c7529e207", "committedDate": "2020-11-05T18:46:16Z", "message": "Remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6798546e4e869d4c3e2d65de5d8fcfccd1587b8b", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/6798546e4e869d4c3e2d65de5d8fcfccd1587b8b", "committedDate": "2020-11-05T18:46:16Z", "message": "Use ProcessManagedBean instead of ProcessAnnotatedType to actually define metrics"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b25769eda5825e7b6104e375416b1bde4a3424b", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/5b25769eda5825e7b6104e375416b1bde4a3424b", "committedDate": "2020-11-05T18:46:57Z", "message": "Concurrent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4d4c59f73189d8e44d7587cdabc9ba4d0aed462d", "committedDate": "2020-11-05T19:11:48Z", "message": "Report ignored (vetoed) classes, if any, at FINE level\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NjEyNDg3", "url": "https://github.com/oracle/helidon/pull/2507#pullrequestreview-524612487", "createdAt": "2020-11-05T19:47:44Z", "commit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo0Nzo0NFrOHuT6iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1MjozM1rOHuUEvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMjgyNw==", "bodyText": "Need to adjust this comment to match the code below it.", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518322827", "createdAt": "2020-11-05T19:47:44Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -297,61 +310,124 @@ void before(@Observes BeforeBeanDiscovery discovery) {\n         discovery.addAnnotatedType(RestEndpointMetricsInfo.class, RestEndpointMetricsInfo.class.getSimpleName());\n     }\n \n+    private void clearAnnotationInfo(@Observes AfterDeploymentValidation adv) {\n+        if (LOGGER.isLoggable(Level.FINE)) {\n+            Set<Class<?>> metricsAnnotatedClassesIgnored = new HashSet<>(metricsAnnotatedClasses);\n+            metricsAnnotatedClassesIgnored.removeAll(metricsAnnotatedClassesProcessed);\n+            if (!metricsAnnotatedClassesIgnored.isEmpty()) {\n+                LOGGER.log(Level.FINE, () ->\n+                        \"Classes originally found with metrics annotations that were not processed (probably \"\n+                                + \"because they were vetoed:\" + metricsAnnotatedClassesIgnored.toString());\n+            }\n+        }\n+        metricsAnnotatedClasses.clear();\n+        metricsAnnotatedClassesProcessed.clear();\n+        methodsWithSyntheticSimplyTimer.clear();\n+    }\n+\n     /**\n-     * Observes sites annotated with the metrics annotations.\n+     * Records Java classes with a metrics annotation somewhere.\n+     *\n+     * By recording the classes here, we let CDI optimize its invocations of this observer method. Later, when we\n+     * observe managed beans (which CDI invokes for all managed beans) where we also have to examine each method and\n+     * constructor, we can quickly eliminate from consideration any classes we have not recorded here.\n      *\n-     * @param pat annotated type instance being processed\n+     * @param pat ProcessAnnotatedType event\n      */\n-    private void registerMetrics(@Observes @WithAnnotations({Counted.class, Metered.class, Timed.class,\n-                                                                    ConcurrentGauge.class, SimplyTimed.class})\n-                                         ProcessAnnotatedType<?> pat) {\n-        // Filter out interceptors\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n-        Interceptor annot = type.getAnnotation(Interceptor.class);\n-        if (annot != null) {\n-            return;\n-        }\n-\n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + pat.getAnnotatedType().getJavaClass().getName());\n+    private void recordMetricAnnotatedClass(@Observes\n+    @WithAnnotations({Counted.class, Metered.class, Timed.class, ConcurrentGauge.class,\n+            SimplyTimed.class}) ProcessAnnotatedType<?> pat) {\n+        checkAndRecordCandidateMetricClass(pat);\n+    }\n \n-        // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n+    /**\n+     * Checks to make sure the annotated type is not abstract and is not an interceptor.\n+     *\n+     * @param pat {@code ProcessAnnotatedType} event\n+     * @return true if the annotated type should be kept for potential processing later; false otherwise\n+     */\n+    private boolean checkCandidateMetricClass(ProcessAnnotatedType<?> pat) {\n+        AnnotatedType<?> annotatedType = pat.getAnnotatedType();\n+        Class<?> clazz = annotatedType.getJavaClass();\n \n         // If abstract class, then handled by concrete subclasses", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyMzE2NQ==", "bodyText": "Strictly speaking this is not reliable as other observers can add the @Interceptor annotation programmatically later.", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518323165", "createdAt": "2020-11-05T19:48:28Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -297,61 +310,124 @@ void before(@Observes BeforeBeanDiscovery discovery) {\n         discovery.addAnnotatedType(RestEndpointMetricsInfo.class, RestEndpointMetricsInfo.class.getSimpleName());\n     }\n \n+    private void clearAnnotationInfo(@Observes AfterDeploymentValidation adv) {\n+        if (LOGGER.isLoggable(Level.FINE)) {\n+            Set<Class<?>> metricsAnnotatedClassesIgnored = new HashSet<>(metricsAnnotatedClasses);\n+            metricsAnnotatedClassesIgnored.removeAll(metricsAnnotatedClassesProcessed);\n+            if (!metricsAnnotatedClassesIgnored.isEmpty()) {\n+                LOGGER.log(Level.FINE, () ->\n+                        \"Classes originally found with metrics annotations that were not processed (probably \"\n+                                + \"because they were vetoed:\" + metricsAnnotatedClassesIgnored.toString());\n+            }\n+        }\n+        metricsAnnotatedClasses.clear();\n+        metricsAnnotatedClassesProcessed.clear();\n+        methodsWithSyntheticSimplyTimer.clear();\n+    }\n+\n     /**\n-     * Observes sites annotated with the metrics annotations.\n+     * Records Java classes with a metrics annotation somewhere.\n+     *\n+     * By recording the classes here, we let CDI optimize its invocations of this observer method. Later, when we\n+     * observe managed beans (which CDI invokes for all managed beans) where we also have to examine each method and\n+     * constructor, we can quickly eliminate from consideration any classes we have not recorded here.\n      *\n-     * @param pat annotated type instance being processed\n+     * @param pat ProcessAnnotatedType event\n      */\n-    private void registerMetrics(@Observes @WithAnnotations({Counted.class, Metered.class, Timed.class,\n-                                                                    ConcurrentGauge.class, SimplyTimed.class})\n-                                         ProcessAnnotatedType<?> pat) {\n-        // Filter out interceptors\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n-        Interceptor annot = type.getAnnotation(Interceptor.class);\n-        if (annot != null) {\n-            return;\n-        }\n-\n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + pat.getAnnotatedType().getJavaClass().getName());\n+    private void recordMetricAnnotatedClass(@Observes\n+    @WithAnnotations({Counted.class, Metered.class, Timed.class, ConcurrentGauge.class,\n+            SimplyTimed.class}) ProcessAnnotatedType<?> pat) {\n+        checkAndRecordCandidateMetricClass(pat);\n+    }\n \n-        // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n+    /**\n+     * Checks to make sure the annotated type is not abstract and is not an interceptor.\n+     *\n+     * @param pat {@code ProcessAnnotatedType} event\n+     * @return true if the annotated type should be kept for potential processing later; false otherwise\n+     */\n+    private boolean checkCandidateMetricClass(ProcessAnnotatedType<?> pat) {\n+        AnnotatedType<?> annotatedType = pat.getAnnotatedType();\n+        Class<?> clazz = annotatedType.getJavaClass();\n \n         // If abstract class, then handled by concrete subclasses\n-        if (Modifier.isAbstract(clazz.getModifiers())) {\n+        if (annotatedType.isAnnotationPresent(Interceptor.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNDIzNw==", "bodyText": "Oh, interesting; I guess Jandex takes meta-annotations into account?", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518324237", "createdAt": "2020-11-05T19:50:17Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -364,65 +440,55 @@ private void processInjectionPoints(@Observes ProcessInjectionPoint<?, ?> pip) {\n     }\n \n     /**\n-     * Records the need to add a {@code SyntheticSimplyTimed} annotation to each JAX-RS endpoint method.\n+     * Adds a {@code SyntheticSimplyTimed} annotation to each JAX-RS endpoint method.\n      *\n      * @param pat the {@code ProcessAnnotatedType} for the type containing the JAX-RS annotated methods\n      */\n     private void recordSimplyTimedForRestResources(@Observes\n-                                                   @WithAnnotations({GET.class, PUT.class, POST.class, HEAD.class, OPTIONS.class,\n-                                                                            DELETE.class, PATCH.class})\n+                                                   @WithAnnotations({HttpMethod.class})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d"}, "originalPosition": 259}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTMxNg==", "bodyText": "Better to use pmb.getBean().getScope() unless I'm missing something.", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518325316", "createdAt": "2020-11-05T19:52:20Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -643,53 +726,51 @@ private static boolean chooseRestEndpointsSetting(Config metricsConfig) {\n         return MetricType.from(clazz == null ? metric.getClass() : clazz);\n     }\n \n-    private void recordAnnotatedGaugeSite(@Observes @WithAnnotations(Gauge.class) ProcessAnnotatedType<?> pat) {\n-        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + pat.getAnnotatedType().getJavaClass());\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n+    private void recordAnnotatedGaugeSite(@Observes ProcessManagedBean<?> pmb) {\n+        AnnotatedType<?> type = pmb.getAnnotatedBeanClass();\n+        Class<?> clazz = type.getJavaClass();\n \n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + type.getJavaClass().getName());\n+        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + clazz);\n+        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + clazz.getName());\n \n         // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n-\n         // If abstract class, then handled by concrete subclasses\n         if (Modifier.isAbstract(clazz.getModifiers())) {\n             return;\n         }\n \n-        Annotation annotation = type.getAnnotation(RequestScoped.class);\n-        if (annotation != null) {\n-            errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n-            return;\n-        }\n-\n-        if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {\n-            if (ConfigProvider.getConfig().getOptionalValue(\"metrics.warn-dependent\", Boolean.class).orElse(true)) {\n-                LOGGER.warning(\"@Gauge is configured on a bean \" + clazz.getName()\n-                                       + \" that is neither ApplicationScoped nor Singleton. This is most likely a bug.\"\n-                                       + \" You may set 'metrics.warn-dependent' configuration option to 'false' to remove \"\n-                                       + \"this warning.\");\n+        // Process @Gauge methods keeping non-private declared on this class\n+        for (AnnotatedMethod method : type.getMethods()) {\n+            Method javaMethod = method.getJavaMember();\n+            if (!javaMethod.getDeclaringClass().equals(clazz)\n+                    || Modifier.isPrivate(javaMethod.getModifiers())\n+                    || !method.isAnnotationPresent(Gauge.class)) {\n+                continue;\n             }\n+            Annotation requestScopedAnnotation = type.getAnnotation(RequestScoped.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d"}, "originalPosition": 450}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTQzNg==", "bodyText": "See above", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518325436", "createdAt": "2020-11-05T19:52:33Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -643,53 +726,51 @@ private static boolean chooseRestEndpointsSetting(Config metricsConfig) {\n         return MetricType.from(clazz == null ? metric.getClass() : clazz);\n     }\n \n-    private void recordAnnotatedGaugeSite(@Observes @WithAnnotations(Gauge.class) ProcessAnnotatedType<?> pat) {\n-        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + pat.getAnnotatedType().getJavaClass());\n-        AnnotatedType<?> type = pat.getAnnotatedType();\n+    private void recordAnnotatedGaugeSite(@Observes ProcessManagedBean<?> pmb) {\n+        AnnotatedType<?> type = pmb.getAnnotatedBeanClass();\n+        Class<?> clazz = type.getJavaClass();\n \n-        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + type.getJavaClass().getName());\n+        LOGGER.log(Level.FINE, () -> \"recordAnnoatedGaugeSite for class \" + clazz);\n+        LOGGER.log(Level.FINE, () -> \"Processing annotations for \" + clazz.getName());\n \n         // Register metrics based on annotations\n-        AnnotatedTypeConfigurator<?> configurator = pat.configureAnnotatedType();\n-        Class<?> clazz = configurator.getAnnotated().getJavaClass();\n-\n         // If abstract class, then handled by concrete subclasses\n         if (Modifier.isAbstract(clazz.getModifiers())) {\n             return;\n         }\n \n-        Annotation annotation = type.getAnnotation(RequestScoped.class);\n-        if (annotation != null) {\n-            errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n-            return;\n-        }\n-\n-        if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {\n-            if (ConfigProvider.getConfig().getOptionalValue(\"metrics.warn-dependent\", Boolean.class).orElse(true)) {\n-                LOGGER.warning(\"@Gauge is configured on a bean \" + clazz.getName()\n-                                       + \" that is neither ApplicationScoped nor Singleton. This is most likely a bug.\"\n-                                       + \" You may set 'metrics.warn-dependent' configuration option to 'false' to remove \"\n-                                       + \"this warning.\");\n+        // Process @Gauge methods keeping non-private declared on this class\n+        for (AnnotatedMethod method : type.getMethods()) {\n+            Method javaMethod = method.getJavaMember();\n+            if (!javaMethod.getDeclaringClass().equals(clazz)\n+                    || Modifier.isPrivate(javaMethod.getModifiers())\n+                    || !method.isAnnotationPresent(Gauge.class)) {\n+                continue;\n             }\n+            Annotation requestScopedAnnotation = type.getAnnotation(RequestScoped.class);\n+            if (requestScopedAnnotation != null) {\n+                errors.fatal(clazz, \"Cannot configure @Gauge on a request scoped bean\");\n+                return;\n+            }\n+            if (type.getAnnotation(ApplicationScoped.class) == null && type.getAnnotation(Singleton.class) == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d4c59f73189d8e44d7587cdabc9ba4d0aed462d"}, "originalPosition": 455}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e6c27822da962c0b43bf60efe5340f6cda6891f", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/0e6c27822da962c0b43bf60efe5340f6cda6891f", "committedDate": "2020-11-05T22:05:46Z", "message": "Adjustments due to review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzEzMDY5", "url": "https://github.com/oracle/helidon/pull/2507#pullrequestreview-524713069", "createdAt": "2020-11-05T22:11:37Z", "commit": {"oid": "0e6c27822da962c0b43bf60efe5340f6cda6891f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMTozN1rOHuYroQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMjoxMTozN1rOHuYroQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQwMDkyOQ==", "bodyText": "(This is fine; when I commented on this previously, I didn't mean necessarily to remove the HttpMethod annotation and replace it with the list of options\u2014it was more just that I was surprised that a meta-annotation like that would be processed by @WithAnnotations.)", "url": "https://github.com/oracle/helidon/pull/2507#discussion_r518400929", "createdAt": "2020-11-05T22:11:37Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -445,7 +450,8 @@ private void processInjectionPoints(@Observes ProcessInjectionPoint<?, ?> pip) {\n      * @param pat the {@code ProcessAnnotatedType} for the type containing the JAX-RS annotated methods\n      */\n     private void recordSimplyTimedForRestResources(@Observes\n-                                                   @WithAnnotations({HttpMethod.class})\n+                                                   @WithAnnotations({GET.class, PUT.class, POST.class, HEAD.class, OPTIONS.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e6c27822da962c0b43bf60efe5340f6cda6891f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0NzEzODg2", "url": "https://github.com/oracle/helidon/pull/2507#pullrequestreview-524713886", "createdAt": "2020-11-05T22:13:04Z", "commit": {"oid": "0e6c27822da962c0b43bf60efe5340f6cda6891f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 361, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}