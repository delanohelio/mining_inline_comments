{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzMxMjIx", "number": 1690, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoyOTozOFrOD2jlNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDo0OVrOD2l3XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTMyNjYzOnYy", "diffSide": "RIGHT", "path": "docs-internal/subscriberinputstream.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoyOTozOFrOGMXKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoyOTozOFrOGMXKkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxNTYzNA==", "bodyText": "SubscriberInputStream", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415615634", "createdAt": "2020-04-27T08:29:38Z", "author": {"login": "danielkec"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTM0NTIxOnYy", "diffSide": "RIGHT", "path": "docs-internal/subscriberinputstream.md", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODozMzo0NFrOGMXVYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODozMzo0NFrOGMXVYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxODQwMg==", "bodyText": "onSubscribe/onNext/onComplete/onError", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415618402", "createdAt": "2020-04-27T08:33:44Z", "author": {"login": "danielkec"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NTcwMDc3OnYy", "diffSide": "RIGHT", "path": "docs-internal/subscriberinputstream.md", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDo0OVrOGMak2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxODowOTozOFrOGMw5AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTUxMw==", "bodyText": "request call to cancelled subscription is legal by the spec, it just has to be noop", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415671513", "createdAt": "2020-04-27T09:50:49Z", "author": {"login": "danielkec"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`\n+  - strictly heeding backpressure (not calling onNext until more chunks were requested)\n+  - relaxed ordering of calls to request - allows to request even after onComplete/onError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjAzNzEyMA==", "bodyText": "at the time when that statement has been created there has been certain debate over the meaning of \"during\" in a certain rule, so this condition has been spelled out.", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r416037120", "createdAt": "2020-04-27T18:09:38Z", "author": {"login": "olotenko"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`\n+  - strictly heeding backpressure (not calling onNext until more chunks were requested)\n+  - relaxed ordering of calls to request - allows to request even after onComplete/onError", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTUxMw=="}, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 649, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}