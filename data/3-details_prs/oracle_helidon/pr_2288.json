{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDczOTgwNzMz", "number": 2288, "title": "Allow cancellation of Future's wrapped in Single's and vice versa", "bodyText": "Allow cancellation of Future's wrapped in Single's and vice versa. This form of cancellations are necessary to implement FT MP. New test.\nSigned-off-by: Santiago Pericasgeertsen santiago.pericasgeertsen@oracle.com", "createdAt": "2020-08-26T15:20:13Z", "url": "https://github.com/oracle/helidon/pull/2288", "merged": true, "mergeCommit": {"oid": "d34b5a67cc2ab703b3f53ac153ca03aeaef6028a"}, "closed": true, "closedAt": "2020-08-27T12:50:58Z", "author": {"login": "spericas"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdCtZbPgH2gAyNDczOTgwNzMzOmVjNjgyY2U2M2Y5MTIwNGY1YWRiNTIxM2QwMGFlYmQ3ZDQ4NDNlOWM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCzVZmgFqTQ3NTkxODY4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ec682ce63f91204f5adb5213d00aebd7d4843e9c", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/ec682ce63f91204f5adb5213d00aebd7d4843e9c", "committedDate": "2020-08-26T15:18:35Z", "message": "Allow cancellation of Future's wrapped in Single's and vice versa.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjA0OTIx", "url": "https://github.com/oracle/helidon/pull/2288#pullrequestreview-475604921", "createdAt": "2020-08-26T15:27:25Z", "commit": {"oid": "ec682ce63f91204f5adb5213d00aebd7d4843e9c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyNzoyNlrOHHRjfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNToyNzoyNlrOHHRjfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzM4OTY5NA==", "bodyText": "Just for the clarity could there be single.onCancel(() -> cancelled.set(true)); ?", "url": "https://github.com/oracle/helidon/pull/2288#discussion_r477389694", "createdAt": "2020-08-26T15:27:26Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+/**\n+ * Tests cancellation of {@code Future} and {@code Single}.\n+ */\n+public class CancellationTest {\n+\n+    /**\n+     * Test cancellation of underlying {@code CompletableFuture} when wrapped\n+     * by a {@code Single}.\n+     */\n+    @Test\n+    public void testCompletableFutureCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        CompletableFuture<Object> future = new CompletableFuture<>();\n+        Single<Object> single = Single.create(future, true);\n+        future.whenComplete((o, t) -> {\n+            if (t instanceof CancellationException) {\n+                cancelled.set(true);\n+            }\n+        });\n+        single.cancel();        // should cancel future\n+        assertThat(cancelled.get(), is(true));\n+    }\n+\n+    /**\n+     * Test cancellation of {@code Single} after it has been converted to\n+     * a {@code CompletableFuture}.\n+     */\n+    @Test\n+    public void testSingleCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        Single<Object> single = Single.create(new CompletableFuture<>());\n+        CompletableFuture<Object> future = single.toStage().toCompletableFuture();\n+        single.whenComplete((o, t) -> {\n+            if (t instanceof CancellationException) {\n+                cancelled.set(true);\n+            }\n+        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ec682ce63f91204f5adb5213d00aebd7d4843e9c"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0539181491e71037beba00e614067774cb026d25", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/0539181491e71037beba00e614067774cb026d25", "committedDate": "2020-08-26T16:33:25Z", "message": "Use onCancel on Single for readability.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1Nzg4MjY2", "url": "https://github.com/oracle/helidon/pull/2288#pullrequestreview-475788266", "createdAt": "2020-08-26T19:18:47Z", "commit": {"oid": "0539181491e71037beba00e614067774cb026d25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxODo0OFrOHHaUwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxOToxODo0OFrOHHaUwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzUzMzM3Nw==", "bodyText": "Sorry I didn't notice first time, future.cancel(true); should be enough single.cancel(); makes the test inconclusive", "url": "https://github.com/oracle/helidon/pull/2288#discussion_r477533377", "createdAt": "2020-08-26T19:18:48Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/test/java/io/helidon/common/reactive/CancellationTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CancellationException;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.CoreMatchers.is;\n+\n+/**\n+ * Tests cancellation of {@code Future} and {@code Single}.\n+ */\n+public class CancellationTest {\n+\n+    /**\n+     * Test cancellation of underlying {@code CompletableFuture} when wrapped\n+     * by a {@code Single}.\n+     */\n+    @Test\n+    public void testCompletableFutureCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        CompletableFuture<Object> future = new CompletableFuture<>();\n+        Single<Object> single = Single.create(future, true);\n+        future.whenComplete((o, t) -> {\n+            if (t instanceof CancellationException) {\n+                cancelled.set(true);\n+            }\n+        });\n+        single.cancel();        // should cancel future\n+        assertThat(cancelled.get(), is(true));\n+    }\n+\n+    /**\n+     * Test cancellation of {@code Single} after it has been converted to\n+     * a {@code CompletableFuture}.\n+     */\n+    @Test\n+    public void testSingleCancel() {\n+        AtomicBoolean cancelled = new AtomicBoolean(false);\n+        Single<Object> single = Single.create(new CompletableFuture<>());\n+        CompletableFuture<Object> future = single.toStage().toCompletableFuture();\n+        single.onCancel(() -> cancelled.set(true));\n+        single.cancel();\n+        future.cancel(true);        // should cancel single", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0539181491e71037beba00e614067774cb026d25"}, "originalPosition": 62}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1ODA2MzE2", "url": "https://github.com/oracle/helidon/pull/2288#pullrequestreview-475806316", "createdAt": "2020-08-26T19:45:45Z", "commit": {"oid": "0539181491e71037beba00e614067774cb026d25"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e583e35768429500737ac824619c9aae4fd5ada", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/2e583e35768429500737ac824619c9aae4fd5ada", "committedDate": "2020-08-26T19:55:12Z", "message": "Removed unwanted line.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1OTE4Njg3", "url": "https://github.com/oracle/helidon/pull/2288#pullrequestreview-475918687", "createdAt": "2020-08-26T22:13:37Z", "commit": {"oid": "2e583e35768429500737ac824619c9aae4fd5ada"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 553, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}