{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY0MTUzMjI3", "number": 1314, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDozNTo0OFrODY_iHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDo0MDo1OFrODY_iwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTMzMzQzOnYy", "diffSide": "RIGHT", "path": "examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsMain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDozNTo0OFrOFfKXbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyMDowOFrOFfZj4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDAxMg==", "bodyText": "I think this is a very important feature, especially when the app will run from Kubernetes and might get an override config seeded. Probably you should feature this more prominently in other places as well and you might also change the default from a user home example to a more Kubernetes-ish one.", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368220012", "createdAt": "2020-01-18T10:35:48Z", "author": {"login": "FWiesner"}, "path": "examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsMain.java", "diffHunk": "@@ -35,13 +38,29 @@ private IdcsMain() {\n      * @throws IOException when logging configuration fails\n      */\n     public static void main(String[] args) throws IOException {\n-        LogManager.getLogManager().readConfiguration(IdcsMain.class.getResourceAsStream(\"/logging.properties\"));\n-        Server.create().start();\n+        Server.builder()\n+                .config(buildConfig())\n+                .build()\n+                .start();\n \n         System.out.println(\"Endpoints:\");\n         System.out.println(\"Login\");\n         System.out.println(\"  http://localhost:7987/rest/login\");\n         System.out.println(\"Full security with scopes and roles (see IdcsResource.java)\");\n         System.out.println(\"  http://localhost:7987/rest/scopes\");\n+        System.out.println(\"A protected reactive service (see application.yaml - security.web-server)\");\n+        System.out.println(\"  http://localhost:7987/reactive\");\n+        System.out.println(\"A protected static resource (see application.yaml - security.web-server\");\n+        System.out.println(\"  http://localhost:7987/web/resource.html\");\n+    }\n+\n+    private static Config buildConfig() {\n+        return Config.builder()\n+                .sources(\n+                        // you can use this file to override the defaults that are built-in\n+                        file(System.getProperty(\"user.home\") + \"/helidon/conf/examples.yaml\").optional(),\n+                        // in jar file (see src/main/resources/application.yaml)\n+                        classpath(\"application.yaml\"))\n+                .build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ2ODk2Mw==", "bodyText": "We do plan to update our example to use meta configuration with description of how to override.\nThis is really for our developers - so we do not include our security setup specific URLs to the source base.\nThere are examples specifically for configuration that show the capabilities.\nTo use this in a k8s with config maps, the change is simple - just replace the path in the code with the file path the config map is mounted to...", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368468963", "createdAt": "2020-01-20T10:20:08Z", "author": {"login": "tomas-langer"}, "path": "examples/microprofile/idcs/src/main/java/io/helidon/examples/microprofile/security/idcs/IdcsMain.java", "diffHunk": "@@ -35,13 +38,29 @@ private IdcsMain() {\n      * @throws IOException when logging configuration fails\n      */\n     public static void main(String[] args) throws IOException {\n-        LogManager.getLogManager().readConfiguration(IdcsMain.class.getResourceAsStream(\"/logging.properties\"));\n-        Server.create().start();\n+        Server.builder()\n+                .config(buildConfig())\n+                .build()\n+                .start();\n \n         System.out.println(\"Endpoints:\");\n         System.out.println(\"Login\");\n         System.out.println(\"  http://localhost:7987/rest/login\");\n         System.out.println(\"Full security with scopes and roles (see IdcsResource.java)\");\n         System.out.println(\"  http://localhost:7987/rest/scopes\");\n+        System.out.println(\"A protected reactive service (see application.yaml - security.web-server)\");\n+        System.out.println(\"  http://localhost:7987/reactive\");\n+        System.out.println(\"A protected static resource (see application.yaml - security.web-server\");\n+        System.out.println(\"  http://localhost:7987/web/resource.html\");\n+    }\n+\n+    private static Config buildConfig() {\n+        return Config.builder()\n+                .sources(\n+                        // you can use this file to override the defaults that are built-in\n+                        file(System.getProperty(\"user.home\") + \"/helidon/conf/examples.yaml\").optional(),\n+                        // in jar file (see src/main/resources/application.yaml)\n+                        classpath(\"application.yaml\"))\n+                .build();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDAxMg=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTMzMzgxOnYy", "diffSide": "RIGHT", "path": "examples/microprofile/idcs/src/main/resources/application.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDozNzowOFrOFfKXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDoyNDowM1rOFfZr6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDA1Nw==", "bodyText": "does the empty abac key do something? If so, please add a comment. Otherwise probably remove it", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368220057", "createdAt": "2020-01-18T10:37:08Z", "author": {"login": "FWiesner"}, "path": "examples/microprofile/idcs/src/main/resources/application.yaml", "diffHunk": "@@ -34,18 +34,27 @@ security:\n     frontend-uri: \"http://localhost:7987\"\n     proxy-host: \"if you need proxy\"\n   providers:\n-  - abac:\n-  - oidc:\n-      client-id: \"${ALIAS=security.properties.idcs-client-id}\"\n-      client-secret: \"${ALIAS=security.properties.idcs-client-secret}\"\n-      identity-uri: \"${ALIAS=security.properties.idcs-uri}\"\n-      # A prefix used for custom scopes\n-      scope-audience: \"http://localhost:7987/test-application\"\n-      proxy-host: \"${ALIAS=security.properties.proxy-host}\"\n-      frontend-uri: \"${ALIAS=security.properties.frontend-uri}\"\n-      # Retrieve roles\n-      idcs-roles: true\n+    - abac:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ2OTE5Mg==", "bodyText": "yes it does - it adds the ABAC provider to the list of security providers used", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368469192", "createdAt": "2020-01-20T10:20:34Z", "author": {"login": "tomas-langer"}, "path": "examples/microprofile/idcs/src/main/resources/application.yaml", "diffHunk": "@@ -34,18 +34,27 @@ security:\n     frontend-uri: \"http://localhost:7987\"\n     proxy-host: \"if you need proxy\"\n   providers:\n-  - abac:\n-  - oidc:\n-      client-id: \"${ALIAS=security.properties.idcs-client-id}\"\n-      client-secret: \"${ALIAS=security.properties.idcs-client-secret}\"\n-      identity-uri: \"${ALIAS=security.properties.idcs-uri}\"\n-      # A prefix used for custom scopes\n-      scope-audience: \"http://localhost:7987/test-application\"\n-      proxy-host: \"${ALIAS=security.properties.proxy-host}\"\n-      frontend-uri: \"${ALIAS=security.properties.frontend-uri}\"\n-      # Retrieve roles\n-      idcs-roles: true\n+    - abac:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDA1Nw=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3MTAxNg==", "bodyText": "I have added a comment to each of these used with OIDC/IDCS in examples", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368471016", "createdAt": "2020-01-20T10:24:03Z", "author": {"login": "tomas-langer"}, "path": "examples/microprofile/idcs/src/main/resources/application.yaml", "diffHunk": "@@ -34,18 +34,27 @@ security:\n     frontend-uri: \"http://localhost:7987\"\n     proxy-host: \"if you need proxy\"\n   providers:\n-  - abac:\n-  - oidc:\n-      client-id: \"${ALIAS=security.properties.idcs-client-id}\"\n-      client-secret: \"${ALIAS=security.properties.idcs-client-secret}\"\n-      identity-uri: \"${ALIAS=security.properties.idcs-uri}\"\n-      # A prefix used for custom scopes\n-      scope-audience: \"http://localhost:7987/test-application\"\n-      proxy-host: \"${ALIAS=security.properties.proxy-host}\"\n-      frontend-uri: \"${ALIAS=security.properties.frontend-uri}\"\n-      # Retrieve roles\n-      idcs-roles: true\n+    - abac:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDA1Nw=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTMzNDQ1OnYy", "diffSide": "RIGHT", "path": "examples/security/idcs-login/src/main/resources/application.yaml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDozOTowOFrOFfKX5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxMDo1MDoxMVrOFfab3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDEzNA==", "bodyText": "no idea whether this is defined by MicroProfile or native Helidon, but why don't you accept an array of paths here to use the same configuration multiple times?", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368220134", "createdAt": "2020-01-18T10:39:08Z", "author": {"login": "FWiesner"}, "path": "examples/security/idcs-login/src/main/resources/application.yaml", "diffHunk": "@@ -46,11 +46,13 @@ security:\n         client-id: \"${ALIAS=security.properties.idcs-client-id}\"\n         client-secret: \"${ALIAS=security.properties.idcs-client-secret}\"\n         identity-uri: \"${ALIAS=security.properties.idcs-uri}\"\n-      cache-config:\n-        cache-timeout-millis: 100000\n   web-server:\n     # protected paths on the web server - do not include paths served by Jersey, as those are protected directly\n     paths:\n-    - path: \"/rest/profile\"\n-      methods: [\"get\"]\n-      authenticate: true\n+      - path: \"/rest/profile\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NDIyMA==", "bodyText": "That is not implemented (and it is Helidon SE security integration).\nIf you feel this is useful, you can submit an enhancement issue.", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368474220", "createdAt": "2020-01-20T10:30:46Z", "author": {"login": "tomas-langer"}, "path": "examples/security/idcs-login/src/main/resources/application.yaml", "diffHunk": "@@ -46,11 +46,13 @@ security:\n         client-id: \"${ALIAS=security.properties.idcs-client-id}\"\n         client-secret: \"${ALIAS=security.properties.idcs-client-secret}\"\n         identity-uri: \"${ALIAS=security.properties.idcs-uri}\"\n-      cache-config:\n-        cache-timeout-millis: 100000\n   web-server:\n     # protected paths on the web server - do not include paths served by Jersey, as those are protected directly\n     paths:\n-    - path: \"/rest/profile\"\n-      methods: [\"get\"]\n-      authenticate: true\n+      - path: \"/rest/profile\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDEzNA=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4MzI5NQ==", "bodyText": "will do", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368483295", "createdAt": "2020-01-20T10:50:11Z", "author": {"login": "FWiesner"}, "path": "examples/security/idcs-login/src/main/resources/application.yaml", "diffHunk": "@@ -46,11 +46,13 @@ security:\n         client-id: \"${ALIAS=security.properties.idcs-client-id}\"\n         client-secret: \"${ALIAS=security.properties.idcs-client-secret}\"\n         identity-uri: \"${ALIAS=security.properties.idcs-uri}\"\n-      cache-config:\n-        cache-timeout-millis: 100000\n   web-server:\n     # protected paths on the web server - do not include paths served by Jersey, as those are protected directly\n     paths:\n-    - path: \"/rest/profile\"\n-      methods: [\"get\"]\n-      authenticate: true\n+      - path: \"/rest/profile\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDEzNA=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3NTMzNTA0OnYy", "diffSide": "RIGHT", "path": "security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQxMDo0MDo1OFrOFfKYLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQxNTowOTo1N1rOFfhUkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDIwNQ==", "bodyText": "same as on the other PR... I wonder whether there should be an orElse to warn the developer", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368220205", "createdAt": "2020-01-18T10:40:58Z", "author": {"login": "FWiesner"}, "path": "security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java", "diffHunk": "@@ -224,39 +234,53 @@ private void validateCustom(EndpointConfig epConfig, Errors.Collector collector)\n     }\n \n     private void validateConfig(EndpointConfig config, Errors.Collector collector) {\n-        config.config(\"abac\")\n-                .ifPresent(abacConfig -> abacConfig.asMap()\n-                        .ifPresent(theMap -> {\n-                            int attributes = 0;\n-                            int unsupported = 0;\n-                            List<String> unsupportedKeys = new LinkedList<>();\n-\n-                            for (String key : theMap.keySet()) {\n-                                attributes++;\n-                                if (!supportedConfigKeys.contains(key)) {\n-                                    unsupported++;\n-                                    unsupportedKeys.add(key);\n-                                }\n-                            }\n+        config.config(CONFIG_KEY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ3NTQ2Mg==", "bodyText": "I am not sure I understand - the ABAC provider does not require any configuration, so there is not much to do here.", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368475462", "createdAt": "2020-01-20T10:33:13Z", "author": {"login": "tomas-langer"}, "path": "security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java", "diffHunk": "@@ -224,39 +234,53 @@ private void validateCustom(EndpointConfig epConfig, Errors.Collector collector)\n     }\n \n     private void validateConfig(EndpointConfig config, Errors.Collector collector) {\n-        config.config(\"abac\")\n-                .ifPresent(abacConfig -> abacConfig.asMap()\n-                        .ifPresent(theMap -> {\n-                            int attributes = 0;\n-                            int unsupported = 0;\n-                            List<String> unsupportedKeys = new LinkedList<>();\n-\n-                            for (String key : theMap.keySet()) {\n-                                attributes++;\n-                                if (!supportedConfigKeys.contains(key)) {\n-                                    unsupported++;\n-                                    unsupportedKeys.add(key);\n-                                }\n-                            }\n+        config.config(CONFIG_KEY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDIwNQ=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQ4NDkyMg==", "bodyText": "well, say some developer has the same thought about the empty abac key in the application.yaml as what my reaction was. Normally an empty key - especially when you come from Spring Boot - is having the connotation of a no-op. So, if you remove the abac key it would be helpful to get at least on FINE or FINER a warning that tells you that ABAC support is turned off", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368484922", "createdAt": "2020-01-20T10:53:52Z", "author": {"login": "FWiesner"}, "path": "security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java", "diffHunk": "@@ -224,39 +234,53 @@ private void validateCustom(EndpointConfig epConfig, Errors.Collector collector)\n     }\n \n     private void validateConfig(EndpointConfig config, Errors.Collector collector) {\n-        config.config(\"abac\")\n-                .ifPresent(abacConfig -> abacConfig.asMap()\n-                        .ifPresent(theMap -> {\n-                            int attributes = 0;\n-                            int unsupported = 0;\n-                            List<String> unsupportedKeys = new LinkedList<>();\n-\n-                            for (String key : theMap.keySet()) {\n-                                attributes++;\n-                                if (!supportedConfigKeys.contains(key)) {\n-                                    unsupported++;\n-                                    unsupportedKeys.add(key);\n-                                }\n-                            }\n+        config.config(CONFIG_KEY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDIwNQ=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODUzMjYzMg==", "bodyText": "It works slightly differently.\nIf you add the abac key to the configuration, security would pick the security provider up and configure it.\nIf remove the abac key from configuration, security will never try to initialize the ABAC provider.", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368532632", "createdAt": "2020-01-20T12:54:16Z", "author": {"login": "tomas-langer"}, "path": "security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java", "diffHunk": "@@ -224,39 +234,53 @@ private void validateCustom(EndpointConfig epConfig, Errors.Collector collector)\n     }\n \n     private void validateConfig(EndpointConfig config, Errors.Collector collector) {\n-        config.config(\"abac\")\n-                .ifPresent(abacConfig -> abacConfig.asMap()\n-                        .ifPresent(theMap -> {\n-                            int attributes = 0;\n-                            int unsupported = 0;\n-                            List<String> unsupportedKeys = new LinkedList<>();\n-\n-                            for (String key : theMap.keySet()) {\n-                                attributes++;\n-                                if (!supportedConfigKeys.contains(key)) {\n-                                    unsupported++;\n-                                    unsupportedKeys.add(key);\n-                                }\n-                            }\n+        config.config(CONFIG_KEY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDIwNQ=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODU5NjExNA==", "bodyText": "yes. But many people will expect that\n   abac:\nwould be a no-op.\nWith Spring the pattern normally is\n  abac:\n    enabled: true\nwhich is more explicit", "url": "https://github.com/oracle/helidon/pull/1314#discussion_r368596114", "createdAt": "2020-01-20T15:09:57Z", "author": {"login": "FWiesner"}, "path": "security/providers/abac/src/main/java/io/helidon/security/providers/abac/AbacProvider.java", "diffHunk": "@@ -224,39 +234,53 @@ private void validateCustom(EndpointConfig epConfig, Errors.Collector collector)\n     }\n \n     private void validateConfig(EndpointConfig config, Errors.Collector collector) {\n-        config.config(\"abac\")\n-                .ifPresent(abacConfig -> abacConfig.asMap()\n-                        .ifPresent(theMap -> {\n-                            int attributes = 0;\n-                            int unsupported = 0;\n-                            List<String> unsupportedKeys = new LinkedList<>();\n-\n-                            for (String key : theMap.keySet()) {\n-                                attributes++;\n-                                if (!supportedConfigKeys.contains(key)) {\n-                                    unsupported++;\n-                                    unsupportedKeys.add(key);\n-                                }\n-                            }\n+        config.config(CONFIG_KEY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODIyMDIwNQ=="}, "originalCommit": {"oid": "a610012ed197177781791ba17d129bac91453a03"}, "originalPosition": 94}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 307, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}