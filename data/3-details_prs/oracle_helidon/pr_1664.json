{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1OTA3MzEx", "number": 1664, "title": "Multi await feature for intentional blocking", "bodyText": "There was a request for blocking feature for Multi and Single\nMulti.interval(20, TimeUnit.MILLISECONDS, Executors.newSingleThreadScheduledExecutor())\n        .limit(5)\n        .forEach(sum::addAndGet)\n        .await();\nMulti.interval(20, TimeUnit.MILLISECONDS, Executors.newSingleThreadScheduledExecutor())\n        .limit(5)\n        .reduce(Long::sum)\n        .await();\nI guess this needs some broader discussion, it kind of feels like introducing an antipattern. But the truth is other impls has similar feature and users will be expecting it.\nSigned-off-by: Daniel Kec daniel.kec@oracle.com", "createdAt": "2020-04-20T08:27:48Z", "url": "https://github.com/oracle/helidon/pull/1664", "merged": true, "mergeCommit": {"oid": "573cd6e602dd502f5b16013ebf96e4d9acc35efe"}, "closed": true, "closedAt": "2020-05-13T16:31:58Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZa8ixgFqTM5NjI0NDk3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg7fr4AFqTQxMTA5OTU5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MjQ0OTcz", "url": "https://github.com/oracle/helidon/pull/1664#pullrequestreview-396244973", "createdAt": "2020-04-20T08:31:15Z", "commit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMToxNVrOGIJNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozNDowOVrOGIJU1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjcyMA==", "bodyText": "final", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r411192720", "createdAt": "2020-04-20T08:31:15Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * CompletionStage with await functions, to achieve intentional blocking without checked exceptions.\n+ */\n+public interface MultiCompletionStage extends CompletionStage<Void> {\n+\n+    static MultiCompletableFuture createFuture() {\n+        return new MultiCompletableFuture();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @throws java.util.concurrent.CancellationException if the computation was cancelled\n+     * @throws CompletionException                        if this future completed\n+     */\n+    default void await() {\n+        this.toCompletableFuture().join();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @return the result value\n+     * @throws java.util.concurrent.CancellationException if this future was cancelled\n+     * @throws CompletionException                        if this future completed exceptionally,\n+     *                                                    was interrupted while waiting or the wait timed out\n+     */\n+    default void await(long timeout, TimeUnit unit) {\n+        try {\n+            this.toCompletableFuture().get(timeout, unit);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new CompletionException(e);\n+        }\n+    }\n+\n+    class MultiCompletableFuture extends CompletableFuture<Void> implements MultiCompletionStage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzg0Nw==", "bodyText": "I'd definitely add cancellation support to this. AutoCloseable perhaps.", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r411193847", "createdAt": "2020-04-20T08:33:04Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -843,9 +843,13 @@\n      *\n      * @param consumer consumer to be invoked for each item\n      */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+    default MultiCompletionStage forEach(Consumer<? super T> consumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NDU4MQ==", "bodyText": "I'd unwrap ExecutionException here.", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r411194581", "createdAt": "2020-04-20T08:34:09Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * CompletionStage with await functions, to achieve intentional blocking without checked exceptions.\n+ */\n+public interface MultiCompletionStage extends CompletionStage<Void> {\n+\n+    /**\n+     * Create new MultiCompletableFuture.\n+     *\n+     * @return MultiCompletableFuture\n+     */\n+    static MultiCompletableFuture createFuture() {\n+        return new MultiCompletableFuture();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @throws java.util.concurrent.CancellationException if the computation was cancelled\n+     * @throws CompletionException                        if this future completed\n+     */\n+    default void await() {\n+        this.toCompletableFuture().join();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.util.concurrent.CancellationException if this future was cancelled\n+     * @throws CompletionException                        if this future completed exceptionally,\n+     *                                                    was interrupted while waiting or the wait timed out\n+     */\n+    default void await(long timeout, TimeUnit unit) {\n+        try {\n+            this.toCompletableFuture().get(timeout, unit);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new CompletionException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aaa575eb8a569e0b59cf3d06e5e590cf7477a"}, "originalPosition": 64}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ec606e419dbb3221410965960bb9f203ad790192", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/ec606e419dbb3221410965960bb9f203ad790192", "committedDate": "2020-04-24T16:20:32Z", "message": "Single implementing CompletionStage\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "2b41f5c414b3aae906531ed6027fa138cc50208b", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/2b41f5c414b3aae906531ed6027fa138cc50208b", "committedDate": "2020-04-24T16:26:40Z", "message": "Single implementing CompletionStage\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb8e7d5f69802a9238cb87139db449327b0b8125", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/cb8e7d5f69802a9238cb87139db449327b0b8125", "committedDate": "2020-04-24T16:26:40Z", "message": "Multi await feature for intentional blocking\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5db808e37034a375370c9ebfdfeba5ddd60facc7", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/5db808e37034a375370c9ebfdfeba5ddd60facc7", "committedDate": "2020-04-24T16:26:40Z", "message": "Auto-closeable forEach\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b41f5c414b3aae906531ed6027fa138cc50208b", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/2b41f5c414b3aae906531ed6027fa138cc50208b", "committedDate": "2020-04-24T16:26:40Z", "message": "Single implementing CompletionStage\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/82f71b081961dac5101fd975b0cf15f2c0f3b5cd", "committedDate": "2020-05-05T20:10:43Z", "message": "Remove obsolete MultiCompletionStage\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjA1MDg2", "url": "https://github.com/oracle/helidon/pull/1664#pullrequestreview-406205086", "createdAt": "2020-05-05T22:41:55Z", "commit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MTo1NVrOGQ-NIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MjoyOFrOGQ-OEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTU2OA==", "bodyText": "Wrong javadoc for return type", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r420449568", "createdAt": "2020-05-05T22:41:55Z", "author": {"login": "tomas-langer"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -842,10 +855,23 @@\n      * Terminal stage, invokes provided consumer for every item in the stream.\n      *\n      * @param consumer consumer to be invoked for each item\n-     */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+     * @return MultiCompletionStage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgxMA==", "bodyText": "Also the type is clearly visible from Javadoc already, this should describe behavior, not type", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r420449810", "createdAt": "2020-05-05T22:42:28Z", "author": {"login": "tomas-langer"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -842,10 +855,23 @@\n      * Terminal stage, invokes provided consumer for every item in the stream.\n      *\n      * @param consumer consumer to be invoked for each item\n-     */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+     * @return MultiCompletionStage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTU2OA=="}, "originalCommit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjA5ODAx", "url": "https://github.com/oracle/helidon/pull/1664#pullrequestreview-406209801", "createdAt": "2020-05-05T22:53:11Z", "commit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bc3dce720b1ada9b97182a494a27441ba12214b", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/4bc3dce720b1ada9b97182a494a27441ba12214b", "committedDate": "2020-05-06T08:21:11Z", "message": "Review issues 1\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c70d0d022af05ddb8bff2ffffc6d92112028620", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/6c70d0d022af05ddb8bff2ffffc6d92112028620", "committedDate": "2020-05-06T08:46:21Z", "message": "Review issues 2\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13446eff5504c64e5f6471c1dce40946c8ff3c16", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/13446eff5504c64e5f6471c1dce40946c8ff3c16", "committedDate": "2020-05-06T14:08:05Z", "message": "Review issues 3\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3Mzk1Njk0", "url": "https://github.com/oracle/helidon/pull/1664#pullrequestreview-407395694", "createdAt": "2020-05-07T11:50:04Z", "commit": {"oid": "13446eff5504c64e5f6471c1dce40946c8ff3c16"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "13a1b6ad905a455ff146445557e015e4948478d9", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/13a1b6ad905a455ff146445557e015e4948478d9", "committedDate": "2020-05-07T13:21:22Z", "message": "Make the chain of CompletionStage methods preserve await"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbd9cfc73b472956b5a5f7966701aebe50816b45", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/bbd9cfc73b472956b5a5f7966701aebe50816b45", "committedDate": "2020-05-08T07:01:06Z", "message": "Checkstyle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a8a45c867346ff70f4b6d7f9131cc306ca3f083", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/3a8a45c867346ff70f4b6d7f9131cc306ca3f083", "committedDate": "2020-05-11T15:30:37Z", "message": "Hamcrestination"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMjg0NjE1", "url": "https://github.com/oracle/helidon/pull/1664#pullrequestreview-410284615", "createdAt": "2020-05-12T17:52:16Z", "commit": {"oid": "3a8a45c867346ff70f4b6d7f9131cc306ca3f083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDExMDk5NTk3", "url": "https://github.com/oracle/helidon/pull/1664#pullrequestreview-411099597", "createdAt": "2020-05-13T16:30:40Z", "commit": {"oid": "3a8a45c867346ff70f4b6d7f9131cc306ca3f083"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 730, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}