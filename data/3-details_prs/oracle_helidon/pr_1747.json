{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NDMzMDU0", "number": 1747, "title": "Cors MP example", "bodyText": "Resolves #1726", "createdAt": "2020-05-07T03:00:39Z", "url": "https://github.com/oracle/helidon/pull/1747", "merged": true, "mergeCommit": {"oid": "3f20d05b94c1877757652f1ad8bd2f9f490d21fa"}, "closed": true, "closedAt": "2020-05-07T18:26:44Z", "author": {"login": "tjquinno"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcet6h0AH2gAyNDE0NDMzMDU0OjEzNTVlZmVlMDUxN2QyYjExY2VhZDRhNjI1ZDBlZTJhMjYwZDc2N2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABce_99FAFqTQwNzY0NTE4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1355efee0517d2b11cead4a625d0ee2a260d767c", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1355efee0517d2b11cead4a625d0ee2a260d767c", "committedDate": "2020-05-06T19:33:28Z", "message": "Initial CORS MP example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbc41ec0c6ed2ca02ba12d08df290311d14e3787", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/dbc41ec0c6ed2ca02ba12d08df290311d14e3787", "committedDate": "2020-05-06T20:50:48Z", "message": "Updates and README.md"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba1c6ee078dd48ef3e0421f1791ddae2560d4c3", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/8ba1c6ee078dd48ef3e0421f1791ddae2560d4c3", "committedDate": "2020-05-07T02:46:45Z", "message": "Concurrent updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eada0b5b6876dac416d2de67d4b6cb533910381", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/7eada0b5b6876dac416d2de67d4b6cb533910381", "committedDate": "2020-05-07T02:48:13Z", "message": "concurrent updates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cba86a35914034ee09ccb4c4f96207b2716ca686", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/cba86a35914034ee09ccb4c4f96207b2716ca686", "committedDate": "2020-05-07T02:51:21Z", "message": "Add logging (commented)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "beeca7db7f5a8c47a5dfe6787bbb0230fc81cce2", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/beeca7db7f5a8c47a5dfe6787bbb0230fc81cce2", "committedDate": "2020-05-07T02:57:46Z", "message": "Remove some stray annotations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MzkxMzk3", "url": "https://github.com/oracle/helidon/pull/1747#pullrequestreview-407391397", "createdAt": "2020-05-07T11:43:09Z", "commit": {"oid": "beeca7db7f5a8c47a5dfe6787bbb0230fc81cce2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo0MzowOVrOGR6rVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMTo0NTo0OVrOGR6wfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MDM0MQ==", "bodyText": "Please do not add these suppress warnings.\nIf you use Idea, you can suppress warnings for methods/classes annotated with a specific annotation (such as GET, PUT etc.), so this is not marked as a problem. I hope other IDEs have similar way of getting around it.\nSuppress warnings in source code should be used for compiler warnings (such as generics) and warnings that are significant (e.g. the warning is sound, but we have a good reason to ignore it).\nThis case is neither", "url": "https://github.com/oracle/helidon/pull/1747#discussion_r421440341", "createdAt": "2020-05-07T11:43:09Z", "author": {"login": "tomas-langer"}, "path": "examples/microprofile/cors/src/main/java/io/helidon/microprofile/examples/cors/GreetResource.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.examples.cors;\n+\n+import java.util.Collections;\n+\n+import javax.enterprise.context.RequestScoped;\n+import javax.inject.Inject;\n+import javax.json.Json;\n+import javax.json.JsonBuilderFactory;\n+import javax.json.JsonObject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.HttpMethod;\n+import javax.ws.rs.OPTIONS;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import io.helidon.microprofile.cors.CrossOrigin;\n+\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.RequestBody;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+\n+/**\n+ * A simple JAX-RS resource to greet you with CORS support.\n+ */\n+@Path(\"/greet\")\n+@RequestScoped\n+public class GreetResource {\n+\n+    private static final JsonBuilderFactory JSON = Json.createBuilderFactory(Collections.emptyMap());\n+\n+    /**\n+     * The greeting message provider.\n+     */\n+    private final GreetingProvider greetingProvider;\n+\n+    /**\n+     * Using constructor injection to get a configuration property.\n+     * By default this gets the value from META-INF/microprofile-config\n+     *\n+     * @param greetingConfig the configured greeting message\n+     */\n+    @Inject\n+    public GreetResource(GreetingProvider greetingConfig) {\n+        this.greetingProvider = greetingConfig;\n+    }\n+\n+    /**\n+     * Return a worldly greeting message.\n+     *\n+     * @return {@link JsonObject}\n+     */\n+    @SuppressWarnings(\"checkstyle:designforextension\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeca7db7f5a8c47a5dfe6787bbb0230fc81cce2"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MDY4NA==", "bodyText": "The copyright is wrong.", "url": "https://github.com/oracle/helidon/pull/1747#discussion_r421440684", "createdAt": "2020-05-07T11:43:54Z", "author": {"login": "tomas-langer"}, "path": "examples/microprofile/cors/src/main/resources/META-INF/beans.xml", "diffHunk": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2018 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeca7db7f5a8c47a5dfe6787bbb0230fc81cce2"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQ0MTY2Mw==", "bodyText": "Please use Hamcrest assertions.\nAll Helidon tests should be written using Hamcrest (there are a few exceptions such as fail and assertAll) - see dev guidelines.\nThis should be\nassertThat(\"HTTP response1\", r.status().code(), is(200));\nThis is an overall problem in all the tests.", "url": "https://github.com/oracle/helidon/pull/1747#discussion_r421441663", "createdAt": "2020-05-07T11:45:49Z", "author": {"login": "tomas-langer"}, "path": "examples/microprofile/cors/src/test/java/io/helidon/microprofile/examples/cors/TestCORS.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.microprofile.examples.cors;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.concurrent.ExecutionException;\n+\n+import javax.json.Json;\n+import javax.json.JsonBuilderFactory;\n+import javax.json.JsonObject;\n+import javax.json.JsonObjectBuilder;\n+\n+import io.helidon.common.http.Headers;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.config.Config;\n+import io.helidon.media.common.MediaSupport;\n+import io.helidon.media.jsonp.common.JsonProcessing;\n+import io.helidon.microprofile.server.Server;\n+import io.helidon.webclient.WebClient;\n+import io.helidon.webclient.WebClientRequestBuilder;\n+import io.helidon.webclient.WebClientResponse;\n+import io.helidon.webserver.cors.CrossOriginConfig;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.MethodOrderer;\n+import org.junit.jupiter.api.Order;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestMethodOrder;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+@TestMethodOrder(MethodOrderer.OrderAnnotation.class)\n+public class TestCORS {\n+\n+    private static final String JSON_MESSAGE_RESPONSE_LABEL = \"message\";\n+    private static final String JSON_NEW_GREETING_LABEL = \"greeting\";\n+\n+    private static final JsonBuilderFactory JSON_BF = Json.createBuilderFactory(Collections.emptyMap());\n+    private static final JsonProcessing JSON_PROCESSING = JsonProcessing.create();\n+\n+\n+    private static WebClient client;\n+    private static Server server;\n+\n+    @BeforeAll\n+    static void init() {\n+        Config serverConfig = Config.create().get(\"server\");\n+        Server.Builder serverBuilder = Server.builder();\n+        serverConfig.ifExists(serverBuilder::config);\n+        server = serverBuilder\n+                .port(-1) // override the port for testing\n+                .build()\n+            .start();\n+        client = WebClient.builder()\n+                    .baseUri(\"http://localhost:\" + server.port())\n+                    .mediaSupport(MediaSupport.builder()\n+                        .registerDefaults()\n+                        .registerReader(JSON_PROCESSING.newReader())\n+                        .registerWriter(JSON_PROCESSING.newWriter())\n+                        .build())\n+                    .build();\n+    }\n+\n+    @AfterAll\n+    static void cleanup() {\n+        if (server != null) {\n+            server.stop();\n+        }\n+    }\n+\n+    @Order(1) // Make sure this runs before the greeting message changes so responses are deterministic.\n+    @Test\n+    public void testHelloWorld() throws Exception {\n+\n+        WebClientResponse r = getResponse(\"/greet\");\n+\n+        assertEquals(200, r.status().code(), \"HTTP response1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "beeca7db7f5a8c47a5dfe6787bbb0230fc81cce2"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11c942416f153e7fb2246c7840463b27acf4e5a5", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/11c942416f153e7fb2246c7840463b27acf4e5a5", "committedDate": "2020-05-07T12:39:01Z", "message": "Review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NjQ1MTgw", "url": "https://github.com/oracle/helidon/pull/1747#pullrequestreview-407645180", "createdAt": "2020-05-07T16:35:30Z", "commit": {"oid": "11c942416f153e7fb2246c7840463b27acf4e5a5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 765, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}