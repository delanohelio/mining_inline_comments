{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4NzMxMjIx", "number": 1690, "title": "New implementation of PublisherInputStream that improves performance and fixes race conditions", "bodyText": "New implementation of PublisherInputStream, now renamed to DataChunkInputStream. This new implementation fixes a couple of important problems:\n\nIt implements the ability to read into byte arrays, not just one byte at a time for better performance and,\nIt changes the implementation to avoid a race condition when accessing the data chunks held in CompletableFuture's. The race condition resulted in certain tests to hang if a thread raced and updated the value of the old processed variable.\n\nThere is also a new internal document docs-internal/datachunkinputstream.md that describes the new implementation. Credit to Oleksandr Otenko.\nSigned-off-by: Santiago Pericasgeertsen santiago.pericasgeertsen@oracle.com", "createdAt": "2020-04-24T19:40:24Z", "url": "https://github.com/oracle/helidon/pull/1690", "merged": true, "mergeCommit": {"oid": "60abc974f3534846b51bae8a28d920ea3117363c"}, "closed": true, "closedAt": "2020-04-27T18:16:06Z", "author": {"login": "spericas"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABca2vixgH2gAyNDA4NzMxMjIxOjIwYTRiZmYzZWI5ZWM4MzE3YWE1MmM1OWFiYjBjZGRhN2FlZWFlZGQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbzSXDgFqTQwMTIwMDI5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd", "committedDate": "2020-04-24T19:34:55Z", "message": "New implementation of PublisherInputStream, now renamed to SubscriberInputStream as it really implements a subscriber not a publisher. This new implementation fixes a couple of important problems: (1) It implements the ability to read into byte arrays, not just one byte a time for better performance and (2) It changes the implementation to avoid a race condition when accessing the data chunks held in CompletableFuture's. The race condition resulted in certain tests to hang if a thread raced and updated the value of the old 'processed' variable.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8766804dabccf9883c26736e0e45f0b8ee4f2798", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/8766804dabccf9883c26736e0e45f0b8ee4f2798", "committedDate": "2020-04-27T14:26:00Z", "message": "Created inner class to implement subscriber and renamed class to prevent confusion with other public APIs. Also renamed and re-formatted internal document describing implementation.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15c6069e09a12546dc276db2bb185ec5877f41c8", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/15c6069e09a12546dc276db2bb185ec5877f41c8", "committedDate": "2020-04-27T15:36:54Z", "message": "Fixed copyright year.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzM0MzM1", "url": "https://github.com/oracle/helidon/pull/1690#pullrequestreview-400734335", "createdAt": "2020-04-27T08:29:38Z", "commit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwODoyOTozOFrOGMXKkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwOTo1MDo0OVrOGMak2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxNTYzNA==", "bodyText": "SubscriberInputStream", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415615634", "createdAt": "2020-04-27T08:29:38Z", "author": {"login": "danielkec"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTYxODQwMg==", "bodyText": "onSubscribe/onNext/onComplete/onError", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415618402", "createdAt": "2020-04-27T08:33:44Z", "author": {"login": "danielkec"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTY3MTUxMw==", "bodyText": "request call to cancelled subscription is legal by the spec, it just has to be noop", "url": "https://github.com/oracle/helidon/pull/1690#discussion_r415671513", "createdAt": "2020-04-27T09:50:49Z", "author": {"login": "danielkec"}, "path": "docs-internal/subscriberinputstream.md", "diffHunk": "@@ -0,0 +1,89 @@\n+# io.helidon.media.common.SubscriberInputStream\n+\n+This document provides additional details about the implementation of `PublisherInputStream`.\n+\n+## Implementation\n+\n+The input stream implementation is not thread-safe: concurrent accesses should not be \n+allowed, and even invocations of `read()` should be synchronized by out-of-band means for \n+any stream state updates to be visible across threads.\n+ \n+The following assumptions are made about the operation of the stream:\n+ \n+- `Subscription.request` is invoked only after one chunk has been consumed\n+- the number of chunks requested is always 1\n+- Publisher fully conforms to the Flow.Publisher in the reactive-streams specification with respect to:\n+  - total order of `onNext`/`onComplete`/`onError`\n+  - strictly heeding backpressure (not calling onNext until more chunks were requested)\n+  - relaxed ordering of calls to request - allows to request even after onComplete/onError", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20a4bff3eb9ec8317aa52c59abb0cdda7aeeaedd"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMjAwMjk3", "url": "https://github.com/oracle/helidon/pull/1690#pullrequestreview-401200297", "createdAt": "2020-04-27T18:07:15Z", "commit": {"oid": "15c6069e09a12546dc276db2bb185ec5877f41c8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 736, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}