{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MjQzOTIx", "number": 1916, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNDozNFrOEBvytw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNDozNFrOEBvytw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY3MDYzOnYy", "diffSide": "RIGHT", "path": "webserver/webserver/src/main/java/io/helidon/webserver/WebTracingConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNDozNFrOGdx2VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyODowMFrOGd0aEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODYxMg==", "bodyText": "In case there is no transition of shouldTrace back to true we can save few ops by\nif (shouldTrace && checkedIfShouldTrace.compareAndSet(false, true)) {", "url": "https://github.com/oracle/helidon/pull/1916#discussion_r433878612", "createdAt": "2020-06-02T13:34:34Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/WebTracingConfig.java", "diffHunk": "@@ -224,13 +226,24 @@ public void accept(ServerRequest req, ServerResponse res) {\n \n     static final class RequestSpanHandler implements Handler {\n         private static final String TRACING_SPAN_HTTP_REQUEST = \"HTTP Request\";\n+        private final AtomicBoolean checkedIfShouldTrace = new AtomicBoolean();\n+        private volatile boolean shouldTrace = true;\n \n         RequestSpanHandler() {\n         }\n \n         @Override\n         public void accept(ServerRequest req, ServerResponse res) {\n-            doAccept(req, res);\n+            if (checkedIfShouldTrace.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "324240b8ad7bc9da4dfe792eeda7f84654968d59"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MTQ5OA==", "bodyText": "But its almost un-measurable", "url": "https://github.com/oracle/helidon/pull/1916#discussion_r433881498", "createdAt": "2020-06-02T13:38:35Z", "author": {"login": "danielkec"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/WebTracingConfig.java", "diffHunk": "@@ -224,13 +226,24 @@ public void accept(ServerRequest req, ServerResponse res) {\n \n     static final class RequestSpanHandler implements Handler {\n         private static final String TRACING_SPAN_HTTP_REQUEST = \"HTTP Request\";\n+        private final AtomicBoolean checkedIfShouldTrace = new AtomicBoolean();\n+        private volatile boolean shouldTrace = true;\n \n         RequestSpanHandler() {\n         }\n \n         @Override\n         public void accept(ServerRequest req, ServerResponse res) {\n-            doAccept(req, res);\n+            if (checkedIfShouldTrace.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODYxMg=="}, "originalCommit": {"oid": "324240b8ad7bc9da4dfe792eeda7f84654968d59"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyMDUzMQ==", "bodyText": "Fixed", "url": "https://github.com/oracle/helidon/pull/1916#discussion_r433920531", "createdAt": "2020-06-02T14:28:00Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/WebTracingConfig.java", "diffHunk": "@@ -224,13 +226,24 @@ public void accept(ServerRequest req, ServerResponse res) {\n \n     static final class RequestSpanHandler implements Handler {\n         private static final String TRACING_SPAN_HTTP_REQUEST = \"HTTP Request\";\n+        private final AtomicBoolean checkedIfShouldTrace = new AtomicBoolean();\n+        private volatile boolean shouldTrace = true;\n \n         RequestSpanHandler() {\n         }\n \n         @Override\n         public void accept(ServerRequest req, ServerResponse res) {\n-            doAccept(req, res);\n+            if (checkedIfShouldTrace.compareAndSet(false, true)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODYxMg=="}, "originalCommit": {"oid": "324240b8ad7bc9da4dfe792eeda7f84654968d59"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 592, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}