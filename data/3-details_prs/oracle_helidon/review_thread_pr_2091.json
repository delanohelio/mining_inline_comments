{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjMxNzY2", "number": 2091, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1Njo1N1rOEIk6yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoxMTo1N1rOEIqGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI4OTM5OnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1Njo1N1rOGon68Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowODoyMlrOGov7qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ==", "bodyText": "Consider replacing with just:\nIterator<ConfigSource> iterator = mpConfig.getConfigSources().iterator();\nConfigSource first = iterator.hasNext() ? iterator.next() : null;\nif (!iterator.hasNext() && first instanceof MpHelidonConfigSource) {\n   return ((MpHelidonConfigSource) first).unwrap();\n}\n\nLess code and fewer object allocations.  (Obviously check my syntax as I haven't proofed it but you should get the idea.)", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445250289", "createdAt": "2020-06-25T00:56:57Z", "author": {"login": "ljnelson"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java", "diffHunk": "@@ -40,12 +44,32 @@ private MpConfig() {\n      * @param mpConfig MP Config instance\n      * @return a new Helidon config using only the mpConfig as its config source\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n         if (mpConfig instanceof io.helidon.config.Config) {\n             return (io.helidon.config.Config) mpConfig;\n         }\n \n+        // If the mpConfig is based on an SE config (such as when we use meta configuration)\n+        // we must reuse that se config instance\n+        Iterable<ConfigSource> configSources = mpConfig.getConfigSources();\n+        List<ConfigSource> allSources = new LinkedList<>();\n+        for (ConfigSource source : configSources) {\n+            allSources.add(source);\n+            if (allSources.size() > 1) {\n+                // we only care about first or first two\n+                break;\n+            }\n+        }\n+\n+        if (allSources.size() == 1) {\n+            ConfigSource first = allSources.get(0);\n+            if (first instanceof MpHelidonConfigSource) {\n+                // we only have Helidon SE config as a source - let's just use it\n+                return ((MpHelidonConfigSource) first).unwrap();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM2NjU4MA==", "bodyText": "Can be even shorter\n    public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n\n        if (mpConfig instanceof io.helidon.config.Config) {\n            return (io.helidon.config.Config) mpConfig;\n        }\n\n        return StreamSupport.stream(config.getConfigSources().spliterator(), false)\n                .filter(MpHelidonConfigSource.class::isInstance)\n                .findFirst()\n                .map(MpHelidonConfigSource.class::cast)\n                .map(MpHelidonConfigSource::unwrap)\n                // we use Helidon SE config to handle object mapping (and possible other mappers on classpath)\n                .orElseGet(() -> new SeConfig(io.helidon.config.Config.builder()\n                        .sources(ConfigSources.empty())\n                        .overrides(OverrideSources.empty())\n                        .disableEnvironmentVariablesSource()\n                        .disableSystemPropertiesSource()\n                        .disableParserServices()\n                        .disableFilterServices()\n                        .disableCaching()\n                        .disableValueResolving()\n                        .changesExecutor(command -> {\n                        })\n                        .build(), mpConfig));\n    }", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445366580", "createdAt": "2020-06-25T07:41:39Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java", "diffHunk": "@@ -40,12 +44,32 @@ private MpConfig() {\n      * @param mpConfig MP Config instance\n      * @return a new Helidon config using only the mpConfig as its config source\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n         if (mpConfig instanceof io.helidon.config.Config) {\n             return (io.helidon.config.Config) mpConfig;\n         }\n \n+        // If the mpConfig is based on an SE config (such as when we use meta configuration)\n+        // we must reuse that se config instance\n+        Iterable<ConfigSource> configSources = mpConfig.getConfigSources();\n+        List<ConfigSource> allSources = new LinkedList<>();\n+        for (ConfigSource source : configSources) {\n+            allSources.add(source);\n+            if (allSources.size() > 1) {\n+                // we only care about first or first two\n+                break;\n+            }\n+        }\n+\n+        if (allSources.size() == 1) {\n+            ConfigSource first = allSources.get(0);\n+            if (first instanceof MpHelidonConfigSource) {\n+                // we only have Helidon SE config as a source - let's just use it\n+                return ((MpHelidonConfigSource) first).unwrap();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MTU0Nw==", "bodyText": "Fixed", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445381547", "createdAt": "2020-06-25T08:08:22Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java", "diffHunk": "@@ -40,12 +44,32 @@ private MpConfig() {\n      * @param mpConfig MP Config instance\n      * @return a new Helidon config using only the mpConfig as its config source\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n         if (mpConfig instanceof io.helidon.config.Config) {\n             return (io.helidon.config.Config) mpConfig;\n         }\n \n+        // If the mpConfig is based on an SE config (such as when we use meta configuration)\n+        // we must reuse that se config instance\n+        Iterable<ConfigSource> configSources = mpConfig.getConfigSources();\n+        List<ConfigSource> allSources = new LinkedList<>();\n+        for (ConfigSource source : configSources) {\n+            allSources.add(source);\n+            if (allSources.size() > 1) {\n+                // we only care about first or first two\n+                break;\n+            }\n+        }\n+\n+        if (allSources.size() == 1) {\n+            ConfigSource first = allSources.get(0);\n+            if (first instanceof MpHelidonConfigSource) {\n+                // we only have Helidon SE config as a source - let's just use it\n+                return ((MpHelidonConfigSource) first).unwrap();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI5MzczOnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1OTo0NlrOGon9vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNjo0MDoxNFrOGotSUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTAwNg==", "bodyText": "Just checking (not familiar with the complexities of Helidon Config): is this truly supposed to be a string, \"0\"?", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445251006", "createdAt": "2020-06-25T00:59:46Z", "author": {"login": "ljnelson"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMzODE5NA==", "bodyText": "Yes - if there is an array in configuration, it uses index. I am just checking that there is a subkey with the first index.\nlist.0=first\nlist.1=second\nobjectlist.0.name=first\nobjectlist.0.value=first value\nobjectlist.1.name=second\nobjectlist.1.value=second value", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445338194", "createdAt": "2020-06-25T06:40:14Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTAwNg=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NDI5NTk4OnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMTowMToyMFrOGon_KA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowODo0NFrOGov8cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA==", "bodyText": "Do you need equals and hashCode overrides for these ConfigValue implementations?  Or no?", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445251368", "createdAt": "2020-06-25T01:01:20Z", "author": {"login": "ljnelson"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config.mp;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigMappingException;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.config.MissingValueException;\n+\n+class SeConfigValue<T> implements ConfigValue<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM0MTgzNg==", "bodyText": "Yes...", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445341836", "createdAt": "2020-06-25T06:49:11Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config.mp;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigMappingException;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.config.MissingValueException;\n+\n+class SeConfigValue<T> implements ConfigValue<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MTc0NQ==", "bodyText": "Fixed", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445381745", "createdAt": "2020-06-25T08:08:44Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config.mp;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigMappingException;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.config.MissingValueException;\n+\n+class SeConfigValue<T> implements ConfigValue<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTExNzUyOnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNTo1OVrOGov2mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxNjoxNToyMVrOGpB-UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ==", "bodyText": "Could be done without recursion, but not sure if its nicer:\n    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n        if (type() == Type.MISSING) {\n            return Stream.of();\n        }\n        return config.asNodeList()\n                .map(list -> list.stream()\n                        .filter(predicate)\n                        .flatMap(node -> node.type().isLeaf()\n                                ? Stream.of(node)\n                                : node.asNodeList()\n                                      .orElseThrow(MissingValueException.createSupplier(key()))\n                                      .stream()\n                                      .filter(predicate)\n                        ))\n                .orElseThrow(MissingValueException.createSupplier(key()));", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445380249", "createdAt": "2020-06-25T08:05:59Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -265,6 +275,27 @@ public String toString() {\n         return type() + \" \" + stringKey + \" = \" + currentValue().orElse(null);\n     }\n \n+    @Override\n+    public ConfigMapper mapper() {\n+        return mapper.mapper();\n+    }\n+\n+    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n+        if (type() == Type.MISSING) {\n+            return Stream.of();\n+        }\n+        if (config.type().isLeaf()) {\n+            return Stream.of(config);\n+        } else {\n+            return config.asNodeList()\n+                    .map(list -> list.stream()\n+                            .filter(predicate)\n+                            .map(node -> traverseSubNodes(node, predicate))\n+                            .reduce(Stream.of(config), Stream::concat))\n+                    .orElseThrow(MissingValueException.createSupplier(key()));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MTEyOQ==", "bodyText": "aa its not, missing type check needs to be even in the flatMap", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445381129", "createdAt": "2020-06-25T08:07:37Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -265,6 +275,27 @@ public String toString() {\n         return type() + \" \" + stringKey + \" = \" + currentValue().orElse(null);\n     }\n \n+    @Override\n+    public ConfigMapper mapper() {\n+        return mapper.mapper();\n+    }\n+\n+    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n+        if (type() == Type.MISSING) {\n+            return Stream.of();\n+        }\n+        if (config.type().isLeaf()) {\n+            return Stream.of(config);\n+        } else {\n+            return config.asNodeList()\n+                    .map(list -> list.stream()\n+                            .filter(predicate)\n+                            .map(node -> traverseSubNodes(node, predicate))\n+                            .reduce(Stream.of(config), Stream::concat))\n+                    .orElseThrow(MissingValueException.createSupplier(key()));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4NTYyOQ==", "bodyText": "or does it?", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445385629", "createdAt": "2020-06-25T08:15:20Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -265,6 +275,27 @@ public String toString() {\n         return type() + \" \" + stringKey + \" = \" + currentValue().orElse(null);\n     }\n \n+    @Override\n+    public ConfigMapper mapper() {\n+        return mapper.mapper();\n+    }\n+\n+    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n+        if (type() == Type.MISSING) {\n+            return Stream.of();\n+        }\n+        if (config.type().isLeaf()) {\n+            return Stream.of(config);\n+        } else {\n+            return config.asNodeList()\n+                    .map(list -> list.stream()\n+                            .filter(predicate)\n+                            .map(node -> traverseSubNodes(node, predicate))\n+                            .reduce(Stream.of(config), Stream::concat))\n+                    .orElseThrow(MissingValueException.createSupplier(key()));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3NzEzNg==", "bodyText": "I don't feel like changing this right now. If you feel this is a problem, let's do a follow up issue.", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445677136", "createdAt": "2020-06-25T16:15:21Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -265,6 +275,27 @@ public String toString() {\n         return type() + \" \" + stringKey + \" = \" + currentValue().orElse(null);\n     }\n \n+    @Override\n+    public ConfigMapper mapper() {\n+        return mapper.mapper();\n+    }\n+\n+    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n+        if (type() == Type.MISSING) {\n+            return Stream.of();\n+        }\n+        if (config.type().isLeaf()) {\n+            return Stream.of(config);\n+        } else {\n+            return config.asNodeList()\n+                    .map(list -> list.stream()\n+                            .filter(predicate)\n+                            .map(node -> traverseSubNodes(node, predicate))\n+                            .reduce(Stream.of(config), Stream::concat))\n+                    .orElseThrow(MissingValueException.createSupplier(key()));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTEzODU1OnYy", "diffSide": "RIGHT", "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoxMTo1N1rOGowD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQxMzo0OTowOVrOGo7lFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ==", "bodyText": "Magic number", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445383675", "createdAt": "2020-06-25T08:11:57Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){\n+                return ConfigValues.empty();\n+            }\n+            // there are objects here, let's do that\n+            List<T> result = new LinkedList<>();\n+\n+            for (int i = 0; i < 1000; i++) {\n+                Config config = get(String.valueOf(i));\n+                if (config.type() == Type.MISSING) {\n+                    break;\n+                }\n+                result.add(config.as(typeArg).get());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU1NDQ0Ng==", "bodyText": "very magical, but documented", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445554446", "createdAt": "2020-06-25T13:23:54Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){\n+                return ConfigValues.empty();\n+            }\n+            // there are objects here, let's do that\n+            List<T> result = new LinkedList<>();\n+\n+            for (int i = 0; i < 1000; i++) {\n+                Config config = get(String.valueOf(i));\n+                if (config.type() == Type.MISSING) {\n+                    break;\n+                }\n+                result.add(config.as(typeArg).get());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTU3MjM3Mw==", "bodyText": "Fixed anyway", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445572373", "createdAt": "2020-06-25T13:49:09Z", "author": {"login": "tomas-langer"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){\n+                return ConfigValues.empty();\n+            }\n+            // there are objects here, let's do that\n+            List<T> result = new LinkedList<>();\n+\n+            for (int i = 0; i < 1000; i++) {\n+                Config config = get(String.valueOf(i));\n+                if (config.type() == Type.MISSING) {\n+                    break;\n+                }\n+                result.add(config.as(typeArg).get());\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ=="}, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 179}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 550, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}