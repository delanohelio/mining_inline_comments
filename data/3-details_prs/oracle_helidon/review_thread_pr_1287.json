{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNDYwNzc2", "number": 1287, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNjowMFrODjdW2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0Mjo0NlrODlmNDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA3NzM4OnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/MessagingCdiExtension.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNjowMFrOFvRvzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoxNjowMFrOFvRvzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTExODE1Ng==", "bodyText": "@tomas-langer Error collection for signature resolving and validation", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r385118156", "createdAt": "2020-02-27T13:16:00Z", "author": {"login": "danielkec"}, "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/MessagingCdiExtension.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.messaging;\n+\n+import java.util.logging.Logger;\n+\n+import javax.annotation.Priority;\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.Initialized;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.spi.AfterDeploymentValidation;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.DeploymentException;\n+import javax.enterprise.inject.spi.Extension;\n+import javax.enterprise.inject.spi.ProcessAnnotatedType;\n+import javax.enterprise.inject.spi.ProcessManagedBean;\n+import javax.enterprise.inject.spi.WithAnnotations;\n+\n+import io.helidon.common.Errors;\n+import io.helidon.microprofile.messaging.channel.ChannelRouter;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+\n+import static javax.interceptor.Interceptor.Priority.PLATFORM_AFTER;\n+\n+/**\n+ * MicroProfile Reactive Messaging CDI Extension.\n+ */\n+public class MessagingCdiExtension implements Extension {\n+    private static final Logger LOGGER = Logger.getLogger(MessagingCdiExtension.class.getName());\n+\n+    private ChannelRouter channelRouter = new ChannelRouter();\n+\n+    private void registerChannelMethods(\n+            @Observes\n+            @WithAnnotations({Incoming.class, Outgoing.class}) ProcessAnnotatedType<?> pat) {\n+        // Lookup channel methods\n+        pat.getAnnotatedType().getMethods().forEach(m -> channelRouter.registerMethod(m));\n+    }\n+\n+    private void onProcessBean(@Observes ProcessManagedBean<?> event) {\n+        // Lookup connectors\n+        if (null != event.getAnnotatedBeanClass().getAnnotation(Connector.class)) {\n+            channelRouter.registerConnectorFactory(event.getBean());\n+        }\n+        // Gather bean references\n+        channelRouter.registerBeanReference(event.getBean());\n+    }\n+\n+    private void deploymentValidation(@Observes AfterDeploymentValidation event) {\n+        Errors.Collector errors = channelRouter.getErrors();\n+        boolean hasFatal = errors.hasFatal();\n+        Errors errorMessages = errors.collect();\n+        if (hasFatal) {\n+            throw new DeploymentException(errorMessages.toString());\n+        } else {\n+            errorMessages.log(LOGGER);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106c17385b9887161d23570377027c38a91fbb30"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4NTA5ODEwOnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AbstractCDITest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoyMjowOVrOFvR8Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yN1QxMzoyMjowOVrOFvR8Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTEyMTMyNg==", "bodyText": "@tomas-langer Tear down is double checked to avoid cross test pollution related to #1446", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r385121326", "createdAt": "2020-02-27T13:22:09Z", "author": {"login": "danielkec"}, "path": "microprofile/messaging/src/test/java/io/helidon/microprofile/messaging/AbstractCDITest.java", "diffHunk": "@@ -0,0 +1,195 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.messaging;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.lang.annotation.Annotation;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Consumer;\n+import java.util.logging.LogManager;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.inject.se.SeContainer;\n+import javax.enterprise.inject.se.SeContainerInitializer;\n+import javax.enterprise.inject.spi.CDI;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.microprofile.server.Server;\n+import io.helidon.microprofile.server.ServerCdiExtension;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.eclipse.microprofile.config.spi.ConfigProviderResolver;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+\n+public abstract class AbstractCDITest {\n+\n+    static Server singleServerReference;\n+\n+    static {\n+        try (InputStream is = AbstractCDITest.class.getResourceAsStream(\"/logging.properties\")) {\n+            LogManager.getLogManager().readConfiguration(is);\n+        } catch (IOException e) {\n+            fail(e);\n+        }\n+    }\n+\n+    protected SeContainer cdiContainer;\n+\n+    protected Map<String, String> cdiConfig() {\n+        return Collections.emptyMap();\n+    }\n+\n+    protected void cdiBeanClasses(Set<Class<?>> classes) {\n+        //noop\n+    }\n+\n+    @BeforeEach\n+    public void setUp() {\n+        Set<Class<?>> classes = new HashSet<>();\n+        cdiBeanClasses(classes);\n+        Map<String, String> p = new HashMap<>(cdiConfig());\n+        cdiContainer = startCdiContainer(p, classes);\n+    }\n+\n+    @AfterEach\n+    public void tearDown() {\n+        try {\n+            singleServerReference.stop();\n+            cdiContainer.close();\n+        } catch (Throwable t) {\n+            //emergency cleanup see #1446\n+            stopCdiContainer();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "106c17385b9887161d23570377027c38a91fbb30"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTQ5ODYyOnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozNzozNFrOFyR6NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozODoyNVrOFyR70g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NjU0OQ==", "bodyText": "Versions MUST be managed in dependencies/pom.xml, mark PR with tag dependencies and please add Joe Di Pol as a reviewer.", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388266549", "createdAt": "2020-03-05T12:37:34Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/pom.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.microprofile</groupId>\n+        <artifactId>helidon-microprofile-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>helidon-microprofile-messaging</artifactId>\n+    <name>Helidon MicroProfile Reactive Messaging</name>\n+    <description>\n+        Helidon MicroProfile Reactive Messaging\n+    </description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.microprofile.reactive.messaging</groupId>\n+            <artifactId>microprofile-reactive-messaging-api</artifactId>\n+            <version>1.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2Njk2Mg==", "bodyText": "This must also be fixed in microprofile/reactive-streams/pom.xml", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388266962", "createdAt": "2020-03-05T12:38:25Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/pom.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.\n+  ~\n+  ~ Licensed under the Apache License, Version 2.0 (the \"License\");\n+  ~ you may not use this file except in compliance with the License.\n+  ~ You may obtain a copy of the License at\n+  ~\n+  ~     http://www.apache.org/licenses/LICENSE-2.0\n+  ~\n+  ~ Unless required by applicable law or agreed to in writing, software\n+  ~ distributed under the License is distributed on an \"AS IS\" BASIS,\n+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  ~ See the License for the specific language governing permissions and\n+  ~ limitations under the License.\n+  -->\n+\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.microprofile</groupId>\n+        <artifactId>helidon-microprofile-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>helidon-microprofile-messaging</artifactId>\n+    <name>Helidon MicroProfile Reactive Messaging</name>\n+    <description>\n+        Helidon MicroProfile Reactive Messaging\n+    </description>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.eclipse.microprofile.reactive.messaging</groupId>\n+            <artifactId>microprofile-reactive-messaging-api</artifactId>\n+            <version>1.0</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NjU0OQ=="}, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUwNDUwOnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozOToyMFrOFyR9mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozOToyMFrOFyR9mA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NzQxNg==", "bodyText": "Remove  All rights reserved. from all copyrights that are updated.", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388267416", "createdAt": "2020-03-05T12:39:20Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/pom.xml", "diffHunk": "@@ -0,0 +1,63 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  ~ Copyright (c) 2020 Oracle and/or its affiliates. All rights reserved.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUwNTQ1OnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozOTo0MFrOFyR-Kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjozOTo0MFrOFyR-Kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2NzU2Mw==", "bodyText": "Definitely not MP Metrics ;)", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388267563", "createdAt": "2020-03-05T12:39:40Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Microprofile metrics implementation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUwODU1OnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/main/java/module-info.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0MDo0MlrOFySAEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0MDo0MlrOFySAEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2ODA0OQ==", "bodyText": "All APIs that should be visible for the user should be transitive - that will make them imported to the using module as well.", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388268049", "createdAt": "2020-03-05T12:40:42Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/src/main/java/module-info.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c) 2018, 2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+/**\n+ * Microprofile metrics implementation.\n+ */\n+module io.helidon.microprofile.messaging {\n+    requires java.logging;\n+\n+    requires static cdi.api;\n+    requires static javax.inject;\n+    requires static java.activation;\n+    requires javax.interceptor.api;\n+    requires io.helidon.config;\n+    requires org.reactivestreams;\n+    requires microprofile.reactive.messaging.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUxMjQ0OnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/AbstractMessagingMethod.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0MTo1MVrOFySCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1MzoxMlrOFyWnQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2ODYxMg==", "bodyText": "Methods should not be declared public in a package private class unless implementing methods from iface.", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388268612", "createdAt": "2020-03-05T12:41:51Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/AbstractMessagingMethod.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.microprofile.messaging;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+\n+import io.helidon.common.Errors;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+\n+abstract class AbstractMessagingMethod {\n+\n+    private String incomingChannelName;\n+    private String outgoingChannelName;\n+\n+    private Bean<?> bean;\n+    private Object beanInstance;\n+    private MethodSignatureType type;\n+    private final Method method;\n+    private final Errors.Collector errors;\n+    private Acknowledgment.Strategy ackStrategy;\n+\n+\n+    AbstractMessagingMethod(Method method, Errors.Collector errors) {\n+        this.method = method;\n+        this.errors = errors;\n+        Optional<MethodSignatureType> signatureType = MethodSignatureResolver\n+                .create(method)\n+                .resolve();\n+        if (signatureType.isPresent()) {\n+            this.type = signatureType.get();\n+            resolveAckStrategy();\n+        } else {\n+            errors.fatal(\"Unsupported method signature \" + method);\n+        }\n+    }\n+\n+    void validate() {\n+        Optional.ofNullable(method.getAnnotation(Acknowledgment.class))\n+                .map(Acknowledgment::value)\n+                .filter(s -> !type.getSupportedAckStrategies().contains(s))\n+                .ifPresent(strategy -> {\n+                    errors.fatal(String.format(\"Acknowledgment strategy %s is not supported for method signature: %s\",\n+                            strategy, type));\n+                });\n+    }\n+\n+    public void init(BeanManager beanManager, Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0MzYxOA==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388343618", "createdAt": "2020-03-05T14:53:12Z", "author": {"login": "danielkec"}, "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/AbstractMessagingMethod.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.microprofile.messaging;\n+\n+import java.lang.reflect.Method;\n+import java.util.Optional;\n+\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.BeanManager;\n+\n+import io.helidon.common.Errors;\n+import io.helidon.config.Config;\n+\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+\n+abstract class AbstractMessagingMethod {\n+\n+    private String incomingChannelName;\n+    private String outgoingChannelName;\n+\n+    private Bean<?> bean;\n+    private Object beanInstance;\n+    private MethodSignatureType type;\n+    private final Method method;\n+    private final Errors.Collector errors;\n+    private Acknowledgment.Strategy ackStrategy;\n+\n+\n+    AbstractMessagingMethod(Method method, Errors.Collector errors) {\n+        this.method = method;\n+        this.errors = errors;\n+        Optional<MethodSignatureType> signatureType = MethodSignatureResolver\n+                .create(method)\n+                .resolve();\n+        if (signatureType.isPresent()) {\n+            this.type = signatureType.get();\n+            resolveAckStrategy();\n+        } else {\n+            errors.fatal(\"Unsupported method signature \" + method);\n+        }\n+    }\n+\n+    void validate() {\n+        Optional.ofNullable(method.getAnnotation(Acknowledgment.class))\n+                .map(Acknowledgment::value)\n+                .filter(s -> !type.getSupportedAckStrategies().contains(s))\n+                .ifPresent(strategy -> {\n+                    errors.fatal(String.format(\"Acknowledgment strategy %s is not supported for method signature: %s\",\n+                            strategy, type));\n+                });\n+    }\n+\n+    public void init(BeanManager beanManager, Config config) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI2ODYxMg=="}, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTUyNDM2OnYy", "diffSide": "RIGHT", "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/CompletableQueueOverflowException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMjo0NTo1NVrOFySJdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwODowNTo0OVrOFywDvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDQ1NQ==", "bodyText": "Do we really need so many types of exceptions?\nI think we do not expect anybody to catch these exceptions specifically, so we should be fine with a MessagingException and if needed a MessagingDeploymentException and describe the problem in message, rather then creating a typed exception for each case.", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388270455", "createdAt": "2020-03-05T12:45:55Z", "author": {"login": "tomas-langer"}, "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/CompletableQueueOverflowException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.microprofile.messaging;\n+\n+/**\n+ * Raised when {@link io.helidon.microprofile.messaging.CompletableQueue} max size is reached.\n+ */\n+public class CompletableQueueOverflowException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc2MDUxMQ==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388760511", "createdAt": "2020-03-06T08:05:49Z", "author": {"login": "danielkec"}, "path": "microprofile/messaging/src/main/java/io/helidon/microprofile/messaging/CompletableQueueOverflowException.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates. All rights reserved.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.microprofile.messaging;\n+\n+/**\n+ * Raised when {@link io.helidon.microprofile.messaging.CompletableQueue} max size is reached.\n+ */\n+public class CompletableQueueOverflowException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI3MDQ1NQ=="}, "originalCommit": {"oid": "be870335bdc5a1c56b3f05f7775ef5af066e7939"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNTk5ODQwOnYy", "diffSide": "RIGHT", "path": "dependencies/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1NTozOFrOFyWtzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNDo1NTozOFrOFyWtzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM0NTI5Mg==", "bodyText": "FYI @barchetta", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388345292", "createdAt": "2020-03-05T14:55:38Z", "author": {"login": "danielkec"}, "path": "dependencies/pom.xml", "diffHunk": "@@ -485,6 +488,21 @@\n                     </exclusion>\n                 </exclusions>\n             </dependency>\n+            <dependency>\n+                <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>\n+                <artifactId>microprofile-reactive-streams-operators-api</artifactId>\n+                <version>${version.lib.microprofile-reactive-streams-operators-api}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.eclipse.microprofile.reactive-streams-operators</groupId>\n+                <artifactId>microprofile-reactive-streams-operators-core</artifactId>\n+                <version>${version.lib.microprofile-reactive-streams-operators-core}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.eclipse.microprofile.reactive.messaging</groupId>\n+                <artifactId>microprofile-reactive-messaging-api</artifactId>\n+                <version>${version.lib.microprofile-reactive-messaging-api}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6a60ea2127128f5b260b0f9d9a89e9d2f4662e1"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzQ5ODM3OnYy", "diffSide": "RIGHT", "path": "microprofile/tests/tck/tck-messaging/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo0Mjo0NlrOFylOVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxNTo1MzoxMVrOF0VWFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4Mjk5OQ==", "bodyText": "@tomas-langer Is it possible to not moving those test dependencies to dependency/pom.xml? Using SmallRye operators for messaging tck as workaround for eclipse/microprofile-reactive-messaging/issues/95 , SmallRye operators depends on different version of rxjava, than Helidon depend on already.", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r388582999", "createdAt": "2020-03-05T21:42:46Z", "author": {"login": "danielkec"}, "path": "microprofile/tests/tck/tck-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.microprofile.tests</groupId>\n+        <artifactId>tck-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>tck-messaging</artifactId>\n+    <name>Helidon Microprofile Tests TCK Messaging</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+                    <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.tests</groupId>\n+            <artifactId>helidon-arquillian</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- Workaround for TCKs expecting smallrye-like operators behaviour -->\n+            <!-- https://github.com/eclipse/microprofile-reactive-messaging/issues/95 -->\n+            <groupId>io.smallrye.reactive</groupId>\n+            <artifactId>smallrye-reactive-streams-operators</artifactId>\n+            <version>1.0.10</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.reactivex.rxjava2</groupId>\n+            <artifactId>rxjava</artifactId>\n+            <version>2.2.13</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1c9111c774d0310d7a82b5e3abc5a68d051e23d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIzNjc1NA==", "bodyText": "I would agree to keep these dependencies explicit in this file only, as this is a workaround for a TCK issue (that is already reported).\n@barchetta do you agree?", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r390236754", "createdAt": "2020-03-10T11:00:03Z", "author": {"login": "tomas-langer"}, "path": "microprofile/tests/tck/tck-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.microprofile.tests</groupId>\n+        <artifactId>tck-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>tck-messaging</artifactId>\n+    <name>Helidon Microprofile Tests TCK Messaging</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+                    <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.tests</groupId>\n+            <artifactId>helidon-arquillian</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- Workaround for TCKs expecting smallrye-like operators behaviour -->\n+            <!-- https://github.com/eclipse/microprofile-reactive-messaging/issues/95 -->\n+            <groupId>io.smallrye.reactive</groupId>\n+            <artifactId>smallrye-reactive-streams-operators</artifactId>\n+            <version>1.0.10</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.reactivex.rxjava2</groupId>\n+            <artifactId>rxjava</artifactId>\n+            <version>2.2.13</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4Mjk5OQ=="}, "originalCommit": {"oid": "e1c9111c774d0310d7a82b5e3abc5a68d051e23d"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDQxOTk5MQ==", "bodyText": "I agree", "url": "https://github.com/oracle/helidon/pull/1287#discussion_r390419991", "createdAt": "2020-03-10T15:53:11Z", "author": {"login": "barchetta"}, "path": "microprofile/tests/tck/tck-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,94 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.microprofile.tests</groupId>\n+        <artifactId>tck-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>tck-messaging</artifactId>\n+    <name>Helidon Microprofile Tests TCK Messaging</name>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.messaging</groupId>\n+            <artifactId>helidon-microprofile-messaging</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+            <exclusions>\n+                <exclusion>\n+                    <groupId>io.helidon.microprofile.reactive-streams</groupId>\n+                    <artifactId>helidon-microprofile-reactive-streams</artifactId>\n+                </exclusion>\n+            </exclusions>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.helidon.microprofile.tests</groupId>\n+            <artifactId>helidon-arquillian</artifactId>\n+            <version>${project.version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <!-- Workaround for TCKs expecting smallrye-like operators behaviour -->\n+            <!-- https://github.com/eclipse/microprofile-reactive-messaging/issues/95 -->\n+            <groupId>io.smallrye.reactive</groupId>\n+            <artifactId>smallrye-reactive-streams-operators</artifactId>\n+            <version>1.0.10</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.reactivex.rxjava2</groupId>\n+            <artifactId>rxjava</artifactId>\n+            <version>2.2.13</version>\n+            <scope>test</scope>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4Mjk5OQ=="}, "originalCommit": {"oid": "e1c9111c774d0310d7a82b5e3abc5a68d051e23d"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 296, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}