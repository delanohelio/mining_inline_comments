{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMDIwODk4", "number": 2348, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODowODowMFrOEiAD0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDo1M1rOEjMD7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDg4MDE5OnYy", "diffSide": "RIGHT", "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODowODowMFrOHPoC-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDoyOTo1OFrOHP26rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NjgxMA==", "bodyText": "This looks like duplication of CompletableFuture.supplyAsync internals, is there some AsyncTask's feature I missed @tomas-langer, or we can simplify?\n    public <T> Single<T> invoke(Supplier<T> supplier) {\n        try {\n            return Single.create(CompletableFuture.supplyAsync(task, executor.get()), true);\n        } catch (Throwable e) {\n            // rejected execution and other executor related issues\n            return Single.error(e);\n        }\n    }", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486146810", "createdAt": "2020-09-10T08:08:00Z", "author": {"login": "danielkec"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "diffHunk": "@@ -35,14 +36,17 @@\n         CompletableFuture<T> future = new CompletableFuture<>();\n         AsyncTask<T> task = new AsyncTask<>(supplier, future);\n \n+        Future<?> taskFuture;\n         try {\n-            executor.get().submit(task);\n+            taskFuture = executor.get().submit(task);\n         } catch (Throwable e) {\n             // rejected execution and other executor related issues\n             return Single.error(e);\n         }\n \n-        return Single.create(future);\n+        Single<T> single = Single.create(future, true);\n+        single.onCancel(() -> taskFuture.cancel(false));     // cancel task\n+        return single;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNTIyOQ==", "bodyText": "Maybe, but not sure it is more readable tbh", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486315229", "createdAt": "2020-09-10T12:59:02Z", "author": {"login": "spericas"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "diffHunk": "@@ -35,14 +36,17 @@\n         CompletableFuture<T> future = new CompletableFuture<>();\n         AsyncTask<T> task = new AsyncTask<>(supplier, future);\n \n+        Future<?> taskFuture;\n         try {\n-            executor.get().submit(task);\n+            taskFuture = executor.get().submit(task);\n         } catch (Throwable e) {\n             // rejected execution and other executor related issues\n             return Single.error(e);\n         }\n \n-        return Single.create(future);\n+        Single<T> single = Single.create(future, true);\n+        single.onCancel(() -> taskFuture.cancel(false));     // cancel task\n+        return single;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NjgxMA=="}, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5MDQ0Ng==", "bodyText": "Code has changed now, see below", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486390446", "createdAt": "2020-09-10T14:29:58Z", "author": {"login": "spericas"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "diffHunk": "@@ -35,14 +36,17 @@\n         CompletableFuture<T> future = new CompletableFuture<>();\n         AsyncTask<T> task = new AsyncTask<>(supplier, future);\n \n+        Future<?> taskFuture;\n         try {\n-            executor.get().submit(task);\n+            taskFuture = executor.get().submit(task);\n         } catch (Throwable e) {\n             // rejected execution and other executor related issues\n             return Single.error(e);\n         }\n \n-        return Single.create(future);\n+        Single<T> single = Single.create(future, true);\n+        single.onCancel(() -> taskFuture.cancel(false));     // cancel task\n+        return single;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NjgxMA=="}, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDk1OTI1OnYy", "diffSide": "RIGHT", "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/ErrorChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODoyODo1NFrOHPo0ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjo1ODoyN1rOHPyTZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1OTU1NQ==", "bodyText": "anyMatch could save few cycles", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486159555", "createdAt": "2020-09-10T08:28:54Z", "author": {"login": "danielkec"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/ErrorChecker.java", "diffHunk": "@@ -22,25 +22,21 @@\n interface ErrorChecker {\n     boolean shouldSkip(Throwable throwable);\n \n+    /**\n+     * Returns ErrorChecker that skips if throwable is in skipOnSet or if applyOnSet\n+     * is not empty and throwable is not in it. Note that if applyOnSet is empty, then\n+     * it is equivalent to it containing {@code Throwable.class}.\n+     *\n+     * @param skipOnSet set of throwables to skip logic on.\n+     * @param applyOnSet set of throwables to apply logic on.\n+     * @return An error checker.\n+     */\n     static ErrorChecker create(Set<Class<? extends Throwable>> skipOnSet, Set<Class<? extends Throwable>> applyOnSet) {\n-        Set<Class<? extends Throwable>> skipOn = Set.copyOf(skipOnSet);\n-        Set<Class<? extends Throwable>> applyOn = Set.copyOf(applyOnSet);\n-\n-        if (skipOn.isEmpty()) {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> false;\n-            } else {\n-                return throwable -> !applyOn.contains(throwable.getClass());\n-            }\n-        } else {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> skipOn.contains(throwable.getClass());\n-            } else {\n-                throw new IllegalArgumentException(\"You have defined both skip and apply set of exception classes. \"\n-                                                           + \"This cannot be correctly handled; skipOn: \" + skipOn\n-                                                           + \" applyOn: \" + applyOn);\n-            }\n+        return throwable -> containsThrowable(skipOnSet, throwable)\n+                || !applyOnSet.isEmpty() && !containsThrowable(applyOnSet, throwable);\n+    }\n \n-        }\n+    private static boolean containsThrowable(Set<Class<? extends Throwable>> set, Throwable throwable) {\n+        return set.stream().filter(t -> t.isAssignableFrom(throwable.getClass())).count() > 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMxNDg1Mw==", "bodyText": "Good point", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486314853", "createdAt": "2020-09-10T12:58:27Z", "author": {"login": "spericas"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/ErrorChecker.java", "diffHunk": "@@ -22,25 +22,21 @@\n interface ErrorChecker {\n     boolean shouldSkip(Throwable throwable);\n \n+    /**\n+     * Returns ErrorChecker that skips if throwable is in skipOnSet or if applyOnSet\n+     * is not empty and throwable is not in it. Note that if applyOnSet is empty, then\n+     * it is equivalent to it containing {@code Throwable.class}.\n+     *\n+     * @param skipOnSet set of throwables to skip logic on.\n+     * @param applyOnSet set of throwables to apply logic on.\n+     * @return An error checker.\n+     */\n     static ErrorChecker create(Set<Class<? extends Throwable>> skipOnSet, Set<Class<? extends Throwable>> applyOnSet) {\n-        Set<Class<? extends Throwable>> skipOn = Set.copyOf(skipOnSet);\n-        Set<Class<? extends Throwable>> applyOn = Set.copyOf(applyOnSet);\n-\n-        if (skipOn.isEmpty()) {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> false;\n-            } else {\n-                return throwable -> !applyOn.contains(throwable.getClass());\n-            }\n-        } else {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> skipOn.contains(throwable.getClass());\n-            } else {\n-                throw new IllegalArgumentException(\"You have defined both skip and apply set of exception classes. \"\n-                                                           + \"This cannot be correctly handled; skipOn: \" + skipOn\n-                                                           + \" applyOn: \" + applyOn);\n-            }\n+        return throwable -> containsThrowable(skipOnSet, throwable)\n+                || !applyOnSet.isEmpty() && !containsThrowable(applyOnSet, throwable);\n+    }\n \n-        }\n+    private static boolean containsThrowable(Set<Class<? extends Throwable>> set, Throwable throwable) {\n+        return set.stream().filter(t -> t.isAssignableFrom(throwable.getClass())).count() > 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE1OTU1NQ=="}, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTk5ODUzOnYy", "diffSide": "RIGHT", "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxMDowOVrOHPyxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDoyOToxOVrOHP24fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMjU4Mg==", "bodyText": "This doesn't look right. I think Single operators are still immutable and create a new instance, thus returing single will not have the cancel operation. You'd probably want return single.onCancel(() -> taskFuture.cancel(true));.", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486322582", "createdAt": "2020-09-10T13:10:09Z", "author": {"login": "akarnokd"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "diffHunk": "@@ -35,14 +36,17 @@\n         CompletableFuture<T> future = new CompletableFuture<>();\n         AsyncTask<T> task = new AsyncTask<>(supplier, future);\n \n+        Future<?> taskFuture;\n         try {\n-            executor.get().submit(task);\n+            taskFuture = executor.get().submit(task);\n         } catch (Throwable e) {\n             // rejected execution and other executor related issues\n             return Single.error(e);\n         }\n \n-        return Single.create(future);\n+        Single<T> single = Single.create(future, true);\n+        single.onCancel(() -> taskFuture.cancel(false));     // cancel task", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM4OTg4Ng==", "bodyText": "I discussed this with @danielkec. Code works because of how we interact with Future but returning the Single from onCancel is the correct way. Fixed.", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486389886", "createdAt": "2020-09-10T14:29:19Z", "author": {"login": "spericas"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/AsyncImpl.java", "diffHunk": "@@ -35,14 +36,17 @@\n         CompletableFuture<T> future = new CompletableFuture<>();\n         AsyncTask<T> task = new AsyncTask<>(supplier, future);\n \n+        Future<?> taskFuture;\n         try {\n-            executor.get().submit(task);\n+            taskFuture = executor.get().submit(task);\n         } catch (Throwable e) {\n             // rejected execution and other executor related issues\n             return Single.error(e);\n         }\n \n-        return Single.create(future);\n+        Single<T> single = Single.create(future, true);\n+        single.onCancel(() -> taskFuture.cancel(false));     // cancel task", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyMjU4Mg=="}, "originalCommit": {"oid": "37cef9422029e5d82a53192d02e951f1159c5f77"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjQ0NjU3OnYy", "diffSide": "RIGHT", "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/ErrorChecker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDozNjo1M1rOHP3QHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNDo1MzozMVrOHP4CpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NTkzNQ==", "bodyText": "There is a reason for copying the sets - this method is called from a builder, which has mutable properties. This should work only on the data at the point the method was called and should ignore future mutation of these sets.", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486395935", "createdAt": "2020-09-10T14:36:53Z", "author": {"login": "tomas-langer"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/ErrorChecker.java", "diffHunk": "@@ -22,25 +22,21 @@\n interface ErrorChecker {\n     boolean shouldSkip(Throwable throwable);\n \n+    /**\n+     * Returns ErrorChecker that skips if throwable is in skipOnSet or if applyOnSet\n+     * is not empty and throwable is not in it. Note that if applyOnSet is empty, then\n+     * it is equivalent to it containing {@code Throwable.class}.\n+     *\n+     * @param skipOnSet set of throwables to skip logic on.\n+     * @param applyOnSet set of throwables to apply logic on.\n+     * @return An error checker.\n+     */\n     static ErrorChecker create(Set<Class<? extends Throwable>> skipOnSet, Set<Class<? extends Throwable>> applyOnSet) {\n-        Set<Class<? extends Throwable>> skipOn = Set.copyOf(skipOnSet);\n-        Set<Class<? extends Throwable>> applyOn = Set.copyOf(applyOnSet);\n-\n-        if (skipOn.isEmpty()) {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> false;\n-            } else {\n-                return throwable -> !applyOn.contains(throwable.getClass());\n-            }\n-        } else {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> skipOn.contains(throwable.getClass());\n-            } else {\n-                throw new IllegalArgumentException(\"You have defined both skip and apply set of exception classes. \"\n-                                                           + \"This cannot be correctly handled; skipOn: \" + skipOn\n-                                                           + \" applyOn: \" + applyOn);\n-            }\n+        return throwable -> containsThrowable(skipOnSet, throwable)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06f3669d8c4262fd255f8333ce3924c08595fc11"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQwODg2OQ==", "bodyText": "Make sense, will fix", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r486408869", "createdAt": "2020-09-10T14:53:31Z", "author": {"login": "spericas"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/ErrorChecker.java", "diffHunk": "@@ -22,25 +22,21 @@\n interface ErrorChecker {\n     boolean shouldSkip(Throwable throwable);\n \n+    /**\n+     * Returns ErrorChecker that skips if throwable is in skipOnSet or if applyOnSet\n+     * is not empty and throwable is not in it. Note that if applyOnSet is empty, then\n+     * it is equivalent to it containing {@code Throwable.class}.\n+     *\n+     * @param skipOnSet set of throwables to skip logic on.\n+     * @param applyOnSet set of throwables to apply logic on.\n+     * @return An error checker.\n+     */\n     static ErrorChecker create(Set<Class<? extends Throwable>> skipOnSet, Set<Class<? extends Throwable>> applyOnSet) {\n-        Set<Class<? extends Throwable>> skipOn = Set.copyOf(skipOnSet);\n-        Set<Class<? extends Throwable>> applyOn = Set.copyOf(applyOnSet);\n-\n-        if (skipOn.isEmpty()) {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> false;\n-            } else {\n-                return throwable -> !applyOn.contains(throwable.getClass());\n-            }\n-        } else {\n-            if (applyOn.isEmpty()) {\n-                return throwable -> skipOn.contains(throwable.getClass());\n-            } else {\n-                throw new IllegalArgumentException(\"You have defined both skip and apply set of exception classes. \"\n-                                                           + \"This cannot be correctly handled; skipOn: \" + skipOn\n-                                                           + \" applyOn: \" + applyOn);\n-            }\n+        return throwable -> containsThrowable(skipOnSet, throwable)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM5NTkzNQ=="}, "originalCommit": {"oid": "06f3669d8c4262fd255f8333ce3924c08595fc11"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Mjg3NjI1OnYy", "diffSide": "RIGHT", "path": "microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1NzowMVrOHRVlpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyMjo0NVrOHRXa1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0MTU0MQ==", "bodyText": "What a chance \ud83d\ude42", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r487941541", "createdAt": "2020-09-14T13:57:01Z", "author": {"login": "danielkec"}, "path": "microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutTest.java", "diffHunk": "@@ -79,7 +94,7 @@ public void testForceTimeoutLoop() {\n         try {\n             bean.forceTimeoutLoop();        // cannot interrupt\n         } catch (TimeoutException e) {\n-            assertThat(System.currentTimeMillis() - start, is(greaterThan(2000L)));\n+            assertThat(System.currentTimeMillis() - start, is(greaterThanOrEqualTo(2000L)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01426f5af3cf674aed2e72268d7bba3805b3256"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0MjgzNQ==", "bodyText": "Got me curious is there some rounding involved?", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r487942835", "createdAt": "2020-09-14T13:58:14Z", "author": {"login": "danielkec"}, "path": "microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutTest.java", "diffHunk": "@@ -79,7 +94,7 @@ public void testForceTimeoutLoop() {\n         try {\n             bean.forceTimeoutLoop();        // cannot interrupt\n         } catch (TimeoutException e) {\n-            assertThat(System.currentTimeMillis() - start, is(greaterThan(2000L)));\n+            assertThat(System.currentTimeMillis() - start, is(greaterThanOrEqualTo(2000L)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0MTU0MQ=="}, "originalCommit": {"oid": "a01426f5af3cf674aed2e72268d7bba3805b3256"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3MTU0MA==", "bodyText": "No, but this is special case where the thread continues to run and cannot be interrupted (note that timeout is 1000). It hit 2000 at least once :)", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r487971540", "createdAt": "2020-09-14T14:22:45Z", "author": {"login": "spericas"}, "path": "microprofile/fault-tolerance/src/test/java/io/helidon/microprofile/faulttolerance/TimeoutTest.java", "diffHunk": "@@ -79,7 +94,7 @@ public void testForceTimeoutLoop() {\n         try {\n             bean.forceTimeoutLoop();        // cannot interrupt\n         } catch (TimeoutException e) {\n-            assertThat(System.currentTimeMillis() - start, is(greaterThan(2000L)));\n+            assertThat(System.currentTimeMillis() - start, is(greaterThanOrEqualTo(2000L)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0MTU0MQ=="}, "originalCommit": {"oid": "a01426f5af3cf674aed2e72268d7bba3805b3256"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzA4NTUzOnYy", "diffSide": "RIGHT", "path": "microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceExtension.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDoyNDo1OFrOHRXiNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNDo0Mjo0NFrOHRYYgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3MzQzMQ==", "bodyText": "16 is the default right?", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r487973431", "createdAt": "2020-09-14T14:24:58Z", "author": {"login": "danielkec"}, "path": "microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceExtension.java", "diffHunk": "@@ -260,6 +264,19 @@ void registerFaultToleranceMetrics(@Observes AfterDeploymentValidation validatio\n                 }\n             });\n         }\n+\n+        // Initialize executors for MP FT - default size of 16\n+        io.helidon.config.Config config = io.helidon.config.Config.create();\n+        FaultTolerance.scheduledExecutor(ScheduledThreadPoolSupplier.builder()\n+                .threadNamePrefix(\"ft-mp-schedule-\")\n+                .corePoolSize(16)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01426f5af3cf674aed2e72268d7bba3805b3256"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk4NzMzMA==", "bodyText": "I think so. But defaults can change and a smaller number will likely result in FT TCK failures.", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r487987330", "createdAt": "2020-09-14T14:42:44Z", "author": {"login": "spericas"}, "path": "microprofile/fault-tolerance/src/main/java/io/helidon/microprofile/faulttolerance/FaultToleranceExtension.java", "diffHunk": "@@ -260,6 +264,19 @@ void registerFaultToleranceMetrics(@Observes AfterDeploymentValidation validatio\n                 }\n             });\n         }\n+\n+        // Initialize executors for MP FT - default size of 16\n+        io.helidon.config.Config config = io.helidon.config.Config.create();\n+        FaultTolerance.scheduledExecutor(ScheduledThreadPoolSupplier.builder()\n+                .threadNamePrefix(\"ft-mp-schedule-\")\n+                .corePoolSize(16)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk3MzQzMQ=="}, "originalCommit": {"oid": "a01426f5af3cf674aed2e72268d7bba3805b3256"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MzMzMjI4OnYy", "diffSide": "RIGHT", "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/FaultTolerance.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDo1M1rOHRZ7gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxNToxNDo1M1rOHRZ7gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODAxMjY3Mw==", "bodyText": "validFts is always LinkedList, using descendingIterator would be nice", "url": "https://github.com/oracle/helidon/pull/2348#discussion_r488012673", "createdAt": "2020-09-14T15:14:53Z", "author": {"login": "danielkec"}, "path": "fault-tolerance/src/main/java/io/helidon/faulttolerance/FaultTolerance.java", "diffHunk": "@@ -266,7 +276,17 @@ private FtHandlerTypedImpl(List<FtHandlerTyped<T>> validFts) {\n                     next = () -> validFt.invoke(finalNext);\n                 }\n \n-                return Single.create(next.get());\n+                return Single.create(next.get(), true);\n+            }\n+\n+            @Override\n+            public String toString() {\n+                StringBuilder sb = new StringBuilder();\n+                for (int i = validFts.size() - 1; i >= 0; i--) {\n+                    sb.append(validFts.get(i).toString());\n+                    sb.append(\"\\n\");\n+                }\n+                return sb.toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a01426f5af3cf674aed2e72268d7bba3805b3256"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 399, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}