{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODM4NDY2", "number": 1493, "title": "Support multiple apps in OpenAPI document", "bodyText": "Resolves #1288\nThe SmallRye OpenAPI annotation scanning does not correctly handle multiple applications in the server. To deal with this, the Helidon MP layer:\n\ninvokes the SmallRye OpenAPI scanner once for each app, restricting the scanner so it works only with that app\u2019s classes, thus producing a temporary OpenAPI model for just that app; then\nmerges the resulting models into one (using a SmallRye utility method) for use by SmallRye as the model resulting from annotation scanning.\n\n(Because OpenAPI is also supported in SE this PR includes some changes in SE to enhance the contract of OpenAPISupport and its builder. Functionally, SE is unaffected by this change.)\nTo locate the apps, these revised Helidon MP OpenAPI layer uses the pre-existing JaxRsCdiExtension which harvests not only annotated apps but also ones registered programmatically.\nThere are a few changes to the MP server component so code that creates a JaxRsApplication can indicate if it's a synthetic application being represented. This is useful because the OpenAPI enhancements do not need to handle a synthetic app.", "createdAt": "2020-03-11T17:57:48Z", "url": "https://github.com/oracle/helidon/pull/1493", "merged": true, "mergeCommit": {"oid": "61e157e86436691dee1e02204c987bc6ad6dd150"}, "closed": true, "closedAt": "2020-03-17T23:37:22Z", "author": {"login": "tjquinno"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMbbp6gH2gAyMzg2ODM4NDY2OjMxOTBmY2Q4NGYwODNhY2U1MzYxYTQwMjFmMTVhOWQyNDc4YmU3MzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOrDLugFqTM3NjQ2NTgwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3190fcd84f083ace5361a4021f15a9d2478be733", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/3190fcd84f083ace5361a4021f15a9d2478be733", "committedDate": "2020-03-10T23:50:49Z", "message": "Initial commit of changes to support multiple apps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "260809e448a16545e1521cdc908d6e622308146c", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/260809e448a16545e1521cdc908d6e622308146c", "committedDate": "2020-03-11T17:20:05Z", "message": "Use multiple FilteredIndexViews to scan then build and merge OpenAPI models for each app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "029e03df4862883ca3078e4661333b752fe50756", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/029e03df4862883ca3078e4661333b752fe50756", "committedDate": "2020-03-11T17:22:34Z", "message": "Concurrent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14338ccd7d69fc15f9d14795546114fa62a1b04a", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/14338ccd7d69fc15f9d14795546114fa62a1b04a", "committedDate": "2020-03-11T17:37:51Z", "message": "Remove 'All rights reserved' from pom; update a comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2b19ac1077d1b75495aa73b47c04e5a35fed36b", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/b2b19ac1077d1b75495aa73b47c04e5a35fed36b", "committedDate": "2020-03-11T20:03:26Z", "message": "Handle the 'synthetic application' case from JaxRsCdiExtension"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1cd492639eaa7574a8f6ec05aea07fbd9a7ec223", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1cd492639eaa7574a8f6ec05aea07fbd9a7ec223", "committedDate": "2020-03-12T20:11:09Z", "message": "No need to instantiate JAX-RS apps to invoke getClasses and getSingletons because they come from JaxRsCdiExtension in the server component which already provides instances"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969f5f58451c9be0e6be098736c3b8f6db0e7516", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/969f5f58451c9be0e6be098736c3b8f6db0e7516", "committedDate": "2020-03-13T00:21:43Z", "message": "Revise synthetic app detection"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1913a15fc73ddcc4e6c67c967d03cde43be40976", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1913a15fc73ddcc4e6c67c967d03cde43be40976", "committedDate": "2020-03-13T15:01:53Z", "message": "Emphasize per-app use of FilteredIndexViews; compartmentalize detection of synthetic apps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cff03663b4474ec829a971042426605f30b8017b", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/cff03663b4474ec829a971042426605f30b8017b", "committedDate": "2020-03-13T18:00:24Z", "message": "Add explicit indication that JaxRsApplication is/is not synthetic"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1975c60737bb9b9ed1d964ef14f68b82311b9096", "committedDate": "2020-03-13T18:01:09Z", "message": "Use explicit indicator if app is synthetic; also handle case in which the JaxRsApplication already has an app instance (and therefore we do not need to instantiate the class)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1ODQ2MDY1", "url": "https://github.com/oracle/helidon/pull/1493#pullrequestreview-375846065", "createdAt": "2020-03-17T09:02:14Z", "commit": {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjoxNFrOF3TJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjo0N1rOF3TKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTY3OA==", "bodyText": "Please replace with\nreturn jaxRsApp.applicationClass()\n                .flatMap(MPOpenAPIBuilder::instantiate);\n\nAnd remove the Optional<Class> parameter from instantiate methods. Using Optional as a parameter is generally not recommended.", "url": "https://github.com/oracle/helidon/pull/1493#discussion_r393529678", "createdAt": "2020-03-17T09:02:14Z", "author": {"login": "tomas-langer"}, "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -30,15 +44,106 @@\n \n     private Optional<OpenApiConfig> openAPIConfig;\n     private Optional<IndexView> indexView;\n+    private List<FilteredIndexView> perAppFilteredIndexViews = null;\n+    private Config mpConfig;\n \n     @Override\n     public OpenApiConfig openAPIConfig() {\n         return openAPIConfig.get();\n     }\n \n     @Override\n-    public IndexView indexView() {\n-        return indexView.get();\n+    public synchronized List<FilteredIndexView> perAppFilteredIndexViews() {\n+        if (perAppFilteredIndexViews == null) {\n+            perAppFilteredIndexViews = buildPerAppFilteredIndexViews();\n+        }\n+        return perAppFilteredIndexViews;\n+    }\n+\n+    private List<FilteredIndexView> buildPerAppFilteredIndexViews() {\n+        /*\n+         * The JaxRsCdiExtension knows about all the apps in the system. For each app find out the classes related to that\n+         * app -- the application class itself and any resource classes reported by its getClasses() or getSingletons()\n+         * methods -- and create a FilteredIndexView that will be used to restrict scanning to only those classes for that app.\n+         */\n+        JaxRsCdiExtension ext = CDI.current()\n+                .getBeanManager()\n+                .getExtension(JaxRsCdiExtension.class);\n+\n+        /*\n+         * There are two cases that return a default filtered index view. Don't create it yet, just declare a supplier for it.\n+         */\n+        Supplier<List<FilteredIndexView>> defaultResultSupplier = () -> List.of(new FilteredIndexView(indexView.get(),\n+                openAPIConfig.get()));\n+\n+        /*\n+         * Each set in the list holds the classes related to one app.\n+         */\n+        List<JaxRsApplication> appsToRun = ext.applicationsToRun();\n+        if (appsToRun.size() <= 1) {\n+            return defaultResultSupplier.get();\n+        }\n+        /*\n+         * Some JaxRsApplication instances might have an application instance already associated with them. Others might not in\n+         * which case we'll try to instantiate them ourselves (unless they are synthetic apps or lack no-args constructors).\n+         */\n+        List<Set<Class<?>>> appClassesToScan = appsToRun.stream()\n+                .filter(MPOpenAPIBuilder::isNonSynthetic)\n+                .map(this::appInstance)\n+                .flatMap(Optional::stream)\n+                .map(this::classesToScanForApp)\n+                .collect(Collectors.toList());\n+\n+        if (appClassesToScan.size() <= 1) {\n+            /*\n+             * Use normal scanning with a FilteredIndexView containing no class restrictions (beyond what might already be in\n+             * the configuration).\n+             */\n+            return defaultResultSupplier.get();\n+        }\n+        return appClassesToScan.stream()\n+                .map(this::appRelatedClassesToFilteredIndexView)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static boolean isNonSynthetic(JaxRsApplication jaxRsApp) {\n+        return !jaxRsApp.synthetic();\n+    }\n+\n+    private Optional<? extends Application> appInstance(JaxRsApplication jaxRsApp) {\n+        Application preexistingApp = jaxRsApp.resourceConfig().getApplication();\n+        if (preexistingApp != null) {\n+            return Optional.of(preexistingApp);\n+        }\n+        return instantiate(jaxRsApp.applicationClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTk4MQ==", "bodyText": "To work with my above note, replace with\n    private static Optional<? extends Application> instantiate(Class<? extends Application> appClass) {\n        try {\n            return Optional.of(appClass.getConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(e);\n        } catch (NoSuchMethodException e) {\n            // Wrapper app does not have a no-args constructor so we canont instantiate it.\n            return Optional.empty();\n        }\n    }", "url": "https://github.com/oracle/helidon/pull/1493#discussion_r393529981", "createdAt": "2020-03-17T09:02:47Z", "author": {"login": "tomas-langer"}, "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -48,11 +153,34 @@ public IndexView indexView() {\n      * @param config {@link OpenApiConfig} instance to control OpenAPI behavior\n      * @return updated builder instance\n      */\n-    public MPOpenAPIBuilder openAPIConfig(OpenApiConfig config) {\n+    private MPOpenAPIBuilder openAPIConfig(OpenApiConfig config) {\n         this.openAPIConfig = Optional.of(config);\n         return this;\n     }\n \n+    MPOpenAPIBuilder config(Config mpConfig) {\n+        this.mpConfig = mpConfig;\n+        openAPIConfig(new OpenApiConfigImpl(mpConfig));\n+        return this;\n+    }\n+\n+    private static Optional<? extends Application> instantiate(Optional<Class<? extends Application>> optionalAppClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096"}, "originalPosition": 158}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9566bd8acae2bd469e435c00eb65130c0b6e06d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d9566bd8acae2bd469e435c00eb65130c0b6e06d", "committedDate": "2020-03-17T17:59:53Z", "message": "Adopt review suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MzU2NjA4", "url": "https://github.com/oracle/helidon/pull/1493#pullrequestreview-376356608", "createdAt": "2020-03-17T19:52:38Z", "commit": {"oid": "d9566bd8acae2bd469e435c00eb65130c0b6e06d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69c98fe4cdb825aab0540d1395bce82a8b52dcec", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/69c98fe4cdb825aab0540d1395bce82a8b52dcec", "committedDate": "2020-03-17T20:48:45Z", "message": "Concurrent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc9cfb7ec4d2a4ae4e03848adfd73dc96012a6d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ffc9cfb7ec4d2a4ae4e03848adfd73dc96012a6d", "committedDate": "2020-03-17T20:49:29Z", "message": "Resolve merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NDY1ODAw", "url": "https://github.com/oracle/helidon/pull/1493#pullrequestreview-376465800", "createdAt": "2020-03-17T23:10:25Z", "commit": {"oid": "ffc9cfb7ec4d2a4ae4e03848adfd73dc96012a6d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 858, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}