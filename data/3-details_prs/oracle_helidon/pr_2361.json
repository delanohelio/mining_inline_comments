{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3MjE1NzU4", "number": 2361, "title": "ClassPathContentHandler can survive tmp folder cleanup", "bodyText": "Fixes #2358\nSigned-off-by: Daniel Kec daniel.kec@oracle.com", "createdAt": "2020-09-15T11:02:17Z", "url": "https://github.com/oracle/helidon/pull/2361", "merged": true, "mergeCommit": {"oid": "86e7cdc8bd33090cd9e86e386df77223edd39304"}, "closed": true, "closedAt": "2020-09-30T19:45:00Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJFsvigH2gAyNDg3MjE1NzU4OjAwNmJkNWRhY2M2ZjhlMGQ4NTNhNWUwODg2NWM3N2JhY2VmZGIyMzk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN_OYtgFqTQ5OTYwMTYxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "006bd5dacc6f8e0d853a5e08865c77bacefdb239", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/006bd5dacc6f8e0d853a5e08865c77bacefdb239", "committedDate": "2020-09-15T11:00:57Z", "message": "ClassPathContentHandler can survive tmp folder cleanup\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NjMyNDU1", "url": "https://github.com/oracle/helidon/pull/2361#pullrequestreview-488632455", "createdAt": "2020-09-15T12:33:23Z", "commit": {"oid": "006bd5dacc6f8e0d853a5e08865c77bacefdb239"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjozMzoyM1rOHR_iHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxMjozNTozOVrOHR_nZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyODc2NQ==", "bodyText": "Do not use LOGGER.info even in tests.", "url": "https://github.com/oracle/helidon/pull/2361#discussion_r488628765", "createdAt": "2020-09-15T12:33:23Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/UnstableTempTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.Flow;\n+import java.util.function.Function;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.HashParameters;\n+import io.helidon.common.http.Http;\n+import io.helidon.common.reactive.Single;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class UnstableTempTest {\n+\n+    private static final Logger LOGGER = Logger.getLogger(UnstableTempTest.class.getName());\n+\n+    private static final String JAR_NAME = \"test.jar\";\n+    private static final String FILE_NAME = \"test.js\";\n+    private static final String FILE_CONTENT = \"alert(\\\"Hello, World!\\\");\";\n+\n+    @Test\n+    void cleanedTmpDuringRuntime() throws IOException {\n+        List<String> contents = new ArrayList<>(2);\n+\n+        Path jar = createJar();\n+        URL jarUrl = new URL(\"jar:file:\" + jar.toUri().getPath() + \"!/\" + FILE_NAME);\n+        LOGGER.info(\"Generated test jar url: \" + jarUrl.toString());\n+        ClassPathContentHandler classPathContentHandler =\n+                new ClassPathContentHandler(\"index.html\",\n+                        new ContentTypeSelector(null),\n+                        \"/\",\n+                        Thread.currentThread().getContextClassLoader());\n+\n+        // Empty headers\n+        RequestHeaders headers = mock(RequestHeaders.class);\n+        when(headers.isAccepted(any())).thenReturn(true);\n+        when(headers.acceptedTypes()).thenReturn(Collections.emptyList());\n+        ResponseHeaders responseHeaders = mock(ResponseHeaders.class);\n+\n+        ServerRequest request = Mockito.mock(ServerRequest.class);\n+        Mockito.when(request.headers()).thenReturn(headers);\n+        ServerResponse response = Mockito.mock(ServerResponse.class);\n+        MessageBodyWriterContext ctx = MessageBodyWriterContext.create(HashParameters.create());\n+        ctx.registerFilter(dataChunkPub -> {\n+            String fileContent = new String(Single.create(dataChunkPub).await().bytes());\n+            contents.add(fileContent);\n+            return Single.just(DataChunk.create(ByteBuffer.wrap(fileContent.getBytes())));\n+        });\n+        Mockito.when(response.headers()).thenReturn(responseHeaders);\n+        Mockito.when(response.send(Mockito.any(Function.class))).then(mock -> {\n+            Function<MessageBodyWriterContext, Flow.Publisher<DataChunk>> argument = mock.getArgument(0);\n+            return Single.create(argument.apply(ctx)).onError(throwable -> throwable.printStackTrace());\n+        });\n+\n+        classPathContentHandler.sendJar(Http.Method.GET, FILE_NAME, jarUrl, request, response);\n+        deleteTmpFiles();\n+        classPathContentHandler.sendJar(Http.Method.GET, FILE_NAME, jarUrl, request, response);\n+\n+        assertThat(contents, containsInAnyOrder(FILE_CONTENT, FILE_CONTENT));\n+    }\n+\n+    private void deleteTmpFiles() throws IOException {\n+        File tempDir = File.createTempFile(\"tempLocator\", \"je\").getParentFile();\n+        LOGGER.info(\"Temp dir: \" + tempDir.getAbsolutePath());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006bd5dacc6f8e0d853a5e08865c77bacefdb239"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYyOTI1OA==", "bodyText": "Use new I/O APIs (e.g. Path in this case)", "url": "https://github.com/oracle/helidon/pull/2361#discussion_r488629258", "createdAt": "2020-09-15T12:34:16Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/UnstableTempTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.Flow;\n+import java.util.function.Function;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.HashParameters;\n+import io.helidon.common.http.Http;\n+import io.helidon.common.reactive.Single;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class UnstableTempTest {\n+\n+    private static final Logger LOGGER = Logger.getLogger(UnstableTempTest.class.getName());\n+\n+    private static final String JAR_NAME = \"test.jar\";\n+    private static final String FILE_NAME = \"test.js\";\n+    private static final String FILE_CONTENT = \"alert(\\\"Hello, World!\\\");\";\n+\n+    @Test\n+    void cleanedTmpDuringRuntime() throws IOException {\n+        List<String> contents = new ArrayList<>(2);\n+\n+        Path jar = createJar();\n+        URL jarUrl = new URL(\"jar:file:\" + jar.toUri().getPath() + \"!/\" + FILE_NAME);\n+        LOGGER.info(\"Generated test jar url: \" + jarUrl.toString());\n+        ClassPathContentHandler classPathContentHandler =\n+                new ClassPathContentHandler(\"index.html\",\n+                        new ContentTypeSelector(null),\n+                        \"/\",\n+                        Thread.currentThread().getContextClassLoader());\n+\n+        // Empty headers\n+        RequestHeaders headers = mock(RequestHeaders.class);\n+        when(headers.isAccepted(any())).thenReturn(true);\n+        when(headers.acceptedTypes()).thenReturn(Collections.emptyList());\n+        ResponseHeaders responseHeaders = mock(ResponseHeaders.class);\n+\n+        ServerRequest request = Mockito.mock(ServerRequest.class);\n+        Mockito.when(request.headers()).thenReturn(headers);\n+        ServerResponse response = Mockito.mock(ServerResponse.class);\n+        MessageBodyWriterContext ctx = MessageBodyWriterContext.create(HashParameters.create());\n+        ctx.registerFilter(dataChunkPub -> {\n+            String fileContent = new String(Single.create(dataChunkPub).await().bytes());\n+            contents.add(fileContent);\n+            return Single.just(DataChunk.create(ByteBuffer.wrap(fileContent.getBytes())));\n+        });\n+        Mockito.when(response.headers()).thenReturn(responseHeaders);\n+        Mockito.when(response.send(Mockito.any(Function.class))).then(mock -> {\n+            Function<MessageBodyWriterContext, Flow.Publisher<DataChunk>> argument = mock.getArgument(0);\n+            return Single.create(argument.apply(ctx)).onError(throwable -> throwable.printStackTrace());\n+        });\n+\n+        classPathContentHandler.sendJar(Http.Method.GET, FILE_NAME, jarUrl, request, response);\n+        deleteTmpFiles();\n+        classPathContentHandler.sendJar(Http.Method.GET, FILE_NAME, jarUrl, request, response);\n+\n+        assertThat(contents, containsInAnyOrder(FILE_CONTENT, FILE_CONTENT));\n+    }\n+\n+    private void deleteTmpFiles() throws IOException {\n+        File tempDir = File.createTempFile(\"tempLocator\", \"je\").getParentFile();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006bd5dacc6f8e0d853a5e08865c77bacefdb239"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODYzMDExOA==", "bodyText": "This may be a big performance issue for the test if the temporary directory contains a lot of files.", "url": "https://github.com/oracle/helidon/pull/2361#discussion_r488630118", "createdAt": "2020-09-15T12:35:39Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/UnstableTempTest.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.concurrent.Flow;\n+import java.util.function.Function;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.HashParameters;\n+import io.helidon.common.http.Http;\n+import io.helidon.common.reactive.Single;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.equalTo;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class UnstableTempTest {\n+\n+    private static final Logger LOGGER = Logger.getLogger(UnstableTempTest.class.getName());\n+\n+    private static final String JAR_NAME = \"test.jar\";\n+    private static final String FILE_NAME = \"test.js\";\n+    private static final String FILE_CONTENT = \"alert(\\\"Hello, World!\\\");\";\n+\n+    @Test\n+    void cleanedTmpDuringRuntime() throws IOException {\n+        List<String> contents = new ArrayList<>(2);\n+\n+        Path jar = createJar();\n+        URL jarUrl = new URL(\"jar:file:\" + jar.toUri().getPath() + \"!/\" + FILE_NAME);\n+        LOGGER.info(\"Generated test jar url: \" + jarUrl.toString());\n+        ClassPathContentHandler classPathContentHandler =\n+                new ClassPathContentHandler(\"index.html\",\n+                        new ContentTypeSelector(null),\n+                        \"/\",\n+                        Thread.currentThread().getContextClassLoader());\n+\n+        // Empty headers\n+        RequestHeaders headers = mock(RequestHeaders.class);\n+        when(headers.isAccepted(any())).thenReturn(true);\n+        when(headers.acceptedTypes()).thenReturn(Collections.emptyList());\n+        ResponseHeaders responseHeaders = mock(ResponseHeaders.class);\n+\n+        ServerRequest request = Mockito.mock(ServerRequest.class);\n+        Mockito.when(request.headers()).thenReturn(headers);\n+        ServerResponse response = Mockito.mock(ServerResponse.class);\n+        MessageBodyWriterContext ctx = MessageBodyWriterContext.create(HashParameters.create());\n+        ctx.registerFilter(dataChunkPub -> {\n+            String fileContent = new String(Single.create(dataChunkPub).await().bytes());\n+            contents.add(fileContent);\n+            return Single.just(DataChunk.create(ByteBuffer.wrap(fileContent.getBytes())));\n+        });\n+        Mockito.when(response.headers()).thenReturn(responseHeaders);\n+        Mockito.when(response.send(Mockito.any(Function.class))).then(mock -> {\n+            Function<MessageBodyWriterContext, Flow.Publisher<DataChunk>> argument = mock.getArgument(0);\n+            return Single.create(argument.apply(ctx)).onError(throwable -> throwable.printStackTrace());\n+        });\n+\n+        classPathContentHandler.sendJar(Http.Method.GET, FILE_NAME, jarUrl, request, response);\n+        deleteTmpFiles();\n+        classPathContentHandler.sendJar(Http.Method.GET, FILE_NAME, jarUrl, request, response);\n+\n+        assertThat(contents, containsInAnyOrder(FILE_CONTENT, FILE_CONTENT));\n+    }\n+\n+    private void deleteTmpFiles() throws IOException {\n+        File tempDir = File.createTempFile(\"tempLocator\", \"je\").getParentFile();\n+        LOGGER.info(\"Temp dir: \" + tempDir.getAbsolutePath());\n+        //Delete all temp files\n+        for (File file : Objects.requireNonNull(tempDir.listFiles((dir, name) -> name.endsWith(\".je\")))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "006bd5dacc6f8e0d853a5e08865c77bacefdb239"}, "originalPosition": 108}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "243f3fc2970404ed7692b39e868e0185ec75fadf", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/243f3fc2970404ed7692b39e868e0185ec75fadf", "committedDate": "2020-09-15T13:51:08Z", "message": "Configurable temp dir for extracting static content from jar\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc26f8ad08c6a97f629b39081853e38deb30ea3e", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/cc26f8ad08c6a97f629b39081853e38deb30ea3e", "committedDate": "2020-09-15T14:11:50Z", "message": "NPE fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "010e4235698a164ba0f379b714ea9b9a85de68fc", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/010e4235698a164ba0f379b714ea9b9a85de68fc", "committedDate": "2020-09-15T14:25:23Z", "message": "Use Path instead of File\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0OTcyMjg3", "url": "https://github.com/oracle/helidon/pull/2361#pullrequestreview-494972287", "createdAt": "2020-09-23T19:14:28Z", "commit": {"oid": "010e4235698a164ba0f379b714ea9b9a85de68fc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOToxNDoyOFrOHW9USw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxOToxNzowMFrOHW9ZeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNTMzOQ==", "bodyText": "As this is part of production code, the property name should follow convention.\nAlso directory is more commonly used.\nSo probably tmp-dir is the right configuration here", "url": "https://github.com/oracle/helidon/pull/2361#discussion_r493835339", "createdAt": "2020-09-23T19:14:28Z", "author": {"login": "tomas-langer"}, "path": "microprofile/server/src/main/java/io/helidon/microprofile/server/ServerCdiExtension.java", "diffHunk": "@@ -212,6 +212,9 @@ private void registerClasspathStaticContent(Config config) {\n         cpBuilder.welcomeFileName(config.get(\"welcome\")\n                                           .asString()\n                                           .orElse(\"index.html\"));\n+        config.get(\"tempFolder\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010e4235698a164ba0f379b714ea9b9a85de68fc"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNjE2Mw==", "bodyText": "please rename to temporaryDirectory or tmpDir. I think both temp and folder are less used", "url": "https://github.com/oracle/helidon/pull/2361#discussion_r493836163", "createdAt": "2020-09-23T19:15:59Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/main/java/io/helidon/webserver/StaticContentSupport.java", "diffHunk": "@@ -195,6 +196,17 @@ public Builder welcomeFileName(String welcomeFileName) {\n             return this;\n         }\n \n+        /**\n+         * Sets custom temporary folder for extracting static content from a jar.\n+         *\n+         * @param tempFolder custom temporary folder\n+         * @return updated builder\n+         */\n+        public Builder tempFolder(Path tempFolder) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010e4235698a164ba0f379b714ea9b9a85de68fc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzgzNjY2NA==", "bodyText": "Naming convention - this should be tmpDir or tempDir - all upper case is reserved for constants", "url": "https://github.com/oracle/helidon/pull/2361#discussion_r493836664", "createdAt": "2020-09-23T19:17:00Z", "author": {"login": "tomas-langer"}, "path": "webserver/webserver/src/test/java/io/helidon/webserver/UnstableTempTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver;\n+\n+import java.io.BufferedOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.net.URL;\n+import java.nio.ByteBuffer;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.concurrent.Flow;\n+import java.util.function.Function;\n+import java.util.jar.Attributes;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.HashParameters;\n+import io.helidon.common.http.Http;\n+import io.helidon.common.reactive.Single;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.junit.jupiter.api.Assertions.fail;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class UnstableTempTest {\n+\n+    private static final Logger LOGGER = Logger.getLogger(UnstableTempTest.class.getName());\n+\n+    private static final String JAR_NAME = \"test.jar\";\n+    private static final String FILE_NAME = \"test.js\";\n+    private static final String FILE_CONTENT = \"alert(\\\"Hello, World!\\\");\";\n+    private static Path TEMP_DIR;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "010e4235698a164ba0f379b714ea9b9a85de68fc"}, "originalPosition": 63}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c56c303a6b569ea7484293573013b9ea7bd5065f", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/c56c303a6b569ea7484293573013b9ea7bd5065f", "committedDate": "2020-09-28T18:50:53Z", "message": "Review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NjAxNjEy", "url": "https://github.com/oracle/helidon/pull/2361#pullrequestreview-499601612", "createdAt": "2020-09-30T16:17:59Z", "commit": {"oid": "c56c303a6b569ea7484293573013b9ea7bd5065f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 459, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}