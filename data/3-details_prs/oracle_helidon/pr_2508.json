{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3Mjk4Mzgz", "number": 2508, "title": "Concat array enhancement", "bodyText": "More effective cancellation handling\nBetter handling of negative requests\n\nJMH test results:\nBenchmark                                     Mode  Cnt        Score        Error  Units\nConcatArrayComparison.reqMaxNewCA            thrpt   10   742789.861 \u00b1  25826.167  ops/s\nConcatArrayComparison.reqMaxOldCA            thrpt   10   716121.440 \u00b1  28539.035  ops/s\nConcatArrayComparison.variableRequestsNewCA  thrpt   10  6538445.756 \u00b1 629438.611  ops/s\nConcatArrayComparison.variableRequestsOldCA  thrpt   10  5267535.840 \u00b1 650941.922  ops/s", "createdAt": "2020-11-08T12:35:20Z", "url": "https://github.com/oracle/helidon/pull/2508", "merged": true, "mergeCommit": {"oid": "a35caa9850604b53ffd84e84db12017cc2abb5e7"}, "closed": true, "closedAt": "2021-01-25T17:58:15Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdflT74gBqjQwMzEzODkzNTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdzqMHQgFqTU3NTYyMjU1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "97e2fc2a63763b9e91c653fdd3c6e08e8bb5f5b0", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/97e2fc2a63763b9e91c653fdd3c6e08e8bb5f5b0", "committedDate": "2020-11-08T13:41:38Z", "message": "Checkstyle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "edff27426ca6a155c5f07fd5b71460ddfb1ec228", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/edff27426ca6a155c5f07fd5b71460ddfb1ec228", "committedDate": "2020-11-24T08:21:30Z", "message": "Concat array enhancement\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "edff27426ca6a155c5f07fd5b71460ddfb1ec228", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/edff27426ca6a155c5f07fd5b71460ddfb1ec228", "committedDate": "2020-11-24T08:21:30Z", "message": "Concat array enhancement\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzA0NjI5", "url": "https://github.com/oracle/helidon/pull/2508#pullrequestreview-537304629", "createdAt": "2020-11-24T09:37:57Z", "commit": {"oid": "edff27426ca6a155c5f07fd5b71460ddfb1ec228"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3NTM4ODUw", "url": "https://github.com/oracle/helidon/pull/2508#pullrequestreview-537538850", "createdAt": "2020-11-24T14:21:35Z", "commit": {"oid": "edff27426ca6a155c5f07fd5b71460ddfb1ec228"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMTozNVrOH5DERw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNDoyMTozNVrOH5DERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTU4MTEyNw==", "bodyText": "Two things need doing:\nlong oldProduced = produced; on the line before change of REQUESTED, then use oldProduced to the end of this method.\nThis addresses the case raised by @akarnok - concurrent request results in concurrent onNext, which updates produced.\nand\nREQUESTED.setVolatile(this, p0) to replace setOpaque - opaque doesn't guarantee ordering with other stores.", "url": "https://github.com/oracle/helidon/pull/2508#discussion_r529581127", "createdAt": "2020-11-24T14:21:35Z", "author": {"login": "olotenko"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java", "diffHunk": "@@ -35,31 +36,89 @@\n     public void subscribe(Flow.Subscriber<? super T> subscriber) {\n         ConcatArraySubscriber<T> parent = new ConcatArraySubscriber<>(subscriber, sources);\n         subscriber.onSubscribe(parent);\n-        parent.nextSource();\n+        parent.nextSource(parent.produced);\n     }\n \n-    static final class ConcatArraySubscriber<T> extends SubscriptionArbiter\n-    implements Flow.Subscriber<T> {\n+    protected static final class ConcatArraySubscriber<T>\n+    implements Flow.Subscriber<T>, Flow.Subscription {\n \n         private final Flow.Subscriber<? super T> downstream;\n \n         private final Flow.Publisher<T>[] sources;\n \n-        private final AtomicInteger wip;\n+        private Flow.Subscription subscription;\n \n         private int index;\n \n-        private long produced;\n+        private long produced = INIT;\n+\n+        private volatile long requested = SEE_OTHER;\n+        private volatile long pending = INIT;\n+        private volatile Thread lastThreadCompleting;\n+        private boolean redo;\n+\n+        static final long BAD = Long.MIN_VALUE;\n+        static final long CANCEL = Long.MIN_VALUE + 1;\n+        static final long SEE_OTHER = Long.MIN_VALUE + 2;\n+        static final long INIT = Long.MIN_VALUE + 3;\n+\n+        static final VarHandle REQUESTED;\n+        static final VarHandle PENDING;\n+        static final VarHandle LASTTHREADCOMPLETING;\n+\n+        static {\n+            try {\n+                MethodHandles.Lookup lookup = MethodHandles.lookup();\n+                REQUESTED = lookup.findVarHandle(ConcatArraySubscriber.class, \"requested\", long.class);\n+                PENDING = lookup.findVarHandle(ConcatArraySubscriber.class, \"pending\", long.class);\n+                LASTTHREADCOMPLETING = lookup\n+                        .findVarHandle(ConcatArraySubscriber.class, \"lastThreadCompleting\", Thread.class);\n+            } catch (Exception e) {\n+                throw new Error(\"Expected lookup to succeed\", e);\n+            }\n+        }\n \n         ConcatArraySubscriber(Flow.Subscriber<? super T> downstream, Flow.Publisher<T>[] sources) {\n             this.downstream = downstream;\n             this.sources = sources;\n-            this.wip = new AtomicInteger();\n         }\n \n         @Override\n         public void onSubscribe(Flow.Subscription subscription) {\n-            super.setSubscription(subscription);\n+            long p0 = pending;\n+            if (p0 == CANCEL) {\n+               subscription.cancel();\n+               return;\n+            }\n+\n+            produced++; // assert: matching request(1) has been done by nextSource()\n+            this.subscription = subscription;\n+            // assert: requested == SEE_OTHER\n+            REQUESTED.setOpaque(this, p0); // assert: p0 is guaranteed to be a value of requested never seen before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edff27426ca6a155c5f07fd5b71460ddfb1ec228"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67f59cbce720744bf1057da1e9c734ae26e9a4d1", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/67f59cbce720744bf1057da1e9c734ae26e9a4d1", "committedDate": "2021-01-06T17:18:51Z", "message": "Assumes some Publishers are not fully conformant and may issue onNext/onComplete concurrently with onSubscribe in response to concurrent request().\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b36aeacac8d97355b89b67016cfae4ced655846", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/4b36aeacac8d97355b89b67016cfae4ced655846", "committedDate": "2021-01-06T20:17:55Z", "message": "Copyright\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNDk5Mzcw", "url": "https://github.com/oracle/helidon/pull/2508#pullrequestreview-563499370", "createdAt": "2021-01-07T13:51:25Z", "commit": {"oid": "4b36aeacac8d97355b89b67016cfae4ced655846"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo1MToyNVrOIPtGfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wN1QxMzo1MToyNVrOIPtGfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MzMzODQ5NA==", "bodyText": "Reading this again, strictly speaking this fence is not needed, because we have stronger fences between the stores targeted by this fence. But no need to change the code as the cost of this fence on the target platforms is zero.", "url": "https://github.com/oracle/helidon/pull/2508#discussion_r553338494", "createdAt": "2021-01-07T13:51:25Z", "author": {"login": "olotenko"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiConcatArray.java", "diffHunk": "@@ -70,38 +141,215 @@ public void onNext(T item) {\n \n         @Override\n         public void onError(Throwable throwable) {\n+            REQUESTED.setOpaque(this, CANCEL);\n             downstream.onError(throwable);\n         }\n \n         @Override\n         public void onComplete() {\n-            long produced = this.produced;\n-            if (produced != 0L) {\n-                this.produced = 0L;\n-                super.produced(produced);\n+            Thread current = Thread.currentThread();\n+            if (LASTTHREADCOMPLETING.getOpaque(this) == current) {\n+                redo = true;\n+                return;\n+            }\n+\n+            LASTTHREADCOMPLETING.setOpaque(this, current);\n+            VarHandle.storeStoreFence();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b36aeacac8d97355b89b67016cfae4ced655846"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTYzNTAxMzg3", "url": "https://github.com/oracle/helidon/pull/2508#pullrequestreview-563501387", "createdAt": "2021-01-07T13:53:59Z", "commit": {"oid": "4b36aeacac8d97355b89b67016cfae4ced655846"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NjIxNTMw", "url": "https://github.com/oracle/helidon/pull/2508#pullrequestreview-575621530", "createdAt": "2021-01-25T17:15:30Z", "commit": {"oid": "4b36aeacac8d97355b89b67016cfae4ced655846"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1NjIyNTU3", "url": "https://github.com/oracle/helidon/pull/2508#pullrequestreview-575622557", "createdAt": "2021-01-25T17:16:37Z", "commit": {"oid": "4b36aeacac8d97355b89b67016cfae4ced655846"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 364, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}