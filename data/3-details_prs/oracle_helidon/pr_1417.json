{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODY4NTgz", "number": 1417, "title": "Config change support refactoring", "bodyText": "Fixes #579\nFixes #1183\nFixes #578", "createdAt": "2020-02-20T16:57:07Z", "url": "https://github.com/oracle/helidon/pull/1417", "merged": true, "mergeCommit": {"oid": "c38554957d19faad9fca04aaf15021c0ae7411e8"}, "closed": true, "closedAt": "2020-03-09T09:48:20Z", "author": {"login": "tomas-langer"}, "timelineItems": {"totalCount": 43, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGOMAogBqjMwNTcyMzU2MzY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcKyLNGgFqTM2OTkxNzY2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b6a5aa85fbf26d7c0c0111b49a5ee75b783c675d", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/b6a5aa85fbf26d7c0c0111b49a5ee75b783c675d", "committedDate": "2020-02-20T16:54:55Z", "message": "Checkstyle fixed."}, "afterCommit": {"oid": "45081c1047d4c0ba7d7361e862bad77825e5941b", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/45081c1047d4c0ba7d7361e862bad77825e5941b", "committedDate": "2020-02-20T17:00:51Z", "message": "Checkstyle fixed."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b7ce8a8f5423a0ce4f4fae1a11d509ee2431de3", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/3b7ce8a8f5423a0ce4f4fae1a11d509ee2431de3", "committedDate": "2020-02-26T13:23:55Z", "message": "Documentation.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "9c23c216fb8af2ff8933246060731c8eb0d11daa", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/9c23c216fb8af2ff8933246060731c8eb0d11daa", "committedDate": "2020-02-26T13:40:55Z", "message": "Documentation + javadoc fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc748ee5d8d50e19e10fa2e4ef679d5ea7f3bb03", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/fc748ee5d8d50e19e10fa2e4ef679d5ea7f3bb03", "committedDate": "2020-02-26T18:03:38Z", "message": "Removal of project Reactor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4371352b89cfa17393913d7ba0bf178c8ca83675", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/4371352b89cfa17393913d7ba0bf178c8ca83675", "committedDate": "2020-02-26T18:03:38Z", "message": "Change support refactoring.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92b8ae69dabc68f13ee79574de97d958375ab227", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/92b8ae69dabc68f13ee79574de97d958375ab227", "committedDate": "2020-02-26T18:03:39Z", "message": "Big change polling + changes + lazy etc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3992111265dee49533c943c0289f025852d21695", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/3992111265dee49533c943c0289f025852d21695", "committedDate": "2020-02-26T18:03:40Z", "message": "Big change polling + changes + lazy etc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2456646a1ba92bafd3206c646a3870067910d89", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f2456646a1ba92bafd3206c646a3870067910d89", "committedDate": "2020-02-26T18:03:41Z", "message": "File and map sources."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd1476ac2b460f69d4ecd130679ee21e5bd5b5b8", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/bd1476ac2b460f69d4ecd130679ee21e5bd5b5b8", "committedDate": "2020-02-26T18:03:42Z", "message": "All config source types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64af0409503120e3b46e59150d128ad149287f35", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/64af0409503120e3b46e59150d128ad149287f35", "committedDate": "2020-02-26T18:03:43Z", "message": "moving..."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcf3bad4feb4e506717825fe0bea4626978dfc3a", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/fcf3bad4feb4e506717825fe0bea4626978dfc3a", "committedDate": "2020-02-26T18:03:43Z", "message": "another one"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "623be09ffaf8417827c5fdd7a0b020f0e1745a0c", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/623be09ffaf8417827c5fdd7a0b020f0e1745a0c", "committedDate": "2020-02-26T18:03:44Z", "message": "fff\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7ac6656309092e0af25fcce349cb122aeb9f6cff", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/7ac6656309092e0af25fcce349cb122aeb9f6cff", "committedDate": "2020-02-26T18:03:45Z", "message": "ggg\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f24730bf321cd9aaf03bb6a7150bbf43342dc783", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f24730bf321cd9aaf03bb6a7150bbf43342dc783", "committedDate": "2020-02-26T18:03:45Z", "message": "aaa"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e9508dfca8449f9c36e48b03321ae3ca7843189e", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/e9508dfca8449f9c36e48b03321ae3ca7843189e", "committedDate": "2020-02-26T18:03:46Z", "message": "bbb\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0baaecf719b7ddea83580d4a5d22fd7b793cda84", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/0baaecf719b7ddea83580d4a5d22fd7b793cda84", "committedDate": "2020-02-26T18:03:47Z", "message": "uuu"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1d0b6f7c31bda5a302bac7d7905e9d51e1a48da", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f1d0b6f7c31bda5a302bac7d7905e9d51e1a48da", "committedDate": "2020-02-26T18:03:48Z", "message": "ccc\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f5c1b6704a94023a83e1b6299cdf3f9f3d259ba5", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f5c1b6704a94023a83e1b6299cdf3f9f3d259ba5", "committedDate": "2020-02-26T18:03:49Z", "message": "vvv"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4161e40e743cca6d09ea3db05456c1645ff6a57", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/b4161e40e743cca6d09ea3db05456c1645ff6a57", "committedDate": "2020-02-26T18:04:02Z", "message": "www"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c374cda802f9973de971de372beb731772b8ec2b", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/c374cda802f9973de971de372beb731772b8ec2b", "committedDate": "2020-02-26T18:04:02Z", "message": "ddd\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d8445371dd47beceea5975c0edbf30176061dcd", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/4d8445371dd47beceea5975c0edbf30176061dcd", "committedDate": "2020-02-26T18:04:03Z", "message": "eee\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ba007f766cc041261eebdf630c107d727bbbe64", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/6ba007f766cc041261eebdf630c107d727bbbe64", "committedDate": "2020-02-26T18:04:03Z", "message": "xxx"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6180c143d7aae356c7df1a5a950067ae369401c", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/b6180c143d7aae356c7df1a5a950067ae369401c", "committedDate": "2020-02-26T18:04:04Z", "message": "Config core works.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "199f757860e24f46303b9ddfda3eaa8f0bf3a41b", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/199f757860e24f46303b9ddfda3eaa8f0bf3a41b", "committedDate": "2020-02-26T18:04:05Z", "message": "yyy"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2caaab1967a9a70289d6cd4697eb0bc1cdea6b7", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f2caaab1967a9a70289d6cd4697eb0bc1cdea6b7", "committedDate": "2020-02-26T18:04:05Z", "message": "Everything but checkstyle and copyright.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2476b30225db9f1f4b642923bf6bb7ebcdee6447", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/2476b30225db9f1f4b642923bf6bb7ebcdee6447", "committedDate": "2020-02-26T18:04:05Z", "message": "Checkstyle fixed."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8938e772b4252fa98fc9d12b33267a3b590e226c", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/8938e772b4252fa98fc9d12b33267a3b590e226c", "committedDate": "2020-02-26T18:04:06Z", "message": "Copyright fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f34b723672c93850ac9eb490d5c87af576e57f8", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/1f34b723672c93850ac9eb490d5c87af576e57f8", "committedDate": "2020-02-26T18:04:06Z", "message": "Copyright fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6869b6e2124481b27c6b615c4f556c24e0f4054e", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/6869b6e2124481b27c6b615c4f556c24e0f4054e", "committedDate": "2020-02-26T18:04:07Z", "message": "Documentation + javadoc fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53d52349696f5b7ec4004e49065f4c32a8429399", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/53d52349696f5b7ec4004e49065f4c32a8429399", "committedDate": "2020-02-26T18:04:08Z", "message": "Better failure if timeout.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c23c216fb8af2ff8933246060731c8eb0d11daa", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/9c23c216fb8af2ff8933246060731c8eb0d11daa", "committedDate": "2020-02-26T13:40:55Z", "message": "Documentation + javadoc fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "5b3328d390ff7e4fe0c464a36d21fcb86cffec89", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/5b3328d390ff7e4fe0c464a36d21fcb86cffec89", "committedDate": "2020-02-27T09:47:55Z", "message": "Rebased, cleaned disabled tests.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/23e8d221d71445f12913435739fef10eb8cc4617", "committedDate": "2020-02-27T10:00:42Z", "message": "Rebased, cleaned disabled tests.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b3328d390ff7e4fe0c464a36d21fcb86cffec89", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/5b3328d390ff7e4fe0c464a36d21fcb86cffec89", "committedDate": "2020-02-27T09:47:55Z", "message": "Rebased, cleaned disabled tests.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/23e8d221d71445f12913435739fef10eb8cc4617", "committedDate": "2020-02-27T10:00:42Z", "message": "Rebased, cleaned disabled tests.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1NzgzMzU3", "url": "https://github.com/oracle/helidon/pull/1417#pullrequestreview-365783357", "createdAt": "2020-02-27T16:03:04Z", "commit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2NDI4MDY5", "url": "https://github.com/oracle/helidon/pull/1417#pullrequestreview-366428069", "createdAt": "2020-02-28T14:18:19Z", "commit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNDoxODoxOVrOFv2bZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQxNToxNToyNFrOFv4XQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTcxOTE0MA==", "bodyText": "Could it be avoided by adding another from method?\n    static ListNodeBuilderImpl from(ListNode elements, Function<String, String> resolveTokenFunction) {\n        ListNodeBuilderImpl builder = new ListNodeBuilderImpl(resolveTokenFunction);\n        elements.forEach(builder::addNode);\n        elements.value().ifPresent(builder::value);\n        return builder;\n    }", "url": "https://github.com/oracle/helidon/pull/1417#discussion_r385719140", "createdAt": "2020-02-28T14:18:19Z", "author": {"login": "danielkec"}, "path": "config/config/src/main/java/io/helidon/config/ListNodeBuilderImpl.java", "diffHunk": "@@ -97,6 +97,13 @@ public ListNodeBuilderImpl value(String value) {\n         return this;\n     }\n \n+    // this is a shortcut method to keep current fluent code\n+    // even though value is now optional\n+    ListNodeBuilderImpl value(Optional<String> value) {\n+        value.ifPresent(this::value);\n+        return this;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc0NzUwMQ==", "bodyText": "List<ObjectNode> objectNodes = loadedData.stream()\n                .map(RuntimeWithData::data)\n                .flatMap(Optional::stream)\n                .collect(Collectors.toList());", "url": "https://github.com/oracle/helidon/pull/1417#discussion_r385747501", "createdAt": "2020-02-28T15:09:35Z", "author": {"login": "danielkec"}, "path": "config/config/src/main/java/io/helidon/config/ConfigSourcesRuntime.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import io.helidon.config.spi.ConfigNode;\n+import io.helidon.config.spi.ConfigNode.ObjectNode;\n+import io.helidon.config.spi.MergingStrategy;\n+\n+/**\n+ * Runtime of all configured configuration sources.\n+ */\n+final class ConfigSourcesRuntime {\n+    private final List<RuntimeWithData> loadedData = new LinkedList<>();\n+\n+    private List<ConfigSourceRuntimeBase> allSources;\n+    private MergingStrategy mergingStrategy;\n+    private Consumer<Optional<ObjectNode>> changeListener;\n+\n+    ConfigSourcesRuntime(List<ConfigSourceRuntimeBase> allSources,\n+                         MergingStrategy mergingStrategy) {\n+        this.allSources = allSources;\n+        this.mergingStrategy = mergingStrategy;\n+    }\n+\n+    // for the purpose of tests\n+    static ConfigSourcesRuntime empty() {\n+        return new ConfigSourcesRuntime(List.of(new ConfigSourceRuntimeImpl(null, ConfigSources.empty())),\n+                                        MergingStrategy.fallback());\n+    }\n+\n+    List<ConfigSourceRuntimeBase> allSources() {\n+        return allSources;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ConfigSourcesRuntime that = (ConfigSourcesRuntime) o;\n+        return allSources.equals(that.allSources);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(allSources);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return allSources.toString();\n+    }\n+\n+    void changeListener(Consumer<Optional<ObjectNode>> changeListener) {\n+        this.changeListener = changeListener;\n+    }\n+\n+    void startChanges() {\n+        loadedData.stream()\n+                .filter(loaded -> loaded.runtime().changesSupported())\n+                .forEach(loaded -> loaded.runtime()\n+                        .onChange((key, configNode) -> {\n+                            loaded.data(processChange(loaded.data, key, configNode));\n+                            changeListener.accept(latest());\n+                        }));\n+    }\n+\n+    private Optional<ObjectNode> processChange(Optional<ObjectNode> oldData, String changedKey, ConfigNode changeNode) {\n+        ConfigKeyImpl key = ConfigKeyImpl.of(changedKey);\n+        ObjectNode changeObjectNode = toObjectNode(changeNode);\n+\n+        if (key.isRoot()) {\n+            // we have a root, no merging with original data, just return it\n+            return Optional.of(changeObjectNode);\n+        }\n+\n+        ObjectNode newRootNode = ObjectNode.builder().addObject(changedKey, changeObjectNode).build();\n+\n+        // old data was empty, this is the only data we have\n+        if (oldData.isEmpty()) {\n+            return Optional.of(newRootNode);\n+        }\n+\n+        // we had data, now we have new data (not on root), let's merge\n+        return Optional.of(mergingStrategy.merge(List.of(newRootNode, oldData.get())));\n+    }\n+\n+    private ObjectNode toObjectNode(ConfigNode changeNode) {\n+        switch (changeNode.nodeType()) {\n+        case OBJECT:\n+            return (ObjectNode) changeNode;\n+        case LIST:\n+            return ObjectNode.builder().addList(\"\", (ConfigNode.ListNode) changeNode).build();\n+        case VALUE:\n+            return ObjectNode.builder().value(((ConfigNode.ValueNode) changeNode).get()).build();\n+        default:\n+            throw new IllegalArgumentException(\"Unsupported node type: \" + changeNode.nodeType());\n+        }\n+    }\n+\n+    synchronized Optional<ObjectNode> latest() {\n+        List<ObjectNode> objectNodes = loadedData.stream()\n+                .map(RuntimeWithData::data)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDQ5NA==", "bodyText": "Optional is such ... \ud83d\ude1e\n.flatMap(Optional::stream)\n.flatMap(this::streamKeys)", "url": "https://github.com/oracle/helidon/pull/1417#discussion_r385750494", "createdAt": "2020-02-28T15:14:47Z", "author": {"login": "danielkec"}, "path": "config/config/src/main/java/io/helidon/config/ConfigSourcesRuntime.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import io.helidon.config.spi.ConfigNode;\n+import io.helidon.config.spi.ConfigNode.ObjectNode;\n+import io.helidon.config.spi.MergingStrategy;\n+\n+/**\n+ * Runtime of all configured configuration sources.\n+ */\n+final class ConfigSourcesRuntime {\n+    private final List<RuntimeWithData> loadedData = new LinkedList<>();\n+\n+    private List<ConfigSourceRuntimeBase> allSources;\n+    private MergingStrategy mergingStrategy;\n+    private Consumer<Optional<ObjectNode>> changeListener;\n+\n+    ConfigSourcesRuntime(List<ConfigSourceRuntimeBase> allSources,\n+                         MergingStrategy mergingStrategy) {\n+        this.allSources = allSources;\n+        this.mergingStrategy = mergingStrategy;\n+    }\n+\n+    // for the purpose of tests\n+    static ConfigSourcesRuntime empty() {\n+        return new ConfigSourcesRuntime(List.of(new ConfigSourceRuntimeImpl(null, ConfigSources.empty())),\n+                                        MergingStrategy.fallback());\n+    }\n+\n+    List<ConfigSourceRuntimeBase> allSources() {\n+        return allSources;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ConfigSourcesRuntime that = (ConfigSourcesRuntime) o;\n+        return allSources.equals(that.allSources);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(allSources);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return allSources.toString();\n+    }\n+\n+    void changeListener(Consumer<Optional<ObjectNode>> changeListener) {\n+        this.changeListener = changeListener;\n+    }\n+\n+    void startChanges() {\n+        loadedData.stream()\n+                .filter(loaded -> loaded.runtime().changesSupported())\n+                .forEach(loaded -> loaded.runtime()\n+                        .onChange((key, configNode) -> {\n+                            loaded.data(processChange(loaded.data, key, configNode));\n+                            changeListener.accept(latest());\n+                        }));\n+    }\n+\n+    private Optional<ObjectNode> processChange(Optional<ObjectNode> oldData, String changedKey, ConfigNode changeNode) {\n+        ConfigKeyImpl key = ConfigKeyImpl.of(changedKey);\n+        ObjectNode changeObjectNode = toObjectNode(changeNode);\n+\n+        if (key.isRoot()) {\n+            // we have a root, no merging with original data, just return it\n+            return Optional.of(changeObjectNode);\n+        }\n+\n+        ObjectNode newRootNode = ObjectNode.builder().addObject(changedKey, changeObjectNode).build();\n+\n+        // old data was empty, this is the only data we have\n+        if (oldData.isEmpty()) {\n+            return Optional.of(newRootNode);\n+        }\n+\n+        // we had data, now we have new data (not on root), let's merge\n+        return Optional.of(mergingStrategy.merge(List.of(newRootNode, oldData.get())));\n+    }\n+\n+    private ObjectNode toObjectNode(ConfigNode changeNode) {\n+        switch (changeNode.nodeType()) {\n+        case OBJECT:\n+            return (ObjectNode) changeNode;\n+        case LIST:\n+            return ObjectNode.builder().addList(\"\", (ConfigNode.ListNode) changeNode).build();\n+        case VALUE:\n+            return ObjectNode.builder().value(((ConfigNode.ValueNode) changeNode).get()).build();\n+        default:\n+            throw new IllegalArgumentException(\"Unsupported node type: \" + changeNode.nodeType());\n+        }\n+    }\n+\n+    synchronized Optional<ObjectNode> latest() {\n+        List<ObjectNode> objectNodes = loadedData.stream()\n+                .map(RuntimeWithData::data)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(Collectors.toList());\n+\n+        return Optional.of(mergingStrategy.merge(objectNodes));\n+    }\n+\n+    synchronized Optional<ObjectNode> load() {\n+\n+        for (ConfigSourceRuntimeBase source : allSources) {\n+            if (source.isLazy()) {\n+                loadedData.add(new RuntimeWithData(source, Optional.empty()));\n+            } else {\n+                loadedData.add(new RuntimeWithData(source, source.load()\n+                        .map(ObjectNodeImpl::wrap)\n+                        .map(objectNode -> objectNode.initDescription(source.description()))));\n+            }\n+        }\n+\n+        Set<String> allKeys = loadedData.stream()\n+                .map(RuntimeWithData::data)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .flatMap(this::streamKeys)\n+                .collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTc1MDg1MA==", "bodyText": "same", "url": "https://github.com/oracle/helidon/pull/1417#discussion_r385750850", "createdAt": "2020-02-28T15:15:24Z", "author": {"login": "danielkec"}, "path": "config/config/src/main/java/io/helidon/config/ConfigSourcesRuntime.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config;\n+\n+import java.util.HashMap;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Consumer;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+\n+import io.helidon.config.spi.ConfigNode;\n+import io.helidon.config.spi.ConfigNode.ObjectNode;\n+import io.helidon.config.spi.MergingStrategy;\n+\n+/**\n+ * Runtime of all configured configuration sources.\n+ */\n+final class ConfigSourcesRuntime {\n+    private final List<RuntimeWithData> loadedData = new LinkedList<>();\n+\n+    private List<ConfigSourceRuntimeBase> allSources;\n+    private MergingStrategy mergingStrategy;\n+    private Consumer<Optional<ObjectNode>> changeListener;\n+\n+    ConfigSourcesRuntime(List<ConfigSourceRuntimeBase> allSources,\n+                         MergingStrategy mergingStrategy) {\n+        this.allSources = allSources;\n+        this.mergingStrategy = mergingStrategy;\n+    }\n+\n+    // for the purpose of tests\n+    static ConfigSourcesRuntime empty() {\n+        return new ConfigSourcesRuntime(List.of(new ConfigSourceRuntimeImpl(null, ConfigSources.empty())),\n+                                        MergingStrategy.fallback());\n+    }\n+\n+    List<ConfigSourceRuntimeBase> allSources() {\n+        return allSources;\n+    }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ConfigSourcesRuntime that = (ConfigSourcesRuntime) o;\n+        return allSources.equals(that.allSources);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(allSources);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return allSources.toString();\n+    }\n+\n+    void changeListener(Consumer<Optional<ObjectNode>> changeListener) {\n+        this.changeListener = changeListener;\n+    }\n+\n+    void startChanges() {\n+        loadedData.stream()\n+                .filter(loaded -> loaded.runtime().changesSupported())\n+                .forEach(loaded -> loaded.runtime()\n+                        .onChange((key, configNode) -> {\n+                            loaded.data(processChange(loaded.data, key, configNode));\n+                            changeListener.accept(latest());\n+                        }));\n+    }\n+\n+    private Optional<ObjectNode> processChange(Optional<ObjectNode> oldData, String changedKey, ConfigNode changeNode) {\n+        ConfigKeyImpl key = ConfigKeyImpl.of(changedKey);\n+        ObjectNode changeObjectNode = toObjectNode(changeNode);\n+\n+        if (key.isRoot()) {\n+            // we have a root, no merging with original data, just return it\n+            return Optional.of(changeObjectNode);\n+        }\n+\n+        ObjectNode newRootNode = ObjectNode.builder().addObject(changedKey, changeObjectNode).build();\n+\n+        // old data was empty, this is the only data we have\n+        if (oldData.isEmpty()) {\n+            return Optional.of(newRootNode);\n+        }\n+\n+        // we had data, now we have new data (not on root), let's merge\n+        return Optional.of(mergingStrategy.merge(List.of(newRootNode, oldData.get())));\n+    }\n+\n+    private ObjectNode toObjectNode(ConfigNode changeNode) {\n+        switch (changeNode.nodeType()) {\n+        case OBJECT:\n+            return (ObjectNode) changeNode;\n+        case LIST:\n+            return ObjectNode.builder().addList(\"\", (ConfigNode.ListNode) changeNode).build();\n+        case VALUE:\n+            return ObjectNode.builder().value(((ConfigNode.ValueNode) changeNode).get()).build();\n+        default:\n+            throw new IllegalArgumentException(\"Unsupported node type: \" + changeNode.nodeType());\n+        }\n+    }\n+\n+    synchronized Optional<ObjectNode> latest() {\n+        List<ObjectNode> objectNodes = loadedData.stream()\n+                .map(RuntimeWithData::data)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .collect(Collectors.toList());\n+\n+        return Optional.of(mergingStrategy.merge(objectNodes));\n+    }\n+\n+    synchronized Optional<ObjectNode> load() {\n+\n+        for (ConfigSourceRuntimeBase source : allSources) {\n+            if (source.isLazy()) {\n+                loadedData.add(new RuntimeWithData(source, Optional.empty()));\n+            } else {\n+                loadedData.add(new RuntimeWithData(source, source.load()\n+                        .map(ObjectNodeImpl::wrap)\n+                        .map(objectNode -> objectNode.initDescription(source.description()))));\n+            }\n+        }\n+\n+        Set<String> allKeys = loadedData.stream()\n+                .map(RuntimeWithData::data)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .flatMap(this::streamKeys)\n+                .collect(Collectors.toSet());\n+\n+        if (allKeys.isEmpty()) {\n+            return Optional.empty();\n+        }\n+\n+        // now we have all the keys, let's load them from the lazy sources\n+        for (RuntimeWithData data : loadedData) {\n+            if (data.runtime().isLazy()) {\n+                data.data(loadLazy(data.runtime(), allKeys));\n+            }\n+        }\n+\n+        List<ObjectNode> objectNodes = loadedData.stream()\n+                .map(RuntimeWithData::data)\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "23e8d221d71445f12913435739fef10eb8cc4617"}, "originalPosition": 172}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71c114b44f9b4d38440dc08d832b5fec6029cfd4", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/71c114b44f9b4d38440dc08d832b5fec6029cfd4", "committedDate": "2020-03-04T16:13:34Z", "message": "Fix SE native image test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "baa078701de5d30433607e1c4ef9d9baf8a3b1f1", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/baa078701de5d30433607e1c4ef9d9baf8a3b1f1", "committedDate": "2020-03-05T12:56:32Z", "message": "Review comments incorporated."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73bea275904651d00a4dc43c8b49ced0a0de05aa", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/73bea275904651d00a4dc43c8b49ced0a0de05aa", "committedDate": "2020-03-05T13:04:46Z", "message": "Copyright fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10cf7c4d8f92b6eb48d09b8025fd7663f690bead", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/10cf7c4d8f92b6eb48d09b8025fd7663f690bead", "committedDate": "2020-03-05T14:37:51Z", "message": "Intermittent failure fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Njk5MTk2", "url": "https://github.com/oracle/helidon/pull/1417#pullrequestreview-369699196", "createdAt": "2020-03-05T16:03:35Z", "commit": {"oid": "10cf7c4d8f92b6eb48d09b8025fd7663f690bead"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28511b388554b2be7df8fc3d9f5eda79871b66c3", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/28511b388554b2be7df8fc3d9f5eda79871b66c3", "committedDate": "2020-03-05T16:41:06Z", "message": "Changelog update."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e0905bcf341ba4d6e36476f954b041f2df7a70f", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/3e0905bcf341ba4d6e36476f954b041f2df7a70f", "committedDate": "2020-03-05T17:01:49Z", "message": "Fixed intermittent test failure - race condition."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5Nzg4MTUy", "url": "https://github.com/oracle/helidon/pull/1417#pullrequestreview-369788152", "createdAt": "2020-03-05T17:55:48Z", "commit": {"oid": "3e0905bcf341ba4d6e36476f954b041f2df7a70f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTE3NjY1", "url": "https://github.com/oracle/helidon/pull/1417#pullrequestreview-369917665", "createdAt": "2020-03-05T21:12:49Z", "commit": {"oid": "3e0905bcf341ba4d6e36476f954b041f2df7a70f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}