{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzQxNzc0", "number": 2523, "title": "Json stream writers", "bodyText": "Fixes #1794\nFixes #1795", "createdAt": "2020-11-12T09:20:45Z", "url": "https://github.com/oracle/helidon/pull/2523", "merged": true, "mergeCommit": {"oid": "520bee09bc9db32887053e3737f8a88b7568d041"}, "closed": true, "closedAt": "2020-11-19T08:40:45Z", "author": {"login": "Verdent"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdbFnoMAH2gAyNTE5NzQxNzc0OjI3YzIwMTdjNjkzMDA4MzdhZTFiZDgyNGRjNzI3NGRhYzU4NDBhMGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdd1Ss1AFqTUzMzkwNTIwNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "27c2017c69300837ae1bd824dc7274dac5840a0e", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/27c2017c69300837ae1bd824dc7274dac5840a0e", "committedDate": "2020-11-10T09:06:00Z", "message": "json stream writers added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a399716da68868d8dfb6d28ac5768035cacb0bca", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/a399716da68868d8dfb6d28ac5768035cacb0bca", "committedDate": "2020-11-10T11:27:31Z", "message": "tmp\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b301e919447b094777589c650ba11d7f8a60f23", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/7b301e919447b094777589c650ba11d7f8a60f23", "committedDate": "2020-11-10T14:02:01Z", "message": "Accessor methods created.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d97b35614c7e5c317c4154518b42fd9f3fcffc79", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/d97b35614c7e5c317c4154518b42fd9f3fcffc79", "committedDate": "2020-11-11T15:07:43Z", "message": "Select conditions updated\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "799195fe2402d4b75468f4dfa432976399ad042a", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/799195fe2402d4b75468f4dfa432976399ad042a", "committedDate": "2020-11-11T16:12:57Z", "message": "stream writer ordering changed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c294d4361ae7e5c93c7df181339ce4ae562e1faa", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/c294d4361ae7e5c93c7df181339ce4ae562e1faa", "committedDate": "2020-11-12T09:10:55Z", "message": "content type propagation\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "committedDate": "2020-11-12T09:30:40Z", "message": "Checkstyle fixes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9501f870ed78c55f2e5378799f3e596107519826", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/9501f870ed78c55f2e5378799f3e596107519826", "committedDate": "2020-11-12T09:30:03Z", "message": "Checkstyle fixes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}, "afterCommit": {"oid": "0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/0bd1e9d31fa54a10fd8b3d4806e2a9896cde4c2a", "committedDate": "2020-11-12T09:30:40Z", "message": "Checkstyle fixes\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "552eb623509dce9112f1c2a11fb69f10cf5588ed", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/552eb623509dce9112f1c2a11fb69f10cf5588ed", "committedDate": "2020-11-12T09:59:51Z", "message": "event stream condition fixed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/3aee9b7bd438200deb9dc1b178522a5755166bb4", "committedDate": "2020-11-12T10:09:49Z", "message": "Jsonp ES body stream writer structure fixed\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MDc0MTM0", "url": "https://github.com/oracle/helidon/pull/2523#pullrequestreview-529074134", "createdAt": "2020-11-12T13:15:37Z", "commit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNTozN1rOHx6Qcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1OTo1NVrOHx8BJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5Njc1NA==", "bodyText": "Why defer?", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522096754", "createdAt": "2020-11-12T13:15:37Z", "author": {"login": "danielkec"}, "path": "media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jackson;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Message body stream writer supporting object binding with Jackson.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JacksonEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private JacksonEsBodyStreamWriter(ObjectMapper objectMapper) {\n+        this.objectMapper = Objects.requireNonNull(objectMapper);\n+    }\n+\n+    static JacksonEsBodyStreamWriter create(ObjectMapper objectMapper) {\n+        return new JacksonEsBodyStreamWriter(objectMapper);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        JacksonBodyWriter.ObjectToChunks objectToChunks = new JacksonBodyWriter.ObjectToChunks(objectMapper, context.charset());\n+        return Multi.defer(() -> publisher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTA1NA==", "bodyText": "Moving the type check could save actual finding of media type in some cases\n        if(CharSequence.class.isAssignableFrom(type.rawType())) return PredicateResult.NOT_SUPPORTED;\n        return context.contentType()\n                .or(() -> findMediaType(context))\n                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n                .map(it -> PredicateResult.COMPATIBLE)\n                .orElse(PredicateResult.NOT_SUPPORTED);", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522109054", "createdAt": "2020-11-12T13:35:27Z", "author": {"login": "danielkec"}, "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMDM1MQ==", "bodyText": "Defer is meant for supplying new publisher for every subscribe, not sure if its practical here, as we don't know if upstream can handle multiple subscribers:\n        Multi<Integer> defered = Multi.defer(() -> Multi.just(1, 2, 3));\n        Multi.concat(defered, defered)\n                .collectList()\n                .forSingle(System.out::println);\n>[1, 2, 3, 1, 2, 3]", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522120351", "createdAt": "2020-11-12T13:52:41Z", "author": {"login": "danielkec"}, "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        return Multi.defer(() -> publisher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMjM4Nw==", "bodyText": "Moving type check before finding media type can save few instructions", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522122387", "createdAt": "2020-11-12T13:55:24Z", "author": {"login": "danielkec"}, "path": "media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonp;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.JsonStructure;\n+import javax.json.JsonWriterFactory;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+import io.helidon.media.jsonp.JsonpBodyWriter.JsonStructureToChunks;\n+\n+/**\n+ * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonpEsBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final JsonWriterFactory jsonWriterFactory;\n+\n+    JsonpEsBodyStreamWriter(JsonWriterFactory jsonWriterFactory) {\n+        this.jsonWriterFactory = Objects.requireNonNull(jsonWriterFactory);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .map(it -> PredicateResult.supports(JsonStructure.class, type))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTYwNg==", "bodyText": "assert something?", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522125606", "createdAt": "2020-11-12T13:59:55Z", "author": {"login": "danielkec"}, "path": "examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java", "diffHunk": "@@ -74,6 +74,16 @@ public static void stopServer() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testQuery() {\n+        JsonObject response = webClient\n+                .get()\n+                .uri(\"http://localhost:\" + webServer.port() + \"/greet\")\n+                .queryParam(\"query\", \"{hello}\")\n+                .request(JsonObject.class)\n+                .await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/7b9d46aef74ece4f3c8f4722a792f66cbbecba32", "committedDate": "2020-11-12T14:51:28Z", "message": "Changes implemented\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "864ac1d7f955a46488099903d42b17f36441ac7b", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/864ac1d7f955a46488099903d42b17f36441ac7b", "committedDate": "2020-11-12T14:54:02Z", "message": "Changes implemented 2\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MjAzOTk3", "url": "https://github.com/oracle/helidon/pull/2523#pullrequestreview-529203997", "createdAt": "2020-11-12T15:29:21Z", "commit": {"oid": "864ac1d7f955a46488099903d42b17f36441ac7b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI5MzEyNjI2", "url": "https://github.com/oracle/helidon/pull/2523#pullrequestreview-529312626", "createdAt": "2020-11-12T17:18:48Z", "commit": {"oid": "864ac1d7f955a46488099903d42b17f36441ac7b"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f84730f006cf59982f5d8a6bd2a451fd803973a", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/2f84730f006cf59982f5d8a6bd2a451fd803973a", "committedDate": "2020-11-18T10:45:58Z", "message": "ndJson support added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzOTA1MjA0", "url": "https://github.com/oracle/helidon/pull/2523#pullrequestreview-533905204", "createdAt": "2020-11-18T21:46:26Z", "commit": {"oid": "2f84730f006cf59982f5d8a6bd2a451fd803973a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 373, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}