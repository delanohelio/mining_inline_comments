{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTAwNDkx", "number": 1691, "title": "Updated Config SPI documentation.", "bodyText": "Signed-off-by: Tomas Langer tomas.langer@oracle.com", "createdAt": "2020-04-25T12:25:18Z", "url": "https://github.com/oracle/helidon/pull/1691", "merged": true, "mergeCommit": {"oid": "fb2f7ab3a3b1dc2d48687b28903f630d8d914f2e"}, "closed": true, "closedAt": "2020-04-30T16:17:52Z", "author": {"login": "tomas-langer"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbFSY_gH2gAyNDA4OTAwNDkxOmYyMjZiMzk4Y2EwMDlhNTkwMjA4N2MwMTA5YWY1NTJhZDZhODUxMmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABccD41GgFqTQwMTgzMzM3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f226b398ca009a5902087c0109af552ad6a8512a", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f226b398ca009a5902087c0109af552ad6a8512a", "committedDate": "2020-04-25T12:31:39Z", "message": "Updated SPI documentation.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "598248b6e1ca3df33004b592450b93813ecdbc21", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/598248b6e1ca3df33004b592450b93813ecdbc21", "committedDate": "2020-04-25T12:23:58Z", "message": "Updated SPI documentation.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}, "afterCommit": {"oid": "f226b398ca009a5902087c0109af552ad6a8512a", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/f226b398ca009a5902087c0109af552ad6a8512a", "committedDate": "2020-04-25T12:31:39Z", "message": "Updated SPI documentation.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxMzU0NjYw", "url": "https://github.com/oracle/helidon/pull/1691#pullrequestreview-401354660", "createdAt": "2020-04-27T21:53:05Z", "commit": {"oid": "f226b398ca009a5902087c0109af552ad6a8512a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTo1MzowNVrOGM5U8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QyMTo1NTowMFrOGM5Y2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3NTM0NQ==", "bodyText": "strategies", "url": "https://github.com/oracle/helidon/pull/1691#discussion_r416175345", "createdAt": "2020-04-27T21:53:05Z", "author": {"login": "ljamen"}, "path": "docs/se/config/07_extensions.adoc", "diffHunk": "@@ -361,69 +464,93 @@ If no priority is explicitly assigned, the value of `100` is assumed.\n [source,java]\n .Reference custom mapper provider implementation in `META-INF/services/io.helidon.config.spi.ConfigMapperProvider`\n ----\n-myModule.MyConfigMapperProvider\n+my.module.MyConfigMapperProvider\n ----\n \n [source,java]\n .Reference custom mapper provider implementation in `module-info.java`\n ----\n-module myModule {\n+module my.module {\n     requires transitive io.helidon.config;\n-    provides io.helidon.config.spi.ConfigMapperProvider with myModule.MyConfigMapperProvider;\n+    provides io.helidon.config.spi.ConfigMapperProvider with my.module.MyConfigMapperProvider;\n }\n ----\n \n-//TODO example [P2] Issue #29\n+== Change support SPI [[Config-SPI-PollingStrategy]]\n+\n+Once it loads a `Config` tree from ``ConfigSource``s the config system does not itself change the in-memory `Config` tree.\n+Even so, the underlying data available via the tree's ``ConfigSource``s can change.\n+Implementations of link:{javadoc-base-url-api}/spi/PollingStrategy.html[`PollingStrategy`]\n+may trigger regular check whether a source has new data.\n+Implementation of link:{javadoc-base-url-api}/spi/ChangeWatcher.html[`ChangeWatcher`]\n+may watch the underlying source for changes and trigger an update.\n \n+=== PollingStrategy SPI\n \n-== PollingStrategy SPI [[Config-SPI-PollingStrategy]]\n+An implementation of `PollingStrategy` gets an instance to poll, and triggers its `poll`\n+method.\n+The result of `poll` method may be used to update the polling strategy schedule.\n \n-Once it loads a `Config` tree from ``ConfigSource``s the config\n-system does not itself change the in-memory `Config` tree. Even so, the\n-underlying data available via the tree's ``ConfigSource``s can change.\n-Implementations of link:{javadoc-base-url-api}/spi/PollingStrategy.html[`PollingStrategy`] \n-informs other interested code when changes to that underlying data might have \n-occurred.\n+The approach of checking for changes is part of the config system, and the `PollingStrategy` does not need to be concerned with it.\n+This is based on the source `stamp` as defined in `ConfigContent`\n+and used in `PollableSource.isModified(Object)` methods.\n \n-In implementations of `PollingStrategy` the `#ticks()` method\n-returns a `Flow.Publisher` of ``PollingEvent``s to which the\n-application or the ``ConfigSource``s themselves can subscribe. Generally,\n-each event is a hint to the subscriber that\n-it should check to see if any of the underlying config data it relies on\n-has changed. Note that a ``PollingStrategy``'s publication of an\n-event does not necessarily guarantee that the underlying data has in fact\n-changed, although this might be true for some `PollingStrategy`\n-implementations.\n+If a more sophisticated solution is needed, you may need to implement a `ChangeWatcher` instead.\n \n-The config system offers polling strategies for periodic time-based\n-checks and for a file watcher. Often an application can create a config source\n-simply by using one of the methods on `ConfigSources` (for example,\n-`ConfigSources#file(path)` to get a builder and then invoke `pollingStrategy` \n-passing one of the predefined strategies. But the application can implement\n-its own `PollingStrategy` and set it on the config source builder instead.\n+The config system offers polling strategy for periodic time-based checks.\n+Often an application can create a config source simply by using one of the methods on `ConfigSources` (for example,\n+`ConfigSources#file(path)` to get a builder and then invoke `pollingStrategy`\n+passing a polling strategy.\n+But the application can implement its own `PollingStrategy` and set it on the config source builder instead.\n \n-[plantuml, config/spi-PollingStrategy, png, title=\"PollingStrategy SPI\", align=\"center\"]\n+[plantuml,config/spi-PollingStrategy,png,title=\"PollingStrategy SPI\",align=\"center\"]\n ----\n+hide empty members\n+\n interface PollingStrategy {\n-    + Flow.Publisher<PollingEvent> ticks()\n+    + void start(Polled polled)\n+    + stop()\n }\n \n-interface PollingStrategy.PollingEvent {\n-    + Instant getTimestamp()\n+interface PollingStrategy.Polled {\n+    + ChangeEventType poll(Instant when)\n }\n+----\n \n-PollingStrategy -[hidden]> PollingStrategy.PollingEvent\n+To support polling startegies that can be configured in meta configuration, also implement the `PollingStrategyProvider` Java service loader SPI.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f226b398ca009a5902087c0109af552ad6a8512a"}, "originalPosition": 503}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjE3NjM0NQ==", "bodyText": "then watches", "url": "https://github.com/oracle/helidon/pull/1691#discussion_r416176345", "createdAt": "2020-04-27T21:55:00Z", "author": {"login": "ljamen"}, "path": "docs/se/config/07_extensions.adoc", "diffHunk": "@@ -361,69 +464,93 @@ If no priority is explicitly assigned, the value of `100` is assumed.\n [source,java]\n .Reference custom mapper provider implementation in `META-INF/services/io.helidon.config.spi.ConfigMapperProvider`\n ----\n-myModule.MyConfigMapperProvider\n+my.module.MyConfigMapperProvider\n ----\n \n [source,java]\n .Reference custom mapper provider implementation in `module-info.java`\n ----\n-module myModule {\n+module my.module {\n     requires transitive io.helidon.config;\n-    provides io.helidon.config.spi.ConfigMapperProvider with myModule.MyConfigMapperProvider;\n+    provides io.helidon.config.spi.ConfigMapperProvider with my.module.MyConfigMapperProvider;\n }\n ----\n \n-//TODO example [P2] Issue #29\n+== Change support SPI [[Config-SPI-PollingStrategy]]\n+\n+Once it loads a `Config` tree from ``ConfigSource``s the config system does not itself change the in-memory `Config` tree.\n+Even so, the underlying data available via the tree's ``ConfigSource``s can change.\n+Implementations of link:{javadoc-base-url-api}/spi/PollingStrategy.html[`PollingStrategy`]\n+may trigger regular check whether a source has new data.\n+Implementation of link:{javadoc-base-url-api}/spi/ChangeWatcher.html[`ChangeWatcher`]\n+may watch the underlying source for changes and trigger an update.\n \n+=== PollingStrategy SPI\n \n-== PollingStrategy SPI [[Config-SPI-PollingStrategy]]\n+An implementation of `PollingStrategy` gets an instance to poll, and triggers its `poll`\n+method.\n+The result of `poll` method may be used to update the polling strategy schedule.\n \n-Once it loads a `Config` tree from ``ConfigSource``s the config\n-system does not itself change the in-memory `Config` tree. Even so, the\n-underlying data available via the tree's ``ConfigSource``s can change.\n-Implementations of link:{javadoc-base-url-api}/spi/PollingStrategy.html[`PollingStrategy`] \n-informs other interested code when changes to that underlying data might have \n-occurred.\n+The approach of checking for changes is part of the config system, and the `PollingStrategy` does not need to be concerned with it.\n+This is based on the source `stamp` as defined in `ConfigContent`\n+and used in `PollableSource.isModified(Object)` methods.\n \n-In implementations of `PollingStrategy` the `#ticks()` method\n-returns a `Flow.Publisher` of ``PollingEvent``s to which the\n-application or the ``ConfigSource``s themselves can subscribe. Generally,\n-each event is a hint to the subscriber that\n-it should check to see if any of the underlying config data it relies on\n-has changed. Note that a ``PollingStrategy``'s publication of an\n-event does not necessarily guarantee that the underlying data has in fact\n-changed, although this might be true for some `PollingStrategy`\n-implementations.\n+If a more sophisticated solution is needed, you may need to implement a `ChangeWatcher` instead.\n \n-The config system offers polling strategies for periodic time-based\n-checks and for a file watcher. Often an application can create a config source\n-simply by using one of the methods on `ConfigSources` (for example,\n-`ConfigSources#file(path)` to get a builder and then invoke `pollingStrategy` \n-passing one of the predefined strategies. But the application can implement\n-its own `PollingStrategy` and set it on the config source builder instead.\n+The config system offers polling strategy for periodic time-based checks.\n+Often an application can create a config source simply by using one of the methods on `ConfigSources` (for example,\n+`ConfigSources#file(path)` to get a builder and then invoke `pollingStrategy`\n+passing a polling strategy.\n+But the application can implement its own `PollingStrategy` and set it on the config source builder instead.\n \n-[plantuml, config/spi-PollingStrategy, png, title=\"PollingStrategy SPI\", align=\"center\"]\n+[plantuml,config/spi-PollingStrategy,png,title=\"PollingStrategy SPI\",align=\"center\"]\n ----\n+hide empty members\n+\n interface PollingStrategy {\n-    + Flow.Publisher<PollingEvent> ticks()\n+    + void start(Polled polled)\n+    + stop()\n }\n \n-interface PollingStrategy.PollingEvent {\n-    + Instant getTimestamp()\n+interface PollingStrategy.Polled {\n+    + ChangeEventType poll(Instant when)\n }\n+----\n \n-PollingStrategy -[hidden]> PollingStrategy.PollingEvent\n+To support polling startegies that can be configured in meta configuration, also implement the `PollingStrategyProvider` Java service loader SPI.\n+\n+=== ChangeWatcher SPI\n+\n+An implementation of `ChangeWatcher` gets the underlying source information and a change listener.\n+The \"watcher\" than watches for changes of the source and notifies the listener when a change occurs.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f226b398ca009a5902087c0109af552ad6a8512a"}, "originalPosition": 508}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e6a43ddfe3cbe5a2a58b5a9f7efbf6de3444b55", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/0e6a43ddfe3cbe5a2a58b5a9f7efbf6de3444b55", "committedDate": "2020-04-28T11:38:28Z", "message": "Typo fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxODMzMzc0", "url": "https://github.com/oracle/helidon/pull/1691#pullrequestreview-401833374", "createdAt": "2020-04-28T13:27:45Z", "commit": {"oid": "0e6a43ddfe3cbe5a2a58b5a9f7efbf6de3444b55"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 739, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}