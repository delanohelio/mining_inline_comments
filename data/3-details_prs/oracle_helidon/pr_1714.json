{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjk3NDI2", "number": 1714, "title": "Fix CorsSupport default behavior", "bodyText": "Resolves #1713\nThere are two aspects to this.\nA. If the developer creates a CorsSupport instance it will provide the default (wild carded) behavior if no specific settings were provided. In particular, passing a missing config node to CorsSupport.create(Config) creates a new CorsSupport instance with the default wildcarding behavior; CORS also logs an INFO message to this effect in case the developer actually expected the config node to contain something.\nThere is a new CrossOriginConfig.create() method which developers can use to include the default wild carded behavior as they build a CorsSupport instance.\n(I refactored many methods from Aggregator to its new Builder inner class so the diffs look deceptively large.)\nB. All cross-origin info added to a CorsSupport instance is now searched sequentially in order of addition to the builder. The Aggregator which collects the cross-origin information (basically as CrossOriginConfig instances) used to use a map, keyed by the path expression. This could lead to confusion if the developer provided multiple CrossOriginConfig objects with the same path (or with no path which is essentially the same thing) because later additions would overwrite earlier ones.\nThis PR changes the internal data structure to a List and maintains the order in which the developer supplies the CrossOriginConfig information. When requests arrive, the Helidon CORS implementation scans the list in order-of-addition and uses the first that matches the request's path and HTTP method.\nThis gives the developer complete control by making sure the order in which the application adds CrossOriginConfigs matches the needs of the application, without the Helidon CORS code imposing a \"one-setting-per-path\" restriction.", "createdAt": "2020-05-01T20:54:59Z", "url": "https://github.com/oracle/helidon/pull/1714", "merged": true, "mergeCommit": {"oid": "b842c911bae74963766934cf3b6de039d72b0c85"}, "closed": true, "closedAt": "2020-05-05T22:59:04Z", "author": {"login": "tjquinno"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdG8n6AH2gAyNDEyMjk3NDI2OjZiNTM1YzUyNmFkODg2OGE1NTBkZjhlOWJiMTlmZjIzYWJkMjc0N2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceb_xPAFqTQwNjIwNDY1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "6b535c526ad8868a550df8e9bb19ff23abd2747c", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/6b535c526ad8868a550df8e9bb19ff23abd2747c", "committedDate": "2020-05-01T19:35:32Z", "message": "Default CorsSupport via CorsSupport.create() did not have wildcarded default behavior\n\nSigned-off-by: tim.quinn@oracle.com <tim.quinn@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2ad7c4e400485fdf12fbf4c71729a5e730a803e", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/b2ad7c4e400485fdf12fbf4c71729a5e730a803e", "committedDate": "2020-05-01T19:56:51Z", "message": "Concurrent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f484909bfab1397c3e679ee9696891fafe0ff2d5", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/f484909bfab1397c3e679ee9696891fafe0ff2d5", "committedDate": "2020-05-01T20:42:09Z", "message": "Some clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aba84507c28e35f4458f3f69c7962e2e8a3d2dff", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/aba84507c28e35f4458f3f69c7962e2e8a3d2dff", "committedDate": "2020-05-02T12:15:35Z", "message": "Change aggregator's internal data structure from a map to a list to give developers more control over the routing they build; developers need to add CrossOriginConfigs in the order they should be checked"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "895bb77ea69155eae6664f157750c0f0be4cac4a", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/895bb77ea69155eae6664f157750c0f0be4cac4a", "committedDate": "2020-05-02T13:33:16Z", "message": "Changes in JavaDoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ac42994453eed6d6f64285b0b7bd6641384d018", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/2ac42994453eed6d6f64285b0b7bd6641384d018", "committedDate": "2020-05-02T17:03:29Z", "message": "Remove unused impport"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85c100c6474cd052488b337ac26238d1ee5a63e3", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/85c100c6474cd052488b337ac26238d1ee5a63e3", "committedDate": "2020-05-03T12:01:10Z", "message": "Add testing of CrossOriginConfig ordering in aggregator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff821cc06b8a33b967f6b6000b52d86a56c30fca", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ff821cc06b8a33b967f6b6000b52d86a56c30fca", "committedDate": "2020-05-04T19:16:31Z", "message": "Fix incorrect CrossOriginConfig look-up during preflight; searched for OPTIONS but needed to use the method the pre-flight request was asking for"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cbcec311c36cbdd619c281afd710b9f87772368d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/cbcec311c36cbdd619c281afd710b9f87772368d", "committedDate": "2020-05-04T21:08:29Z", "message": "Use paths with slash prefix; otherwise the path matcher regex .+ might not have at least one character to consume"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e412a232e0fec9a1192ec82be33191202b6b5f5", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1e412a232e0fec9a1192ec82be33191202b6b5f5", "committedDate": "2020-05-04T21:20:07Z", "message": "Minor adjustment to path handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a04fc3fb410b63099d5c1606a67877ad8f8c7c09", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/a04fc3fb410b63099d5c1606a67877ad8f8c7c09", "committedDate": "2020-05-04T23:32:08Z", "message": "Add DEFAULT constant for CrossOriginConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ac7b9fdbddc4203c145747a277423676b220f731", "committedDate": "2020-05-05T09:52:57Z", "message": "Add create() method instead of DEFAULT constant"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MTA5Nzk3", "url": "https://github.com/oracle/helidon/pull/1714#pullrequestreview-406109797", "createdAt": "2020-05-05T19:56:40Z", "commit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1Njo0MFrOGQ5SYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OTo1MVrOGQ5Y4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODk5NA==", "bodyText": "Could not find in docs whether there is a possibility we would get the leading / in response. In such a case I would probably try to guard against it, e.g.\nString path = requestContext.getUriInfo().getPath();\nif (path.startsWith(\"/\")) {\n            return path;\n        } else {\n            return '/' + path;\n        }", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420368994", "createdAt": "2020-05-05T19:56:40Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java", "diffHunk": "@@ -112,7 +112,7 @@ protected Builder secondaryLookupSupplier(\n \n         @Override\n         public String path() {\n-            return requestContext.getUriInfo().getPath();\n+            return \"/\" + requestContext.getUriInfo().getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQ3Mw==", "bodyText": "HTTP methods should be compared ignore case (unless you fix the requestedMethod and configured methods somewhere to be always upper/lower cased)", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420370473", "createdAt": "2020-05-05T19:59:33Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CorsSupportHelper.java", "diffHunk": "@@ -510,26 +524,16 @@ R processCorsPreFlightRequest(CrossOriginConfig crossOrigin,\n                     () -> \"actual origin: \" + originOpt.get() + \", allowedOrigins: \" + allowedOrigins);\n         }\n \n-        Optional<String> methodOpt = requestAdapter.firstHeader(ACCESS_CONTROL_REQUEST_METHOD);\n-        if (methodOpt.isEmpty()) {\n-            return forbid(requestAdapter,\n-                    responseAdapter,\n-                    METHOD_NOT_IN_ALLOWED_LIST,\n-                    () -> \"header \" + ACCESS_CONTROL_REQUEST_METHOD + \" absent from request\");\n-        }\n-\n         // Check if method is allowed\n-        String method = methodOpt.get();\n         List<String> allowedMethods = Arrays.asList(crossOrigin.allowMethods());\n         if (!allowedMethods.contains(\"*\")\n-                && !contains(method, allowedMethods, String::equals)) {\n+                && !contains(requestedMethod, allowedMethods, String::equals)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDY1Nw==", "bodyText": "HTTP methods should be compared ignore case (unless you fix the requestedMethod and configured methods somewhere to be always upper/lower cased)", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420370657", "createdAt": "2020-05-05T19:59:51Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -218,6 +228,21 @@ public long maxAgeSeconds() {\n         return maxAgeSeconds;\n     }\n \n+    /**\n+     * Reports whether the specified HTTP method name matches this {@code CrossOriginConfig}.\n+     *\n+     * @param method HTTP method name to check\n+     * @return true if this {@code CrossOriginConfig} matches the specified method; false otherwise\n+     */\n+    public boolean matches(String method) {\n+        for (String allowMethod : allowMethods) {\n+            if (allowMethod.equals(method) || allowMethod.equals(\"*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba75111a349232d94a9cf89a12c570bfd2cf6bb4", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ba75111a349232d94a9cf89a12c570bfd2cf6bb4", "committedDate": "2020-05-05T20:15:46Z", "message": "Reviewer comments: compare HTTP method names case-agnostically, and be defensive about presence or absence of leading / in MP request path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MjA0NjUy", "url": "https://github.com/oracle/helidon/pull/1714#pullrequestreview-406204652", "createdAt": "2020-05-05T22:40:54Z", "commit": {"oid": "ba75111a349232d94a9cf89a12c570bfd2cf6bb4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 742, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}