{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTI3Mzcz", "number": 1524, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowODo1NlrODoosYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowODo1NlrODoosYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM2MzUzOnYy", "diffSide": "RIGHT", "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowODo1NlrOF3TYFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxOTo0OTozMFrOF3rjHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMzQ2MQ==", "bodyText": "No prefix should be used, config should be on openapi node already.\nMethod should be called config", "url": "https://github.com/oracle/helidon/pull/1524#discussion_r393533461", "createdAt": "2020-03-17T09:08:56Z", "author": {"login": "tomas-langer"}, "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "diffHunk": "@@ -613,6 +615,27 @@ public OpenAPISupport build() {\n             return new OpenAPISupport(this);\n         }\n \n+        /**\n+         * Set various builder attributes from the specified {@code Config} object.\n+         * <p>\n+         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n+         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * supported by {@code OpenAPIConfigImpl.Builder}.\n+         *\n+         * @param config the {@code Config} object possibly containing settings\n+         * @exception NullPointerException if the provided {@code Config} is null\n+         * @return updated builder instance\n+         */\n+        public Builder helidonConfig(Config config) {\n+            config.get(CONFIG_PREFIX + \".web-context\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21effe0d82e9a8288c5e37e84fdbc21b48da43f8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY2OTUyOA==", "bodyText": "This method, helidonConfig, has been present on SEOpenAPISupportBuilder in SE OpenAPI since we first created it, as has the expectation that the Config node passed in is the top-level one, within which openapi might exist.\nBecause we want to support Helidon config in MP also, this method is migrating to the superclass OpenAPISupport. So while it might appear that this is a new method, it is not a new part of the contract between SE OpenAPI and SE apps.\nChanging either the method name or the expectation of which config node is passed - in 1.x anyway - would be a backward-incompatible change.", "url": "https://github.com/oracle/helidon/pull/1524#discussion_r393669528", "createdAt": "2020-03-17T13:15:40Z", "author": {"login": "tjquinno"}, "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "diffHunk": "@@ -613,6 +615,27 @@ public OpenAPISupport build() {\n             return new OpenAPISupport(this);\n         }\n \n+        /**\n+         * Set various builder attributes from the specified {@code Config} object.\n+         * <p>\n+         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n+         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * supported by {@code OpenAPIConfigImpl.Builder}.\n+         *\n+         * @param config the {@code Config} object possibly containing settings\n+         * @exception NullPointerException if the provided {@code Config} is null\n+         * @return updated builder instance\n+         */\n+        public Builder helidonConfig(Config config) {\n+            config.get(CONFIG_PREFIX + \".web-context\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMzQ2MQ=="}, "originalCommit": {"oid": "21effe0d82e9a8288c5e37e84fdbc21b48da43f8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY3MDIyNw==", "bodyText": "We can make the incompatible change in the 2.x PR to align OpenAPI with the other components that have similar config support.", "url": "https://github.com/oracle/helidon/pull/1524#discussion_r393670227", "createdAt": "2020-03-17T13:16:44Z", "author": {"login": "tjquinno"}, "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "diffHunk": "@@ -613,6 +615,27 @@ public OpenAPISupport build() {\n             return new OpenAPISupport(this);\n         }\n \n+        /**\n+         * Set various builder attributes from the specified {@code Config} object.\n+         * <p>\n+         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n+         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * supported by {@code OpenAPIConfigImpl.Builder}.\n+         *\n+         * @param config the {@code Config} object possibly containing settings\n+         * @exception NullPointerException if the provided {@code Config} is null\n+         * @return updated builder instance\n+         */\n+        public Builder helidonConfig(Config config) {\n+            config.get(CONFIG_PREFIX + \".web-context\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMzQ2MQ=="}, "originalCommit": {"oid": "21effe0d82e9a8288c5e37e84fdbc21b48da43f8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzY5NzAyOA==", "bodyText": "For 1.x, we can add the config method as you suggest -- with a Config argument that should be the openapi node -- while keeping the existing helidonConfig method to preserve backward compatibility and mark helidonConfig as deprecated.", "url": "https://github.com/oracle/helidon/pull/1524#discussion_r393697028", "createdAt": "2020-03-17T13:56:23Z", "author": {"login": "tjquinno"}, "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "diffHunk": "@@ -613,6 +615,27 @@ public OpenAPISupport build() {\n             return new OpenAPISupport(this);\n         }\n \n+        /**\n+         * Set various builder attributes from the specified {@code Config} object.\n+         * <p>\n+         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n+         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * supported by {@code OpenAPIConfigImpl.Builder}.\n+         *\n+         * @param config the {@code Config} object possibly containing settings\n+         * @exception NullPointerException if the provided {@code Config} is null\n+         * @return updated builder instance\n+         */\n+        public Builder helidonConfig(Config config) {\n+            config.get(CONFIG_PREFIX + \".web-context\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMzQ2MQ=="}, "originalCommit": {"oid": "21effe0d82e9a8288c5e37e84fdbc21b48da43f8"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzkyOTUwMw==", "bodyText": "yes please", "url": "https://github.com/oracle/helidon/pull/1524#discussion_r393929503", "createdAt": "2020-03-17T19:49:30Z", "author": {"login": "tomas-langer"}, "path": "openapi/src/main/java/io/helidon/openapi/OpenAPISupport.java", "diffHunk": "@@ -613,6 +615,27 @@ public OpenAPISupport build() {\n             return new OpenAPISupport(this);\n         }\n \n+        /**\n+         * Set various builder attributes from the specified {@code Config} object.\n+         * <p>\n+         * The {@code Config} object can specify {@value #CONFIG_PREFIX}.web-context\n+         * and {@value #CONFIG_PREFIX}.static-file in addition to settings\n+         * supported by {@code OpenAPIConfigImpl.Builder}.\n+         *\n+         * @param config the {@code Config} object possibly containing settings\n+         * @exception NullPointerException if the provided {@code Config} is null\n+         * @return updated builder instance\n+         */\n+        public Builder helidonConfig(Config config) {\n+            config.get(CONFIG_PREFIX + \".web-context\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUzMzQ2MQ=="}, "originalCommit": {"oid": "21effe0d82e9a8288c5e37e84fdbc21b48da43f8"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 698, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}