{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2MzUzMDQy", "number": 2245, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToxNTozMlrOEXYmsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1MjoxMVrOEXZQFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU1ODI1OnYy", "diffSide": "RIGHT", "path": "docs/mp/guides/05_metrics.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToxNTozMlrOG_JgUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoxMDo0MlrOG_K9yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2OTIwMA==", "bodyText": "Maybe a link here?", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r468869200", "createdAt": "2020-08-11T21:15:32Z", "author": {"login": "ljnelson"}, "path": "docs/mp/guides/05_metrics.adoc", "diffHunk": "@@ -166,6 +184,19 @@ curl -H \"Accept: application/json\"  http://localhost:8080/metrics/vendor/grpc.re\n \n NOTE: You cannot get the individual fields of a metric. For example, you cannot target http://localhost:8080/metrics/vendor/grpc.requests.meter.count.\n \n+==== Controlling `REST.request` metrics\n+Helidon implements the optional family of metrics, all with the name `REST.request`, as described in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b08e3f8227db2f6679bbc4e0be54961aa7d4232"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5MzEyOA==", "bodyText": "Sigh. I had started to include one and got distracted and forgot to. Adding it.", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r468893128", "createdAt": "2020-08-11T22:10:42Z", "author": {"login": "tjquinno"}, "path": "docs/mp/guides/05_metrics.adoc", "diffHunk": "@@ -166,6 +184,19 @@ curl -H \"Accept: application/json\"  http://localhost:8080/metrics/vendor/grpc.re\n \n NOTE: You cannot get the individual fields of a metric. For example, you cannot target http://localhost:8080/metrics/vendor/grpc.requests.meter.count.\n \n+==== Controlling `REST.request` metrics\n+Helidon implements the optional family of metrics, all with the name `REST.request`, as described in the", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg2OTIwMA=="}, "originalCommit": {"oid": "5b08e3f8227db2f6679bbc4e0be54961aa7d4232"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTU2OTg0OnYy", "diffSide": "RIGHT", "path": "metrics/metrics/src/main/java/io/helidon/metrics/HelidonSimpleTimer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMToxOToyOVrOG_JnmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1MzozMFrOG_aQaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTA2NA==", "bodyText": "Dim recollection here that this is quite expensive to invoke with every call; I seem to recall some other class that can be cached statically to give you a new builder.", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r468871064", "createdAt": "2020-08-11T21:19:29Z", "author": {"login": "ljnelson"}, "path": "metrics/metrics/src/main/java/io/helidon/metrics/HelidonSimpleTimer.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.metrics;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.json.JsonObjectBuilder;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+\n+/**\n+ * Implementation of {@link SimpleTimer}.\n+ */\n+final class HelidonSimpleTimer extends MetricImpl implements SimpleTimer {\n+    private final SimpleTimer delegate;\n+\n+    private HelidonSimpleTimer(String type, Metadata metadata, SimpleTimer delegate) {\n+        super(type, metadata);\n+        this.delegate = delegate;\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata) {\n+        return create(repoType, metadata, Clock.system());\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata, Clock clock) {\n+        return create(repoType, metadata, new SimpleTimerImpl(repoType, metadata.getName(), clock));\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata, SimpleTimer metric) {\n+        return new HelidonSimpleTimer(repoType, metadata, metric);\n+    }\n+\n+    @Override\n+    public void update(Duration duration) {\n+        delegate.update(duration);\n+    }\n+\n+    @Override\n+    public <T> T time(Callable<T> event) throws Exception {\n+        return delegate.time(event);\n+    }\n+\n+    @Override\n+    public void time(Runnable event) {\n+        delegate.time(event);\n+    }\n+\n+    @Override\n+    public Context time() {\n+        return delegate.time();\n+    }\n+\n+    @Override\n+    public long getCount() {\n+        return delegate.getCount();\n+    }\n+\n+    @Override\n+    public Duration getElapsedTime() {\n+        return delegate.getElapsedTime();\n+    }\n+\n+    @Override\n+    public void prometheusData(StringBuilder sb, MetricID metricID, boolean withHelpType) {\n+        String promName;\n+        String name = metricID.getName();\n+        String tags = prometheusTags(metricID.getTags());\n+        promName = prometheusName(name) + \"_total\";\n+        if (withHelpType) {\n+            prometheusType(sb, promName, \"counter\");\n+            prometheusHelp(sb, promName);\n+        }\n+        sb.append(promName)\n+                .append(tags)\n+                .append(\" \")\n+                .append(getCount())\n+                .append(\"\\n\");\n+\n+        promName = prometheusNameWithUnits(name + \"_elapsedTime\", Optional.of(MetricUnits.SECONDS));\n+        if (withHelpType) {\n+            prometheusType(sb, promName, \"gauge\");\n+            // By spec, no help for the elapsedTime part of SimpleTimer.\n+        }\n+        sb.append(promName)\n+                .append(tags)\n+                .append(\" \")\n+                .append(elapsedTimeInSeconds())\n+                .append(\"\\n\");\n+    }\n+\n+    @Override\n+    public String prometheusValue() {\n+        throw new UnsupportedOperationException(\"Not supported.\");\n+    }\n+\n+    @Override\n+    public void jsonData(JsonObjectBuilder builder, MetricID metricID) {\n+        JsonObjectBuilder myBuilder = JSON.createObjectBuilder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b08e3f8227db2f6679bbc4e0be54961aa7d4232"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5NDI5MA==", "bodyText": "All of our metric implementations use the same pattern. The JSON field (somewhat misnamed) is declared this way:\nstatic final JsonBuilderFactory JSON = \n    Json.createBuilderFactory(Collections.emptyMap());\n\nIIRC the real performance drain was in the createBuilderFactory call but it probably would be good to review all uses of this pattern to see if we can speed things up.", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r468894290", "createdAt": "2020-08-11T22:13:49Z", "author": {"login": "tjquinno"}, "path": "metrics/metrics/src/main/java/io/helidon/metrics/HelidonSimpleTimer.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.metrics;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.json.JsonObjectBuilder;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+\n+/**\n+ * Implementation of {@link SimpleTimer}.\n+ */\n+final class HelidonSimpleTimer extends MetricImpl implements SimpleTimer {\n+    private final SimpleTimer delegate;\n+\n+    private HelidonSimpleTimer(String type, Metadata metadata, SimpleTimer delegate) {\n+        super(type, metadata);\n+        this.delegate = delegate;\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata) {\n+        return create(repoType, metadata, Clock.system());\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata, Clock clock) {\n+        return create(repoType, metadata, new SimpleTimerImpl(repoType, metadata.getName(), clock));\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata, SimpleTimer metric) {\n+        return new HelidonSimpleTimer(repoType, metadata, metric);\n+    }\n+\n+    @Override\n+    public void update(Duration duration) {\n+        delegate.update(duration);\n+    }\n+\n+    @Override\n+    public <T> T time(Callable<T> event) throws Exception {\n+        return delegate.time(event);\n+    }\n+\n+    @Override\n+    public void time(Runnable event) {\n+        delegate.time(event);\n+    }\n+\n+    @Override\n+    public Context time() {\n+        return delegate.time();\n+    }\n+\n+    @Override\n+    public long getCount() {\n+        return delegate.getCount();\n+    }\n+\n+    @Override\n+    public Duration getElapsedTime() {\n+        return delegate.getElapsedTime();\n+    }\n+\n+    @Override\n+    public void prometheusData(StringBuilder sb, MetricID metricID, boolean withHelpType) {\n+        String promName;\n+        String name = metricID.getName();\n+        String tags = prometheusTags(metricID.getTags());\n+        promName = prometheusName(name) + \"_total\";\n+        if (withHelpType) {\n+            prometheusType(sb, promName, \"counter\");\n+            prometheusHelp(sb, promName);\n+        }\n+        sb.append(promName)\n+                .append(tags)\n+                .append(\" \")\n+                .append(getCount())\n+                .append(\"\\n\");\n+\n+        promName = prometheusNameWithUnits(name + \"_elapsedTime\", Optional.of(MetricUnits.SECONDS));\n+        if (withHelpType) {\n+            prometheusType(sb, promName, \"gauge\");\n+            // By spec, no help for the elapsedTime part of SimpleTimer.\n+        }\n+        sb.append(promName)\n+                .append(tags)\n+                .append(\" \")\n+                .append(elapsedTimeInSeconds())\n+                .append(\"\\n\");\n+    }\n+\n+    @Override\n+    public String prometheusValue() {\n+        throw new UnsupportedOperationException(\"Not supported.\");\n+    }\n+\n+    @Override\n+    public void jsonData(JsonObjectBuilder builder, MetricID metricID) {\n+        JsonObjectBuilder myBuilder = JSON.createObjectBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTA2NA=="}, "originalCommit": {"oid": "5b08e3f8227db2f6679bbc4e0be54961aa7d4232"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0MzY1Nw==", "bodyText": "This is the way to do it. We need to cache the builder factory. JsonObjectBuilder itself is mutable and cannot be used from more than one thread (as it builds a single JSON Object).", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r469143657", "createdAt": "2020-08-12T09:53:30Z", "author": {"login": "tomas-langer"}, "path": "metrics/metrics/src/main/java/io/helidon/metrics/HelidonSimpleTimer.java", "diffHunk": "@@ -0,0 +1,257 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.metrics;\n+\n+import java.time.Duration;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import javax.json.JsonObjectBuilder;\n+\n+import org.eclipse.microprofile.metrics.Counter;\n+import org.eclipse.microprofile.metrics.Metadata;\n+import org.eclipse.microprofile.metrics.MetricID;\n+import org.eclipse.microprofile.metrics.MetricType;\n+import org.eclipse.microprofile.metrics.MetricUnits;\n+import org.eclipse.microprofile.metrics.SimpleTimer;\n+\n+/**\n+ * Implementation of {@link SimpleTimer}.\n+ */\n+final class HelidonSimpleTimer extends MetricImpl implements SimpleTimer {\n+    private final SimpleTimer delegate;\n+\n+    private HelidonSimpleTimer(String type, Metadata metadata, SimpleTimer delegate) {\n+        super(type, metadata);\n+        this.delegate = delegate;\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata) {\n+        return create(repoType, metadata, Clock.system());\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata, Clock clock) {\n+        return create(repoType, metadata, new SimpleTimerImpl(repoType, metadata.getName(), clock));\n+    }\n+\n+    static HelidonSimpleTimer create(String repoType, Metadata metadata, SimpleTimer metric) {\n+        return new HelidonSimpleTimer(repoType, metadata, metric);\n+    }\n+\n+    @Override\n+    public void update(Duration duration) {\n+        delegate.update(duration);\n+    }\n+\n+    @Override\n+    public <T> T time(Callable<T> event) throws Exception {\n+        return delegate.time(event);\n+    }\n+\n+    @Override\n+    public void time(Runnable event) {\n+        delegate.time(event);\n+    }\n+\n+    @Override\n+    public Context time() {\n+        return delegate.time();\n+    }\n+\n+    @Override\n+    public long getCount() {\n+        return delegate.getCount();\n+    }\n+\n+    @Override\n+    public Duration getElapsedTime() {\n+        return delegate.getElapsedTime();\n+    }\n+\n+    @Override\n+    public void prometheusData(StringBuilder sb, MetricID metricID, boolean withHelpType) {\n+        String promName;\n+        String name = metricID.getName();\n+        String tags = prometheusTags(metricID.getTags());\n+        promName = prometheusName(name) + \"_total\";\n+        if (withHelpType) {\n+            prometheusType(sb, promName, \"counter\");\n+            prometheusHelp(sb, promName);\n+        }\n+        sb.append(promName)\n+                .append(tags)\n+                .append(\" \")\n+                .append(getCount())\n+                .append(\"\\n\");\n+\n+        promName = prometheusNameWithUnits(name + \"_elapsedTime\", Optional.of(MetricUnits.SECONDS));\n+        if (withHelpType) {\n+            prometheusType(sb, promName, \"gauge\");\n+            // By spec, no help for the elapsedTime part of SimpleTimer.\n+        }\n+        sb.append(promName)\n+                .append(tags)\n+                .append(\" \")\n+                .append(elapsedTimeInSeconds())\n+                .append(\"\\n\");\n+    }\n+\n+    @Override\n+    public String prometheusValue() {\n+        throw new UnsupportedOperationException(\"Not supported.\");\n+    }\n+\n+    @Override\n+    public void jsonData(JsonObjectBuilder builder, MetricID metricID) {\n+        JsonObjectBuilder myBuilder = JSON.createObjectBuilder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg3MTA2NA=="}, "originalCommit": {"oid": "5b08e3f8227db2f6679bbc4e0be54961aa7d4232"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyOTY2NDIyOnYy", "diffSide": "RIGHT", "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1MjoxMVrOG_KgkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMjoyNjowNFrOG_LVIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NTY0OQ==", "bodyText": "This is probably good enough.  Note that strictly speaking a JAX-RS annotation is one that is, in turn, annotated with HttpMethod.  I'd probably leave this line alone anyway.", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r468885649", "createdAt": "2020-08-11T21:52:11Z", "author": {"login": "ljnelson"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -91,14 +102,35 @@\n     private static final Logger LOGGER = Logger.getLogger(MetricsCdiExtension.class.getName());\n \n     private static final List<Class<? extends Annotation>> METRIC_ANNOTATIONS\n-            = Arrays.asList(Counted.class, Metered.class, Timed.class, Gauge.class, ConcurrentGauge.class);\n+            = Arrays.asList(Counted.class, Metered.class, Timed.class, Gauge.class, ConcurrentGauge.class,\n+                            SimplyTimed.class);\n+\n+    private static final List<Class<? extends Annotation>> JAX_RS_ANNOTATIONS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a32e1613fc1aba008ff211686b09d9e0bc7a648"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg5OTEwNA==", "bodyText": "I want to make sure I understand.\nI think you're suggesting that instead of iterating through the individual annotation classes {GET.class, etc.) to see if one is present on a given method we could look for HttpMethod.class`. Is that it?\nRelated, the @Observes @WithAnnotations clause currently lists the individual JAX-RS-related annotations (GET.class, etc.) in the method declaration. Could we also use  HttpMethod.class there?", "url": "https://github.com/oracle/helidon/pull/2245#discussion_r468899104", "createdAt": "2020-08-11T22:26:04Z", "author": {"login": "tjquinno"}, "path": "microprofile/metrics/src/main/java/io/helidon/microprofile/metrics/MetricsCdiExtension.java", "diffHunk": "@@ -91,14 +102,35 @@\n     private static final Logger LOGGER = Logger.getLogger(MetricsCdiExtension.class.getName());\n \n     private static final List<Class<? extends Annotation>> METRIC_ANNOTATIONS\n-            = Arrays.asList(Counted.class, Metered.class, Timed.class, Gauge.class, ConcurrentGauge.class);\n+            = Arrays.asList(Counted.class, Metered.class, Timed.class, Gauge.class, ConcurrentGauge.class,\n+                            SimplyTimed.class);\n+\n+    private static final List<Class<? extends Annotation>> JAX_RS_ANNOTATIONS", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NTY0OQ=="}, "originalCommit": {"oid": "2a32e1613fc1aba008ff211686b09d9e0bc7a648"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 480, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}