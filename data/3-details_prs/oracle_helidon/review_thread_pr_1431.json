{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTA3MDUz", "number": 1431, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo0NjoyMFrODiCzMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMjo0N1rODiDAhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI0MDQ4OnYy", "diffSide": "RIGHT", "path": "examples/webclient/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo0NjoyMFrOFtHtuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTo0NDo0M1rOFtaVPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NjYzNQ==", "bodyText": "parent pom with modules are named with a -project suffix.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382856635", "createdAt": "2020-02-21T23:46:20Z", "author": {"login": "romain-grecourt"}, "path": "examples/webclient/pom.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.examples</groupId>\n+        <artifactId>helidon-examples-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.examples.webclient</groupId>\n+    <artifactId>helidon-examples-webclient</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE2MTY2MA==", "bodyText": "Thank you.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r383161660", "createdAt": "2020-02-24T09:44:43Z", "author": {"login": "Verdent"}, "path": "examples/webclient/pom.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.examples</groupId>\n+        <artifactId>helidon-examples-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.examples.webclient</groupId>\n+    <artifactId>helidon-examples-webclient</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NjYzNQ=="}, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI0MTYwOnYy", "diffSide": "RIGHT", "path": "examples/webclient/standalone/src/main/java/io/helidon/rest/client/example/basic/StandaloneClientExample.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo0NzowMlrOFtHuXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToyNDowOFrOFtZtzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1Njc5OA==", "bodyText": "Is this left-over ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382856798", "createdAt": "2020-02-21T23:47:02Z", "author": {"login": "romain-grecourt"}, "path": "examples/webclient/standalone/src/main/java/io/helidon/rest/client/example/basic/StandaloneClientExample.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.rest.client.example.basic;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.config.Config;\n+import io.helidon.security.Security;\n+import io.helidon.security.SecurityContext;\n+import io.helidon.webclient.WebClient;\n+\n+/**\n+ * A standalone web client.\n+ */\n+public class StandaloneClientExample {\n+\n+    private static final Logger LOGGER = Logger.getLogger(StandaloneClientExample.class.getName());\n+\n+    private StandaloneClientExample() {\n+\n+    }\n+\n+    /**\n+     * Executes simple request using webclient.\n+     *\n+     * @param args arguments\n+     * @throws ExecutionException\n+     * @throws InterruptedException\n+     * @throws IOException\n+     */\n+    public static void main(String[] args) throws ExecutionException, InterruptedException, IOException {\n+        LogManager.getLogManager().readConfiguration(StandaloneClientExample.class.getResourceAsStream(\"/logging.properties\"));\n+\n+        /*\n+         * Prepare helidon stuff\n+         */\n+        Config config = Config.create();\n+        Security security = Security.builder().build();\n+\n+        SecurityContext securityContext = security.createContext(\"standalone-example\");\n+\n+        Context context = Context.builder().id(\"standalone-example\").build();\n+        context.register(securityContext);\n+\n+        /*\n+         * Initialize client.\n+         */\n+        WebClient client = WebClient.builder()\n+                .config(config.get(\"client\"))\n+                .context(context)\n+                .build();\n+\n+        /*\n+         * Each request is created using a builder like fluent api\n+         */\n+        //        CompletionStage<ClientResponse> response = client.put()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTU2NQ==", "bodyText": "Yes, thank you.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r383151565", "createdAt": "2020-02-24T09:24:08Z", "author": {"login": "Verdent"}, "path": "examples/webclient/standalone/src/main/java/io/helidon/rest/client/example/basic/StandaloneClientExample.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.rest.client.example.basic;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.config.Config;\n+import io.helidon.security.Security;\n+import io.helidon.security.SecurityContext;\n+import io.helidon.webclient.WebClient;\n+\n+/**\n+ * A standalone web client.\n+ */\n+public class StandaloneClientExample {\n+\n+    private static final Logger LOGGER = Logger.getLogger(StandaloneClientExample.class.getName());\n+\n+    private StandaloneClientExample() {\n+\n+    }\n+\n+    /**\n+     * Executes simple request using webclient.\n+     *\n+     * @param args arguments\n+     * @throws ExecutionException\n+     * @throws InterruptedException\n+     * @throws IOException\n+     */\n+    public static void main(String[] args) throws ExecutionException, InterruptedException, IOException {\n+        LogManager.getLogManager().readConfiguration(StandaloneClientExample.class.getResourceAsStream(\"/logging.properties\"));\n+\n+        /*\n+         * Prepare helidon stuff\n+         */\n+        Config config = Config.create();\n+        Security security = Security.builder().build();\n+\n+        SecurityContext securityContext = security.createContext(\"standalone-example\");\n+\n+        Context context = Context.builder().id(\"standalone-example\").build();\n+        context.register(securityContext);\n+\n+        /*\n+         * Initialize client.\n+         */\n+        WebClient client = WebClient.builder()\n+                .config(config.get(\"client\"))\n+                .context(context)\n+                .build();\n+\n+        /*\n+         * Each request is created using a builder like fluent api\n+         */\n+        //        CompletionStage<ClientResponse> response = client.put()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1Njc5OA=="}, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI1MTY4OnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientRequestHeadersImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo1NDozMlrOFtH0kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOToyMzozNFrOFtZsvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1ODM4NA==", "bodyText": "Why not re-use io.helidon.common.http.HashParameters ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382858384", "createdAt": "2020-02-21T23:54:32Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientRequestHeadersImpl.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.http.Parameters;\n+\n+import io.netty.handler.codec.http.cookie.ClientCookieEncoder;\n+import io.netty.handler.codec.http.cookie.DefaultCookie;\n+\n+/**\n+ * Client request header implementation.\n+ */\n+class ClientRequestHeadersImpl implements ClientRequestHeaders {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTI5NA==", "bodyText": "Because we needed full control over the map/object which stores those headers to be able to easily clear them if needed.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r383151294", "createdAt": "2020-02-24T09:23:34Z", "author": {"login": "Verdent"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientRequestHeadersImpl.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.http.Parameters;\n+\n+import io.netty.handler.codec.http.cookie.ClientCookieEncoder;\n+import io.netty.handler.codec.http.cookie.DefaultCookie;\n+\n+/**\n+ * Client request header implementation.\n+ */\n+class ClientRequestHeadersImpl implements ClientRequestHeaders {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1ODM4NA=="}, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI2Nzg0OnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDowNzoxMlrOFtH-JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToyODo1MlrOFts_7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDgzNw==", "bodyText": "Thinking-out-loud.\nI don't know if having a configuration for request/response specific readers/writers is really useful.\nInstead you could expose the context from request/response and let the user add these manually for each request/response.\nIf we think there is a need to have HTTP client specific readers/writers for all client request/response, then maybe we should consider updating MediaSupport, MessageBodyReaderContext and MessageBodyWriterContext to support creating a parented MediaSupport.\nThis way you would only need to pass-in a MediaSupport instance to RequestConfiguration.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382860837", "createdAt": "2020-02-22T00:07:12Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.helidon.media.common.MessageBodyReader;\n+import io.helidon.media.common.MessageBodyWriter;\n+import io.helidon.webclient.spi.ClientService;\n+\n+/**\n+ * Configuration of specific request.\n+ */\n+class RequestConfiguration extends ClientConfiguration {\n+\n+    private final URI requestURI;\n+    private final ClientServiceRequest clientServiceRequest;\n+    private final List<ClientService> services;\n+    private final Set<MessageBodyReader<?>> requestReaders;\n+    private final Set<MessageBodyWriter<?>> requestWriters;\n+\n+    private RequestConfiguration(Builder builder) {\n+        super(builder);\n+        requestURI = builder.requestURI;\n+        clientServiceRequest = builder.clientServiceRequest;\n+        services = builder.services;\n+        requestReaders = builder.requestReaders;\n+        requestWriters = builder.messageBodyWriters;\n+    }\n+\n+    URI requestURI() {\n+        return requestURI;\n+    }\n+\n+    ClientServiceRequest clientServiceRequest() {\n+        return clientServiceRequest;\n+    }\n+\n+    List<ClientService> services() {\n+        return services;\n+    }\n+\n+    Set<MessageBodyReader<?>> requestReaders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE1MTI1OQ==", "bodyText": "Ah this is great you are mentioning this. I have a note to create issue for that. I think that having builder on MediaSupport which allows you to insert explicit parent, would be great for my usecase. I didn't added yet, because I wanted to talk to you about it before.\nIn case of the exposing of context, I do not think that is what we should do.\nThe reason why I opted for specific readers/writers for each request/response is, that it allows you to have control over entity handling. Basically you can have two or more ways how to handle specific entity type in your code and this helps you to achieve this without interfering with other request where it is not desirable.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r383151259", "createdAt": "2020-02-24T09:23:29Z", "author": {"login": "Verdent"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.helidon.media.common.MessageBodyReader;\n+import io.helidon.media.common.MessageBodyWriter;\n+import io.helidon.webclient.spi.ClientService;\n+\n+/**\n+ * Configuration of specific request.\n+ */\n+class RequestConfiguration extends ClientConfiguration {\n+\n+    private final URI requestURI;\n+    private final ClientServiceRequest clientServiceRequest;\n+    private final List<ClientService> services;\n+    private final Set<MessageBodyReader<?>> requestReaders;\n+    private final Set<MessageBodyWriter<?>> requestWriters;\n+\n+    private RequestConfiguration(Builder builder) {\n+        super(builder);\n+        requestURI = builder.requestURI;\n+        clientServiceRequest = builder.clientServiceRequest;\n+        services = builder.services;\n+        requestReaders = builder.requestReaders;\n+        requestWriters = builder.messageBodyWriters;\n+    }\n+\n+    URI requestURI() {\n+        return requestURI;\n+    }\n+\n+    ClientServiceRequest clientServiceRequest() {\n+        return clientServiceRequest;\n+    }\n+\n+    List<ClientService> services() {\n+        return services;\n+    }\n+\n+    Set<MessageBodyReader<?>> requestReaders() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDgzNw=="}, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ2NzUwMg==", "bodyText": "There should be a parented context dedicated to each request, that would be symmetrical to how it's done in the webserver currently. We can talk more about this when you have some time.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r383467502", "createdAt": "2020-02-24T19:28:52Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.helidon.media.common.MessageBodyReader;\n+import io.helidon.media.common.MessageBodyWriter;\n+import io.helidon.webclient.spi.ClientService;\n+\n+/**\n+ * Configuration of specific request.\n+ */\n+class RequestConfiguration extends ClientConfiguration {\n+\n+    private final URI requestURI;\n+    private final ClientServiceRequest clientServiceRequest;\n+    private final List<ClientService> services;\n+    private final Set<MessageBodyReader<?>> requestReaders;\n+    private final Set<MessageBodyWriter<?>> requestWriters;\n+\n+    private RequestConfiguration(Builder builder) {\n+        super(builder);\n+        requestURI = builder.requestURI;\n+        clientServiceRequest = builder.clientServiceRequest;\n+        services = builder.services;\n+        requestReaders = builder.requestReaders;\n+        requestWriters = builder.messageBodyWriters;\n+    }\n+\n+    URI requestURI() {\n+        return requestURI;\n+    }\n+\n+    ClientServiceRequest clientServiceRequest() {\n+        return clientServiceRequest;\n+    }\n+\n+    List<ClientService> services() {\n+        return services;\n+    }\n+\n+    Set<MessageBodyReader<?>> requestReaders() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDgzNw=="}, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI3Mjk2OnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMToyMVrOFtIBJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMjoxNzoyOFrOFtepww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTYwNQ==", "bodyText": "Should that be named HttpClientException or WebClientException instead ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382861605", "createdAt": "2020-02-22T00:11:21Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientException.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.util.Optional;\n+\n+/**\n+ * An exception that caused this client request to fail. If the exception is based on status or content of response from\n+ * server, the {@link ClientResponse} is available to obtain any needed details.\n+ * If the exception was caused before data was sent, or due to timeouts, socket exceptions etc., the {@link ClientResponse} is\n+ * not present and exception handling must be based on the wrapped exception.\n+ */\n+public class ClientException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzIzMjQ1MQ==", "bodyText": "Yes in fact I do agree. I didn't think about it when I was writing it, because it was obvious for me where does this belong, but I are correct that this is probably better name.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r383232451", "createdAt": "2020-02-24T12:17:28Z", "author": {"login": "Verdent"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientException.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.util.Optional;\n+\n+/**\n+ * An exception that caused this client request to fail. If the exception is based on status or content of response from\n+ * server, the {@link ClientResponse} is available to obtain any needed details.\n+ * If the exception was caused before data was sent, or due to timeouts, socket exceptions etc., the {@link ClientResponse} is\n+ * not present and exception handling must be based on the wrapped exception.\n+ */\n+public class ClientException extends RuntimeException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTYwNQ=="}, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI3MzY5OnYy", "diffSide": "RIGHT", "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMTo1M1rOFtIBhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMTo1M1rOFtIBhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTcwMg==", "bodyText": "Should that be named HttpClientConfiguration or WebClientConfiguration instead ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382861702", "createdAt": "2020-02-22T00:11:53Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientConfiguration.java", "diffHunk": "@@ -0,0 +1,539 @@\n+/*\n+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.CookieStore;\n+import java.net.URI;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLException;\n+\n+import io.helidon.common.LazyValue;\n+import io.helidon.common.context.Context;\n+import io.helidon.config.Config;\n+import io.helidon.media.common.MediaSupport;\n+import io.helidon.webclient.spi.ClientService;\n+\n+import io.netty.handler.ssl.ClientAuth;\n+import io.netty.handler.ssl.IdentityCipherSuiteFilter;\n+import io.netty.handler.ssl.JdkSslContext;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SslProvider;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+\n+/**\n+ * Configuration of the Helidon web client.\n+ */\n+class ClientConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MDI3NDYxOnYy", "diffSide": "RIGHT", "path": "webclient/tracing/src/main/java/io/helidon/webclient/tracing/ClientTracing.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMjo0N1rOFtICKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMjo0N1rOFtICKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTg2NQ==", "bodyText": "Should that be named HttpClientTracing or WebClientTracing instead ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382861865", "createdAt": "2020-02-22T00:12:47Z", "author": {"login": "romain-grecourt"}, "path": "webclient/tracing/src/main/java/io/helidon/webclient/tracing/ClientTracing.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient.tracing;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import io.helidon.common.HelidonFeatures;\n+import io.helidon.common.HelidonFlavor;\n+import io.helidon.webclient.ClientServiceRequest;\n+import io.helidon.webclient.spi.ClientService;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.propagation.TextMapAdapter;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * Client service for tracing propagation.\n+ */\n+public class ClientTracing implements ClientService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 247, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}