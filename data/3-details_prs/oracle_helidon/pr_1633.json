{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNjQ1MDcw", "number": 1633, "title": "Add CORS support for SE and MP applications to 2.x", "bodyText": "Resolves #931 (adding CORS support to the built-in Helidon services will be separate)\nThis PR refactors lots of earlier MP work into SE and builds on that to support CORS for SE applications. The previous MP code was also changed to layer on CORS SE.\nSee the SE package-info.java file where I captured -- at least for the moment -- quite a bit of how-to information from the SE developer's perspective.\nBrief overview:\nSE:\n\nCrossOriginHelper does most of the heavy lifting. Much of this was harvested from the earlier MP-only work and refactored. This class does all the header checking and addition needed to implement CORS. It is public so the MP module can see it but developers should not use it themselves. (They should not need to.) This class also defines very simple abstractions of HTTP requests and responses which SE and MP implement separately.\nCrossOriginConfig represents the information we need to make CORS work for a given endpoint: allowed origins, allowed methods, etc.\nCORSSupport is the SE developer's entry point to CORS. An instance behaves as both a service and a handler so developers can pass it to Routing.Rules#register and also the various method-specific methods (any, put, get, etc.).\n\nMP:\n\nCrossOrigin is the annotation which MP developers can use on their JAX-RS options method to set up CORS.\nCrossOriginFilter is invoked as requests arrive at endpoints annotated with @CrossOrigin and as response flow back. It relies heavily on the SE class CrossOriginHelper.", "createdAt": "2020-04-09T21:06:48Z", "url": "https://github.com/oracle/helidon/pull/1633", "merged": true, "mergeCommit": {"oid": "c813a24572ec369d27d61603129e0a48541b985e"}, "closed": true, "closedAt": "2020-04-17T17:34:04Z", "author": {"login": "tjquinno"}, "timelineItems": {"totalCount": 109, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYgJ_EAH2gAyNDAxNjQ1MDcwOmQzMDllOTllYjUwOWZiZWEwMjAxZWIzYWFiZDFiNTcwMmYyYTVjOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcYkoGlgFqTM5NTYzNjM1MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d309e99eb509fbea0201eb3aabd1b5702f2a5c96", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d309e99eb509fbea0201eb3aabd1b5702f2a5c96", "committedDate": "2020-04-17T12:08:08Z", "message": "Review: change Setter to CorsSetter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4bfc33ec3ef8dbe677771cf33caa734beca74dae", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4bfc33ec3ef8dbe677771cf33caa734beca74dae", "committedDate": "2020-04-17T12:09:33Z", "message": "Fix typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e49a2d4a1a062a566a47a2e0a1213c21fc3be56a", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e49a2d4a1a062a566a47a2e0a1213c21fc3be56a", "committedDate": "2020-04-17T13:19:40Z", "message": "Review: Clean up the build and builder methods on CrossOriginConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ef7dc86e0004a5e58df898f0ebc6acec13d2346", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/5ef7dc86e0004a5e58df898f0ebc6acec13d2346", "committedDate": "2020-04-17T13:30:33Z", "message": "Change maxAge to maxAgeSeconds"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca3f3bc1ac0af945158374c5971cd798af14c394", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ca3f3bc1ac0af945158374c5971cd798af14c394", "committedDate": "2020-04-17T14:24:59Z", "message": "More clean-up of builders; MappedCrossOriginConfig this time"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d4fb7625b260e17e9aceabc85c76d6455cf6266", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/9d4fb7625b260e17e9aceabc85c76d6455cf6266", "committedDate": "2020-04-17T15:19:05Z", "message": "Improve toString in several places"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dbd735b66b0b6e0aca2ab8885a86e78fbe5628c", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/9dbd735b66b0b6e0aca2ab8885a86e78fbe5628c", "committedDate": "2020-04-17T15:40:53Z", "message": "Slightly adjust how we do logging of CORS-related decision making"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "536dd9cc035bb7933bc680e7686547c26b4b3b4d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/536dd9cc035bb7933bc680e7686547c26b4b3b4d", "committedDate": "2020-04-17T16:32:09Z", "message": "Renaming to CorsSupport to ...Base and CorsSupportSe to CorsSupport; further clean-up of builder/config/'from'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1NjM2MzUw", "url": "https://github.com/oracle/helidon/pull/1633#pullrequestreview-395636350", "createdAt": "2020-04-17T17:20:39Z", "commit": {"oid": "536dd9cc035bb7933bc680e7686547c26b4b3b4d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b54ef4f855be4b8e88e83a0b451832fb94db495", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/5b54ef4f855be4b8e88e83a0b451832fb94db495", "committedDate": "2019-10-30T14:38:26Z", "message": "New module for CORS support in MP. Basic wiring of filters and new annotation.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9eff239073130eada9c71ea41d96d4f85001c0d0", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/9eff239073130eada9c71ea41d96d4f85001c0d0", "committedDate": "2019-10-30T15:28:01Z", "message": "Additional header support and tests.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da2de217e461c58ce8682a0f607fa16a21ffc43a", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/da2de217e461c58ce8682a0f607fa16a21ffc43a", "committedDate": "2019-10-30T17:20:32Z", "message": "Class annotations and checkstyle.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "406ecf96c98d0ce90699c9d96f6084a40ad370cb", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/406ecf96c98d0ce90699c9d96f6084a40ad370cb", "committedDate": "2019-10-31T15:27:55Z", "message": "Basic support for pre-flight requests. Using @CrossOrigin with @OPTIONS for compatibility.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c545adf37126789b0d1c013edd95d63756d19375", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/c545adf37126789b0d1c013edd95d63756d19375", "committedDate": "2019-10-31T15:46:18Z", "message": "Tests for request methods.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca98276f2453451c6561e2f43a49c34fdac4f386", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/ca98276f2453451c6561e2f43a49c34fdac4f386", "committedDate": "2019-10-31T20:34:26Z", "message": "Support for other headers and more tests.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7497b6972eafa7055bc14951a8daaffc647b3b8f", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/7497b6972eafa7055bc14951a8daaffc647b3b8f", "committedDate": "2019-11-04T15:23:40Z", "message": "Test headers in pre-flight responses.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d4de2a43b669d20d3cd902fa915963d7d6e7472", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/2d4de2a43b669d20d3cd902fa915963d7d6e7472", "committedDate": "2019-11-04T19:18:31Z", "message": "Restricted @CrossOrigin to methods only (OPTIONS really). Process other types of requests.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76f6e1cfaa39e1109c3b3b03b21334455cf01f4b", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/76f6e1cfaa39e1109c3b3b03b21334455cf01f4b", "committedDate": "2019-11-05T16:30:40Z", "message": "Ensure comparisons use the correct case rules. Some changes to tests.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4d0c6c5dec34fbfb71f0064dde11920c7626f7", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/0c4d0c6c5dec34fbfb71f0064dde11920c7626f7", "committedDate": "2019-11-06T20:20:46Z", "message": "Initial support for CORS using Config properties.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "539c0923cd3a9ded1ccb9462abf78ba4e714e9cc", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/539c0923cd3a9ded1ccb9462abf78ba4e714e9cc", "committedDate": "2019-11-07T15:10:57Z", "message": "Set priority on CrossOriginFilter.\n\nSigned-off-by: Santiago Pericas-Geertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3e8f5012bf86dd8d3d8bfc8125b684fc6faa0c", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/de3e8f5012bf86dd8d3d8bfc8125b684fc6faa0c", "committedDate": "2019-11-08T13:42:18Z", "message": "Merge branch 'master' into cors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9842f496be10cd40a015ef907e881593c2b9bc99", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/9842f496be10cd40a015ef907e881593c2b9bc99", "committedDate": "2020-03-25T19:27:29Z", "message": "Merged with 2.0.0 master and update Cors module.\n\nSigned-off-by: Santiago Pericasgeertsen <santiago.pericasgeertsen@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "87692d9c4f48525e2b7a4734728f54fdab1b1203", "author": {"user": {"login": "spericas", "name": "Santiago Pericasgeertsen"}}, "url": "https://github.com/oracle/helidon/commit/87692d9c4f48525e2b7a4734728f54fdab1b1203", "committedDate": "2020-04-02T14:16:40Z", "message": "Merge branch 'master' into cors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb9d7ce4a836c7f9ea85040cccd5e163326e1315", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/eb9d7ce4a836c7f9ea85040cccd5e163326e1315", "committedDate": "2020-04-02T20:52:31Z", "message": "Initial commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3db49e3c43da0974ef9a788369d32d67dd1918e", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d3db49e3c43da0974ef9a788369d32d67dd1918e", "committedDate": "2020-04-03T12:49:20Z", "message": "A few more changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "221617bbc2c22e031958e69179f6927cfd1a8d79", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/221617bbc2c22e031958e69179f6927cfd1a8d79", "committedDate": "2020-04-03T16:53:03Z", "message": "More changes, some bug fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e96188ba3a3334d42a78ca6985b041a969161faa", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e96188ba3a3334d42a78ca6985b041a969161faa", "committedDate": "2020-04-03T18:22:20Z", "message": "Add the missing pom along with some other update"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e8be78ee665e894619b58adb0d8864636105bf", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d4e8be78ee665e894619b58adb0d8864636105bf", "committedDate": "2020-04-03T18:44:11Z", "message": "Clean up the pom; name the test class so it will actually run"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dd1aaa60c6a5a0658c039e2d51fb698aef59320", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/2dd1aaa60c6a5a0658c039e2d51fb698aef59320", "committedDate": "2020-04-03T18:57:01Z", "message": "Rename custom matchers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1edc14ba83c72282b773dd87abab802691ebcaf9", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1edc14ba83c72282b773dd87abab802691ebcaf9", "committedDate": "2020-04-03T18:59:37Z", "message": "Commit module-info.java finally"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6279cdd0171a14fbff7dc179e706f8447dd04d70", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/6279cdd0171a14fbff7dc179e706f8447dd04d70", "committedDate": "2020-04-03T23:18:46Z", "message": "Instead of so many functions, etc., use two adapter interfaces for requests and responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7347eb1dfcdd652bad4b94fa52d0d83ad47aa17a", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/7347eb1dfcdd652bad4b94fa52d0d83ad47aa17a", "committedDate": "2020-04-04T12:35:34Z", "message": "Rename some things, clean up unchecked warnings in test classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c042cb1ebbcb379e65fd8f429ed92a58ffc0291b", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/c042cb1ebbcb379e65fd8f429ed92a58ffc0291b", "committedDate": "2020-04-04T13:09:19Z", "message": "Minor method rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "255c26164961f86b1707eababb462de457adc0ea", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/255c26164961f86b1707eababb462de457adc0ea", "committedDate": "2020-04-04T17:46:55Z", "message": "Adapt MP CORS code to layer on the new SE CORS artifact"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74fe362a8f6fbd9dca7830dc0a9ca793995ad187", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/74fe362a8f6fbd9dca7830dc0a9ca793995ad187", "committedDate": "2020-04-05T11:58:15Z", "message": "Use some consistent naming for Optional variables; add type param and request() method to RequestAdapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d2eb1508dfe09ac0c33f98a3c407b0495a78aa9", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/0d2eb1508dfe09ac0c33f98a3c407b0495a78aa9", "committedDate": "2020-04-05T11:58:47Z", "message": "Incorporate changes to SE CORS component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f18f1c9e37a9b397b99eae1d80244e07eee58fa", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4f18f1c9e37a9b397b99eae1d80244e07eee58fa", "committedDate": "2020-04-05T12:33:42Z", "message": "Some more cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c904cb336f78a85b694b053a49f5debc36ef921c", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/c904cb336f78a85b694b053a49f5debc36ef921c", "committedDate": "2020-04-05T12:34:03Z", "message": "Adapt to fine-tuning of SE API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d88a542e15bfab2034bddf70b94305a12c43a04", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/8d88a542e15bfab2034bddf70b94305a12c43a04", "committedDate": "2020-04-05T14:34:32Z", "message": "Fix some javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f3d733ed0db16a4a7c9ff3befcd1d87656b810", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d9f3d733ed0db16a4a7c9ff3befcd1d87656b810", "committedDate": "2020-04-05T16:07:11Z", "message": "Some renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f6ae91a2bf262268d130d363c0eea7d03dc0c7e", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4f6ae91a2bf262268d130d363c0eea7d03dc0c7e", "committedDate": "2020-04-05T16:09:38Z", "message": "Adapt to SE renaming"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "957ffb82739b1b693012d6634461c7dfe8929da8", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/957ffb82739b1b693012d6634461c7dfe8929da8", "committedDate": "2020-04-05T17:35:16Z", "message": "Refactor to simplify the contract exposed by the helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de016c312811dec1e682a1dcf08ad87cea70bb94", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/de016c312811dec1e682a1dcf08ad87cea70bb94", "committedDate": "2020-04-05T17:36:54Z", "message": "Adapt to SE refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c9fb2dafac1841bf76872188d586e8731a5e8c9", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/8c9fb2dafac1841bf76872188d586e8731a5e8c9", "committedDate": "2020-04-05T18:32:30Z", "message": "Fix some comments and javadocs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "752a1d289d8725e5ecde4e6be68e2232be2a3dab", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/752a1d289d8725e5ecde4e6be68e2232be2a3dab", "committedDate": "2020-04-06T09:54:07Z", "message": "Add cors to bom; minor edit to cors pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29aaed2f8a31228850e52ea9d44fcabd0ef2e1f4", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/29aaed2f8a31228850e52ea9d44fcabd0ef2e1f4", "committedDate": "2020-04-06T10:45:55Z", "message": "Remove explicit version for cors from pom; revise module-info so downstream projects can see CrossOrigin from cors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "23a61f1afe32e19d9b086fdaaf76a2cc575d3e30", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/23a61f1afe32e19d9b086fdaaf76a2cc575d3e30", "committedDate": "2020-04-06T15:06:31Z", "message": "Fix tests so each app adds its own CORS service instance, since each will have its own config"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eee6c7519c3b061edd745fc5bae2072d12a34c76", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/eee6c7519c3b061edd745fc5bae2072d12a34c76", "committedDate": "2020-04-06T16:20:51Z", "message": "Clarify some comments, clean up one spot in the code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c5456deb22ad04ab5fa0737ec8bd0ca45bd19cf", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/3c5456deb22ad04ab5fa0737ec8bd0ca45bd19cf", "committedDate": "2020-04-06T16:40:55Z", "message": "Preparing response does not need to return anything"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4add7c9d1a3653e5dc783409f1c64ca7ffa25068", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4add7c9d1a3653e5dc783409f1c64ca7ffa25068", "committedDate": "2020-04-06T16:58:12Z", "message": "Clean up some doc comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f030f2bce5e940cdf1c55ae0e51bc561063d7e53", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/f030f2bce5e940cdf1c55ae0e51bc561063d7e53", "committedDate": "2020-04-06T18:46:15Z", "message": "Replace hard-coded constant"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ed0560806e00d0babe5444eb795aad755ae676d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/2ed0560806e00d0babe5444eb795aad755ae676d", "committedDate": "2020-04-06T21:27:53Z", "message": "Refactor CrossOrigin to the MP module and move associated constants from there to CrossOriginConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70f7c5891ff5d30e1ad9f681652c9cc575c02e01", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/70f7c5891ff5d30e1ad9f681652c9cc575c02e01", "committedDate": "2020-04-06T21:28:39Z", "message": "Move CrossOrigin back to MP"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a80e5a25f508bdc429daf6757bbdcee3a0445679", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/a80e5a25f508bdc429daf6757bbdcee3a0445679", "committedDate": "2020-04-06T21:54:38Z", "message": "Remove redundant def of ORIGIN; use Http.Header.ORIGIN instead"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e362c8e7b084d1cd32983241f51da40c2c58766", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4e362c8e7b084d1cd32983241f51da40c2c58766", "committedDate": "2020-04-06T21:56:24Z", "message": "Use Http.Header.ORIGIN; remove temp workaround in pom from pushed version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f0b79266f4f001cd80d41f2e96fefac8403b74", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e8f0b79266f4f001cd80d41f2e96fefac8403b74", "committedDate": "2020-04-06T22:21:22Z", "message": "Convert collection of CrossOriginConfig to a map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf3e4cd81a5b953bbc293b1d19722ad0d9d469f0", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/cf3e4cd81a5b953bbc293b1d19722ad0d9d469f0", "committedDate": "2020-04-06T22:21:53Z", "message": "Convert collection of CrossOriginConfig to map"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03b1e83508290387d6c19c80543451897db64059", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/03b1e83508290387d6c19c80543451897db64059", "committedDate": "2020-04-06T22:48:41Z", "message": "Remove path from CrossOriginConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af8ea3ab22507df021091cdf2506a14532a120d2", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/af8ea3ab22507df021091cdf2506a14532a120d2", "committedDate": "2020-04-06T22:49:03Z", "message": "Remove path from CrossOriginConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "da278186f363dcb6092b750063d70864f43d0459", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/da278186f363dcb6092b750063d70864f43d0459", "committedDate": "2020-04-06T23:53:23Z", "message": "Add feature registration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44569e2f17f23d5f190881a1e388b0c4f955f7fa", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/44569e2f17f23d5f190881a1e388b0c4f955f7fa", "committedDate": "2020-04-07T14:58:53Z", "message": "Remove unneeded dep in pom; fix CrossOriginConfig addition to CORSSupport builder; refactor tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09e8130ec313d8f1373fa88ebe217dffaad72e1e", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/09e8130ec313d8f1373fa88ebe217dffaad72e1e", "committedDate": "2020-04-07T16:55:54Z", "message": "Rename CrossOriginHelper to ...Internal; improve package-info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51a0f3e77f1f7f43a569bbf60d3f657db9e2811f", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/51a0f3e77f1f7f43a569bbf60d3f657db9e2811f", "committedDate": "2020-04-07T16:56:16Z", "message": "Adapt to change in API for CrossOriginConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe98eb2d771e7ff970cb404b3233df03bd93c57a", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/fe98eb2d771e7ff970cb404b3233df03bd93c57a", "committedDate": "2020-04-08T11:02:35Z", "message": "Comment about replaceAll for headers in response adapter ok() method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08cadce98eba6eea71f0b59b0884f62a59635f13", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/08cadce98eba6eea71f0b59b0884f62a59635f13", "committedDate": "2020-04-08T11:05:25Z", "message": "A little clean-up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd66c59340178ed6627de123bc3f9da88fd1e106", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/dd66c59340178ed6627de123bc3f9da88fd1e106", "committedDate": "2020-04-08T23:20:12Z", "message": "At least for the moment, split handler and service implementations. Might unite them next."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "affd2d635333e13d50bfc3347be2ac0aabfb69e3", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/affd2d635333e13d50bfc3347be2ac0aabfb69e3", "committedDate": "2020-04-09T11:10:16Z", "message": "Clean up the API a bit. More to come"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6be1df52d0310ca0bab9220e2e96d1220d8fc5b", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/f6be1df52d0310ca0bab9220e2e96d1220d8fc5b", "committedDate": "2020-04-09T12:46:08Z", "message": "Refactoring, combining the separate service and handler into CORSSupport; moving the req and resp handler interfaces and SE impls into their own files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3021fde539e2b4919a26b4bf5c5a80204a98c8a5", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/3021fde539e2b4919a26b4bf5c5a80204a98c8a5", "committedDate": "2020-04-09T12:46:33Z", "message": "Adapt to refactoring of req and resp adapters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee61a31369c6406fa1c0561e74f31a4ab022403d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ee61a31369c6406fa1c0561e74f31a4ab022403d", "committedDate": "2020-04-09T13:05:16Z", "message": "Javadoc improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297602aa2a75cc509817ceec1384724974890eec", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/297602aa2a75cc509817ceec1384724974890eec", "committedDate": "2020-04-09T18:34:55Z", "message": "Refactor SE CORS under webserver. Work on package-info JavaDoc a bit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7055b7b66a804a2ba8302e64646cb54a6431d922", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/7055b7b66a804a2ba8302e64646cb54a6431d922", "committedDate": "2020-04-09T18:48:48Z", "message": "adjust to SE refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad4477526c3812f8e7e7906a1844a1a640dc48f", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/9ad4477526c3812f8e7e7906a1844a1a640dc48f", "committedDate": "2020-04-09T18:50:57Z", "message": "Concurrent changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15cccd7cc97cde6ae44c037b38c8dca20bda6193", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/15cccd7cc97cde6ae44c037b38c8dca20bda6193", "committedDate": "2020-04-09T19:03:35Z", "message": "Merge with changes in Santiago's fork."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d80fdc1e039c64f2978642f704e27b45cae5c081", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d80fdc1e039c64f2978642f704e27b45cae5c081", "committedDate": "2020-04-09T19:19:32Z", "message": "Fix up fallout of refactoring SE cors to under webserver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "194a9157abf372ac32fb7d2817b2545663a2d829", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/194a9157abf372ac32fb7d2817b2545663a2d829", "committedDate": "2020-04-09T21:03:12Z", "message": "Refactor CrossOriginHelperInternal to .internal package and rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d8d6d44a0f86f016cb0f8b92a9d56743c5caef6e", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/d8d6d44a0f86f016cb0f8b92a9d56743c5caef6e", "committedDate": "2020-04-09T21:04:00Z", "message": "Refactor CrossOriginHelperInternal to internal package and rename"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e103ecad9cd3bf0fac942c8d31d57749b3216ba3", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e103ecad9cd3bf0fac942c8d31d57749b3216ba3", "committedDate": "2020-04-09T23:30:56Z", "message": "Try to fix javadoc error in pipeline"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b7ff719d3ae13f50cad6fb156c9d5dea99f39d", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/02b7ff719d3ae13f50cad6fb156c9d5dea99f39d", "committedDate": "2020-04-10T11:18:25Z", "message": "Change config structure to add 'enabled' and put paths under a 'paths' subnode; also make SE and MP resilient if there is no 'cors' config node at all"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxNDU2MzEw", "url": "https://github.com/oracle/helidon/pull/1633#pullrequestreview-391456310", "createdAt": "2020-04-10T13:58:58Z", "commit": {"oid": "02b7ff719d3ae13f50cad6fb156c9d5dea99f39d"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4586aca4ee8a6047677f53ff4381b88196ccee9", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/c4586aca4ee8a6047677f53ff4381b88196ccee9", "committedDate": "2020-04-10T14:10:33Z", "message": "CrossOriginHelper now instantiated, internalizing logic about whether it's enabled or not and the path mapping"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1061eb6d6b0283a0c7659869e4873f97e0d644b2", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1061eb6d6b0283a0c7659869e4873f97e0d644b2", "committedDate": "2020-04-10T14:24:25Z", "message": "Simplify filter a bit; let the helper check whether processing is enabled or not."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "508b2bd78bc87ee53d3a80a04dd675552d8d6425", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/508b2bd78bc87ee53d3a80a04dd675552d8d6425", "committedDate": "2020-04-10T20:34:14Z", "message": "Add logging; do a little refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71ca237f40713a47af0dd55ec7cba6de9bd01405", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/71ca237f40713a47af0dd55ec7cba6de9bd01405", "committedDate": "2020-04-11T14:11:57Z", "message": "Some more refactoring; removing use of default config from SE impl because the developer is always setting it up anyway and will pass an explicit config node"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a50bab1dca3829e7984d27b9b0cf6c90464c6882", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/a50bab1dca3829e7984d27b9b0cf6c90464c6882", "committedDate": "2020-04-11T17:41:00Z", "message": "Minor package-info edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4277f157cc744f4ab5ae2d39ff8f3af9e56c47d0", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4277f157cc744f4ab5ae2d39ff8f3af9e56c47d0", "committedDate": "2020-04-12T11:49:38Z", "message": "Add test case for .put, .any, etc. methods on Routing.Rules; delegate look-up of CORS config to the aggregator to encapsulate the details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c790abc9da505bb6926df28566e25b8ac7d46435", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/c790abc9da505bb6926df28566e25b8ac7d46435", "committedDate": "2020-04-12T13:26:11Z", "message": "Create a PathMatcher and store it with each added CrossOriginConfig, then use the matcher in finding matches on request paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd21f679209de2b94f734a90aac87487002f36b2", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/dd21f679209de2b94f734a90aac87487002f36b2", "committedDate": "2020-04-12T23:06:20Z", "message": "Remove internal subpackage; parameterize CORSSupport with types of request and response which the adapters wrap"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3f456d06e54418aca03dfd3e70102554ff07c42", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e3f456d06e54418aca03dfd3e70102554ff07c42", "committedDate": "2020-04-12T23:08:19Z", "message": "Fix a couple javadoc issues"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "729084583f3a79461fc56a50d3c9a4edb3b80e43", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/729084583f3a79461fc56a50d3c9a4edb3b80e43", "committedDate": "2020-04-12T23:14:59Z", "message": "Fix style check errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfb94a350954ce2a62991c58a1f8af76003c9bd5", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/bfb94a350954ce2a62991c58a1f8af76003c9bd5", "committedDate": "2020-04-12T23:29:00Z", "message": "Move adapters into internal package to highlight the intent to restrict their use."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd26c10313f0a56392feefcf6e2973af72f5a102", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/bd26c10313f0a56392feefcf6e2973af72f5a102", "committedDate": "2020-04-13T00:29:56Z", "message": "Parameterize the CORSSupport.Builder so we can have a subclass of it in the internal package that knows about the secondary look-up supplier without advertising that on CORSSupport.Builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "872c45fdde0802b4710c8eb6597dfc29ffa5962e", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/872c45fdde0802b4710c8eb6597dfc29ffa5962e", "committedDate": "2020-04-13T11:14:22Z", "message": "Remove 'not for developer use' notes from classes that used to be public but now are not"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0baf3372b498ca6b672de2882dd9b10f6ca9d76a", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/0baf3372b498ca6b672de2882dd9b10f6ca9d76a", "committedDate": "2020-04-13T14:34:43Z", "message": "Change overwriting behavior so the SE developer reigns. The order in which the devo invokes CrossOriginConfig.Builder methods to add settings determines the behavior, not any implicit preference of config over others. The MP code doesn't use the API other than to set config, so config always rules there."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b3405e0ef50f7cd4e83b7d47781c2afcb3a1371", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4b3405e0ef50f7cd4e83b7d47781c2afcb3a1371", "committedDate": "2020-04-13T15:43:06Z", "message": "Fix javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e68db0607cb6cc72424d41273616742653c87031", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e68db0607cb6cc72424d41273616742653c87031", "committedDate": "2020-04-13T15:54:53Z", "message": "Clean up copyright notice"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b5925fa5b48ff8c547481c8fd07e5a9f8b91a21", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4b5925fa5b48ff8c547481c8fd07e5a9f8b91a21", "committedDate": "2020-04-13T16:06:28Z", "message": "The requires for java.ws.rs should not need to be transitive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf87039ea60b72edc0c07cd9dc46232b8ff08201", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/bf87039ea60b72edc0c07cd9dc46232b8ff08201", "committedDate": "2020-04-13T20:16:12Z", "message": "Significant refactoring to reduce the proliferation of type variables; also remove the need for the 'internal' subpackage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ecb7590e37724446c85a981c3925845e07f6c037", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ecb7590e37724446c85a981c3925845e07f6c037", "committedDate": "2020-04-15T19:20:57Z", "message": "Refactory things j-u-s-t a bit."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f98144a5cdf4736e935471cb3ef10220d157bb29", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/f98144a5cdf4736e935471cb3ef10220d157bb29", "committedDate": "2020-04-15T21:04:28Z", "message": "Revise some JavaDoc; add convenience method for SE developers to populate a CORSSupportSE from config, typically for use as a handler passed to Routing.Rules methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/e0d148d8cdeabe8c426b1c268ae40ce7e073da2f", "committedDate": "2020-04-15T22:18:15Z", "message": "Clean up package-info"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk0NzIwNDky", "url": "https://github.com/oracle/helidon/pull/1633#pullrequestreview-394720492", "createdAt": "2020-04-16T14:58:02Z", "commit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1Mjg4NTg3", "url": "https://github.com/oracle/helidon/pull/1633#pullrequestreview-395288587", "createdAt": "2020-04-17T09:10:10Z", "commit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOToxMDoxMFrOGHGLvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTo1NzoxN1rOGHHwsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NDUyNQ==", "bodyText": "Please use camel case: CorsSupportMp and CorsSupport", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410094525", "createdAt": "2020-04-17T09:10:10Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CORSSupportMP.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.microprofile.cors;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import io.helidon.webserver.cors.CORSSupport;\n+import io.helidon.webserver.cors.CrossOriginConfig;\n+\n+/**\n+ * MP implementation of {@link CORSSupport}.\n+ */\n+class CORSSupportMP extends CORSSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NTEzNg==", "bodyText": "The class is package local, this method should not be public", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410095136", "createdAt": "2020-04-17T09:11:09Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CORSSupportMP.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.microprofile.cors;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import io.helidon.webserver.cors.CORSSupport;\n+import io.helidon.webserver.cors.CrossOriginConfig;\n+\n+/**\n+ * MP implementation of {@link CORSSupport}.\n+ */\n+class CORSSupportMP extends CORSSupport {\n+\n+    /**\n+     *\n+     * @return a new builder of CORSSupportMP\n+     */\n+    public static Builder builder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NTkyNg==", "bodyText": "Please update all classes in the implementation that use such a naming convention.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410095926", "createdAt": "2020-04-17T09:12:34Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CORSSupportMP.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.microprofile.cors;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import javax.ws.rs.container.ContainerRequestContext;\n+import javax.ws.rs.container.ContainerResponseContext;\n+import javax.ws.rs.core.MultivaluedHashMap;\n+import javax.ws.rs.core.MultivaluedMap;\n+import javax.ws.rs.core.Response;\n+\n+import io.helidon.webserver.cors.CORSSupport;\n+import io.helidon.webserver.cors.CrossOriginConfig;\n+\n+/**\n+ * MP implementation of {@link CORSSupport}.\n+ */\n+class CORSSupportMP extends CORSSupport {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NDUyNQ=="}, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5NzAzMA==", "bodyText": "Please add @ConstrainedTo(RuntimeType.SERVER)", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410097030", "createdAt": "2020-04-17T09:14:34Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CrossOriginAutoDiscoverable.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.cors;\n+\n+import javax.ws.rs.core.FeatureContext;\n+\n+import org.glassfish.jersey.internal.spi.AutoDiscoverable;\n+\n+/**\n+ * Class CrossOriginAutoDiscoverable.\n+ */\n+public class CrossOriginAutoDiscoverable implements AutoDiscoverable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA5ODAxMw==", "bodyText": "Please update the javadoc to clearly state this is for Jersey autodiscoverable (as it should not be used directly by anybody)", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410098013", "createdAt": "2020-04-17T09:16:18Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CrossOriginAutoDiscoverable.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.cors;\n+\n+import javax.ws.rs.core.FeatureContext;\n+\n+import org.glassfish.jersey.internal.spi.AutoDiscoverable;\n+\n+/**\n+ * Class CrossOriginAutoDiscoverable.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMTM4OQ==", "bodyText": "In MP - shouldn't we map this to resource class and resource method?\nMaybe the approach of fully qualified classname + method name + CORS parameters would be easier for MP users?\nSuch as:\nio.helidon.microprofile.cors.CrossOriginTest.CorsResource2.options.value=http://foo.bar,http://bar.foo\nio.helidon.microprofile.cors.CrossOriginTest.CorsResource2.options.allowHeaders=X-foo,X-bar\nio.helidon.microprofile.cors.CrossOriginTest.CorsResource2.options.allowMethods=DELETE,PUT\nio.helidon.microprofile.cors.CrossOriginTest.CorsResource2.options.allowCredentials=true\nio.helidon.microprofile.cors.CrossOriginTest.CorsResource2.options.maxAge=-1", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410101389", "createdAt": "2020-04-17T09:22:52Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/test/resources/META-INF/microprofile-config.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+# Copyright (c) 2019, 2020 Oracle and/or its affiliates.\n+#\n+# Licensed under the Apache License, Version 2.0 (the \"License\");\n+# you may not use this file except in compliance with the License.\n+# You may obtain a copy of the License at\n+#\n+#     http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+cors.paths.0.path-prefix=/cors3", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMjAyOA==", "bodyText": "Class is package local, public methods should not exist here", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410102028", "createdAt": "2020-04-17T09:23:52Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/Aggregator.java", "diffHunk": "@@ -0,0 +1,307 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.webserver.PathMatcher;\n+\n+import static io.helidon.webserver.cors.CORSSupportHelper.normalize;\n+\n+/**\n+ * Collects CORS set-up information from various sources and looks up the relevant CORS information given a request's path.\n+ * <p>\n+ *    The caller can build up the cross-config information over multiple invocations of the exposed methods. The behavior is that\n+ *    of a {@link LinkedHashMap}:\n+ *    <ul>\n+ *        <li>when <em>storing</em> cross-config information, the <em>latest</em> invocation that specifies the same path\n+ *        expression overwrites any preceding settings for the same path expression, and</li>\n+ *        <li>when <em>matching</em> against a request's path, the code checks the path matchers <em>in the order\n+ *        they were added</em> to the aggregator, whether by {@link #mappedConfig} or {@link #addCrossOrigin} or the {@link Setter}\n+ *        methods.\n+ *    </ul>\n+ * </p>\n+ * <p>\n+ *     The {@code Setter} methods affect the so-called \"pathless\" entry. Those methods have no explicit path, so we record\n+ *     their settings in an entry with path expression {@value #PATHLESS_KEY} which matches everything.\n+ * </p>\n+ * <p>\n+ *     If the developer uses the {@link #mappedConfig} or {@link #addCrossOrigin} methods <em>along with</em> the {@code Setter}\n+ *     methods, the results are predictable but might be confusing. The {@code config} and {@code addCrossOrigin} methods\n+ *     <em>overwrite</em> any entry with the same path expression, whereas the {@code Setter} methods <em>update</em> an existing\n+ *     entry with path {@value #PATHLESS_KEY}, creating one if needed. So, if the config or an {@code addCrossOrigin}\n+ *     invocation sets values for that same path expression then results can be surprising.\n+ *     path\n+ * </p>\n+ *\n+ */\n+class Aggregator implements Setter<Aggregator> {\n+\n+    // Key value for the map corresponding to the cross-origin config managed by the {@link Setter} methods\n+    static final String PATHLESS_KEY = \"{+}\";\n+\n+    // Records paths and configs added via addCrossOriginConfig\n+    private final Map<String, CrossOriginConfigMatchable> crossOriginConfigMatchables = new LinkedHashMap<>();\n+\n+    private boolean isEnabled = true;\n+\n+    /**\n+     * Factory method.\n+     *\n+     * @return new CrossOriginConfigAggregatpr\n+     */\n+    static Aggregator create() {\n+        return new Aggregator();\n+    }\n+\n+    private Aggregator() {\n+    }\n+\n+    /**\n+     * Reports whether the sources of CORS information have left CORS enabled or not. If there has been an explicit setting,\n+     * use the most recent. Otherwise\n+     *\n+     * @return if CORS processing should be done\n+     */\n+    public boolean isEnabled() {\n+        return isEnabled;\n+    }\n+\n+    /**\n+     * Add cross-origin information from a {@link Config} node.\n+     *\n+     * @param config {@code Config} node containing\n+     * @return updated builder\n+     */\n+    public Aggregator mappedConfig(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMjczNg==", "bodyText": "Can you please rename to CorsSetter? Even though the class is not public, this is a bit too generic name.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410102736", "createdAt": "2020-04-17T09:25:07Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/Setter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+/**\n+ * Defines common behavior between {@code CrossOriginConfig} and {@link CORSSupport.Builder} for assiging CORS-related\n+ * attributes.\n+ *\n+ * @param <T> the type of the implementing class so the fluid methods can return the correct type\n+ */\n+interface Setter<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMjkxNQ==", "bodyText": "typo: assiging should be assigning", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410102915", "createdAt": "2020-04-17T09:25:22Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/Setter.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+/**\n+ * Defines common behavior between {@code CrossOriginConfig} and {@link CORSSupport.Builder} for assiging CORS-related", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwMzg5NQ==", "bodyText": "As in MP, please rename to camel case: CorsSupport\nPlease do so for CorsSupportHelper, CorsSupportSe, SeReqeustAdapter, SeResponseAdapter", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410103895", "createdAt": "2020-04-17T09:27:12Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CORSSupport.java", "diffHunk": "@@ -0,0 +1,337 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.webserver.Handler;\n+import io.helidon.webserver.Routing;\n+import io.helidon.webserver.ServerRequest;\n+import io.helidon.webserver.ServerResponse;\n+import io.helidon.webserver.Service;\n+\n+/**\n+ * A Helidon service and handler implementation that implements CORS, for both the application and for built-in Helidon\n+ * services (such as OpenAPI and metrics).\n+ * <p>\n+ *     The caller can set up the {@code CORSSupport} in a combination of these ways:\n+ * </p>\n+ *     <ul>\n+ *         <li>from a {@link Config} node supplied programmatically,</li>\n+ *         <li>from one or more {@link CrossOriginConfig} objects supplied programmatically, each associated with a path to which\n+ *         it applies, and</li>\n+ *         <li>by setting individual CORS-related attributes on the {@link Builder} (which affects the CORS behavior for the\n+ *         {@value Aggregator#PATHLESS_KEY} path).</li>\n+ *     </ul>\n+ * <p>\n+ *     See the {@link Builder#build} method for how the builder resolves conflicts among these sources.\n+ * </p>\n+ * <p>\n+ *     If none of these sources is used, the {@code CORSSupport} applies defaults as described for\n+ *     {@link CrossOriginConfig}.\n+ * </p>\n+ *\n+ */\n+public abstract class CORSSupport implements Service, Handler {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwNTYxOA==", "bodyText": "Please do not add factory methods to builders themself.\nEither do CrossOriginConfig.builder(CrossOriginConfig config) or add an instance method config(CrossOriginConfig)", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410105618", "createdAt": "2020-04-17T09:30:16Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver.cors;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import io.helidon.config.Config;\n+\n+import static io.helidon.webserver.cors.Aggregator.PATHLESS_KEY;\n+\n+/**\n+ * Represents information about cross origin request sharing.\n+ *\n+ * Applications can create instance in two ways:\n+ * <ul>\n+ *     <li>using a {@code Builder} explicitly\n+ *     <p>\n+ *     Obtain a suitable builder by:\n+ *     </p>\n+ *     <ul>\n+ *         <li>explicitly getting a builder using {@link #builder()},</li>\n+ *         <li>invoking the static {@link Builder#from} method and\n+ *         passing an existing instance of {@code CrossOriginConfig}; the resulting {@code Builder} is\n+ *         intialized using the configuration node provided, or</li>\n+ *         <li>obtaining a {@link Config} instance and invoking {@code Config.as}, passing {@code Builder#from}</li>\n+ *     </ul>\n+ *     and then invoke methods on the builder, finally invoking the builder's {@code build} method to create the instance.\n+ *     <li>invoking the static {@link #from} method, passing a config node containing the cross-origin information to be\n+ *     converted.\n+ *     </li>\n+ * </ul>\n+ *\n+ * @see MappedCrossOriginConfig\n+ *\n+ */\n+public class CrossOriginConfig {\n+\n+    /**\n+     * Key for the node within the CORS config that contains the list of path information.\n+     */\n+    public static final String CORS_PATHS_CONFIG_KEY = \"paths\";\n+\n+    /**\n+     * Header Access-Control-Allow-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_HEADERS = \"Access-Control-Allow-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Methods.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\";\n+    /**\n+     * Header Access-Control-Allow-Credentials.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS = \"Access-Control-Allow-Credentials\";\n+    /**\n+     * Header Access-Control-Max-Age.\n+     */\n+    public static final String ACCESS_CONTROL_MAX_AGE = \"Access-Control-Max-Age\";\n+    /**\n+     * Header Access-Control-Expose-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_EXPOSE_HEADERS = \"Access-Control-Expose-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Origin.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";\n+    /**\n+     * Header Access-Control-Request-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_HEADERS = \"Access-Control-Request-Headers\";\n+    /**\n+     * Header Access-Control-Request-Method.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\n+\n+    /**\n+     * Default cache expiration in seconds.\n+     */\n+    public static final long DEFAULT_AGE = 3600;\n+\n+    private final String pathPrefix;\n+    private final boolean enabled;\n+    private final String[] allowOrigins;\n+    private final String[] allowHeaders;\n+    private final String[] exposeHeaders;\n+    private final String[] allowMethods;\n+    private final boolean allowCredentials;\n+    private final long maxAge;\n+\n+    private CrossOriginConfig(Builder builder) {\n+        this.pathPrefix = builder.pathPrefix;\n+        this.enabled = builder.enabled;\n+        this.allowOrigins = builder.origins;\n+        this.allowHeaders = builder.allowHeaders;\n+        this.exposeHeaders = builder.exposeHeaders;\n+        this.allowMethods = builder.allowMethods;\n+        this.allowCredentials = builder.allowCredentials;\n+        this.maxAge = builder.maxAge;\n+    }\n+\n+    /**\n+     * @return a new builder for basic cross origin config\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a new {@code CrossOriginConfig} instance using the provided config node.\n+     *\n+     * @param config node containing cross-origin information\n+     * @return new {@code Basic} instance based on the configuration\n+     */\n+    public static CrossOriginConfig from(Config config) {\n+        return Builder.from(config).build();\n+    }\n+\n+    /**\n+     * @return the configured path prefix; defaults to a \"match-everything\" pattern\n+     */\n+    public String pathPrefix() {\n+        return pathPrefix;\n+    }\n+\n+    /**\n+     * @return whether this cross-origin config is enabled\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * @return the allowed origins\n+     */\n+    public String[] allowOrigins() {\n+        return copyOf(allowOrigins);\n+    }\n+\n+    /**\n+     * @return the allowed headers\n+     */\n+    public String[] allowHeaders() {\n+        return copyOf(allowHeaders);\n+    }\n+\n+    /**\n+     * @return headers OK to expose in responses\n+     */\n+    public String[] exposeHeaders() {\n+        return copyOf(exposeHeaders);\n+    }\n+\n+    /**\n+     * @return allowed methods\n+     */\n+    public String[] allowMethods() {\n+        return copyOf(allowMethods);\n+    }\n+\n+    /**\n+     * @return allowed credentials\n+     */\n+    public boolean allowCredentials() {\n+        return allowCredentials;\n+    }\n+\n+    /**\n+     * @return maximum age\n+     */\n+    public long maxAge() {\n+        return maxAge;\n+    }\n+\n+    private static String[] copyOf(String[] strings) {\n+        return strings != null ? Arrays.copyOf(strings, strings.length) : new String[0];\n+    }\n+\n+    /**\n+     * Builder for {@link CrossOriginConfig}.\n+     */\n+    public static class Builder implements Setter<Builder>, io.helidon.common.Builder<CrossOriginConfig>,\n+            Function<Config, Builder> {\n+\n+        static final String[] ALLOW_ALL = {\"*\"};\n+\n+        private String pathPrefix = PATHLESS_KEY; // not typically used except when inside a MappedCrossOriginConfig\n+        private boolean enabled = true;\n+        private String[] origins = ALLOW_ALL;\n+        private String[] allowHeaders = ALLOW_ALL;\n+        private String[] exposeHeaders;\n+        private String[] allowMethods = ALLOW_ALL;\n+        private boolean allowCredentials;\n+        private long maxAge = DEFAULT_AGE;\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Creates a new builder based on the values in an existing {@code CrossOriginConfig} object.\n+         *\n+         * @param original the existing cross-origin config object\n+         * @return new Builder initialized from the existing object's settings\n+         */\n+        public static Builder from(CrossOriginConfig original) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 219}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwNjQyNA==", "bodyText": "Do not add static factory methods to builders.\nPlease move line 238 to the static builder method on CrossOriginConfig", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410106424", "createdAt": "2020-04-17T09:31:33Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver.cors;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import io.helidon.config.Config;\n+\n+import static io.helidon.webserver.cors.Aggregator.PATHLESS_KEY;\n+\n+/**\n+ * Represents information about cross origin request sharing.\n+ *\n+ * Applications can create instance in two ways:\n+ * <ul>\n+ *     <li>using a {@code Builder} explicitly\n+ *     <p>\n+ *     Obtain a suitable builder by:\n+ *     </p>\n+ *     <ul>\n+ *         <li>explicitly getting a builder using {@link #builder()},</li>\n+ *         <li>invoking the static {@link Builder#from} method and\n+ *         passing an existing instance of {@code CrossOriginConfig}; the resulting {@code Builder} is\n+ *         intialized using the configuration node provided, or</li>\n+ *         <li>obtaining a {@link Config} instance and invoking {@code Config.as}, passing {@code Builder#from}</li>\n+ *     </ul>\n+ *     and then invoke methods on the builder, finally invoking the builder's {@code build} method to create the instance.\n+ *     <li>invoking the static {@link #from} method, passing a config node containing the cross-origin information to be\n+ *     converted.\n+ *     </li>\n+ * </ul>\n+ *\n+ * @see MappedCrossOriginConfig\n+ *\n+ */\n+public class CrossOriginConfig {\n+\n+    /**\n+     * Key for the node within the CORS config that contains the list of path information.\n+     */\n+    public static final String CORS_PATHS_CONFIG_KEY = \"paths\";\n+\n+    /**\n+     * Header Access-Control-Allow-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_HEADERS = \"Access-Control-Allow-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Methods.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\";\n+    /**\n+     * Header Access-Control-Allow-Credentials.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS = \"Access-Control-Allow-Credentials\";\n+    /**\n+     * Header Access-Control-Max-Age.\n+     */\n+    public static final String ACCESS_CONTROL_MAX_AGE = \"Access-Control-Max-Age\";\n+    /**\n+     * Header Access-Control-Expose-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_EXPOSE_HEADERS = \"Access-Control-Expose-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Origin.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";\n+    /**\n+     * Header Access-Control-Request-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_HEADERS = \"Access-Control-Request-Headers\";\n+    /**\n+     * Header Access-Control-Request-Method.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\n+\n+    /**\n+     * Default cache expiration in seconds.\n+     */\n+    public static final long DEFAULT_AGE = 3600;\n+\n+    private final String pathPrefix;\n+    private final boolean enabled;\n+    private final String[] allowOrigins;\n+    private final String[] allowHeaders;\n+    private final String[] exposeHeaders;\n+    private final String[] allowMethods;\n+    private final boolean allowCredentials;\n+    private final long maxAge;\n+\n+    private CrossOriginConfig(Builder builder) {\n+        this.pathPrefix = builder.pathPrefix;\n+        this.enabled = builder.enabled;\n+        this.allowOrigins = builder.origins;\n+        this.allowHeaders = builder.allowHeaders;\n+        this.exposeHeaders = builder.exposeHeaders;\n+        this.allowMethods = builder.allowMethods;\n+        this.allowCredentials = builder.allowCredentials;\n+        this.maxAge = builder.maxAge;\n+    }\n+\n+    /**\n+     * @return a new builder for basic cross origin config\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a new {@code CrossOriginConfig} instance using the provided config node.\n+     *\n+     * @param config node containing cross-origin information\n+     * @return new {@code Basic} instance based on the configuration\n+     */\n+    public static CrossOriginConfig from(Config config) {\n+        return Builder.from(config).build();\n+    }\n+\n+    /**\n+     * @return the configured path prefix; defaults to a \"match-everything\" pattern\n+     */\n+    public String pathPrefix() {\n+        return pathPrefix;\n+    }\n+\n+    /**\n+     * @return whether this cross-origin config is enabled\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * @return the allowed origins\n+     */\n+    public String[] allowOrigins() {\n+        return copyOf(allowOrigins);\n+    }\n+\n+    /**\n+     * @return the allowed headers\n+     */\n+    public String[] allowHeaders() {\n+        return copyOf(allowHeaders);\n+    }\n+\n+    /**\n+     * @return headers OK to expose in responses\n+     */\n+    public String[] exposeHeaders() {\n+        return copyOf(exposeHeaders);\n+    }\n+\n+    /**\n+     * @return allowed methods\n+     */\n+    public String[] allowMethods() {\n+        return copyOf(allowMethods);\n+    }\n+\n+    /**\n+     * @return allowed credentials\n+     */\n+    public boolean allowCredentials() {\n+        return allowCredentials;\n+    }\n+\n+    /**\n+     * @return maximum age\n+     */\n+    public long maxAge() {\n+        return maxAge;\n+    }\n+\n+    private static String[] copyOf(String[] strings) {\n+        return strings != null ? Arrays.copyOf(strings, strings.length) : new String[0];\n+    }\n+\n+    /**\n+     * Builder for {@link CrossOriginConfig}.\n+     */\n+    public static class Builder implements Setter<Builder>, io.helidon.common.Builder<CrossOriginConfig>,\n+            Function<Config, Builder> {\n+\n+        static final String[] ALLOW_ALL = {\"*\"};\n+\n+        private String pathPrefix = PATHLESS_KEY; // not typically used except when inside a MappedCrossOriginConfig\n+        private boolean enabled = true;\n+        private String[] origins = ALLOW_ALL;\n+        private String[] allowHeaders = ALLOW_ALL;\n+        private String[] exposeHeaders;\n+        private String[] allowMethods = ALLOW_ALL;\n+        private boolean allowCredentials;\n+        private long maxAge = DEFAULT_AGE;\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Creates a new builder based on the values in an existing {@code CrossOriginConfig} object.\n+         *\n+         * @param original the existing cross-origin config object\n+         * @return new Builder initialized from the existing object's settings\n+         */\n+        public static Builder from(CrossOriginConfig original) {\n+            return new Builder()\n+                    .pathPrefix(original.pathPrefix)\n+                    .enabled(original.enabled)\n+                    .allowCredentials(original.allowCredentials)\n+                    .allowHeaders(original.allowHeaders)\n+                    .allowMethods(original.allowMethods)\n+                    .allowOrigins(original.allowOrigins)\n+                    .exposeHeaders(original.exposeHeaders)\n+                    .maxAge(original.maxAge);\n+        }\n+\n+        /**\n+         * Creates a new {@code Builder}instance from the specified configuration.\n+         *\n+         * @param config node containing cross-origin information\n+         * @return new {@code Builder} initialized from the config\n+         */\n+        public static Builder from(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNjA3NQ==", "bodyText": "In Helidon, when a method accepts config, it should be called config. Also it should update values already configured on the builder - this method just ignores everything already configured and returns a brand new builder.\nThis is inconsistent with the builder pattern we use, where all builder methods mutate the state of the builder.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410116075", "createdAt": "2020-04-17T09:49:12Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver.cors;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import io.helidon.config.Config;\n+\n+import static io.helidon.webserver.cors.Aggregator.PATHLESS_KEY;\n+\n+/**\n+ * Represents information about cross origin request sharing.\n+ *\n+ * Applications can create instance in two ways:\n+ * <ul>\n+ *     <li>using a {@code Builder} explicitly\n+ *     <p>\n+ *     Obtain a suitable builder by:\n+ *     </p>\n+ *     <ul>\n+ *         <li>explicitly getting a builder using {@link #builder()},</li>\n+ *         <li>invoking the static {@link Builder#from} method and\n+ *         passing an existing instance of {@code CrossOriginConfig}; the resulting {@code Builder} is\n+ *         intialized using the configuration node provided, or</li>\n+ *         <li>obtaining a {@link Config} instance and invoking {@code Config.as}, passing {@code Builder#from}</li>\n+ *     </ul>\n+ *     and then invoke methods on the builder, finally invoking the builder's {@code build} method to create the instance.\n+ *     <li>invoking the static {@link #from} method, passing a config node containing the cross-origin information to be\n+ *     converted.\n+ *     </li>\n+ * </ul>\n+ *\n+ * @see MappedCrossOriginConfig\n+ *\n+ */\n+public class CrossOriginConfig {\n+\n+    /**\n+     * Key for the node within the CORS config that contains the list of path information.\n+     */\n+    public static final String CORS_PATHS_CONFIG_KEY = \"paths\";\n+\n+    /**\n+     * Header Access-Control-Allow-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_HEADERS = \"Access-Control-Allow-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Methods.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\";\n+    /**\n+     * Header Access-Control-Allow-Credentials.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS = \"Access-Control-Allow-Credentials\";\n+    /**\n+     * Header Access-Control-Max-Age.\n+     */\n+    public static final String ACCESS_CONTROL_MAX_AGE = \"Access-Control-Max-Age\";\n+    /**\n+     * Header Access-Control-Expose-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_EXPOSE_HEADERS = \"Access-Control-Expose-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Origin.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";\n+    /**\n+     * Header Access-Control-Request-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_HEADERS = \"Access-Control-Request-Headers\";\n+    /**\n+     * Header Access-Control-Request-Method.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\n+\n+    /**\n+     * Default cache expiration in seconds.\n+     */\n+    public static final long DEFAULT_AGE = 3600;\n+\n+    private final String pathPrefix;\n+    private final boolean enabled;\n+    private final String[] allowOrigins;\n+    private final String[] allowHeaders;\n+    private final String[] exposeHeaders;\n+    private final String[] allowMethods;\n+    private final boolean allowCredentials;\n+    private final long maxAge;\n+\n+    private CrossOriginConfig(Builder builder) {\n+        this.pathPrefix = builder.pathPrefix;\n+        this.enabled = builder.enabled;\n+        this.allowOrigins = builder.origins;\n+        this.allowHeaders = builder.allowHeaders;\n+        this.exposeHeaders = builder.exposeHeaders;\n+        this.allowMethods = builder.allowMethods;\n+        this.allowCredentials = builder.allowCredentials;\n+        this.maxAge = builder.maxAge;\n+    }\n+\n+    /**\n+     * @return a new builder for basic cross origin config\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a new {@code CrossOriginConfig} instance using the provided config node.\n+     *\n+     * @param config node containing cross-origin information\n+     * @return new {@code Basic} instance based on the configuration\n+     */\n+    public static CrossOriginConfig from(Config config) {\n+        return Builder.from(config).build();\n+    }\n+\n+    /**\n+     * @return the configured path prefix; defaults to a \"match-everything\" pattern\n+     */\n+    public String pathPrefix() {\n+        return pathPrefix;\n+    }\n+\n+    /**\n+     * @return whether this cross-origin config is enabled\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * @return the allowed origins\n+     */\n+    public String[] allowOrigins() {\n+        return copyOf(allowOrigins);\n+    }\n+\n+    /**\n+     * @return the allowed headers\n+     */\n+    public String[] allowHeaders() {\n+        return copyOf(allowHeaders);\n+    }\n+\n+    /**\n+     * @return headers OK to expose in responses\n+     */\n+    public String[] exposeHeaders() {\n+        return copyOf(exposeHeaders);\n+    }\n+\n+    /**\n+     * @return allowed methods\n+     */\n+    public String[] allowMethods() {\n+        return copyOf(allowMethods);\n+    }\n+\n+    /**\n+     * @return allowed credentials\n+     */\n+    public boolean allowCredentials() {\n+        return allowCredentials;\n+    }\n+\n+    /**\n+     * @return maximum age\n+     */\n+    public long maxAge() {\n+        return maxAge;\n+    }\n+\n+    private static String[] copyOf(String[] strings) {\n+        return strings != null ? Arrays.copyOf(strings, strings.length) : new String[0];\n+    }\n+\n+    /**\n+     * Builder for {@link CrossOriginConfig}.\n+     */\n+    public static class Builder implements Setter<Builder>, io.helidon.common.Builder<CrossOriginConfig>,\n+            Function<Config, Builder> {\n+\n+        static final String[] ALLOW_ALL = {\"*\"};\n+\n+        private String pathPrefix = PATHLESS_KEY; // not typically used except when inside a MappedCrossOriginConfig\n+        private boolean enabled = true;\n+        private String[] origins = ALLOW_ALL;\n+        private String[] allowHeaders = ALLOW_ALL;\n+        private String[] exposeHeaders;\n+        private String[] allowMethods = ALLOW_ALL;\n+        private boolean allowCredentials;\n+        private long maxAge = DEFAULT_AGE;\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Creates a new builder based on the values in an existing {@code CrossOriginConfig} object.\n+         *\n+         * @param original the existing cross-origin config object\n+         * @return new Builder initialized from the existing object's settings\n+         */\n+        public static Builder from(CrossOriginConfig original) {\n+            return new Builder()\n+                    .pathPrefix(original.pathPrefix)\n+                    .enabled(original.enabled)\n+                    .allowCredentials(original.allowCredentials)\n+                    .allowHeaders(original.allowHeaders)\n+                    .allowMethods(original.allowMethods)\n+                    .allowOrigins(original.allowOrigins)\n+                    .exposeHeaders(original.exposeHeaders)\n+                    .maxAge(original.maxAge);\n+        }\n+\n+        /**\n+         * Creates a new {@code Builder}instance from the specified configuration.\n+         *\n+         * @param config node containing cross-origin information\n+         * @return new {@code Builder} initialized from the config\n+         */\n+        public static Builder from(Config config) {\n+            return Loader.Basic.builder(config);\n+        }\n+\n+        @Override\n+        public Builder apply(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 242}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNjc0OA==", "bodyText": "Whenever time units are used and are not as a parameter, please name the method accordingly (e.g. maxAgeSeconds or maxAgeMillis). You can also add another method that accepts a time unit.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410116748", "createdAt": "2020-04-17T09:50:26Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -0,0 +1,308 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.webserver.cors;\n+\n+import java.util.Arrays;\n+import java.util.function.Function;\n+\n+import io.helidon.config.Config;\n+\n+import static io.helidon.webserver.cors.Aggregator.PATHLESS_KEY;\n+\n+/**\n+ * Represents information about cross origin request sharing.\n+ *\n+ * Applications can create instance in two ways:\n+ * <ul>\n+ *     <li>using a {@code Builder} explicitly\n+ *     <p>\n+ *     Obtain a suitable builder by:\n+ *     </p>\n+ *     <ul>\n+ *         <li>explicitly getting a builder using {@link #builder()},</li>\n+ *         <li>invoking the static {@link Builder#from} method and\n+ *         passing an existing instance of {@code CrossOriginConfig}; the resulting {@code Builder} is\n+ *         intialized using the configuration node provided, or</li>\n+ *         <li>obtaining a {@link Config} instance and invoking {@code Config.as}, passing {@code Builder#from}</li>\n+ *     </ul>\n+ *     and then invoke methods on the builder, finally invoking the builder's {@code build} method to create the instance.\n+ *     <li>invoking the static {@link #from} method, passing a config node containing the cross-origin information to be\n+ *     converted.\n+ *     </li>\n+ * </ul>\n+ *\n+ * @see MappedCrossOriginConfig\n+ *\n+ */\n+public class CrossOriginConfig {\n+\n+    /**\n+     * Key for the node within the CORS config that contains the list of path information.\n+     */\n+    public static final String CORS_PATHS_CONFIG_KEY = \"paths\";\n+\n+    /**\n+     * Header Access-Control-Allow-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_HEADERS = \"Access-Control-Allow-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Methods.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_METHODS = \"Access-Control-Allow-Methods\";\n+    /**\n+     * Header Access-Control-Allow-Credentials.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_CREDENTIALS = \"Access-Control-Allow-Credentials\";\n+    /**\n+     * Header Access-Control-Max-Age.\n+     */\n+    public static final String ACCESS_CONTROL_MAX_AGE = \"Access-Control-Max-Age\";\n+    /**\n+     * Header Access-Control-Expose-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_EXPOSE_HEADERS = \"Access-Control-Expose-Headers\";\n+    /**\n+     * Header Access-Control-Allow-Origin.\n+     */\n+    public static final String ACCESS_CONTROL_ALLOW_ORIGIN = \"Access-Control-Allow-Origin\";\n+    /**\n+     * Header Access-Control-Request-Headers.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_HEADERS = \"Access-Control-Request-Headers\";\n+    /**\n+     * Header Access-Control-Request-Method.\n+     */\n+    public static final String ACCESS_CONTROL_REQUEST_METHOD = \"Access-Control-Request-Method\";\n+\n+    /**\n+     * Default cache expiration in seconds.\n+     */\n+    public static final long DEFAULT_AGE = 3600;\n+\n+    private final String pathPrefix;\n+    private final boolean enabled;\n+    private final String[] allowOrigins;\n+    private final String[] allowHeaders;\n+    private final String[] exposeHeaders;\n+    private final String[] allowMethods;\n+    private final boolean allowCredentials;\n+    private final long maxAge;\n+\n+    private CrossOriginConfig(Builder builder) {\n+        this.pathPrefix = builder.pathPrefix;\n+        this.enabled = builder.enabled;\n+        this.allowOrigins = builder.origins;\n+        this.allowHeaders = builder.allowHeaders;\n+        this.exposeHeaders = builder.exposeHeaders;\n+        this.allowMethods = builder.allowMethods;\n+        this.allowCredentials = builder.allowCredentials;\n+        this.maxAge = builder.maxAge;\n+    }\n+\n+    /**\n+     * @return a new builder for basic cross origin config\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a new {@code CrossOriginConfig} instance using the provided config node.\n+     *\n+     * @param config node containing cross-origin information\n+     * @return new {@code Basic} instance based on the configuration\n+     */\n+    public static CrossOriginConfig from(Config config) {\n+        return Builder.from(config).build();\n+    }\n+\n+    /**\n+     * @return the configured path prefix; defaults to a \"match-everything\" pattern\n+     */\n+    public String pathPrefix() {\n+        return pathPrefix;\n+    }\n+\n+    /**\n+     * @return whether this cross-origin config is enabled\n+     */\n+    public boolean isEnabled() {\n+        return enabled;\n+    }\n+\n+    /**\n+     * @return the allowed origins\n+     */\n+    public String[] allowOrigins() {\n+        return copyOf(allowOrigins);\n+    }\n+\n+    /**\n+     * @return the allowed headers\n+     */\n+    public String[] allowHeaders() {\n+        return copyOf(allowHeaders);\n+    }\n+\n+    /**\n+     * @return headers OK to expose in responses\n+     */\n+    public String[] exposeHeaders() {\n+        return copyOf(exposeHeaders);\n+    }\n+\n+    /**\n+     * @return allowed methods\n+     */\n+    public String[] allowMethods() {\n+        return copyOf(allowMethods);\n+    }\n+\n+    /**\n+     * @return allowed credentials\n+     */\n+    public boolean allowCredentials() {\n+        return allowCredentials;\n+    }\n+\n+    /**\n+     * @return maximum age\n+     */\n+    public long maxAge() {\n+        return maxAge;\n+    }\n+\n+    private static String[] copyOf(String[] strings) {\n+        return strings != null ? Arrays.copyOf(strings, strings.length) : new String[0];\n+    }\n+\n+    /**\n+     * Builder for {@link CrossOriginConfig}.\n+     */\n+    public static class Builder implements Setter<Builder>, io.helidon.common.Builder<CrossOriginConfig>,\n+            Function<Config, Builder> {\n+\n+        static final String[] ALLOW_ALL = {\"*\"};\n+\n+        private String pathPrefix = PATHLESS_KEY; // not typically used except when inside a MappedCrossOriginConfig\n+        private boolean enabled = true;\n+        private String[] origins = ALLOW_ALL;\n+        private String[] allowHeaders = ALLOW_ALL;\n+        private String[] exposeHeaders;\n+        private String[] allowMethods = ALLOW_ALL;\n+        private boolean allowCredentials;\n+        private long maxAge = DEFAULT_AGE;\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Creates a new builder based on the values in an existing {@code CrossOriginConfig} object.\n+         *\n+         * @param original the existing cross-origin config object\n+         * @return new Builder initialized from the existing object's settings\n+         */\n+        public static Builder from(CrossOriginConfig original) {\n+            return new Builder()\n+                    .pathPrefix(original.pathPrefix)\n+                    .enabled(original.enabled)\n+                    .allowCredentials(original.allowCredentials)\n+                    .allowHeaders(original.allowHeaders)\n+                    .allowMethods(original.allowMethods)\n+                    .allowOrigins(original.allowOrigins)\n+                    .exposeHeaders(original.exposeHeaders)\n+                    .maxAge(original.maxAge);\n+        }\n+\n+        /**\n+         * Creates a new {@code Builder}instance from the specified configuration.\n+         *\n+         * @param config node containing cross-origin information\n+         * @return new {@code Builder} initialized from the config\n+         */\n+        public static Builder from(Config config) {\n+            return Loader.Basic.builder(config);\n+        }\n+\n+        @Override\n+        public Builder apply(Config config) {\n+            return from(config);\n+        }\n+\n+        /**\n+         * Updates the path prefix for this cross-origin config.\n+         *\n+         * @param pathPrefix new path prefix\n+         * @return updated builder\n+         */\n+        public Builder pathPrefix(String pathPrefix) {\n+            this.pathPrefix = pathPrefix;\n+            return this;\n+        }\n+\n+        String pathPrefix() {\n+            return pathPrefix;\n+        }\n+\n+        @Override\n+        public Builder enabled(boolean enabled) {\n+            this.enabled = enabled;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder allowOrigins(String... origins) {\n+            this.origins = copyOf(origins);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder allowHeaders(String... allowHeaders) {\n+            this.allowHeaders = copyOf(allowHeaders);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder exposeHeaders(String... exposeHeaders) {\n+            this.exposeHeaders = copyOf(exposeHeaders);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder allowMethods(String... allowMethods) {\n+            this.allowMethods = copyOf(allowMethods);\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder allowCredentials(boolean allowCredentials) {\n+            this.allowCredentials = allowCredentials;\n+            return this;\n+        }\n+\n+        @Override\n+        public Builder maxAge(long maxAge) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 298}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNzA3MA==", "bodyText": "Whenever time units are used and are not as a parameter, please name the method accordingly (e.g. maxAgeSeconds or maxAgeMillis). You can also add another method that accepts a time unit.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410117070", "createdAt": "2020-04-17T09:51:01Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CrossOrigin.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.microprofile.cors;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.Target;\n+\n+import static io.helidon.webserver.cors.CrossOriginConfig.DEFAULT_AGE;\n+import static java.lang.annotation.ElementType.METHOD;\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\n+\n+/**\n+ * CrossOrigin annotation.\n+ */\n+@Target(METHOD)\n+@Retention(RUNTIME)\n+@Documented\n+public @interface CrossOrigin {\n+\n+    /**\n+     * A list of origins that are allowed such as {@code \"http://foo.com\"} or\n+     * {@code \"*\"} to allow all origins. Corresponds to header {@code\n+     * Access-Control-Allow-Origin}.\n+     *\n+     * @return Allowed origins.\n+     */\n+    String[] value() default {\"*\"};\n+\n+    /**\n+     * A list of request headers that are allowed or {@code \"*\"} to allow all headers.\n+     * Corresponds to {@code Access-Control-Allow-Headers}.\n+     *\n+     * @return Allowed headers.\n+     */\n+    String[] allowHeaders() default {\"*\"};\n+\n+    /**\n+     * A list of response headers allowed for clients other than the \"standard\"\n+     * ones. Corresponds to {@code Access-Control-Expose-Headers}.\n+     *\n+     * @return Exposed headers.\n+     */\n+    String[] exposeHeaders() default {};\n+\n+    /**\n+     * A list of supported HTTP request methods. In response to pre-flight\n+     * requests. Corresponds to {@code Access-Control-Allow-Methods}.\n+     *\n+     * @return Allowed methods.\n+     */\n+    String[] allowMethods() default {\"*\"};\n+\n+    /**\n+     * Whether the client can send cookies or credentials. Corresponds to {@code\n+     * Access-Control-Allow-Credentials}.\n+     *\n+     * @return Allowed credentials.\n+     */\n+    boolean allowCredentials() default false;\n+\n+    /**\n+     * Pre-flight response duration in seconds. After time expires, a new pre-flight\n+     * request is required. Corresponds to {@code Access-Control-Max-Age}.\n+     *\n+     * @return Max age.\n+     */\n+    long maxAge() default DEFAULT_AGE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODMzMg==", "bodyText": "This does not seem to be a method relevant to the name of the class.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410118332", "createdAt": "2020-04-17T09:53:14Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/LogHelper.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.logging.Level;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.webserver.cors.CORSSupport.RequestAdapter;\n+import io.helidon.webserver.cors.CORSSupportHelper.RequestType;\n+\n+import static io.helidon.common.http.Http.Header.HOST;\n+import static io.helidon.common.http.Http.Header.ORIGIN;\n+import static io.helidon.webserver.cors.CORSSupportHelper.LOGGER;\n+import static io.helidon.webserver.cors.CrossOriginConfig.ACCESS_CONTROL_REQUEST_METHOD;\n+\n+class LogHelper {\n+\n+    static final Level DECISION_LEVEL = Level.FINE;\n+\n+    private LogHelper() {\n+    }\n+\n+    /**\n+     * Collects headers for assignment to a request or response and logging during assignment.\n+     */\n+    static class Headers {\n+        private final List<Map.Entry<String, Object>> headers = new ArrayList<>();\n+        private final List<String> notes = LOGGER.isLoggable(DECISION_LEVEL) ? new ArrayList<>() : null;\n+\n+        Headers add(String key, Object value) {\n+            headers.add(new AbstractMap.SimpleEntry<>(key, value));\n+            return this;\n+        }\n+\n+        Headers add(String key, Object value, String note) {\n+            add(key, value);\n+            if (notes != null) {\n+                notes.add(note);\n+            }\n+            return this;\n+        }\n+\n+        void set(BiConsumer<String, Object> consumer, String note) {\n+            headers.forEach(entry -> consumer.accept(entry.getKey(), entry.getValue()));\n+            LOGGER.log(DECISION_LEVEL, () -> note + \": \" + headers + (notes == null ? \"\" : notes));\n+        }\n+    }\n+\n+    static <T> boolean isRequestTypeNormal(boolean result, RequestAdapter<T> requestAdapter, Optional<String> originOpt,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODc4NQ==", "bodyText": "As it is only used to log information, the return type should be void and maybe rename it to something log relevant?", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410118785", "createdAt": "2020-04-17T09:54:08Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/LogHelper.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.logging.Level;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.webserver.cors.CORSSupport.RequestAdapter;\n+import io.helidon.webserver.cors.CORSSupportHelper.RequestType;\n+\n+import static io.helidon.common.http.Http.Header.HOST;\n+import static io.helidon.common.http.Http.Header.ORIGIN;\n+import static io.helidon.webserver.cors.CORSSupportHelper.LOGGER;\n+import static io.helidon.webserver.cors.CrossOriginConfig.ACCESS_CONTROL_REQUEST_METHOD;\n+\n+class LogHelper {\n+\n+    static final Level DECISION_LEVEL = Level.FINE;\n+\n+    private LogHelper() {\n+    }\n+\n+    /**\n+     * Collects headers for assignment to a request or response and logging during assignment.\n+     */\n+    static class Headers {\n+        private final List<Map.Entry<String, Object>> headers = new ArrayList<>();\n+        private final List<String> notes = LOGGER.isLoggable(DECISION_LEVEL) ? new ArrayList<>() : null;\n+\n+        Headers add(String key, Object value) {\n+            headers.add(new AbstractMap.SimpleEntry<>(key, value));\n+            return this;\n+        }\n+\n+        Headers add(String key, Object value, String note) {\n+            add(key, value);\n+            if (notes != null) {\n+                notes.add(note);\n+            }\n+            return this;\n+        }\n+\n+        void set(BiConsumer<String, Object> consumer, String note) {\n+            headers.forEach(entry -> consumer.accept(entry.getKey(), entry.getValue()));\n+            LOGGER.log(DECISION_LEVEL, () -> note + \": \" + headers + (notes == null ? \"\" : notes));\n+        }\n+    }\n+\n+    static <T> boolean isRequestTypeNormal(boolean result, RequestAdapter<T> requestAdapter, Optional<String> originOpt,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExODMzMg=="}, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExOTczMA==", "bodyText": "same as with previous method - void return type and name it with log in the name.\nAlso if this is all about logging, maybe checking that the log level is relevant would be good, before doing all the work (same for all methods in this class), as the first thing in every method:\nif (!LOGGER.isLoggable(DECISION_LEVEL)) {\n     return;\n}", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410119730", "createdAt": "2020-04-17T09:56:03Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/LogHelper.java", "diffHunk": "@@ -0,0 +1,133 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.AbstractMap;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.logging.Level;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.webserver.cors.CORSSupport.RequestAdapter;\n+import io.helidon.webserver.cors.CORSSupportHelper.RequestType;\n+\n+import static io.helidon.common.http.Http.Header.HOST;\n+import static io.helidon.common.http.Http.Header.ORIGIN;\n+import static io.helidon.webserver.cors.CORSSupportHelper.LOGGER;\n+import static io.helidon.webserver.cors.CrossOriginConfig.ACCESS_CONTROL_REQUEST_METHOD;\n+\n+class LogHelper {\n+\n+    static final Level DECISION_LEVEL = Level.FINE;\n+\n+    private LogHelper() {\n+    }\n+\n+    /**\n+     * Collects headers for assignment to a request or response and logging during assignment.\n+     */\n+    static class Headers {\n+        private final List<Map.Entry<String, Object>> headers = new ArrayList<>();\n+        private final List<String> notes = LOGGER.isLoggable(DECISION_LEVEL) ? new ArrayList<>() : null;\n+\n+        Headers add(String key, Object value) {\n+            headers.add(new AbstractMap.SimpleEntry<>(key, value));\n+            return this;\n+        }\n+\n+        Headers add(String key, Object value, String note) {\n+            add(key, value);\n+            if (notes != null) {\n+                notes.add(note);\n+            }\n+            return this;\n+        }\n+\n+        void set(BiConsumer<String, Object> consumer, String note) {\n+            headers.forEach(entry -> consumer.accept(entry.getKey(), entry.getValue()));\n+            LOGGER.log(DECISION_LEVEL, () -> note + \": \" + headers + (notes == null ? \"\" : notes));\n+        }\n+    }\n+\n+    static <T> boolean isRequestTypeNormal(boolean result, RequestAdapter<T> requestAdapter, Optional<String> originOpt,\n+            Optional<String> hostOpt) {\n+        // If no origin header or same as host, then just normal\n+\n+        List<String> reasonsWhyNormal = new ArrayList<>();\n+        List<String> factorsWhyCrossHost = new ArrayList<>();\n+\n+        if (originOpt.isEmpty()) {\n+            reasonsWhyNormal.add(\"header \" + ORIGIN + \" is absent\");\n+        } else {\n+            factorsWhyCrossHost.add(String.format(\"header %s is present (%s)\", ORIGIN, originOpt.get()));\n+        }\n+\n+        if (hostOpt.isEmpty()) {\n+            reasonsWhyNormal.add(\"header \" + HOST + \" is absent\");\n+        } else {\n+            factorsWhyCrossHost.add(String.format(\"header %s is present (%s)\", HOST, hostOpt.get()));\n+        }\n+\n+        if (hostOpt.isPresent() && originOpt.isPresent()) {\n+            String partOfOriginMatchingHost = \"://\" + hostOpt.get();\n+            if (originOpt.get()\n+                    .contains(partOfOriginMatchingHost)) {\n+                reasonsWhyNormal.add(String.format(\"header %s '%s' matches header %s '%s'; not cross-host\", ORIGIN,\n+                        originOpt.get(), HOST, hostOpt.get()));\n+            } else {\n+                factorsWhyCrossHost.add(String.format(\"header %s (%s) does not match header %s %s; cross-host\", ORIGIN,\n+                        originOpt.get(), HOST, hostOpt.get()));\n+            }\n+        }\n+\n+        if (result) {\n+            LOGGER.log(LogHelper.DECISION_LEVEL,\n+                    () -> String.format(\"Request %s is not cross-host: %s\", requestAdapter, reasonsWhyNormal));\n+        } else {\n+            LOGGER.log(LogHelper.DECISION_LEVEL,\n+                    () -> String.format(\"Request %s is cross-host: %s\", requestAdapter, factorsWhyCrossHost));\n+        }\n+        return result;\n+    }\n+\n+    static <T> RequestType inferCORSRequestType(RequestType result, RequestAdapter<T> requestAdapter, String methodName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEyMDE3OQ==", "bodyText": "Same as above - do not put static factory methods to Builder classes", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410120179", "createdAt": "2020-04-17T09:56:54Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/MappedCrossOriginConfig.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import io.helidon.config.Config;\n+\n+import static io.helidon.webserver.cors.CORSSupportHelper.normalize;\n+\n+/**\n+ * Cross-origin {@link CrossOriginConfig} instances linked to paths, plus an {@code enabled} setting. Most developers will not\n+ * need to use this directly from their applications.\n+ */\n+public class MappedCrossOriginConfig implements Iterable<Map.Entry<String, CrossOriginConfig>> {\n+\n+    private boolean isEnabled = true;\n+\n+    private final Map<String, Buildable> buildables;\n+\n+    /**\n+     * Holds both a builder for and, later, the built {@code CrossOriginConfig} instances each of which are mapped to\n+     * a path expression.\n+     */\n+    private static class Buildable {\n+        private final CrossOriginConfig.Builder builder;\n+        private CrossOriginConfig crossOriginConfig;\n+\n+        Buildable(CrossOriginConfig.Builder builder) {\n+            this.builder = builder;\n+        }\n+\n+        /**\n+         * Returns the instance, building it if needed.\n+         *\n+         * @return the built instance\n+         */\n+        CrossOriginConfig get() {\n+            if (crossOriginConfig == null) {\n+                crossOriginConfig = builder.build();\n+            }\n+           return crossOriginConfig;\n+        }\n+    }\n+\n+    private MappedCrossOriginConfig(Builder builder) {\n+        this.isEnabled = builder.enabledOpt.orElse(true);\n+        buildables = builder.builders;\n+\n+        // Force building to prevent any changes to the underlying builders that could cause surprising behavior later.\n+        buildables.forEach((path, b) -> b.get());\n+    }\n+\n+    /**\n+     * Returns a new builder for creating a {@code CrossOriginConfig.Mapped} instance.\n+     *\n+     * @return the new builder\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a new {@code Mapped} instance using the provided configuration.\n+     *\n+     * @param config node containing {@code Mapped} cross-origin information\n+     * @return new {@code Mapped} instance based on the config\n+     */\n+    public static MappedCrossOriginConfig from(Config config) {\n+        return Builder.from(config).build();\n+    }\n+\n+    @Override\n+    public Iterator<Map.Entry<String, CrossOriginConfig>> iterator() {\n+        return new Iterator<>() {\n+\n+            private final Iterator<Map.Entry<String, Buildable>> it = buildables.entrySet().iterator();\n+\n+            @Override\n+            public boolean hasNext() {\n+                return it.hasNext();\n+            }\n+\n+            @Override\n+            public Map.Entry<String, CrossOriginConfig> next() {\n+                Map.Entry<String, Buildable> next = it.next();\n+                return new AbstractMap.SimpleEntry<>(next.getKey(), next.getValue().get());\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Invokes the specified consumer for each entry in the mapped CORS config.\n+     * @param consumer accepts the path and the {@code CrossOriginConfig} for processing\n+     */\n+    public void forEach(BiConsumer<String, CrossOriginConfig> consumer) {\n+        buildables.forEach((path, buildable) -> consumer.accept(path, buildable.get()));\n+    }\n+\n+    /**\n+     * Finds the {@code CrossOriginConfig} associated with the given path expression, if any.\n+     *\n+     * @param pathExpr path expression to match on\n+     * @return {@code Optional} of the corresponding basic cross-origin information\n+     */\n+    public CrossOriginConfig get(String pathExpr) {\n+        Buildable b = buildables.get(normalize(pathExpr));\n+        return b == null ? null : b.get();\n+    }\n+\n+    /**\n+     * Reports whether this instance is enabled.\n+     * @return current enabled state\n+     */\n+    public boolean isEnabled() {\n+        return isEnabled;\n+    }\n+\n+    /**\n+     * Fluent builder for {@code Mapped} cross-origin config.\n+     */\n+    public static class Builder implements io.helidon.common.Builder<MappedCrossOriginConfig>, Function<Config, Builder> {\n+\n+        private Optional<Boolean> enabledOpt = Optional.empty();\n+        private final Map<String, Buildable> builders = new HashMap<>();\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Creates a new {@code Mapped.Builder} instance using the provided configuration.\n+         *\n+         * @param config node containing {@code Mapped} cross-origin information\n+         * @return new {@code Mapped.Builder} based on the config\n+         */\n+        public static Builder from(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEyMDM3MQ==", "bodyText": "And do not return new builder instances from instance methods.", "url": "https://github.com/oracle/helidon/pull/1633#discussion_r410120371", "createdAt": "2020-04-17T09:57:17Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/MappedCrossOriginConfig.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+package io.helidon.webserver.cors;\n+\n+import java.util.AbstractMap;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+\n+import io.helidon.config.Config;\n+\n+import static io.helidon.webserver.cors.CORSSupportHelper.normalize;\n+\n+/**\n+ * Cross-origin {@link CrossOriginConfig} instances linked to paths, plus an {@code enabled} setting. Most developers will not\n+ * need to use this directly from their applications.\n+ */\n+public class MappedCrossOriginConfig implements Iterable<Map.Entry<String, CrossOriginConfig>> {\n+\n+    private boolean isEnabled = true;\n+\n+    private final Map<String, Buildable> buildables;\n+\n+    /**\n+     * Holds both a builder for and, later, the built {@code CrossOriginConfig} instances each of which are mapped to\n+     * a path expression.\n+     */\n+    private static class Buildable {\n+        private final CrossOriginConfig.Builder builder;\n+        private CrossOriginConfig crossOriginConfig;\n+\n+        Buildable(CrossOriginConfig.Builder builder) {\n+            this.builder = builder;\n+        }\n+\n+        /**\n+         * Returns the instance, building it if needed.\n+         *\n+         * @return the built instance\n+         */\n+        CrossOriginConfig get() {\n+            if (crossOriginConfig == null) {\n+                crossOriginConfig = builder.build();\n+            }\n+           return crossOriginConfig;\n+        }\n+    }\n+\n+    private MappedCrossOriginConfig(Builder builder) {\n+        this.isEnabled = builder.enabledOpt.orElse(true);\n+        buildables = builder.builders;\n+\n+        // Force building to prevent any changes to the underlying builders that could cause surprising behavior later.\n+        buildables.forEach((path, b) -> b.get());\n+    }\n+\n+    /**\n+     * Returns a new builder for creating a {@code CrossOriginConfig.Mapped} instance.\n+     *\n+     * @return the new builder\n+     */\n+    public static Builder builder() {\n+        return new Builder();\n+    }\n+\n+    /**\n+     * Creates a new {@code Mapped} instance using the provided configuration.\n+     *\n+     * @param config node containing {@code Mapped} cross-origin information\n+     * @return new {@code Mapped} instance based on the config\n+     */\n+    public static MappedCrossOriginConfig from(Config config) {\n+        return Builder.from(config).build();\n+    }\n+\n+    @Override\n+    public Iterator<Map.Entry<String, CrossOriginConfig>> iterator() {\n+        return new Iterator<>() {\n+\n+            private final Iterator<Map.Entry<String, Buildable>> it = buildables.entrySet().iterator();\n+\n+            @Override\n+            public boolean hasNext() {\n+                return it.hasNext();\n+            }\n+\n+            @Override\n+            public Map.Entry<String, CrossOriginConfig> next() {\n+                Map.Entry<String, Buildable> next = it.next();\n+                return new AbstractMap.SimpleEntry<>(next.getKey(), next.getValue().get());\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Invokes the specified consumer for each entry in the mapped CORS config.\n+     * @param consumer accepts the path and the {@code CrossOriginConfig} for processing\n+     */\n+    public void forEach(BiConsumer<String, CrossOriginConfig> consumer) {\n+        buildables.forEach((path, buildable) -> consumer.accept(path, buildable.get()));\n+    }\n+\n+    /**\n+     * Finds the {@code CrossOriginConfig} associated with the given path expression, if any.\n+     *\n+     * @param pathExpr path expression to match on\n+     * @return {@code Optional} of the corresponding basic cross-origin information\n+     */\n+    public CrossOriginConfig get(String pathExpr) {\n+        Buildable b = buildables.get(normalize(pathExpr));\n+        return b == null ? null : b.get();\n+    }\n+\n+    /**\n+     * Reports whether this instance is enabled.\n+     * @return current enabled state\n+     */\n+    public boolean isEnabled() {\n+        return isEnabled;\n+    }\n+\n+    /**\n+     * Fluent builder for {@code Mapped} cross-origin config.\n+     */\n+    public static class Builder implements io.helidon.common.Builder<MappedCrossOriginConfig>, Function<Config, Builder> {\n+\n+        private Optional<Boolean> enabledOpt = Optional.empty();\n+        private final Map<String, Buildable> builders = new HashMap<>();\n+\n+        private Builder() {\n+        }\n+\n+        /**\n+         * Creates a new {@code Mapped.Builder} instance using the provided configuration.\n+         *\n+         * @param config node containing {@code Mapped} cross-origin information\n+         * @return new {@code Mapped.Builder} based on the config\n+         */\n+        public static Builder from(Config config) {\n+            return Loader.Mapped.builder(config);\n+        }\n+\n+        @Override\n+        public MappedCrossOriginConfig build() {\n+            return new MappedCrossOriginConfig(this);\n+        }\n+\n+\n+        @Override\n+        public Builder apply(Config config) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0d148d8cdeabe8c426b1c268ae40ce7e073da2f"}, "originalPosition": 167}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1778c63925bd113705a55cf23092d00c9e90584f", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1778c63925bd113705a55cf23092d00c9e90584f", "committedDate": "2020-04-17T11:32:07Z", "message": "Review comment: use camel case everywhere, even with acronyms"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4238821f36fb5c9130cf26a94043d3b54d8f8426", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/4238821f36fb5c9130cf26a94043d3b54d8f8426", "committedDate": "2020-04-17T11:34:13Z", "message": "Review comment: method in package-local class was public; change to package-local also"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44f1dea4d6692c94b20d26bc643e6347ba74d8b9", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/44f1dea4d6692c94b20d26bc643e6347ba74d8b9", "committedDate": "2020-04-17T11:51:51Z", "message": "More camel-casing changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d717cb99dd40ac63010329e28239194ff8803f3", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/1d717cb99dd40ac63010329e28239194ff8803f3", "committedDate": "2020-04-17T11:55:17Z", "message": "Review: add ContrainedTo(Runtime.SERVER) to CrossOriginAutoDiscoverable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a9260efd4874277d6b18ea98813710d01d3837", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/30a9260efd4874277d6b18ea98813710d01d3837", "committedDate": "2020-04-17T11:58:07Z", "message": "Review: emphasize CrossOriginAutoDiscoverable is not for general use"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ebfdf3286605a5f01f46bd9b8c65674fb9e8f5a5", "author": {"user": {"login": "tjquinno", "name": "Tim Quinn"}}, "url": "https://github.com/oracle/helidon/commit/ebfdf3286605a5f01f46bd9b8c65674fb9e8f5a5", "committedDate": "2020-04-17T12:05:23Z", "message": "Review: no public methods on package-private classes; those which implement interface methods remain public"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 705, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}