{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NjMxOTUz", "number": 2218, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODozNToxMlrOEStcjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjozODoyMFrOESyo9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDU0NDEyOnYy", "diffSide": "RIGHT", "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODozNToxMlrOG4CZTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjoxOTozMVrOG4J3xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ==", "bodyText": "I think this will fail the \u00a73.9 tests because it doesn't check n <= 1 cases and doesn't report them either.", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461412685", "createdAt": "2020-07-28T08:35:12Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        SubscriptionHelper.deferredRequest(this, requested, n);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQzOTQyNA==", "bodyText": "I see ... the accumulation of requests before actual subscription is provided:\nrequest(-1)\nrequest(10)\nsetSubscription(...)\nSeems like there is a hole in the TCK, just passed it", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461439424", "createdAt": "2020-07-28T09:16:30Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        SubscriptionHelper.deferredRequest(this, requested, n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ=="}, "originalCommit": {"oid": "1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ0MzgxNA==", "bodyText": "Perhaps something else in the chain could be failing so the bad request never reaches this component.", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461443814", "createdAt": "2020-07-28T09:24:06Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        SubscriptionHelper.deferredRequest(this, requested, n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ=="}, "originalCommit": {"oid": "1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUzNTE3NQ==", "bodyText": "Worst case scenario I can see now is that cancel signal swaps subs reference between n <= 0L && this.compareAndSet( but there has to be line drawn somewhere right?", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461535175", "createdAt": "2020-07-28T12:19:31Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        SubscriptionHelper.deferredRequest(this, requested, n);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxMjY4NQ=="}, "originalCommit": {"oid": "1e593b970ecbe4afdcb7b6ece303b5b6f2e322c0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTM5NTExOnYy", "diffSide": "RIGHT", "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjozODoyMFrOG4Ki1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQxNTozMzoyOFrOG5odsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NjE5OQ==", "bodyText": "Have n = -1; so that requested == 0 indicating no request is not confused. No need for the cancellation.", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r461546199", "createdAt": "2020-07-28T12:38:20Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        if (n <= 0L && this.compareAndSet(null, SubscriptionHelper.CANCELED)) {\n+            //subscription ref is not null, deferredRequest wont increment any more\n+            requested.set(-1L);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8c1dd60117c84c3e56e1fb2c95b96cd87d10848"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzA4NDk3OQ==", "bodyText": "Missed that thx", "url": "https://github.com/oracle/helidon/pull/2218#discussion_r463084979", "createdAt": "2020-07-30T15:33:28Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/DeferredSubscription.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicLong;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+/**\n+ * Used for deferring any callbacks caused by calling onSubscribe\n+ * until control is returned.\n+ *\n+ * <pre>{@code\n+ *         DeferredSubscription ds = new DeferredSubscription();\n+ *         subscriber.onSubscribe(ds);\n+ *         // request/cancel signals received until now are going to be processed\n+ *         // after setting actual subscription\n+ *         ds.setSubscription(subscription);\n+ * }</pre>\n+ * See spec Rule \u00a71.3 for more info.\n+ */\n+class DeferredSubscription extends AtomicReference<Flow.Subscription>\n+        implements Flow.Subscription {\n+\n+    private static final long serialVersionUID = -6510169867323964352L;\n+    private final AtomicLong requested = new AtomicLong();\n+\n+    @Override\n+    public void request(long n) {\n+        if (n <= 0L && this.compareAndSet(null, SubscriptionHelper.CANCELED)) {\n+            //subscription ref is not null, deferredRequest wont increment any more\n+            requested.set(-1L);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NjE5OQ=="}, "originalCommit": {"oid": "b8c1dd60117c84c3e56e1fb2c95b96cd87d10848"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 469, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}