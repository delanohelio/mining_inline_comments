{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4NTA3MDUz", "number": 1431, "title": "Webclient implementation (#1205)", "bodyText": "More tests and updated examples will be added after the merge probably.", "createdAt": "2020-02-21T22:57:13Z", "url": "https://github.com/oracle/helidon/pull/1431", "merged": true, "mergeCommit": {"oid": "6ca7d5e6be8afaf7caf713662c881eb747e6aed4"}, "closed": true, "closedAt": "2020-03-11T15:18:38Z", "author": {"login": "Verdent"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGoX_VABqjMwNjIyNDU5NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMjxj1gFqTM3MjU5NjAwMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5eb31cc0455dafa2d1174dc2f49cef3fec1062bf", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/5eb31cc0455dafa2d1174dc2f49cef3fec1062bf", "committedDate": "2020-02-21T23:15:01Z", "message": "copyright changes\n\nSigned-off-by: Verdent <david_kral@seznam.cz>"}, "afterCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/f82d12e237dc5f206159648b23dbd3c6649adb95", "committedDate": "2020-02-21T23:31:14Z", "message": "Webclient implementation (#1205)\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYyOTc5OTcx", "url": "https://github.com/oracle/helidon/pull/1431#pullrequestreview-362979971", "createdAt": "2020-02-21T23:46:19Z", "commit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQyMzo0NjoyMFrOFtHtuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMlQwMDoxMjo0N1rOFtICKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1NjYzNQ==", "bodyText": "parent pom with modules are named with a -project suffix.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382856635", "createdAt": "2020-02-21T23:46:20Z", "author": {"login": "romain-grecourt"}, "path": "examples/webclient/pom.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+  -->\n+\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+        xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <groupId>io.helidon.examples</groupId>\n+        <artifactId>helidon-examples-project</artifactId>\n+        <version>2.0.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <groupId>io.helidon.examples.webclient</groupId>\n+    <artifactId>helidon-examples-webclient</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1Njc5OA==", "bodyText": "Is this left-over ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382856798", "createdAt": "2020-02-21T23:47:02Z", "author": {"login": "romain-grecourt"}, "path": "examples/webclient/standalone/src/main/java/io/helidon/rest/client/example/basic/StandaloneClientExample.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.rest.client.example.basic;\n+\n+import java.io.IOException;\n+import java.util.concurrent.ExecutionException;\n+import java.util.logging.Level;\n+import java.util.logging.LogManager;\n+import java.util.logging.Logger;\n+\n+import io.helidon.common.context.Context;\n+import io.helidon.config.Config;\n+import io.helidon.security.Security;\n+import io.helidon.security.SecurityContext;\n+import io.helidon.webclient.WebClient;\n+\n+/**\n+ * A standalone web client.\n+ */\n+public class StandaloneClientExample {\n+\n+    private static final Logger LOGGER = Logger.getLogger(StandaloneClientExample.class.getName());\n+\n+    private StandaloneClientExample() {\n+\n+    }\n+\n+    /**\n+     * Executes simple request using webclient.\n+     *\n+     * @param args arguments\n+     * @throws ExecutionException\n+     * @throws InterruptedException\n+     * @throws IOException\n+     */\n+    public static void main(String[] args) throws ExecutionException, InterruptedException, IOException {\n+        LogManager.getLogManager().readConfiguration(StandaloneClientExample.class.getResourceAsStream(\"/logging.properties\"));\n+\n+        /*\n+         * Prepare helidon stuff\n+         */\n+        Config config = Config.create();\n+        Security security = Security.builder().build();\n+\n+        SecurityContext securityContext = security.createContext(\"standalone-example\");\n+\n+        Context context = Context.builder().id(\"standalone-example\").build();\n+        context.register(securityContext);\n+\n+        /*\n+         * Initialize client.\n+         */\n+        WebClient client = WebClient.builder()\n+                .config(config.get(\"client\"))\n+                .context(context)\n+                .build();\n+\n+        /*\n+         * Each request is created using a builder like fluent api\n+         */\n+        //        CompletionStage<ClientResponse> response = client.put()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg1ODM4NA==", "bodyText": "Why not re-use io.helidon.common.http.HashParameters ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382858384", "createdAt": "2020-02-21T23:54:32Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientRequestHeadersImpl.java", "diffHunk": "@@ -0,0 +1,302 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.time.ZoneId;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+import java.util.stream.StreamSupport;\n+\n+import io.helidon.common.http.Http;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.http.Parameters;\n+\n+import io.netty.handler.codec.http.cookie.ClientCookieEncoder;\n+import io.netty.handler.codec.http.cookie.DefaultCookie;\n+\n+/**\n+ * Client request header implementation.\n+ */\n+class ClientRequestHeadersImpl implements ClientRequestHeaders {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MDgzNw==", "bodyText": "Thinking-out-loud.\nI don't know if having a configuration for request/response specific readers/writers is really useful.\nInstead you could expose the context from request/response and let the user add these manually for each request/response.\nIf we think there is a need to have HTTP client specific readers/writers for all client request/response, then maybe we should consider updating MediaSupport, MessageBodyReaderContext and MessageBodyWriterContext to support creating a parented MediaSupport.\nThis way you would only need to pass-in a MediaSupport instance to RequestConfiguration.", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382860837", "createdAt": "2020-02-22T00:07:12Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/RequestConfiguration.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+\n+import io.helidon.media.common.MessageBodyReader;\n+import io.helidon.media.common.MessageBodyWriter;\n+import io.helidon.webclient.spi.ClientService;\n+\n+/**\n+ * Configuration of specific request.\n+ */\n+class RequestConfiguration extends ClientConfiguration {\n+\n+    private final URI requestURI;\n+    private final ClientServiceRequest clientServiceRequest;\n+    private final List<ClientService> services;\n+    private final Set<MessageBodyReader<?>> requestReaders;\n+    private final Set<MessageBodyWriter<?>> requestWriters;\n+\n+    private RequestConfiguration(Builder builder) {\n+        super(builder);\n+        requestURI = builder.requestURI;\n+        clientServiceRequest = builder.clientServiceRequest;\n+        services = builder.services;\n+        requestReaders = builder.requestReaders;\n+        requestWriters = builder.messageBodyWriters;\n+    }\n+\n+    URI requestURI() {\n+        return requestURI;\n+    }\n+\n+    ClientServiceRequest clientServiceRequest() {\n+        return clientServiceRequest;\n+    }\n+\n+    List<ClientService> services() {\n+        return services;\n+    }\n+\n+    Set<MessageBodyReader<?>> requestReaders() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTYwNQ==", "bodyText": "Should that be named HttpClientException or WebClientException instead ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382861605", "createdAt": "2020-02-22T00:11:21Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientException.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.util.Optional;\n+\n+/**\n+ * An exception that caused this client request to fail. If the exception is based on status or content of response from\n+ * server, the {@link ClientResponse} is available to obtain any needed details.\n+ * If the exception was caused before data was sent, or due to timeouts, socket exceptions etc., the {@link ClientResponse} is\n+ * not present and exception handling must be based on the wrapped exception.\n+ */\n+public class ClientException extends RuntimeException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTcwMg==", "bodyText": "Should that be named HttpClientConfiguration or WebClientConfiguration instead ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382861702", "createdAt": "2020-02-22T00:11:53Z", "author": {"login": "romain-grecourt"}, "path": "webclient/webclient/src/main/java/io/helidon/webclient/ClientConfiguration.java", "diffHunk": "@@ -0,0 +1,539 @@\n+/*\n+ * Copyright (c) 2019, 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient;\n+\n+import java.net.CookieManager;\n+import java.net.CookiePolicy;\n+import java.net.CookieStore;\n+import java.net.URI;\n+import java.security.cert.X509Certificate;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.SSLException;\n+\n+import io.helidon.common.LazyValue;\n+import io.helidon.common.context.Context;\n+import io.helidon.config.Config;\n+import io.helidon.media.common.MediaSupport;\n+import io.helidon.webclient.spi.ClientService;\n+\n+import io.netty.handler.ssl.ClientAuth;\n+import io.netty.handler.ssl.IdentityCipherSuiteFilter;\n+import io.netty.handler.ssl.JdkSslContext;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SslProvider;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+\n+/**\n+ * Configuration of the Helidon web client.\n+ */\n+class ClientConfiguration {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Mjg2MTg2NQ==", "bodyText": "Should that be named HttpClientTracing or WebClientTracing instead ?", "url": "https://github.com/oracle/helidon/pull/1431#discussion_r382861865", "createdAt": "2020-02-22T00:12:47Z", "author": {"login": "romain-grecourt"}, "path": "webclient/tracing/src/main/java/io/helidon/webclient/tracing/ClientTracing.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.webclient.tracing;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import io.helidon.common.HelidonFeatures;\n+import io.helidon.common.HelidonFlavor;\n+import io.helidon.webclient.ClientServiceRequest;\n+import io.helidon.webclient.spi.ClientService;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.propagation.Format;\n+import io.opentracing.propagation.TextMapAdapter;\n+import io.opentracing.util.GlobalTracer;\n+\n+/**\n+ * Client service for tracing propagation.\n+ */\n+public class ClientTracing implements ClientService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f82d12e237dc5f206159648b23dbd3c6649adb95"}, "originalPosition": 39}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb1ab6438e68132e056c4827fd7bf5ce49c4563f", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/cb1ab6438e68132e056c4827fd7bf5ce49c4563f", "committedDate": "2020-03-09T15:14:57Z", "message": "Webclient implementation (#1205)\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61a3677e8a8aed9a15f7807e6464fd1dc52b5be", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/b61a3677e8a8aed9a15f7807e6464fd1dc52b5be", "committedDate": "2020-03-09T15:14:58Z", "message": "Romain suggestions implemented.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cff2e38ade5fd46a6ffa5cd43a76c17c14d12d1", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/2cff2e38ade5fd46a6ffa5cd43a76c17c14d12d1", "committedDate": "2020-03-09T15:14:58Z", "message": "Checkstyle fixes.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b831d93aef9bba7714288871adea029c608bb090", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/b831d93aef9bba7714288871adea029c608bb090", "committedDate": "2020-03-09T15:14:58Z", "message": "Leftover comment removed.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "749a8c2969ee4068d1badc859c6682df2c0785f3", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/749a8c2969ee4068d1badc859c6682df2c0785f3", "committedDate": "2020-03-09T15:14:58Z", "message": "Tracing test and tracing update.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ad6443a55fb7155fd01a5ff25eb4d1f4001e390", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/8ad6443a55fb7155fd01a5ff25eb4d1f4001e390", "committedDate": "2020-03-09T15:14:59Z", "message": "Improvements implemented.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6736fc92fae1b9944dbeac90b8469f62f6a4a7", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/bf6736fc92fae1b9944dbeac90b8469f62f6a4a7", "committedDate": "2020-03-09T15:14:59Z", "message": "Minor fixes and optimizations.\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0eef418a82c4e7676e3c4950975206703c90f931", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/0eef418a82c4e7676e3c4950975206703c90f931", "committedDate": "2020-03-09T15:14:59Z", "message": "Javadoc comments added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb9a4f098dc5a6fb51e423bb1a3a36a176d031c5", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/bb9a4f098dc5a6fb51e423bb1a3a36a176d031c5", "committedDate": "2020-03-05T09:45:36Z", "message": "Javadoc comments added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}, "afterCommit": {"oid": "0eef418a82c4e7676e3c4950975206703c90f931", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/0eef418a82c4e7676e3c4950975206703c90f931", "committedDate": "2020-03-09T15:14:59Z", "message": "Javadoc comments added\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "425177b000f0a31db830c8eb7c34dc011e1d43e2", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/425177b000f0a31db830c8eb7c34dc011e1d43e2", "committedDate": "2020-03-10T08:50:37Z", "message": "Tests updated\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5716ca15760f4466ad068a591cd3ce99dc3015b9", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/5716ca15760f4466ad068a591cd3ce99dc3015b9", "committedDate": "2020-03-10T12:08:02Z", "message": "Race condition fix\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9054118642b81b6e7f1cbc8c1de16dbdff265a46", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/9054118642b81b6e7f1cbc8c1de16dbdff265a46", "committedDate": "2020-03-10T12:13:22Z", "message": "Module names improved\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1dd51e6b6ee1c5153200a5e530aa4d6e4c1a303", "author": {"user": {"login": "Verdent", "name": "David Kr\u00e1l"}}, "url": "https://github.com/oracle/helidon/commit/f1dd51e6b6ee1c5153200a5e530aa4d6e4c1a303", "committedDate": "2020-03-10T12:38:45Z", "message": "Checkstyle fix\n\nSigned-off-by: David Kral <david.k.kral@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNTk2MDAw", "url": "https://github.com/oracle/helidon/pull/1431#pullrequestreview-372596000", "createdAt": "2020-03-11T09:33:59Z", "commit": {"oid": "f1dd51e6b6ee1c5153200a5e530aa4d6e4c1a303"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 830, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}