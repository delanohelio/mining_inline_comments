{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MzQ0MDgy", "number": 1890, "title": "Kafka specific message", "bodyText": "Kafka specific message instead of wrapping ConsumerRecord as payload\n\nsupport for Kafka headers", "createdAt": "2020-05-28T08:52:33Z", "url": "https://github.com/oracle/helidon/pull/1890", "merged": true, "mergeCommit": {"oid": "d1276b9ee99c927e400e833238f41b5063881052"}, "closed": true, "closedAt": "2020-05-29T12:00:19Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclrp13AH2gAyNDI0MzQ0MDgyOjQzN2ViMDkzMWJjMjkxODNjOTM3YThlNGM5OTc2Y2IxNDNiNzYwMjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcl_6cSAFqTQyMDgzNTA2MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "437eb0931bc29183c937a8e4c9976cb143b76020", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/437eb0931bc29183c937a8e4c9976cb143b76020", "committedDate": "2020-05-28T10:52:54Z", "message": "Specific KafkaMessage instead of wrapping ConsumerRecord as a payload\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12cdcaa8f0627efbdbcc914afd0ac523d8793df6", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/12cdcaa8f0627efbdbcc914afd0ac523d8793df6", "committedDate": "2020-05-28T08:48:45Z", "message": "Specific KafkaMessage instead of wrapping ConsumerRecord as a payload\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "437eb0931bc29183c937a8e4c9976cb143b76020", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/437eb0931bc29183c937a8e4c9976cb143b76020", "committedDate": "2020-05-28T10:52:54Z", "message": "Specific KafkaMessage instead of wrapping ConsumerRecord as a payload\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/5fae6aada6138d6fde4fe96fdfc3448c4b210de0", "committedDate": "2020-05-28T11:20:06Z", "message": "Kafka headers test\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMDkwODM5", "url": "https://github.com/oracle/helidon/pull/1890#pullrequestreview-420090839", "createdAt": "2020-05-28T13:11:48Z", "commit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMTo0OFrOGb0YTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMjo1MlrOGb0bDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMjkyNA==", "bodyText": "as other methods show that consumerRecord is nullable, this would end with a NPE", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431822924", "createdAt": "2020-05-28T13:11:48Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMzA4OQ==", "bodyText": "dtto - nullable consumerRecord", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431823089", "createdAt": "2020-05-28T13:12:03Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();\n+    }\n+\n+    @Override\n+    public Optional<ConsumerRecord<K, V>> getConsumerRecord() {\n+        return Optional.ofNullable(this.consumerRecord);\n+    }\n+\n+    @Override\n+    public Optional<K> getKey() {\n+        return getConsumerRecord().map(ConsumerRecord::key);\n+    }\n+\n+    @Override\n+    public V getPayload() {\n+        return this.consumerRecord.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMzYzMQ==", "bodyText": "Maybe the exception should contain the consumerRecord.getClass().getName() to simplify troubleshooting", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431823631", "createdAt": "2020-05-28T13:12:52Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();\n+    }\n+\n+    @Override\n+    public Optional<ConsumerRecord<K, V>> getConsumerRecord() {\n+        return Optional.ofNullable(this.consumerRecord);\n+    }\n+\n+    @Override\n+    public Optional<K> getKey() {\n+        return getConsumerRecord().map(ConsumerRecord::key);\n+    }\n+\n+    @Override\n+    public V getPayload() {\n+        return this.consumerRecord.value();\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        ack.getAndSet(true);\n+        return kafkaCommit.orTimeout(millisWaitingTimeout, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <C> C unwrap(Class<C> unwrapType) {\n+        if (consumerRecord.getClass().isAssignableFrom(unwrapType)) {\n+            return (C) consumerRecord;\n+        } else {\n+            throw new IllegalArgumentException(\"Can't unwrap to \" + unwrapType.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 102}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e4fdd72a3111ab9450c4d0b5bb75a8cf41ca21f", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/0e4fdd72a3111ab9450c4d0b5bb75a8cf41ca21f", "committedDate": "2020-05-28T14:56:48Z", "message": "PR review issues\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODM1MDYx", "url": "https://github.com/oracle/helidon/pull/1890#pullrequestreview-420835061", "createdAt": "2020-05-29T10:29:08Z", "commit": {"oid": "0e4fdd72a3111ab9450c4d0b5bb75a8cf41ca21f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 655, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}