{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4MDQ1MDk5", "number": 2078, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1Mjo1OVrOEIsTBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1Mjo1OVrOEIsTBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3NTQ5ODI4OnYy", "diffSide": "RIGHT", "path": "integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwOTo1Mjo1OVrOGozp2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNjowNTowOVrOGp-d2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MjUyMg==", "bodyText": "if (TRACE_PARSING) is already inside of  traceParsing", "url": "https://github.com/oracle/helidon/pull/2078#discussion_r445442522", "createdAt": "2020-06-25T09:52:59Z", "author": {"login": "danielkec"}, "path": "integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java", "diffHunk": "@@ -120,83 +128,135 @@ public void beforeCompilation(BeforeCompilationAccess access) {\n         MpConfigProviderResolver.buildTimeEnd();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private void addAnnotatedWithReflected(BeforeAnalysisContext context) {\n-        FeatureImpl.BeforeAnalysisAccessImpl access = context.access();\n+    private List<Class<?>> findSubclasses(BeforeAnalysisContext context, String className) {\n+        ScanResult scan = context.scan();\n+        ClassInfo superclass = scan.getClassInfo(className);\n+\n+        if (null == superclass) {\n+            traceParsing(() -> \"Class \" + className + \" is not on classpath, cannot find subclasses.\");\n+            return List.of();\n+        }\n+\n+        List<Class<?>> subclasses = scan\n+                .getSubclasses(className)\n+                .stream()\n+                .map(classInfo -> context.access().findClassByName(classInfo.getName()))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n \n+        if (superclass.isInterface()) {\n+            List<Class<?>> implementations = scan\n+                    .getClassesImplementing(className)\n+                    .stream()\n+                    .map(classInfo -> context.access().findClassByName(classInfo.getName()))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList());\n+\n+            List<Class<?>> result = new ArrayList<>(subclasses);\n+            result.addAll(implementations);\n+            return result;\n+        } else {\n+            return subclasses;\n+        }\n+\n+    }\n+\n+    private List<Class<?>> findAnnotated(BeforeAnalysisContext context, String annotation) {\n+        return context.scan()\n+                .getClassesWithAnnotation(annotation)\n+                .stream()\n+                .map(classInfo -> {\n+                    Class<?> clazz = null;\n+                    try {\n+                        clazz = classInfo.loadClass();\n+                    } catch (Exception e) {\n+                        traceParsing(() -> \"Class \" + classInfo.getName() + \" annotated by \" + annotation + \" cannot be loaded\");\n+                        if (TRACE_PARSING) {\n+                            traceParsing(() -> \"\\tException class: \" + e.getClass().getName() + \", message: \" + e.getMessage());\n+                        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8c41efd6af921edde83a1a4aef5256de592938ee"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTY3OTg4Nw==", "bodyText": "changed from Exception.printStackTrace, forgot to clear up. Will do.", "url": "https://github.com/oracle/helidon/pull/2078#discussion_r445679887", "createdAt": "2020-06-25T16:19:30Z", "author": {"login": "tomas-langer"}, "path": "integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java", "diffHunk": "@@ -120,83 +128,135 @@ public void beforeCompilation(BeforeCompilationAccess access) {\n         MpConfigProviderResolver.buildTimeEnd();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private void addAnnotatedWithReflected(BeforeAnalysisContext context) {\n-        FeatureImpl.BeforeAnalysisAccessImpl access = context.access();\n+    private List<Class<?>> findSubclasses(BeforeAnalysisContext context, String className) {\n+        ScanResult scan = context.scan();\n+        ClassInfo superclass = scan.getClassInfo(className);\n+\n+        if (null == superclass) {\n+            traceParsing(() -> \"Class \" + className + \" is not on classpath, cannot find subclasses.\");\n+            return List.of();\n+        }\n+\n+        List<Class<?>> subclasses = scan\n+                .getSubclasses(className)\n+                .stream()\n+                .map(classInfo -> context.access().findClassByName(classInfo.getName()))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n \n+        if (superclass.isInterface()) {\n+            List<Class<?>> implementations = scan\n+                    .getClassesImplementing(className)\n+                    .stream()\n+                    .map(classInfo -> context.access().findClassByName(classInfo.getName()))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList());\n+\n+            List<Class<?>> result = new ArrayList<>(subclasses);\n+            result.addAll(implementations);\n+            return result;\n+        } else {\n+            return subclasses;\n+        }\n+\n+    }\n+\n+    private List<Class<?>> findAnnotated(BeforeAnalysisContext context, String annotation) {\n+        return context.scan()\n+                .getClassesWithAnnotation(annotation)\n+                .stream()\n+                .map(classInfo -> {\n+                    Class<?> clazz = null;\n+                    try {\n+                        clazz = classInfo.loadClass();\n+                    } catch (Exception e) {\n+                        traceParsing(() -> \"Class \" + classInfo.getName() + \" annotated by \" + annotation + \" cannot be loaded\");\n+                        if (TRACE_PARSING) {\n+                            traceParsing(() -> \"\\tException class: \" + e.getClass().getName() + \", message: \" + e.getMessage());\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MjUyMg=="}, "originalCommit": {"oid": "8c41efd6af921edde83a1a4aef5256de592938ee"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY2ODI1MA==", "bodyText": "Fixed", "url": "https://github.com/oracle/helidon/pull/2078#discussion_r446668250", "createdAt": "2020-06-28T16:05:09Z", "author": {"login": "tomas-langer"}, "path": "integrations/graal/native-image-extension/src/main/java/io/helidon/integrations/graal/nativeimage/extension/HelidonReflectionFeature.java", "diffHunk": "@@ -120,83 +128,135 @@ public void beforeCompilation(BeforeCompilationAccess access) {\n         MpConfigProviderResolver.buildTimeEnd();\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    private void addAnnotatedWithReflected(BeforeAnalysisContext context) {\n-        FeatureImpl.BeforeAnalysisAccessImpl access = context.access();\n+    private List<Class<?>> findSubclasses(BeforeAnalysisContext context, String className) {\n+        ScanResult scan = context.scan();\n+        ClassInfo superclass = scan.getClassInfo(className);\n+\n+        if (null == superclass) {\n+            traceParsing(() -> \"Class \" + className + \" is not on classpath, cannot find subclasses.\");\n+            return List.of();\n+        }\n+\n+        List<Class<?>> subclasses = scan\n+                .getSubclasses(className)\n+                .stream()\n+                .map(classInfo -> context.access().findClassByName(classInfo.getName()))\n+                .filter(Objects::nonNull)\n+                .collect(Collectors.toList());\n \n+        if (superclass.isInterface()) {\n+            List<Class<?>> implementations = scan\n+                    .getClassesImplementing(className)\n+                    .stream()\n+                    .map(classInfo -> context.access().findClassByName(classInfo.getName()))\n+                    .filter(Objects::nonNull)\n+                    .collect(Collectors.toList());\n+\n+            List<Class<?>> result = new ArrayList<>(subclasses);\n+            result.addAll(implementations);\n+            return result;\n+        } else {\n+            return subclasses;\n+        }\n+\n+    }\n+\n+    private List<Class<?>> findAnnotated(BeforeAnalysisContext context, String annotation) {\n+        return context.scan()\n+                .getClassesWithAnnotation(annotation)\n+                .stream()\n+                .map(classInfo -> {\n+                    Class<?> clazz = null;\n+                    try {\n+                        clazz = classInfo.loadClass();\n+                    } catch (Exception e) {\n+                        traceParsing(() -> \"Class \" + classInfo.getName() + \" annotated by \" + annotation + \" cannot be loaded\");\n+                        if (TRACE_PARSING) {\n+                            traceParsing(() -> \"\\tException class: \" + e.getClass().getName() + \", message: \" + e.getMessage());\n+                        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ0MjUyMg=="}, "originalCommit": {"oid": "8c41efd6af921edde83a1a4aef5256de592938ee"}, "originalPosition": 121}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 547, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}