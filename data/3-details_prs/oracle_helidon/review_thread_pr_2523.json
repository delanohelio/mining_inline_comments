{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE5NzQxNzc0", "number": 2523, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNTozN1rOE4J-uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1OTo1NVrOE4LGZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzE5MjI1OnYy", "diffSide": "RIGHT", "path": "media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzoxNTozN1rOHx6Qcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0NTowNVrOHx-FWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5Njc1NA==", "bodyText": "Why defer?", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522096754", "createdAt": "2020-11-12T13:15:37Z", "author": {"login": "danielkec"}, "path": "media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jackson;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Message body stream writer supporting object binding with Jackson.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JacksonEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private JacksonEsBodyStreamWriter(ObjectMapper objectMapper) {\n+        this.objectMapper = Objects.requireNonNull(objectMapper);\n+    }\n+\n+    static JacksonEsBodyStreamWriter create(ObjectMapper objectMapper) {\n+        return new JacksonEsBodyStreamWriter(objectMapper);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        JacksonBodyWriter.ObjectToChunks objectToChunks = new JacksonBodyWriter.ObjectToChunks(objectMapper, context.charset());\n+        return Multi.defer(() -> publisher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1OTQ1MA==", "bodyText": "I forgot to change it. Thanks.", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522159450", "createdAt": "2020-11-12T14:45:05Z", "author": {"login": "Verdent"}, "path": "media/jackson/src/main/java/io/helidon/media/jackson/JacksonEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jackson;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+\n+/**\n+ * Message body stream writer supporting object binding with Jackson.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JacksonEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final ObjectMapper objectMapper;\n+\n+    private JacksonEsBodyStreamWriter(ObjectMapper objectMapper) {\n+        this.objectMapper = Objects.requireNonNull(objectMapper);\n+    }\n+\n+    static JacksonEsBodyStreamWriter create(ObjectMapper objectMapper) {\n+        return new JacksonEsBodyStreamWriter(objectMapper);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        JacksonBodyWriter.ObjectToChunks objectToChunks = new JacksonBodyWriter.ObjectToChunks(objectMapper, context.charset());\n+        return Multi.defer(() -> publisher)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjA5Njc1NA=="}, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzI3MDk3OnYy", "diffSide": "RIGHT", "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzozNToyN1rOHx7Afg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0NDozN1rOHx-D1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTA1NA==", "bodyText": "Moving the type check could save actual finding of media type in some cases\n        if(CharSequence.class.isAssignableFrom(type.rawType())) return PredicateResult.NOT_SUPPORTED;\n        return context.contentType()\n                .or(() -> findMediaType(context))\n                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n                .map(it -> PredicateResult.COMPATIBLE)\n                .orElse(PredicateResult.NOT_SUPPORTED);", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522109054", "createdAt": "2020-11-12T13:35:27Z", "author": {"login": "danielkec"}, "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE1OTA2Mw==", "bodyText": "Good point.", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522159063", "createdAt": "2020-11-12T14:44:37Z", "author": {"login": "Verdent"}, "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEwOTA1NA=="}, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM0MTk3OnYy", "diffSide": "RIGHT", "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1Mjo0MVrOHx7snw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1Mjo0MVrOHx7snw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMDM1MQ==", "bodyText": "Defer is meant for supplying new publisher for every subscribe, not sure if its practical here, as we don't know if upstream can handle multiple subscribers:\n        Multi<Integer> defered = Multi.defer(() -> Multi.just(1, 2, 3));\n        Multi.concat(defered, defered)\n                .collectList()\n                .forSingle(System.out::println);\n>[1, 2, 3, 1, 2, 3]", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522120351", "createdAt": "2020-11-12T13:52:41Z", "author": {"login": "danielkec"}, "path": "media/jsonb/src/main/java/io/helidon/media/jsonb/JsonbEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonb;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.bind.Jsonb;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+\n+/**\n+ * Message body stream writer supporting object binding with JSON-B.\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonbEsBodyStreamWriter implements MessageBodyStreamWriter<Object> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final Jsonb jsonb;\n+\n+    private JsonbEsBodyStreamWriter(Jsonb jsonb) {\n+        this.jsonb = Objects.requireNonNull(jsonb);\n+    }\n+\n+    static JsonbEsBodyStreamWriter create(Jsonb jsonb) {\n+        return new JsonbEsBodyStreamWriter(jsonb);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .filter(it -> !CharSequence.class.isAssignableFrom(type.rawType()))\n+                .map(it -> PredicateResult.COMPATIBLE)\n+                .orElse(PredicateResult.NOT_SUPPORTED);\n+    }\n+\n+    @Override\n+    public Multi<DataChunk> write(Flow.Publisher<?> publisher, GenericType<?> type, MessageBodyWriterContext context) {\n+        MediaType contentType = context.contentType()\n+                .or(() -> findMediaType(context))\n+                .orElse(TEXT_EVENT_STREAM_JSON);\n+        context.contentType(contentType);\n+        return Multi.defer(() -> publisher)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM1NTA1OnYy", "diffSide": "RIGHT", "path": "media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1NToyNFrOHx70kw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1NToyNFrOHx70kw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyMjM4Nw==", "bodyText": "Moving type check before finding media type can save few instructions", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522122387", "createdAt": "2020-11-12T13:55:24Z", "author": {"login": "danielkec"}, "path": "media/jsonp/src/main/java/io/helidon/media/jsonp/JsonpEsBodyStreamWriter.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package io.helidon.media.jsonp;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.Flow;\n+\n+import javax.json.JsonStructure;\n+import javax.json.JsonWriterFactory;\n+\n+import io.helidon.common.GenericType;\n+import io.helidon.common.http.DataChunk;\n+import io.helidon.common.http.MediaType;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.media.common.MessageBodyStreamWriter;\n+import io.helidon.media.common.MessageBodyWriterContext;\n+import io.helidon.media.jsonp.JsonpBodyWriter.JsonStructureToChunks;\n+\n+/**\n+ * Message body writer for {@link javax.json.JsonStructure} sub-classes (JSON-P).\n+ * This writer is for {@link MediaType#TEXT_EVENT_STREAM} with no element-type parameter or element-type=\"application/json\".\n+ */\n+class JsonpEsBodyStreamWriter implements MessageBodyStreamWriter<JsonStructure> {\n+\n+    private static final MediaType TEXT_EVENT_STREAM_JSON = MediaType\n+            .parse(\"text/event-stream;element-type=\\\"application/json\\\"\");\n+    private static final byte[] DATA = \"data: \".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] NL = \"\\n\\n\".getBytes(StandardCharsets.UTF_8);\n+\n+    private final JsonWriterFactory jsonWriterFactory;\n+\n+    JsonpEsBodyStreamWriter(JsonWriterFactory jsonWriterFactory) {\n+        this.jsonWriterFactory = Objects.requireNonNull(jsonWriterFactory);\n+    }\n+\n+    @Override\n+    public PredicateResult accept(GenericType<?> type, MessageBodyWriterContext context) {\n+        return context.contentType()\n+                .or(() -> findMediaType(context))\n+                .filter(mediaType -> mediaType.equals(TEXT_EVENT_STREAM_JSON) || mediaType.equals(MediaType.TEXT_EVENT_STREAM))\n+                .map(it -> PredicateResult.supports(JsonStructure.class, type))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI3MzM3NTc1OnYy", "diffSide": "RIGHT", "path": "examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxMzo1OTo1NVrOHx8BJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDo0NTo0N1rOHx-Hkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTYwNg==", "bodyText": "assert something?", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522125606", "createdAt": "2020-11-12T13:59:55Z", "author": {"login": "danielkec"}, "path": "examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java", "diffHunk": "@@ -74,6 +74,16 @@ public static void stopServer() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testQuery() {\n+        JsonObject response = webClient\n+                .get()\n+                .uri(\"http://localhost:\" + webServer.port() + \"/greet\")\n+                .queryParam(\"query\", \"{hello}\")\n+                .request(JsonObject.class)\n+                .await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjE2MDAxOA==", "bodyText": "ehm... leftover ... :D This will be removed", "url": "https://github.com/oracle/helidon/pull/2523#discussion_r522160018", "createdAt": "2020-11-12T14:45:47Z", "author": {"login": "Verdent"}, "path": "examples/quickstarts/helidon-quickstart-se/src/test/java/io/helidon/examples/quickstart/se/MainTest.java", "diffHunk": "@@ -74,6 +74,16 @@ public static void stopServer() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testQuery() {\n+        JsonObject response = webClient\n+                .get()\n+                .uri(\"http://localhost:\" + webServer.port() + \"/greet\")\n+                .queryParam(\"query\", \"{hello}\")\n+                .request(JsonObject.class)\n+                .await(10, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEyNTYwNg=="}, "originalCommit": {"oid": "3aee9b7bd438200deb9dc1b178522a5755166bb4"}, "originalPosition": 11}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 354, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}