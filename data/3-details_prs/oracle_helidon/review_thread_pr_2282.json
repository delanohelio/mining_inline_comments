{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjM4NjYz", "number": 2282, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0MToyM1rOEkogtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTo1Mjo1M1rOE2DqFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ3OTI3OnYy", "diffSide": "RIGHT", "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/Main.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0MToyM1rOHTsAvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0MToyM1rOHTsAvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjA3Ng==", "bodyText": "There is no need to use a Main class in MP. If you remove it (and the property from pom.xml) it will work fine.\nThe default main class is io.helidon.microprofile.cdi.Main - but you do not need to explicitly define it", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490406076", "createdAt": "2020-09-17T16:41:23Z", "author": {"login": "tomas-langer"}, "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/Main.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ4MjY4OnYy", "diffSide": "RIGHT", "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/MsgProcessingBean.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0MjoxNVrOHTsC5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyMTo0NVrOHXNBUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjYyOQ==", "bodyText": "Do not commit commented out parts", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490406629", "createdAt": "2020-09-17T16:42:15Z", "author": {"login": "tomas-langer"}, "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/MsgProcessingBean.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.mp.example;\n+\n+import java.util.concurrent.SubmissionPublisher;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.streams.operators.ProcessorBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.FlowAdapters;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Bean for message processing.\n+ */\n+@ApplicationScoped\n+public class MsgProcessingBean {\n+\n+    private final SubmissionPublisher<String> emitter = new SubmissionPublisher<>();\n+    private final SubmissionPublisher<String> broadCaster = new SubmissionPublisher<>();\n+\n+//    @Produces", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MjYyNg==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494092626", "createdAt": "2020-09-24T07:21:45Z", "author": {"login": "danielkec"}, "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/MsgProcessingBean.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.mp.example;\n+\n+import java.util.concurrent.SubmissionPublisher;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.streams.operators.ProcessorBuilder;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.FlowAdapters;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Bean for message processing.\n+ */\n+@ApplicationScoped\n+public class MsgProcessingBean {\n+\n+    private final SubmissionPublisher<String> emitter = new SubmissionPublisher<>();\n+    private final SubmissionPublisher<String> broadCaster = new SubmissionPublisher<>();\n+\n+//    @Produces", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwNjYyOQ=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ5ODQwOnYy", "diffSide": "RIGHT", "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/WebSocketEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo0NjoxMFrOHTsM3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyMDo0MlrOHXM_Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwOTE4MQ==", "bodyText": "The package structure should be:\nio.helidion.examples.messaging.mp\nThe existing examples have it wrong, this would follow our naming convention.", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490409181", "createdAt": "2020-09-17T16:46:10Z", "author": {"login": "tomas-langer"}, "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/WebSocketEndpoint.java", "diffHunk": "@@ -0,0 +1,96 @@\n+\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.mp.example;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MjA5NQ==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494092095", "createdAt": "2020-09-24T07:20:42Z", "author": {"login": "danielkec"}, "path": "examples/messaging/jms-websocket-mp/src/main/java/io/helidon/messaging/mp/example/WebSocketEndpoint.java", "diffHunk": "@@ -0,0 +1,96 @@\n+\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.mp.example;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwOTE4MQ=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUyMzU5OnYy", "diffSide": "RIGHT", "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqConnector.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1MjowM1rOHTsb5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzoyMDoyNVrOHXM-hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzAzMQ==", "bodyText": "Copy/paste error? JmsConnector - should be AqConnector", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490413031", "createdAt": "2020-09-17T16:52:03Z", "author": {"login": "tomas-langer"}, "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqConnector.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.aq;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+import java.util.function.BiConsumer;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.sql.DataSource;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.messaging.MessagingException;\n+import io.helidon.messaging.connectors.jms.JmsConnector;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+import io.helidon.messaging.connectors.jms.SessionMetadata;\n+\n+import oracle.jms.AQjmsConnectionFactory;\n+import oracle.jms.AQjmsMessage;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+\n+/**\n+ * MicroProfile Reactive Messaging Oracle AQ connector.\n+ */\n+@ApplicationScoped\n+@Connector(AqConnector.CONNECTOR_NAME)\n+public class AqConnector extends JmsConnector {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AqConnector.class.getName());\n+    /**\n+     * Microprofile messaging Oracle AQ connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-aq\";\n+\n+    private static final String DATASOURCE_PROP = \"data-source\";\n+    private static final String URL_PROP = \"url\";\n+    private static final String USERNAME_PROP = \"username\";\n+    private static final String PASSWORD_PROP = \"password\";\n+\n+    @Inject\n+    private Instance<AQjmsConnectionFactory> connectionFactories;\n+\n+    /**\n+     * Create new JmsConnector.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5MTkxMQ==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494091911", "createdAt": "2020-09-24T07:20:25Z", "author": {"login": "danielkec"}, "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqConnector.java", "diffHunk": "@@ -0,0 +1,162 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.aq;\n+\n+import java.util.Optional;\n+import java.util.concurrent.Executor;\n+import java.util.function.BiConsumer;\n+import java.util.logging.Logger;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.literal.NamedLiteral;\n+import javax.enterprise.inject.spi.CDI;\n+import javax.inject.Inject;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.sql.DataSource;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.messaging.MessagingException;\n+import io.helidon.messaging.connectors.jms.JmsConnector;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+import io.helidon.messaging.connectors.jms.SessionMetadata;\n+\n+import oracle.jms.AQjmsConnectionFactory;\n+import oracle.jms.AQjmsMessage;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+\n+/**\n+ * MicroProfile Reactive Messaging Oracle AQ connector.\n+ */\n+@ApplicationScoped\n+@Connector(AqConnector.CONNECTOR_NAME)\n+public class AqConnector extends JmsConnector {\n+\n+    private static final Logger LOGGER = Logger.getLogger(AqConnector.class.getName());\n+    /**\n+     * Microprofile messaging Oracle AQ connector name.\n+     */\n+    public static final String CONNECTOR_NAME = \"helidon-aq\";\n+\n+    private static final String DATASOURCE_PROP = \"data-source\";\n+    private static final String URL_PROP = \"url\";\n+    private static final String USERNAME_PROP = \"username\";\n+    private static final String PASSWORD_PROP = \"password\";\n+\n+    @Inject\n+    private Instance<AQjmsConnectionFactory> connectionFactories;\n+\n+    /**\n+     * Create new JmsConnector.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxMzAzMQ=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUzMDYxOnYy", "diffSide": "RIGHT", "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1Mzo0M1rOHTsgGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoxMzo1NFrOHequYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDEwNg==", "bodyText": "method of is not supported by our guidelines. Should be create", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490414106", "createdAt": "2020-09-17T16:53:43Z", "author": {"login": "tomas-langer"}, "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqMessage.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.aq;\n+\n+import java.sql.Connection;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+\n+import io.helidon.messaging.MessagingException;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+import io.helidon.messaging.connectors.jms.SessionMetadata;\n+\n+import oracle.jms.AQjmsMessage;\n+import oracle.jms.AQjmsSession;\n+\n+/**\n+ * Message representing AQ JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface AqMessage<T> extends JmsMessage<T> {\n+\n+    /**\n+     * Return DB connection used for receiving this message.\n+     *\n+     * @return java.sql.Connection\n+     */\n+    Connection getDBConnection();\n+\n+    /**\n+     * Create from AQjmsMessage.\n+     *\n+     * @param msg             Oracle AQ JMS message to be wrapped\n+     * @param executor        Executor used for invoking ack\n+     * @param sessionMetadata metadata about the JMS session\n+     * @param <T>             payload type\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static <T> AqMessage<T> of(AQjmsMessage msg, Executor executor, SessionMetadata sessionMetadata) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkxOTMyOA==", "bodyText": "Trying to honor extended api of Message", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501919328", "createdAt": "2020-10-08T18:13:54Z", "author": {"login": "danielkec"}, "path": "messaging/aq/src/main/java/io/helidon/messaging/connectors/aq/AqMessage.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.aq;\n+\n+import java.sql.Connection;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.Message;\n+\n+import io.helidon.messaging.MessagingException;\n+import io.helidon.messaging.connectors.jms.JmsMessage;\n+import io.helidon.messaging.connectors.jms.SessionMetadata;\n+\n+import oracle.jms.AQjmsMessage;\n+import oracle.jms.AQjmsSession;\n+\n+/**\n+ * Message representing AQ JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface AqMessage<T> extends JmsMessage<T> {\n+\n+    /**\n+     * Return DB connection used for receiving this message.\n+     *\n+     * @return java.sql.Connection\n+     */\n+    Connection getDBConnection();\n+\n+    /**\n+     * Create from AQjmsMessage.\n+     *\n+     * @param msg             Oracle AQ JMS message to be wrapped\n+     * @param executor        Executor used for invoking ack\n+     * @param sessionMetadata metadata about the JMS session\n+     * @param <T>             payload type\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static <T> AqMessage<T> of(AQjmsMessage msg, Executor executor, SessionMetadata sessionMetadata) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDEwNg=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUzNDg4OnYy", "diffSide": "RIGHT", "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/SessionMetadata.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1NDo1MlrOHTsi4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowMzo1OVrOHeshWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDgxOA==", "bodyText": "wrong accessor name, missing javadocs", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490414818", "createdAt": "2020-09-17T16:54:52Z", "author": {"login": "tomas-langer"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/SessionMetadata.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Session;\n+\n+/**\n+ * Metadata of the JMS session.\n+ */\n+public class SessionMetadata {\n+    private final Session session;\n+    private final Connection connection;\n+    private final ConnectionFactory connectionFactory;\n+\n+    SessionMetadata(final Session session, final Connection connection, final ConnectionFactory connectionFactory) {\n+        this.session = session;\n+        this.connection = connection;\n+        this.connectionFactory = connectionFactory;\n+    }\n+\n+    public Session getSession() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTA5OA==", "bodyText": "For all accessors - do not use the verb, add javadocs", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490415098", "createdAt": "2020-09-17T16:55:19Z", "author": {"login": "tomas-langer"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/SessionMetadata.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Session;\n+\n+/**\n+ * Metadata of the JMS session.\n+ */\n+public class SessionMetadata {\n+    private final Session session;\n+    private final Connection connection;\n+    private final ConnectionFactory connectionFactory;\n+\n+    SessionMetadata(final Session session, final Connection connection, final ConnectionFactory connectionFactory) {\n+        this.session = session;\n+        this.connection = connection;\n+        this.connectionFactory = connectionFactory;\n+    }\n+\n+    public Session getSession() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDgxOA=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0ODc2MQ==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501948761", "createdAt": "2020-10-08T19:03:59Z", "author": {"login": "danielkec"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/SessionMetadata.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.Session;\n+\n+/**\n+ * Metadata of the JMS session.\n+ */\n+public class SessionMetadata {\n+    private final Session session;\n+    private final Connection connection;\n+    private final ConnectionFactory connectionFactory;\n+\n+    SessionMetadata(final Session session, final Connection connection, final ConnectionFactory connectionFactory) {\n+        this.session = session;\n+        this.connection = connection;\n+        this.connectionFactory = connectionFactory;\n+    }\n+\n+    public Session getSession() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNDgxOA=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODUzODQ4OnYy", "diffSide": "RIGHT", "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1NTo0NVrOHTslDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowNDozOFrOHesi3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTM3Mg==", "bodyText": "we do not use final in parameter declaration", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490415372", "createdAt": "2020-09-17T16:55:45Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingException.java", "diffHunk": "@@ -30,4 +30,14 @@\n     public MessagingException(final String message) {\n         super(message);\n     }\n+\n+    /**\n+     * Create new MessagingException with supplied message and cause.\n+     *\n+     * @param message supplied message\n+     * @param cause   of this exception\n+     */\n+    public MessagingException(final String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTE0OA==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501949148", "createdAt": "2020-10-08T19:04:38Z", "author": {"login": "danielkec"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingException.java", "diffHunk": "@@ -30,4 +30,14 @@\n     public MessagingException(final String message) {\n         super(message);\n     }\n+\n+    /**\n+     * Create new MessagingException with supplied message and cause.\n+     *\n+     * @param message supplied message\n+     * @param cause   of this exception\n+     */\n+    public MessagingException(final String message, Throwable cause) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNTM3Mg=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU0MzY5OnYy", "diffSide": "RIGHT", "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1NzowNlrOHTsoOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxOTowNDoyM1rOHesiSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjE4NQ==", "bodyText": "method name should be create", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490416185", "createdAt": "2020-09-17T16:57:06Z", "author": {"login": "tomas-langer"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjM3NQ==", "bodyText": "all factory methods should be create instead of of", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490416375", "createdAt": "2020-09-17T16:57:24Z", "author": {"login": "tomas-langer"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjE4NQ=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTk0OTAwMA==", "bodyText": "Trying to honor extended api of Message", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501949000", "createdAt": "2020-10-08T19:04:23Z", "author": {"login": "danielkec"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNjE4NQ=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODU1MjA2OnYy", "diffSide": "RIGHT", "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjo1OToxOVrOHTstjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxODoyNDo1MlrOHerIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzU0OQ==", "bodyText": "Isn't this class automatically public, as it is declared on an interface? If so, missing javadoc", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r490417549", "createdAt": "2020-09-17T16:59:19Z", "author": {"login": "tomas-langer"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {\n+        if (msg instanceof TextMessage) {\n+            return new JmsTextMessage((TextMessage) msg, executor, sessionEntry);\n+        } else if (msg instanceof BytesMessage) {\n+            return new JmsBytesMessage((BytesMessage) msg, executor, sessionEntry);\n+        } else {\n+            throw new MessagingException(\"Unsupported JMS message type\");\n+        }\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg) {\n+        if (msg instanceof TextMessage) {\n+            return JmsMessage.of((TextMessage) msg);\n+        } else if (msg instanceof BytesMessage) {\n+            return JmsMessage.of((BytesMessage) msg);\n+        } else {\n+            throw new MessagingException(\"Unsupported JMS message type\");\n+        }\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<String> of(javax.jms.TextMessage msg) {\n+        return new JmsTextMessage(msg, Executors.newWorkStealingPool(), null);\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<InputStream> of(javax.jms.BytesMessage msg) {\n+        return new JmsBytesMessage(msg, Executors.newWorkStealingPool(), null);\n+    }\n+\n+    abstract class AbstractJmsMessage<T> implements JmsMessage<T> {\n+\n+        private final Executor executor;\n+        private final SessionMetadata sharedSessionEntry;\n+        private boolean acked = false;\n+\n+        protected AbstractJmsMessage(Executor executor, SessionMetadata sharedSessionEntry) {\n+            this.sharedSessionEntry = sharedSessionEntry;\n+            this.executor = executor;\n+        }\n+\n+        @Override\n+        public Session getJmsSession() {\n+            return sharedSessionEntry.getSession();\n+        }\n+\n+        @Override\n+        public Connection getJmsConnection() {\n+            return sharedSessionEntry.getConnection();\n+        }\n+\n+        @Override\n+        public ConnectionFactory getJmsConnectionFactory() {\n+            return sharedSessionEntry.getConnectionFactory();\n+        }\n+\n+        @Override\n+        public boolean isAck() {\n+            return acked;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> ack() {\n+            return CompletableFuture.runAsync(() -> {\n+                try {\n+                    this.getJmsMessage().acknowledge();\n+                    acked = true;\n+                } catch (JMSException e) {\n+                    LOGGER.log(Level.SEVERE, e, () -> \"Error during acknowledgement of JMS message\");\n+                }\n+            }, executor);\n+        }\n+\n+    }\n+\n+    class JmsTextMessage extends AbstractJmsMessage<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 188}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTkyNjAxOQ==", "bodyText": "Yes it is thx!", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r501926019", "createdAt": "2020-10-08T18:24:52Z", "author": {"login": "danielkec"}, "path": "messaging/jms/src/main/java/io/helidon/messaging/connectors/jms/JmsMessage.java", "diffHunk": "@@ -0,0 +1,243 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging.connectors.jms;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.jms.BytesMessage;\n+import javax.jms.Connection;\n+import javax.jms.ConnectionFactory;\n+import javax.jms.JMSException;\n+import javax.jms.MessageEOFException;\n+import javax.jms.Session;\n+import javax.jms.TextMessage;\n+\n+import io.helidon.messaging.MessagingException;\n+\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+\n+/**\n+ * Message representing JMS message together with all the metadata.\n+ *\n+ * @param <T> Type of the payload.\n+ */\n+public interface JmsMessage<T> extends Message<T> {\n+\n+    /**\n+     * The logger.\n+     */\n+    Logger LOGGER = Logger.getLogger(JmsMessage.class.getName());\n+\n+    /**\n+     * Original JMS message received.\n+     *\n+     * @return original JMS message received\n+     */\n+    javax.jms.Message getJmsMessage();\n+\n+    /**\n+     * Metadata about the JMS session.\n+     *\n+     * @return JMS session\n+     */\n+    Session getJmsSession();\n+\n+    /**\n+     * Get client's connection to its JMS provider.\n+     *\n+     * @return JMS connection\n+     */\n+    Connection getJmsConnection();\n+\n+    /**\n+     * Get JMS connection factory.\n+     *\n+     * @return JMS connection factory\n+     */\n+    ConnectionFactory getJmsConnectionFactory();\n+\n+    /**\n+     * Check if message has been acknowledged yet.\n+     *\n+     * @return true if message has been acknowledged\n+     */\n+    boolean isAck();\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg          JMS message to be wrapped\n+     * @param executor     Executor used for invoking ack\n+     * @param sessionEntry metadata about the JMS session\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg, Executor executor, SessionMetadata sessionEntry) {\n+        if (msg instanceof TextMessage) {\n+            return new JmsTextMessage((TextMessage) msg, executor, sessionEntry);\n+        } else if (msg instanceof BytesMessage) {\n+            return new JmsBytesMessage((BytesMessage) msg, executor, sessionEntry);\n+        } else {\n+            throw new MessagingException(\"Unsupported JMS message type\");\n+        }\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<?> of(javax.jms.Message msg) {\n+        if (msg instanceof TextMessage) {\n+            return JmsMessage.of((TextMessage) msg);\n+        } else if (msg instanceof BytesMessage) {\n+            return JmsMessage.of((BytesMessage) msg);\n+        } else {\n+            throw new MessagingException(\"Unsupported JMS message type\");\n+        }\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<String> of(javax.jms.TextMessage msg) {\n+        return new JmsTextMessage(msg, Executors.newWorkStealingPool(), null);\n+    }\n+\n+    /**\n+     * Create a message with the given payload.\n+     *\n+     * @param msg JMS message to be wrapped\n+     * @return A message with the given payload, and an ack function\n+     */\n+    static JmsMessage<InputStream> of(javax.jms.BytesMessage msg) {\n+        return new JmsBytesMessage(msg, Executors.newWorkStealingPool(), null);\n+    }\n+\n+    abstract class AbstractJmsMessage<T> implements JmsMessage<T> {\n+\n+        private final Executor executor;\n+        private final SessionMetadata sharedSessionEntry;\n+        private boolean acked = false;\n+\n+        protected AbstractJmsMessage(Executor executor, SessionMetadata sharedSessionEntry) {\n+            this.sharedSessionEntry = sharedSessionEntry;\n+            this.executor = executor;\n+        }\n+\n+        @Override\n+        public Session getJmsSession() {\n+            return sharedSessionEntry.getSession();\n+        }\n+\n+        @Override\n+        public Connection getJmsConnection() {\n+            return sharedSessionEntry.getConnection();\n+        }\n+\n+        @Override\n+        public ConnectionFactory getJmsConnectionFactory() {\n+            return sharedSessionEntry.getConnectionFactory();\n+        }\n+\n+        @Override\n+        public boolean isAck() {\n+            return acked;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> ack() {\n+            return CompletableFuture.runAsync(() -> {\n+                try {\n+                    this.getJmsMessage().acknowledge();\n+                    acked = true;\n+                } catch (JMSException e) {\n+                    LOGGER.log(Level.SEVERE, e, () -> \"Error during acknowledgement of JMS message\");\n+                }\n+            }, executor);\n+        }\n+\n+    }\n+\n+    class JmsTextMessage extends AbstractJmsMessage<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQxNzU0OQ=="}, "originalCommit": {"oid": "68d64bb6eeee6c22fb3bad9601bfc19a9679a306"}, "originalPosition": 188}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjM2NjE0OnYy", "diffSide": "RIGHT", "path": "examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzozMDoxM1rOHXNTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwNzozMDoxM1rOHXNTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDA5NzIzNA==", "bodyText": "@paulparkinson before starting the example build and run pre-populated Oracle DB\ncd ./examples/messaging/docker/oracle-aq-18-xe/ && \\\n./buildAndRun.sh\nExpect it to take tens of minutes before ready, 18.4 xe takes a long time to start", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r494097234", "createdAt": "2020-09-24T07:30:13Z", "author": {"login": "danielkec"}, "path": "examples/messaging/oracle-aq-websocket-mp/src/main/java/io/helidon/examples/messaging/mp/MsgProcessingBean.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.examples.messaging.mp;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.SubmissionPublisher;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.jms.JMSException;\n+import javax.jms.MapMessage;\n+\n+import io.helidon.common.reactive.BufferedEmittingPublisher;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.messaging.connectors.aq.AqMessage;\n+\n+import org.eclipse.microprofile.reactive.messaging.Acknowledgment;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.eclipse.microprofile.reactive.streams.operators.ReactiveStreams;\n+import org.reactivestreams.FlowAdapters;\n+import org.reactivestreams.Publisher;\n+\n+@ApplicationScoped\n+public class MsgProcessingBean {\n+\n+    private final BufferedEmittingPublisher<String> emitter = BufferedEmittingPublisher.create();\n+    private final SubmissionPublisher<String> broadCaster = new SubmissionPublisher<>();\n+\n+    @Outgoing(\"to-queue-1\")\n+    public Publisher<String> toFirstQueue() {\n+        // Create new publisher for emitting to by this::process\n+        return ReactiveStreams\n+                .fromPublisher(FlowAdapters.toPublisher(emitter))\n+                .buildRs();\n+    }\n+\n+    @Incoming(\"from-queue-1\")\n+    @Outgoing(\"to-queue-2\")\n+    //Leave commit by ack to outgoing connector\n+    @Acknowledgment(Acknowledgment.Strategy.NONE)\n+    public CompletionStage<AqMessage<String>> betweenQueues(AqMessage<String> msg) {\n+        return CompletableFuture.supplyAsync(() -> {\n+            try {\n+                PreparedStatement statement = msg.getDBConnection()\n+                        .prepareStatement(\"INSERT INTO frank.message_log (message) VALUES (?)\");\n+                statement.setString(1, msg.getPayload());\n+                statement.executeUpdate();\n+            } catch (SQLException e) {\n+                //Gets caught by messaging engine and translated to onError signal\n+                throw new RuntimeException(\"Error when saving message to log table.\", e);\n+            }\n+            return msg;\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7e35c7b261923dacfce8dd8f53338ae5157b607e"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MTE4NDg2OnYy", "diffSide": "RIGHT", "path": "bom/pom.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxMTo1Mjo1M1rOHurKXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQwNzowMzoxOFrOHvhDbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzcwOA==", "bodyText": "Hello, I couldn't see this being resolved. May I know if its available for public?", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r518703708", "createdAt": "2020-11-06T11:52:53Z", "author": {"login": "mohanishappy"}, "path": "bom/pom.xml", "diffHunk": "@@ -835,6 +835,16 @@\n                 <artifactId>helidon-messaging-kafka</artifactId>\n                 <version>${helidon.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.jms</groupId>\n+                <artifactId>helidon-messaging-jms</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.aq</groupId>\n+                <artifactId>helidon-messaging-aq</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6cb9dd0a47a74e103d27fef9f4ee1eb5a1902808"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgwMjYwOQ==", "bodyText": "Hi, helidon-messaging-aq is part of this PR, it needs to be accepted, merged and then released with new version of Helidon", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r518802609", "createdAt": "2020-11-06T14:54:39Z", "author": {"login": "danielkec"}, "path": "bom/pom.xml", "diffHunk": "@@ -835,6 +835,16 @@\n                 <artifactId>helidon-messaging-kafka</artifactId>\n                 <version>${helidon.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.jms</groupId>\n+                <artifactId>helidon-messaging-jms</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.aq</groupId>\n+                <artifactId>helidon-messaging-aq</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzcwOA=="}, "originalCommit": {"oid": "6cb9dd0a47a74e103d27fef9f4ee1eb5a1902808"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTU4NjY3MA==", "bodyText": "Got it, thanks for the update.", "url": "https://github.com/oracle/helidon/pull/2282#discussion_r519586670", "createdAt": "2020-11-09T07:03:18Z", "author": {"login": "mohanishappy"}, "path": "bom/pom.xml", "diffHunk": "@@ -835,6 +835,16 @@\n                 <artifactId>helidon-messaging-kafka</artifactId>\n                 <version>${helidon.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.jms</groupId>\n+                <artifactId>helidon-messaging-jms</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>io.helidon.messaging.aq</groupId>\n+                <artifactId>helidon-messaging-aq</artifactId>\n+                <version>${helidon.version}</version>\n+            </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODcwMzcwOA=="}, "originalCommit": {"oid": "6cb9dd0a47a74e103d27fef9f4ee1eb5a1902808"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 496, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}