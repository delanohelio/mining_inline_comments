{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTA0MDE4", "number": 1483, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowMDo0MVrODrtwQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoxMzozMVrODt-QOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTY0OTkyOnYy", "diffSide": "RIGHT", "path": "docs/sitegen.yaml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNjowMDo0MVrOF8OGyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDoxNjoyN1rOF9i5wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTk5Mg==", "bodyText": "@m0mus Not sure about this, didn't want to duplicate same doc, operators are exactly the same for both flavors so referencing same adoc file from both menus", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r398689992", "createdAt": "2020-03-26T16:00:41Z", "author": {"login": "danielkec"}, "path": "docs/sitegen.yaml", "diffHunk": "@@ -172,6 +172,14 @@ backend:\n               items:\n                 - includes:\n                     - \"se/websocket/*.adoc\"\n+            - title: \"Reactive Operators\"\n+              pathprefix: \"/se/operators\"\n+              glyph:\n+                type: \"icon\"\n+                value: \"fa-filter\"\n+              items:\n+                - includes:\n+                    - \"mp/reactive/*.adoc\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTIzNjExOA==", "bodyText": "I think that's the best option right now. The other option was to have it under a single folder and then link to it. I think having it available in each (mp or se) is better for the user.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399236118", "createdAt": "2020-03-27T12:42:17Z", "author": {"login": "ljamen"}, "path": "docs/sitegen.yaml", "diffHunk": "@@ -172,6 +172,14 @@ backend:\n               items:\n                 - includes:\n                     - \"se/websocket/*.adoc\"\n+            - title: \"Reactive Operators\"\n+              pathprefix: \"/se/operators\"\n+              glyph:\n+                type: \"icon\"\n+                value: \"fa-filter\"\n+              items:\n+                - includes:\n+                    - \"mp/reactive/*.adoc\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTk5Mg=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTM4NjQwMw==", "bodyText": "@danielkec It can be done using includes.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399386403", "createdAt": "2020-03-27T16:24:02Z", "author": {"login": "m0mus"}, "path": "docs/sitegen.yaml", "diffHunk": "@@ -172,6 +172,14 @@ backend:\n               items:\n                 - includes:\n                     - \"se/websocket/*.adoc\"\n+            - title: \"Reactive Operators\"\n+              pathprefix: \"/se/operators\"\n+              glyph:\n+                type: \"icon\"\n+                value: \"fa-filter\"\n+              items:\n+                - includes:\n+                    - \"mp/reactive/*.adoc\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTk5Mg=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQ2MDQwMg==", "bodyText": "See https://asciidoctor.org/docs/user-manual/#include-directive", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399460402", "createdAt": "2020-03-27T18:25:13Z", "author": {"login": "romain-grecourt"}, "path": "docs/sitegen.yaml", "diffHunk": "@@ -172,6 +172,14 @@ backend:\n               items:\n                 - includes:\n                     - \"se/websocket/*.adoc\"\n+            - title: \"Reactive Operators\"\n+              pathprefix: \"/se/operators\"\n+              glyph:\n+                type: \"icon\"\n+                value: \"fa-filter\"\n+              items:\n+                - includes:\n+                    - \"mp/reactive/*.adoc\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTk5Mg=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTUxOTkxMQ==", "bodyText": "Aha took me long sorry \ud83e\udd26\u200d\u2642\ufe0f", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399519911", "createdAt": "2020-03-27T20:25:13Z", "author": {"login": "danielkec"}, "path": "docs/sitegen.yaml", "diffHunk": "@@ -172,6 +172,14 @@ backend:\n               items:\n                 - includes:\n                     - \"se/websocket/*.adoc\"\n+            - title: \"Reactive Operators\"\n+              pathprefix: \"/se/operators\"\n+              glyph:\n+                type: \"icon\"\n+                value: \"fa-filter\"\n+              items:\n+                - includes:\n+                    - \"mp/reactive/*.adoc\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTk5Mg=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3OTI5OA==", "bodyText": "It's more a question than suggestion. Would it be better to put shared pieces in shared folder and reference them from se and mp? In this case it's easy to find what is shared.,", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400079298", "createdAt": "2020-03-30T10:16:27Z", "author": {"login": "m0mus"}, "path": "docs/sitegen.yaml", "diffHunk": "@@ -172,6 +172,14 @@ backend:\n               items:\n                 - includes:\n                     - \"se/websocket/*.adoc\"\n+            - title: \"Reactive Operators\"\n+              pathprefix: \"/se/operators\"\n+              glyph:\n+                type: \"icon\"\n+                value: \"fa-filter\"\n+              items:\n+                - includes:\n+                    - \"mp/reactive/*.adoc\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY4OTk5Mg=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTIwNjEwOnYy", "diffSide": "RIGHT", "path": "docs/mp/messaging/02_message.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzowMToxNFrOF8wFeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyNjozNVrOF87CYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0NjcxNA==", "bodyText": "The Reactive Messaging [Message] class can be used to wrap or unwrap data items between methods and connectors. The message wrapping and unwrapping can be performed explicitly by using org.eclipse.microprofile.reactive.messaging.Message#of(T) or implicitly through the messaging core.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399246714", "createdAt": "2020-03-27T13:01:14Z", "author": {"login": "ljamen"}, "path": "docs/mp/messaging/02_message.adoc", "diffHunk": "@@ -0,0 +1,150 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Message\n+:description: Helidon MicroProfile Reactive Messaging\n+= :keywords: helidon, messaging, reactive, streams\n+\n+Since Helidon 2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNjE0NA==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399426144", "createdAt": "2020-03-27T17:26:35Z", "author": {"login": "danielkec"}, "path": "docs/mp/messaging/02_message.adoc", "diffHunk": "@@ -0,0 +1,150 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Message\n+:description: Helidon MicroProfile Reactive Messaging\n+= :keywords: helidon, messaging, reactive, streams\n+\n+Since Helidon 2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI0NjcxNA=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTIzOTIwOnYy", "diffSide": "RIGHT", "path": "docs/mp/messaging/01_reactive-messaging.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxMDowOFrOF8wZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxNzoyNjoyM1rOF87B1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MTc4Nw==", "bodyText": "MicroProfile Reactive Messaging uses CDI beans to produce, consume or process messages over Reactive Streams.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399251787", "createdAt": "2020-03-27T13:10:08Z", "author": {"login": "ljamen"}, "path": "docs/mp/messaging/01_reactive-messaging.adoc", "diffHunk": "@@ -0,0 +1,159 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Reactive Messaging\n+:description: Helidon MicroProfile Reactive Messaging\n+= :keywords: helidon, messaging, reactive, streams\n+\n+Since Helidon 2.0\n+\n+== Reactive Messaging\n+\n+MicroProfile Reactive Messaging provides means for CDI beans to be able produce, consume or process messages over Reactive Streams.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTQyNjAwNQ==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399426005", "createdAt": "2020-03-27T17:26:23Z", "author": {"login": "danielkec"}, "path": "docs/mp/messaging/01_reactive-messaging.adoc", "diffHunk": "@@ -0,0 +1,159 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Reactive Messaging\n+:description: Helidon MicroProfile Reactive Messaging\n+= :keywords: helidon, messaging, reactive, streams\n+\n+Since Helidon 2.0\n+\n+== Reactive Messaging\n+\n+MicroProfile Reactive Messaging provides means for CDI beans to be able produce, consume or process messages over Reactive Streams.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1MTc4Nw=="}, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NTI2NTgxOnYy", "diffSide": "RIGHT", "path": "docs/mp/messaging/01_reactive-messaging.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxNjo1NFrOF8wpug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMzoxNjo1NFrOF8wpug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTI1NTk5NA==", "bodyText": "Messages are managed by methods annotated by @Incoming and `@Outgoing' and the invocation is always driven by message core - either at assembly time, or for every message coming from the stream.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r399255994", "createdAt": "2020-03-27T13:16:54Z", "author": {"login": "ljamen"}, "path": "docs/mp/messaging/01_reactive-messaging.adoc", "diffHunk": "@@ -0,0 +1,159 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Reactive Messaging\n+:description: Helidon MicroProfile Reactive Messaging\n+= :keywords: helidon, messaging, reactive, streams\n+\n+Since Helidon 2.0\n+\n+== Reactive Messaging\n+\n+MicroProfile Reactive Messaging provides means for CDI beans to be able produce, consume or process messages over Reactive Streams.\n+Such messaging bean is expected to be either in `ApplicationScoped` or `Dependent` scope.\n+Messages are managed by methods annotated by `@Incoming` and `@Outgoing`, invocation is always driven by messaging core either at assembly time or for every message coming from the stream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94cabc33efea50b2a2f3f6e4a3a872a697384bbd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM2MDI1OnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNjo1MFrOF9mieQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTo1MFrOF--YBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODg3Mw==", "bodyText": "help of a the callbacks -> help of the callbacks", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400138873", "createdAt": "2020-03-30T12:06:50Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|forEach|Terminal stage, invokes provided consumer for every item in the stream.\n+|collectList|Collect the items of this `Multi` instance into a `Single` of `List`.\n+|collect|Collect the items of this `Multi` instance into a `Single`.\n+|collect|Collect the items of this `Multi` into a collection provided via a `Supplier`\n+*and mutated by a {@code BiConsumer} callback.\n+|collectStream|Collects up upstream items with the help of a the callbacks of a `java.util.stream.Collector`.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3Nzk4OA==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401577988", "createdAt": "2020-04-01T12:31:50Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|forEach|Terminal stage, invokes provided consumer for every item in the stream.\n+|collectList|Collect the items of this `Multi` instance into a `Single` of `List`.\n+|collect|Collect the items of this `Multi` instance into a `Single`.\n+|collect|Collect the items of this `Multi` into a collection provided via a `Supplier`\n+*and mutated by a {@code BiConsumer} callback.\n+|collectStream|Collects up upstream items with the help of a the callbacks of a `java.util.stream.Collector`.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODg3Mw=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM2OTM4OnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowOToxMlrOF9mntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMTo1N1rOF--YTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MDIxNQ==", "bodyText": "Executes the given java.util.function.Consumer when an onError signal is received.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400140215", "createdAt": "2020-03-30T12:09:12Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|forEach|Terminal stage, invokes provided consumer for every item in the stream.\n+|collectList|Collect the items of this `Multi` instance into a `Single` of `List`.\n+|collect|Collect the items of this `Multi` instance into a `Single`.\n+|collect|Collect the items of this `Multi` into a collection provided via a `Supplier`\n+*and mutated by a {@code BiConsumer} callback.\n+|collectStream|Collects up upstream items with the help of a the callbacks of a `java.util.stream.Collector`.\n+|reduce|Combine subsequent items via a callback function and emit the final value result as a Single.\n+|reduce|Combine every upstream item with an accumulator value to produce a new accumulator value and emit the final accumulator value as a Single.\n+|first|Get the first item of this `Multi` instance as a `Single`.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Create a `Multi` instance wrapped around the given publisher.\n+|from|Create a `Multi` instance that publishes the given iterable.\n+|from|Create a `Multi` instance that publishes the given `Stream`.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|singleton|Create a `Multi` that emits a pre-existing item and then completes.\n+|error|Create a `Multi` instance that reports the given exception to its subscriber(s). The exception is reported by invoking `Subscriber#onError(java.lang.Throwable)` when `Publisher#subscribe(Subscriber)` is called.\n+|empty|Get a `Multi` instance that completes immediately.\n+|never|Get a `Multi` instance that never completes.\n+|concat|Concat streams to one.\n+|onTerminate|Executes given `java.lang.Runnable` when any of signals onComplete, onCancel or onError is received.\n+|onComplete|Executes given `java.lang.Runnable` when onComplete signal is received.\n+|onError|Executes given `java.lang.Runnable` when onError signal is received.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODA2Mw==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401578063", "createdAt": "2020-04-01T12:31:57Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|forEach|Terminal stage, invokes provided consumer for every item in the stream.\n+|collectList|Collect the items of this `Multi` instance into a `Single` of `List`.\n+|collect|Collect the items of this `Multi` instance into a `Single`.\n+|collect|Collect the items of this `Multi` into a collection provided via a `Supplier`\n+*and mutated by a {@code BiConsumer} callback.\n+|collectStream|Collects up upstream items with the help of a the callbacks of a `java.util.stream.Collector`.\n+|reduce|Combine subsequent items via a callback function and emit the final value result as a Single.\n+|reduce|Combine every upstream item with an accumulator value to produce a new accumulator value and emit the final accumulator value as a Single.\n+|first|Get the first item of this `Multi` instance as a `Single`.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Create a `Multi` instance wrapped around the given publisher.\n+|from|Create a `Multi` instance that publishes the given iterable.\n+|from|Create a `Multi` instance that publishes the given `Stream`.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|singleton|Create a `Multi` that emits a pre-existing item and then completes.\n+|error|Create a `Multi` instance that reports the given exception to its subscriber(s). The exception is reported by invoking `Subscriber#onError(java.lang.Throwable)` when `Publisher#subscribe(Subscriber)` is called.\n+|empty|Get a `Multi` instance that completes immediately.\n+|never|Get a `Multi` instance that never completes.\n+|concat|Concat streams to one.\n+|onTerminate|Executes given `java.lang.Runnable` when any of signals onComplete, onCancel or onError is received.\n+|onComplete|Executes given `java.lang.Runnable` when onComplete signal is received.\n+|onError|Executes given `java.lang.Runnable` when onError signal is received.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MDIxNQ=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM4Mjk3OnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMzoxMFrOF9mwJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMjowM1rOF--YhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjM3Mg==", "bodyText": "Transform each upstream item with the supplied function into a Flow.Publisher, subscribe to them and then flatten their items into a single sequence of items emitted to the downstream.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400142372", "createdAt": "2020-03-30T12:13:10Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODExNw==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401578117", "createdAt": "2020-04-01T12:32:03Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MjM3Mg=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM4OTgzOnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxNDo0OVrOF9m0MQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMjowOVrOF--YxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQwOQ==", "bodyText": "Transform each upstream item with the supplied function and flatten the resulting Flow.Publisher [...]", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400143409", "createdAt": "2020-03-30T12:14:49Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODE4MA==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401578180", "createdAt": "2020-04-01T12:32:09Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MzQwOQ=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM5NDg2OnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxNjoxN1rOF9m3Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMjoxNFrOF--Y9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NDIxMA==", "bodyText": "Transform each upstream item with the supplied function and flatten the resulting Iterable to the downstream.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400144210", "createdAt": "2020-03-30T12:16:17Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODIyOA==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401578228", "createdAt": "2020-04-01T12:32:14Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NDIxMA=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM5NzIzOnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxNjo1MVrOF9m4xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMjoyMFrOF--ZMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NDU4MA==", "bodyText": "Transform each upstream item with the supplied function and flatten the resulting Iterable to the downstream.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400144580", "createdAt": "2020-03-30T12:16:51Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODI4OQ==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401578289", "createdAt": "2020-04-01T12:32:20Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NDU4MA=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQwNTY4OnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxOTowMFrOF9m95g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozMjoyNVrOF--ZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NTg5NA==", "bodyText": "Switches to a fallback source if [...]", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r400145894", "createdAt": "2020-03-30T12:19:00Z", "author": {"login": "akarnokd"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|forEach|Terminal stage, invokes provided consumer for every item in the stream.\n+|collectList|Collect the items of this `Multi` instance into a `Single` of `List`.\n+|collect|Collect the items of this `Multi` instance into a `Single`.\n+|collect|Collect the items of this `Multi` into a collection provided via a `Supplier`\n+*and mutated by a {@code BiConsumer} callback.\n+|collectStream|Collects up upstream items with the help of a the callbacks of a `java.util.stream.Collector`.\n+|reduce|Combine subsequent items via a callback function and emit the final value result as a Single.\n+|reduce|Combine every upstream item with an accumulator value to produce a new accumulator value and emit the final accumulator value as a Single.\n+|first|Get the first item of this `Multi` instance as a `Single`.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Create a `Multi` instance wrapped around the given publisher.\n+|from|Create a `Multi` instance that publishes the given iterable.\n+|from|Create a `Multi` instance that publishes the given `Stream`.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|singleton|Create a `Multi` that emits a pre-existing item and then completes.\n+|error|Create a `Multi` instance that reports the given exception to its subscriber(s). The exception is reported by invoking `Subscriber#onError(java.lang.Throwable)` when `Publisher#subscribe(Subscriber)` is called.\n+|empty|Get a `Multi` instance that completes immediately.\n+|never|Get a `Multi` instance that never completes.\n+|concat|Concat streams to one.\n+|onTerminate|Executes given `java.lang.Runnable` when any of signals onComplete, onCancel or onError is received.\n+|onComplete|Executes given `java.lang.Runnable` when onComplete signal is received.\n+|onError|Executes given `java.lang.Runnable` when onError signal is received.\n+|onCancel|Executes given `java.lang.Runnable` when a cancel signal is received.\n+|takeUntil|Relay upstream items until the other source signals an item or completes.\n+|range|Emits a range of ever increasing integers.\n+|rangeLong|Emits a range of ever increasing longs.\n+|timer|Signal 0L and complete the sequence after the given time elapsed.\n+|interval|Signal 0L, 1L and so on periodically to the downstream.\n+|interval|Signal 0L after an initial delay, then 1L, 2L and so on periodically to the downstream.\n+|timeout|Signals a `TimeoutException` if the upstream doesn't signal the next item, error or completion within the specified time.\n+|timeout|Switches to a fallback single if the upstream doesn't signal the next item, error or completion within the specified time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU3ODMyOQ==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401578329", "createdAt": "2020-04-01T12:32:25Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,153 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+\n+= Helidon Reactive Engine\n+:description: Dependecy-less reactive operators\n+:keywords: helidon, reactive, streams, multi, single\n+\n+== Helidon Reactive Engine\n+Helidon has its own set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.\n+Stream processing operator chain can be easily constructed by `io.helidon.common.reactive.Multi`, or\n+`io.helidon.common.reactive.Single` for work with streams containing only single value.\n+\n+[source,java]\n+.Example of Multi usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+Multi.just(\"1\", \"2\", \"3\", \"4\", \"5\")\n+        .limit(3)\n+        .map(Integer::parseInt)\n+        .forEach(sum::addAndGet);\n+\n+System.out.println(\"Sum: \" + sum.get());\n+\n+> Sum: 6\n+----\n+\n+[source,java]\n+.Example of Single usage:\n+----\n+Single.just(\"1\")\n+        .map(Integer::parseInt)\n+        .map(i -> i + 5)\n+        .toStage()\n+        .whenComplete((i, t) -> System.out.println(\"Result: \" + i));\n+\n+> Result: 6\n+----\n+\n+[[terms]]\n+.Operators\n+|===\n+|defer|Call the given supplier function for each individual downstream Subscriber to return a Flow.Publisher to subscribe to.\n+|map|Map this `Multi` instance to a new `Multi` of another type using the given `Mapper`.\n+|defaultIfEmpty|Signals the default item if the upstream is empty.\n+|switchIfEmpty|Switch to the other publisher if the upstream is empty.\n+|peek|Invoke provided consumer for every item in stream.\n+|distinct|Filter out all duplicates.\n+|filter|Filter stream items with provided predicate.\n+|takeWhile|Take the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are sent to downstream, when predicate returns false stream is completed.\n+|dropWhile|Drop the longest prefix of elements from this stream that satisfy the given predicate. As long as predicate returns true, items from upstream are NOT sent to downstream but being dropped, predicate is never called again after it returns false for the first time.\n+|limit|Limit stream to allow only specified number of items to pass.\n+|skip|Skip first n items, all the others are emitted.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream.\n+|flatMap|Transform item with supplied function and flatten resulting `Flow.Publisher` to downstream while limiting the maximum number of concurrent inner `Flow.Publisher`s and their in-flight item count, optionally aggregating and delaying all errors until all sources terminate.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread using a default buffer size of 32 and errors skipping ahead of items.\n+|observeOn|Re-emit the upstream's signals to the downstream on the given executor's thread.\n+|flatMapIterable|Transform item with supplied function and flatten resulting `Iterable` to downstream.\n+|forEach|Terminal stage, invokes provided consumer for every item in the stream.\n+|collectList|Collect the items of this `Multi` instance into a `Single` of `List`.\n+|collect|Collect the items of this `Multi` instance into a `Single`.\n+|collect|Collect the items of this `Multi` into a collection provided via a `Supplier`\n+*and mutated by a {@code BiConsumer} callback.\n+|collectStream|Collects up upstream items with the help of a the callbacks of a `java.util.stream.Collector`.\n+|reduce|Combine subsequent items via a callback function and emit the final value result as a Single.\n+|reduce|Combine every upstream item with an accumulator value to produce a new accumulator value and emit the final accumulator value as a Single.\n+|first|Get the first item of this `Multi` instance as a `Single`.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Wrap a CompletionStage into a Multi and signal its outcome non-blockingly.\n+|from|Create a `Multi` instance wrapped around the given publisher.\n+|from|Create a `Multi` instance that publishes the given iterable.\n+|from|Create a `Multi` instance that publishes the given `Stream`.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|just|Create a `Multi` instance that publishes the given items to a single subscriber.\n+|singleton|Create a `Multi` that emits a pre-existing item and then completes.\n+|error|Create a `Multi` instance that reports the given exception to its subscriber(s). The exception is reported by invoking `Subscriber#onError(java.lang.Throwable)` when `Publisher#subscribe(Subscriber)` is called.\n+|empty|Get a `Multi` instance that completes immediately.\n+|never|Get a `Multi` instance that never completes.\n+|concat|Concat streams to one.\n+|onTerminate|Executes given `java.lang.Runnable` when any of signals onComplete, onCancel or onError is received.\n+|onComplete|Executes given `java.lang.Runnable` when onComplete signal is received.\n+|onError|Executes given `java.lang.Runnable` when onError signal is received.\n+|onCancel|Executes given `java.lang.Runnable` when a cancel signal is received.\n+|takeUntil|Relay upstream items until the other source signals an item or completes.\n+|range|Emits a range of ever increasing integers.\n+|rangeLong|Emits a range of ever increasing longs.\n+|timer|Signal 0L and complete the sequence after the given time elapsed.\n+|interval|Signal 0L, 1L and so on periodically to the downstream.\n+|interval|Signal 0L after an initial delay, then 1L, 2L and so on periodically to the downstream.\n+|timeout|Signals a `TimeoutException` if the upstream doesn't signal the next item, error or completion within the specified time.\n+|timeout|Switches to a fallback single if the upstream doesn't signal the next item, error or completion within the specified time.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0NTg5NA=="}, "originalCommit": {"oid": "0edf1763243bf02e72f9fd531578a1b74a307aa4"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDQ5MTY5OnYy", "diffSide": "RIGHT", "path": "docs/se/reactivestreams/01_introduction.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNjoxN1rOF--iHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMjozNjoxN1rOF--iHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTU4MDU3Mg==", "bodyText": "@m0mus Parent title override will kick in when oracle/helidon-build-tools/pull/92 is used for site creation", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r401580572", "createdAt": "2020-04-01T12:36:17Z", "author": {"login": "danielkec"}, "path": "docs/se/reactivestreams/01_introduction.adoc", "diffHunk": "@@ -16,10 +16,33 @@\n \n ///////////////////////////////////////////////////////////////////////////////\n \n-= Reactive Streams Operators\n+= Overview\n :toc:\n :toc-placement: preamble\n-:description: Reactive Streams Operators support in Helidon SE\n+:parentTitle: Se & Mp", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTIxNDM1OnYy", "diffSide": "RIGHT", "path": "docs/mp/reactivestreams/01_introduction.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxMzo0OToyNVrOF_sIWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0NzozOFrOGFCPuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyNzY0MA==", "bodyText": "and another for", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r402327640", "createdAt": "2020-04-02T13:49:25Z", "author": {"login": "ljamen"}, "path": "docs/mp/reactivestreams/01_introduction.adoc", "diffHunk": "@@ -16,11 +16,34 @@\n \n ///////////////////////////////////////////////////////////////////////////////\n \n-= Reactive Streams Operators\n+= Overview\n :toc:\n :toc-placement: preamble\n-:spec-name: MicroProfile Reactive Streams Operators\n-:description: {spec-name} support in Helidon MP\n+:parentTitle: Se & Mp\n+:flawor: MP\n+:helidon: Helidon {flawor}\n+:description: Reactive Streams support in {helidon}\n :keywords: helidon, mp, microprofile, reactivestreams\n \n-== This page is Under Construction and will be available soon\n+== Reactive Streams\n+\n+[PILLARS]\n+====\n+[CARD]\n+.Helidon Reactive Engine\n+[icon=fa-cogs,link=mp/reactivestreams/02_engine.adoc]\n+--\n+A set of reactive operators.\n+--\n+\n+[CARD]\n+.MicroProfile Reactive Streams Operators\n+[icon=fa-book,link=mp/reactivestreams/03_rsoperators.adoc]\n+--\n+Microprofile implementation.\n+--\n+====\n+\n+There are two handy apis for working with reactive streams available in {helidon},\n+one for working with `java.util.concurrent.Flow`\n+and second for `org.reactivestreams` based reactive components.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMjg1Nw==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r407932857", "createdAt": "2020-04-14T07:47:38Z", "author": {"login": "danielkec"}, "path": "docs/mp/reactivestreams/01_introduction.adoc", "diffHunk": "@@ -16,11 +16,34 @@\n \n ///////////////////////////////////////////////////////////////////////////////\n \n-= Reactive Streams Operators\n+= Overview\n :toc:\n :toc-placement: preamble\n-:spec-name: MicroProfile Reactive Streams Operators\n-:description: {spec-name} support in Helidon MP\n+:parentTitle: Se & Mp\n+:flawor: MP\n+:helidon: Helidon {flawor}\n+:description: Reactive Streams support in {helidon}\n :keywords: helidon, mp, microprofile, reactivestreams\n \n-== This page is Under Construction and will be available soon\n+== Reactive Streams\n+\n+[PILLARS]\n+====\n+[CARD]\n+.Helidon Reactive Engine\n+[icon=fa-cogs,link=mp/reactivestreams/02_engine.adoc]\n+--\n+A set of reactive operators.\n+--\n+\n+[CARD]\n+.MicroProfile Reactive Streams Operators\n+[icon=fa-book,link=mp/reactivestreams/03_rsoperators.adoc]\n+--\n+Microprofile implementation.\n+--\n+====\n+\n+There are two handy apis for working with reactive streams available in {helidon},\n+one for working with `java.util.concurrent.Flow`\n+and second for `org.reactivestreams` based reactive components.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjMyNzY0MA=="}, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTI5NzEzOnYy", "diffSide": "RIGHT", "path": "docs/shared/reactivestreams/03_rsoperators.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDowNzozMlrOF_s8_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzoxNjo1NlrOGFBOAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0MTExOQ==", "bodyText": "Not sure I understand this: Create stream which is send onError as a first thing is", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r402341119", "createdAt": "2020-04-02T14:07:32Z", "author": {"login": "ljamen"}, "path": "docs/shared/reactivestreams/03_rsoperators.adoc", "diffHunk": "@@ -0,0 +1,125 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+= Reactive Streams Operators\n+== Reactive Streams Operators\n+\n+Implementation of\n+https://download.eclipse.org/microprofile/microprofile-reactive-streams-operators-1.0.1/microprofile-reactive-streams-operators-spec.html[MicroProfile Reactive Streams Operators]\n+specification. A standardised tool for manipulation with https://www.reactive-streams.org/[Reactive Streams],\n+provides set of operators as so called stages,\n+and the builders to prepare graphs of stages for streams to be build from.\n+\n+[source,java]\n+.Example of simple closed graph usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+ReactiveStreams.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n+.limit(3)\n+.map(Integer::parseInt)\n+.forEach(sum::addAndGet)\n+.run()\n+.whenComplete((r, t) -> System.out.println(\"Sum: \" + sum.get()));\n+\n+> Sum: 6\n+----\n+\n+[[terms]]\n+.Operators(Stages)\n+|===\n+|from | Create new PublisherBuilder supplied Publisher\n+|of | Create new PublisherBuilder emitting supplied elements\n+|ofNullable | Empty stream if supplied item is null\n+|iterate | Create infinite stream\n+|generate| Create infinite stream\n+|empty| Create empty stream\n+|failed| Create stream which is send onError as a first thing is", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkxNjAzNQ==", "bodyText": "yay thanks", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r407916035", "createdAt": "2020-04-14T07:16:56Z", "author": {"login": "danielkec"}, "path": "docs/shared/reactivestreams/03_rsoperators.adoc", "diffHunk": "@@ -0,0 +1,125 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+= Reactive Streams Operators\n+== Reactive Streams Operators\n+\n+Implementation of\n+https://download.eclipse.org/microprofile/microprofile-reactive-streams-operators-1.0.1/microprofile-reactive-streams-operators-spec.html[MicroProfile Reactive Streams Operators]\n+specification. A standardised tool for manipulation with https://www.reactive-streams.org/[Reactive Streams],\n+provides set of operators as so called stages,\n+and the builders to prepare graphs of stages for streams to be build from.\n+\n+[source,java]\n+.Example of simple closed graph usage:\n+----\n+AtomicInteger sum = new AtomicInteger();\n+\n+ReactiveStreams.of(\"1\", \"2\", \"3\", \"4\", \"5\")\n+.limit(3)\n+.map(Integer::parseInt)\n+.forEach(sum::addAndGet)\n+.run()\n+.whenComplete((r, t) -> System.out.println(\"Sum: \" + sum.get()));\n+\n+> Sum: 6\n+----\n+\n+[[terms]]\n+.Operators(Stages)\n+|===\n+|from | Create new PublisherBuilder supplied Publisher\n+|of | Create new PublisherBuilder emitting supplied elements\n+|ofNullable | Empty stream if supplied item is null\n+|iterate | Create infinite stream\n+|generate| Create infinite stream\n+|empty| Create empty stream\n+|failed| Create stream which is send onError as a first thing is", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0MTExOQ=="}, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5NTMyNDc0OnYy", "diffSide": "RIGHT", "path": "docs/shared/reactivestreams/02_engine.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQxNDoxMzozMVrOF_tO6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwNzo0Nzo0NlrOGFCP-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0NTcwNg==", "bodyText": "Helidon has its own set of reactive operators that have no dependencies outside of the Helidon ecosystem. These operators can be used with 'java.util.concurrent.flow' based reactive streams.", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r402345706", "createdAt": "2020-04-02T14:13:31Z", "author": {"login": "ljamen"}, "path": "docs/shared/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,151 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+= Reactive Engine\n+== Reactive Engine\n+\n+Helidon has its own dependency-less(no dependencies outside of Helidon ecosystem) set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzkzMjkyMw==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1483#discussion_r407932923", "createdAt": "2020-04-14T07:47:46Z", "author": {"login": "danielkec"}, "path": "docs/shared/reactivestreams/02_engine.adoc", "diffHunk": "@@ -0,0 +1,151 @@\n+///////////////////////////////////////////////////////////////////////////////\n+\n+    Copyright (c) 2020 Oracle and/or its affiliates.\n+\n+    Licensed under the Apache License, Version 2.0 (the \"License\");\n+    you may not use this file except in compliance with the License.\n+    You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+///////////////////////////////////////////////////////////////////////////////\n+= Reactive Engine\n+== Reactive Engine\n+\n+Helidon has its own dependency-less(no dependencies outside of Helidon ecosystem) set of reactive operators for work with `java.util.concurrent.Flow` based reactive streams.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjM0NTcwNg=="}, "originalCommit": {"oid": "f40794861eb72600b5ac4037c2cecddf6c674b1c"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 268, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}