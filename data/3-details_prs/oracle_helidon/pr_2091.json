{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjMxNzY2", "number": 2091, "title": "Support for SE mappers in MP.", "bodyText": "Resolves #2090\nSigned-off-by: Tomas Langer tomas.langer@oracle.com", "createdAt": "2020-06-24T14:07:24Z", "url": "https://github.com/oracle/helidon/pull/2091", "merged": true, "mergeCommit": {"oid": "12cfae97d6abceb427585d8507a0aef7c894c213"}, "closed": true, "closedAt": "2020-06-26T08:09:07Z", "author": {"login": "tomas-langer"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuajU7gH2gAyNDM5MjMxNzY2OmJkMzk0NWM2ZmYyNTRhYjBmYTYxNjEwNGVjMzBhYjg3NDJhZGZmZTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuvhG9AFqTQzNzU1MDczNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bd3945c6ff254ab0fa616104ec30ab8742adffe8", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/bd3945c6ff254ab0fa616104ec30ab8742adffe8", "committedDate": "2020-06-24T14:02:43Z", "message": "Support for SE mappers in MP.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/48c9efbd60512c451ecfa05debb8ffa8bc93837e", "committedDate": "2020-06-24T23:13:21Z", "message": "Removed mandatory use of object mapping from security providers.\nUse direct APIs to retrieve booleans.\nFixes to object mapping support in MP.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTAxMDU3", "url": "https://github.com/oracle/helidon/pull/2091#pullrequestreview-437101057", "createdAt": "2020-06-25T00:56:57Z", "commit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "state": "DISMISSED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMDo1Njo1N1rOGon68Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwMTowMToyMFrOGon_KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MDI4OQ==", "bodyText": "Consider replacing with just:\nIterator<ConfigSource> iterator = mpConfig.getConfigSources().iterator();\nConfigSource first = iterator.hasNext() ? iterator.next() : null;\nif (!iterator.hasNext() && first instanceof MpHelidonConfigSource) {\n   return ((MpHelidonConfigSource) first).unwrap();\n}\n\nLess code and fewer object allocations.  (Obviously check my syntax as I haven't proofed it but you should get the idea.)", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445250289", "createdAt": "2020-06-25T00:56:57Z", "author": {"login": "ljnelson"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/MpConfig.java", "diffHunk": "@@ -40,12 +44,32 @@ private MpConfig() {\n      * @param mpConfig MP Config instance\n      * @return a new Helidon config using only the mpConfig as its config source\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public static io.helidon.config.Config toHelidonConfig(Config mpConfig) {\n         if (mpConfig instanceof io.helidon.config.Config) {\n             return (io.helidon.config.Config) mpConfig;\n         }\n \n+        // If the mpConfig is based on an SE config (such as when we use meta configuration)\n+        // we must reuse that se config instance\n+        Iterable<ConfigSource> configSources = mpConfig.getConfigSources();\n+        List<ConfigSource> allSources = new LinkedList<>();\n+        for (ConfigSource source : configSources) {\n+            allSources.add(source);\n+            if (allSources.size() > 1) {\n+                // we only care about first or first two\n+                break;\n+            }\n+        }\n+\n+        if (allSources.size() == 1) {\n+            ConfigSource first = allSources.get(0);\n+            if (first instanceof MpHelidonConfigSource) {\n+                // we only have Helidon SE config as a source - let's just use it\n+                return ((MpHelidonConfigSource) first).unwrap();\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTAwNg==", "bodyText": "Just checking (not familiar with the complexities of Helidon Config): is this truly supposed to be a string, \"0\"?", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445251006", "createdAt": "2020-06-25T00:59:46Z", "author": {"login": "ljnelson"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTI1MTM2OA==", "bodyText": "Do you need equals and hashCode overrides for these ConfigValue implementations?  Or no?", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445251368", "createdAt": "2020-06-25T01:01:20Z", "author": {"login": "ljnelson"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfigValue.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.config.mp;\n+\n+import java.util.Optional;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigMappingException;\n+import io.helidon.config.ConfigValue;\n+import io.helidon.config.MissingValueException;\n+\n+class SeConfigValue<T> implements ConfigValue<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 28}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjYwMjU1", "url": "https://github.com/oracle/helidon/pull/2091#pullrequestreview-437260255", "createdAt": "2020-06-25T08:05:59Z", "commit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNTo1OVrOGov2mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNTo1OVrOGov2mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDI0OQ==", "bodyText": "Could be done without recursion, but not sure if its nicer:\n    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n        if (type() == Type.MISSING) {\n            return Stream.of();\n        }\n        return config.asNodeList()\n                .map(list -> list.stream()\n                        .filter(predicate)\n                        .flatMap(node -> node.type().isLeaf()\n                                ? Stream.of(node)\n                                : node.asNodeList()\n                                      .orElseThrow(MissingValueException.createSupplier(key()))\n                                      .stream()\n                                      .filter(predicate)\n                        ))\n                .orElseThrow(MissingValueException.createSupplier(key()));", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445380249", "createdAt": "2020-06-25T08:05:59Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -265,6 +275,27 @@ public String toString() {\n         return type() + \" \" + stringKey + \" = \" + currentValue().orElse(null);\n     }\n \n+    @Override\n+    public ConfigMapper mapper() {\n+        return mapper.mapper();\n+    }\n+\n+    private Stream<Config> traverseSubNodes(Config config, Predicate<Config> predicate) {\n+        if (type() == Type.MISSING) {\n+            return Stream.of();\n+        }\n+        if (config.type().isLeaf()) {\n+            return Stream.of(config);\n+        } else {\n+            return config.asNodeList()\n+                    .map(list -> list.stream()\n+                            .filter(predicate)\n+                            .map(node -> traverseSubNodes(node, predicate))\n+                            .reduce(Stream.of(config), Stream::concat))\n+                    .orElseThrow(MissingValueException.createSupplier(key()));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 137}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "800590ba22d9732b0c052d6e21b350f2b970b41e", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/800590ba22d9732b0c052d6e21b350f2b970b41e", "committedDate": "2020-06-25T08:08:11Z", "message": "Review fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MjY0NzM4", "url": "https://github.com/oracle/helidon/pull/2091#pullrequestreview-437264738", "createdAt": "2020-06-25T08:11:57Z", "commit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoxMTo1N1rOGowD-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODoxMTo1N1rOGowD-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MzY3NQ==", "bodyText": "Magic number", "url": "https://github.com/oracle/helidon/pull/2091#discussion_r445383675", "createdAt": "2020-06-25T08:11:57Z", "author": {"login": "danielkec"}, "path": "config/config-mp/src/main/java/io/helidon/config/mp/SeConfig.java", "diffHunk": "@@ -355,9 +386,23 @@ private MpConfigImpl impl() {\n                     break;\n                 }\n             }\n-            return Optional.of(result);\n+            return new SeConfigValue<>(key, result);\n         } else {\n-            return Optional.empty();\n+            // and further still we may have a list of objects\n+            if (get(\"0\").type() == Type.MISSING){\n+                return ConfigValues.empty();\n+            }\n+            // there are objects here, let's do that\n+            List<T> result = new LinkedList<>();\n+\n+            for (int i = 0; i < 1000; i++) {\n+                Config config = get(String.valueOf(i));\n+                if (config.type() == Type.MISSING) {\n+                    break;\n+                }\n+                result.add(config.as(typeArg).get());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48c9efbd60512c451ecfa05debb8ffa8bc93837e"}, "originalPosition": 179}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MzM2MTk3", "url": "https://github.com/oracle/helidon/pull/2091#pullrequestreview-437336197", "createdAt": "2020-06-25T09:46:05Z", "commit": {"oid": "800590ba22d9732b0c052d6e21b350f2b970b41e"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d46a7a347dda12f9750b7c8aeff95957b624763c", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/d46a7a347dda12f9750b7c8aeff95957b624763c", "committedDate": "2020-06-25T13:48:56Z", "message": "Removed magical number, support unlimited lists.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60f0a68b726577bb250485bf4e69fd7daf261f10", "author": {"user": {"login": "tomas-langer", "name": "Tomas Langer"}}, "url": "https://github.com/oracle/helidon/commit/60f0a68b726577bb250485bf4e69fd7daf261f10", "committedDate": "2020-06-25T13:59:06Z", "message": "Checkstyle fixes.\n\nSigned-off-by: Tomas Langer <tomas.langer@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3NTUwNzM0", "url": "https://github.com/oracle/helidon/pull/2091#pullrequestreview-437550734", "createdAt": "2020-06-25T14:28:18Z", "commit": {"oid": "60f0a68b726577bb250485bf4e69fd7daf261f10"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 607, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}