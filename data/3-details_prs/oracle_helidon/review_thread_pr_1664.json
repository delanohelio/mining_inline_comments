{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1OTA3MzEx", "number": 1664, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMToxNVrODznC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MTo1NVrOD5mxgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQzNjkxOnYy", "diffSide": "RIGHT", "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMToxNVrOGIJNkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo0NTozN1rOGJyBUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjcyMA==", "bodyText": "final", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r411192720", "createdAt": "2020-04-20T08:31:15Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * CompletionStage with await functions, to achieve intentional blocking without checked exceptions.\n+ */\n+public interface MultiCompletionStage extends CompletionStage<Void> {\n+\n+    static MultiCompletableFuture createFuture() {\n+        return new MultiCompletableFuture();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @throws java.util.concurrent.CancellationException if the computation was cancelled\n+     * @throws CompletionException                        if this future completed\n+     */\n+    default void await() {\n+        this.toCompletableFuture().join();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @return the result value\n+     * @throws java.util.concurrent.CancellationException if this future was cancelled\n+     * @throws CompletionException                        if this future completed exceptionally,\n+     *                                                    was interrupted while waiting or the wait timed out\n+     */\n+    default void await(long timeout, TimeUnit unit) {\n+        try {\n+            this.toCompletableFuture().get(timeout, unit);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new CompletionException(e);\n+        }\n+    }\n+\n+    class MultiCompletableFuture extends CompletableFuture<Void> implements MultiCompletionStage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkwOTkwNA==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r412909904", "createdAt": "2020-04-22T11:45:37Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * CompletionStage with await functions, to achieve intentional blocking without checked exceptions.\n+ */\n+public interface MultiCompletionStage extends CompletionStage<Void> {\n+\n+    static MultiCompletableFuture createFuture() {\n+        return new MultiCompletableFuture();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @throws java.util.concurrent.CancellationException if the computation was cancelled\n+     * @throws CompletionException                        if this future completed\n+     */\n+    default void await() {\n+        this.toCompletableFuture().join();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @return the result value\n+     * @throws java.util.concurrent.CancellationException if this future was cancelled\n+     * @throws CompletionException                        if this future completed exceptionally,\n+     *                                                    was interrupted while waiting or the wait timed out\n+     */\n+    default void await(long timeout, TimeUnit unit) {\n+        try {\n+            this.toCompletableFuture().get(timeout, unit);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new CompletionException(e);\n+        }\n+    }\n+\n+    class MultiCompletableFuture extends CompletableFuture<Void> implements MultiCompletionStage {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5MjcyMA=="}, "originalCommit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ0NDM4OnYy", "diffSide": "RIGHT", "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozMzowNFrOGIJR9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo0Njo1N1rOGJyEbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzg0Nw==", "bodyText": "I'd definitely add cancellation support to this. AutoCloseable perhaps.", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r411193847", "createdAt": "2020-04-20T08:33:04Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -843,9 +843,13 @@\n      *\n      * @param consumer consumer to be invoked for each item\n      */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+    default MultiCompletionStage forEach(Consumer<? super T> consumer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxMDcwMw==", "bodyText": "That's pretty cool! \ud83d\udc4d", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r412910703", "createdAt": "2020-04-22T11:46:57Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -843,9 +843,13 @@\n      *\n      * @param consumer consumer to be invoked for each item\n      */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+    default MultiCompletionStage forEach(Consumer<? super T> consumer) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5Mzg0Nw=="}, "originalCommit": {"oid": "454d3e2768ab0a2fda52671623ae732d63bafca4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDQ0OTU5OnYy", "diffSide": "RIGHT", "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwODozNDowOVrOGIJU1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxMTo0NzoxMlrOGJyFEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NDU4MQ==", "bodyText": "I'd unwrap ExecutionException here.", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r411194581", "createdAt": "2020-04-20T08:34:09Z", "author": {"login": "akarnokd"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * CompletionStage with await functions, to achieve intentional blocking without checked exceptions.\n+ */\n+public interface MultiCompletionStage extends CompletionStage<Void> {\n+\n+    /**\n+     * Create new MultiCompletableFuture.\n+     *\n+     * @return MultiCompletableFuture\n+     */\n+    static MultiCompletableFuture createFuture() {\n+        return new MultiCompletableFuture();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @throws java.util.concurrent.CancellationException if the computation was cancelled\n+     * @throws CompletionException                        if this future completed\n+     */\n+    default void await() {\n+        this.toCompletableFuture().join();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.util.concurrent.CancellationException if this future was cancelled\n+     * @throws CompletionException                        if this future completed exceptionally,\n+     *                                                    was interrupted while waiting or the wait timed out\n+     */\n+    default void await(long timeout, TimeUnit unit) {\n+        try {\n+            this.toCompletableFuture().get(timeout, unit);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new CompletionException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "677aaa575eb8a569e0b59cf3d06e5e590cf7477a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjkxMDg2NA==", "bodyText": "thx", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r412910864", "createdAt": "2020-04-22T11:47:12Z", "author": {"login": "danielkec"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/MultiCompletionStage.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.common.reactive;\n+\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionException;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+/**\n+ * CompletionStage with await functions, to achieve intentional blocking without checked exceptions.\n+ */\n+public interface MultiCompletionStage extends CompletionStage<Void> {\n+\n+    /**\n+     * Create new MultiCompletableFuture.\n+     *\n+     * @return MultiCompletableFuture\n+     */\n+    static MultiCompletableFuture createFuture() {\n+        return new MultiCompletableFuture();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @throws java.util.concurrent.CancellationException if the computation was cancelled\n+     * @throws CompletionException                        if this future completed\n+     */\n+    default void await() {\n+        this.toCompletableFuture().join();\n+    }\n+\n+    /**\n+     * Block until stage is completed, throws only unchecked exceptions.\n+     *\n+     * @param timeout the maximum time to wait\n+     * @param unit    the time unit of the timeout argument\n+     * @throws java.util.concurrent.CancellationException if this future was cancelled\n+     * @throws CompletionException                        if this future completed exceptionally,\n+     *                                                    was interrupted while waiting or the wait timed out\n+     */\n+    default void await(long timeout, TimeUnit unit) {\n+        try {\n+            this.toCompletableFuture().get(timeout, unit);\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            throw new CompletionException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE5NDU4MQ=="}, "originalCommit": {"oid": "677aaa575eb8a569e0b59cf3d06e5e590cf7477a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNzMwNjkwOnYy", "diffSide": "RIGHT", "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MTo1NVrOGQ-NIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMjo0MjoyOFrOGQ-OEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTU2OA==", "bodyText": "Wrong javadoc for return type", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r420449568", "createdAt": "2020-05-05T22:41:55Z", "author": {"login": "tomas-langer"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -842,10 +855,23 @@\n      * Terminal stage, invokes provided consumer for every item in the stream.\n      *\n      * @param consumer consumer to be invoked for each item\n-     */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+     * @return MultiCompletionStage", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTgxMA==", "bodyText": "Also the type is clearly visible from Javadoc already, this should describe behavior, not type", "url": "https://github.com/oracle/helidon/pull/1664#discussion_r420449810", "createdAt": "2020-05-05T22:42:28Z", "author": {"login": "tomas-langer"}, "path": "common/reactive/src/main/java/io/helidon/common/reactive/Multi.java", "diffHunk": "@@ -842,10 +855,23 @@\n      * Terminal stage, invokes provided consumer for every item in the stream.\n      *\n      * @param consumer consumer to be invoked for each item\n-     */\n-    default void forEach(Consumer<? super T> consumer) {\n-        FunctionalSubscriber<T> subscriber = new FunctionalSubscriber<>(consumer, null, null, null);\n+     * @return MultiCompletionStage", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDQ0OTU2OA=="}, "originalCommit": {"oid": "82f71b081961dac5101fd975b0cf15f2c0f3b5cd"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 644, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}