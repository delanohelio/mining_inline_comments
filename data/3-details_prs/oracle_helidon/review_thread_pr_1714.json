{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEyMjk3NDI2", "number": 1714, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1Njo0MFrOD5jnow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OTo1MVrOD5jrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc5MDExOnYy", "diffSide": "RIGHT", "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1Njo0MFrOGQ5SYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1Njo0MFrOGQ5SYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM2ODk5NA==", "bodyText": "Could not find in docs whether there is a possibility we would get the leading / in response. In such a case I would probably try to guard against it, e.g.\nString path = requestContext.getUriInfo().getPath();\nif (path.startsWith(\"/\")) {\n            return path;\n        } else {\n            return '/' + path;\n        }", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420368994", "createdAt": "2020-05-05T19:56:40Z", "author": {"login": "tomas-langer"}, "path": "microprofile/cors/src/main/java/io/helidon/microprofile/cors/CorsSupportMp.java", "diffHunk": "@@ -112,7 +112,7 @@ protected Builder secondaryLookupSupplier(\n \n         @Override\n         public String path() {\n-            return requestContext.getUriInfo().getPath();\n+            return \"/\" + requestContext.getUriInfo().getPath();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjc5OTA2OnYy", "diffSide": "RIGHT", "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CorsSupportHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OTozM1rOGQ5YKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OTozM1rOGQ5YKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDQ3Mw==", "bodyText": "HTTP methods should be compared ignore case (unless you fix the requestedMethod and configured methods somewhere to be always upper/lower cased)", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420370473", "createdAt": "2020-05-05T19:59:33Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CorsSupportHelper.java", "diffHunk": "@@ -510,26 +524,16 @@ R processCorsPreFlightRequest(CrossOriginConfig crossOrigin,\n                     () -> \"actual origin: \" + originOpt.get() + \", allowedOrigins: \" + allowedOrigins);\n         }\n \n-        Optional<String> methodOpt = requestAdapter.firstHeader(ACCESS_CONTROL_REQUEST_METHOD);\n-        if (methodOpt.isEmpty()) {\n-            return forbid(requestAdapter,\n-                    responseAdapter,\n-                    METHOD_NOT_IN_ALLOWED_LIST,\n-                    () -> \"header \" + ACCESS_CONTROL_REQUEST_METHOD + \" absent from request\");\n-        }\n-\n         // Check if method is allowed\n-        String method = methodOpt.get();\n         List<String> allowedMethods = Arrays.asList(crossOrigin.allowMethods());\n         if (!allowedMethods.contains(\"*\")\n-                && !contains(method, allowedMethods, String::equals)) {\n+                && !contains(requestedMethod, allowedMethods, String::equals)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjgwMDI5OnYy", "diffSide": "RIGHT", "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OTo1MVrOGQ5Y4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxOTo1OTo1MVrOGQ5Y4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM3MDY1Nw==", "bodyText": "HTTP methods should be compared ignore case (unless you fix the requestedMethod and configured methods somewhere to be always upper/lower cased)", "url": "https://github.com/oracle/helidon/pull/1714#discussion_r420370657", "createdAt": "2020-05-05T19:59:51Z", "author": {"login": "tomas-langer"}, "path": "webserver/cors/src/main/java/io/helidon/webserver/cors/CrossOriginConfig.java", "diffHunk": "@@ -218,6 +228,21 @@ public long maxAgeSeconds() {\n         return maxAgeSeconds;\n     }\n \n+    /**\n+     * Reports whether the specified HTTP method name matches this {@code CrossOriginConfig}.\n+     *\n+     * @param method HTTP method name to check\n+     * @return true if this {@code CrossOriginConfig} matches the specified method; false otherwise\n+     */\n+    public boolean matches(String method) {\n+        for (String allowMethod : allowMethods) {\n+            if (allowMethod.equals(method) || allowMethod.equals(\"*\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac7b9fdbddc4203c145747a277423676b220f731"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 654, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}