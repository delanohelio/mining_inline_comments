{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMzkxNzYw", "number": 1636, "title": "SE Reactive Messaging", "bodyText": "API\nAPI is providing same functionality as  MP Reactive Messaging does, number of method signatures is reduced to accommodate slightly different requirements of SE Helidon. For connectors is used same api as for MP connectors, which makes connectors reusable for both flawors.\nAcknowledgement\nDue to no magic approach implicit acknowledgement has been reduced only to methods providing unwrapped payload, as it wouldn't be possible to do manual ack without org.eclipse.microprofile.reactive.messaging.Message wrapper.\nChannel<String> channel1 = Channel.create(\"channel1\");\n\nMessaging.builder()\n                .publisher(channel1, Multi.just(\"foo\", \"bar\").map(Message::of))\n                // Every message is acked before each invocation of consumer\n                .listener(channel1, s -> System.out.println(s))\n                .build()\n                .start();\nSuch messages are acked in preprocesses, right before unwrapping.\nKafka connector usage example:\n Channel<ConsumerRecord<String, String>> fromKafka = Channel.<ConsumerRecord<String, String>>builder()\n                .name(\"from-kafka\")\n                .publisherConfig(KafkaConnector.configBuilder()\n                        .bootstrapServers(KAFKA_SERVER)\n                        .groupId(\"test-group\")\n                        .topic(TEST_SE_TOPIC_1, TEST_SE_TOPIC_2)\n                        .autoOffsetReset(KafkaConfigBuilder.AutoOffsetReset.EARLIEST)\n                        .enableAutoCommit(false)\n                        .keyDeserializer(StringDeserializer.class)\n                        .valueDeserializer(StringDeserializer.class)\n                        .build()\n                )\n                .build();\n        KafkaConnector kafkaConnector = KafkaConnector.create(Config.empty());\n        Messaging messaging = Messaging.builder()\n                .connector(kafkaConnector)\n                .listener(fromKafka, consumerRecord -> {\n                    LOGGER.info(\"Kafka says: \" + consumerRecord.value());\n                })\n                .build();\nmessaging.start();\nEmitter usage example:\nChannel<String> simpleChannel = Channel.create(\"simple-channel\");\n\nEmitter<String> emitter = Emitter.create(simpleChannel);\n\nMessaging messaging = Messaging.builder()\n        .emitter(emitter)\n        .listener(simpleChannel, System.out::println)\n        .build();\n\nmessaging.start();\n\nemitter.send(Message.of(\"test1\"));\nemitter.send(\"test2\");\n                                                     \nmessaging.stop();", "createdAt": "2020-04-12T20:07:27Z", "url": "https://github.com/oracle/helidon/pull/1636", "merged": true, "mergeCommit": {"oid": "e33833e7a99c061ebb4cc390018103a19dd7f543"}, "closed": true, "closedAt": "2020-05-28T10:39:28Z", "author": {"login": "danielkec"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccZWKqABqjMyODQ4ODcxMDY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclrbQRAFqTQxOTk4MjQ4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a0c4e7246f238edaaff4931ea878a5a69d720ead", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/a0c4e7246f238edaaff4931ea878a5a69d720ead", "committedDate": "2020-04-20T15:53:55Z", "message": "Emitter api cleanup\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "170357ca6ce2da88dae384a2ebcdd1e45c6fbe58", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/170357ca6ce2da88dae384a2ebcdd1e45c6fbe58", "committedDate": "2020-04-29T14:25:21Z", "message": "Type safe api"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b56ef17d5e86a152733a73e97c367b01ae3d235e", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/b56ef17d5e86a152733a73e97c367b01ae3d235e", "committedDate": "2020-05-08T21:49:40Z", "message": "Checkstyle #2\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "75ec47dfd36bee1f5b28a867462897018e144168", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/75ec47dfd36bee1f5b28a867462897018e144168", "committedDate": "2020-05-10T21:04:56Z", "message": "New config rebase\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9482ec22a4d3a0589540bbd92443dec9bf3ab091", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/9482ec22a4d3a0589540bbd92443dec9bf3ab091", "committedDate": "2020-05-12T06:53:30Z", "message": "Extend Kafka SE Messaging test"}, "afterCommit": {"oid": "678a39b808ff93914de1e0cb4f364baea68f660a", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/678a39b808ff93914de1e0cb4f364baea68f660a", "committedDate": "2020-05-25T10:50:53Z", "message": "Rebase on Kafka tests fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9edfad1b31b14cfef2c82035eeb4aa2a6ccbccb", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/d9edfad1b31b14cfef2c82035eeb4aa2a6ccbccb", "committedDate": "2020-05-25T12:08:21Z", "message": "SE Reactive Messaging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eedb06a2ad94bd735208d07d5cdef32617449460", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/eedb06a2ad94bd735208d07d5cdef32617449460", "committedDate": "2020-05-25T12:08:21Z", "message": "Connector config builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f91e99486b761f45e3e573c67d2e4e1256167dee", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/f91e99486b761f45e3e573c67d2e4e1256167dee", "committedDate": "2020-05-25T12:08:21Z", "message": "SE Messaging with Kafka\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66d0c04a36177778e4c99d9fdbbdb2bf14b6afd2", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/66d0c04a36177778e4c99d9fdbbdb2bf14b6afd2", "committedDate": "2020-05-25T12:08:21Z", "message": "Extend Kafka SE Messaging test\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "committedDate": "2020-05-25T12:08:22Z", "message": "Rebase on Kafka tests fix\n\nRemove internal-test bundle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "678a39b808ff93914de1e0cb4f364baea68f660a", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/678a39b808ff93914de1e0cb4f364baea68f660a", "committedDate": "2020-05-25T10:50:53Z", "message": "Rebase on Kafka tests fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}, "afterCommit": {"oid": "f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/f39fe4efc3a83a135626dd3481e61bcfd7a9c932", "committedDate": "2020-05-25T12:08:22Z", "message": "Rebase on Kafka tests fix\n\nRemove internal-test bundle\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26e55aa78306649daeb4cee79403af6cd086975b", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/26e55aa78306649daeb4cee79403af6cd086975b", "committedDate": "2020-05-25T15:49:47Z", "message": "Multiple topics support in the KafkaConfigBuilder\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60641da03cb940e443ddb8afdda593db803915a3", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/60641da03cb940e443ddb8afdda593db803915a3", "committedDate": "2020-05-25T22:16:50Z", "message": "Kafka SE test fix\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c", "committedDate": "2020-05-26T06:38:02Z", "message": "Temporarily disable flaky test\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NjQxODY3", "url": "https://github.com/oracle/helidon/pull/1636#pullrequestreview-418641867", "createdAt": "2020-05-26T20:09:09Z", "commit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDowOTowOVrOGauiQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQyMDoyMTo1OFrOGau8pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3ODU5Mw==", "bodyText": "Rename to property.", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430678593", "createdAt": "2020-05-26T20:09:09Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConfigBuilder.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Copyright (c) 2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import io.helidon.messaging.ConnectorConfigBuilder;\n+\n+import org.apache.kafka.common.serialization.Deserializer;\n+import org.apache.kafka.common.serialization.Serializer;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+\n+/**\n+ * Build Kafka specific config.\n+ */\n+public final class KafkaConfigBuilder extends ConnectorConfigBuilder {\n+\n+    KafkaConfigBuilder() {\n+        super();\n+        super.put(ConnectorFactory.CONNECTOR_ATTRIBUTE, KafkaConnector.CONNECTOR_NAME);\n+    }\n+\n+    /**\n+     * Add custom property.\n+     *\n+     * @param key   property key\n+     * @param value property value\n+     * @return this builder\n+     */\n+    public KafkaConfigBuilder put(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTc1NQ==", "bodyText": "rename to property", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430679755", "createdAt": "2020-05-26T20:11:23Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY3OTg1Mw==", "bodyText": "rename to config", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430679853", "createdAt": "2020-05-26T20:11:35Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/ConnectorConfigBuilder.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import io.helidon.common.Builder;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+\n+/**\n+ * Detached configuration of a single connector.\n+ */\n+public abstract class ConnectorConfigBuilder implements Builder<Config> {\n+    private final Map<String, String> configuration = new HashMap<>();\n+\n+    protected ConnectorConfigBuilder() {\n+    }\n+\n+    static ConnectorConfigBuilder create(Config config) {\n+        ConnectorConfigBuilder result = new ConnectorConfigBuilder(){};\n+        result.putAll(config);\n+        return result;\n+    }\n+\n+    protected ConnectorConfigBuilder put(String key, String value) {\n+        configuration.put(key, value);\n+        return this;\n+    }\n+\n+    ConnectorConfigBuilder putAll(Config configToPut) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ==", "bodyText": "Create a thread pool only if at least one emitter is configured.\nGet it before the forEach pool and store the executor service instance.\nClose it when closing meessaging.", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430683711", "createdAt": "2020-05-26T20:18:53Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NDA4NQ==", "bodyText": "use an identifier of messaging for\n\nthread name prefix\nhelidon context", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430684085", "createdAt": "2020-05-26T20:19:35Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4NTM1MQ==", "bodyText": "Make sure there is:\n\nThere is a \"messaging\" io.helidon.common.Context instance for the messaging instance\nThere is a \"message\" Context for each message flowing through the messaging (the same one from message producer to message consumer(s), with parent configured to 1.", "url": "https://github.com/oracle/helidon/pull/1636#discussion_r430685351", "createdAt": "2020-05-26T20:21:58Z", "author": {"login": "tomas-langer"}, "path": "messaging/messaging/src/main/java/io/helidon/messaging/MessagingImpl.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package io.helidon.messaging;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.Flow;\n+\n+import io.helidon.common.configurable.ThreadPoolSupplier;\n+import io.helidon.common.reactive.Multi;\n+import io.helidon.config.Config;\n+import io.helidon.config.ConfigSources;\n+import io.helidon.config.ConfigValue;\n+\n+import org.eclipse.microprofile.reactive.messaging.spi.Connector;\n+import org.eclipse.microprofile.reactive.messaging.spi.ConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.IncomingConnectorFactory;\n+import org.eclipse.microprofile.reactive.messaging.spi.OutgoingConnectorFactory;\n+\n+class MessagingImpl implements Messaging {\n+\n+    private final Set<Emitter<?>> emitters = new HashSet<>();\n+    private final Map<String, Channel<?>> channelMap = new HashMap<>();\n+    private final Map<String, IncomingConnectorFactory> incomingConnectors = new HashMap<>();\n+    private final Map<String, OutgoingConnectorFactory> outgoingConnectors = new HashMap<>();\n+    private Config config;\n+    private MessagingImpl.State state = MessagingImpl.State.INIT;\n+    private ThreadPoolSupplier threadPoolSupplier;\n+\n+    MessagingImpl() {\n+    }\n+\n+    public void start() {\n+        state.start(this);\n+        threadPoolSupplier = ThreadPoolSupplier.builder()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDY4MzcxMQ=="}, "originalCommit": {"oid": "ab698c99c1cbd4d7cfd4ccf56ec6fd3f8a61592c"}, "originalPosition": 52}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44336ed1c956ffb25bddb6d4b55841693bbccd21", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/44336ed1c956ffb25bddb6d4b55841693bbccd21", "committedDate": "2020-05-27T13:46:01Z", "message": "Covariance in SE messaging api\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb8bd604baec4bb78eedb412848493ac3805696c", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/cb8bd604baec4bb78eedb412848493ac3805696c", "committedDate": "2020-05-27T16:03:04Z", "message": "Naming convention align\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7835485f89b035bae85d515a3e25a0608a939fcd", "author": {"user": {"login": "danielkec", "name": "Daniel Kec"}}, "url": "https://github.com/oracle/helidon/commit/7835485f89b035bae85d515a3e25a0608a939fcd", "committedDate": "2020-05-27T17:26:18Z", "message": "Emitter thread pool opt. and message unique context\n\nSigned-off-by: Daniel Kec <daniel.kec@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5OTgyNDgx", "url": "https://github.com/oracle/helidon/pull/1636#pullrequestreview-419982481", "createdAt": "2020-05-28T10:36:58Z", "commit": {"oid": "7835485f89b035bae85d515a3e25a0608a939fcd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 712, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}