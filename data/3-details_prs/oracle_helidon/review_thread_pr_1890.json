{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0MzQ0MDgy", "number": 1890, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMTo0OFrOEAgCug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMjo1MlrOEAgEYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTYwNDQyOnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMTo0OFrOGb0YTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMDo1M1rOGb6WTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMjkyNA==", "bodyText": "as other methods show that consumerRecord is nullable, this would end with a NPE", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431822924", "createdAt": "2020-05-28T13:11:48Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgzNzc0OQ==", "bodyText": "KafkaConsumerMessage can be created only by us from ConsumerRecord, optional on the interface is ment for KafkaProducerMessage which can be created by user when he uses KafkaMessage#of", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431837749", "createdAt": "2020-05-28T13:33:51Z", "author": {"login": "danielkec"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMjkyNA=="}, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDcxOQ==", "bodyText": "added null check to constructor, this.consumerRecord is final", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431920719", "createdAt": "2020-05-28T15:20:53Z", "author": {"login": "danielkec"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMjkyNA=="}, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTYwNTM2OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMjowM1rOGb0Y8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMTowMlrOGb6WsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMzA4OQ==", "bodyText": "dtto - nullable consumerRecord", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431823089", "createdAt": "2020-05-28T13:12:03Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();\n+    }\n+\n+    @Override\n+    public Optional<ConsumerRecord<K, V>> getConsumerRecord() {\n+        return Optional.ofNullable(this.consumerRecord);\n+    }\n+\n+    @Override\n+    public Optional<K> getKey() {\n+        return getConsumerRecord().map(ConsumerRecord::key);\n+    }\n+\n+    @Override\n+    public V getPayload() {\n+        return this.consumerRecord.value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDgxNg==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431920816", "createdAt": "2020-05-28T15:21:02Z", "author": {"login": "danielkec"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();\n+    }\n+\n+    @Override\n+    public Optional<ConsumerRecord<K, V>> getConsumerRecord() {\n+        return Optional.ofNullable(this.consumerRecord);\n+    }\n+\n+    @Override\n+    public Optional<K> getKey() {\n+        return getConsumerRecord().map(ConsumerRecord::key);\n+    }\n+\n+    @Override\n+    public V getPayload() {\n+        return this.consumerRecord.value();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMzA4OQ=="}, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4OTYwODY2OnYy", "diffSide": "RIGHT", "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMzoxMjo1MlrOGb0bDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNToyMTowOFrOGb6XAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMzYzMQ==", "bodyText": "Maybe the exception should contain the consumerRecord.getClass().getName() to simplify troubleshooting", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431823631", "createdAt": "2020-05-28T13:12:52Z", "author": {"login": "tomas-langer"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();\n+    }\n+\n+    @Override\n+    public Optional<ConsumerRecord<K, V>> getConsumerRecord() {\n+        return Optional.ofNullable(this.consumerRecord);\n+    }\n+\n+    @Override\n+    public Optional<K> getKey() {\n+        return getConsumerRecord().map(ConsumerRecord::key);\n+    }\n+\n+    @Override\n+    public V getPayload() {\n+        return this.consumerRecord.value();\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        ack.getAndSet(true);\n+        return kafkaCommit.orTimeout(millisWaitingTimeout, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <C> C unwrap(Class<C> unwrapType) {\n+        if (consumerRecord.getClass().isAssignableFrom(unwrapType)) {\n+            return (C) consumerRecord;\n+        } else {\n+            throw new IllegalArgumentException(\"Can't unwrap to \" + unwrapType.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkyMDg5Ng==", "bodyText": "fixed", "url": "https://github.com/oracle/helidon/pull/1890#discussion_r431920896", "createdAt": "2020-05-28T15:21:08Z", "author": {"login": "danielkec"}, "path": "messaging/kafka/src/main/java/io/helidon/messaging/connectors/kafka/KafkaConsumerMessage.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright (c)  2020 Oracle and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.helidon.messaging.connectors.kafka;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import org.apache.kafka.clients.consumer.ConsumerRecord;\n+import org.apache.kafka.common.header.Headers;\n+\n+/**\n+ * Kafka specific MP messaging message.\n+ *\n+ * @param <K> kafka record key type\n+ * @param <V> kafka record value type\n+ */\n+class KafkaConsumerMessage<K, V> implements KafkaMessage<K, V> {\n+\n+    private final CompletableFuture<Void> kafkaCommit;\n+    private final long millisWaitingTimeout;\n+    private final AtomicBoolean ack = new AtomicBoolean();\n+    private final ConsumerRecord<K, V> consumerRecord;\n+\n+    /**\n+     * Kafka specific MP messaging message.\n+     *\n+     * @param consumerRecord       obtained from Kafka topic\n+     * @param kafkaCommit          it will complete when Kafka commit is done.\n+     * @param millisWaitingTimeout this is the time in milliseconds that the ack will be waiting\n+     *                             the commit in Kafka. Applies only if autoCommit is false.\n+     */\n+    KafkaConsumerMessage(ConsumerRecord<K, V> consumerRecord, CompletableFuture<Void> kafkaCommit, long millisWaitingTimeout) {\n+        this.consumerRecord = consumerRecord;\n+        this.kafkaCommit = kafkaCommit;\n+        this.millisWaitingTimeout = millisWaitingTimeout;\n+    }\n+\n+    @Override\n+    public Optional<String> getTopic() {\n+        return getConsumerRecord().map(ConsumerRecord::topic);\n+    }\n+\n+    @Override\n+    public Optional<Integer> getPartition() {\n+        return getConsumerRecord().map(ConsumerRecord::partition);\n+    }\n+\n+    @Override\n+    public Optional<Long> getOffset() {\n+        return getConsumerRecord().map(ConsumerRecord::offset);\n+    }\n+\n+    @Override\n+    public Headers getHeaders() {\n+        return this.consumerRecord.headers();\n+    }\n+\n+    @Override\n+    public Optional<ConsumerRecord<K, V>> getConsumerRecord() {\n+        return Optional.ofNullable(this.consumerRecord);\n+    }\n+\n+    @Override\n+    public Optional<K> getKey() {\n+        return getConsumerRecord().map(ConsumerRecord::key);\n+    }\n+\n+    @Override\n+    public V getPayload() {\n+        return this.consumerRecord.value();\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> ack() {\n+        ack.getAndSet(true);\n+        return kafkaCommit.orTimeout(millisWaitingTimeout, TimeUnit.MILLISECONDS);\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <C> C unwrap(Class<C> unwrapType) {\n+        if (consumerRecord.getClass().isAssignableFrom(unwrapType)) {\n+            return (C) consumerRecord;\n+        } else {\n+            throw new IllegalArgumentException(\"Can't unwrap to \" + unwrapType.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTgyMzYzMQ=="}, "originalCommit": {"oid": "5fae6aada6138d6fde4fe96fdfc3448c4b210de0"}, "originalPosition": 102}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 584, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}