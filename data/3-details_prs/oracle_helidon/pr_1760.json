{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDg2MzEz", "number": 1760, "title": "Fixes StackOverflowError unearthed by new MicroProfile Config implementation", "bodyText": "Signed-off-by: Laird Nelson laird.nelson@oracle.com", "createdAt": "2020-05-09T00:34:25Z", "url": "https://github.com/oracle/helidon/pull/1760", "merged": true, "mergeCommit": {"oid": "ccf82a292cfeb2b701f0c62f40c2512868fead8c"}, "closed": true, "closedAt": "2020-06-01T22:11:22Z", "author": {"login": "ljnelson"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcj32QEAFqTQxNzE1MzYxMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnFIgsgFqTQyMjEwNjQ5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MTUzNjEw", "url": "https://github.com/oracle/helidon/pull/1760#pullrequestreview-417153610", "createdAt": "2020-05-22T19:51:35Z", "commit": {"oid": "ce9817820c2482316964140a2ac5796a70c500b3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1MTozNlrOGZiPvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxOTo1NzoyNVrOGZiWHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQyODY3MA==", "bodyText": "Please do not use assert in the code. I do not see an advantage checking for null not being returned by methods that claim to never return null (such as Optional.orElse(T)).\nWe are not using this approach anywhere in Helidon.\nNo need to remove existing assert statements from code, but please do not add new ones.", "url": "https://github.com/oracle/helidon/pull/1760#discussion_r429428670", "createdAt": "2020-05-22T19:51:36Z", "author": {"login": "tomas-langer"}, "path": "integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/OciConfigConfigSource.java", "diffHunk": "@@ -98,32 +100,45 @@ public int getOrdinal() {\n   @Override\n   public String getValue(final String propertyName) {\n     final String returnValue;\n-    if (propertyName == null || propertyName.equals(\"oci.auth.profile\") || propertyName.equals(\"oci.config.path\")) {\n+    if (propertyName == null) {\n       returnValue = null;\n+    } else if (propertyName.equals(ConfigSource.CONFIG_ORDINAL)) {\n+      returnValue = String.valueOf(this.getOrdinal());\n     } else {\n       Map<String, String> properties = this.properties;\n       if (properties == null) {\n-        final Config config = ConfigProvider.getConfig();\n-        assert config != null;\n-        final String profile = config.getOptionalValue(\"oci.auth.profile\", String.class).orElse(\"DEFAULT\");\n-        assert profile != null;\n-        final String configFilePath = config.getOptionalValue(\"oci.config.path\", String.class).orElse(null);\n-        final ConfigFileAuthenticationDetailsProvider provider;\n-        ConfigFileAuthenticationDetailsProvider temp = null;\n+        properties = PROPERTIES.get();\n+      }\n+      if (properties == null) {\n+        PROPERTIES.set(Collections.emptyMap());\n         try {\n-          if (configFilePath == null) {\n-            temp = new ConfigFileAuthenticationDetailsProvider(profile);\n-          } else {\n-            temp = new ConfigFileAuthenticationDetailsProvider(configFilePath, profile);\n+          // Reentrant call; i.e. this causes a new\n+          // OciConfigConfigSource instance to be created and queried\n+          // for various values.\n+          final Config config = ConfigProvider.getConfig();\n+          assert config != null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9817820c2482316964140a2ac5796a70c500b3"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTQzMDMwMA==", "bodyText": "This approach is broken by design.\nConsider a user creating a custom configuration using a builder and registering config sources, including this one.\nIf at this point, you attempt to use ConfigProvider.getConfig(), another instance of config is created (using just the defaults of MicroProfile, with only microprofile-config.properties, system properties and environment variables)\nThis config may not contain any configuration value you expect to find there, because it is not provided at all (or may provide configuration built-into the application only valid for development environment).\nAs MP does not have the concept of \"meta-configuration\", you have the following options:\n\nprovide a builder approach to create an instance of this config source \"by hand\"\nuse a config-independent way of obtaining configuration of this config source - such as system properties and environment variables.\n\nThis is an unfortunate side effect of how the specification is done, yet there is no way to get hold of a Config instance while setting up a ConfigSource that is not broken.", "url": "https://github.com/oracle/helidon/pull/1760#discussion_r429430300", "createdAt": "2020-05-22T19:57:25Z", "author": {"login": "tomas-langer"}, "path": "integrations/cdi/oci-objectstorage-cdi/src/main/java/io/helidon/integrations/cdi/oci/objectstorage/OciConfigConfigSource.java", "diffHunk": "@@ -98,32 +100,45 @@ public int getOrdinal() {\n   @Override\n   public String getValue(final String propertyName) {\n     final String returnValue;\n-    if (propertyName == null || propertyName.equals(\"oci.auth.profile\") || propertyName.equals(\"oci.config.path\")) {\n+    if (propertyName == null) {\n       returnValue = null;\n+    } else if (propertyName.equals(ConfigSource.CONFIG_ORDINAL)) {\n+      returnValue = String.valueOf(this.getOrdinal());\n     } else {\n       Map<String, String> properties = this.properties;\n       if (properties == null) {\n-        final Config config = ConfigProvider.getConfig();\n-        assert config != null;\n-        final String profile = config.getOptionalValue(\"oci.auth.profile\", String.class).orElse(\"DEFAULT\");\n-        assert profile != null;\n-        final String configFilePath = config.getOptionalValue(\"oci.config.path\", String.class).orElse(null);\n-        final ConfigFileAuthenticationDetailsProvider provider;\n-        ConfigFileAuthenticationDetailsProvider temp = null;\n+        properties = PROPERTIES.get();\n+      }\n+      if (properties == null) {\n+        PROPERTIES.set(Collections.emptyMap());\n         try {\n-          if (configFilePath == null) {\n-            temp = new ConfigFileAuthenticationDetailsProvider(profile);\n-          } else {\n-            temp = new ConfigFileAuthenticationDetailsProvider(configFilePath, profile);\n+          // Reentrant call; i.e. this causes a new\n+          // OciConfigConfigSource instance to be created and queried\n+          // for various values.\n+          final Config config = ConfigProvider.getConfig();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce9817820c2482316964140a2ac5796a70c500b3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8d8949dc1babd0366b3a0285815c13a2b0b5719", "author": {"user": {"login": "ljnelson", "name": "Laird Nelson"}}, "url": "https://github.com/oracle/helidon/commit/b8d8949dc1babd0366b3a0285815c13a2b0b5719", "committedDate": "2020-06-01T17:25:47Z", "message": "Fixes StackOverflowError unearthed by new MicroProfile Config implementation.\n\nSigned-off-by: Laird Nelson <laird.nelson@oracle.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c6ce2b2d75c5293baa7cd0375a580f02c8ca51", "author": {"user": {"login": "ljnelson", "name": "Laird Nelson"}}, "url": "https://github.com/oracle/helidon/commit/42c6ce2b2d75c5293baa7cd0375a580f02c8ca51", "committedDate": "2020-06-01T18:10:54Z", "message": "Incorporated PR feedback\n\nSigned-off-by: Laird Nelson <laird.nelson@oracle.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMTA2NDk1", "url": "https://github.com/oracle/helidon/pull/1760#pullrequestreview-422106495", "createdAt": "2020-06-01T19:07:57Z", "commit": {"oid": "42c6ce2b2d75c5293baa7cd0375a580f02c8ca51"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 771, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}