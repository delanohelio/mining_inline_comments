{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2ODM4NDY2", "number": 1493, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjoxNFrODoojBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjo0N1rODoojvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTMzOTU4OnYy", "diffSide": "RIGHT", "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjoxNFrOF3TJTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjoxNFrOF3TJTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTY3OA==", "bodyText": "Please replace with\nreturn jaxRsApp.applicationClass()\n                .flatMap(MPOpenAPIBuilder::instantiate);\n\nAnd remove the Optional<Class> parameter from instantiate methods. Using Optional as a parameter is generally not recommended.", "url": "https://github.com/oracle/helidon/pull/1493#discussion_r393529678", "createdAt": "2020-03-17T09:02:14Z", "author": {"login": "tomas-langer"}, "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -30,15 +44,106 @@\n \n     private Optional<OpenApiConfig> openAPIConfig;\n     private Optional<IndexView> indexView;\n+    private List<FilteredIndexView> perAppFilteredIndexViews = null;\n+    private Config mpConfig;\n \n     @Override\n     public OpenApiConfig openAPIConfig() {\n         return openAPIConfig.get();\n     }\n \n     @Override\n-    public IndexView indexView() {\n-        return indexView.get();\n+    public synchronized List<FilteredIndexView> perAppFilteredIndexViews() {\n+        if (perAppFilteredIndexViews == null) {\n+            perAppFilteredIndexViews = buildPerAppFilteredIndexViews();\n+        }\n+        return perAppFilteredIndexViews;\n+    }\n+\n+    private List<FilteredIndexView> buildPerAppFilteredIndexViews() {\n+        /*\n+         * The JaxRsCdiExtension knows about all the apps in the system. For each app find out the classes related to that\n+         * app -- the application class itself and any resource classes reported by its getClasses() or getSingletons()\n+         * methods -- and create a FilteredIndexView that will be used to restrict scanning to only those classes for that app.\n+         */\n+        JaxRsCdiExtension ext = CDI.current()\n+                .getBeanManager()\n+                .getExtension(JaxRsCdiExtension.class);\n+\n+        /*\n+         * There are two cases that return a default filtered index view. Don't create it yet, just declare a supplier for it.\n+         */\n+        Supplier<List<FilteredIndexView>> defaultResultSupplier = () -> List.of(new FilteredIndexView(indexView.get(),\n+                openAPIConfig.get()));\n+\n+        /*\n+         * Each set in the list holds the classes related to one app.\n+         */\n+        List<JaxRsApplication> appsToRun = ext.applicationsToRun();\n+        if (appsToRun.size() <= 1) {\n+            return defaultResultSupplier.get();\n+        }\n+        /*\n+         * Some JaxRsApplication instances might have an application instance already associated with them. Others might not in\n+         * which case we'll try to instantiate them ourselves (unless they are synthetic apps or lack no-args constructors).\n+         */\n+        List<Set<Class<?>>> appClassesToScan = appsToRun.stream()\n+                .filter(MPOpenAPIBuilder::isNonSynthetic)\n+                .map(this::appInstance)\n+                .flatMap(Optional::stream)\n+                .map(this::classesToScanForApp)\n+                .collect(Collectors.toList());\n+\n+        if (appClassesToScan.size() <= 1) {\n+            /*\n+             * Use normal scanning with a FilteredIndexView containing no class restrictions (beyond what might already be in\n+             * the configuration).\n+             */\n+            return defaultResultSupplier.get();\n+        }\n+        return appClassesToScan.stream()\n+                .map(this::appRelatedClassesToFilteredIndexView)\n+                .collect(Collectors.toList());\n+    }\n+\n+    private static boolean isNonSynthetic(JaxRsApplication jaxRsApp) {\n+        return !jaxRsApp.synthetic();\n+    }\n+\n+    private Optional<? extends Application> appInstance(JaxRsApplication jaxRsApp) {\n+        Application preexistingApp = jaxRsApp.resourceConfig().getApplication();\n+        if (preexistingApp != null) {\n+            return Optional.of(preexistingApp);\n+        }\n+        return instantiate(jaxRsApp.applicationClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzOTM0MTQxOnYy", "diffSide": "RIGHT", "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjo0N1rOF3TKfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwOTowMjo0N1rOF3TKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzUyOTk4MQ==", "bodyText": "To work with my above note, replace with\n    private static Optional<? extends Application> instantiate(Class<? extends Application> appClass) {\n        try {\n            return Optional.of(appClass.getConstructor().newInstance());\n        } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n            throw new RuntimeException(e);\n        } catch (NoSuchMethodException e) {\n            // Wrapper app does not have a no-args constructor so we canont instantiate it.\n            return Optional.empty();\n        }\n    }", "url": "https://github.com/oracle/helidon/pull/1493#discussion_r393529981", "createdAt": "2020-03-17T09:02:47Z", "author": {"login": "tomas-langer"}, "path": "microprofile/openapi/src/main/java/io/helidon/microprofile/openapi/MPOpenAPIBuilder.java", "diffHunk": "@@ -48,11 +153,34 @@ public IndexView indexView() {\n      * @param config {@link OpenApiConfig} instance to control OpenAPI behavior\n      * @return updated builder instance\n      */\n-    public MPOpenAPIBuilder openAPIConfig(OpenApiConfig config) {\n+    private MPOpenAPIBuilder openAPIConfig(OpenApiConfig config) {\n         this.openAPIConfig = Optional.of(config);\n         return this;\n     }\n \n+    MPOpenAPIBuilder config(Config mpConfig) {\n+        this.mpConfig = mpConfig;\n+        openAPIConfig(new OpenApiConfigImpl(mpConfig));\n+        return this;\n+    }\n+\n+    private static Optional<? extends Application> instantiate(Optional<Class<? extends Application>> optionalAppClass) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1975c60737bb9b9ed1d964ef14f68b82311b9096"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 274, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}