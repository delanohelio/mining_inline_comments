{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTkzMjMx", "number": 621, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1ODowOFrOEg7Wkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjowNToyNlrOEhF_AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYyMzIzOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1ODowOFrOHN-fEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDo0MTo0OVrOHOBzYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzI5OQ==", "bodyText": "This is query here is supposed to check the for column and not the id column. The method getTaskByIdentifier checks the id column.  I think the param here is named incorrectly", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484417299", "createdAt": "2020-09-07T12:58:08Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MTY0OQ==", "bodyText": "The interface is note properly named on plan evaluator, let me confirm and make a PR on the library", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484471649", "createdAt": "2020-09-07T14:41:49Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzI5OQ=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTYyNTQ4OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMjo1ODo0OVrOHN-gag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MDowMVrOHOVErw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzY0Mg==", "bodyText": "I think this method should be retained as an update only operation", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484417642", "createdAt": "2020-09-07T12:58:49Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);\n+    }\n+\n+    @Override\n+    public void updateTask(org.smartregister.domain.Task task) {\n+        addOrUpdate(task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwNTU2Nw==", "bodyText": "added", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484705567", "createdAt": "2020-09-08T07:25:10Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);\n+    }\n+\n+    @Override\n+    public void updateTask(org.smartregister.domain.Task task) {\n+        addOrUpdate(task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzY0Mg=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4NzM3NQ==", "bodyText": "Cool, I have seen the change. Kindly update this call to pass true for an update-only operation", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484787375", "createdAt": "2020-09-08T09:40:01Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");\n+            if (structure != null) {\n+                String structureId = structure.element().as(QuestionnaireResponse.Item.Answer.class).as(com.ibm.fhir.model.type.String.class).getValue();\n+                task.setStructureId(structureId);\n+            } else {\n+                task.setStructureId(task.getForEntity());\n+            }\n+        }\n+        addOrUpdate(task);\n+        Intent intent = new Intent();\n+        Intent taskGeneratedIntent = new Intent(TASK_GENERATED_EVENT);\n+        taskGeneratedIntent.putExtra(TASK_GENERATED, task);\n+        LocalBroadcastManager.getInstance(CoreLibrary.getInstance().context().applicationContext()).sendBroadcast(intent);\n+    }\n+\n+    @Override\n+    public boolean checkIfTaskExists(String baseEntityId, String jurisdiction, String planIdentifier, String code) {\n+        return !getTasksByEntityAndCode(planIdentifier, jurisdiction, baseEntityId, code).isEmpty();\n+    }\n+\n+    @Override\n+    public List<Task> findAllTasksForEntity(String entityId) {\n+        return getTasksByEntity(entityId)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public org.smartregister.domain.Task getTaskByEntityId(String taskId) {\n+        return getTaskByIdentifier(taskId);\n+    }\n+\n+    @Override\n+    public void updateTask(org.smartregister.domain.Task task) {\n+        addOrUpdate(task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQxNzY0Mg=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTY3Nzg2OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/EventDaoImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzoxNTo0OVrOHN_AnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNDozOTo1MFrOHOBvbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNTg4NA==", "bodyText": "(planIdentifier is null or planIdentifier != ?) I am not sure if this was the aim when filtering by planIdentifier", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484425884", "createdAt": "2020-09-07T13:15:49Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/EventDaoImpl.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.smartregister.repository.dao;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+\n+import org.smartregister.converters.EventConverter;\n+import org.smartregister.domain.Event;\n+import org.smartregister.pathevaluator.dao.EventDao;\n+import org.smartregister.repository.EventClientRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import timber.log.Timber;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class EventDaoImpl extends EventClientRepository implements EventDao {\n+\n+    @Override\n+    public List<QuestionnaireResponse> findEventsByEntityIdAndPlan(String resourceId, String\n+            planIdentifier) {\n+        return fetchEvents(String.format(\"select %s from %s where %s =? and (%s is null or %s !=? )\", event_column.json,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQ3MDYzNg==", "bodyText": "Nice catch. This is a bug, let me update should be planIdentifier is null or is equal to the plan being passed", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484470636", "createdAt": "2020-09-07T14:39:50Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/EventDaoImpl.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.smartregister.repository.dao;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+\n+import org.smartregister.converters.EventConverter;\n+import org.smartregister.domain.Event;\n+import org.smartregister.pathevaluator.dao.EventDao;\n+import org.smartregister.repository.EventClientRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import timber.log.Timber;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class EventDaoImpl extends EventClientRepository implements EventDao {\n+\n+    @Override\n+    public List<QuestionnaireResponse> findEventsByEntityIdAndPlan(String resourceId, String\n+            planIdentifier) {\n+        return fetchEvents(String.format(\"select %s from %s where %s =? and (%s is null or %s !=? )\", event_column.json,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQyNTg4NA=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTc1MTE2OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzozODowOFrOHN_sYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MjowN1rOHOVJuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNzA5MA==", "bodyText": "Will the current apps crash/fail on upgrading the client core version due to these missing columns, locationId, residence and clientType, in the current client table?", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484437090", "createdAt": "2020-09-07T13:38:08Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -259,6 +260,13 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                 statement.bindString(columnOrder.get(client_column.syncStatus.name()), syncStatus);\n                 statement.bindString(columnOrder.get(client_column.validationStatus.name()), BaseRepository.TYPE_Valid);\n                 statement.bindString(columnOrder.get(client_column.baseEntityId.name()), jsonObject.getString(client_column.baseEntityId.name()));\n+\n+                bindString(statement, columnOrder.get(client_column.locationId.name()), jsonObject.optString(AllConstants.LOCATION_ID));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDcwNjAzMw==", "bodyText": "apps should upgrade their db when upgrading core", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484706033", "createdAt": "2020-09-08T07:25:57Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -259,6 +260,13 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                 statement.bindString(columnOrder.get(client_column.syncStatus.name()), syncStatus);\n                 statement.bindString(columnOrder.get(client_column.validationStatus.name()), BaseRepository.TYPE_Valid);\n                 statement.bindString(columnOrder.get(client_column.baseEntityId.name()), jsonObject.getString(client_column.baseEntityId.name()));\n+\n+                bindString(statement, columnOrder.get(client_column.locationId.name()), jsonObject.optString(AllConstants.LOCATION_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNzA5MA=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4ODY2Nw==", "bodyText": "Cool. Have this documented on the release/tag note & announce", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484788667", "createdAt": "2020-09-08T09:42:07Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -259,6 +260,13 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                 statement.bindString(columnOrder.get(client_column.syncStatus.name()), syncStatus);\n                 statement.bindString(columnOrder.get(client_column.validationStatus.name()), BaseRepository.TYPE_Valid);\n                 statement.bindString(columnOrder.get(client_column.baseEntityId.name()), jsonObject.getString(client_column.baseEntityId.name()));\n+\n+                bindString(statement, columnOrder.get(client_column.locationId.name()), jsonObject.optString(AllConstants.LOCATION_ID));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzNzA5MA=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTc2NTAwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMzo0MjozOVrOHN_1AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0MTo1N1rOHOVJVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTI5Nw==", "bodyText": "Will the current apps crash/fail on upgrading the client core version due to this missing column, planId, in the current event table?", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484439297", "createdAt": "2020-09-07T13:42:39Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -272,14 +280,20 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(EVENT_ID));\n                 else if (jsonObject.has(_ID))\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(_ID));\n+                JSONObject details = jsonObject.optJSONObject(AllConstants.DETAILS);\n+                if (details != null) {\n+                    bindString(statement, columnOrder.get(event_column.planId.name()), details.optString(AllConstants.PLAN_IDENTIFIER));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NDg2Mw==", "bodyText": "apps are to do a database migration to add the column name", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484694863", "createdAt": "2020-09-08T07:04:33Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -272,14 +280,20 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(EVENT_ID));\n                 else if (jsonObject.has(_ID))\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(_ID));\n+                JSONObject details = jsonObject.optJSONObject(AllConstants.DETAILS);\n+                if (details != null) {\n+                    bindString(statement, columnOrder.get(event_column.planId.name()), details.optString(AllConstants.PLAN_IDENTIFIER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTI5Nw=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4ODU2Nw==", "bodyText": "Cool. Have this documented on the release/tag note & announce", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484788567", "createdAt": "2020-09-08T09:41:57Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -272,14 +280,20 @@ private boolean populateStatement(SQLiteStatement statement, Table table, JSONOb\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(EVENT_ID));\n                 else if (jsonObject.has(_ID))\n                     statement.bindString(columnOrder.get(event_column.eventId.name()), jsonObject.getString(_ID));\n+                JSONObject details = jsonObject.optJSONObject(AllConstants.DETAILS);\n+                if (details != null) {\n+                    bindString(statement, columnOrder.get(event_column.planId.name()), details.optString(AllConstants.PLAN_IDENTIFIER));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDQzOTI5Nw=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTMyNjg1OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNTo0OTo1MlrOHONkhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNzoxOFrOHOPgpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NDQ1Mg==", "bodyText": "A bit of clarification here, the method says delete by baseEntityId, the params are baseEntityId and eventType yet this checks that eventType !=  to the eventType passed as a param.", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484664452", "createdAt": "2020-09-08T05:49:52Z", "author": {"login": "Rkareko"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -2007,6 +2041,39 @@ public ColumnAttribute column() {\n         }\n     }\n \n+    public boolean deleteClient(String baseEntityId) {\n+        try {\n+            int rowsAffected = getWritableDatabase().delete(clientTable.name(),\n+                    client_column.baseEntityId.name()\n+                            + \" = ?\",\n+                    new String[]{baseEntityId});\n+            if (rowsAffected > 0) {\n+                return true;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e);\n+        }\n+        return false;\n+    }\n+\n+    public boolean deleteEventsByBaseEntityId(String baseEntityId, String eventType) {\n+\n+        try {\n+            int rowsAffected = getWritableDatabase().delete(eventTable.name(),\n+                    event_column.baseEntityId.name()\n+                            + \" = ? AND \"\n+                            + event_column.eventType.name()\n+                            + \" != ?\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 413}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjIzMQ==", "bodyText": "Not sure, I did not change this method", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484696231", "createdAt": "2020-09-08T07:07:18Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/EventClientRepository.java", "diffHunk": "@@ -2007,6 +2041,39 @@ public ColumnAttribute column() {\n         }\n     }\n \n+    public boolean deleteClient(String baseEntityId) {\n+        try {\n+            int rowsAffected = getWritableDatabase().delete(clientTable.name(),\n+                    client_column.baseEntityId.name()\n+                            + \" = ?\",\n+                    new String[]{baseEntityId});\n+            if (rowsAffected > 0) {\n+                return true;\n+            }\n+        } catch (Exception e) {\n+            Timber.e(e);\n+        }\n+        return false;\n+    }\n+\n+    public boolean deleteEventsByBaseEntityId(String baseEntityId, String eventType) {\n+\n+        try {\n+            int rowsAffected = getWritableDatabase().delete(eventTable.name(),\n+                    event_column.baseEntityId.name()\n+                            + \" = ? AND \"\n+                            + event_column.eventType.name()\n+                            + \" != ?\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2NDQ1Mg=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 413}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTM2NTEyOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjowNToyNlrOHON6Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNzo1NVrOHOPhnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2OTk3NA==", "bodyText": "Could we make this a constant with a descriptive name.", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484669974", "createdAt": "2020-09-08T06:05:26Z", "author": {"login": "Rkareko"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjQ3Nw==", "bodyText": "You mean constants for the whole expression", "url": "https://github.com/opensrp/opensrp-client-core/pull/621#discussion_r484696477", "createdAt": "2020-09-08T07:07:55Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/repository/dao/TaskDaoImpl.java", "diffHunk": "@@ -0,0 +1,81 @@\n+package org.smartregister.repository.dao;\n+\n+import android.content.Intent;\n+import android.support.v4.content.LocalBroadcastManager;\n+\n+import com.ibm.fhir.model.resource.QuestionnaireResponse;\n+import com.ibm.fhir.model.resource.Task;\n+import com.ibm.fhir.path.FHIRPathElementNode;\n+\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.converters.TaskConverter;\n+import org.smartregister.pathevaluator.PathEvaluatorLibrary;\n+import org.smartregister.pathevaluator.dao.TaskDao;\n+import org.smartregister.repository.TaskNotesRepository;\n+import org.smartregister.repository.TaskRepository;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED;\n+import static org.smartregister.AllConstants.INTENT_KEY.TASK_GENERATED_EVENT;\n+\n+/**\n+ * Created by samuelgithengi on 9/3/20.\n+ */\n+public class TaskDaoImpl extends TaskRepository implements TaskDao {\n+    public TaskDaoImpl(TaskNotesRepository taskNotesRepository) {\n+        super(taskNotesRepository);\n+    }\n+\n+    @Override\n+    public List<Task> findTasksForEntity(String id, String planIdentifier) {\n+        return getTasksByPlanAndEntity(planIdentifier, id)\n+                .stream()\n+                .map(TaskConverter::convertTasktoFihrResource)\n+                .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void saveTask(org.smartregister.domain.Task task, QuestionnaireResponse questionnaireResponse) {\n+        if (questionnaireResponse != null) {\n+            FHIRPathElementNode structure = PathEvaluatorLibrary.getInstance()\n+                    .evaluateElementExpression(questionnaireResponse,\n+                            \"$this.item.where(url='details' and linkId='location_id').answer\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY2OTk3NA=="}, "originalCommit": {"oid": "bd7fe3a1ff9062eee68a533476d37270f2f620df"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2104, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}