{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNjE5ODA0", "number": 619, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Nzo1NFrOEXjstw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Nzo1NFrOEXjstw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMTM3NTkxOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/login/interactor/BaseLoginInteractorTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQwOTo1Nzo1NFrOG_aaAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwNzo0NDozMlrOG__1XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NjExNQ==", "bodyText": "Is this supposed to test the exception block in the BaseLoginInteractor#localLogin(WeakReference<BaseLoginContract.View> view, String userName, String password)?", "url": "https://github.com/opensrp/opensrp-client-core/pull/619#discussion_r469146115", "createdAt": "2020-08-12T09:57:54Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/login/interactor/BaseLoginInteractorTest.java", "diffHunk": "@@ -0,0 +1,403 @@\n+package org.smartregister.login.interactor;\n+\n+import android.content.DialogInterface;\n+import android.support.v7.app.AppCompatActivity;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.Robolectric;\n+import org.robolectric.annotation.Config;\n+import org.smartregister.AllConstants;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.Context;\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.R;\n+import org.smartregister.SyncConfiguration;\n+import org.smartregister.domain.LoginResponse;\n+import org.smartregister.domain.Setting;\n+import org.smartregister.domain.TimeStatus;\n+import org.smartregister.domain.jsonmapping.LoginResponseData;\n+import org.smartregister.domain.jsonmapping.Time;\n+import org.smartregister.domain.jsonmapping.User;\n+import org.smartregister.listener.OnCompleteClearDataCallback;\n+import org.smartregister.multitenant.ResetAppHelper;\n+import org.smartregister.repository.AllSettings;\n+import org.smartregister.repository.AllSharedPreferences;\n+import org.smartregister.repository.UniqueIdRepository;\n+import org.smartregister.service.UserService;\n+import org.smartregister.shadows.LoginInteractorShadow;\n+import org.smartregister.shadows.ShadowNetworkUtils;\n+import org.smartregister.view.contract.BaseLoginContract;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 8/4/20.\n+ */\n+\n+public class BaseLoginInteractorTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private LoginInteractorShadow interactor;\n+\n+    @Mock\n+    private BaseLoginContract.Presenter presenter;\n+\n+    @Mock\n+    private BaseLoginContract.View view;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private AllSharedPreferences allSharedPreferences;\n+\n+    @Mock\n+    private SyncConfiguration syncConfiguration;\n+\n+    @Captor\n+    private ArgumentCaptor<DialogInterface.OnClickListener> dialogCaptor;\n+\n+    @Mock\n+    private DialogInterface dialogInterface;\n+\n+    @Mock\n+    private ResetAppHelper resetAppHelper;\n+\n+    @Captor\n+    private ArgumentCaptor<OnCompleteClearDataCallback> onCompleteClearDataCaptor;\n+\n+    @Mock\n+    private UniqueIdRepository uniqueIdRepository;\n+\n+    @Mock\n+    private AllSettings allSettings;\n+\n+    @Captor\n+    private ArgumentCaptor<Setting> settingCaptor;\n+\n+    private AppCompatActivity activity;\n+\n+    private LoginResponseData loginResponseData;\n+\n+    private String user = \"johndoe\";\n+    private String password = \"qwerty\";\n+\n+    private UserService contextUserService;\n+\n+    @Before\n+    public void setUp() {\n+        contextUserService = CoreLibrary.getInstance().context().userService();\n+        when(presenter.getOpenSRPContext()).thenReturn(context);\n+        when(context.allSharedPreferences()).thenReturn(allSharedPreferences);\n+        when(context.userService()).thenReturn(userService);\n+        when(presenter.getLoginView()).thenReturn(view);\n+        activity = Robolectric.buildActivity(AppCompatActivity.class).create().get();\n+        when(view.getActivityContext()).thenReturn(activity);\n+        loginResponseData = new LoginResponseData();\n+        loginResponseData.user = new User().withUsername(user);\n+        loginResponseData.time = new Time(new Date(), TimeZone.getTimeZone(\"Africa/Nairobi\"));\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        Whitebox.setInternalState(CoreLibrary.getInstance().context(), \"userService\", contextUserService);\n+    }\n+\n+    @Test\n+    public void testOnDestroyShouldSetPresenterNull() {\n+        assertNotNull(Whitebox.getInternalState(interactor, \"mLoginPresenter\"));\n+        interactor.onDestroy(false);\n+        assertNull(Whitebox.getInternalState(interactor, \"mLoginPresenter\"));\n+    }\n+\n+    @Test\n+    public void testLoginAttemptsRemoteLoginAndErrorsWithBaseURLIsMissing() {\n+        when(allSharedPreferences.fetchBaseURL(\"\")).thenReturn(\"\");\n+        interactor.login(new WeakReference<>(view), \"johndoe\", \"password\");\n+        verify(view).hideKeyboard();\n+        verify(view).enableLoginButton(false);\n+        verify(allSharedPreferences).savePreference(\"DRISHTI_BASE_URL\", activity.getString(R.string.opensrp_url));\n+        verify(view).enableLoginButton(true);\n+        verify(view).showErrorDialog(activity.getString(R.string.remote_login_base_url_missing_error));\n+        verify(view, never()).goToHome(anyBoolean());\n+    }\n+\n+    @Test\n+    public void testLoginAttemptsRemoteLoginAndErrorsWithGenericError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f89e778267f4931c028dec3adb6f3fd2dd317110"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTcyOTIxNQ==", "bodyText": "Its testing an exception block in org.smartregister.login.interactor.BaseLoginInteractor#remoteLogin this is because getSharedPreferences().fetchBaseURL(\"\").isEmpty()  will throw an NPE since getSharedPreferences is mock", "url": "https://github.com/opensrp/opensrp-client-core/pull/619#discussion_r469729215", "createdAt": "2020-08-13T06:39:50Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/test/java/org/smartregister/login/interactor/BaseLoginInteractorTest.java", "diffHunk": "@@ -0,0 +1,403 @@\n+package org.smartregister.login.interactor;\n+\n+import android.content.DialogInterface;\n+import android.support.v7.app.AppCompatActivity;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.Robolectric;\n+import org.robolectric.annotation.Config;\n+import org.smartregister.AllConstants;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.Context;\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.R;\n+import org.smartregister.SyncConfiguration;\n+import org.smartregister.domain.LoginResponse;\n+import org.smartregister.domain.Setting;\n+import org.smartregister.domain.TimeStatus;\n+import org.smartregister.domain.jsonmapping.LoginResponseData;\n+import org.smartregister.domain.jsonmapping.Time;\n+import org.smartregister.domain.jsonmapping.User;\n+import org.smartregister.listener.OnCompleteClearDataCallback;\n+import org.smartregister.multitenant.ResetAppHelper;\n+import org.smartregister.repository.AllSettings;\n+import org.smartregister.repository.AllSharedPreferences;\n+import org.smartregister.repository.UniqueIdRepository;\n+import org.smartregister.service.UserService;\n+import org.smartregister.shadows.LoginInteractorShadow;\n+import org.smartregister.shadows.ShadowNetworkUtils;\n+import org.smartregister.view.contract.BaseLoginContract;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 8/4/20.\n+ */\n+\n+public class BaseLoginInteractorTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private LoginInteractorShadow interactor;\n+\n+    @Mock\n+    private BaseLoginContract.Presenter presenter;\n+\n+    @Mock\n+    private BaseLoginContract.View view;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private AllSharedPreferences allSharedPreferences;\n+\n+    @Mock\n+    private SyncConfiguration syncConfiguration;\n+\n+    @Captor\n+    private ArgumentCaptor<DialogInterface.OnClickListener> dialogCaptor;\n+\n+    @Mock\n+    private DialogInterface dialogInterface;\n+\n+    @Mock\n+    private ResetAppHelper resetAppHelper;\n+\n+    @Captor\n+    private ArgumentCaptor<OnCompleteClearDataCallback> onCompleteClearDataCaptor;\n+\n+    @Mock\n+    private UniqueIdRepository uniqueIdRepository;\n+\n+    @Mock\n+    private AllSettings allSettings;\n+\n+    @Captor\n+    private ArgumentCaptor<Setting> settingCaptor;\n+\n+    private AppCompatActivity activity;\n+\n+    private LoginResponseData loginResponseData;\n+\n+    private String user = \"johndoe\";\n+    private String password = \"qwerty\";\n+\n+    private UserService contextUserService;\n+\n+    @Before\n+    public void setUp() {\n+        contextUserService = CoreLibrary.getInstance().context().userService();\n+        when(presenter.getOpenSRPContext()).thenReturn(context);\n+        when(context.allSharedPreferences()).thenReturn(allSharedPreferences);\n+        when(context.userService()).thenReturn(userService);\n+        when(presenter.getLoginView()).thenReturn(view);\n+        activity = Robolectric.buildActivity(AppCompatActivity.class).create().get();\n+        when(view.getActivityContext()).thenReturn(activity);\n+        loginResponseData = new LoginResponseData();\n+        loginResponseData.user = new User().withUsername(user);\n+        loginResponseData.time = new Time(new Date(), TimeZone.getTimeZone(\"Africa/Nairobi\"));\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        Whitebox.setInternalState(CoreLibrary.getInstance().context(), \"userService\", contextUserService);\n+    }\n+\n+    @Test\n+    public void testOnDestroyShouldSetPresenterNull() {\n+        assertNotNull(Whitebox.getInternalState(interactor, \"mLoginPresenter\"));\n+        interactor.onDestroy(false);\n+        assertNull(Whitebox.getInternalState(interactor, \"mLoginPresenter\"));\n+    }\n+\n+    @Test\n+    public void testLoginAttemptsRemoteLoginAndErrorsWithBaseURLIsMissing() {\n+        when(allSharedPreferences.fetchBaseURL(\"\")).thenReturn(\"\");\n+        interactor.login(new WeakReference<>(view), \"johndoe\", \"password\");\n+        verify(view).hideKeyboard();\n+        verify(view).enableLoginButton(false);\n+        verify(allSharedPreferences).savePreference(\"DRISHTI_BASE_URL\", activity.getString(R.string.opensrp_url));\n+        verify(view).enableLoginButton(true);\n+        verify(view).showErrorDialog(activity.getString(R.string.remote_login_base_url_missing_error));\n+        verify(view, never()).goToHome(anyBoolean());\n+    }\n+\n+    @Test\n+    public void testLoginAttemptsRemoteLoginAndErrorsWithGenericError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NjExNQ=="}, "originalCommit": {"oid": "f89e778267f4931c028dec3adb6f3fd2dd317110"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTc1OTMyNA==", "bodyText": "Cool", "url": "https://github.com/opensrp/opensrp-client-core/pull/619#discussion_r469759324", "createdAt": "2020-08-13T07:44:32Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/login/interactor/BaseLoginInteractorTest.java", "diffHunk": "@@ -0,0 +1,403 @@\n+package org.smartregister.login.interactor;\n+\n+import android.content.DialogInterface;\n+import android.support.v7.app.AppCompatActivity;\n+\n+import org.json.JSONArray;\n+import org.json.JSONException;\n+import org.json.JSONObject;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.Robolectric;\n+import org.robolectric.annotation.Config;\n+import org.smartregister.AllConstants;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.Context;\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.R;\n+import org.smartregister.SyncConfiguration;\n+import org.smartregister.domain.LoginResponse;\n+import org.smartregister.domain.Setting;\n+import org.smartregister.domain.TimeStatus;\n+import org.smartregister.domain.jsonmapping.LoginResponseData;\n+import org.smartregister.domain.jsonmapping.Time;\n+import org.smartregister.domain.jsonmapping.User;\n+import org.smartregister.listener.OnCompleteClearDataCallback;\n+import org.smartregister.multitenant.ResetAppHelper;\n+import org.smartregister.repository.AllSettings;\n+import org.smartregister.repository.AllSharedPreferences;\n+import org.smartregister.repository.UniqueIdRepository;\n+import org.smartregister.service.UserService;\n+import org.smartregister.shadows.LoginInteractorShadow;\n+import org.smartregister.shadows.ShadowNetworkUtils;\n+import org.smartregister.view.contract.BaseLoginContract;\n+\n+import java.lang.ref.WeakReference;\n+import java.util.Date;\n+import java.util.TimeZone;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyBoolean;\n+import static org.mockito.ArgumentMatchers.anyLong;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.timeout;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 8/4/20.\n+ */\n+\n+public class BaseLoginInteractorTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private LoginInteractorShadow interactor;\n+\n+    @Mock\n+    private BaseLoginContract.Presenter presenter;\n+\n+    @Mock\n+    private BaseLoginContract.View view;\n+\n+    @Mock\n+    private Context context;\n+\n+    @Mock\n+    private UserService userService;\n+\n+    @Mock\n+    private AllSharedPreferences allSharedPreferences;\n+\n+    @Mock\n+    private SyncConfiguration syncConfiguration;\n+\n+    @Captor\n+    private ArgumentCaptor<DialogInterface.OnClickListener> dialogCaptor;\n+\n+    @Mock\n+    private DialogInterface dialogInterface;\n+\n+    @Mock\n+    private ResetAppHelper resetAppHelper;\n+\n+    @Captor\n+    private ArgumentCaptor<OnCompleteClearDataCallback> onCompleteClearDataCaptor;\n+\n+    @Mock\n+    private UniqueIdRepository uniqueIdRepository;\n+\n+    @Mock\n+    private AllSettings allSettings;\n+\n+    @Captor\n+    private ArgumentCaptor<Setting> settingCaptor;\n+\n+    private AppCompatActivity activity;\n+\n+    private LoginResponseData loginResponseData;\n+\n+    private String user = \"johndoe\";\n+    private String password = \"qwerty\";\n+\n+    private UserService contextUserService;\n+\n+    @Before\n+    public void setUp() {\n+        contextUserService = CoreLibrary.getInstance().context().userService();\n+        when(presenter.getOpenSRPContext()).thenReturn(context);\n+        when(context.allSharedPreferences()).thenReturn(allSharedPreferences);\n+        when(context.userService()).thenReturn(userService);\n+        when(presenter.getLoginView()).thenReturn(view);\n+        activity = Robolectric.buildActivity(AppCompatActivity.class).create().get();\n+        when(view.getActivityContext()).thenReturn(activity);\n+        loginResponseData = new LoginResponseData();\n+        loginResponseData.user = new User().withUsername(user);\n+        loginResponseData.time = new Time(new Date(), TimeZone.getTimeZone(\"Africa/Nairobi\"));\n+    }\n+\n+    @After\n+    public void tearDown() {\n+        Whitebox.setInternalState(CoreLibrary.getInstance().context(), \"userService\", contextUserService);\n+    }\n+\n+    @Test\n+    public void testOnDestroyShouldSetPresenterNull() {\n+        assertNotNull(Whitebox.getInternalState(interactor, \"mLoginPresenter\"));\n+        interactor.onDestroy(false);\n+        assertNull(Whitebox.getInternalState(interactor, \"mLoginPresenter\"));\n+    }\n+\n+    @Test\n+    public void testLoginAttemptsRemoteLoginAndErrorsWithBaseURLIsMissing() {\n+        when(allSharedPreferences.fetchBaseURL(\"\")).thenReturn(\"\");\n+        interactor.login(new WeakReference<>(view), \"johndoe\", \"password\");\n+        verify(view).hideKeyboard();\n+        verify(view).enableLoginButton(false);\n+        verify(allSharedPreferences).savePreference(\"DRISHTI_BASE_URL\", activity.getString(R.string.opensrp_url));\n+        verify(view).enableLoginButton(true);\n+        verify(view).showErrorDialog(activity.getString(R.string.remote_login_base_url_missing_error));\n+        verify(view, never()).goToHome(anyBoolean());\n+    }\n+\n+    @Test\n+    public void testLoginAttemptsRemoteLoginAndErrorsWithGenericError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTE0NjExNQ=="}, "originalCommit": {"oid": "f89e778267f4931c028dec3adb6f3fd2dd317110"}, "originalPosition": 155}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2101, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}