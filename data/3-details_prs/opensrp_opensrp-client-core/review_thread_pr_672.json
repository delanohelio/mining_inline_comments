{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTUzMzgy", "number": 672, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyMFrOEyrf-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyNlrOEyrgCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTc2OTUyOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyMFrOHpc4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzo1MDozNVrOHpdjPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjgwMA==", "bodyText": "Can this be simplified to use assertTrue? Also, how comes this remains true yet you set it to false above?", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#discussion_r513226800", "createdAt": "2020-10-28T07:25:20Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.smartregister.cursoradapter;\n+\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import net.sqlcipher.Cursor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.cursoradapter.RecyclerViewCursorAdapter.NotifyingDataSetObserver;\n+import org.smartregister.shadows.RecyclerViewCursorAdapterShadow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 10/27/20.\n+ */\n+public class RecyclerViewCursorAdapterTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private RecyclerViewCursorAdapterShadow recyclerViewCursorAdapter;\n+\n+    @Mock\n+    private Cursor cursor;\n+\n+    @Mock\n+    private RecyclerView.ViewHolder viewHolder;\n+\n+    @Before\n+    public void setUp() {\n+        when(cursor.getColumnIndex(\"_id\")).thenReturn(0);\n+    }\n+\n+    @Test\n+    public void testGetCursorShouldReturnCursor() {\n+        assertEquals(cursor, recyclerViewCursorAdapter.getCursor());\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnCountFromCursor() {\n+        when(cursor.getCount()).thenReturn(2);\n+        assertEquals(3, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnZero() {\n+        ReflectionHelpers.setField(recyclerViewCursorAdapter, \"mDataValid\", false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor, never()).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReadFromCursor() {\n+        when(cursor.moveToPosition(12)).thenReturn(true);\n+        when(cursor.getLong(0)).thenReturn(200L);\n+        assertEquals(200, recyclerViewCursorAdapter.getItemId(12));\n+        verify(cursor).getLong(0);\n+        verify(cursor).moveToPosition(12);\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReturnZeroIfCursorIsBlank() {\n+        when(cursor.moveToPosition(1)).thenReturn(false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemId(1));\n+        verify(cursor).moveToPosition(1);\n+        verify(cursor, never()).getLong(anyInt());\n+    }\n+\n+    @Test\n+    public void testSetHasStableIdsShouldPassTrueToSuper() {\n+        recyclerViewCursorAdapter.setHasStableIds(false);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNzgyMQ==", "bodyText": "done", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#discussion_r513237821", "createdAt": "2020-10-28T07:50:35Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.smartregister.cursoradapter;\n+\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import net.sqlcipher.Cursor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.cursoradapter.RecyclerViewCursorAdapter.NotifyingDataSetObserver;\n+import org.smartregister.shadows.RecyclerViewCursorAdapterShadow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 10/27/20.\n+ */\n+public class RecyclerViewCursorAdapterTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private RecyclerViewCursorAdapterShadow recyclerViewCursorAdapter;\n+\n+    @Mock\n+    private Cursor cursor;\n+\n+    @Mock\n+    private RecyclerView.ViewHolder viewHolder;\n+\n+    @Before\n+    public void setUp() {\n+        when(cursor.getColumnIndex(\"_id\")).thenReturn(0);\n+    }\n+\n+    @Test\n+    public void testGetCursorShouldReturnCursor() {\n+        assertEquals(cursor, recyclerViewCursorAdapter.getCursor());\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnCountFromCursor() {\n+        when(cursor.getCount()).thenReturn(2);\n+        assertEquals(3, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnZero() {\n+        ReflectionHelpers.setField(recyclerViewCursorAdapter, \"mDataValid\", false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor, never()).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReadFromCursor() {\n+        when(cursor.moveToPosition(12)).thenReturn(true);\n+        when(cursor.getLong(0)).thenReturn(200L);\n+        assertEquals(200, recyclerViewCursorAdapter.getItemId(12));\n+        verify(cursor).getLong(0);\n+        verify(cursor).moveToPosition(12);\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReturnZeroIfCursorIsBlank() {\n+        when(cursor.moveToPosition(1)).thenReturn(false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemId(1));\n+        verify(cursor).moveToPosition(1);\n+        verify(cursor, never()).getLong(anyInt());\n+    }\n+\n+    @Test\n+    public void testSetHasStableIdsShouldPassTrueToSuper() {\n+        recyclerViewCursorAdapter.setHasStableIds(false);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjgwMA=="}, "originalCommit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTc2OTY4OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyNlrOHpc4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzo1MDozMFrOHpdjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjgzMg==", "bodyText": "Can this be simplified to use assertTrue?", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#discussion_r513226832", "createdAt": "2020-10-28T07:25:26Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.smartregister.cursoradapter;\n+\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import net.sqlcipher.Cursor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.cursoradapter.RecyclerViewCursorAdapter.NotifyingDataSetObserver;\n+import org.smartregister.shadows.RecyclerViewCursorAdapterShadow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 10/27/20.\n+ */\n+public class RecyclerViewCursorAdapterTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private RecyclerViewCursorAdapterShadow recyclerViewCursorAdapter;\n+\n+    @Mock\n+    private Cursor cursor;\n+\n+    @Mock\n+    private RecyclerView.ViewHolder viewHolder;\n+\n+    @Before\n+    public void setUp() {\n+        when(cursor.getColumnIndex(\"_id\")).thenReturn(0);\n+    }\n+\n+    @Test\n+    public void testGetCursorShouldReturnCursor() {\n+        assertEquals(cursor, recyclerViewCursorAdapter.getCursor());\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnCountFromCursor() {\n+        when(cursor.getCount()).thenReturn(2);\n+        assertEquals(3, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnZero() {\n+        ReflectionHelpers.setField(recyclerViewCursorAdapter, \"mDataValid\", false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor, never()).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReadFromCursor() {\n+        when(cursor.moveToPosition(12)).thenReturn(true);\n+        when(cursor.getLong(0)).thenReturn(200L);\n+        assertEquals(200, recyclerViewCursorAdapter.getItemId(12));\n+        verify(cursor).getLong(0);\n+        verify(cursor).moveToPosition(12);\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReturnZeroIfCursorIsBlank() {\n+        when(cursor.moveToPosition(1)).thenReturn(false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemId(1));\n+        verify(cursor).moveToPosition(1);\n+        verify(cursor, never()).getLong(anyInt());\n+    }\n+\n+    @Test\n+    public void testSetHasStableIdsShouldPassTrueToSuper() {\n+        recyclerViewCursorAdapter.setHasStableIds(false);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));\n+\n+        recyclerViewCursorAdapter.setHasStableIds(true);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIzNzc4Ng==", "bodyText": "done", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#discussion_r513237786", "createdAt": "2020-10-28T07:50:30Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.smartregister.cursoradapter;\n+\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import net.sqlcipher.Cursor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.cursoradapter.RecyclerViewCursorAdapter.NotifyingDataSetObserver;\n+import org.smartregister.shadows.RecyclerViewCursorAdapterShadow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 10/27/20.\n+ */\n+public class RecyclerViewCursorAdapterTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private RecyclerViewCursorAdapterShadow recyclerViewCursorAdapter;\n+\n+    @Mock\n+    private Cursor cursor;\n+\n+    @Mock\n+    private RecyclerView.ViewHolder viewHolder;\n+\n+    @Before\n+    public void setUp() {\n+        when(cursor.getColumnIndex(\"_id\")).thenReturn(0);\n+    }\n+\n+    @Test\n+    public void testGetCursorShouldReturnCursor() {\n+        assertEquals(cursor, recyclerViewCursorAdapter.getCursor());\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnCountFromCursor() {\n+        when(cursor.getCount()).thenReturn(2);\n+        assertEquals(3, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnZero() {\n+        ReflectionHelpers.setField(recyclerViewCursorAdapter, \"mDataValid\", false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor, never()).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReadFromCursor() {\n+        when(cursor.moveToPosition(12)).thenReturn(true);\n+        when(cursor.getLong(0)).thenReturn(200L);\n+        assertEquals(200, recyclerViewCursorAdapter.getItemId(12));\n+        verify(cursor).getLong(0);\n+        verify(cursor).moveToPosition(12);\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReturnZeroIfCursorIsBlank() {\n+        when(cursor.moveToPosition(1)).thenReturn(false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemId(1));\n+        verify(cursor).moveToPosition(1);\n+        verify(cursor, never()).getLong(anyInt());\n+    }\n+\n+    @Test\n+    public void testSetHasStableIdsShouldPassTrueToSuper() {\n+        recyclerViewCursorAdapter.setHasStableIds(false);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));\n+\n+        recyclerViewCursorAdapter.setHasStableIds(true);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjgzMg=="}, "originalCommit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2115, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}