{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTg1MTk0", "number": 505, "title": "Add unit tests for BaseRegisterFragment class", "bodyText": "", "createdAt": "2020-04-28T09:08:32Z", "url": "https://github.com/opensrp/opensrp-client-core/pull/505", "merged": true, "mergeCommit": {"oid": "e0537fe15d85bc486541e788a9001510c5984e00"}, "closed": true, "closedAt": "2020-04-28T12:04:15Z", "author": {"login": "ndegwamartin"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccCYfFgFqTQwMTc0NzA3Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABccCsJ4AFqTQwMTc2NjE1Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzQ3MDcz", "url": "https://github.com/opensrp/opensrp-client-core/pull/505#pullrequestreview-401747073", "createdAt": "2020-04-28T11:34:20Z", "commit": {"oid": "e1b5a52bf2e3b2de65643a850731f30cb65e1abd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTozNDoyMFrOGNPpZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo0MToxMlrOGNP4VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MTAyOQ==", "bodyText": "Nice one \ud83d\udc4d", "url": "https://github.com/opensrp/opensrp-client-core/pull/505#discussion_r416541029", "createdAt": "2020-04-28T11:34:20Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/view/fragment/BaseRegisterFragmentTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package org.smartregister.view.fragment;\n+\n+import android.app.Activity;\n+import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n+import android.text.TextWatcher;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.EditText;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseUnitTest;\n+import org.smartregister.Context;\n+import org.smartregister.R;\n+import org.smartregister.cursoradapter.RecyclerViewPaginatedAdapter;\n+import org.smartregister.view.activity.SecuredNativeSmartRegisterActivity;\n+import org.smartregister.view.contract.BaseRegisterFragmentContract;\n+\n+/**\n+ * Created by ndegwamartin on 2020-04-28.\n+ */\n+public class BaseRegisterFragmentTest extends BaseUnitTest {\n+\n+    private BaseRegisterFragment baseRegisterFragment;\n+\n+    @Mock\n+    private LayoutInflater layoutInflater;\n+\n+    @Mock\n+    private ViewGroup container;\n+\n+    @Mock\n+    private Bundle bundle;\n+\n+    private Activity activity;\n+\n+    @Mock\n+    private EditText searchView;\n+\n+    @Mock\n+    private Context opensrpContext;\n+\n+    @Mock\n+    private TextWatcher textWatcher;\n+\n+    @Mock\n+    private View.OnKeyListener hideKeyboard;\n+\n+    @Mock\n+    private View searchCancelView;\n+\n+    @Mock\n+    protected BaseRegisterFragmentContract.Presenter presenter;\n+\n+    @Mock\n+    public RecyclerViewPaginatedAdapter clientAdapter;\n+\n+    @Captor\n+    private ArgumentCaptor<Boolean> qrCodeArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> openSRPIdArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        MockitoAnnotations.initMocks(this);\n+        baseRegisterFragment = Mockito.mock(BaseRegisterFragment.class, Mockito.CALLS_REAL_METHODS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1b5a52bf2e3b2de65643a850731f30cb65e1abd"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0MjMzNg==", "bodyText": "Create an issue to fix this test & track it", "url": "https://github.com/opensrp/opensrp-client-core/pull/505#discussion_r416542336", "createdAt": "2020-04-28T11:36:39Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/view/fragment/BaseRegisterFragmentTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package org.smartregister.view.fragment;\n+\n+import android.app.Activity;\n+import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n+import android.text.TextWatcher;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.EditText;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseUnitTest;\n+import org.smartregister.Context;\n+import org.smartregister.R;\n+import org.smartregister.cursoradapter.RecyclerViewPaginatedAdapter;\n+import org.smartregister.view.activity.SecuredNativeSmartRegisterActivity;\n+import org.smartregister.view.contract.BaseRegisterFragmentContract;\n+\n+/**\n+ * Created by ndegwamartin on 2020-04-28.\n+ */\n+public class BaseRegisterFragmentTest extends BaseUnitTest {\n+\n+    private BaseRegisterFragment baseRegisterFragment;\n+\n+    @Mock\n+    private LayoutInflater layoutInflater;\n+\n+    @Mock\n+    private ViewGroup container;\n+\n+    @Mock\n+    private Bundle bundle;\n+\n+    private Activity activity;\n+\n+    @Mock\n+    private EditText searchView;\n+\n+    @Mock\n+    private Context opensrpContext;\n+\n+    @Mock\n+    private TextWatcher textWatcher;\n+\n+    @Mock\n+    private View.OnKeyListener hideKeyboard;\n+\n+    @Mock\n+    private View searchCancelView;\n+\n+    @Mock\n+    protected BaseRegisterFragmentContract.Presenter presenter;\n+\n+    @Mock\n+    public RecyclerViewPaginatedAdapter clientAdapter;\n+\n+    @Captor\n+    private ArgumentCaptor<Boolean> qrCodeArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> openSRPIdArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        MockitoAnnotations.initMocks(this);\n+        baseRegisterFragment = Mockito.mock(BaseRegisterFragment.class, Mockito.CALLS_REAL_METHODS);\n+        ReflectionHelpers.setField(baseRegisterFragment, \"presenter\", presenter);\n+        ReflectionHelpers.setField(baseRegisterFragment, \"clientAdapter\", clientAdapter);\n+\n+        activity = Robolectric.buildActivity(AppCompatActivity.class).get();\n+    }\n+\n+    @Test\n+    public void assertFragmentInstantiatesCorrectly() {\n+\n+        Assert.assertNotNull(baseRegisterFragment);\n+    }\n+\n+    @Test\n+    public void assertGetNavBarOptionsProviderNotNull() {\n+        SecuredNativeSmartRegisterActivity.NavBarOptionsProvider provider = baseRegisterFragment.getNavBarOptionsProvider();\n+        Assert.assertNotNull(provider);\n+    }\n+\n+    @Test\n+    public void assertGetNavBarOptionsProviderReturnsCorrectValueFormSearchHint() {\n+        SecuredNativeSmartRegisterActivity.NavBarOptionsProvider provider = baseRegisterFragment.getNavBarOptionsProvider();\n+\n+        Mockito.doReturn(opensrpContext).when(baseRegisterFragment).context();\n+        Mockito.doReturn(RuntimeEnvironment.application.getResources().getString(R.string.search_hint)).when(opensrpContext).getStringResource(R.string.search_hint);\n+\n+        String hint = RuntimeEnvironment.application.getResources().getString(R.string.search_hint);\n+        Assert.assertEquals(hint, provider.searchHint());\n+    }\n+\n+    @Test\n+    @Ignore", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1b5a52bf2e3b2de65643a850731f30cb65e1abd"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU0NDg1Mw==", "bodyText": "Verify the boolean passed in the filter method as the last param", "url": "https://github.com/opensrp/opensrp-client-core/pull/505#discussion_r416544853", "createdAt": "2020-04-28T11:41:12Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/view/fragment/BaseRegisterFragmentTest.java", "diffHunk": "@@ -0,0 +1,208 @@\n+package org.smartregister.view.fragment;\n+\n+import android.app.Activity;\n+import android.os.Bundle;\n+import android.support.v7.app.AppCompatActivity;\n+import android.text.TextWatcher;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.EditText;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.ArgumentMatchers;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.robolectric.Robolectric;\n+import org.robolectric.RuntimeEnvironment;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseUnitTest;\n+import org.smartregister.Context;\n+import org.smartregister.R;\n+import org.smartregister.cursoradapter.RecyclerViewPaginatedAdapter;\n+import org.smartregister.view.activity.SecuredNativeSmartRegisterActivity;\n+import org.smartregister.view.contract.BaseRegisterFragmentContract;\n+\n+/**\n+ * Created by ndegwamartin on 2020-04-28.\n+ */\n+public class BaseRegisterFragmentTest extends BaseUnitTest {\n+\n+    private BaseRegisterFragment baseRegisterFragment;\n+\n+    @Mock\n+    private LayoutInflater layoutInflater;\n+\n+    @Mock\n+    private ViewGroup container;\n+\n+    @Mock\n+    private Bundle bundle;\n+\n+    private Activity activity;\n+\n+    @Mock\n+    private EditText searchView;\n+\n+    @Mock\n+    private Context opensrpContext;\n+\n+    @Mock\n+    private TextWatcher textWatcher;\n+\n+    @Mock\n+    private View.OnKeyListener hideKeyboard;\n+\n+    @Mock\n+    private View searchCancelView;\n+\n+    @Mock\n+    protected BaseRegisterFragmentContract.Presenter presenter;\n+\n+    @Mock\n+    public RecyclerViewPaginatedAdapter clientAdapter;\n+\n+    @Captor\n+    private ArgumentCaptor<Boolean> qrCodeArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> openSRPIdArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptor;\n+\n+    @Before\n+    public void setUp() {\n+\n+        MockitoAnnotations.initMocks(this);\n+        baseRegisterFragment = Mockito.mock(BaseRegisterFragment.class, Mockito.CALLS_REAL_METHODS);\n+        ReflectionHelpers.setField(baseRegisterFragment, \"presenter\", presenter);\n+        ReflectionHelpers.setField(baseRegisterFragment, \"clientAdapter\", clientAdapter);\n+\n+        activity = Robolectric.buildActivity(AppCompatActivity.class).get();\n+    }\n+\n+    @Test\n+    public void assertFragmentInstantiatesCorrectly() {\n+\n+        Assert.assertNotNull(baseRegisterFragment);\n+    }\n+\n+    @Test\n+    public void assertGetNavBarOptionsProviderNotNull() {\n+        SecuredNativeSmartRegisterActivity.NavBarOptionsProvider provider = baseRegisterFragment.getNavBarOptionsProvider();\n+        Assert.assertNotNull(provider);\n+    }\n+\n+    @Test\n+    public void assertGetNavBarOptionsProviderReturnsCorrectValueFormSearchHint() {\n+        SecuredNativeSmartRegisterActivity.NavBarOptionsProvider provider = baseRegisterFragment.getNavBarOptionsProvider();\n+\n+        Mockito.doReturn(opensrpContext).when(baseRegisterFragment).context();\n+        Mockito.doReturn(RuntimeEnvironment.application.getResources().getString(R.string.search_hint)).when(opensrpContext).getStringResource(R.string.search_hint);\n+\n+        String hint = RuntimeEnvironment.application.getResources().getString(R.string.search_hint);\n+        Assert.assertEquals(hint, provider.searchHint());\n+    }\n+\n+    @Test\n+    @Ignore\n+    public void onCreateView() {\n+\n+        View parentLayout = LayoutInflater.from(RuntimeEnvironment.application.getApplicationContext()).inflate(R.layout.fragment_base_register, null, false);\n+        Mockito.doReturn(parentLayout).when(layoutInflater).inflate(R.layout.fragment_base_register, container, false);\n+        Mockito.doReturn(activity).when(baseRegisterFragment).getActivity();\n+\n+        baseRegisterFragment.onCreateView(layoutInflater, container, bundle);\n+    }\n+\n+    @Test\n+    public void assertGetLayoutReturnsCorrectLayout() {\n+\n+        Assert.assertEquals(R.layout.fragment_base_register, baseRegisterFragment.getLayout());\n+    }\n+\n+    @Test\n+    public void assertUpdateSearchViewAddsCorrectListnersToSearchView() {\n+\n+        Mockito.doReturn(searchView).when(baseRegisterFragment).getSearchView();\n+\n+        ReflectionHelpers.setField(baseRegisterFragment, \"textWatcher\", textWatcher);\n+        ReflectionHelpers.setField(baseRegisterFragment, \"hideKeyboard\", hideKeyboard);\n+\n+        baseRegisterFragment.updateSearchView();\n+\n+        Mockito.verify(searchView).removeTextChangedListener(textWatcher);\n+        Mockito.verify(searchView).addTextChangedListener(textWatcher);\n+        Mockito.verify(searchView).setOnKeyListener(hideKeyboard);\n+    }\n+\n+    @Test\n+    public void assertUpdateSearchBarHintSetsCorrectValue() {\n+\n+        Mockito.doReturn(searchView).when(baseRegisterFragment).getSearchView();\n+\n+        baseRegisterFragment.updateSearchBarHint(TEST_RANDOM_STRING);\n+\n+        Mockito.verify(searchView).setHint(TEST_RANDOM_STRING);\n+    }\n+\n+    @Test\n+    public void setSearchTermInitsCorrectValue() {\n+\n+        Mockito.doReturn(searchView).when(baseRegisterFragment).getSearchView();\n+\n+        baseRegisterFragment.setSearchTerm(TEST_RANDOM_STRING);\n+\n+        Mockito.verify(searchView).setText(TEST_RANDOM_STRING);\n+    }\n+\n+    @Test\n+    public void assertOnQRCodeSucessfullyScannedInvokesFilterWithCorrectParams() {\n+\n+        String OPENSRP_ID = \"8232-372-8L\";\n+        String OPENSRP_ID_NO_HYPHENS = \"82323728L\";\n+\n+        baseRegisterFragment = Mockito.spy(baseRegisterFragment);\n+\n+        Mockito.doReturn(searchCancelView).when(baseRegisterFragment).getSearchCancelView();\n+\n+        Mockito.doNothing().when(baseRegisterFragment).filter(ArgumentMatchers.eq(OPENSRP_ID_NO_HYPHENS), ArgumentMatchers.eq(\"\"), ArgumentMatchers.anyString(), ArgumentMatchers.eq(true));\n+\n+        baseRegisterFragment.onQRCodeSucessfullyScanned(OPENSRP_ID);\n+\n+        Mockito.verify(baseRegisterFragment).filter(openSRPIdArgumentCaptor.capture(), stringArgumentCaptor.capture(), stringArgumentCaptor.capture(), qrCodeArgumentCaptor.capture());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1b5a52bf2e3b2de65643a850731f30cb65e1abd"}, "originalPosition": 180}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37f377cd105f85f9981c50b9bcd78ff10c01dbaf", "author": {"user": {"login": "ndegwamartin", "name": "Martin Ndegwa"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/37f377cd105f85f9981c50b9bcd78ff10c01dbaf", "committedDate": "2020-04-28T11:51:55Z", "message": "Add unit tests for BaseRegisterFragment class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3ddf927e266878631d7fcf5d3d76b840ba1e95c", "author": {"user": {"login": "ndegwamartin", "name": "Martin Ndegwa"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/e3ddf927e266878631d7fcf5d3d76b840ba1e95c", "committedDate": "2020-04-28T11:51:55Z", "message": "Unit test fixes\n- Add boolean assertion for qr code param"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2110984dfbf60ded8b16ae5820af7d0593553652", "author": {"user": {"login": "ndegwamartin", "name": "Martin Ndegwa"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/2110984dfbf60ded8b16ae5820af7d0593553652", "committedDate": "2020-04-28T11:50:55Z", "message": "Unit test fixes\n- Add boolean assertion for qr code param"}, "afterCommit": {"oid": "e3ddf927e266878631d7fcf5d3d76b840ba1e95c", "author": {"user": {"login": "ndegwamartin", "name": "Martin Ndegwa"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/e3ddf927e266878631d7fcf5d3d76b840ba1e95c", "committedDate": "2020-04-28T11:51:55Z", "message": "Unit test fixes\n- Add boolean assertion for qr code param"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAxNzY2MTU2", "url": "https://github.com/opensrp/opensrp-client-core/pull/505#pullrequestreview-401766156", "createdAt": "2020-04-28T12:03:59Z", "commit": {"oid": "e3ddf927e266878631d7fcf5d3d76b840ba1e95c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2554, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}