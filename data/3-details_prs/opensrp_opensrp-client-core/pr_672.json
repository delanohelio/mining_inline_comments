{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTUzMzgy", "number": 672, "title": "TT: recycler view adapter unit tests", "bodyText": "", "createdAt": "2020-10-27T07:56:23Z", "url": "https://github.com/opensrp/opensrp-client-core/pull/672", "merged": true, "mergeCommit": {"oid": "490fc3d9702b916e954f9b211944e0634bc945af"}, "closed": true, "closedAt": "2020-10-30T11:59:18Z", "author": {"login": "githengi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWkBJKAH2gAyNTEwNTUzMzgyOjNjYzcwOGM5ODk1MTI2ZTUxN2U0Mzc1MWY5Y2Q0ODVjNmYyZWE4ZWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXi_bogFqTUyMDQ4MDMyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3cc708c9895126e517e43751f9cd485c6f2ea8ea", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/3cc708c9895126e517e43751f9cd485c6f2ea8ea", "committedDate": "2020-10-27T07:41:24Z", "message": "Add recylerview adapter tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9acab67d040bcc52cec7d5bc0920b3658d2753b8", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/9acab67d040bcc52cec7d5bc0920b3658d2753b8", "committedDate": "2020-10-27T07:49:27Z", "message": "Unit test getItemId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d2a5409f9223a3382bfb59d3aa25b1d5e68488a9", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/d2a5409f9223a3382bfb59d3aa25b1d5e68488a9", "committedDate": "2020-10-27T08:23:25Z", "message": "Unit test other methods on recyclerview adapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5c38e6d58b01a4536dcce6e49de31dd3ab747c9", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/a5c38e6d58b01a4536dcce6e49de31dd3ab747c9", "committedDate": "2020-10-27T08:41:37Z", "message": "unit test dataset observer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/9c4d4ac8568457c48458b3ba702f9fabbbf6ead7", "committedDate": "2020-10-27T08:42:37Z", "message": "CI check: document empty method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzgwMTEz", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#pullrequestreview-518380113", "createdAt": "2020-10-28T07:25:20Z", "commit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyMFrOHpc4MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyMFrOHpc4MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjgwMA==", "bodyText": "Can this be simplified to use assertTrue? Also, how comes this remains true yet you set it to false above?", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#discussion_r513226800", "createdAt": "2020-10-28T07:25:20Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.smartregister.cursoradapter;\n+\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import net.sqlcipher.Cursor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.cursoradapter.RecyclerViewCursorAdapter.NotifyingDataSetObserver;\n+import org.smartregister.shadows.RecyclerViewCursorAdapterShadow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 10/27/20.\n+ */\n+public class RecyclerViewCursorAdapterTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private RecyclerViewCursorAdapterShadow recyclerViewCursorAdapter;\n+\n+    @Mock\n+    private Cursor cursor;\n+\n+    @Mock\n+    private RecyclerView.ViewHolder viewHolder;\n+\n+    @Before\n+    public void setUp() {\n+        when(cursor.getColumnIndex(\"_id\")).thenReturn(0);\n+    }\n+\n+    @Test\n+    public void testGetCursorShouldReturnCursor() {\n+        assertEquals(cursor, recyclerViewCursorAdapter.getCursor());\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnCountFromCursor() {\n+        when(cursor.getCount()).thenReturn(2);\n+        assertEquals(3, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnZero() {\n+        ReflectionHelpers.setField(recyclerViewCursorAdapter, \"mDataValid\", false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor, never()).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReadFromCursor() {\n+        when(cursor.moveToPosition(12)).thenReturn(true);\n+        when(cursor.getLong(0)).thenReturn(200L);\n+        assertEquals(200, recyclerViewCursorAdapter.getItemId(12));\n+        verify(cursor).getLong(0);\n+        verify(cursor).moveToPosition(12);\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReturnZeroIfCursorIsBlank() {\n+        when(cursor.moveToPosition(1)).thenReturn(false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemId(1));\n+        verify(cursor).moveToPosition(1);\n+        verify(cursor, never()).getLong(anyInt());\n+    }\n+\n+    @Test\n+    public void testSetHasStableIdsShouldPassTrueToSuper() {\n+        recyclerViewCursorAdapter.setHasStableIds(false);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MzgwMTcy", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#pullrequestreview-518380172", "createdAt": "2020-10-28T07:25:26Z", "commit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyNlrOHpc4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyNToyNlrOHpc4UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNjgzMg==", "bodyText": "Can this be simplified to use assertTrue?", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#discussion_r513226832", "createdAt": "2020-10-28T07:25:26Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/cursoradapter/RecyclerViewCursorAdapterTest.java", "diffHunk": "@@ -0,0 +1,162 @@\n+package org.smartregister.cursoradapter;\n+\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import net.sqlcipher.Cursor;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.robolectric.util.ReflectionHelpers;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.cursoradapter.RecyclerViewCursorAdapter.NotifyingDataSetObserver;\n+import org.smartregister.shadows.RecyclerViewCursorAdapterShadow;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.spy;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 10/27/20.\n+ */\n+public class RecyclerViewCursorAdapterTest extends BaseRobolectricUnitTest {\n+\n+    @InjectMocks\n+    private RecyclerViewCursorAdapterShadow recyclerViewCursorAdapter;\n+\n+    @Mock\n+    private Cursor cursor;\n+\n+    @Mock\n+    private RecyclerView.ViewHolder viewHolder;\n+\n+    @Before\n+    public void setUp() {\n+        when(cursor.getColumnIndex(\"_id\")).thenReturn(0);\n+    }\n+\n+    @Test\n+    public void testGetCursorShouldReturnCursor() {\n+        assertEquals(cursor, recyclerViewCursorAdapter.getCursor());\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnCountFromCursor() {\n+        when(cursor.getCount()).thenReturn(2);\n+        assertEquals(3, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemCountShouldReturnZero() {\n+        ReflectionHelpers.setField(recyclerViewCursorAdapter, \"mDataValid\", false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemCount());\n+        verify(cursor, never()).getCount();\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReadFromCursor() {\n+        when(cursor.moveToPosition(12)).thenReturn(true);\n+        when(cursor.getLong(0)).thenReturn(200L);\n+        assertEquals(200, recyclerViewCursorAdapter.getItemId(12));\n+        verify(cursor).getLong(0);\n+        verify(cursor).moveToPosition(12);\n+    }\n+\n+    @Test\n+    public void testGetItemIdShouldReturnZeroIfCursorIsBlank() {\n+        when(cursor.moveToPosition(1)).thenReturn(false);\n+        assertEquals(0, recyclerViewCursorAdapter.getItemId(1));\n+        verify(cursor).moveToPosition(1);\n+        verify(cursor, never()).getLong(anyInt());\n+    }\n+\n+    @Test\n+    public void testSetHasStableIdsShouldPassTrueToSuper() {\n+        recyclerViewCursorAdapter.setHasStableIds(false);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));\n+\n+        recyclerViewCursorAdapter.setHasStableIds(true);\n+        assertEquals(true, ReflectionHelpers.getField(recyclerViewCursorAdapter, \"mHasStableIds\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4d4ac8568457c48458b3ba702f9fabbbf6ead7"}, "originalPosition": 89}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0ccf558b91c93b9816c035854827393b8c48a23", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/b0ccf558b91c93b9816c035854827393b8c48a23", "committedDate": "2020-10-28T07:34:46Z", "message": "Merge branch 'master' into tt-sg-recycler-view-tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59c6139ea4f3c52fff79b390975fe27d43d1e0b1", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/59c6139ea4f3c52fff79b390975fe27d43d1e0b1", "committedDate": "2020-10-28T07:36:03Z", "message": "Code cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cade8fc77d453d3a93da0c0aded1f0d904999ed", "author": {"user": {"login": "vincent-karuri", "name": null}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/7cade8fc77d453d3a93da0c0aded1f0d904999ed", "committedDate": "2020-10-30T09:02:55Z", "message": "Merge branch 'master' into tt-sg-recycler-view-tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNDgwMzI5", "url": "https://github.com/opensrp/opensrp-client-core/pull/672#pullrequestreview-520480329", "createdAt": "2020-10-30T09:03:33Z", "commit": {"oid": "7cade8fc77d453d3a93da0c0aded1f0d904999ed"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2500, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}