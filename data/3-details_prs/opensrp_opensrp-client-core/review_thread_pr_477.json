{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMTIxMjU1", "number": 477, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1Nzo0NlrODxklHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMDowMFrODxkosQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA2MTQwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/util/JsonFormUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQwOTo1Nzo0NlrOGFHNGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo1MjoxNlrOGIMdHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNDEwNw==", "bodyText": "This should be checked at options level and not at the checkbox level. Usually the options are mapped to concepts", "url": "https://github.com/opensrp/opensrp-client-core/pull/477#discussion_r408014107", "createdAt": "2020-04-14T09:57:46Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/util/JsonFormUtils.java", "diffHunk": "@@ -408,39 +404,40 @@ private static JSONObject getCheckBoxJsonObjects(Event event, JSONObject parentO\n \n     public static void addObservation(Event e, JSONObject jsonObject) {\n         String value = getString(jsonObject, VALUE);\n+        if (StringUtils.isBlank(value)) { return; }\n+\n         String type = getString(jsonObject, AllConstants.TYPE);\n-        String entity = CONCEPT;\n-        boolean combineCheckboxOptionValues = jsonObject.optBoolean(COMBINE_CHECKBOX_OPTION_VALUES);\n-        if (StringUtils.isNotBlank(value)) {\n-            if (AllConstants.CHECK_BOX.equals(type)) {\n-                try {\n-                    List<Object> vall = new ArrayList<>();\n-                    if (jsonObject.has(AllConstants.OPTIONS)) {\n-                        JSONArray conceptsOptions = jsonObject.getJSONArray(AllConstants.OPTIONS);\n-                        for (int i = 0; i < conceptsOptions.length(); i++) {\n-                            JSONObject option = conceptsOptions.getJSONObject(i);\n-                            boolean optionValue = option.optBoolean(VALUE);\n-                            if (optionValue) {\n-                                option.put(AllConstants.TYPE, type);\n-                                option.put(AllConstants.PARENT_ENTITY_ID, jsonObject.getString(OPENMRS_ENTITY_ID));\n-                                option.put(KEY, jsonObject.getString(KEY));\n-                                if (combineCheckboxOptionValues) {\n-                                    vall.add(option.optString(AllConstants.TEXT));\n-                                } else { // For options with concepts create an observation for each\n-                                    createObservation(e, option, String.valueOf(option.getBoolean(VALUE)), entity);\n-                                }\n+        String entity =  getString(jsonObject, OPENMRS_ENTITY);;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed1f080ab099bc25e31ae207f7c63e1ddc8dba36"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0NTg1NA==", "bodyText": "Done.", "url": "https://github.com/opensrp/opensrp-client-core/pull/477#discussion_r411245854", "createdAt": "2020-04-20T09:52:16Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/main/java/org/smartregister/util/JsonFormUtils.java", "diffHunk": "@@ -408,39 +404,40 @@ private static JSONObject getCheckBoxJsonObjects(Event event, JSONObject parentO\n \n     public static void addObservation(Event e, JSONObject jsonObject) {\n         String value = getString(jsonObject, VALUE);\n+        if (StringUtils.isBlank(value)) { return; }\n+\n         String type = getString(jsonObject, AllConstants.TYPE);\n-        String entity = CONCEPT;\n-        boolean combineCheckboxOptionValues = jsonObject.optBoolean(COMBINE_CHECKBOX_OPTION_VALUES);\n-        if (StringUtils.isNotBlank(value)) {\n-            if (AllConstants.CHECK_BOX.equals(type)) {\n-                try {\n-                    List<Object> vall = new ArrayList<>();\n-                    if (jsonObject.has(AllConstants.OPTIONS)) {\n-                        JSONArray conceptsOptions = jsonObject.getJSONArray(AllConstants.OPTIONS);\n-                        for (int i = 0; i < conceptsOptions.length(); i++) {\n-                            JSONObject option = conceptsOptions.getJSONObject(i);\n-                            boolean optionValue = option.optBoolean(VALUE);\n-                            if (optionValue) {\n-                                option.put(AllConstants.TYPE, type);\n-                                option.put(AllConstants.PARENT_ENTITY_ID, jsonObject.getString(OPENMRS_ENTITY_ID));\n-                                option.put(KEY, jsonObject.getString(KEY));\n-                                if (combineCheckboxOptionValues) {\n-                                    vall.add(option.optString(AllConstants.TEXT));\n-                                } else { // For options with concepts create an observation for each\n-                                    createObservation(e, option, String.valueOf(option.getBoolean(VALUE)), entity);\n-                                }\n+        String entity =  getString(jsonObject, OPENMRS_ENTITY);;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNDEwNw=="}, "originalCommit": {"oid": "ed1f080ab099bc25e31ae207f7c63e1ddc8dba36"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzMzA3MDU3OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/util/JsonFormUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMDowMDowMFrOGFHSvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTo0NzozM1rOGIMRjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTU0OA==", "bodyText": "I think that this should be mutually exclusive. Either save the list of checked options in one obs, or an obs for each selection, however not both", "url": "https://github.com/opensrp/opensrp-client-core/pull/477#discussion_r408015548", "createdAt": "2020-04-14T10:00:00Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/util/JsonFormUtils.java", "diffHunk": "@@ -408,39 +404,40 @@ private static JSONObject getCheckBoxJsonObjects(Event event, JSONObject parentO\n \n     public static void addObservation(Event e, JSONObject jsonObject) {\n         String value = getString(jsonObject, VALUE);\n+        if (StringUtils.isBlank(value)) { return; }\n+\n         String type = getString(jsonObject, AllConstants.TYPE);\n-        String entity = CONCEPT;\n-        boolean combineCheckboxOptionValues = jsonObject.optBoolean(COMBINE_CHECKBOX_OPTION_VALUES);\n-        if (StringUtils.isNotBlank(value)) {\n-            if (AllConstants.CHECK_BOX.equals(type)) {\n-                try {\n-                    List<Object> vall = new ArrayList<>();\n-                    if (jsonObject.has(AllConstants.OPTIONS)) {\n-                        JSONArray conceptsOptions = jsonObject.getJSONArray(AllConstants.OPTIONS);\n-                        for (int i = 0; i < conceptsOptions.length(); i++) {\n-                            JSONObject option = conceptsOptions.getJSONObject(i);\n-                            boolean optionValue = option.optBoolean(VALUE);\n-                            if (optionValue) {\n-                                option.put(AllConstants.TYPE, type);\n-                                option.put(AllConstants.PARENT_ENTITY_ID, jsonObject.getString(OPENMRS_ENTITY_ID));\n-                                option.put(KEY, jsonObject.getString(KEY));\n-                                if (combineCheckboxOptionValues) {\n-                                    vall.add(option.optString(AllConstants.TEXT));\n-                                } else { // For options with concepts create an observation for each\n-                                    createObservation(e, option, String.valueOf(option.getBoolean(VALUE)), entity);\n-                                }\n+        String entity =  getString(jsonObject, OPENMRS_ENTITY);;\n+        if (AllConstants.CHECK_BOX.equals(type)) {\n+            try {\n+                List<Object> optionValues = new ArrayList<>();\n+                if (jsonObject.has(AllConstants.OPTIONS)) {\n+                    JSONArray options = jsonObject.getJSONArray(AllConstants.OPTIONS);\n+                    for (int i = 0; i < options.length(); i++) {\n+                        JSONObject option = options.getJSONObject(i);\n+                        boolean optionValue = option.optBoolean(VALUE);\n+                        if (optionValue) {\n+                            option.put(AllConstants.TYPE, type);\n+                            option.put(AllConstants.PARENT_ENTITY_ID, jsonObject.getString(OPENMRS_ENTITY_ID));\n+                            option.put(KEY, jsonObject.getString(KEY));\n+                            if (CONCEPT.equals(entity)) {\n+                                // For options with concepts create an observation for each\n+                                createObservation(e, option, String.valueOf(option.getBoolean(VALUE)), entity);\n+                            } else {\n+                                optionValues.add(option.optString(AllConstants.TEXT));\n                             }\n                         }\n-                        if (combineCheckboxOptionValues) { // For options without concepts combine the values into one observation\n-                            createObservation(e, jsonObject, vall);\n-                        }\n                     }\n-                } catch (JSONException e1) {\n-                    Timber.e(e1);\n+                    if (!optionValues.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed1f080ab099bc25e31ae207f7c63e1ddc8dba36"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTI0Mjg5Mg==", "bodyText": "That is what is happening currently (it's mutually exclusive).\nHowever, for assured backward compatibility, it may actually make sense to have both.", "url": "https://github.com/opensrp/opensrp-client-core/pull/477#discussion_r411242892", "createdAt": "2020-04-20T09:47:33Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/main/java/org/smartregister/util/JsonFormUtils.java", "diffHunk": "@@ -408,39 +404,40 @@ private static JSONObject getCheckBoxJsonObjects(Event event, JSONObject parentO\n \n     public static void addObservation(Event e, JSONObject jsonObject) {\n         String value = getString(jsonObject, VALUE);\n+        if (StringUtils.isBlank(value)) { return; }\n+\n         String type = getString(jsonObject, AllConstants.TYPE);\n-        String entity = CONCEPT;\n-        boolean combineCheckboxOptionValues = jsonObject.optBoolean(COMBINE_CHECKBOX_OPTION_VALUES);\n-        if (StringUtils.isNotBlank(value)) {\n-            if (AllConstants.CHECK_BOX.equals(type)) {\n-                try {\n-                    List<Object> vall = new ArrayList<>();\n-                    if (jsonObject.has(AllConstants.OPTIONS)) {\n-                        JSONArray conceptsOptions = jsonObject.getJSONArray(AllConstants.OPTIONS);\n-                        for (int i = 0; i < conceptsOptions.length(); i++) {\n-                            JSONObject option = conceptsOptions.getJSONObject(i);\n-                            boolean optionValue = option.optBoolean(VALUE);\n-                            if (optionValue) {\n-                                option.put(AllConstants.TYPE, type);\n-                                option.put(AllConstants.PARENT_ENTITY_ID, jsonObject.getString(OPENMRS_ENTITY_ID));\n-                                option.put(KEY, jsonObject.getString(KEY));\n-                                if (combineCheckboxOptionValues) {\n-                                    vall.add(option.optString(AllConstants.TEXT));\n-                                } else { // For options with concepts create an observation for each\n-                                    createObservation(e, option, String.valueOf(option.getBoolean(VALUE)), entity);\n-                                }\n+        String entity =  getString(jsonObject, OPENMRS_ENTITY);;\n+        if (AllConstants.CHECK_BOX.equals(type)) {\n+            try {\n+                List<Object> optionValues = new ArrayList<>();\n+                if (jsonObject.has(AllConstants.OPTIONS)) {\n+                    JSONArray options = jsonObject.getJSONArray(AllConstants.OPTIONS);\n+                    for (int i = 0; i < options.length(); i++) {\n+                        JSONObject option = options.getJSONObject(i);\n+                        boolean optionValue = option.optBoolean(VALUE);\n+                        if (optionValue) {\n+                            option.put(AllConstants.TYPE, type);\n+                            option.put(AllConstants.PARENT_ENTITY_ID, jsonObject.getString(OPENMRS_ENTITY_ID));\n+                            option.put(KEY, jsonObject.getString(KEY));\n+                            if (CONCEPT.equals(entity)) {\n+                                // For options with concepts create an observation for each\n+                                createObservation(e, option, String.valueOf(option.getBoolean(VALUE)), entity);\n+                            } else {\n+                                optionValues.add(option.optString(AllConstants.TEXT));\n                             }\n                         }\n-                        if (combineCheckboxOptionValues) { // For options without concepts combine the values into one observation\n-                            createObservation(e, jsonObject, vall);\n-                        }\n                     }\n-                } catch (JSONException e1) {\n-                    Timber.e(e1);\n+                    if (!optionValues.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODAxNTU0OA=="}, "originalCommit": {"oid": "ed1f080ab099bc25e31ae207f7c63e1ddc8dba36"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2143, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}