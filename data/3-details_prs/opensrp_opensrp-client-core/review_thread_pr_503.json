{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5OTQ5MTI4", "number": 503, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjoxMVrOD3KEkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjoxMVrOD3KEkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5MTYzMjgwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/service/FormSubmissionServiceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjoxMVrOGNQQDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQxMTo1MjoxMVrOGNQQDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjU1MDkyNg==", "bodyText": "Verify that false is returned & remove the unnecessary mocking on line 143", "url": "https://github.com/opensrp/opensrp-client-core/pull/503#discussion_r416550926", "createdAt": "2020-04-28T11:52:11Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/service/FormSubmissionServiceTest.java", "diffHunk": "@@ -96,4 +114,71 @@ public void shouldNotDelegateProcessingToZiggyServiceForProcessedSubmissions() t\n         inOrder.verify(formDataRepository).updateServerVersion(\"instance id 2\", \"1\");\n         inOrder.verify(allSettings).savePreviousFormSyncIndex(\"1\");\n     }\n+\n+    @Test\n+    public void testConstructor() {\n+        service = null;\n+        assertNull(service);\n+        service = new FormSubmissionService(ziggyService, formDataRepository, allSettings, allCommonsRepositoryMap);\n+        assertNotNull(service);\n+        assertNotNull(Whitebox.getInternalState(service, \"ziggyService\"));\n+        assertNotNull(Whitebox.getInternalState(service, \"formDataRepository\"));\n+        assertNotNull(Whitebox.getInternalState(service, \"allSettings\"));\n+        assertNotNull(Whitebox.getInternalState(service, \"allCommonsRepositoryMap\"));\n+\n+    }\n+\n+    @Test\n+    public void testPrivateUpdateFTSSearch() throws Exception {\n+        service = new FormSubmissionService(ziggyService, formDataRepository, allSettings, allCommonsRepositoryMap);\n+        when(allCommonsRepositoryMap.isEmpty()).thenReturn(false);\n+        when(allCommonsRepositoryMap.get(\"bindtype_1\")).thenReturn(allCommonsRepository);\n+        Whitebox.invokeMethod(service, \"updateFTSsearch\", \"bindtype_1\", \"entity_1\");\n+        verify(allCommonsRepository).updateSearch(\"entity_1\");\n+    }\n+\n+    @Test\n+    public void testPrivateUpdateFTSSearchWithEmptyAllC0mmonsrepositoryMap() throws Exception {\n+        when(allCommonsRepositoryMap.isEmpty()).thenReturn(true);\n+        when(allCommonsRepositoryMap.get(\"bindtype_1\")).thenReturn(allCommonsRepository);\n+        Whitebox.invokeMethod(service, \"updateFTSsearch\", \"bindtype_1\", \"entity_1\");\n+        verify(allCommonsRepository, times(0)).updateSearch(\"entity_1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d02779e6c92e79cbac027f02906209ba8a61c343"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2155, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}