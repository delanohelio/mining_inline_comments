{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NzA0NDgx", "number": 520, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoxODoxMFrOD7pT6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoxODoxMFrOD7pT6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODY5NDE3OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/util/FileUtilitiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoxODoxMFrOGUGHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMzoxODoxMFrOGUGHDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzcyNDgxMw==", "bodyText": "There is no check that this is written", "url": "https://github.com/opensrp/opensrp-client-core/pull/520#discussion_r423724813", "createdAt": "2020-05-12T13:18:10Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/test/java/org/smartregister/util/FileUtilitiesTest.java", "diffHunk": "@@ -0,0 +1,62 @@\n+package org.smartregister.util;\n+\n+import android.os.Environment;\n+\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.TemporaryFolder;\n+import org.junit.runner.RunWith;\n+import org.mockito.Mock;\n+import org.powermock.api.mockito.PowerMockito;\n+import org.powermock.core.classloader.annotations.PrepareForTest;\n+import org.powermock.modules.junit4.PowerMockRunner;\n+\n+import java.io.BufferedWriter;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import static org.mockito.Mockito.when;\n+@RunWith(PowerMockRunner.class)\n+@PrepareForTest({Environment.class})\n+public class FileUtilitiesTest {\n+\n+    private String FILE_NAME = \"newFile.ext\";\n+\n+    @Rule\n+    public TemporaryFolder storageDirectory = new TemporaryFolder();\n+    private File existentDirectory;\n+\n+    public FileUtilitiesTest() throws IOException {\n+    }\n+\n+    @Before\n+    public void setup() {\n+        existentDirectory = storageDirectory.getRoot();\n+        PowerMockito.mockStatic(Environment.class);\n+    }\n+\n+    @Mock\n+    private BufferedWriter mockWriter;\n+\n+    @Test\n+    public void initIndexFile_validFile_addsEmptyraces() throws Exception {\n+        String testData = \"string to write\";\n+        when(Environment.getExternalStorageDirectory()).thenReturn(existentDirectory);\n+        PowerMockito.whenNew(BufferedWriter.class).withAnyArguments().thenReturn(mockWriter);\n+        FileUtilities fileUtils = new FileUtilities();\n+        try\n+        {\n+            fileUtils.write(FILE_NAME, testData);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fcfcdaaac2043c1ccf529e0c0a6aba1704e69b1"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2164, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}