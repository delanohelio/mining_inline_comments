{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1ODg5OTky", "number": 515, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoxMFrOEOutLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjo0MDoxM1rOEev17g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODgwNzQ5OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/account/AccountAuthenticator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoxMFrOGyCuMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNTowODoxMFrOGyCuMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEyNjU3OQ==", "bodyText": "Is this a refresh token, can the the variable name be changed if so", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r455126579", "createdAt": "2020-07-15T15:08:10Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/account/AccountAuthenticator.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package org.smartregister.account;\n+\n+import android.accounts.AbstractAccountAuthenticator;\n+import android.accounts.Account;\n+import android.accounts.AccountAuthenticatorResponse;\n+import android.accounts.AccountManager;\n+import android.accounts.NetworkErrorException;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.os.Bundle;\n+import android.text.TextUtils;\n+\n+import org.apache.http.HttpStatus;\n+import org.smartregister.CoreLibrary;\n+\n+import timber.log.Timber;\n+\n+/**\n+ * Created by ndegwamartin on 2020-04-27.\n+ */\n+public class AccountAuthenticator extends AbstractAccountAuthenticator {\n+\n+    private final Context mContext;\n+\n+    public AccountAuthenticator(Context context) {\n+        super(context);\n+\n+        this.mContext = context;\n+    }\n+\n+    @Override\n+    public Bundle addAccount(AccountAuthenticatorResponse response, String accountType, String authTokenType, String[] requiredFeatures, Bundle options) throws NetworkErrorException {\n+\n+        final Intent intent = new Intent(mContext, CoreLibrary.getInstance().getSyncConfiguration().getAuthenticationActivity());\n+        intent.putExtra(AccountHelper.INTENT_KEY.ACCOUNT_TYPE, accountType);\n+        intent.putExtra(AccountHelper.INTENT_KEY.AUTH_TYPE, authTokenType);\n+        intent.putExtra(AccountHelper.INTENT_KEY.IS_NEW_ACCOUNT, true);\n+        intent.putExtra(AccountManager.KEY_ACCOUNT_AUTHENTICATOR_RESPONSE, response);\n+\n+        final Bundle bundle = new Bundle();\n+        bundle.putParcelable(AccountManager.KEY_INTENT, intent);\n+        return bundle;\n+    }\n+\n+    @Override\n+    public Bundle getAuthToken(AccountAuthenticatorResponse response, Account account, String authTokenType, Bundle options) throws NetworkErrorException {\n+\n+        Timber.d(\"getAuthToken\");\n+\n+        AccountManager accountManager = CoreLibrary.getInstance().getAccountManager();\n+\n+        String authToken = accountManager.peekAuthToken(account, authTokenType);\n+        String refreshToken = \"\";\n+        Timber.d(\"peekAuthToken \" + authToken);\n+\n+        if (TextUtils.isEmpty(authToken)) {\n+            final String password = accountManager.getPassword(account);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9617512e14de9013978d4819e802860fda12fd"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODgzOTY0OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/login/task/RemoteLoginTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxNjowNFrOGyDCyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxNjowNFrOGyDCyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMTg1MA==", "bodyText": "Can we change and pass a static error, e.g Error failed during server login instead of the actual message", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r455131850", "createdAt": "2020-07-15T15:16:04Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/login/task/RemoteLoginTask.java", "diffHunk": "@@ -43,37 +59,98 @@ protected void onPreExecute() {\n \n     @Override\n     protected LoginResponse doInBackground(Void... params) {\n-        LoginResponse loginResponse = getOpenSRPContext().userService().isValidRemoteLogin(mUsername, mPassword);\n-        if (loginResponse != null && loginResponse.equals(LoginResponse.SUCCESS) && getOpenSRPContext().userService().getGroupId(mUsername) != null && CoreLibrary.getInstance().getSyncConfiguration().isSyncSettings()) {\n \n+        LoginResponse loginResponse;\n+        try {\n+\n+            AccountConfiguration accountConfiguration = CoreLibrary.getInstance().context().getHttpAgent().fetchOAuthConfiguration();\n+\n+            boolean isKeycloakConfigured = accountConfiguration != null;\n+\n+            if (!isKeycloakConfigured) {\n+                accountConfiguration = new AccountConfiguration();\n+                accountConfiguration.setGrantTypesSupported(Arrays.asList(AccountHelper.OAUTH.GRANT_TYPE.PASSWORD));\n+                accountConfiguration.setTokenEndpoint(CoreLibrary.getInstance().context().configuration().dristhiBaseURL() + AccountHelper.OAUTH.TOKEN_ENDPOINT);\n+                accountConfiguration.setAuthorizationEndpoint(\"\");\n+                accountConfiguration.setIssuerEndpoint(\"\");\n+            }\n+\n+            if (accountConfiguration != null) {\n+\n+                if (!accountConfiguration.getGrantTypesSupported().contains(AccountHelper.OAUTH.GRANT_TYPE.PASSWORD))\n+                    throw new AccountsException(\"OAuth configuration DOES NOT support the Password Grant Type\");\n+\n+                //Persist config resources\n+                SharedPreferences.Editor sharedPrefEditor = CoreLibrary.getInstance().context().allSharedPreferences().getPreferences().edit();\n+\n+                sharedPrefEditor.putString(AccountHelper.CONFIGURATION_CONSTANTS.TOKEN_ENDPOINT_URL, accountConfiguration.getTokenEndpoint());\n+                sharedPrefEditor.putString(AccountHelper.CONFIGURATION_CONSTANTS.AUTHORIZATION_ENDPOINT_URL, accountConfiguration.getAuthorizationEndpoint());\n+                sharedPrefEditor.putString(AccountHelper.CONFIGURATION_CONSTANTS.ISSUER_ENDPOINT_URL, accountConfiguration.getIssuerEndpoint());\n+                sharedPrefEditor.putString(AccountHelper.CONFIGURATION_CONSTANTS.USERINFO_ENDPOINT_URL, accountConfiguration.getUserinfoEndpoint());\n+                sharedPrefEditor.apply();\n+\n+                AccountResponse response = CoreLibrary.getInstance().context().getHttpAgent().oauth2authenticate(mUsername, mPassword, AccountHelper.OAUTH.GRANT_TYPE.PASSWORD, accountConfiguration.getTokenEndpoint());\n+\n+                AccountManager mAccountManager = CoreLibrary.getInstance().getAccountManager();\n+\n+                final Account account = new Account(mUsername, mAccountAuthenticatorXml.getAccountType());\n \n-            publishProgress(R.string.loading_client_settings);\n+                loginResponse = getOpenSRPContext().userService().fetchUserDetails(response.getAccessToken());\n \n-            SyncSettingsServiceHelper syncSettingsServiceHelper = new SyncSettingsServiceHelper(getOpenSRPContext().configuration().dristhiBaseURL(), getOpenSRPContext().getHttpAgent());\n-            syncSettingsServiceHelper.setUsername(mUsername);\n-            syncSettingsServiceHelper.setPassword(mPassword);\n+                if (loginResponse != null && loginResponse.equals(LoginResponse.SUCCESS)) {\n \n-            try {\n-                JSONArray settings = syncSettingsServiceHelper.pullSettingsFromServer(Utils.getFilterValue(loginResponse, CoreLibrary.getInstance().getSyncConfiguration().getSyncFilterParam()));\n+                    Bundle userData = getOpenSRPContext().userService().saveUserGroup(mUsername, mPassword, loginResponse.payload());\n \n-                JSONObject data = new JSONObject();\n-                data.put(AllConstants.PREF_KEY.SETTINGS, settings);\n-                loginResponse.setRawData(data);\n+                    mAccountManager.addAccountExplicitly(account, response.getRefreshToken(), userData);\n+                    mAccountManager.setAuthToken(account, mLoginView.getAuthTokenType(), response.getAccessToken());\n+                    mAccountManager.setPassword(account, response.getRefreshToken());\n+                    mAccountManager.setUserData(account, AccountHelper.INTENT_KEY.ACCOUNT_GROUP_ID, userData.getString(AccountHelper.INTENT_KEY.ACCOUNT_GROUP_ID));\n+                    mAccountManager.setUserData(account, AccountHelper.INTENT_KEY.ACCOUNT_NAME, userData.getString(AccountHelper.INTENT_KEY.ACCOUNT_NAME));\n+                    mAccountManager.setUserData(account, AccountHelper.INTENT_KEY.ACCOUNT_PASSWORD, userData.getString(AccountHelper.INTENT_KEY.ACCOUNT_PASSWORD));\n+                    mAccountManager.setUserData(account, AccountHelper.INTENT_KEY.ACCOUNT_PASSWORD_SALT, userData.getString(AccountHelper.INTENT_KEY.ACCOUNT_PASSWORD_SALT));\n \n-            } catch (JSONException e) {\n-                Timber.e(e);\n+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n+                        mAccountManager.notifyAccountAuthenticated(account);\n+                    }\n+\n+                    if (getOpenSRPContext().userService().getGroupId(mUsername) != null && CoreLibrary.getInstance().getSyncConfiguration().isSyncSettings()) {\n+\n+\n+                        publishProgress(R.string.loading_client_settings);\n+\n+                        SyncSettingsServiceHelper syncSettingsServiceHelper = new SyncSettingsServiceHelper(getOpenSRPContext().configuration().dristhiBaseURL(), getOpenSRPContext().getHttpAgent());\n+\n+                        try {\n+                            JSONArray settings = syncSettingsServiceHelper.pullSettingsFromServer(Utils.getFilterValue(loginResponse, CoreLibrary.getInstance().getSyncConfiguration().getSyncFilterParam()), response.getAccessToken());\n+\n+                            JSONObject prefSettingsData = new JSONObject();\n+                            prefSettingsData.put(AllConstants.PREF_KEY.SETTINGS, settings);\n+                            loginResponse.setRawData(prefSettingsData);\n+\n+                        } catch (JSONException e) {\n+                            Timber.e(e);\n+                        }\n+\n+                    }\n+                }\n+\n+            } else {\n+                throw new AccountsException(\"Could not fetch OAuth Configuration\");\n             }\n \n+        } catch (Exception e) {\n+\n+            loginResponse = CUSTOM_SERVER_RESPONSE.withMessage(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9617512e14de9013978d4819e802860fda12fd"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODg1MDYyOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/security/PasswordHash.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxODoyNFrOGyDJgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxODoyNFrOGyDJgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzMzU3MA==", "bodyText": "We shouldn't be storing password now not sure where this is used", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r455133570", "createdAt": "2020-07-15T15:18:24Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/security/PasswordHash.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package org.smartregister.security;\n+\n+/**\n+ * Created by ndegwamartin on 13/06/2020.\n+ */\n+public class PasswordHash {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9617512e14de9013978d4819e802860fda12fd"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODg1NDAwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/security/SecurityHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxOTowOFrOGyDLsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToxOTowOFrOGyDLsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTEzNDEyOQ==", "bodyText": "We shouldn't be saving the passwords now, so not sure we need these methods", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r455134129", "createdAt": "2020-07-15T15:19:08Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/security/SecurityHelper.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package org.smartregister.security;\n+\n+import android.os.Build;\n+import android.text.Editable;\n+import android.util.Base64;\n+\n+import org.apache.commons.codec.CharEncoding;\n+import org.apache.commons.lang3.StringUtils;\n+\n+import java.nio.ByteBuffer;\n+import java.nio.CharBuffer;\n+import java.nio.charset.CharacterCodingException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.CharsetEncoder;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.SecureRandom;\n+import java.security.spec.InvalidKeySpecException;\n+import java.security.spec.KeySpec;\n+import java.util.Arrays;\n+\n+import javax.crypto.SecretKeyFactory;\n+import javax.crypto.spec.PBEKeySpec;\n+\n+/**\n+ * Created by ndegwamartin on 04/06/2020.\n+ */\n+public class SecurityHelper {\n+\n+    private static final Charset CHARSET = Charset.forName(CharEncoding.UTF_8);\n+    public static final int ITERATION_COUNT = 200048;\n+\n+    /**\n+     * This method ensures that sensitive info can be collected for the edit text in a safer way\n+     */\n+    public static char[] readValue(Editable editable) {\n+\n+        char[] chars = new char[editable.length()];\n+        editable.getChars(0, editable.length(), chars, 0);\n+\n+        editable.clear();\n+\n+        return chars;\n+    }\n+\n+    /**\n+     * This method allows us to overwrite byte array data\n+     *\n+     * @param array character array\n+     */\n+    public static void clearArray(byte[] array) {\n+        if (array != null) {\n+            Arrays.fill(array, (byte) 0);\n+        }\n+    }\n+\n+    /**\n+     * This method allows us to overwrite byte array data thus removing original values from memory\n+     *\n+     * @param array character array\n+     */\n+    public static void clearArray(char[] array) {\n+        if (array != null) {\n+            Arrays.fill(array, '*');\n+        }\n+    }\n+\n+    /**\n+     * This method converts characters in the string buffer to byte array without creating a String object\n+     *\n+     * @param stringBuffer\n+     * @return an array of bytes , a conversion from the string buffer\n+     */\n+\n+    public static byte[] toBytes(StringBuffer stringBuffer) throws CharacterCodingException {\n+\n+        CharsetEncoder encoder = CHARSET.newEncoder();\n+\n+        CharBuffer buffer = CharBuffer.wrap(stringBuffer);\n+\n+        ByteBuffer bytesBuffer = encoder.encode(buffer);\n+\n+        byte[] bytes = bytesBuffer.array();\n+\n+        clearArray(bytesBuffer.array());\n+\n+        clearStringBuffer(stringBuffer);\n+\n+        return bytes;\n+    }\n+\n+    private static void clearStringBuffer(StringBuffer stringBuffer) {\n+        stringBuffer.setLength(0);\n+        stringBuffer.append(\"*\");\n+    }\n+\n+    /**\n+     * This method converts characters in the char array buffer to a byte array\n+     *\n+     * @param chars array\n+     * @return an array of bytes, a conversion from the chars array\n+     */\n+    public static byte[] toBytes(char[] chars) {\n+        CharBuffer charBuffer = CharBuffer.wrap(chars);\n+\n+        ByteBuffer byteBuffer = CHARSET.encode(charBuffer);\n+\n+        byte[] bytes = Arrays.copyOfRange(byteBuffer.array(), byteBuffer.position(), byteBuffer.limit());\n+\n+        clearArray(byteBuffer.array());\n+\n+        return bytes;\n+\n+    }\n+\n+    /**\n+     * This method converts characters in the byte array buffer to a char array\n+     *\n+     * @param bytes array\n+     * @return an array of chars, a conversion from the bytes array\n+     */\n+    public static char[] toChars(byte[] bytes) {\n+\n+        char[] convertedChar = new char[bytes.length];\n+        for (int i = 0; i < bytes.length; i++) {\n+            convertedChar[i] = (char) bytes[i];\n+        }\n+\n+        return convertedChar;\n+    }\n+\n+    /**\n+     * @param password password to hash\n+     * @return Password Hash object containing the bytes of the salt and the hashed password\n+     * @throws NoSuchAlgorithmException when the Android API level doesn't support the specified Algorithm\n+     * @throws InvalidKeySpecException  when the Key used for generation has an invalid configuration\n+     */\n+    public static PasswordHash getPasswordHash(char[] password) throws NoSuchAlgorithmException, InvalidKeySpecException {\n+\n+        byte[] salt = new byte[128];\n+\n+        SecureRandom secureRandom = new SecureRandom();\n+        secureRandom.nextBytes(salt);\n+\n+        return new PasswordHash(salt, hashPassword(password, salt));\n+    }\n+\n+    /**\n+     * @param password password to hash\n+     * @return byte array of the bytes of the salt and the hashed password\n+     */\n+    public static byte[] hashPassword(char[] password, byte[] salt) throws NoSuchAlgorithmException, InvalidKeySpecException {\n+\n+        int keyLength = Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? 256 : 160;\n+\n+        SecretKeyFactory secretKeyFactory = SecretKeyFactory.getInstance(Build.VERSION.SDK_INT >= Build.VERSION_CODES.O ? \"PBKDF2withHmacSHA256\" : \"PBKDF2WithHmacSHA1\");\n+\n+        KeySpec pbKeySpec = new PBEKeySpec(password, salt, ITERATION_COUNT, keyLength);\n+\n+        return secretKeyFactory.generateSecret(pbKeySpec).getEncoded();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9617512e14de9013978d4819e802860fda12fd"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgzODg5Mjc0OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/service/ImageUploadSyncService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNVQxNToyNzowN1rOGyDkGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwOToyMDoxNVrOGzL41g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MDM3OQ==", "bodyText": "You could use Timber string formatting e.g Timber.e(\"Image %s\",path)\"", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r455140379", "createdAt": "2020-07-15T15:27:07Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/service/ImageUploadSyncService.java", "diffHunk": "@@ -40,6 +42,8 @@ protected void onHandleIntent(Intent intent) {\n                                 + AllConstants.PROFILE_IMAGES_UPLOAD_PATH, profileImages.get(i));\n                 if (response.contains(\"success\")) {\n                     imageRepo.close(profileImages.get(i).getImageid());\n+                } else {\n+                    Timber.e(new StringBuilder(\"Image Upload: could NOT upload image ID: \").append(profileImages.get(i).getImageid()).append(\" PATH: \").append(profileImages.get(i).getFilepath()).toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a9617512e14de9013978d4819e802860fda12fd"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMyNTMzNA==", "bodyText": "Fixed", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r456325334", "createdAt": "2020-07-17T09:20:15Z", "author": {"login": "ndegwamartin"}, "path": "opensrp-app/src/main/java/org/smartregister/service/ImageUploadSyncService.java", "diffHunk": "@@ -40,6 +42,8 @@ protected void onHandleIntent(Intent intent) {\n                                 + AllConstants.PROFILE_IMAGES_UPLOAD_PATH, profileImages.get(i));\n                 if (response.contains(\"success\")) {\n                     imageRepo.close(profileImages.get(i).getImageid());\n+                } else {\n+                    Timber.e(new StringBuilder(\"Image Upload: could NOT upload image ID: \").append(profileImages.get(i).getImageid()).append(\" PATH: \").append(profileImages.get(i).getFilepath()).toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTE0MDM3OQ=="}, "originalCommit": {"oid": "0a9617512e14de9013978d4819e802860fda12fd"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODU5MjcwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzoxNDoxOFrOG03UvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzo1ODo0MVrOG05UPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NTU2NQ==", "bodyText": "This is duplicate library definition", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r458085565", "createdAt": "2020-07-21T13:14:18Z", "author": {"login": "githengi"}, "path": "opensrp-app/build.gradle", "diffHunk": "@@ -176,6 +177,7 @@ dependencies {\n         transitive = true\n     }\n \n+    implementation 'org.smartregister:opensrp-plan-evaluator:0.0.19-SNAPSHOT'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a41f749e4d12d2c248d05abe953b06b1bd7b01e"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExODIwNQ==", "bodyText": "Fixed", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r458118205", "createdAt": "2020-07-21T13:58:41Z", "author": {"login": "ndegwamartin"}, "path": "opensrp-app/build.gradle", "diffHunk": "@@ -176,6 +177,7 @@ dependencies {\n         transitive = true\n     }\n \n+    implementation 'org.smartregister:opensrp-plan-evaluator:0.0.19-SNAPSHOT'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODA4NTU2NQ=="}, "originalCommit": {"oid": "1a41f749e4d12d2c248d05abe953b06b1bd7b01e"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NTUzNDIzOnYy", "diffSide": "RIGHT", "path": "opensrp-app/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODowNzo0NFrOHC7w8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwODowNzo0NFrOHC7w8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjgzODM4NQ==", "bodyText": "The libraries have been imported twice", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r472838385", "createdAt": "2020-08-19T08:07:44Z", "author": {"login": "githengi"}, "path": "opensrp-app/build.gradle", "diffHunk": "@@ -205,6 +206,36 @@ dependencies {\n \n     implementation 'org.smartregister:opensrp-client-utils:0.0.2-SNAPSHOT'\n \n+    implementation 'org.smartregister:opensrp-plan-evaluator:0.0.19-SNAPSHOT'\n+    implementation('ch.acra:acra:4.5.0') {\n+        exclude group: 'org.json', module: 'json'\n+    }\n+\n+    implementation 'com.github.ybq:Android-SpinKit:1.2.0'\n+    implementation 'com.mcxiaoke.volley:library:1.0.19'\n+\n+    implementation fileTree(include: ['*.jar'], dir: 'libs')\n+    annotationProcessor fileTree(include: ['butterknife*.jar'], dir: 'libs')\n+\n+    implementation 'com.cloudant:cloudant-http:2.7.0'\n+    implementation 'com.android.support:recyclerview-v7:28.0.0'\n+\n+    implementation('com.android.support:design:28.0.0') {\n+        exclude group: 'com.android.support', module: 'recyclerview-v7'\n+    }\n+\n+    implementation 'com.evernote:android-job:1.2.6'\n+    implementation group: 'commons-validator', name: 'commons-validator', version: '1.6'\n+    implementation 'de.hdodenhof:circleimageview:2.2.0'\n+\n+    implementation('org.smartregister:android-p2p-sync:0.3.6-SNAPSHOT') {\n+        exclude group: 'com.android.support', module: 'support-v4'\n+        exclude group: 'com.android.support', module: 'appcompat-v7'\n+        exclude group: 'android.arch.core', module: 'runtime'\n+    }\n+\n+    implementation 'org.smartregister:opensrp-client-utils:0.0.2-SNAPSHOT'\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e5bd9d59428fa92f1f794cd5d2a9b08520ba9c27"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwNjc2NTkwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/service/HTTPAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjo0MDoxM1rOHKmluQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQwNjo0MDoxM1rOHKmluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDg4MDA1Nw==", "bodyText": "Add the params documentation that were provided before", "url": "https://github.com/opensrp/opensrp-client-core/pull/515#discussion_r480880057", "createdAt": "2020-09-01T06:40:13Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/service/HTTPAgent.java", "diffHunk": "@@ -78,107 +98,154 @@\n \n     private int connectTimeout = 60000;\n     private int readTimeout = 60000;\n+    private Gson gson;\n \n-    public HTTPAgent(Context context, AllSettings settings, AllSharedPreferences\n+    private static final String DETAILS_URL = \"/user-details?anm-id=\";\n+\n+\n+    public HTTPAgent(Context context, AllSharedPreferences\n             allSharedPreferences, DristhiConfiguration configuration) {\n         this.context = context;\n-        this.settings = settings;\n         this.allSharedPreferences = allSharedPreferences;\n         this.configuration = configuration;\n-        gzipCompression= new GZIPCompression();\n+        gson = new Gson();\n+        gzipCompression = new GZIPCompression();\n     }\n \n     /**\n-     * @author  Rodgers Andati\n-     * @since   2019-04-25\n      * This method initializes httpurlconnection\n-     * @param requestURLPath This is the url to be open http connection to.\n-     * @param useBasicAuth This is whether to set up basic authentication or not.\n-     * @return HttpURLConnection This returns the http connection to opensrp server.\n      */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c15dedf9f3d4c97d287c2b8b32bcae10a5125c23"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2162, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}