{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5MjkzMzcw", "number": 629, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozNDo1MlrOEZgzbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozNDo1MlrOEZgzbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTg3MzA5OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/login/presenter/BaseLoginPresenterTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDozNDo1MlrOHCXicQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNjowNjozOFrOHCbmPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDg0OQ==", "bodyText": "Verify that the global layout listeners were added and calculations done as expected. The rest of the tests are \u2714\ufe0f\nAlso update the branch", "url": "https://github.com/opensrp/opensrp-client-core/pull/629#discussion_r472244849", "createdAt": "2020-08-18T14:34:52Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/login/presenter/BaseLoginPresenterTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.smartregister.login.presenter;\n+\n+import android.content.res.Configuration;\n+import android.support.v7.app.AppCompatActivity;\n+import android.view.ViewTreeObserver;\n+import android.widget.RelativeLayout;\n+import android.widget.ScrollView;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.Robolectric;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.R;\n+import org.smartregister.login.model.BaseLoginModel;\n+import org.smartregister.view.activity.BaseLoginActivityTest.BaseLoginActivityImpl;\n+import org.smartregister.view.contract.BaseLoginContract;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static android.preference.PreferenceManager.getDefaultSharedPreferences;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 8/18/20.\n+ */\n+public class BaseLoginPresenterTest extends BaseRobolectricUnitTest {\n+\n+    @Mock(answer = Answers.CALLS_REAL_METHODS)\n+    private BaseLoginPresenter presenter;\n+\n+    @Mock\n+    private BaseLoginContract.View loginView;\n+    @Mock\n+    private BaseLoginContract.Interactor loginInteractor;\n+    @Spy\n+    private BaseLoginContract.Model loginModel = new BaseLoginModel();\n+    @Mock\n+    private ViewTreeObserver.OnGlobalLayoutListener layoutListener;\n+\n+    private AppCompatActivity activity;\n+\n+    @Before\n+    public void setUp() {\n+        presenter.setLoginModel(loginModel);\n+        presenter.setLoginInteractor(loginInteractor);\n+        presenter.setLoginView(new WeakReference<>(loginView));\n+        activity = Robolectric.buildActivity(BaseLoginActivityImpl.class).create().get();\n+        when(loginView.getActivityContext()).thenReturn(activity);\n+    }\n+\n+    @Test\n+    public void testOnDestroyShouldCleanUp() {\n+        presenter.onDestroy(false);\n+        verify(loginInteractor).onDestroy(false);\n+        assertNull(presenter.getLoginView());\n+        assertNull(Whitebox.getInternalState(presenter, \"mLoginInteractor\"));\n+        assertNull(Whitebox.getInternalState(presenter, \"mLoginModel\"));\n+    }\n+\n+    @Test\n+    public void testGetLoginViewShouldReturnView() {\n+        assertEquals(loginView, presenter.getLoginView());\n+    }\n+\n+    @Test\n+    public void testAttemptLoginShouldErrorIfAppIsOutdated() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(false);\n+        presenter.attemptLogin(\"john\", \"doe\");\n+        verify(loginView).showErrorDialog(activity.getString(R.string.outdated_app));\n+        verify(loginView).isAppVersionAllowed();\n+        verify(loginView).getActivityContext();\n+        verifyNoMoreInteractions(loginView);\n+    }\n+\n+\n+    @Test\n+    public void testAttemptLoginShouldNotInvokeLoginAndDisplaysErrors() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(true);\n+        presenter.attemptLogin(\"\", \"\");\n+        verify(loginView).setPasswordError(R.string.error_invalid_password);\n+        verify(loginView).setUsernameError(R.string.error_field_required);\n+        verify(loginView).enableLoginButton(true);\n+        verify(loginInteractor, never()).login(any(), any(), any());\n+    }\n+\n+    @Test\n+    public void testAttemptLoginShouldInvokeLogin() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(true);\n+        presenter.attemptLogin(\"john\", \"doe\");\n+        verify(loginView, never()).setPasswordError(R.string.error_invalid_password);\n+        verify(loginView, never()).setUsernameError(R.string.error_field_required);\n+        verify(loginView, never()).enableLoginButton(true);\n+        verify(loginInteractor).login(any(), eq(\"john\"), eq(\"doe\"));\n+    }\n+\n+    @Test\n+    public void testIsUserLoggedOutShouldReturnModelValue() {\n+        assertTrue(presenter.isUserLoggedOut());\n+        verify(loginModel).isUserLoggedOut();\n+    }\n+\n+    @Test\n+    public void testPositionViewsAndCanvasGlobalLayoutListenerProcessor() {\n+        presenter.positionViews();\n+        final ScrollView canvasSV = loginView.getActivityContext().findViewById(R.id.canvasSV);\n+        presenter.canvasGlobalLayoutListenerProcessor(canvasSV, layoutListener);\n+\n+        RelativeLayout view = loginView.getActivityContext().findViewById(R.id.login_layout);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f48d223efae0a5fc9558bc31b3afd0daac77d256"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMwODAxNw==", "bodyText": "There is no way to confirm global layout listeners were added  since ViewTreeObserver is final and does not  have any constructors.\nandroid.view.ViewTreeObserver$CopyOnWriteArray which holds mOnGlobalLayoutListeners is also package private and there is not way one can use it or stub it", "url": "https://github.com/opensrp/opensrp-client-core/pull/629#discussion_r472308017", "createdAt": "2020-08-18T16:01:26Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/test/java/org/smartregister/login/presenter/BaseLoginPresenterTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.smartregister.login.presenter;\n+\n+import android.content.res.Configuration;\n+import android.support.v7.app.AppCompatActivity;\n+import android.view.ViewTreeObserver;\n+import android.widget.RelativeLayout;\n+import android.widget.ScrollView;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.Robolectric;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.R;\n+import org.smartregister.login.model.BaseLoginModel;\n+import org.smartregister.view.activity.BaseLoginActivityTest.BaseLoginActivityImpl;\n+import org.smartregister.view.contract.BaseLoginContract;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static android.preference.PreferenceManager.getDefaultSharedPreferences;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 8/18/20.\n+ */\n+public class BaseLoginPresenterTest extends BaseRobolectricUnitTest {\n+\n+    @Mock(answer = Answers.CALLS_REAL_METHODS)\n+    private BaseLoginPresenter presenter;\n+\n+    @Mock\n+    private BaseLoginContract.View loginView;\n+    @Mock\n+    private BaseLoginContract.Interactor loginInteractor;\n+    @Spy\n+    private BaseLoginContract.Model loginModel = new BaseLoginModel();\n+    @Mock\n+    private ViewTreeObserver.OnGlobalLayoutListener layoutListener;\n+\n+    private AppCompatActivity activity;\n+\n+    @Before\n+    public void setUp() {\n+        presenter.setLoginModel(loginModel);\n+        presenter.setLoginInteractor(loginInteractor);\n+        presenter.setLoginView(new WeakReference<>(loginView));\n+        activity = Robolectric.buildActivity(BaseLoginActivityImpl.class).create().get();\n+        when(loginView.getActivityContext()).thenReturn(activity);\n+    }\n+\n+    @Test\n+    public void testOnDestroyShouldCleanUp() {\n+        presenter.onDestroy(false);\n+        verify(loginInteractor).onDestroy(false);\n+        assertNull(presenter.getLoginView());\n+        assertNull(Whitebox.getInternalState(presenter, \"mLoginInteractor\"));\n+        assertNull(Whitebox.getInternalState(presenter, \"mLoginModel\"));\n+    }\n+\n+    @Test\n+    public void testGetLoginViewShouldReturnView() {\n+        assertEquals(loginView, presenter.getLoginView());\n+    }\n+\n+    @Test\n+    public void testAttemptLoginShouldErrorIfAppIsOutdated() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(false);\n+        presenter.attemptLogin(\"john\", \"doe\");\n+        verify(loginView).showErrorDialog(activity.getString(R.string.outdated_app));\n+        verify(loginView).isAppVersionAllowed();\n+        verify(loginView).getActivityContext();\n+        verifyNoMoreInteractions(loginView);\n+    }\n+\n+\n+    @Test\n+    public void testAttemptLoginShouldNotInvokeLoginAndDisplaysErrors() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(true);\n+        presenter.attemptLogin(\"\", \"\");\n+        verify(loginView).setPasswordError(R.string.error_invalid_password);\n+        verify(loginView).setUsernameError(R.string.error_field_required);\n+        verify(loginView).enableLoginButton(true);\n+        verify(loginInteractor, never()).login(any(), any(), any());\n+    }\n+\n+    @Test\n+    public void testAttemptLoginShouldInvokeLogin() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(true);\n+        presenter.attemptLogin(\"john\", \"doe\");\n+        verify(loginView, never()).setPasswordError(R.string.error_invalid_password);\n+        verify(loginView, never()).setUsernameError(R.string.error_field_required);\n+        verify(loginView, never()).enableLoginButton(true);\n+        verify(loginInteractor).login(any(), eq(\"john\"), eq(\"doe\"));\n+    }\n+\n+    @Test\n+    public void testIsUserLoggedOutShouldReturnModelValue() {\n+        assertTrue(presenter.isUserLoggedOut());\n+        verify(loginModel).isUserLoggedOut();\n+    }\n+\n+    @Test\n+    public void testPositionViewsAndCanvasGlobalLayoutListenerProcessor() {\n+        presenter.positionViews();\n+        final ScrollView canvasSV = loginView.getActivityContext().findViewById(R.id.canvasSV);\n+        presenter.canvasGlobalLayoutListenerProcessor(canvasSV, layoutListener);\n+\n+        RelativeLayout view = loginView.getActivityContext().findViewById(R.id.login_layout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDg0OQ=="}, "originalCommit": {"oid": "f48d223efae0a5fc9558bc31b3afd0daac77d256"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjMxMTM1Ng==", "bodyText": "Cool", "url": "https://github.com/opensrp/opensrp-client-core/pull/629#discussion_r472311356", "createdAt": "2020-08-18T16:06:38Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/test/java/org/smartregister/login/presenter/BaseLoginPresenterTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.smartregister.login.presenter;\n+\n+import android.content.res.Configuration;\n+import android.support.v7.app.AppCompatActivity;\n+import android.view.ViewTreeObserver;\n+import android.widget.RelativeLayout;\n+import android.widget.ScrollView;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Answers;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.Robolectric;\n+import org.smartregister.BaseRobolectricUnitTest;\n+import org.smartregister.R;\n+import org.smartregister.login.model.BaseLoginModel;\n+import org.smartregister.view.activity.BaseLoginActivityTest.BaseLoginActivityImpl;\n+import org.smartregister.view.contract.BaseLoginContract;\n+\n+import java.lang.ref.WeakReference;\n+\n+import static android.preference.PreferenceManager.getDefaultSharedPreferences;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyNoMoreInteractions;\n+import static org.mockito.Mockito.when;\n+\n+/**\n+ * Created by samuelgithengi on 8/18/20.\n+ */\n+public class BaseLoginPresenterTest extends BaseRobolectricUnitTest {\n+\n+    @Mock(answer = Answers.CALLS_REAL_METHODS)\n+    private BaseLoginPresenter presenter;\n+\n+    @Mock\n+    private BaseLoginContract.View loginView;\n+    @Mock\n+    private BaseLoginContract.Interactor loginInteractor;\n+    @Spy\n+    private BaseLoginContract.Model loginModel = new BaseLoginModel();\n+    @Mock\n+    private ViewTreeObserver.OnGlobalLayoutListener layoutListener;\n+\n+    private AppCompatActivity activity;\n+\n+    @Before\n+    public void setUp() {\n+        presenter.setLoginModel(loginModel);\n+        presenter.setLoginInteractor(loginInteractor);\n+        presenter.setLoginView(new WeakReference<>(loginView));\n+        activity = Robolectric.buildActivity(BaseLoginActivityImpl.class).create().get();\n+        when(loginView.getActivityContext()).thenReturn(activity);\n+    }\n+\n+    @Test\n+    public void testOnDestroyShouldCleanUp() {\n+        presenter.onDestroy(false);\n+        verify(loginInteractor).onDestroy(false);\n+        assertNull(presenter.getLoginView());\n+        assertNull(Whitebox.getInternalState(presenter, \"mLoginInteractor\"));\n+        assertNull(Whitebox.getInternalState(presenter, \"mLoginModel\"));\n+    }\n+\n+    @Test\n+    public void testGetLoginViewShouldReturnView() {\n+        assertEquals(loginView, presenter.getLoginView());\n+    }\n+\n+    @Test\n+    public void testAttemptLoginShouldErrorIfAppIsOutdated() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(false);\n+        presenter.attemptLogin(\"john\", \"doe\");\n+        verify(loginView).showErrorDialog(activity.getString(R.string.outdated_app));\n+        verify(loginView).isAppVersionAllowed();\n+        verify(loginView).getActivityContext();\n+        verifyNoMoreInteractions(loginView);\n+    }\n+\n+\n+    @Test\n+    public void testAttemptLoginShouldNotInvokeLoginAndDisplaysErrors() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(true);\n+        presenter.attemptLogin(\"\", \"\");\n+        verify(loginView).setPasswordError(R.string.error_invalid_password);\n+        verify(loginView).setUsernameError(R.string.error_field_required);\n+        verify(loginView).enableLoginButton(true);\n+        verify(loginInteractor, never()).login(any(), any(), any());\n+    }\n+\n+    @Test\n+    public void testAttemptLoginShouldInvokeLogin() {\n+        when(loginView.isAppVersionAllowed()).thenReturn(true);\n+        presenter.attemptLogin(\"john\", \"doe\");\n+        verify(loginView, never()).setPasswordError(R.string.error_invalid_password);\n+        verify(loginView, never()).setUsernameError(R.string.error_field_required);\n+        verify(loginView, never()).enableLoginButton(true);\n+        verify(loginInteractor).login(any(), eq(\"john\"), eq(\"doe\"));\n+    }\n+\n+    @Test\n+    public void testIsUserLoggedOutShouldReturnModelValue() {\n+        assertTrue(presenter.isUserLoggedOut());\n+        verify(loginModel).isUserLoggedOut();\n+    }\n+\n+    @Test\n+    public void testPositionViewsAndCanvasGlobalLayoutListenerProcessor() {\n+        presenter.positionViews();\n+        final ScrollView canvasSV = loginView.getActivityContext().findViewById(R.id.canvasSV);\n+        presenter.canvasGlobalLayoutListenerProcessor(canvasSV, layoutListener);\n+\n+        RelativeLayout view = loginView.getActivityContext().findViewById(R.id.login_layout);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI0NDg0OQ=="}, "originalCommit": {"oid": "f48d223efae0a5fc9558bc31b3afd0daac77d256"}, "originalPosition": 120}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2107, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}