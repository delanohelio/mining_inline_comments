{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MjY0MDU4", "number": 602, "title": "User Service Tests", "bodyText": "", "createdAt": "2020-07-21T08:27:20Z", "url": "https://github.com/opensrp/opensrp-client-core/pull/602", "merged": true, "mergeCommit": {"oid": "b35bd7d32d32cc2273a266fe73c194c5b014140e"}, "closed": true, "closedAt": "2020-07-27T08:06:35Z", "author": {"login": "githengi"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0yYJFAH2gAyNDU0MjY0MDU4OmRlYmNhMjBlZWMxYzE4ZTE1YmYyMzJmMGQzMzQ3OWQ4NzI0NWY4OTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc49DavgFqTQ1NTU1Mjk4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "debca20eec1c18e15bf232f0d33479d87245f895", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/debca20eec1c18e15bf232f0d33479d87245f895", "committedDate": "2020-07-14T09:11:46Z", "message": "Verify forceremote login invocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6b4dd3584861de1b86cd508d5e295986936dce1", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/b6b4dd3584861de1b86cd508d5e295986936dce1", "committedDate": "2020-07-14T10:44:08Z", "message": "Stashed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dd2456b93ff5377d956296a23d5c4892a138e11", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/1dd2456b93ff5377d956296a23d5c4892a138e11", "committedDate": "2020-07-21T07:09:24Z", "message": "Merge branch 'master' into sg-user-service-test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "969f48e59d4f9d18445ea97581de923fc8151568", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/969f48e59d4f9d18445ea97581de923fc8151568", "committedDate": "2020-07-21T08:17:54Z", "message": "Unit test isUserInValidGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8834994d57c809ff6efa95e4606ceacb98536768", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/8834994d57c809ff6efa95e4606ceacb98536768", "committedDate": "2020-07-21T08:36:16Z", "message": "Unit test GetGroupId"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cccc5e4ff6e3ac4e401ac955f104ffdd3aca1541", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/cccc5e4ff6e3ac4e401ac955f104ffdd3aca1541", "committedDate": "2020-07-21T08:56:08Z", "message": "Unit test isUserInPioneerGroup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79f04ada4560a61621b6d6682b7f2af11a8b95c4", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/79f04ada4560a61621b6d6682b7f2af11a8b95c4", "committedDate": "2020-07-27T06:46:34Z", "message": "Remove underscore in test method names"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/c35d23eedccc082f52aa7111c1d033e131da7f18", "committedDate": "2020-07-27T06:46:59Z", "message": "Merge branch 'master' into sg-user-service-test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTE5NzU4", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#pullrequestreview-455519758", "createdAt": "2020-07-27T07:06:30Z", "commit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowNjozMFrOG3WEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowNjozMFrOG3WEWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NjQyNQ==", "bodyText": "You could use  verifyZeroInteractions instead.", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460686425", "createdAt": "2020-07-27T07:06:30Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTI0NTQ1", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#pullrequestreview-455524545", "createdAt": "2020-07-27T07:14:47Z", "commit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNDo0OFrOG3WR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNDo0OFrOG3WR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTg5NQ==", "bodyText": "Typo?", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460689895", "createdAt": "2020-07-27T07:14:48Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);\n+    }\n+\n+    @Test\n+    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "author": {"user": {"login": "githengi", "name": "Samuel Githengi"}}, "url": "https://github.com/opensrp/opensrp-client-core/commit/4c5256c1c4c1076e8983e5696c8ed55e8612caf3", "committedDate": "2020-07-27T07:33:27Z", "message": "code cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU1NTUyOTg5", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#pullrequestreview-455552989", "createdAt": "2020-07-27T07:53:47Z", "commit": {"oid": "4c5256c1c4c1076e8983e5696c8ed55e8612caf3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2458, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}