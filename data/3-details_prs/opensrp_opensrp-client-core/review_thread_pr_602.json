{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MjY0MDU4", "number": 602, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowNjozMFrOESQt4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNDo0OFrOESQ2jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTgzNzEyOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowNjozMFrOG3WEWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzowNjozMFrOG3WEWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4NjQyNQ==", "bodyText": "You could use  verifyZeroInteractions instead.", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460686425", "createdAt": "2020-07-27T07:06:30Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NTg1OTMyOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNDo0OFrOG3WR5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwNzoxNDo0OFrOG3WR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDY4OTg5NQ==", "bodyText": "Typo?", "url": "https://github.com/opensrp/opensrp-client-core/pull/602#discussion_r460689895", "createdAt": "2020-07-27T07:14:48Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/service/UserServiceTest.java", "diffHunk": "@@ -300,21 +318,118 @@ public void testValidateDeviceTimeSameTimeTimeAndTimeZone() {\n     public void testValidateStoredServerTimeZoneForNullServerTimeZoneReturnsError() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(null);\n         assertEquals(TimeStatus.ERROR, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n     @Test\n     public void testValidateStoredServerTimeZoneForDifferentTimeZoneServerTimeZoneReturnsMismatch() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"GMT\"));\n         assertEquals(TimeStatus.TIMEZONE_MISMATCH, userService.validateStoredServerTimeZone());\n+\n+        verify(allSharedPreferences).saveForceRemoteLogin(true);\n     }\n \n \n     @Test\n-    public void testValidateStoredServerTimeZoneSameTimeTimeAndTimeZone() {\n+    public void testValidateStoredServerTimeZoneForSameTimeTimeAndTimeZone() {\n         when(allSharedPreferences.fetchServerTimeZone()).thenReturn(\"Africa/Nairobi\");\n         TimeZone.setDefault(TimeZone.getTimeZone(\"Africa/Nairobi\"));\n         assertEquals(TimeStatus.OK, userService.validateStoredServerTimeZone());\n+        verify(allSharedPreferences, never()).saveForceRemoteLogin(true);\n     }\n \n+\n+    @Test\n+    public void testIsUserInValidGroupForNullUserAndPassword() {\n+        assertFalse(userService.isUserInValidGroup(null, null));\n+    }\n+\n+    @Test\n+    public void testIsUserInValidGroupForValidUserAndPassword() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        userService = spy(userService);\n+        doReturn(password).when(userService).decryptString(privateKeyEntry, password);\n+        when(repository.canUseThisPassword(password)).thenReturn(true);\n+        assertTrue(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences).fetchEncryptedGroupId(user);\n+        verify(repository).canUseThisPassword(password);\n+    }\n+\n+\n+    @Test\n+    public void testIsUserInValidGroupShouldReturnFalseOnError() throws Exception {\n+        Whitebox.setInternalState(userService, \"keyStore\", keyStore);\n+        Whitebox.setInternalState(keyStore, \"initialized\", true);\n+        Whitebox.setInternalState(keyStore, \"keyStoreSpi\", keyStoreSpi);\n+        String user = \"johndoe\";\n+        when(keyStore.containsAlias(user)).thenReturn(true);\n+        KeyStore.PrivateKeyEntry privateKeyEntry = PowerMockito.mock(KeyStore.PrivateKeyEntry.class);\n+        when(keyStore.getEntry(user, null)).thenReturn(privateKeyEntry);\n+        String password = UUID.randomUUID().toString();\n+        when(allSharedPreferences.fetchEncryptedPassword(user)).thenReturn(password);\n+        when(allSharedPreferences.fetchEncryptedGroupId(user)).thenReturn(password);\n+        assertFalse(userService.isUserInValidGroup(user, password));\n+        verify(allSharedPreferences).fetchEncryptedPassword(user);\n+        verify(allSharedPreferences, never()).fetchEncryptedGroupId(user);\n+        verify(repository, never()).canUseThisPassword(password);\n+    }\n+\n+    @Test\n+    public void testGetGroupIdShShouldReturnNullOnError() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c35d23eedccc082f52aa7111c1d033e131da7f18"}, "originalPosition": 152}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2090, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}