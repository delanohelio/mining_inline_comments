{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzQyMTk3", "number": 533, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzozMzo0NFrOEAyTeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTozNFrOECI6Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjU5NjQwOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzozMzo0NFrOGcR38g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoxMzoyMlrOGcTFMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwNjE2Mg==", "bodyText": "Does this account for MLS v2.0 where even if the locale changes we still the same form?", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432306162", "createdAt": "2020-05-29T07:33:44Z", "author": {"login": "dubdabasoduba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1130,11 +1135,64 @@ private void createNewClientDocument(org.smartregister.cloudant.models.Client cl\n         mCloudantDataHandler.createClientDocument(client);\n     }\n \n-    public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n-        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n-        String locale = mContext.getResources().getConfiguration().locale.getLanguage();\n+    @Nullable\n+    public JSONObject getFormJsonFromRepositoryOrAssets(@NonNull String formIdentity) {\n+        return getFormJsonFromRepositoryOrAssetsWithOptionalCallback(formIdentity, null);\n+    }\n+\n+    public void getFormJsonFromRepositoryOrAssets(@NonNull String formIdentity, @Nullable OnFormFetchedCallback<JSONObject> onFormFetchedCallback) {\n+        getFormJsonFromRepositoryOrAssetsWithOptionalCallback(formIdentity, onFormFetchedCallback);\n+    }\n+\n+    private JSONObject getFormJsonFromRepositoryOrAssetsWithOptionalCallback(String formIdentity, @Nullable OnFormFetchedCallback<JSONObject> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+\n+        try {\n+            if (clientForm != null) {\n+                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+\n+                JSONObject formJson = new JSONObject(clientForm.getJson());\n+                injectFormStatus(formJson, clientForm);\n+\n+                if (onFormFetchedCallback != null) {\n+                    onFormFetchedCallback.onFormFetched(formJson);\n+                    return null;\n+                }  else {\n+                    return formJson;\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+\n+            if (onFormFetchedCallback != null) {\n+                handleJsonFormOrRulesError(false, formIdentity, form -> {\n+                    try {\n+                        JSONObject jsonObject = form == null ? null : new JSONObject(form);\n+                        onFormFetchedCallback.onFormFetched(jsonObject);\n+                    } catch (JSONException ex) {\n+                        Timber.e(ex);\n+                    }\n+                });\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        Timber.d(\"============%s form loaded from Assets=============\", formIdentity);\n+        JSONObject jsonObject = getFormJson(formIdentity);\n \n+        if (onFormFetchedCallback != null) {\n+            onFormFetchedCallback.onFormFetched(jsonObject);\n+            return null;\n+        }  else {\n+            return jsonObject;\n+        }\n+    }\n+\n+    private ClientForm getClientFormFromRepository(String formIdentity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyMDI3MQ==", "bodyText": "Nope, I probably didn't get this question. Can you table this for the meeting?\nI have not put a lot of effort on MLS v2 support due to the inability to clearly test but as long as the property files are considered as forms, the idea is that it would only require enabling the DB as a source of property files also(instead of just the assets)", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432320271", "createdAt": "2020-05-29T08:02:20Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1130,11 +1135,64 @@ private void createNewClientDocument(org.smartregister.cloudant.models.Client cl\n         mCloudantDataHandler.createClientDocument(client);\n     }\n \n-    public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n-        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n-        String locale = mContext.getResources().getConfiguration().locale.getLanguage();\n+    @Nullable\n+    public JSONObject getFormJsonFromRepositoryOrAssets(@NonNull String formIdentity) {\n+        return getFormJsonFromRepositoryOrAssetsWithOptionalCallback(formIdentity, null);\n+    }\n+\n+    public void getFormJsonFromRepositoryOrAssets(@NonNull String formIdentity, @Nullable OnFormFetchedCallback<JSONObject> onFormFetchedCallback) {\n+        getFormJsonFromRepositoryOrAssetsWithOptionalCallback(formIdentity, onFormFetchedCallback);\n+    }\n+\n+    private JSONObject getFormJsonFromRepositoryOrAssetsWithOptionalCallback(String formIdentity, @Nullable OnFormFetchedCallback<JSONObject> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+\n+        try {\n+            if (clientForm != null) {\n+                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+\n+                JSONObject formJson = new JSONObject(clientForm.getJson());\n+                injectFormStatus(formJson, clientForm);\n+\n+                if (onFormFetchedCallback != null) {\n+                    onFormFetchedCallback.onFormFetched(formJson);\n+                    return null;\n+                }  else {\n+                    return formJson;\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+\n+            if (onFormFetchedCallback != null) {\n+                handleJsonFormOrRulesError(false, formIdentity, form -> {\n+                    try {\n+                        JSONObject jsonObject = form == null ? null : new JSONObject(form);\n+                        onFormFetchedCallback.onFormFetched(jsonObject);\n+                    } catch (JSONException ex) {\n+                        Timber.e(ex);\n+                    }\n+                });\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        Timber.d(\"============%s form loaded from Assets=============\", formIdentity);\n+        JSONObject jsonObject = getFormJson(formIdentity);\n \n+        if (onFormFetchedCallback != null) {\n+            onFormFetchedCallback.onFormFetched(jsonObject);\n+            return null;\n+        }  else {\n+            return jsonObject;\n+        }\n+    }\n+\n+    private ClientForm getClientFormFromRepository(String formIdentity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwNjE2Mg=="}, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyNTkzNw==", "bodyText": "Added, thanks.", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432325937", "createdAt": "2020-05-29T08:13:22Z", "author": {"login": "dubdabasoduba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1130,11 +1135,64 @@ private void createNewClientDocument(org.smartregister.cloudant.models.Client cl\n         mCloudantDataHandler.createClientDocument(client);\n     }\n \n-    public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n-        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n-        String locale = mContext.getResources().getConfiguration().locale.getLanguage();\n+    @Nullable\n+    public JSONObject getFormJsonFromRepositoryOrAssets(@NonNull String formIdentity) {\n+        return getFormJsonFromRepositoryOrAssetsWithOptionalCallback(formIdentity, null);\n+    }\n+\n+    public void getFormJsonFromRepositoryOrAssets(@NonNull String formIdentity, @Nullable OnFormFetchedCallback<JSONObject> onFormFetchedCallback) {\n+        getFormJsonFromRepositoryOrAssetsWithOptionalCallback(formIdentity, onFormFetchedCallback);\n+    }\n+\n+    private JSONObject getFormJsonFromRepositoryOrAssetsWithOptionalCallback(String formIdentity, @Nullable OnFormFetchedCallback<JSONObject> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+\n+        try {\n+            if (clientForm != null) {\n+                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+\n+                JSONObject formJson = new JSONObject(clientForm.getJson());\n+                injectFormStatus(formJson, clientForm);\n+\n+                if (onFormFetchedCallback != null) {\n+                    onFormFetchedCallback.onFormFetched(formJson);\n+                    return null;\n+                }  else {\n+                    return formJson;\n+                }\n+            }\n+        } catch (JSONException e) {\n+            Timber.e(e);\n+\n+            if (onFormFetchedCallback != null) {\n+                handleJsonFormOrRulesError(false, formIdentity, form -> {\n+                    try {\n+                        JSONObject jsonObject = form == null ? null : new JSONObject(form);\n+                        onFormFetchedCallback.onFormFetched(jsonObject);\n+                    } catch (JSONException ex) {\n+                        Timber.e(ex);\n+                    }\n+                });\n+            } else {\n+                return null;\n+            }\n+        }\n+\n+        Timber.d(\"============%s form loaded from Assets=============\", formIdentity);\n+        JSONObject jsonObject = getFormJson(formIdentity);\n \n+        if (onFormFetchedCallback != null) {\n+            onFormFetchedCallback.onFormFetched(jsonObject);\n+            return null;\n+        }  else {\n+            return jsonObject;\n+        }\n+    }\n+\n+    private ClientForm getClientFormFromRepository(String formIdentity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwNjE2Mg=="}, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjYxMDk0OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzozODo0NVrOGcSA9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODoyMzowN1rOGcTY6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwODQ3MA==", "bodyText": "Are we checking for the APK compatibility when suggesting the form rollback version.", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432308470", "createdAt": "2020-05-29T07:38:45Z", "author": {"login": "dubdabasoduba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1146,25 +1204,60 @@ public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n             String revisedFormName = extractFormNameWithoutExtension(localeFormIdentity);\n             clientForm = clientFormRepository.getActiveClientFormByIdentifier(revisedFormName);\n         }\n+        return clientForm;\n+    }\n \n-        try {\n-            if (clientForm != null) {\n-                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+    public void handleJsonFormOrRulesError(@NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        handleJsonFormOrRulesError(false, formIdentity, onFormFetchedCallback);\n+    }\n \n-                JSONObject formJson = new JSONObject(clientForm.getJson());\n-                injectFormStatus(formJson, clientForm);\n+    public void handleJsonFormOrRulesError(boolean isRulesFile, @NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n+        List<ClientForm> clientForms = clientFormRepository.getClientFormByIdentifier(clientForm.getIdentifier());\n+\n+        if (clientForms.size() > 0) {\n+            // Show dialog asking user if they want to rollback to the previous available version X\n+            // if YES, then provide that form instead", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyMTczMg==", "bodyText": "Nope, we are not. As discussed, we provide the user with all the available forms.\n\nThe logic for providing the option ended up being too complicated & would take a lot of effort\nOur assumption that app version means a change in app-model is not accurate. The idea is that the model might remain the same across multiple app versions and thus we cannot accurately determine or suggest to the user the model-compatible forms", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432321732", "createdAt": "2020-05-29T08:05:22Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1146,25 +1204,60 @@ public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n             String revisedFormName = extractFormNameWithoutExtension(localeFormIdentity);\n             clientForm = clientFormRepository.getActiveClientFormByIdentifier(revisedFormName);\n         }\n+        return clientForm;\n+    }\n \n-        try {\n-            if (clientForm != null) {\n-                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+    public void handleJsonFormOrRulesError(@NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        handleJsonFormOrRulesError(false, formIdentity, onFormFetchedCallback);\n+    }\n \n-                JSONObject formJson = new JSONObject(clientForm.getJson());\n-                injectFormStatus(formJson, clientForm);\n+    public void handleJsonFormOrRulesError(boolean isRulesFile, @NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n+        List<ClientForm> clientForms = clientFormRepository.getClientFormByIdentifier(clientForm.getIdentifier());\n+\n+        if (clientForms.size() > 0) {\n+            // Show dialog asking user if they want to rollback to the previous available version X\n+            // if YES, then provide that form instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwODQ3MA=="}, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyODA4Ng==", "bodyText": "What happens if I update the registration form & update the registration form logic and add/remove new questions or hidden fields e.g contact_no which are key to the rest of the app logic? If we roll back to a version that doesn't have this field then use the new APK then the logic will be messed up.", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432328086", "createdAt": "2020-05-29T08:17:37Z", "author": {"login": "dubdabasoduba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1146,25 +1204,60 @@ public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n             String revisedFormName = extractFormNameWithoutExtension(localeFormIdentity);\n             clientForm = clientFormRepository.getActiveClientFormByIdentifier(revisedFormName);\n         }\n+        return clientForm;\n+    }\n \n-        try {\n-            if (clientForm != null) {\n-                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+    public void handleJsonFormOrRulesError(@NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        handleJsonFormOrRulesError(false, formIdentity, onFormFetchedCallback);\n+    }\n \n-                JSONObject formJson = new JSONObject(clientForm.getJson());\n-                injectFormStatus(formJson, clientForm);\n+    public void handleJsonFormOrRulesError(boolean isRulesFile, @NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n+        List<ClientForm> clientForms = clientFormRepository.getClientFormByIdentifier(clientForm.getIdentifier());\n+\n+        if (clientForms.size() > 0) {\n+            // Show dialog asking user if they want to rollback to the previous available version X\n+            // if YES, then provide that form instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwODQ3MA=="}, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMzMDk4NQ==", "bodyText": "We do not automatically rollback, we give the user the option, We cannot also tell critical and non-critical changes. That would require extra work to determine. What do you think?Do you have a suggestion that accurately determines compatible rollback form(s)?", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432330985", "createdAt": "2020-05-29T08:23:07Z", "author": {"login": "Kigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1146,25 +1204,60 @@ public JSONObject getFormJsonFromRepositoryOrAssets(String formIdentity) {\n             String revisedFormName = extractFormNameWithoutExtension(localeFormIdentity);\n             clientForm = clientFormRepository.getActiveClientFormByIdentifier(revisedFormName);\n         }\n+        return clientForm;\n+    }\n \n-        try {\n-            if (clientForm != null) {\n-                Timber.d(\"============%s form loaded from db============\", formIdentity);\n+    public void handleJsonFormOrRulesError(@NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        handleJsonFormOrRulesError(false, formIdentity, onFormFetchedCallback);\n+    }\n \n-                JSONObject formJson = new JSONObject(clientForm.getJson());\n-                injectFormStatus(formJson, clientForm);\n+    public void handleJsonFormOrRulesError(boolean isRulesFile, @NonNull String formIdentity, @NonNull OnFormFetchedCallback<String> onFormFetchedCallback) {\n+        ClientForm clientForm = getClientFormFromRepository(formIdentity);\n+        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n+        List<ClientForm> clientForms = clientFormRepository.getClientFormByIdentifier(clientForm.getIdentifier());\n+\n+        if (clientForms.size() > 0) {\n+            // Show dialog asking user if they want to rollback to the previous available version X\n+            // if YES, then provide that form instead", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMwODQ3MA=="}, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MjYyNzczOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/view/activity/FormConfigurationJsonFormActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwNzo0Mzo0OFrOGcSLMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwODowNTozM1rOGcS1Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxMTA5MA==", "bodyText": "Hope you are checking for nulls in the places where these methods are used", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432311090", "createdAt": "2020-05-29T07:43:48Z", "author": {"login": "dubdabasoduba"}, "path": "opensrp-app/src/main/java/org/smartregister/view/activity/FormConfigurationJsonFormActivity.java", "diffHunk": "@@ -70,7 +74,7 @@ public void run() {\n                 });\n     }\n \n-    @NonNull\n+    @Nullable", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMyMTgxMA==", "bodyText": "Yea", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r432321810", "createdAt": "2020-05-29T08:05:33Z", "author": {"login": "ekigamba"}, "path": "opensrp-app/src/main/java/org/smartregister/view/activity/FormConfigurationJsonFormActivity.java", "diffHunk": "@@ -70,7 +74,7 @@ public void run() {\n                 });\n     }\n \n-    @NonNull\n+    @Nullable", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjMxMTA5MA=="}, "originalCommit": {"oid": "fd2282f3c258a12a93fe3e1097dfa34649dbe9b3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjc4NTYzOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTozNFrOGeaWog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMjo1MTozNFrOGeaWog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU0MjI0Mg==", "bodyText": "Delete this block if its not being used", "url": "https://github.com/opensrp/opensrp-client-core/pull/533#discussion_r434542242", "createdAt": "2020-06-03T12:51:34Z", "author": {"login": "dubdabasoduba"}, "path": "opensrp-app/src/main/java/org/smartregister/util/FormUtils.java", "diffHunk": "@@ -1258,5 +1348,24 @@ public static int getClientFormId(@NonNull JSONObject jsonObject) {\n     public static boolean isFormNew(@NonNull JSONObject jsonObject) {\n         return jsonObject.optBoolean(AllConstants.JSON.Property.IS_NEW, false);\n     }\n+/*\n+    @Nullable\n+    public List<ClientForm> getAvailableRollbackForms(@NonNull ClientForm corruptedForm) {\n+        ClientFormRepository clientFormRepository = CoreLibrary.getInstance().context().getClientFormRepository();\n+        ManifestRepository manifestRepository = CoreLibrary.getInstance().context().getManifestRepository();\n+        List<ClientForm> clientForms = clientFormRepository.getClientFormByIdentifier(corruptedForm.getIdentifier());\n+        List<Manifest> manifests = manifestRepository.getAllManifests();\n+\n+        Collections.sort(manifests, new Comparator<Manifest>() {\n+            @Override\n+            public int compare(Manifest o1, Manifest o2) {\n+                DefaultArtifactVersion v2 = new DefaultArtifactVersion(o1.getFormVersion());\n+\n+                return 0;\n+            }\n+        });\n+\n+        // Remove the current form from the available options\n+    }*/", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32a974f4dc5b3f4899c567b2703ceeea641aa49b"}, "originalPosition": 216}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2170, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}