{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NDg5NTAz", "number": 427, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyNDozN1rODgsSlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzozMjozNVrODgsdKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjA2Njc5OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/sync/ClientProcessorForJava.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyNDozN1rOFrCJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzo1NzozNVrOFrDQgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODMzOA==", "bodyText": "Is this the only the exception that can occur", "url": "https://github.com/opensrp/opensrp-client-core/pull/427#discussion_r380668338", "createdAt": "2020-02-18T13:24:37Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/sync/ClientProcessorForJava.java", "diffHunk": "@@ -663,7 +658,7 @@ public void updateClientDetailsTable(Event event, Client client) {\n             if (StringUtils.isNotBlank(gender)) {\n                 map.put(GENDER, gender);\n             }\n-        } catch (Exception e) {\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82950a9eb5ffc46e2a3166fea9756f3c112c4c4e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4NjQ2Ng==", "bodyText": "yeah i think so", "url": "https://github.com/opensrp/opensrp-client-core/pull/427#discussion_r380686466", "createdAt": "2020-02-18T13:57:35Z", "author": {"login": "bennsimon"}, "path": "opensrp-app/src/main/java/org/smartregister/sync/ClientProcessorForJava.java", "diffHunk": "@@ -663,7 +658,7 @@ public void updateClientDetailsTable(Event event, Client client) {\n             if (StringUtils.isNotBlank(gender)) {\n                 map.put(GENDER, gender);\n             }\n-        } catch (Exception e) {\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODMzOA=="}, "originalCommit": {"oid": "82950a9eb5ffc46e2a3166fea9756f3c112c4c4e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjA2NzAzOnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/main/java/org/smartregister/sync/ClientProcessorForJava.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzoyNDo0MlrOFrCJ1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzo1NzoyOFrOFrDQRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODM3NA==", "bodyText": "Is this the only the exception that can occur", "url": "https://github.com/opensrp/opensrp-client-core/pull/427#discussion_r380668374", "createdAt": "2020-02-18T13:24:42Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/main/java/org/smartregister/sync/ClientProcessorForJava.java", "diffHunk": "@@ -648,7 +643,7 @@ public void updateClientDetailsTable(Event event, Client client) {\n                     attributes.put(key, value.toString());\n                 }\n             }\n-        } catch (Exception e) {\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82950a9eb5ffc46e2a3166fea9756f3c112c4c4e"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4NjQwNw==", "bodyText": "yeah i think so", "url": "https://github.com/opensrp/opensrp-client-core/pull/427#discussion_r380686407", "createdAt": "2020-02-18T13:57:28Z", "author": {"login": "bennsimon"}, "path": "opensrp-app/src/main/java/org/smartregister/sync/ClientProcessorForJava.java", "diffHunk": "@@ -648,7 +643,7 @@ public void updateClientDetailsTable(Event event, Client client) {\n                     attributes.put(key, value.toString());\n                 }\n             }\n-        } catch (Exception e) {\n+        } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY2ODM3NA=="}, "originalCommit": {"oid": "82950a9eb5ffc46e2a3166fea9756f3c112c4c4e"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjA5Mzg0OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/sync/ClientProcessorForJavaTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzozMjozNVrOFrCZ4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMzo1ODo0NlrOFrDTPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY3MjQ4MA==", "bodyText": "why is this required, unit tests should normally end with asserts or expected failures", "url": "https://github.com/opensrp/opensrp-client-core/pull/427#discussion_r380672480", "createdAt": "2020-02-18T13:32:35Z", "author": {"login": "githengi"}, "path": "opensrp-app/src/test/java/org/smartregister/sync/ClientProcessorForJavaTest.java", "diffHunk": "@@ -92,4 +114,57 @@ public void testGetValuesStrShouldGetCorrectlyFormattedString() throws Exception\n         valStr = Whitebox.invokeMethod(clientProcessor, \"getValuesStr\", obs, values, null);\n         assertEquals(\"val1\", valStr);\n     }\n+\n+    @Test\n+    public void testGetClientAttributesShouldReturnRequiredValues() throws Exception {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        Map<String, Object> attributes = new HashMap<>();\n+        attributes.put(\"national_id\", \"3434-34\");\n+        attributes.put(\"drivers-license\", \"DL-324\");\n+        Client client = new Client(\"123-23\");\n+        client.setAttributes(attributes);\n+        Map<String, Object> result = Whitebox.invokeMethod(clientProcessor, \"getClientAttributes\", client);\n+        assertEquals(attributes, result);\n+    }\n+\n+    @Test\n+    public void testGetGenderShouldReturnCorrectValue() throws Exception {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        Client client = new Client(\"123-23\");\n+        client.setGender(\"Female\");\n+        Map<String, String> resultMap = Whitebox.invokeMethod(clientProcessor, \"getGender\", client);\n+        Map<String, String> expectedMap = new HashMap<>();\n+        expectedMap.put(\"gender\", \"Female\");\n+        assertEquals(expectedMap, resultMap);\n+    }\n+\n+    @Test\n+    public void testUpdateIdenitifierShouldRemoveHyphenFromOpenmrsId() throws Exception {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(\"zeir_id\", \"23-23\");\n+        Whitebox.setInternalState(clientProcessor, \"openmrsGenIds\", new String[]{\"zeir_id\"});\n+        Whitebox.invokeMethod(clientProcessor, \"updateIdenitifier\", contentValues);\n+        assertEquals(\"2323\", contentValues.get(\"zeir_id\"));\n+    }\n+\n+    @Test\n+    public void testCloseCaseShouldReturnFalseIfCloseCaseIsEmpty() {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        assertFalse(clientProcessor.closeCase(new Client(\"1233-2\"), new ArrayList<>()));\n+    }\n+\n+    @Test\n+    public void testCloseCaseShouldPassCorrectValuesToCloseCase() {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        CommonRepository commonRepository = Mockito.mock(CommonRepository.class);\n+        ReflectionHelpers.setStaticField(CoreLibrary.class, \"instance\", coreLibrary);\n+        PowerMockito.when(coreLibrary.context()).thenReturn(opensrpContext);\n+        PowerMockito.when(opensrpContext.commonrepository(\"child\")).thenReturn(commonRepository);\n+        assertTrue(clientProcessor.closeCase(new Client(\"1233-2\"), Arrays.asList(\"child\")));\n+        Mockito.verify(commonRepository).closeCase(closeCaseArgumentCaptor.capture(), closeCaseArgumentCaptor.capture());\n+        assertEquals(\"1233-2\", closeCaseArgumentCaptor.getAllValues().get(0));\n+        assertEquals(\"child\", closeCaseArgumentCaptor.getAllValues().get(1));\n+        ReflectionHelpers.setStaticField(CoreLibrary.class, \"instance\", null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82950a9eb5ffc46e2a3166fea9756f3c112c4c4e"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4NzE2NQ==", "bodyText": "I do that since leaving the instance of CoreLibrary might affect how other tests behave within the class .The other way i can do is to add a teardown for this.", "url": "https://github.com/opensrp/opensrp-client-core/pull/427#discussion_r380687165", "createdAt": "2020-02-18T13:58:46Z", "author": {"login": "bennsimon"}, "path": "opensrp-app/src/test/java/org/smartregister/sync/ClientProcessorForJavaTest.java", "diffHunk": "@@ -92,4 +114,57 @@ public void testGetValuesStrShouldGetCorrectlyFormattedString() throws Exception\n         valStr = Whitebox.invokeMethod(clientProcessor, \"getValuesStr\", obs, values, null);\n         assertEquals(\"val1\", valStr);\n     }\n+\n+    @Test\n+    public void testGetClientAttributesShouldReturnRequiredValues() throws Exception {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        Map<String, Object> attributes = new HashMap<>();\n+        attributes.put(\"national_id\", \"3434-34\");\n+        attributes.put(\"drivers-license\", \"DL-324\");\n+        Client client = new Client(\"123-23\");\n+        client.setAttributes(attributes);\n+        Map<String, Object> result = Whitebox.invokeMethod(clientProcessor, \"getClientAttributes\", client);\n+        assertEquals(attributes, result);\n+    }\n+\n+    @Test\n+    public void testGetGenderShouldReturnCorrectValue() throws Exception {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        Client client = new Client(\"123-23\");\n+        client.setGender(\"Female\");\n+        Map<String, String> resultMap = Whitebox.invokeMethod(clientProcessor, \"getGender\", client);\n+        Map<String, String> expectedMap = new HashMap<>();\n+        expectedMap.put(\"gender\", \"Female\");\n+        assertEquals(expectedMap, resultMap);\n+    }\n+\n+    @Test\n+    public void testUpdateIdenitifierShouldRemoveHyphenFromOpenmrsId() throws Exception {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(\"zeir_id\", \"23-23\");\n+        Whitebox.setInternalState(clientProcessor, \"openmrsGenIds\", new String[]{\"zeir_id\"});\n+        Whitebox.invokeMethod(clientProcessor, \"updateIdenitifier\", contentValues);\n+        assertEquals(\"2323\", contentValues.get(\"zeir_id\"));\n+    }\n+\n+    @Test\n+    public void testCloseCaseShouldReturnFalseIfCloseCaseIsEmpty() {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        assertFalse(clientProcessor.closeCase(new Client(\"1233-2\"), new ArrayList<>()));\n+    }\n+\n+    @Test\n+    public void testCloseCaseShouldPassCorrectValuesToCloseCase() {\n+        ClientProcessorForJava clientProcessor = new ClientProcessorForJava(context);\n+        CommonRepository commonRepository = Mockito.mock(CommonRepository.class);\n+        ReflectionHelpers.setStaticField(CoreLibrary.class, \"instance\", coreLibrary);\n+        PowerMockito.when(coreLibrary.context()).thenReturn(opensrpContext);\n+        PowerMockito.when(opensrpContext.commonrepository(\"child\")).thenReturn(commonRepository);\n+        assertTrue(clientProcessor.closeCase(new Client(\"1233-2\"), Arrays.asList(\"child\")));\n+        Mockito.verify(commonRepository).closeCase(closeCaseArgumentCaptor.capture(), closeCaseArgumentCaptor.capture());\n+        assertEquals(\"1233-2\", closeCaseArgumentCaptor.getAllValues().get(0));\n+        assertEquals(\"child\", closeCaseArgumentCaptor.getAllValues().get(1));\n+        ReflectionHelpers.setStaticField(CoreLibrary.class, \"instance\", null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY3MjQ4MA=="}, "originalCommit": {"oid": "82950a9eb5ffc46e2a3166fea9756f3c112c4c4e"}, "originalPosition": 110}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2193, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}