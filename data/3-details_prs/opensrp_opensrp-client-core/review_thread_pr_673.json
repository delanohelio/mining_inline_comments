{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwNTYxOTE0", "number": 673, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyMDoyOVrOEyra9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyMDoyOVrOEyra9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxNTc1NjY4OnYy", "diffSide": "RIGHT", "path": "opensrp-app/src/test/java/org/smartregister/sync/intent/PullUniqueIdsIntentServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOFQwNzoyMDoyOVrOHpcwqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoxMDozM1rOHqOrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNDg3Mw==", "bodyText": "listArgumentCaptor.getValue() can be used instead?", "url": "https://github.com/opensrp/opensrp-client-core/pull/673#discussion_r513224873", "createdAt": "2020-10-28T07:20:29Z", "author": {"login": "vincent-karuri"}, "path": "opensrp-app/src/test/java/org/smartregister/sync/intent/PullUniqueIdsIntentServiceTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.smartregister.sync.intent;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.RuntimeEnvironment;\n+import org.smartregister.AllConstants;\n+import org.smartregister.BaseUnitTest;\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.SyncConfiguration;\n+import org.smartregister.domain.Response;\n+import org.smartregister.domain.ResponseStatus;\n+import org.smartregister.repository.UniqueIdRepository;\n+import org.smartregister.service.HTTPAgent;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Created by Richard Kareko on 10/27/20.\n+ */\n+\n+public class PullUniqueIdsIntentServiceTest extends BaseUnitTest {\n+\n+    @Mock\n+    private UniqueIdRepository uniqueIdRepo;\n+\n+    @Mock\n+    private SyncConfiguration syncConfiguration;\n+\n+    @Mock\n+    private HTTPAgent httpAgent;\n+\n+    @Captor\n+    private ArgumentCaptor<List<String>> listArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptor;\n+\n+    private PullUniqueIdsIntentService pullUniqueIdsIntentService;\n+\n+    private String identifiersJsonString = \"{\\n\" +\n+            \"    \\\"identifiers\\\": [\\n\" +\n+            \"        \\\"1780900-5\\\",\\n\" +\n+            \"        \\\"1780901-3\\\"\\n\" +\n+            \"    ]\\n\" +\n+            \"}\\n\";\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        Whitebox.setInternalState(CoreLibrary.getInstance(), \"syncConfiguration\", syncConfiguration);\n+        CoreLibrary.getInstance().context().allSharedPreferences().savePreference(AllConstants.DRISHTI_BASE_URL, \"https://sample-stage.smartregister.org/opensrp\");\n+        pullUniqueIdsIntentService = Mockito.spy(PullUniqueIdsIntentService.class);\n+        Whitebox.setInternalState(pullUniqueIdsIntentService, \"mBase\", RuntimeEnvironment.application);\n+        Whitebox.setInternalState(pullUniqueIdsIntentService, \"uniqueIdRepo\", uniqueIdRepo);\n+        Mockito.doReturn(httpAgent).when(pullUniqueIdsIntentService).getHttpAgent();\n+    }\n+\n+    @Test\n+    public void testParseResponse() throws Exception {\n+\n+        JSONObject identifiersJson = new JSONObject(identifiersJsonString);\n+        Whitebox.invokeMethod(pullUniqueIdsIntentService, \"parseResponse\", identifiersJson);\n+\n+        verify(uniqueIdRepo).bulkInsertOpenmrsIds(listArgumentCaptor.capture());\n+        List<String> actualIdentifierList = listArgumentCaptor.getAllValues().get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1da663eac70eb901f61a9226b68ab63419e48dbd"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA0MjgwNw==", "bodyText": "updated", "url": "https://github.com/opensrp/opensrp-client-core/pull/673#discussion_r514042807", "createdAt": "2020-10-29T07:10:33Z", "author": {"login": "Rkareko"}, "path": "opensrp-app/src/test/java/org/smartregister/sync/intent/PullUniqueIdsIntentServiceTest.java", "diffHunk": "@@ -0,0 +1,100 @@\n+package org.smartregister.sync.intent;\n+\n+import org.json.JSONArray;\n+import org.json.JSONObject;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Captor;\n+import org.mockito.Mock;\n+import org.mockito.Mockito;\n+import org.mockito.MockitoAnnotations;\n+import org.powermock.reflect.Whitebox;\n+import org.robolectric.RuntimeEnvironment;\n+import org.smartregister.AllConstants;\n+import org.smartregister.BaseUnitTest;\n+import org.smartregister.CoreLibrary;\n+import org.smartregister.SyncConfiguration;\n+import org.smartregister.domain.Response;\n+import org.smartregister.domain.ResponseStatus;\n+import org.smartregister.repository.UniqueIdRepository;\n+import org.smartregister.service.HTTPAgent;\n+\n+import java.util.List;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.mockito.Mockito.verify;\n+\n+/**\n+ * Created by Richard Kareko on 10/27/20.\n+ */\n+\n+public class PullUniqueIdsIntentServiceTest extends BaseUnitTest {\n+\n+    @Mock\n+    private UniqueIdRepository uniqueIdRepo;\n+\n+    @Mock\n+    private SyncConfiguration syncConfiguration;\n+\n+    @Mock\n+    private HTTPAgent httpAgent;\n+\n+    @Captor\n+    private ArgumentCaptor<List<String>> listArgumentCaptor;\n+\n+    @Captor\n+    private ArgumentCaptor<String> stringArgumentCaptor;\n+\n+    private PullUniqueIdsIntentService pullUniqueIdsIntentService;\n+\n+    private String identifiersJsonString = \"{\\n\" +\n+            \"    \\\"identifiers\\\": [\\n\" +\n+            \"        \\\"1780900-5\\\",\\n\" +\n+            \"        \\\"1780901-3\\\"\\n\" +\n+            \"    ]\\n\" +\n+            \"}\\n\";\n+\n+    @Before\n+    public void setUp() {\n+        MockitoAnnotations.initMocks(this);\n+        Whitebox.setInternalState(CoreLibrary.getInstance(), \"syncConfiguration\", syncConfiguration);\n+        CoreLibrary.getInstance().context().allSharedPreferences().savePreference(AllConstants.DRISHTI_BASE_URL, \"https://sample-stage.smartregister.org/opensrp\");\n+        pullUniqueIdsIntentService = Mockito.spy(PullUniqueIdsIntentService.class);\n+        Whitebox.setInternalState(pullUniqueIdsIntentService, \"mBase\", RuntimeEnvironment.application);\n+        Whitebox.setInternalState(pullUniqueIdsIntentService, \"uniqueIdRepo\", uniqueIdRepo);\n+        Mockito.doReturn(httpAgent).when(pullUniqueIdsIntentService).getHttpAgent();\n+    }\n+\n+    @Test\n+    public void testParseResponse() throws Exception {\n+\n+        JSONObject identifiersJson = new JSONObject(identifiersJsonString);\n+        Whitebox.invokeMethod(pullUniqueIdsIntentService, \"parseResponse\", identifiersJson);\n+\n+        verify(uniqueIdRepo).bulkInsertOpenmrsIds(listArgumentCaptor.capture());\n+        List<String> actualIdentifierList = listArgumentCaptor.getAllValues().get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzIyNDg3Mw=="}, "originalCommit": {"oid": "1da663eac70eb901f61a9226b68ab63419e48dbd"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2118, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}