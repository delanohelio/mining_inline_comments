{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDM4Mjc5", "number": 1470, "title": "Dates Multiple badge status", "bodyText": "Description\nLEARNER-7936\n\nAdded Multiple badge status at the end of the title move to the multiple lines.\nUpdate badges status logic and parity with the web.\nImplement the ChipDrawable element for the badge.\n\n\n\nRefs:\nhttps://material.io/develop/android/docs/getting-started\nhttps://material.io/develop/android/components/chips\nPoints not covered:\n\nChipDrawable required new Theme.MaterialComponents, that produce some UI glitch that needs to cover as Part of LEARNER-7964\nChipDrawable does not support Calligraphy and assets fonts, so will cover badge fonts as part of LEARNER-7964\ncc: @miankhalid", "createdAt": "2020-10-15T11:43:26Z", "url": "https://github.com/edx/edx-app-android/pull/1470", "merged": true, "mergeCommit": {"oid": "a18705f4e7fe07cd865b4122ec4a44283ad6ef87"}, "closed": true, "closedAt": "2020-10-29T04:58:16Z", "author": {"login": "farhan-arshad-dev"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUYqaVAFqTUxMjY3ODg3OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABde9KdmAH2gAyNTA0MDM4Mjc5OjIyOWEzYjIwZGNkZTkyNTkxNDE0NTE0YWUzMDBkN2I2YzRiOTlmZjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyNjc4ODc5", "url": "https://github.com/edx/edx-app-android/pull/1470#pullrequestreview-512678879", "createdAt": "2020-10-20T12:59:31Z", "commit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjo1OTozMVrOHk7Gfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMzoxODo0NVrOHk79lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ3OTEwMg==", "bodyText": "can we add <item name=\"android:textStyle\">bold|italic</item> to meet the designs", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508479102", "createdAt": "2020-10-20T12:59:31Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dates_badge_text_styles.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<resources>\n+\n+    <style name=\"dates_badge_text_appearance\">\n+        <item name=\"android:textSize\">@dimen/edx_small</item>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MDczOA==", "bodyText": "we can set badge start padding to 0", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508480738", "createdAt": "2020-10-20T13:01:45Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -266,5 +266,7 @@\n     <dimen name=\"width_hairline\">0.8dp</dimen>\n     <dimen name=\"date_block_badge_corner_margin\">6dp</dimen>\n     <dimen name=\"date_block_half_x_margin\">10dp</dimen>\n+    <dimen name=\"dates_badge_end_padding\">4dp</dimen>\n+    <dimen name=\"dates_badge_start_padding\">2dp</dimen>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4Mjg1Nw==", "bodyText": "also please add these\n<dimen name=\"dates_badge_icon_start_padding\">4dp</dimen>\n<dimen name=\"dates_badge_icon_end_padding\">-4dp</dimen>\nto use them for chip iconDrawablePadding", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508482857", "createdAt": "2020-10-20T13:04:43Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -266,5 +266,7 @@\n     <dimen name=\"width_hairline\">0.8dp</dimen>\n     <dimen name=\"date_block_badge_corner_margin\">6dp</dimen>\n     <dimen name=\"date_block_half_x_margin\">10dp</dimen>\n+    <dimen name=\"dates_badge_end_padding\">4dp</dimen>\n+    <dimen name=\"dates_badge_start_padding\">2dp</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4MDczOA=="}, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4NjQ0NA==", "bodyText": "Please also mention in doc why we need this check", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508486444", "createdAt": "2020-10-20T13:09:42Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +123,109 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:isToday\", \"binding:dateBlockItems\", requireAll = true)\n+        fun setBadge(textView: TextView, type: CourseDateType, isToday: Boolean,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?) {\n+            if (!hasSameDateTypes(dateBlockItems) && !isToday) {\n+                return\n+            }\n+            var courseDateType = type\n+            // check dateBlockItems not null its means we can adding the badge in Parent date view\n+            if (isToday && dateBlockItems != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4NjgyOA==", "bodyText": "Doc required", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508486828", "createdAt": "2020-10-20T13:10:15Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +123,109 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:isToday\", \"binding:dateBlockItems\", requireAll = true)\n+        fun setBadge(textView: TextView, type: CourseDateType, isToday: Boolean,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?) {\n+            if (!hasSameDateTypes(dateBlockItems) && !isToday) {\n+                return\n+            }\n+            var courseDateType = type\n+            // check dateBlockItems not null its means we can adding the badge in Parent date view\n+            if (isToday && dateBlockItems != null) {\n+                courseDateType = CourseDateType.TODAY\n+            }\n+            val badgeBackground: Int\n+            val textAppearance: Int\n+            var badgeStrokeColor: Int = -1\n+            var badgeIcon: IconDrawable? = null\n+            when (courseDateType) {\n+                CourseDateType.TODAY -> {\n+                    badgeBackground = R.color.course_today_date\n+                    textAppearance = R.style.today_date_badge_text_appearance\n+                }\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    badgeBackground = R.color.black\n+                    textAppearance = R.style.verified_only_badge_text_appearance\n+                    badgeIcon = IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                            .sizeRes(textView.context, R.dimen.small_icon_size)\n+                            .colorRes(textView.context, R.color.white)\n+                }\n+                CourseDateType.COMPLETED -> {\n+                    badgeBackground = R.color.tag_light_silver\n+                    textAppearance = R.style.completed_badge_text_appearance\n+                }\n+                CourseDateType.PAST_DUE -> {\n+                    badgeBackground = R.color.bullet_light_gray\n+                    textAppearance = R.style.past_due_badge_text_appearance\n+                }\n+                CourseDateType.DUE_NEXT -> {\n+                    badgeBackground = R.color.bullet_dark_gray\n+                    textAppearance = R.style.due_next_badge_text_appearance\n+                }\n+                CourseDateType.NOT_YET_RELEASED -> {\n+                    badgeBackground = android.R.color.transparent\n+                    textAppearance = R.style.not_yet_released_badge_text_appearance\n+                    badgeStrokeColor = R.color.tag_light_silver_border\n+                }\n+                else -> {\n+                    return\n+                }\n+            }\n+            addDateBadge(textView, courseDateType.getTitle(), badgeBackground, textAppearance, badgeIcon, badgeStrokeColor)\n+            if (isToday && type == CourseDateType.COMPLETED) {\n+                setBadge(textView, type, false, dateBlockItems)\n+            }\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ4OTQ4Ng==", "bodyText": "Please add chipIcon size and padding i.e,\nchipDrawable.chipIconSize = textView.context.resources.getDimension(R.dimen.small_icon_size) chipDrawable.setIconStartPaddingResource(R.dimen.dates_badge_icon_start_padding) chipDrawable.setIconEndPaddingResource(R.dimen.dates_badge_icon_end_padding)", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508489486", "createdAt": "2020-10-20T13:13:47Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +123,109 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:isToday\", \"binding:dateBlockItems\", requireAll = true)\n+        fun setBadge(textView: TextView, type: CourseDateType, isToday: Boolean,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?) {\n+            if (!hasSameDateTypes(dateBlockItems) && !isToday) {\n+                return\n+            }\n+            var courseDateType = type\n+            // check dateBlockItems not null its means we can adding the badge in Parent date view\n+            if (isToday && dateBlockItems != null) {\n+                courseDateType = CourseDateType.TODAY\n+            }\n+            val badgeBackground: Int\n+            val textAppearance: Int\n+            var badgeStrokeColor: Int = -1\n+            var badgeIcon: IconDrawable? = null\n+            when (courseDateType) {\n+                CourseDateType.TODAY -> {\n+                    badgeBackground = R.color.course_today_date\n+                    textAppearance = R.style.today_date_badge_text_appearance\n+                }\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    badgeBackground = R.color.black\n+                    textAppearance = R.style.verified_only_badge_text_appearance\n+                    badgeIcon = IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                            .sizeRes(textView.context, R.dimen.small_icon_size)\n+                            .colorRes(textView.context, R.color.white)\n+                }\n+                CourseDateType.COMPLETED -> {\n+                    badgeBackground = R.color.tag_light_silver\n+                    textAppearance = R.style.completed_badge_text_appearance\n+                }\n+                CourseDateType.PAST_DUE -> {\n+                    badgeBackground = R.color.bullet_light_gray\n+                    textAppearance = R.style.past_due_badge_text_appearance\n+                }\n+                CourseDateType.DUE_NEXT -> {\n+                    badgeBackground = R.color.bullet_dark_gray\n+                    textAppearance = R.style.due_next_badge_text_appearance\n+                }\n+                CourseDateType.NOT_YET_RELEASED -> {\n+                    badgeBackground = android.R.color.transparent\n+                    textAppearance = R.style.not_yet_released_badge_text_appearance\n+                    badgeStrokeColor = R.color.tag_light_silver_border\n+                }\n+                else -> {\n+                    return\n+                }\n+            }\n+            addDateBadge(textView, courseDateType.getTitle(), badgeBackground, textAppearance, badgeIcon, badgeStrokeColor)\n+            if (isToday && type == CourseDateType.COMPLETED) {\n+                setBadge(textView, type, false, dateBlockItems)\n+            }\n+        }\n+\n+        private fun hasSameDateTypes(dateBlockItems: ArrayList<CourseDateBlock>?): Boolean {\n+            if (dateBlockItems != null && dateBlockItems.isEmpty().not() && dateBlockItems.size > 1) {\n+                val dateType = dateBlockItems[0].dateBlockBadge\n+                for (i in 1 until dateBlockItems.size) {\n+                    if (dateBlockItems[i].dateBlockBadge != dateType &&\n+                            dateBlockItems[i].dateBlockBadge != CourseDateType.BLANK) {\n+                        return false\n                     }\n                 }\n             }\n-            textView.visibility = View.VISIBLE\n+            return true\n+        }\n+\n+        /**\n+         * Method to add the date badge at the end in given title with styles attributes\n+         */\n+        private fun addDateBadge(textView: TextView, title: String, badgeBackground: Int,\n+                                 textAppearance: Int,\n+                                 badgeIcon: IconDrawable?,\n+                                 badgeStrokeColor: Int) {\n+            // add badge title so can identify the actual badge position\n+            val titleWithBadge = SpannableStringBuilder((textView.text as Spannable))\n+            // add space before badge title\n+            titleWithBadge.append(\"  $title\")\n+            textView.setText(titleWithBadge, TextView.BufferType.SPANNABLE)\n+\n+            // setup the date badge\n+            val string = textView.text as Spannable\n+            val chipDrawable = ChipDrawable.createFromResource(textView.context,\n+                    R.xml.dates_badge_chip)\n+            chipDrawable.text = title\n+            chipDrawable.setChipBackgroundColorResource(badgeBackground)\n+            chipDrawable.setTextAppearanceResource(textAppearance)\n+            if (badgeIcon != null) {\n+                chipDrawable.chipIcon = badgeIcon", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ5MzIwNg==", "bodyText": "IMO, we can reduce the chipDrawable spacing n size by this\nchipDrawable.setBounds(0, (chipDrawable.intrinsicHeight * -.12).toInt(), chipDrawable.intrinsicWidth, (chipDrawable.intrinsicHeight * .6).toInt())", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r508493206", "createdAt": "2020-10-20T13:18:45Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +123,109 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:isToday\", \"binding:dateBlockItems\", requireAll = true)\n+        fun setBadge(textView: TextView, type: CourseDateType, isToday: Boolean,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?) {\n+            if (!hasSameDateTypes(dateBlockItems) && !isToday) {\n+                return\n+            }\n+            var courseDateType = type\n+            // check dateBlockItems not null its means we can adding the badge in Parent date view\n+            if (isToday && dateBlockItems != null) {\n+                courseDateType = CourseDateType.TODAY\n+            }\n+            val badgeBackground: Int\n+            val textAppearance: Int\n+            var badgeStrokeColor: Int = -1\n+            var badgeIcon: IconDrawable? = null\n+            when (courseDateType) {\n+                CourseDateType.TODAY -> {\n+                    badgeBackground = R.color.course_today_date\n+                    textAppearance = R.style.today_date_badge_text_appearance\n+                }\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    badgeBackground = R.color.black\n+                    textAppearance = R.style.verified_only_badge_text_appearance\n+                    badgeIcon = IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                            .sizeRes(textView.context, R.dimen.small_icon_size)\n+                            .colorRes(textView.context, R.color.white)\n+                }\n+                CourseDateType.COMPLETED -> {\n+                    badgeBackground = R.color.tag_light_silver\n+                    textAppearance = R.style.completed_badge_text_appearance\n+                }\n+                CourseDateType.PAST_DUE -> {\n+                    badgeBackground = R.color.bullet_light_gray\n+                    textAppearance = R.style.past_due_badge_text_appearance\n+                }\n+                CourseDateType.DUE_NEXT -> {\n+                    badgeBackground = R.color.bullet_dark_gray\n+                    textAppearance = R.style.due_next_badge_text_appearance\n+                }\n+                CourseDateType.NOT_YET_RELEASED -> {\n+                    badgeBackground = android.R.color.transparent\n+                    textAppearance = R.style.not_yet_released_badge_text_appearance\n+                    badgeStrokeColor = R.color.tag_light_silver_border\n+                }\n+                else -> {\n+                    return\n+                }\n+            }\n+            addDateBadge(textView, courseDateType.getTitle(), badgeBackground, textAppearance, badgeIcon, badgeStrokeColor)\n+            if (isToday && type == CourseDateType.COMPLETED) {\n+                setBadge(textView, type, false, dateBlockItems)\n+            }\n+        }\n+\n+        private fun hasSameDateTypes(dateBlockItems: ArrayList<CourseDateBlock>?): Boolean {\n+            if (dateBlockItems != null && dateBlockItems.isEmpty().not() && dateBlockItems.size > 1) {\n+                val dateType = dateBlockItems[0].dateBlockBadge\n+                for (i in 1 until dateBlockItems.size) {\n+                    if (dateBlockItems[i].dateBlockBadge != dateType &&\n+                            dateBlockItems[i].dateBlockBadge != CourseDateType.BLANK) {\n+                        return false\n                     }\n                 }\n             }\n-            textView.visibility = View.VISIBLE\n+            return true\n+        }\n+\n+        /**\n+         * Method to add the date badge at the end in given title with styles attributes\n+         */\n+        private fun addDateBadge(textView: TextView, title: String, badgeBackground: Int,\n+                                 textAppearance: Int,\n+                                 badgeIcon: IconDrawable?,\n+                                 badgeStrokeColor: Int) {\n+            // add badge title so can identify the actual badge position\n+            val titleWithBadge = SpannableStringBuilder((textView.text as Spannable))\n+            // add space before badge title\n+            titleWithBadge.append(\"  $title\")\n+            textView.setText(titleWithBadge, TextView.BufferType.SPANNABLE)\n+\n+            // setup the date badge\n+            val string = textView.text as Spannable\n+            val chipDrawable = ChipDrawable.createFromResource(textView.context,\n+                    R.xml.dates_badge_chip)\n+            chipDrawable.text = title\n+            chipDrawable.setChipBackgroundColorResource(badgeBackground)\n+            chipDrawable.setTextAppearanceResource(textAppearance)\n+            if (badgeIcon != null) {\n+                chipDrawable.chipIcon = badgeIcon\n+            }\n+            if (badgeStrokeColor != -1) {\n+                chipDrawable.setChipStrokeColorResource(badgeStrokeColor)\n+                chipDrawable.strokeWidth = ParsingUtil.dpToPx(textView.context, 1.0F)\n+            }\n+            // Reduce the chip height to match with the provided design.\n+            chipDrawable.setBounds(0, (chipDrawable.intrinsicHeight * .1).toInt(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8"}, "originalPosition": 214}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d7b7cfc315da01717c2285eae3f6e0b4b95159b", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/5d7b7cfc315da01717c2285eae3f6e0b4b95159b", "committedDate": "2020-10-21T23:01:09Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80a7dc423f5ef4c50c6c55d3bce3e40dad8f58ec", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/80a7dc423f5ef4c50c6c55d3bce3e40dad8f58ec", "committedDate": "2020-10-22T07:45:13Z", "message": "Increase Line Spacing with web parity, Fix issue in case of item sub date item have different data_type with no badge"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fa6fbc2e9e453d7fa7c65a4e466e38d657112a2", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/5fa6fbc2e9e453d7fa7c65a4e466e38d657112a2", "committedDate": "2020-08-18T08:15:24Z", "message": "Fix minot issue of badge placement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd3b724ffee934c977589e805892fe21da577686", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/dd3b724ffee934c977589e805892fe21da577686", "committedDate": "2020-10-22T12:22:46Z", "message": "Remove duplicate material dependencies"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE0NjYxMzM0", "url": "https://github.com/edx/edx-app-android/pull/1470#pullrequestreview-514661334", "createdAt": "2020-10-22T12:18:45Z", "commit": {"oid": "5fa6fbc2e9e453d7fa7c65a4e466e38d657112a2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMjoxODo0NVrOHme3cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMlQxMzoyNjoyNVrOHmhrIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDExMzY1MQ==", "bodyText": "Can we add some doc here?\ni.e, Handling the expired course as a separate entity when a different set of blocks lay in a single date.", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r510113651", "createdAt": "2020-10-22T12:18:45Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/CourseDateType.kt", "diffHunk": "@@ -4,7 +4,9 @@ package org.edx.mobile.util\n  * This enum defines the Date type of Course Dates\n  */\n enum class CourseDateType {\n-    TODAY, BLANK, VERIFIED_ONLY, COMPLETED, PAST_DUE, DUE_NEXT, NOT_YET_RELEASED;\n+    TODAY, BLANK, VERIFIED_ONLY, COMPLETED, PAST_DUE, DUE_NEXT, NOT_YET_RELEASED,\n+    // No badge title and icon", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa6fbc2e9e453d7fa7c65a4e466e38d657112a2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1OTEzMw==", "bodyText": "Can we replace it with\nif (item.title.isNotBlank()) childView.title.visibility = View.VISIBLE", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r510159133", "createdAt": "2020-10-22T13:25:37Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -75,17 +81,21 @@ class DataBindingHelperUtils {\n                     }\n \n                     isViewVisible(childView.title, item.title.isNullOrBlank().not())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa6fbc2e9e453d7fa7c65a4e466e38d657112a2"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDE1OTY0OA==", "bodyText": "have to handle other cases as well", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r510159648", "createdAt": "2020-10-22T13:26:25Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +124,119 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:isToday\", \"binding:dateBlockItems\", requireAll = true)\n+        fun setBadge(textView: TextView, type: CourseDateType, isToday: Boolean,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?) {\n+            if (!hasSameDateTypes(dateBlockItems) && !isToday) {\n+                return\n+            }\n+            var courseDateType = type\n+            // check isToday is true then enforce the course dateType to add `TODAY` badge\n+            if (isToday) {\n+                courseDateType = CourseDateType.TODAY\n+            }\n+            val badgeBackground: Int\n+            val textAppearance: Int\n+            var badgeStrokeColor: Int = -1\n+            var badgeIcon: IconDrawable? = null\n+            when (courseDateType) {\n+                CourseDateType.TODAY -> {\n+                    badgeBackground = R.color.course_today_date\n+                    textAppearance = R.style.today_date_badge_text_appearance\n+                }\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    badgeBackground = R.color.black\n+                    textAppearance = R.style.verified_only_badge_text_appearance\n+                    badgeIcon = IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                            .sizeRes(textView.context, R.dimen.small_icon_size)\n+                            .colorRes(textView.context, R.color.white)\n+                }\n+                CourseDateType.COMPLETED -> {\n+                    badgeBackground = R.color.tag_light_silver\n+                    textAppearance = R.style.completed_badge_text_appearance\n+                }\n+                CourseDateType.PAST_DUE -> {\n+                    badgeBackground = R.color.bullet_light_gray\n+                    textAppearance = R.style.past_due_badge_text_appearance\n+                }\n+                CourseDateType.DUE_NEXT -> {\n+                    badgeBackground = R.color.bullet_dark_gray\n+                    textAppearance = R.style.due_next_badge_text_appearance\n+                }\n+                CourseDateType.NOT_YET_RELEASED -> {\n+                    badgeBackground = android.R.color.transparent\n+                    textAppearance = R.style.not_yet_released_badge_text_appearance\n+                    badgeStrokeColor = R.color.tag_light_silver_border\n+                }\n+                else -> {\n+                    return\n+                }\n+            }\n+            addDateBadge(textView, courseDateType.getTitle(), badgeBackground, textAppearance, badgeIcon, badgeStrokeColor)\n+            // Check to add multiple badges if course date is match to the current date and also\n+            // marked as completed\n+            if (isToday && type == CourseDateType.COMPLETED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fa6fbc2e9e453d7fa7c65a4e466e38d657112a2"}, "originalPosition": 170}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88ba59a1cfb6e71a93a17ee320f0aefbda4f1312", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/88ba59a1cfb6e71a93a17ee320f0aefbda4f1312", "committedDate": "2020-10-22T19:46:18Z", "message": "Address PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bc634a5bd8cc44769a0b9b1a5c2bf369ea07e9f5", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/bc634a5bd8cc44769a0b9b1a5c2bf369ea07e9f5", "committedDate": "2020-10-23T00:15:03Z", "message": "Cover multi badge combinations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c43da39632147435e3c9b4599e3adf86bba0660c", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/c43da39632147435e3c9b4599e3adf86bba0660c", "committedDate": "2020-10-23T08:08:45Z", "message": "Temp code to check travis build"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0373a0a3001515293571e78b7ac45cd06293bfb", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/f0373a0a3001515293571e78b7ac45cd06293bfb", "committedDate": "2020-10-23T13:39:59Z", "message": "Ignore test case for now."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8be8c5cce25160d1feb88f6a46c51263fb68a219", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/8be8c5cce25160d1feb88f6a46c51263fb68a219", "committedDate": "2020-10-23T14:59:25Z", "message": "Ignore Launcher screen test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/26a82c3de0c9fc06873fbdcbe242dd63a1d99926", "committedDate": "2020-10-23T15:34:14Z", "message": "Add TODO"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c8e96ec6aad07f809a0cf25613bfc1d55f91e67", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/8c8e96ec6aad07f809a0cf25613bfc1d55f91e67", "committedDate": "2020-10-26T10:56:29Z", "message": "Added Material Design in support to use chip element\n- Chip element is used in dates badges that is more appropriate\n- LEARNER-7936\nRef: https://material.io/develop/android/components/chips"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c223af055f9be8172a8794fbba9bb40b0d13e691", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/c223af055f9be8172a8794fbba9bb40b0d13e691", "committedDate": "2020-10-26T10:56:29Z", "message": "Replace date badge with new chip badges"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb506c2ec4d0640ba5a1aef46af0c388d55a7f49", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/bb506c2ec4d0640ba5a1aef46af0c388d55a7f49", "committedDate": "2020-10-26T10:56:54Z", "message": "Added multiple dates badges\n- Update Date Badge Status logic."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cdc65bbb275c2deb0861fea2244a08e3a0724c8", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/7cdc65bbb275c2deb0861fea2244a08e3a0724c8", "committedDate": "2020-10-15T11:45:14Z", "message": "Remove  test font style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzAzOTg2", "url": "https://github.com/edx/edx-app-android/pull/1470#pullrequestreview-516303986", "createdAt": "2020-10-24T20:07:07Z", "commit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNFQyMDowNzowN1rOHn0D1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QyMDoyODoxOVrOHpPldg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTUwOTQ2Mw==", "bodyText": "IMO, as we already define some DateType so don't need to define doc of COURSE_EXPIRED_DATE separately", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r511509463", "createdAt": "2020-10-24T20:07:07Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/CourseDateType.kt", "diffHunk": "@@ -4,7 +4,9 @@ package org.edx.mobile.util\n  * This enum defines the Date type of Course Dates\n  */\n enum class CourseDateType {\n-    TODAY, BLANK, VERIFIED_ONLY, COMPLETED, PAST_DUE, DUE_NEXT, NOT_YET_RELEASED;\n+    TODAY, BLANK, VERIFIED_ONLY, COMPLETED, PAST_DUE, DUE_NEXT, NOT_YET_RELEASED,\n+    // Handling the expired course as a separate entity when a different set of blocks lay in a single date.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5MzgxNw==", "bodyText": "same here", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r512993817", "createdAt": "2020-10-27T20:01:00Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -27,6 +28,7 @@\n             android:layout_height=\"wrap_content\"\n             android:textColor=\"@color/switch_text_color\"\n             android:textSize=\"@dimen/edx_small\"\n+            android:lineSpacingMultiplier=\"1.125\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NDAyOA==", "bodyText": "Can we define these values in dimens.xml?\nRef: Add floating point value to android resources/values", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r512994028", "createdAt": "2020-10-27T20:01:22Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -88,42 +87,18 @@\n             binding:addView=\"@{dateBlockList}\"\n             binding:clickListener=\"@{dateItemListener}\">\n \n-            <LinearLayout\n-                android:layout_width=\"match_parent\"\n+            <TextView\n+                android:id=\"@+id/date\"\n+                fontPath=\"fonts/OpenSans-Semibold.ttf\"\n+                android:layout_width=\"wrap_content\"\n                 android:layout_height=\"wrap_content\"\n-                android:orientation=\"horizontal\">\n-\n-                <TextView\n-                    android:id=\"@+id/date\"\n-                    fontPath=\"fonts/OpenSans-Semibold.ttf\"\n-                    android:layout_width=\"wrap_content\"\n-                    android:layout_height=\"wrap_content\"\n-                    android:text=\"@{dateBlock.getFormattedDate()}\"\n-                    android:textColor=\"@color/switch_text_color\"\n-                    android:textSize=\"@dimen/edx_large\"\n-                    tools:text=\"Wed, Aug 12, 2020\" />\n-\n-                <TextView\n-                    android:id=\"@+id/date_tag\"\n-                    fontPath=\"fonts/OpenSans-SemiboldItalic.ttf\"\n-                    android:layout_width=\"wrap_content\"\n-                    android:layout_height=\"wrap_content\"\n-                    android:layout_marginStart=\"@dimen/edx_half_margin\"\n-                    android:layout_marginBottom=\"@dimen/widget_margin_half\"\n-                    android:drawablePadding=\"@dimen/widget_margin_half\"\n-                    android:paddingStart=\"@dimen/edx_half_margin\"\n-                    android:paddingTop=\"3dp\"\n-                    android:paddingEnd=\"@dimen/edx_half_margin\"\n-                    android:paddingBottom=\"3dp\"\n-                    android:textColor=\"@color/white\"\n-                    android:textSize=\"@dimen/edx_small\"\n-                    binding:badgeBackground=\"@{dateBlock.dateBlockBadge}\"\n-                    binding:isToday=\"@{dateBlock.today}\"\n-                    tools:background=\"@drawable/yellow_roundedbg\"\n-                    tools:text=\"Today\"\n-                    tools:visibility=\"visible\" />\n-\n-            </LinearLayout>\n+                android:lineSpacingMultiplier=\"1.25\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk5NTE0Mg==", "bodyText": "same here", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r512995142", "createdAt": "2020-10-27T20:03:29Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -14,6 +14,7 @@\n             fontPath=\"fonts/OpenSans-Semibold.ttf\"\n             android:layout_width=\"match_parent\"\n             android:layout_height=\"wrap_content\"\n+            android:lineSpacingMultiplier=\"1.25\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwODY5NQ==", "bodyText": "we can use dateBlockItems.isNotEmpty()  instead of dateBlockItems.isEmpty().not()", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r513008695", "createdAt": "2020-10-27T20:27:46Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +124,121 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:dateBlockItems\", \"binding:badgeAdded\", requireAll = false)\n+        fun setBadge(textView: TextView, dateBlock: CourseDateBlock,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?,\n+                     parentBadgeAdded: Boolean = false) {\n+            // Check Today's badge is already added or not\n+            if (dateBlock.isToday() && !parentBadgeAdded) {\n+                createBadge(textView, CourseDateType.TODAY)\n+            }\n+            // add date badge at second position OR sub date item other then Today's badge\n+            if (hasSameDateTypes(dateBlockItems) && !dateBlock.isDateTypeToday()) {\n+                createBadge(textView, dateBlock.dateBlockBadge)\n+            }\n+        }\n+\n+        /**\n+         * Method to create the Date badge as per given DateType\n+         */\n+        private fun createBadge(textView: TextView, courseDateType: CourseDateType) {\n+            val badgeBackground: Int\n+            val textAppearance: Int\n+            var badgeStrokeColor: Int = -1\n+            var badgeIcon: IconDrawable? = null\n+            when (courseDateType) {\n+                CourseDateType.TODAY -> {\n+                    badgeBackground = R.color.course_today_date\n+                    textAppearance = R.style.today_date_badge_text_appearance\n+                }\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    badgeBackground = R.color.black\n+                    textAppearance = R.style.verified_only_badge_text_appearance\n+                    badgeIcon = IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                            .sizeRes(textView.context, R.dimen.small_icon_size)\n+                            .colorRes(textView.context, R.color.white)\n+                }\n+                CourseDateType.COMPLETED -> {\n+                    badgeBackground = R.color.tag_light_silver\n+                    textAppearance = R.style.completed_badge_text_appearance\n+                }\n+                CourseDateType.PAST_DUE -> {\n+                    badgeBackground = R.color.bullet_light_gray\n+                    textAppearance = R.style.past_due_badge_text_appearance\n+                }\n+                CourseDateType.DUE_NEXT -> {\n+                    badgeBackground = R.color.bullet_dark_gray\n+                    textAppearance = R.style.due_next_badge_text_appearance\n+                }\n+                CourseDateType.NOT_YET_RELEASED -> {\n+                    badgeBackground = android.R.color.transparent\n+                    textAppearance = R.style.not_yet_released_badge_text_appearance\n+                    badgeStrokeColor = R.color.tag_light_silver_border\n+                }\n+                else -> {\n+                    return\n+                }\n+            }\n+            addDateBadge(textView, courseDateType.getTitle(), badgeBackground, textAppearance, badgeIcon, badgeStrokeColor)\n+        }\n+\n+        /**\n+         * Method to check that all Date Items have same badge status or not\n+         *\n+         * @return true if all the date items have update badge status else false\n+         * */\n+        private fun hasSameDateTypes(dateBlockItems: ArrayList<CourseDateBlock>?): Boolean {\n+            if (dateBlockItems != null && dateBlockItems.isEmpty().not() && dateBlockItems.size > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMzAwOTAxNA==", "bodyText": "IMO, we can use dateBlockItems.first() instead of dateBlockItems[0]", "url": "https://github.com/edx/edx-app-android/pull/1470#discussion_r513009014", "createdAt": "2020-10-27T20:28:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -114,47 +124,121 @@ class DataBindingHelperUtils {\n         }\n \n         @JvmStatic\n-        @BindingAdapter(\"binding:badgeBackground\", \"binding:isToday\", requireAll = true)\n-        fun setBadgeBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n-            if (isToday || type == CourseDateType.TODAY) {\n-                textView.text = CourseDateType.TODAY.getTitle()\n-                textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_black))\n-                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n-            } else {\n-                setText(textView, type.getTitle())\n-                when (type) {\n-                    CourseDateType.VERIFIED_ONLY -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n-                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n-                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n-                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n-                                        .colorRes(textView.context, R.color.white),\n-                                null, null, null\n-                        )\n-                    }\n-                    CourseDateType.COMPLETED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n-                    }\n-                    CourseDateType.PAST_DUE -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_gray))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n-                    }\n-                    CourseDateType.DUE_NEXT -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_white))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n-                    }\n-                    CourseDateType.NOT_YET_RELEASED -> {\n-                        textView.setTextColor(ContextCompat.getColor(textView.context, R.color.course_date_badge_silver))\n-                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n-                    }\n-                    else -> {\n-                        textView.visibility = View.INVISIBLE\n+        @BindingAdapter(\"binding:badge\", \"binding:dateBlockItems\", \"binding:badgeAdded\", requireAll = false)\n+        fun setBadge(textView: TextView, dateBlock: CourseDateBlock,\n+                     dateBlockItems: ArrayList<CourseDateBlock>?,\n+                     parentBadgeAdded: Boolean = false) {\n+            // Check Today's badge is already added or not\n+            if (dateBlock.isToday() && !parentBadgeAdded) {\n+                createBadge(textView, CourseDateType.TODAY)\n+            }\n+            // add date badge at second position OR sub date item other then Today's badge\n+            if (hasSameDateTypes(dateBlockItems) && !dateBlock.isDateTypeToday()) {\n+                createBadge(textView, dateBlock.dateBlockBadge)\n+            }\n+        }\n+\n+        /**\n+         * Method to create the Date badge as per given DateType\n+         */\n+        private fun createBadge(textView: TextView, courseDateType: CourseDateType) {\n+            val badgeBackground: Int\n+            val textAppearance: Int\n+            var badgeStrokeColor: Int = -1\n+            var badgeIcon: IconDrawable? = null\n+            when (courseDateType) {\n+                CourseDateType.TODAY -> {\n+                    badgeBackground = R.color.course_today_date\n+                    textAppearance = R.style.today_date_badge_text_appearance\n+                }\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    badgeBackground = R.color.black\n+                    textAppearance = R.style.verified_only_badge_text_appearance\n+                    badgeIcon = IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                            .sizeRes(textView.context, R.dimen.small_icon_size)\n+                            .colorRes(textView.context, R.color.white)\n+                }\n+                CourseDateType.COMPLETED -> {\n+                    badgeBackground = R.color.tag_light_silver\n+                    textAppearance = R.style.completed_badge_text_appearance\n+                }\n+                CourseDateType.PAST_DUE -> {\n+                    badgeBackground = R.color.bullet_light_gray\n+                    textAppearance = R.style.past_due_badge_text_appearance\n+                }\n+                CourseDateType.DUE_NEXT -> {\n+                    badgeBackground = R.color.bullet_dark_gray\n+                    textAppearance = R.style.due_next_badge_text_appearance\n+                }\n+                CourseDateType.NOT_YET_RELEASED -> {\n+                    badgeBackground = android.R.color.transparent\n+                    textAppearance = R.style.not_yet_released_badge_text_appearance\n+                    badgeStrokeColor = R.color.tag_light_silver_border\n+                }\n+                else -> {\n+                    return\n+                }\n+            }\n+            addDateBadge(textView, courseDateType.getTitle(), badgeBackground, textAppearance, badgeIcon, badgeStrokeColor)\n+        }\n+\n+        /**\n+         * Method to check that all Date Items have same badge status or not\n+         *\n+         * @return true if all the date items have update badge status else false\n+         * */\n+        private fun hasSameDateTypes(dateBlockItems: ArrayList<CourseDateBlock>?): Boolean {\n+            if (dateBlockItems != null && dateBlockItems.isEmpty().not() && dateBlockItems.size > 1) {\n+                val dateType = dateBlockItems[0].dateBlockBadge", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26a82c3de0c9fc06873fbdcbe242dd63a1d99926"}, "originalPosition": 186}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5MDY3ODMz", "url": "https://github.com/edx/edx-app-android/pull/1470#pullrequestreview-519067833", "createdAt": "2020-10-28T20:44:03Z", "commit": {"oid": "229a3b20dcde92591414514ae300d7b6c4b99ff1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "229a3b20dcde92591414514ae300d7b6c4b99ff1", "author": {"user": {"login": "farhan-arshad-dev", "name": "Farhan Arshad"}}, "url": "https://github.com/edx/edx-app-android/commit/229a3b20dcde92591414514ae300d7b6c4b99ff1", "committedDate": "2020-11-22T09:30:36Z", "message": "Address PR comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4239, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}