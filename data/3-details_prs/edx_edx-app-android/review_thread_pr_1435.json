{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ2ODIyODk5", "number": 1435, "reviewThreads": {"totalCount": 128, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNTozOVrOEktpbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1MjowN1rOElid1w==", "hasNextPage": false, "hasPreviousPage": true}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMyMDc2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/values/colors.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyNTozOVrOHT0PmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozMTowNlrOHUHZlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MDk1Mg==", "bodyText": "the unused and can use @android:color/transparent/", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490540952", "createdAt": "2020-09-17T20:25:39Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/colors.xml", "diffHunk": "@@ -9,6 +9,7 @@\n \r\n     <color name=\"white\">@android:color/white</color>\r\n     <color name=\"black\">@android:color/black</color>\r\n+    <color name=\"transparent\">#00000000</color>\r", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NDgwNA==", "bodyText": "removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490854804", "createdAt": "2020-09-18T10:31:06Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/colors.xml", "diffHunk": "@@ -9,6 +9,7 @@\n \r\n     <color name=\"white\">@android:color/white</color>\r\n     <color name=\"black\">@android:color/black</color>\r\n+    <color name=\"transparent\">#00000000</color>\r", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MDk1Mg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMzODIwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/interfaces/OnDateBlockListener.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozMDoyM1rOHT0aAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo1MToyM1rOHUH_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MzYxOQ==", "bodyText": "IMO\nProvides callbacks to handle the click on the date block in the course.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490543619", "createdAt": "2020-09-17T20:30:23Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/interfaces/OnDateBlockListener.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.edx.mobile.interfaces\n+\n+/**\n+ * Provides callbacks for a date block in course to load its contents on webview.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2NDQ5OA==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490864498", "createdAt": "2020-09-18T10:51:23Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/interfaces/OnDateBlockListener.kt", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.edx.mobile.interfaces\n+\n+/**\n+ * Provides callbacks for a date block in course to load its contents on webview.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0MzYxOQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM0MDY1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozMDo1NFrOHT0bxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDozMDo1NFrOHT0bxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU0NDA2OQ==", "bodyText": "need auto-format.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490544069", "createdAt": "2020-09-17T20:30:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5NjUzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0Nzo1MVrOHT0-bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNjoxMVrOHUG7kQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1Mjk0Mw==", "bodyText": "IMO dateBlock is more appropriate variable name.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490552943", "createdAt": "2020-09-17T20:47:51Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NzEyMQ==", "bodyText": "done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490847121", "createdAt": "2020-09-18T10:16:11Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1Mjk0Mw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5NzUxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODowOVrOHT0_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNjoxOVrOHUG72g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzEwMg==", "bodyText": "IMO dateListener is more appropriate variable name.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490553102", "createdAt": "2020-09-17T20:48:09Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NzE5NA==", "bodyText": "done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490847194", "createdAt": "2020-09-18T10:16:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzEwMg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTM5OTc4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo0ODo1NVrOHT1AfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNjoyNFrOHUG8Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzQ2OQ==", "bodyText": "IMO dateBlockList is more appropriate variable name.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490553469", "createdAt": "2020-09-17T20:48:55Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"list\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NzI0Ng==", "bodyText": "done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490847246", "createdAt": "2020-09-18T10:16:24Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"list\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1MzQ2OQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTQxNjA2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo1Mzo1MVrOHT1KEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDoyOFrOHUJOeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NTkyMw==", "bodyText": "no need to override this method.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490555923", "createdAt": "2020-09-17T20:53:51Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onLinkClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }\n+\n+    override fun getItemViewType(position: Int): Int {\n+        return position\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDczMA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490884730", "createdAt": "2020-09-18T11:30:28Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onLinkClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }\n+\n+    override fun getItemViewType(position: Int): Int {\n+        return position\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NTkyMw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTQxNzg3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo1NDoyNFrOHT1LMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDozNFrOHUJOzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NjIxMQ==", "bodyText": "no need to override this method.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490556211", "createdAt": "2020-09-17T20:54:24Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onLinkClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDgxNQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490884815", "createdAt": "2020-09-18T11:30:34Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onLinkClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NjIxMQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTQyNTcwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo1Njo0OVrOHT1P-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDoyMFrOHUJOJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NzQzMg==", "bodyText": "we can directly use binding.dateType = item instated.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490557432", "createdAt": "2020-09-17T20:56:49Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onLinkClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }\n+\n+    override fun getItemViewType(position: Int): Int {\n+        return position\n+    }\n+\n+    override fun onBindViewHolder(holder: CourseDateHolder, position: Int) {\n+        if (data.isNotEmpty()) {\n+            when (position) {\n+                0 -> {\n+                    holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+                (itemCount - 1) -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+                }\n+                else -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+            }\n+            if (data.size == 1) {\n+                holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+            }\n+            val key = keys[position]\n+            if (key.equals(CourseDateBlock.getTodayDateBlock().getSimpleDateTime(), ignoreCase = true) && data[key].isNullOrEmpty()) {\n+                holder.bind(CourseDateBlock.getTodayDateBlock(), arrayListOf())\n+            } else {\n+                holder.bind(data[key]?.first(), data[key])\n+            }\n+        }\n+    }\n+\n+    class CourseDateHolder(var binding: ItemCourseDateBlockBinding, private val onLinkClick: OnDateBlockListener) : RecyclerView.ViewHolder(binding.root) {\n+        fun bind(item: CourseDateBlock?, list: ArrayList<CourseDateBlock>?) {\n+            binding.setVariable(BR.dateType, item)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDY0Ng==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490884646", "createdAt": "2020-09-18T11:30:20Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onLinkClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun getItemId(position: Int): Long {\n+        return position.toLong()\n+    }\n+\n+    override fun getItemViewType(position: Int): Int {\n+        return position\n+    }\n+\n+    override fun onBindViewHolder(holder: CourseDateHolder, position: Int) {\n+        if (data.isNotEmpty()) {\n+            when (position) {\n+                0 -> {\n+                    holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+                (itemCount - 1) -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+                }\n+                else -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+            }\n+            if (data.size == 1) {\n+                holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+            }\n+            val key = keys[position]\n+            if (key.equals(CourseDateBlock.getTodayDateBlock().getSimpleDateTime(), ignoreCase = true) && data[key].isNullOrEmpty()) {\n+                holder.bind(CourseDateBlock.getTodayDateBlock(), arrayListOf())\n+            } else {\n+                holder.bind(data[key]?.first(), data[key])\n+            }\n+        }\n+    }\n+\n+    class CourseDateHolder(var binding: ItemCourseDateBlockBinding, private val onLinkClick: OnDateBlockListener) : RecyclerView.ViewHolder(binding.root) {\n+        fun bind(item: CourseDateBlock?, list: ArrayList<CourseDateBlock>?) {\n+            binding.setVariable(BR.dateType, item)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1NzQzMg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTQzMjg0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDo1OTowMFrOHT1UWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMTo0MFrOHUI7Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1ODU1Mg==", "bodyText": "it's better to have only one method named 'fetchCourseDates'", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490558552", "createdAt": "2020-09-17T20:59:00Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.startViewModel(courseID = getStringArgument(Router.EXTRA_COURSE_ID))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTgyMw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490879823", "createdAt": "2020-09-18T11:21:40Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.startViewModel(courseID = getStringArgument(Router.EXTRA_COURSE_ID))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1ODU1Mg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTQzNzA5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMTowMDoxNlrOHT1W6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMTozNzowOVrOHUxvXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1OTIwOQ==", "bodyText": "better to have test cases against these utils methods.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490559209", "createdAt": "2020-09-17T21:00:16Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU0ODUxMA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491548510", "createdAt": "2020-09-19T21:37:09Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDU1OTIwOQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzI4NTk3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozMDoxMVrOHUZbvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMjoyMDozM1rOHUzCpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDI3MQ==", "bodyText": "We can use LinkedHashMap instated of HashMap cuz LinkedHashMap preserves the insertion order of map entries.\nref: https://docs.oracle.com/javase/6/docs/api/java/util/LinkedHashMap.html\nAfter that, there is no need for sortKeys.\nPlease verify at your end too.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491150271", "createdAt": "2020-09-18T19:30:11Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        // ArrayList to store the sorted list of dates\n+        var sortKeys: ArrayList<String> = ArrayList()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU2OTgzMQ==", "bodyText": "verified working fine", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491569831", "createdAt": "2020-09-19T22:20:33Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        // ArrayList to store the sorted list of dates\n+        var sortKeys: ArrayList<String> = ArrayList()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MDI3MQ=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzI5OTM1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozNDo1M1rOHUZjvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMjoxOTo0OVrOHUzBUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjMxNw==", "bodyText": "After using LinkedHashMap, there is no need of key , so initialize an empty list with today within addTodayBlock method, so there is no need to check the Today here.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491152317", "createdAt": "2020-09-18T19:34:53Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>,\n+                         private val keys: ArrayList<String>,\n+                         private val onDateItemClick: OnDateBlockListener\n+) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(\n+                inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onDateItemClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun onBindViewHolder(holder: CourseDateHolder, position: Int) {\n+        if (data.isNotEmpty()) {\n+            when (position) {\n+                0 -> {\n+                    holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+                (itemCount - 1) -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+                }\n+                else -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+            }\n+            if (data.size == 1) {\n+                holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+            }\n+            val key = keys[position]\n+            if (key.equals(CourseDateBlock.getTodayDateBlock().getSimpleDateTime(), ignoreCase = true) && data[key].isNullOrEmpty()) {\n+                holder.bind(CourseDateBlock.getTodayDateBlock(), arrayListOf())\n+            } else {\n+                holder.bind(data[key]?.first(), data[key])\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU2OTQ4OQ==", "bodyText": "(Y)", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491569489", "createdAt": "2020-09-19T22:19:49Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,67 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>,\n+                         private val keys: ArrayList<String>,\n+                         private val onDateItemClick: OnDateBlockListener\n+) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {\n+\n+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): CourseDatesAdapter.CourseDateHolder {\n+        val inflater = LayoutInflater.from(parent.context)\n+        val inflatedBinding = DataBindingUtil.inflate<ItemCourseDateBlockBinding>(\n+                inflater, R.layout.item_course_date_block, parent, false)\n+        return CourseDateHolder(inflatedBinding, onDateItemClick)\n+    }\n+\n+    override fun getItemCount(): Int {\n+        return keys.size\n+    }\n+\n+    override fun onBindViewHolder(holder: CourseDateHolder, position: Int) {\n+        if (data.isNotEmpty()) {\n+            when (position) {\n+                0 -> {\n+                    holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+                (itemCount - 1) -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+                }\n+                else -> {\n+                    holder.binding.lineAboveDot.visibility = View.VISIBLE\n+                    holder.binding.lineBelowDot.visibility = View.VISIBLE\n+                }\n+            }\n+            if (data.size == 1) {\n+                holder.binding.lineAboveDot.visibility = View.INVISIBLE\n+                holder.binding.lineBelowDot.visibility = View.INVISIBLE\n+            }\n+            val key = keys[position]\n+            if (key.equals(CourseDateBlock.getTodayDateBlock().getSimpleDateTime(), ignoreCase = true) && data[key].isNullOrEmpty()) {\n+                holder.bind(CourseDateBlock.getTodayDateBlock(), arrayListOf())\n+            } else {\n+                holder.bind(data[key]?.first(), data[key])\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MjMxNw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzMwNzI5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxOTozNzo0NVrOHUZoeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMjoyMToxOVrOHUzEKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzUyOQ==", "bodyText": "After using LinkedHashMap following comment needs to update to\nLinkedHashMap to store list the courseDateBlocks against their dates, also preserve the dates insertion order.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491153529", "createdAt": "2020-09-18T19:37:45Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU3MDIxOQ==", "bodyText": "(Y)", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491570219", "createdAt": "2020-09-19T22:21:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE1MzUyOQ=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzUwNDYwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDo0ODoyNFrOHUbd-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxNToyN1rOHVxNWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzYxMQ==", "bodyText": "After use of LinkedHashMap, following code will work the same.\n    fun organiseCourseDates() {\n        organiseCourseDatesInBlock()\n        if (isContainToday().not()) {\n            // Add today's date block manually if not present in the date list\n            courseDatesMap[CourseDateBlock.getTodayDateBlock().getSimpleDateTime()] = arrayListOf(CourseDateBlock.getTodayDateBlock())\n        }\n        // Sort the map entries date keys wise\n        courseDatesMap = LinkedHashMap(courseDatesMap.toSortedMap(compareBy { DateUtil.convertToDate(it) }))\n        setDateBlockBadge()\n    }\nand no need for an extra method named addTodayBlock.\nPlease verify at your end too.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491183611", "createdAt": "2020-09-18T20:48:24Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        // ArrayList to store the sorted list of dates\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockBadge()\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU2ODExOQ==", "bodyText": "thanks for sharing, implemented", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491568119", "createdAt": "2020-09-19T22:16:51Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        // ArrayList to store the sorted list of dates\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockBadge()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzYxMQ=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MTk5OQ==", "bodyText": "still needs docstring like mention above.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491741999", "createdAt": "2020-09-20T22:27:32Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        // ArrayList to store the sorted list of dates\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockBadge()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzYxMQ=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4ODM3OA==", "bodyText": "added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r492588378", "createdAt": "2020-09-22T09:15:27Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,139 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        // HashMap to store list the courseDateBlocks against their dates\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        // ArrayList to store the sorted list of dates\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockBadge()\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4MzYxMQ=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzUxOTc0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMDo1NDowOVrOHUbnEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMjowNToxNlrOHUylrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4NTkzNw==", "bodyText": "After Implement the LinkedHasMap can remove dates.sortkeys parameter.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491185937", "createdAt": "2020-09-18T20:54:09Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onDateItemClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory()).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(courseID = getStringArgument(Router.EXTRA_COURSE_ID), isSwipeRefresh = true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.fetchCourseDates(courseID = getStringArgument(Router.EXTRA_COURSE_ID), isSwipeRefresh = false)\n+    }\n+\n+    private fun initObserver() {\n+        viewModel.showLoader.observe(this, Observer { showLoader ->\n+            binding.loadingIndicator.loadingIndicator.visibility = if (showLoader) View.VISIBLE else View.GONE\n+        })\n+\n+        viewModel.courseDates.observe(this, Observer { dates ->\n+            if (dates.courseDateBlocks.isNullOrEmpty()) {\n+                viewModel.setError(HttpStatus.NO_CONTENT, getString(R.string.course_dates_unavailable_message))\n+            } else {\n+                dates.organiseCourseDates()\n+                binding.rvDates.apply {\n+                    layoutManager = LinearLayoutManager(context)\n+                    adapter = CourseDatesAdapter(dates.courseDatesMap, dates.sortKeys, onDateItemClick)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU2MjQxMw==", "bodyText": "removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491562413", "createdAt": "2020-09-19T22:05:16Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,112 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onDateItemClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory()).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(courseID = getStringArgument(Router.EXTRA_COURSE_ID), isSwipeRefresh = true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.fetchCourseDates(courseID = getStringArgument(Router.EXTRA_COURSE_ID), isSwipeRefresh = false)\n+    }\n+\n+    private fun initObserver() {\n+        viewModel.showLoader.observe(this, Observer { showLoader ->\n+            binding.loadingIndicator.loadingIndicator.visibility = if (showLoader) View.VISIBLE else View.GONE\n+        })\n+\n+        viewModel.courseDates.observe(this, Observer { dates ->\n+            if (dates.courseDateBlocks.isNullOrEmpty()) {\n+                viewModel.setError(HttpStatus.NO_CONTENT, getString(R.string.course_dates_unavailable_message))\n+            } else {\n+                dates.organiseCourseDates()\n+                binding.rvDates.apply {\n+                    layoutManager = LinearLayoutManager(context)\n+                    adapter = CourseDatesAdapter(dates.courseDatesMap, dates.sortKeys, onDateItemClick)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4NTkzNw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzU0NjUzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/values/dimens.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTowNDoxOVrOHUb2xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMTozNjo0MlrOHUxueQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4OTk1Ng==", "bodyText": "Need to remove unused dimen", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491189956", "createdAt": "2020-09-18T21:04:19Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,13 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"normal_bullet_size\">9dp</dimen>\n+    <dimen name=\"today_bullet_size\">14dp</dimen>\n+    <dimen name=\"width_hairline\">2px</dimen>\n+    <dimen name=\"date_block_badge_corner_margin\">6dp</dimen>\n+    <dimen name=\"date_block_half_margin\">8dp</dimen>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU0ODI4MQ==", "bodyText": "removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491548281", "createdAt": "2020-09-19T21:36:42Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,13 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"normal_bullet_size\">9dp</dimen>\n+    <dimen name=\"today_bullet_size\">14dp</dimen>\n+    <dimen name=\"width_hairline\">2px</dimen>\n+    <dimen name=\"date_block_badge_corner_margin\">6dp</dimen>\n+    <dimen name=\"date_block_half_margin\">8dp</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE4OTk1Ng=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzU1MDMyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/values/dimens.xml", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMTowNTo0MFrOHUb49Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxNToxOFrOHVxNDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDUxNw==", "bodyText": "use 1dp instated of 2px", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491190517", "createdAt": "2020-09-18T21:05:40Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,13 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"normal_bullet_size\">9dp</dimen>\n+    <dimen name=\"today_bullet_size\">14dp</dimen>\n+    <dimen name=\"width_hairline\">2px</dimen>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU0ODI0OQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491548249", "createdAt": "2020-09-19T21:36:36Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,13 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"normal_bullet_size\">9dp</dimen>\n+    <dimen name=\"today_bullet_size\">14dp</dimen>\n+    <dimen name=\"width_hairline\">2px</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDUxNw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MjA5MA==", "bodyText": "better to change it to 1dp. as look good on the Nexus-5 as a base device.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491742090", "createdAt": "2020-09-20T22:28:30Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,13 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"normal_bullet_size\">9dp</dimen>\n+    <dimen name=\"today_bullet_size\">14dp</dimen>\n+    <dimen name=\"width_hairline\">2px</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDUxNw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4ODMwMA==", "bodyText": "change it to 0.8 dp because 1 dp is making the boundary thicker", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r492588300", "createdAt": "2020-09-22T09:15:18Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,13 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"normal_bullet_size\">9dp</dimen>\n+    <dimen name=\"today_bullet_size\">14dp</dimen>\n+    <dimen name=\"width_hairline\">2px</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTE5MDUxNw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzcyMzgyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNjoxM1rOHUdiMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMTozNjoxM1rOHUxtjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzQ1Nw==", "bodyText": "we can use View instated of ImageView.  Also, update DataBindingHelperUtils methods accordingly.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491217457", "createdAt": "2020-09-18T22:16:13Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,130 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateBlock\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"dateItemListener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"dateBlockList\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU0ODA0NA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491548044", "createdAt": "2020-09-19T21:36:13Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,130 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateBlock\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"dateItemListener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"dateBlockList\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzQ1Nw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MzcyNDUzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQyMjoxNjo0MFrOHUdimw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOVQyMTozNjoyMFrOHUxtwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzU2Mw==", "bodyText": "same. and set bullet as background instated of image.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491217563", "createdAt": "2020-09-18T22:16:40Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,130 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateBlock\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"dateItemListener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"dateBlockList\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet\"\n+            android:layout_width=\"@dimen/normal_bullet_size\"\n+            android:layout_height=\"@dimen/normal_bullet_size\"\n+            app:layout_constraintBottom_toBottomOf=\"@id/bullet_today\"\n+            app:layout_constraintEnd_toEndOf=\"@id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"@id/bullet_today\"\n+            binding:bulletBackground=\"@{dateBlock.dateBlockBadge}\"\n+            binding:isDatePast=\"@{dateBlock.isDatePassed()}\"\n+            binding:isVisible=\"@{!dateBlock.isToday()}\"\n+            tools:ignore=\"ContentDescription\" />\n+\n+        <ImageView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTU0ODA5OA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491548098", "createdAt": "2020-09-19T21:36:20Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,130 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateBlock\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"dateItemListener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"dateBlockList\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet\"\n+            android:layout_width=\"@dimen/normal_bullet_size\"\n+            android:layout_height=\"@dimen/normal_bullet_size\"\n+            app:layout_constraintBottom_toBottomOf=\"@id/bullet_today\"\n+            app:layout_constraintEnd_toEndOf=\"@id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"@id/bullet_today\"\n+            binding:bulletBackground=\"@{dateBlock.dateBlockBadge}\"\n+            binding:isDatePast=\"@{dateBlock.isDatePassed()}\"\n+            binding:isVisible=\"@{!dateBlock.isToday()}\"\n+            tools:ignore=\"ContentDescription\" />\n+\n+        <ImageView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTIxNzU2Mw=="}, "originalCommit": {"oid": "b812cf8f2062e73229dfcf3946b8c52cf644e734"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzE5Mzk3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMjoyNTo0OFrOHU9ijw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoxOToyNFrOHVNNKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MTgzOQ==", "bodyText": "need auto-format.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491741839", "createdAt": "2020-09-20T22:25:48Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.LinkedHashMap\n+\n+class CourseDatesAdapter(private val data: LinkedHashMap<String, ArrayList<CourseDateBlock>>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTk5ODUwNA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491998504", "createdAt": "2020-09-21T12:19:24Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,69 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.LinkedHashMap\n+\n+class CourseDatesAdapter(private val data: LinkedHashMap<String, ArrayList<CourseDateBlock>>,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MTgzOQ=="}, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzc5Nzc0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/test/java/org/edx/mobile/test/http/ApiTests.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNjo1MjoxN1rOHVCiLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwOToxNzo0MVrOHVxS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgyMzY2Mg==", "bodyText": "Need auto-format.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491823662", "createdAt": "2020-09-21T06:52:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/test/http/ApiTests.java", "diffHunk": "@@ -173,6 +179,39 @@ public void testEnrollInACourse() throws Exception {\n         print(\"test: finished: reset password\");\n     }\n \n+    @Test\n+    public void testCourseDatesResponse() throws Exception {\n+        login();\n+        print(\"test: Course Dates Response\");\n+\n+        CourseDates dates = executeStrict(courseAPI.getCourseDates(\"\"));\n+        assertNotNull(dates);\n+        assertNotNull(dates.getCourseDateBlocks());\n+\n+        String todayDate = dates.getCourseDateBlocks().get(12).getDate();\n+\n+        try (MockedStatic mockedStatic = mockStatic(DateUtil.class)) {\n+            mockedStatic.when(DateUtil::getCurrentTimeStamp).thenReturn(todayDate);\n+            Mockito.when(DateUtil.isDateToday(todayDate)).thenReturn(true);\n+            assertTrue(dates.isContainToday());\n+        }\n+\n+        dates.organiseCourseDates();\n+\n+        assertNotNull(dates.getCourseDatesMap());\n+\n+        for (String key : dates.getCourseDatesMap().keySet()) {\n+            assertNotNull(key);\n+            ArrayList<CourseDateBlock> blocks = dates.getCourseDatesMap().get(key);\n+            assertNotNull(blocks);\n+            for (CourseDateBlock block: blocks){\n+                assertNotNull(block);\n+            }\n+        }\n+        print(\"success\");\n+        print(\"test: Course Dates Api working fine\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjU4OTgwOA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r492589808", "createdAt": "2020-09-22T09:17:41Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/test/http/ApiTests.java", "diffHunk": "@@ -173,6 +179,39 @@ public void testEnrollInACourse() throws Exception {\n         print(\"test: finished: reset password\");\n     }\n \n+    @Test\n+    public void testCourseDatesResponse() throws Exception {\n+        login();\n+        print(\"test: Course Dates Response\");\n+\n+        CourseDates dates = executeStrict(courseAPI.getCourseDates(\"\"));\n+        assertNotNull(dates);\n+        assertNotNull(dates.getCourseDateBlocks());\n+\n+        String todayDate = dates.getCourseDateBlocks().get(12).getDate();\n+\n+        try (MockedStatic mockedStatic = mockStatic(DateUtil.class)) {\n+            mockedStatic.when(DateUtil::getCurrentTimeStamp).thenReturn(todayDate);\n+            Mockito.when(DateUtil.isDateToday(todayDate)).thenReturn(true);\n+            assertTrue(dates.isContainToday());\n+        }\n+\n+        dates.organiseCourseDates();\n+\n+        assertNotNull(dates.getCourseDatesMap());\n+\n+        for (String key : dates.getCourseDatesMap().keySet()) {\n+            assertNotNull(key);\n+            ArrayList<CourseDateBlock> blocks = dates.getCourseDatesMap().get(key);\n+            assertNotNull(blocks);\n+            for (CourseDateBlock block: blocks){\n+                assertNotNull(block);\n+            }\n+        }\n+        print(\"success\");\n+        print(\"test: Course Dates Api working fine\");\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgyMzY2Mg=="}, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzkwNDE2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/test/java/org/edx/mobile/util/DataBindingHelperUtilTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDo1M1rOHVDgIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDo1M1rOHVDgIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTUyMA==", "bodyText": "this statment force to pass the test on every execution.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491839520", "createdAt": "2020-09-21T07:30:53Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/util/DataBindingHelperUtilTest.kt", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.edx.mobile.util\n+\n+import android.view.View\n+import android.widget.TextView\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+import org.mockito.Mockito\n+import org.mockito.Mockito.`when` as mockitoWhen\n+\n+class DataBindingHelperUtilTest {\n+\n+    @Test\n+    fun testIsViewVisible() {\n+        val mockedView = Mockito.mock(View::class.java)\n+        DataBindingHelperUtils.isViewVisible(mockedView, false)\n+        mockitoWhen(mockedView.visibility).thenReturn(View.INVISIBLE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzkwNDI4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/test/java/org/edx/mobile/util/DataBindingHelperUtilTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDo1NlrOHVDgMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozMDo1NlrOHVDgMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTgzOTUzNg==", "bodyText": "this statment force to pass the test on every execution.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491839536", "createdAt": "2020-09-21T07:30:56Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/util/DataBindingHelperUtilTest.kt", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.edx.mobile.util\n+\n+import android.view.View\n+import android.widget.TextView\n+import org.assertj.core.api.Assertions.assertThat\n+import org.junit.Test\n+import org.mockito.Mockito\n+import org.mockito.Mockito.`when` as mockitoWhen\n+\n+class DataBindingHelperUtilTest {\n+\n+    @Test\n+    fun testIsViewVisible() {\n+        val mockedView = Mockito.mock(View::class.java)\n+        DataBindingHelperUtils.isViewVisible(mockedView, false)\n+        mockitoWhen(mockedView.visibility).thenReturn(View.INVISIBLE)\n+        assertThat(mockedView.visibility).isEqualTo(View.INVISIBLE)\n+    }\n+\n+    @Test\n+    fun testSetText() {\n+        val mockedTextView = Mockito.mock(TextView::class.java)\n+        DataBindingHelperUtils.setText(mockedTextView, \"Test\")\n+        mockitoWhen(mockedTextView.text).thenReturn(\"Test\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzkzMTEwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/test/java/org/edx/mobile/viewModel/CourseDateViewModelTest.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozOTo0OFrOHVDwOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzozOTo0OFrOHVDwOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0MzY0Mw==", "bodyText": "need new extra-line.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491843643", "createdAt": "2020-09-21T07:39:48Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/viewModel/CourseDateViewModelTest.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.arch.core.executor.testing.InstantTaskExecutorRule\n+import androidx.test.ext.junit.runners.AndroidJUnit4\n+import com.google.inject.Injector\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.test.http.HttpBaseTestCase\n+import org.junit.Assert.assertNotNull\n+import org.junit.Rule\n+import org.junit.Test\n+import org.junit.runner.RunWith\n+\n+@RunWith(AndroidJUnit4::class)\n+class CourseDateViewModelTest : HttpBaseTestCase() {\n+\n+    private lateinit var courseDateViewModel: CourseDateViewModel\n+\n+    @get:Rule\n+    var instantTaskExecuteRule = InstantTaskExecutorRule()\n+\n+    @Throws(Exception::class)\n+    override fun setUp() {\n+        super.setUp()\n+        courseDateViewModel = CourseDateViewModel()\n+    }\n+\n+    @Throws(Exception::class)\n+    override fun inject(injector: Injector) {\n+        super.inject(injector)\n+        courseAPI = injector.getInstance(CourseAPI::class.java)\n+    }\n+\n+    @Test\n+    fun startViewModel() {\n+        courseDateViewModel.fetchCourseDates(courseID = \"\", isSwipeRefresh = false)\n+        assertNotNull(courseDateViewModel.courseDates.getOrAwaitValue())\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzkzODk2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/test/java/org/edx/mobile/viewModel/LiveDataTestUtil.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MjowM1rOHVD04g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MjowM1rOHVD04g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NDgzNA==", "bodyText": "need Ref: for this class/approach in the doc-string.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491844834", "createdAt": "2020-09-21T07:42:03Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/viewModel/LiveDataTestUtil.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.annotation.VisibleForTesting\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.Observer\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.TimeoutException\n+\n+/**\n+ * Gets the value of a [LiveData] or waits for it to have one, with a timeout.\n+ *\n+ * Use this extension from host-side (JVM) tests. It's recommended to use it alongside\n+ * `InstantTaskExecutorRule` or a similar mechanism to execute tasks synchronously.\n+ */\n+@VisibleForTesting(otherwise = VisibleForTesting.NONE)\n+fun <T> LiveData<T>.getOrAwaitValue(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzkzOTk2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/test/java/org/edx/mobile/viewModel/LiveDataTestUtil.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MjoxOVrOHVD1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo0MjoxOVrOHVD1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg0NDk4NA==", "bodyText": "need a new line.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491844984", "createdAt": "2020-09-21T07:42:19Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/test/java/org/edx/mobile/viewModel/LiveDataTestUtil.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.annotation.VisibleForTesting\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.Observer\n+import java.util.concurrent.CountDownLatch\n+import java.util.concurrent.TimeUnit\n+import java.util.concurrent.TimeoutException\n+\n+/**\n+ * Gets the value of a [LiveData] or waits for it to have one, with a timeout.\n+ *\n+ * Use this extension from host-side (JVM) tests. It's recommended to use it alongside\n+ * `InstantTaskExecutorRule` or a similar mechanism to execute tasks synchronously.\n+ */\n+@VisibleForTesting(otherwise = VisibleForTesting.NONE)\n+fun <T> LiveData<T>.getOrAwaitValue(\n+        time: Long = 2,\n+        timeUnit: TimeUnit = TimeUnit.SECONDS,\n+        afterObserve: () -> Unit = {}\n+): T {\n+    var data: T? = null\n+    val latch = CountDownLatch(1)\n+    val observer = object : Observer<T> {\n+        override fun onChanged(o: T?) {\n+            data = o\n+            latch.countDown()\n+            this@getOrAwaitValue.removeObserver(this)\n+        }\n+    }\n+    this.observeForever(observer)\n+\n+    try {\n+        afterObserve.invoke()\n+\n+        // Don't wait indefinitely if the LiveData is not set.\n+        if (!latch.await(time, timeUnit)) {\n+            throw TimeoutException(\"LiveData value was never set.\")\n+        }\n+\n+    } finally {\n+        this.removeObserver(observer)\n+    }\n+\n+    @Suppress(\"UNCHECKED_CAST\")\n+    return data as T\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Nzk3NDYzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwNzo1MjowN1rOHVEJsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMjoyMjoxOFrOHVNT2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1MDE2MA==", "bodyText": "are we need these dependencies?", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491850160", "createdAt": "2020-09-21T07:52:07Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -233,6 +234,11 @@ dependencies {\n \n     // test project configuration\n     testImplementation 'junit:junit:4.12'\n+    testImplementation 'androidx.test.ext:junit-ktx:1.1.1'\n+    testImplementation 'androidx.test:core-ktx:1.2.0'\n+    testImplementation 'androidx.arch.core:core-testing:2.1.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjAwMDIxNg==", "bodyText": "Yes we need these dependencies for ViewModel testing", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r492000216", "createdAt": "2020-09-21T12:22:18Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -233,6 +234,11 @@ dependencies {\n \n     // test project configuration\n     testImplementation 'junit:junit:4.12'\n+    testImplementation 'androidx.test.ext:junit-ktx:1.1.1'\n+    testImplementation 'androidx.test:core-ktx:1.2.0'\n+    testImplementation 'androidx.arch.core:core-testing:2.1.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg1MDE2MA=="}, "originalCommit": {"oid": "3fed4d6e04517ec0130f5130b35ecb484d4d172e"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM2NDUxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMjoxMlrOG_tjxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyNzo0MFrOHFeVTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTkxMA==", "bodyText": "IMO rv_dates is a more appropriate id.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469459910", "createdAt": "2020-08-12T18:32:12Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <FrameLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        tools:context=\".view.CourseDatesPageFragment\">\n+\n+        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n+            android:id=\"@+id/swipe_container\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"match_parent\">\n+\n+            <androidx.recyclerview.widget.RecyclerView\n+                android:id=\"@+id/date_list\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMTkwMQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475501901", "createdAt": "2020-08-24T10:27:40Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <FrameLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        tools:context=\".view.CourseDatesPageFragment\">\n+\n+        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n+            android:id=\"@+id/swipe_container\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"match_parent\">\n+\n+            <androidx.recyclerview.widget.RecyclerView\n+                android:id=\"@+id/date_list\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTkxMA=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQxOTc4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0NzoyOFrOG_uFVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyNzo0NlrOHFeVrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2ODUwMw==", "bodyText": "Padding should be around 10dp, cuz mobile screen margins/padding are usually small as compared to the web.\nSo I think we can use widget_margin or create a new resource for dates screen.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469468503", "createdAt": "2020-08-12T18:47:28Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <FrameLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        tools:context=\".view.CourseDatesPageFragment\">\n+\n+        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n+            android:id=\"@+id/swipe_container\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"match_parent\">\n+\n+            <androidx.recyclerview.widget.RecyclerView\n+                android:id=\"@+id/date_list\"\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"match_parent\"\n+                android:background=\"@color/white\"\n+                android:clipToPadding=\"false\"\n+                android:padding=\"@dimen/edx_margin\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMTk5OA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475501998", "createdAt": "2020-08-24T10:27:46Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <FrameLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        tools:context=\".view.CourseDatesPageFragment\">\n+\n+        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n+            android:id=\"@+id/swipe_container\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"match_parent\">\n+\n+            <androidx.recyclerview.widget.RecyclerView\n+                android:id=\"@+id/date_list\"\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"match_parent\"\n+                android:background=\"@color/white\"\n+                android:clipToPadding=\"false\"\n+                android:padding=\"@dimen/edx_margin\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2ODUwMw=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzczMzk0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDoyNDowNlrOG_xH1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDowNFrOHFeeWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxODI5NQ==", "bodyText": "Should be renamed to binding .", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469518295", "createdAt": "2020-08-12T20:24:06Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDIxNg==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504216", "createdAt": "2020-08-24T10:30:04Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxODI5NQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzc0MDM3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDoyNTo0OVrOG_xLsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDoyNFrOHFefhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxOTI4Mg==", "bodyText": "there should be the following line of code\nreturn errorNotification != null && errorNotification.isShowing();", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469519282", "createdAt": "2020-08-12T20:25:49Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDUxOQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504519", "createdAt": "2020-08-24T10:30:24Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxOTI4Mg=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzc1NjEyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDozMDozOVrOG_xVdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDowOVrOHFeerw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyMTc4Mw==", "bodyText": "courseId and return type Bundle should not be nullable.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469521783", "createdAt": "2020-08-12T20:30:39Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDMwMw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504303", "createdAt": "2020-08-24T10:30:09Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyMTc4Mw=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzc5NjA4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDozNjo0OFrOG_xw1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDozMFrOHFef_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyODc5MQ==", "bodyText": "return type View should not be nullable", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469528791", "createdAt": "2020-08-12T20:36:48Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDYzOA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504638", "createdAt": "2020-08-24T10:30:30Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUyODc5MQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzgxMDg0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDozODo1M1rOG_x7IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDozNVrOHFegVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzMTQyNQ==", "bodyText": "This can be in lambda notitaion.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469531425", "createdAt": "2020-08-12T20:38:53Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDcyNQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504725", "createdAt": "2020-08-24T10:30:35Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzMTQyNQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzg1NDYzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1MDoxMlrOG_yW3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDo0M1rOHFegwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzODUyNw==", "bodyText": "loadingIndicator should be visible on bases on some boolean. e.g showProgress", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469538527", "createdAt": "2020-08-12T20:50:12Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDgzMg==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504832", "createdAt": "2020-08-24T10:30:43Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzODUyNw=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzg2MjQxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDo1MjoyNFrOG_ybjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyOTo0NlrOHFedKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzOTcyNQ==", "bodyText": "api should be lateinit cus declared as the Injected member.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469539725", "createdAt": "2020-08-12T20:52:24Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMzkxMw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475503913", "createdAt": "2020-08-24T10:29:46Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUzOTcyNQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzg5MzY4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowMTozMlrOG_yuUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDo0OVrOHFehEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NDUyOQ==", "bodyText": "try to remove the use of !!.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469544529", "createdAt": "2020-08-12T21:01:32Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNDkxMg==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475504912", "createdAt": "2020-08-24T10:30:49Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NDUyOQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzg5Nzg2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowMjo0OFrOG_ywww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTowMjo0OFrOG_ywww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NTE1NQ==", "bodyText": "need to remove extra line.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469545155", "createdAt": "2020-08-12T21:02:48Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzkzODIwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxNToyNlrOG_zJAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxNToyNlrOG_zJAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MTM2Mw==", "bodyText": "The app should cover the following scenarios too\n\n401 if the user is not authenticated.\n404 if the course is not available or cannot be seen.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469551363", "createdAt": "2020-08-12T21:15:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk0NjAzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToxODoxN1rOG_zOFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyNzowNlrOHFeTfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MjY2Mg==", "bodyText": "Initialization can be HashMap().", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469552662", "createdAt": "2020-08-12T21:18:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMTQzOA==", "bodyText": "I did this just to be specific", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475501438", "createdAt": "2020-08-24T10:27:06Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MjY2Mg=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 114}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk1MjM1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDoyOVrOG_zR3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDoyOVrOG_zR3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MzYzMQ==", "bodyText": "Need doc strings.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469553631", "createdAt": "2020-08-12T21:20:29Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()\n+        sortKeys = ArrayList()\n+        if (list.isNotEmpty()) {\n+            list.forEach { item ->\n+                if (data.containsKey(item.getSimpleDateTime())) {\n+                    (data[item.getSimpleDateTime()] as ArrayList).add(item)\n+                } else {\n+                    data[item.getSimpleDateTime()] = arrayListOf(item)\n+                    sortKeys.add(item.getSimpleDateTime())\n+                }\n+            }\n+            if (isContainToday(list).not() && DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+                var ind = 0\n+                sortKeys.forEachIndexed { index, str ->\n+                    if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                        ind = index + 1\n+                    }\n+                }\n+                sortKeys.add(ind, getTodayDateBlock().getSimpleDateTime())\n+\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk1Mjk0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDo0MFrOG_zSNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMDo0MFrOG_zSNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1MzcxOA==", "bodyText": "Need doc strings.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469553718", "createdAt": "2020-08-12T21:20:40Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()\n+        sortKeys = ArrayList()\n+        if (list.isNotEmpty()) {\n+            list.forEach { item ->\n+                if (data.containsKey(item.getSimpleDateTime())) {\n+                    (data[item.getSimpleDateTime()] as ArrayList).add(item)\n+                } else {\n+                    data[item.getSimpleDateTime()] = arrayListOf(item)\n+                    sortKeys.add(item.getSimpleDateTime())\n+                }\n+            }\n+            if (isContainToday(list).not() && DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+                var ind = 0\n+                sortKeys.forEachIndexed { index, str ->\n+                    if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                        ind = index + 1\n+                    }\n+                }\n+                sortKeys.add(ind, getTodayDateBlock().getSimpleDateTime())\n+\n+            }\n+            setDateBlockTag()\n+            mBinding.dateList.apply {\n+                layoutManager = LinearLayoutManager(context)\n+                adapter = CourseDatesAdapter(data, sortKeys, onLinkClick)\n+            }\n+        } else {\n+            context?.let {\n+                errorNotification.showError(it,\n+                        HttpStatusException(Response.error<Any>(HttpStatus.NO_CONTENT,\n+                                ResponseBody.create(MediaType.parse(\"text/plain\"), \"Currently no date available for this course\"))),\n+                        -1, null)\n+            }\n+        }\n+\n+    }\n+\n+    private fun isContainToday(list: List<CourseDateBlock>): Boolean {\n+        list.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    private fun setDateBlockTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk1NzMwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMToyMjowMVrOG_zUvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo0NTowMFrOHFfAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDM2NQ==", "bodyText": "Better to create separate methods while arranging the list for the list.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469554365", "createdAt": "2020-08-12T21:22:01Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()\n+        sortKeys = ArrayList()\n+        if (list.isNotEmpty()) {\n+            list.forEach { item ->\n+                if (data.containsKey(item.getSimpleDateTime())) {\n+                    (data[item.getSimpleDateTime()] as ArrayList).add(item)\n+                } else {\n+                    data[item.getSimpleDateTime()] = arrayListOf(item)\n+                    sortKeys.add(item.getSimpleDateTime())\n+                }\n+            }\n+            if (isContainToday(list).not() && DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+                var ind = 0\n+                sortKeys.forEachIndexed { index, str ->\n+                    if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                        ind = index + 1\n+                    }\n+                }\n+                sortKeys.add(ind, getTodayDateBlock().getSimpleDateTime())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMzAzOQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475513039", "createdAt": "2020-08-24T10:45:00Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()\n+        sortKeys = ArrayList()\n+        if (list.isNotEmpty()) {\n+            list.forEach { item ->\n+                if (data.containsKey(item.getSimpleDateTime())) {\n+                    (data[item.getSimpleDateTime()] as ArrayList).add(item)\n+                } else {\n+                    data[item.getSimpleDateTime()] = arrayListOf(item)\n+                    sortKeys.add(item.getSimpleDateTime())\n+                }\n+            }\n+            if (isContainToday(list).not() && DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+                var ind = 0\n+                sortKeys.forEachIndexed { index, str ->\n+                    if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                        ind = index + 1\n+                    }\n+                }\n+                sortKeys.add(ind, getTodayDateBlock().getSimpleDateTime())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1NDM2NQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk5MTUwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTozMzozOFrOG_zpWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTozMzozOFrOG_zpWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTY0Mw==", "bodyText": "use == instated of equals.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469559643", "createdAt": "2020-08-12T21:33:38Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()\n+        sortKeys = ArrayList()\n+        if (list.isNotEmpty()) {\n+            list.forEach { item ->\n+                if (data.containsKey(item.getSimpleDateTime())) {\n+                    (data[item.getSimpleDateTime()] as ArrayList).add(item)\n+                } else {\n+                    data[item.getSimpleDateTime()] = arrayListOf(item)\n+                    sortKeys.add(item.getSimpleDateTime())\n+                }\n+            }\n+            if (isContainToday(list).not() && DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+                var ind = 0\n+                sortKeys.forEachIndexed { index, str ->\n+                    if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                        ind = index + 1\n+                    }\n+                }\n+                sortKeys.add(ind, getTodayDateBlock().getSimpleDateTime())\n+\n+            }\n+            setDateBlockTag()\n+            mBinding.dateList.apply {\n+                layoutManager = LinearLayoutManager(context)\n+                adapter = CourseDatesAdapter(data, sortKeys, onLinkClick)\n+            }\n+        } else {\n+            context?.let {\n+                errorNotification.showError(it,\n+                        HttpStatusException(Response.error<Any>(HttpStatus.NO_CONTENT,\n+                                ResponseBody.create(MediaType.parse(\"text/plain\"), \"Currently no date available for this course\"))),\n+                        -1, null)\n+            }\n+        }\n+\n+    }\n+\n+    private fun isContainToday(list: List<CourseDateBlock>): Boolean {\n+        list.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    private fun setDateBlockTag() {\n+        var dueNextCount = 0\n+        sortKeys.forEach { key ->\n+            data[key]?.forEach { item ->\n+                var dateBlockTag: CourseDateType = getDateTypeTag(item)\n+                if (dateBlockTag.equals(CourseDateType.DUE_NEXT)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk5Mjk1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTozNDowNFrOG_zqRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTozNDowNFrOG_zqRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU1OTg3Nw==", "bodyText": "Need doc strings.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469559877", "createdAt": "2020-08-12T21:34:04Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,220 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import androidx.swiperefreshlayout.widget.SwipeRefreshLayout.OnRefreshListener\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var mBinding: FragmentCourseDatesPageBinding\n+    private var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap()\n+    private var sortKeys: ArrayList<String> = ArrayList()\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String?): Bundle? {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return false\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        mBinding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return mBinding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        errorNotification = FullScreenErrorNotification(mBinding.swipeContainer)\n+\n+        mBinding.swipeContainer.setOnRefreshListener(OnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            getCourseDates()\n+        })\n+        UiUtil.setSwipeRefreshLayoutColors(mBinding.swipeContainer)\n+        getCourseDates()\n+    }\n+\n+    private fun getCourseDates() {\n+        mBinding.loadingIndicator.loadingIndicator.visibility = View.VISIBLE\n+        var courseDates: Call<CourseDates> = api?.getCourseDates(arguments?.getString(Router.EXTRA_COURSE_ID)!!)!!\n+        courseDates.enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                if (response.isSuccessful) {\n+                    response.body()?.course_date_blocks?.let {\n+                        populateCourseDates(it)\n+\n+                    }\n+                } else {\n+                    context?.let {\n+                        errorNotification.showError(it,\n+                                HttpStatusException(Response.error<Any>(response.code(),\n+                                        ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                                -1, null)\n+                    }\n+                }\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+                mBinding.swipeContainer.isRefreshing = false\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                context?.let { errorNotification.showError(it, t, -1, null) }\n+                mBinding.swipeContainer.isRefreshing = false\n+                mBinding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            }\n+        })\n+    }\n+\n+    private fun populateCourseDates(list: List<CourseDateBlock>) {\n+        data = HashMap<String, ArrayList<CourseDateBlock>>()\n+        sortKeys = ArrayList()\n+        if (list.isNotEmpty()) {\n+            list.forEach { item ->\n+                if (data.containsKey(item.getSimpleDateTime())) {\n+                    (data[item.getSimpleDateTime()] as ArrayList).add(item)\n+                } else {\n+                    data[item.getSimpleDateTime()] = arrayListOf(item)\n+                    sortKeys.add(item.getSimpleDateTime())\n+                }\n+            }\n+            if (isContainToday(list).not() && DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+                var ind = 0\n+                sortKeys.forEachIndexed { index, str ->\n+                    if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                        ind = index + 1\n+                    }\n+                }\n+                sortKeys.add(ind, getTodayDateBlock().getSimpleDateTime())\n+\n+            }\n+            setDateBlockTag()\n+            mBinding.dateList.apply {\n+                layoutManager = LinearLayoutManager(context)\n+                adapter = CourseDatesAdapter(data, sortKeys, onLinkClick)\n+            }\n+        } else {\n+            context?.let {\n+                errorNotification.showError(it,\n+                        HttpStatusException(Response.error<Any>(HttpStatus.NO_CONTENT,\n+                                ResponseBody.create(MediaType.parse(\"text/plain\"), \"Currently no date available for this course\"))),\n+                        -1, null)\n+            }\n+        }\n+\n+    }\n+\n+    private fun isContainToday(list: List<CourseDateBlock>): Boolean {\n+        list.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    private fun setDateBlockTag() {\n+        var dueNextCount = 0\n+        sortKeys.forEach { key ->\n+            data[key]?.forEach { item ->\n+                var dateBlockTag: CourseDateType = getDateTypeTag(item)\n+                if (dateBlockTag.equals(CourseDateType.DUE_NEXT)) {\n+                    if (dueNextCount == 0)\n+                        dueNextCount += 1\n+                    else\n+                        dateBlockTag = CourseDateType.BLANK\n+                }\n+                item.dateBlockTag = dateBlockTag\n+            }\n+        }\n+    }\n+\n+    private fun getDateTypeTag(item: CourseDateBlock): CourseDateType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzk5ODkyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/build.gradle", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTozNjoxMVrOG_zt-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMTo1M1rOHSnSJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MDgyNQ==", "bodyText": "Why we need to add this dependency.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469560825", "createdAt": "2020-08-12T21:36:11Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -214,16 +215,17 @@ dependencies {\n     // Branch SDK\n     // Check this link for guide to updating Branch integration:\n     // https://github.com/BranchMetrics/android-branch-deep-linking\n-    implementation ('io.branch.sdk.android:library:2.19.2') {\n+    implementation('io.branch.sdk.android:library:2.19.2') {\n         exclude module: 'answers-shim'\n     }\n \n     //New Relic Integration\n     implementation 'com.newrelic.agent.android:android-agent:5.4.1'\n \n     // test project configuration\n+    implementation 'androidx.legacy:legacy-support-v4:1.0.0'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyMTgyNQ==", "bodyText": "Still pending, if necessary, please add docstring why we need this dependency.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488721825", "createdAt": "2020-09-15T14:39:18Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -214,16 +215,17 @@ dependencies {\n     // Branch SDK\n     // Check this link for guide to updating Branch integration:\n     // https://github.com/BranchMetrics/android-branch-deep-linking\n-    implementation ('io.branch.sdk.android:library:2.19.2') {\n+    implementation('io.branch.sdk.android:library:2.19.2') {\n         exclude module: 'answers-shim'\n     }\n \n     //New Relic Integration\n     implementation 'com.newrelic.agent.android:android-agent:5.4.1'\n \n     // test project configuration\n+    implementation 'androidx.legacy:legacy-support-v4:1.0.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MDgyNQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDAzOQ==", "bodyText": "sorry it was added by android-studio", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489280039", "createdAt": "2020-09-16T09:01:53Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -214,16 +215,17 @@ dependencies {\n     // Branch SDK\n     // Check this link for guide to updating Branch integration:\n     // https://github.com/BranchMetrics/android-branch-deep-linking\n-    implementation ('io.branch.sdk.android:library:2.19.2') {\n+    implementation('io.branch.sdk.android:library:2.19.2') {\n         exclude module: 'answers-shim'\n     }\n \n     //New Relic Integration\n     implementation 'com.newrelic.agent.android:android-agent:5.4.1'\n \n     // test project configuration\n+    implementation 'androidx.legacy:legacy-support-v4:1.0.0'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2MDgyNQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDAyODAyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo0NjoyNVrOG_z_TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyOTozNVrOHFecbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NTI2MQ==", "bodyText": "Should not reflect changes of unrelated code in this file.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469565261", "createdAt": "2020-08-12T21:46:25Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -1,6 +1,7 @@\n package org.edx.mobile.util;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMzcyNQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475503725", "createdAt": "2020-08-24T10:29:35Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -1,6 +1,7 @@\n package org.edx.mobile.util;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NTI2MQ=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDA0MDY0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseAPI.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMTo1MDo0NVrOG_0GnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyNzo1OVrOHFeWew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzEzMg==", "bodyText": "unused import.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469567132", "createdAt": "2020-08-12T21:50:45Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseAPI.java", "diffHunk": "@@ -28,6 +28,8 @@\n import org.edx.mobile.model.course.BlockModel;\n import org.edx.mobile.model.course.BlockType;\n import org.edx.mobile.model.course.CourseComponent;\n+import org.edx.mobile.model.course.CourseDateBlock;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMjIwMw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r475502203", "createdAt": "2020-08-24T10:27:59Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseAPI.java", "diffHunk": "@@ -28,6 +28,8 @@\n import org.edx.mobile.model.course.BlockModel;\n import org.edx.mobile.model.course.BlockType;\n import org.edx.mobile.model.course.CourseComponent;\n+import org.edx.mobile.model.course.CourseDateBlock;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU2NzEzMg=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDExMzcyOnYy", "diffSide": "LEFT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseTabsDashboardFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMjoxOTowMVrOG_0ySQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNTowMToyMVrOHCYyig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3ODMxMw==", "bodyText": "Now CourseDatesFragment.java is unused, I think we can remove this.\n@miankhalid thoughts?", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r469578313", "createdAt": "2020-08-12T22:19:01Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseTabsDashboardFragment.java", "diffHunk": "@@ -287,9 +287,9 @@ public void onFragmentSelected() {\n         }\n         // Add important dates tab\n         if (environment.getConfig().isCourseDatesEnabled()) {\n-            items.add(new FragmentItemModel(CourseDatesFragment.class,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQyNDE5Mg==", "bodyText": "I'll remove it", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r471424192", "createdAt": "2020-08-17T11:46:41Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseTabsDashboardFragment.java", "diffHunk": "@@ -287,9 +287,9 @@ public void onFragmentSelected() {\n         }\n         // Add important dates tab\n         if (environment.getConfig().isCourseDatesEnabled()) {\n-            items.add(new FragmentItemModel(CourseDatesFragment.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3ODMxMw=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI2NTM1NA==", "bodyText": "Yep, nuke it!", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r472265354", "createdAt": "2020-08-18T15:01:21Z", "author": {"login": "miankhalid"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseTabsDashboardFragment.java", "diffHunk": "@@ -287,9 +287,9 @@ public void onFragmentSelected() {\n         }\n         // Add important dates tab\n         if (environment.getConfig().isCourseDatesEnabled()) {\n-            items.add(new FragmentItemModel(CourseDatesFragment.class,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU3ODMxMw=="}, "originalCommit": {"oid": "cb1f92b8c73cb30b1a3ce76da86ccc293ebf8e4b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzk0MzE4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/build.gradle", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0NToyMFrOHSFgNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0NToyMFrOHSFgNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyNjU4MA==", "bodyText": "Need doc why we need this plugin.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488726580", "createdAt": "2020-09-15T14:45:20Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -25,6 +25,7 @@ apply plugin: 'edxapp'\n apply plugin: 'kotlin-android-extensions'\n apply plugin: 'com.android.application'\n apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-kapt'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1Nzk1MzU4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNDo0NzoxN1rOHSFmhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOTowMjowNlrOHSnSrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyODE5Nw==", "bodyText": "no need for this change.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488728197", "createdAt": "2020-09-15T14:47:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -480,7 +482,7 @@ android {\n         debug {\n             testCoverageEnabled true\n             pseudoLocalesEnabled true // Set device language to \"en_XA\" to test glyphs, or \"ar_XB\" to test RTL support\n-            manifestPlaceholders = [ supportsRtl:\"true\"]\n+            manifestPlaceholders = [supportsRtl: \"true\"]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4MDE3NQ==", "bodyText": "change revert", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489280175", "createdAt": "2020-09-16T09:02:06Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -480,7 +482,7 @@ android {\n         debug {\n             testCoverageEnabled true\n             pseudoLocalesEnabled true // Set device language to \"en_XA\" to test glyphs, or \"ar_XB\" to test RTL support\n-            manifestPlaceholders = [ supportsRtl:\"true\"]\n+            manifestPlaceholders = [supportsRtl: \"true\"]", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODcyODE5Nw=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTAyMDExOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDowNVrOHSQIzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTowNDowNVrOHSQIzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkwMDgxMg==", "bodyText": "better to add the following line of code to show the sample layout in the editor.\ntools:listitem=\"@layout/item_course_date_block\"", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488900812", "createdAt": "2020-09-15T19:04:05Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/fragment_course_dates_page.xml", "diffHunk": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <FrameLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"match_parent\"\n+        tools:context=\".view.CourseDatesPageFragment\">\n+\n+        <androidx.swiperefreshlayout.widget.SwipeRefreshLayout\n+            android:id=\"@+id/swipe_container\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"match_parent\">\n+\n+            <androidx.recyclerview.widget.RecyclerView\n+                android:id=\"@+id/rv_dates\"\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"match_parent\"\n+                android:background=\"@color/white\"\n+                android:clipToPadding=\"false\"\n+                android:padding=\"@dimen/date_block_half_x_margin\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTA5ODQwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToyNDoxN1rOHSQ4Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOToyNDoxN1rOHSQ4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkxMjkzOA==", "bodyText": "need doc string why need these methods.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488912938", "createdAt": "2020-09-15T19:24:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "diffHunk": "@@ -29,6 +30,19 @@ public void onCreate(Bundle savedInstanceState) {\n         EventBus.getDefault().post(new NewRelicEvent(getClass().getSimpleName()));\n     }\n \n+    public Context getContextOrThrow() {\n+        if (getContext() != null)\n+            return getContext();\n+        throw new IllegalStateException(\"Context can only be accessed when attached with activity\");\n+    }\n+\n+    public String getArgumentString(String key) {\n+        if (getArguments() != null && getArguments().getString(key) != null) {\n+            return getArguments().getString(key);\n+        }\n+        throw new IllegalArgumentException(\"Arguments or key not found in bundle\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTE5MDI4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo0MDo0NVrOHSRwbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo0MDo0NVrOHSRwbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyNzM0MQ==", "bodyText": "IMO, it's better to move this method in the CourseDateBlock.kt.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488927341", "createdAt": "2020-09-15T19:40:45Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTIwNDE1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/ViewModelFactory.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo0Mzo0MFrOHSR5Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozOTo1NlrOHUJluQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyOTYzNA==", "bodyText": "need docstring/purpose of this class.\nPlease share a reference for the inspiration of MVVM architecture.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488929634", "createdAt": "2020-09-15T19:43:40Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/ViewModelFactory.kt", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.ViewModel\n+import androidx.lifecycle.ViewModelProvider\n+import org.edx.mobile.course.CourseAPI\n+\n+class ViewModelFactory(private val courseAPI: CourseAPI) : ViewModelProvider.NewInstanceFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MTYyMQ==", "bodyText": "Still pending.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490271621", "createdAt": "2020-09-17T14:02:38Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/ViewModelFactory.kt", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.ViewModel\n+import androidx.lifecycle.ViewModelProvider\n+import org.edx.mobile.course.CourseAPI\n+\n+class ViewModelFactory(private val courseAPI: CourseAPI) : ViewModelProvider.NewInstanceFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyOTYzNA=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MDY4MQ==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490890681", "createdAt": "2020-09-18T11:39:56Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/ViewModelFactory.kt", "diffHunk": "@@ -0,0 +1,14 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.ViewModel\n+import androidx.lifecycle.ViewModelProvider\n+import org.edx.mobile.course.CourseAPI\n+\n+class ViewModelFactory(private val courseAPI: CourseAPI) : ViewModelProvider.NewInstanceFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkyOTYzNA=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTIyNzY1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo0OTo1OVrOHSSHcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxOTo0OTo1OVrOHSSHcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODkzMzIzNA==", "bodyText": "We are adopting camelCase notation for naming a variable/data member, so need to update.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488933234", "createdAt": "2020-09-15T19:49:59Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "diffHunk": "@@ -0,0 +1,43 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDateBlock(\n+        @SerializedName(\"complete\") var complete: Boolean = false,\n+        @SerializedName(\"date\") val date: String = \"\",\n+        @SerializedName(\"date_type\") var date_type: String? = \"\",\n+        @SerializedName(\"description\") val description: String = \"\",\n+        @SerializedName(\"learner_has_access\") var learner_has_access: Boolean = false,\n+        @SerializedName(\"link\") val link: String = \"\",\n+        @SerializedName(\"link_text\") val link_text: String = \"\",\n+        @SerializedName(\"title\") val title: String = \"\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTI3Mjg1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMjozN1rOHSSieA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMjozN1rOHSSieA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0MDE1Mg==", "bodyText": "No need to show progress as swipe to refresh has its own loader.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488940152", "createdAt": "2020-09-15T20:02:37Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTI3NDg3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMzoxNFrOHSSjsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowMzoxNFrOHSSjsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0MDQ2NQ==", "bodyText": "IMO, it's better to initObserver first.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488940465", "createdAt": "2020-09-15T20:03:14Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+\n+        @JvmStatic\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), date_type = CourseDateBlock.DateTypes.TODAY_DATE)\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates()\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        viewModel.startViewModel(courseID = getArgumentString(Router.EXTRA_COURSE_ID))\n+        initObserver()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTI3OTgxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDowNDo1OFrOHSSm5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowNToyNVrOHUCdEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0MTI4Nw==", "bodyText": "is CourseDateViewModel representing the Repository in MVVM architecture?\nif Yes then better to update the name accordingly.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488941287", "createdAt": "2020-09-15T20:04:58Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI4OTI4MA==", "bodyText": "No, we are not using repository in current architecture", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489289280", "createdAt": "2020-09-16T09:16:38Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0MTI4Nw=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3Mzc3Ng==", "bodyText": "Now we have implemented the repository based architecture", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490773776", "createdAt": "2020-09-18T08:05:25Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,107 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0MTI4Nw=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTMxOTYwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNzowNlrOHSS_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNzowNlrOHSS_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NzQ1OA==", "bodyText": "The callback should cover the following scenarios too.\n\n401 if the user is not authenticated.\n404 if the course is not available or cannot be seen.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488947458", "createdAt": "2020-09-15T20:17:06Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDateViewModel(private val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()\n+    }\n+\n+    fun fetchCourseDates() {\n+        _errorMessage.value = null\n+        _swipeRefresh.value = false\n+        _showLoader.value = true\n+        courseAPI.getCourseDates(courseID).enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                _showLoader.postValue(false)\n+                if (response.isSuccessful && response.body() != null) {\n+                    response.body()?.let {\n+                        _courseDates.value = it\n+                    }\n+                } else {\n+                    _errorMessage.value = HttpStatusException(Response.error<Any>(response.code(),\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message())))\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTMyMDc1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoxNzoyN1rOHSS_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMjo1OFrOHUJUjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NzY0Mw==", "bodyText": "The extra line needs to remove.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488947643", "createdAt": "2020-09-15T20:17:27Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDateViewModel(private val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()\n+    }\n+\n+    fun fetchCourseDates() {\n+        _errorMessage.value = null\n+        _swipeRefresh.value = false\n+        _showLoader.value = true\n+        courseAPI.getCourseDates(courseID).enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                _showLoader.postValue(false)\n+                if (response.isSuccessful && response.body() != null) {\n+                    response.body()?.let {\n+                        _courseDates.value = it\n+                    }\n+                } else {\n+                    _errorMessage.value = HttpStatusException(Response.error<Any>(response.code(),\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message())))\n+                }\n+                _swipeRefresh.postValue(false)\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                _showLoader.postValue(false)\n+                _errorMessage.value = t\n+                _swipeRefresh.postValue(false)\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NjI4Nw==", "bodyText": "extra line added due to auto formating", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490886287", "createdAt": "2020-09-18T11:32:58Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDateViewModel(private val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()\n+    }\n+\n+    fun fetchCourseDates() {\n+        _errorMessage.value = null\n+        _swipeRefresh.value = false\n+        _showLoader.value = true\n+        courseAPI.getCourseDates(courseID).enqueue(object : Callback<CourseDates> {\n+            override fun onResponse(call: Call<CourseDates>, response: Response<CourseDates>) {\n+                _showLoader.postValue(false)\n+                if (response.isSuccessful && response.body() != null) {\n+                    response.body()?.let {\n+                        _courseDates.value = it\n+                    }\n+                } else {\n+                    _errorMessage.value = HttpStatusException(Response.error<Any>(response.code(),\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message())))\n+                }\n+                _swipeRefresh.postValue(false)\n+            }\n+\n+            override fun onFailure(call: Call<CourseDates>, t: Throwable) {\n+                _showLoader.postValue(false)\n+                _errorMessage.value = t\n+                _swipeRefresh.postValue(false)\n+            }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0NzY0Mw=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTMzMjEwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseAPI.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMDoyOVrOHSTGPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMDoyOVrOHSTGPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTMwOQ==", "bodyText": "@return Course dates against the given course id", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488949309", "createdAt": "2020-09-15T20:20:29Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseAPI.java", "diffHunk": "@@ -98,6 +99,14 @@ public CourseAPI(@NonNull CourseService courseService, @NonNull UserPrefs userPr\n         return courseService.getEnrolledCourses(getUsername(), config.getOrganizationCode());\n     }\n \n+    /**\n+     * @return Course dates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTMzNjUyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMTo0OVrOHSTI4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMTo0OVrOHSTI4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk0OTk4Ng==", "bodyText": "We are adopting camelCase notation for naming a variable/data member, so need to update.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488949986", "createdAt": "2020-09-15T20:21:49Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.view.CourseDatesPageFragment\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val dates_banner_info: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val course_date_blocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missed_deadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missed_gated_content: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learner_is_full_access: Boolean = false,\n+        @SerializedName(\"user_timezone\") val user_timezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verified_upgrade_link: String = \"\",\n+        var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM0MTE4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMzoxMlrOHSTLrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMzoxMlrOHSTLrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1MDcwMw==", "bodyText": "Need to update the method name as per the functionality.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488950703", "createdAt": "2020-09-15T20:23:12Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.view.CourseDatesPageFragment\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val dates_banner_info: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val course_date_blocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missed_deadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missed_gated_content: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learner_is_full_access: Boolean = false,\n+        @SerializedName(\"user_timezone\") val user_timezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verified_upgrade_link: String = \"\",\n+        var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun populateCourseDates() {\n+        populateCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Rearrange the date blocks according to design and stack all the blocks of same date in one key\n+     */\n+    private fun populateCourseDatesInBlock() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM0MzE5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDatesBannerInfo.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMzo1MFrOHSTNBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyMzo1MFrOHSTNBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1MTA0Ng==", "bodyText": "We are adopting camelCase notation for naming a variable/data member, so need to update.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488951046", "createdAt": "2020-09-15T20:23:50Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDatesBannerInfo.kt", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+\n+\n+data class CourseDatesBannerInfo(\n+        @SerializedName(\"missed_deadlines\") val missed_deadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missed_gated_content: Boolean = false,\n+        @SerializedName(\"verified_upgrade_link\") val verified_upgrade_link: String = \"\",\n+        @SerializedName(\"content_type_gating_enabled\") val content_type_gating_enabled: Boolean = false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM1MDQ2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyNTo1MFrOHSTRXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyNTo1MFrOHSTRXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1MjE1Nw==", "bodyText": "Please add the test cases against these utility methods.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488952157", "createdAt": "2020-09-15T20:25:50Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,137 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+import org.edx.mobile.view.CourseDatesPageFragment\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val dates_banner_info: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val course_date_blocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missed_deadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missed_gated_content: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learner_is_full_access: Boolean = false,\n+        @SerializedName(\"user_timezone\") val user_timezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verified_upgrade_link: String = \"\",\n+        var data: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun populateCourseDates() {\n+        populateCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Rearrange the date blocks according to design and stack all the blocks of same date in one key\n+     */\n+    private fun populateCourseDatesInBlock() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM1NjA5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyNzozM1rOHSTU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyNzozM1rOHSTU4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1MzA1OQ==", "bodyText": "IMO getCourseDates is more appropriate.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488953059", "createdAt": "2020-09-15T20:27:33Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/course/CourseService.java", "diffHunk": "@@ -134,6 +135,9 @@ public CourseService get() {\n     @POST(\"/api/completion/v1/completion-batch\")\n     Call<JSONObject> markBlocksCompletion(@Body BlocksCompletionBody completionBody);\n \n+    @GET(\"api/course_home/v1/dates/{course_key}\")\n+    Call<CourseDates> getCourseDate(@Path(\"course_key\") String courseId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM2MTI5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyOToxMlrOHSTYOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDoyOToxMlrOHSTYOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1MzkxNQ==", "bodyText": "IMO getStringArgument is more suitable here.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488953915", "createdAt": "2020-09-15T20:29:12Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "diffHunk": "@@ -29,6 +30,19 @@ public void onCreate(Bundle savedInstanceState) {\n         EventBus.getDefault().post(new NewRelicEvent(getClass().getSimpleName()));\n     }\n \n+    public Context getContextOrThrow() {\n+        if (getContext() != null)\n+            return getContext();\n+        throw new IllegalStateException(\"Context can only be accessed when attached with activity\");\n+    }\n+\n+    public String getArgumentString(String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM2NTk3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDozMDo0M1rOHSTbVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQxMjowMjo0NVrOHSti5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NDcwOQ==", "bodyText": "is it approved by the product?", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488954709", "createdAt": "2020-09-15T20:30:43Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/strings.xml", "diffHunk": "@@ -232,6 +232,8 @@\n     <string name=\"label_ended\">Ended {date}</string>\n     <!-- Label for date when course is ending -->\n     <string name=\"label_ending\">Ending {date}</string>\n+    <!-- Error Message when course dates are not available -->\n+    <string name=\"course_dates_unavailable_message\">Course dates are not currently available.</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI3Mjk3MQ==", "bodyText": "it was suggested by iOS", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489272971", "createdAt": "2020-09-16T08:51:00Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/strings.xml", "diffHunk": "@@ -232,6 +232,8 @@\n     <string name=\"label_ended\">Ended {date}</string>\n     <!-- Label for date when course is ending -->\n     <string name=\"label_ending\">Ending {date}</string>\n+    <!-- Error Message when course dates are not available -->\n+    <string name=\"course_dates_unavailable_message\">Course dates are not currently available.</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NDcwOQ=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM2MzQ2Mg==", "bodyText": "@mumer92 is this string approved by PO ?", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489363462", "createdAt": "2020-09-16T11:27:22Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/strings.xml", "diffHunk": "@@ -232,6 +232,8 @@\n     <string name=\"label_ended\">Ended {date}</string>\n     <!-- Label for date when course is ending -->\n     <string name=\"label_ending\">Ending {date}</string>\n+    <!-- Error Message when course dates are not available -->\n+    <string name=\"course_dates_unavailable_message\">Course dates are not currently available.</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NDcwOQ=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTM4MjYyOQ==", "bodyText": "@omerhabib26 @farhan\nThis string was already in the iOS code base when web view was being used, this error was shown if web view was not loaded properly, so now this string is being used in native dates view if api returns error.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489382629", "createdAt": "2020-09-16T12:02:45Z", "author": {"login": "mumer92"}, "path": "OpenEdXMobile/res/values/strings.xml", "diffHunk": "@@ -232,6 +232,8 @@\n     <string name=\"label_ended\">Ended {date}</string>\n     <!-- Label for date when course is ending -->\n     <string name=\"label_ending\">Ending {date}</string>\n+    <!-- Error Message when course dates are not available -->\n+    <string name=\"course_dates_unavailable_message\">Course dates are not currently available.</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NDcwOQ=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM3MjUzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDozMjo0NVrOHSTfVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwOToyNDowNVrOHSoJ1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NTczNQ==", "bodyText": "better to use ErrorHandlingCallback instated of.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488955735", "createdAt": "2020-09-15T20:32:45Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDateViewModel(private val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()\n+    }\n+\n+    fun fetchCourseDates() {\n+        _errorMessage.value = null\n+        _swipeRefresh.value = false\n+        _showLoader.value = true\n+        courseAPI.getCourseDates(courseID).enqueue(object : Callback<CourseDates> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTI5NDI5Mw==", "bodyText": "ErrorHandlingCallback required context", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r489294293", "createdAt": "2020-09-16T09:24:05Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDateViewModel(private val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()\n+    }\n+\n+    fun fetchCourseDates() {\n+        _errorMessage.value = null\n+        _swipeRefresh.value = false\n+        _showLoader.value = true\n+        courseAPI.getCourseDates(courseID).enqueue(object : Callback<CourseDates> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NTczNQ=="}, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1OTM4Mjc4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/custom/IconProgressBar.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDozNTozNVrOHSTlbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQyMDozNTozNVrOHSTlbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODk1NzI5NQ==", "bodyText": "I think there is no need to update the generic implementation for the single usage only.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r488957295", "createdAt": "2020-09-15T20:35:35Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/custom/IconProgressBar.java", "diffHunk": "@@ -89,6 +90,10 @@ public void setIndeterminateIconColor(@NonNull ColorStateList colorStateList) {\n         }\n     }\n \n+    public void showProgress(boolean isShow) {\n+        this.setVisibility(isShow ? View.VISIBLE : View.GONE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40f7cac752eaaf41f776940f8d6090db7e6e60fe"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NTg5ODI1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwNjozNDo1N1rOHTTZXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzo0OTowMVrOHUB64A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwMjc4MQ==", "bodyText": "IMO, the following is better.\n// To enable data binding with kotlin", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490002781", "createdAt": "2020-09-17T06:34:57Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -25,6 +25,7 @@ apply plugin: 'edxapp'\n apply plugin: 'kotlin-android-extensions'\n apply plugin: 'com.android.application'\n apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-kapt' //used for data binding utils functions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2NTAyNA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490765024", "createdAt": "2020-09-18T07:49:01Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/build.gradle", "diffHunk": "@@ -25,6 +25,7 @@ apply plugin: 'edxapp'\n apply plugin: 'kotlin-android-extensions'\n apply plugin: 'com.android.application'\n apply plugin: 'kotlin-android'\n+apply plugin: 'kotlin-kapt' //used for data binding utils functions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDAwMjc4MQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NjYzODA5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwOTo1MTozM1rOHTaYLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODowNTo0NFrOHUCduA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNzE2NA==", "bodyText": "IMO onDateClick click is more appropriate here.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490117164", "createdAt": "2020-09-17T09:51:33Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3Mzk0NA==", "bodyText": "changed to \"onDateItemClick\"", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490773944", "createdAt": "2020-09-18T08:05:44Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDExNzE2NA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzAzODE4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo0NDo1MFrOHTeHYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxODo0OVrOHUI2Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3ODQwMQ==", "bodyText": "IMO, it's better to inject directly in CourseDatesRepository.\nref: https://medium.com/@amtechnovation/android-architecture-component-mvvm-part-1-a2e7cff07a76", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490178401", "createdAt": "2020-09-17T11:44:50Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3ODUwMw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490878503", "createdAt": "2020-09-18T11:18:49Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE3ODQwMQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzA4NTU3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMTo1Njo1NFrOHTejGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMTozMVrOHUI7Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE4NTQ5OQ==", "bodyText": "Remove courseAPI parameter after directly inject in CourseDatesRepository, and pass Context if required.\nIMO it will make more generic for future migration to MVVM.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490185499", "createdAt": "2020-09-17T11:56:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTc2Ng==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490879766", "createdAt": "2020-09-18T11:21:31Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDE4NTQ5OQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzM2MDYwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowNTo0OFrOHThHaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMTo1MVrOHUJRyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNzU2MQ==", "bodyText": "IMO there is no need to create 2 different methods there should only one method is enough named fetchCourseDates. Also no need to store courseID.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490227561", "createdAt": "2020-09-17T13:05:48Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.repositorie.CourseDatesRepository\n+import retrofit2.Response\n+import org.edx.mobile.http.model.NetworkResponseCallback as NetworkResponseCallback1\n+\n+class CourseDateViewModel(val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val repository: CourseDatesRepository = CourseDatesRepository.getInstance(courseAPI = courseAPI)\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NTU3Ng==", "bodyText": "Implemented", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490885576", "createdAt": "2020-09-18T11:31:51Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.repositorie.CourseDatesRepository\n+import retrofit2.Response\n+import org.edx.mobile.http.model.NetworkResponseCallback as NetworkResponseCallback1\n+\n+class CourseDateViewModel(val courseAPI: CourseAPI) : ViewModel() {\n+\n+    private val repository: CourseDatesRepository = CourseDatesRepository.getInstance(courseAPI = courseAPI)\n+\n+    private val _showLoader = MutableLiveData<Boolean>()\n+    val showLoader: LiveData<Boolean>\n+        get() = _showLoader\n+\n+    private val _swipeRefresh = MutableLiveData<Boolean>()\n+    val swipeRefresh: LiveData<Boolean>\n+        get() = _swipeRefresh\n+\n+    private val _courseDates = MutableLiveData<CourseDates>()\n+    val courseDates: LiveData<CourseDates>\n+        get() = _courseDates\n+\n+    private val _errorMessage = MutableLiveData<Throwable>()\n+    val errorMessage: LiveData<Throwable>\n+        get() = _errorMessage\n+\n+    private lateinit var courseID: String\n+\n+    fun startViewModel(courseID: String) {\n+        this.courseID = courseID\n+        fetchCourseDates()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNzU2MQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc0MDI0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyMjozMlrOHTkxUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzo1NTo0MlrOHUCJow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NzQ0MA==", "bodyText": "Better to receive context, and the courseApi instance through RoboGuice.getInjector(context).getInstance(CourseAPI::class.java)", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490287440", "createdAt": "2020-09-17T14:22:32Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc2ODgwMw==", "bodyText": "Removed and injected CourseAPI directly through using MainApplication.application.applicationContext in Repository", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490768803", "createdAt": "2020-09-18T07:55:42Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4NzQ0MA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc0ODQ0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNDoxNFrOHTk2fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNzo1ODoyNlrOHUCO_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4ODc2Nw==", "bodyText": "I think there is no need to check the null, cuz instance is non-static.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490288767", "createdAt": "2020-09-17T14:24:14Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {\n+    companion object {\n+        private var instance: CourseDatesRepository? = null\n+        fun getInstance(courseAPI: CourseAPI): CourseDatesRepository {\n+            instance?.let { it ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDc3MDE3Mg==", "bodyText": "it is a static object and used for singlton purpose defined in companion object", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490770172", "createdAt": "2020-09-18T07:58:26Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {\n+    companion object {\n+        private var instance: CourseDatesRepository? = null\n+        fun getInstance(courseAPI: CourseAPI): CourseDatesRepository {\n+            instance?.let { it ->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4ODc2Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc1NzkxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNjowNVrOHTk8ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowNjo1NFrOHUIfYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDI3Nw==", "bodyText": "directly initialize to instance instated of.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490290277", "createdAt": "2020-09-17T14:26:05Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {\n+    companion object {\n+        private var instance: CourseDatesRepository? = null\n+        fun getInstance(courseAPI: CourseAPI): CourseDatesRepository {\n+            instance?.let { it ->\n+                return it\n+            }\n+            val repository = CourseDatesRepository(courseAPI = courseAPI)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MjY3NQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490872675", "createdAt": "2020-09-18T11:06:54Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {\n+    companion object {\n+        private var instance: CourseDatesRepository? = null\n+        fun getInstance(courseAPI: CourseAPI): CourseDatesRepository {\n+            instance?.let { it ->\n+                return it\n+            }\n+            val repository = CourseDatesRepository(courseAPI = courseAPI)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDI3Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc2MDE0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoyNjozMVrOHTk9ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTowMzoxOFrOHUIYUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDYxOA==", "bodyText": "better to rename repository.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490290618", "createdAt": "2020-09-17T14:26:31Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {\n+    companion object {\n+        private var instance: CourseDatesRepository? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3MDg2NA==", "bodyText": "used instance for singlton purpose as a mutable property", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490870864", "createdAt": "2020-09-18T11:03:18Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/repositorie/CourseDatesRepository.kt", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.edx.mobile.repositorie\n+\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.model.NetworkResponseCallback\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+\n+class CourseDatesRepository(val courseAPI: CourseAPI) {\n+    companion object {\n+        private var instance: CourseDatesRepository? = null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5MDYxOA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc4ODk0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozMjo0MlrOHTlQjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMTo1OVrOHUJSIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTQzOA==", "bodyText": "no need to define an alias.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490295438", "createdAt": "2020-09-17T14:32:42Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.repositorie.CourseDatesRepository\n+import retrofit2.Response\n+import org.edx.mobile.http.model.NetworkResponseCallback as NetworkResponseCallback1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NTY2Ng==", "bodyText": "removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490885666", "createdAt": "2020-09-18T11:31:59Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/viewModel/CourseDateViewModel.kt", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.edx.mobile.viewModel\n+\n+import androidx.lifecycle.LiveData\n+import androidx.lifecycle.MutableLiveData\n+import androidx.lifecycle.ViewModel\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.model.Result\n+import org.edx.mobile.model.course.CourseDates\n+import org.edx.mobile.repositorie.CourseDatesRepository\n+import retrofit2.Response\n+import org.edx.mobile.http.model.NetworkResponseCallback as NetworkResponseCallback1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NTQzOA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2Nzc5OTI4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/model/NetworkResponse.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozNDozNFrOHTlXXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo0MzozOVrOHUHwYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzE4Mw==", "bodyText": "Need docString, and inspiration for this class.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490297183", "createdAt": "2020-09-17T14:34:34Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/model/NetworkResponse.kt", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.edx.mobile.http.model\n+\n+sealed class Result<out R> {\n+    data class Success<out T>(val isSuccessful: Boolean, val data: T?, val code: Int, val message: String) : Result<T>()\n+    data class Error(val throwable: Throwable) : Result<Nothing>()\n+}\n+\n+interface NetworkResponseCallback<T>{\n+    fun onSuccess(result: Result.Success<T>)\n+    fun onError(error: Result.Error)\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2MDY0MQ==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490860641", "createdAt": "2020-09-18T10:43:39Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/http/model/NetworkResponse.kt", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.edx.mobile.http.model\n+\n+sealed class Result<out R> {\n+    data class Success<out T>(val isSuccessful: Boolean, val data: T?, val code: Int, val message: String) : Result<T>()\n+    data class Error(val throwable: Throwable) : Result<Nothing>()\n+}\n+\n+interface NetworkResponseCallback<T>{\n+    fun onSuccess(result: Result.Success<T>)\n+    fun onError(error: Result.Error)\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI5NzE4Mw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODAwNzk3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMTowN1rOHTnaXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyNzozNFrOHUJHzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMDcxOA==", "bodyText": "it's better to add this check in CourseDateViewModel -> onSuccess.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490330718", "createdAt": "2020-09-17T15:11:07Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.startViewModel(courseID = getStringArgument(Router.EXTRA_COURSE_ID))\n+    }\n+\n+    private fun initObserver() {\n+        viewModel.showLoader.observe(this, Observer { showLoader ->\n+            binding.loadingIndicator.loadingIndicator.visibility = if (showLoader) View.VISIBLE else View.GONE\n+        })\n+\n+        viewModel.courseDates.observe(this, Observer { dates ->\n+            if (dates.courseDateBlocks.isNullOrEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4MzAyMA==", "bodyText": "we are showing local msg from string.xml based on empty dates list which required context", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490883020", "createdAt": "2020-09-18T11:27:34Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.startViewModel(courseID = getStringArgument(Router.EXTRA_COURSE_ID))\n+    }\n+\n+    private fun initObserver() {\n+        viewModel.showLoader.observe(this, Observer { showLoader ->\n+            binding.loadingIndicator.loadingIndicator.visibility = if (showLoader) View.VISIBLE else View.GONE\n+        })\n+\n+        viewModel.courseDates.observe(this, Observer { dates ->\n+            if (dates.courseDateBlocks.isNullOrEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMDcxOA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODAxNjAyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxMjo1MFrOHTnfaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyODo1NlrOHUJK_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMjAwOA==", "bodyText": "I think the following code works the same as above.\nif (throwable != null) {\n                if (throwable is HttpStatusException) {\n                    when (throwable.statusCode) {\n                        HttpStatus.UNAUTHORIZED -> {\n                            environment.router?.forceLogout(contextOrThrow,\n                                    environment.analyticsRegistry,\n                                    environment.notificationDelegate)\n                            return@Observer\n                        }\n                    }\n                }\n                errorNotification.showError(contextOrThrow, throwable, -1, null)\n            }", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490332008", "createdAt": "2020-09-17T15:12:50Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.startViewModel(courseID = getStringArgument(Router.EXTRA_COURSE_ID))\n+    }\n+\n+    private fun initObserver() {\n+        viewModel.showLoader.observe(this, Observer { showLoader ->\n+            binding.loadingIndicator.loadingIndicator.visibility = if (showLoader) View.VISIBLE else View.GONE\n+        })\n+\n+        viewModel.courseDates.observe(this, Observer { dates ->\n+            if (dates.courseDateBlocks.isNullOrEmpty()) {\n+                viewModel.setError(HttpStatus.NO_CONTENT, getString(R.string.course_dates_unavailable_message))\n+            } else {\n+                dates.organiseCourseDates()\n+                binding.rvDates.apply {\n+                    layoutManager = LinearLayoutManager(context)\n+                    adapter = CourseDatesAdapter(dates.courseDatesMap, dates.sortKeys, onLinkClick)\n+                }\n+            }\n+        })\n+\n+        viewModel.errorMessage.observe(this, Observer { throwable ->\n+            if (throwable != null) {\n+                if (throwable is HttpStatusException) {\n+                    when (throwable.statusCode) {\n+                        HttpStatus.UNAUTHORIZED -> {\n+                            environment.router?.forceLogout(contextOrThrow,\n+                                    environment.analyticsRegistry,\n+                                    environment.notificationDelegate)\n+                        }\n+                        else ->\n+                            errorNotification.showError(contextOrThrow, throwable, -1, null)\n+                    }\n+                } else {\n+                    errorNotification.showError(contextOrThrow, throwable, -1, null)\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4MzgzOQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490883839", "createdAt": "2020-09-18T11:28:56Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+\n+class CourseDatesPageFragment : OfflineSupportBaseFragment() {\n+\n+    @Inject\n+    private lateinit var courseAPI: CourseAPI\n+\n+    @Inject\n+    private lateinit var environment: EdxEnvironment\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+\n+    private lateinit var binding: FragmentCourseDatesPageBinding\n+    private lateinit var viewModel: CourseDateViewModel\n+    private var onLinkClick: OnDateBlockListener = object : OnDateBlockListener {\n+        override fun onClick(link: String) {\n+            BrowserUtil.open(activity, link)\n+        }\n+    }\n+\n+    companion object {\n+        @JvmStatic\n+        fun makeArguments(courseId: String): Bundle {\n+            val courseBundle = Bundle()\n+            courseBundle.putString(Router.EXTRA_COURSE_ID, courseId)\n+            return courseBundle\n+        }\n+    }\n+\n+    override fun isShowingFullScreenError(): Boolean {\n+        return errorNotification.isShowing\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_course_dates_page, container, false)\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        viewModel = ViewModelProvider(this, ViewModelFactory(courseAPI = courseAPI)).get(CourseDateViewModel::class.java)\n+\n+        errorNotification = FullScreenErrorNotification(binding.swipeContainer)\n+\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.loadingIndicator.visibility = View.GONE\n+            errorNotification.hideError()\n+            viewModel.fetchCourseDates(true)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        initObserver()\n+        viewModel.startViewModel(courseID = getStringArgument(Router.EXTRA_COURSE_ID))\n+    }\n+\n+    private fun initObserver() {\n+        viewModel.showLoader.observe(this, Observer { showLoader ->\n+            binding.loadingIndicator.loadingIndicator.visibility = if (showLoader) View.VISIBLE else View.GONE\n+        })\n+\n+        viewModel.courseDates.observe(this, Observer { dates ->\n+            if (dates.courseDateBlocks.isNullOrEmpty()) {\n+                viewModel.setError(HttpStatus.NO_CONTENT, getString(R.string.course_dates_unavailable_message))\n+            } else {\n+                dates.organiseCourseDates()\n+                binding.rvDates.apply {\n+                    layoutManager = LinearLayoutManager(context)\n+                    adapter = CourseDatesAdapter(dates.courseDatesMap, dates.sortKeys, onLinkClick)\n+                }\n+            }\n+        })\n+\n+        viewModel.errorMessage.observe(this, Observer { throwable ->\n+            if (throwable != null) {\n+                if (throwable is HttpStatusException) {\n+                    when (throwable.statusCode) {\n+                        HttpStatus.UNAUTHORIZED -> {\n+                            environment.router?.forceLogout(contextOrThrow,\n+                                    environment.analyticsRegistry,\n+                                    environment.notificationDelegate)\n+                        }\n+                        else ->\n+                            errorNotification.showError(contextOrThrow, throwable, -1, null)\n+                    }\n+                } else {\n+                    errorNotification.showError(contextOrThrow, throwable, -1, null)\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzMjAwOA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODA0NjU5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDatesBannerInfo.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToxOTozNFrOHTnzAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDo1MTo1OVrOHUIAvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzNzAyNw==", "bodyText": "need to remove the extra line.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490337027", "createdAt": "2020-09-17T15:19:34Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDatesBannerInfo.kt", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg2NDgyOA==", "bodyText": "Removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490864828", "createdAt": "2020-09-18T10:51:59Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDatesBannerInfo.kt", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzNzAyNw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODA2MjM1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyMzoxMlrOHTn8ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo0Mzo1OVrOHUJvGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzOTUyMw==", "bodyText": "need java doc for dateBlockTag  data member.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490339523", "createdAt": "2020-09-17T15:23:12Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDateBlock(\n+        @SerializedName(\"complete\") var complete: Boolean = false,\n+        @SerializedName(\"date\") val date: String = \"\",\n+        @SerializedName(\"date_type\") var dateType: String? = \"\",\n+        @SerializedName(\"description\") val description: String = \"\",\n+        @SerializedName(\"learner_has_access\") var learnerHasAccess: Boolean = false,\n+        @SerializedName(\"link\") val link: String = \"\",\n+        @SerializedName(\"link_text\") val linkText: String = \"\",\n+        @SerializedName(\"title\") val title: String = \"\",\n+        var dateBlockTag: CourseDateType = CourseDateType.BLANK", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MzA4MQ==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490893081", "createdAt": "2020-09-18T11:43:59Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDateBlock(\n+        @SerializedName(\"complete\") var complete: Boolean = false,\n+        @SerializedName(\"date\") val date: String = \"\",\n+        @SerializedName(\"date_type\") var dateType: String? = \"\",\n+        @SerializedName(\"description\") val description: String = \"\",\n+        @SerializedName(\"learner_has_access\") var learnerHasAccess: Boolean = false,\n+        @SerializedName(\"link\") val link: String = \"\",\n+        @SerializedName(\"link_text\") val linkText: String = \"\",\n+        @SerializedName(\"title\") val title: String = \"\",\n+        var dateBlockTag: CourseDateType = CourseDateType.BLANK", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMzOTUyMw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODA2OTM2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNToyNDozMVrOHToA_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo0NDowNlrOHUJvQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MDYwNA==", "bodyText": "can remove CourseDateBlock in CourseDateBlock.DateTypes.TODAY_DATE", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490340604", "createdAt": "2020-09-17T15:24:31Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDateBlock(\n+        @SerializedName(\"complete\") var complete: Boolean = false,\n+        @SerializedName(\"date\") val date: String = \"\",\n+        @SerializedName(\"date_type\") var dateType: String? = \"\",\n+        @SerializedName(\"description\") val description: String = \"\",\n+        @SerializedName(\"learner_has_access\") var learnerHasAccess: Boolean = false,\n+        @SerializedName(\"link\") val link: String = \"\",\n+        @SerializedName(\"link_text\") val linkText: String = \"\",\n+        @SerializedName(\"title\") val title: String = \"\",\n+        var dateBlockTag: CourseDateType = CourseDateType.BLANK\n+\n+) {\n+    companion object {\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), dateType = CourseDateBlock.DateTypes.TODAY_DATE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5MzEyMg==", "bodyText": "Removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490893122", "createdAt": "2020-09-18T11:44:06Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDateBlock.kt", "diffHunk": "@@ -0,0 +1,47 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDateBlock(\n+        @SerializedName(\"complete\") var complete: Boolean = false,\n+        @SerializedName(\"date\") val date: String = \"\",\n+        @SerializedName(\"date_type\") var dateType: String? = \"\",\n+        @SerializedName(\"description\") val description: String = \"\",\n+        @SerializedName(\"learner_has_access\") var learnerHasAccess: Boolean = false,\n+        @SerializedName(\"link\") val link: String = \"\",\n+        @SerializedName(\"link_text\") val linkText: String = \"\",\n+        @SerializedName(\"title\") val title: String = \"\",\n+        var dateBlockTag: CourseDateType = CourseDateType.BLANK\n+\n+) {\n+    companion object {\n+        fun getTodayDateBlock() = CourseDateBlock(date = DateUtil.getCurrentTimeStamp(), dateType = CourseDateBlock.DateTypes.TODAY_DATE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0MDYwNA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODExMTEyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTozMzoyOFrOHToazA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1NzoyNFrOHUKIVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NzIxMg==", "bodyText": "need docstring for these data members.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490347212", "createdAt": "2020-09-17T15:33:28Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTU0Mg==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490899542", "createdAt": "2020-09-18T11:57:24Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM0NzIxMg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODE5ODE3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1MzozM1rOHTpRpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1NzoxNlrOHUKIJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2MTI1NA==", "bodyText": "no need to store the keys separately, as keys can be get from courseDatesMap.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490361254", "createdAt": "2020-09-17T15:53:33Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTQ5Mg==", "bodyText": "storing key separately to maintin the sorting of dates", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490899492", "createdAt": "2020-09-18T11:57:16Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2MTI1NA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODI2MTg0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjowNjo0NFrOHTp5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1MDoxM1rOHUJ6lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM3MTU4Mw==", "bodyText": "Utility method to check that list contains today's date block or not.\nIMO above one is better.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490371583", "createdAt": "2020-09-17T16:06:44Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NjAyMw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490896023", "createdAt": "2020-09-18T11:50:13Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM3MTU4Mw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODI3MzUyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjowODoyNlrOHTqBjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo0OTo0MVrOHUJ5XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM3MzUxOQ==", "bodyText": "I think the app should sort the map ascending dates order.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490373519", "createdAt": "2020-09-17T16:08:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NTcwOQ==", "bodyText": "due to multiple time of adding data in the map, sorting got disturbed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490895709", "createdAt": "2020-09-18T11:49:41Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM3MzUxOQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODMzNjAwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjoxNzoxN1rOHTqpZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1Njo0MFrOHUKG6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4MzcxNw==", "bodyText": "Add today's date block manually if not present in the date list\nis better IMO.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490383717", "createdAt": "2020-09-17T16:17:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTE3OA==", "bodyText": "updated", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490899178", "createdAt": "2020-09-18T11:56:40Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM4MzcxNw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQzNzQ2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjozMTowM1rOHTrm6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMFQyMjoxNDoyMlrOHU9egQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5OTQ2Nw==", "bodyText": "this condition is not working properly if the app needs to add today's block in the last position.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490399467", "createdAt": "2020-09-17T16:31:03Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5NzEzOQ==", "bodyText": "IMO, We shouldn't add today's block before the course started or after the course date expires or completed.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490897139", "createdAt": "2020-09-18T11:52:31Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5OTQ2Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc0MDgwMQ==", "bodyText": "not sure, but on web end show today's block before the course started or after the course date expires\nShow before start date:\n\nShow after end date:", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r491740801", "createdAt": "2020-09-20T22:14:22Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM5OTQ2Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODQ0MTIyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNjozMTo1OVrOHTrpPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToyMToxOVrOHUI6uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMDA2Mg==", "bodyText": "need to remove the extra line.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490400062", "createdAt": "2020-09-17T16:31:59Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3OTY3Mw==", "bodyText": "removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490879673", "createdAt": "2020-09-18T11:21:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/CourseDatesPageFragment.kt", "diffHunk": "@@ -0,0 +1,119 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.lifecycle.Observer\n+import androidx.lifecycle.ViewModelProvider\n+import androidx.recyclerview.widget.LinearLayoutManager\n+import org.edx.mobile.R\n+import org.edx.mobile.core.EdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentCourseDatesPageBinding\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.util.BrowserUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.CourseDatesAdapter\n+import org.edx.mobile.viewModel.CourseDateViewModel\n+import org.edx.mobile.viewModel.ViewModelFactory\n+import javax.inject.Inject\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQwMDA2Mg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODkyMzQ3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0MzozMVrOHTwYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1NjozMFrOHUKGqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NzYyMQ==", "bodyText": "Need more detailed comment for this method.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490477621", "createdAt": "2020-09-17T18:43:31Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+            var ind = 0\n+            sortKeys.forEachIndexed { index, str ->\n+                if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                    ind = index + 1\n+                }\n+            }\n+            sortKeys.add(ind, CourseDateBlock.getTodayDateBlock().getSimpleDateTime())\n+        }\n+    }\n+\n+    /**\n+     * Set the Date Block Tag against single date set\n+     */\n+    private fun setDateBlockTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTExNQ==", "bodyText": "Updated", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490899115", "createdAt": "2020-09-18T11:56:30Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+            var ind = 0\n+            sortKeys.forEachIndexed { index, str ->\n+                if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                    ind = index + 1\n+                }\n+            }\n+            sortKeys.add(ind, CourseDateBlock.getTodayDateBlock().getSimpleDateTime())\n+        }\n+    }\n+\n+    /**\n+     * Set the Date Block Tag against single date set\n+     */\n+    private fun setDateBlockTag() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NzYyMQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODkyMzc5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0MzozN1rOHTwYbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1NjoxNVrOHUKGLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NzY3OQ==", "bodyText": "Need more detailed comment for this method.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490477679", "createdAt": "2020-09-17T18:43:37Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+            var ind = 0\n+            sortKeys.forEachIndexed { index, str ->\n+                if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                    ind = index + 1\n+                }\n+            }\n+            sortKeys.add(ind, CourseDateBlock.getTodayDateBlock().getSimpleDateTime())\n+        }\n+    }\n+\n+    /**\n+     * Set the Date Block Tag against single date set\n+     */\n+    private fun setDateBlockTag() {\n+        var dueNextCount = 0\n+        sortKeys.forEach { key ->\n+            courseDatesMap[key]?.forEach { item ->\n+                var dateBlockTag: CourseDateType = getDateTypeTag(item)\n+                //Setting Due Next only for first occurrence\n+                if (dateBlockTag == CourseDateType.DUE_NEXT) {\n+                    if (dueNextCount == 0)\n+                        dueNextCount += 1\n+                    else\n+                        dateBlockTag = CourseDateType.BLANK\n+                }\n+                item.dateBlockTag = dateBlockTag\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Method to get the Tag to be set on Pill/Badge of date block\n+     */\n+    private fun getDateTypeTag(item: CourseDateBlock): CourseDateType {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5ODk4OA==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490898988", "createdAt": "2020-09-18T11:56:15Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+            var ind = 0\n+            sortKeys.forEachIndexed { index, str ->\n+                if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                    ind = index + 1\n+                }\n+            }\n+            sortKeys.add(ind, CourseDateBlock.getTodayDateBlock().getSimpleDateTime())\n+        }\n+    }\n+\n+    /**\n+     * Set the Date Block Tag against single date set\n+     */\n+    private fun setDateBlockTag() {\n+        var dueNextCount = 0\n+        sortKeys.forEach { key ->\n+            courseDatesMap[key]?.forEach { item ->\n+                var dateBlockTag: CourseDateType = getDateTypeTag(item)\n+                //Setting Due Next only for first occurrence\n+                if (dateBlockTag == CourseDateType.DUE_NEXT) {\n+                    if (dueNextCount == 0)\n+                        dueNextCount += 1\n+                    else\n+                        dateBlockTag = CourseDateType.BLANK\n+                }\n+                item.dateBlockTag = dateBlockTag\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Method to get the Tag to be set on Pill/Badge of date block\n+     */\n+    private fun getDateTypeTag(item: CourseDateBlock): CourseDateType {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3NzY3OQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODkyNzI2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo0NDoyOFrOHTwaeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTo1NjoyNVrOHUKGdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3ODIwMg==", "bodyText": "renamed it to a more appropriate method name.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490478202", "createdAt": "2020-09-17T18:44:28Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+            var ind = 0\n+            sortKeys.forEachIndexed { index, str ->\n+                if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                    ind = index + 1\n+                }\n+            }\n+            sortKeys.add(ind, CourseDateBlock.getTodayDateBlock().getSimpleDateTime())\n+        }\n+    }\n+\n+    /**\n+     * Set the Date Block Tag against single date set\n+     */\n+    private fun setDateBlockTag() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg5OTA2MQ==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490899061", "createdAt": "2020-09-18T11:56:25Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/model/course/CourseDates.kt", "diffHunk": "@@ -0,0 +1,136 @@\n+package org.edx.mobile.model.course\n+\n+import com.google.gson.annotations.SerializedName\n+import org.edx.mobile.util.CourseDateType\n+import org.edx.mobile.util.DateUtil\n+\n+data class CourseDates(\n+        @SerializedName(\"dates_banner_info\") val datesBannerInfo: CourseDatesBannerInfo,\n+        @SerializedName(\"course_date_blocks\") val courseDateBlocks: List<CourseDateBlock>?,\n+        @SerializedName(\"missed_deadlines\") val missedDeadlines: Boolean = false,\n+        @SerializedName(\"missed_gated_content\") val missedGatedContent: Boolean = false,\n+        @SerializedName(\"learner_is_full_access\") val learnerIsFullAccess: Boolean = false,\n+        @SerializedName(\"user_timezone\") val userTimezone: String = \"\",\n+        @SerializedName(\"verified_upgrade_link\") val verifiedUpgradeLink: String = \"\",\n+        var courseDatesMap: HashMap<String, ArrayList<CourseDateBlock>> = HashMap(),\n+        var sortKeys: ArrayList<String> = ArrayList()\n+) {\n+    fun organiseCourseDates() {\n+        organiseCourseDatesInBlock()\n+        if (isContainToday().not()) {\n+            addTodayBlock()\n+        }\n+        setDateBlockTag()\n+    }\n+\n+    /**\n+     * Map the date blocks according to dates and stack all the blocks of same date against one key\n+     */\n+    private fun organiseCourseDatesInBlock() {\n+        courseDatesMap = HashMap()\n+        sortKeys = ArrayList()\n+        courseDateBlocks?.forEach { item ->\n+            if (courseDatesMap.containsKey(item.getSimpleDateTime())) {\n+                (courseDatesMap[item.getSimpleDateTime()] as ArrayList).add(item)\n+            } else {\n+                courseDatesMap[item.getSimpleDateTime()] = arrayListOf(item)\n+                sortKeys.add(item.getSimpleDateTime())\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Utility Method to check if the list contains the today date block or not\n+     */\n+    private fun isContainToday(): Boolean {\n+        courseDateBlocks?.forEach {\n+            if (it.isToday()) {\n+                return true\n+            }\n+        }\n+        return false\n+    }\n+\n+    /**\n+     * Add today date block manually if not present in date list\n+     */\n+    private fun addTodayBlock() {\n+        if (DateUtil.isDatePast(sortKeys.first()) && DateUtil.isDateDue(sortKeys.last())) {\n+            var ind = 0\n+            sortKeys.forEachIndexed { index, str ->\n+                if (index < sortKeys.lastIndex && DateUtil.isDatePast(str) && DateUtil.isDateDue(sortKeys[index + 1])) {\n+                    ind = index + 1\n+                }\n+            }\n+            sortKeys.add(ind, CourseDateBlock.getTodayDateBlock().getSimpleDateTime())\n+        }\n+    }\n+\n+    /**\n+     * Set the Date Block Tag against single date set\n+     */\n+    private fun setDateBlockTag() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ3ODIwMg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk2MTA3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1NDozM1rOHTwvpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozNjoyNFrOHUHjfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MzYyMw==", "bodyText": "no need to add the word Utility.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490483623", "createdAt": "2020-09-17T18:54:33Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "diffHunk": "@@ -29,6 +30,28 @@ public void onCreate(Bundle savedInstanceState) {\n         EventBus.getDefault().post(new NewRelicEvent(getClass().getSimpleName()));\n     }\n \n+    /**\n+     * Utility method to make getContext null safe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NzM0MA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490857340", "createdAt": "2020-09-18T10:36:24Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "diffHunk": "@@ -29,6 +30,28 @@ public void onCreate(Bundle savedInstanceState) {\n         EventBus.getDefault().post(new NewRelicEvent(getClass().getSimpleName()));\n     }\n \n+    /**\n+     * Utility method to make getContext null safe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MzYyMw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk2MTU5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1NDo0MVrOHTwv8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozNjoxOVrOHUHjYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MzY5Nw==", "bodyText": "no need to add the word Utility.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490483697", "createdAt": "2020-09-17T18:54:41Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "diffHunk": "@@ -29,6 +30,28 @@ public void onCreate(Bundle savedInstanceState) {\n         EventBus.getDefault().post(new NewRelicEvent(getClass().getSimpleName()));\n     }\n \n+    /**\n+     * Utility method to make getContext null safe\n+     * @return context if not null or throw exception else wise\n+     */\n+    public Context getContextOrThrow() {\n+        if (getContext() != null)\n+            return getContext();\n+        throw new IllegalStateException(\"Context can only be accessed when attached with activity\");\n+    }\n+\n+    /**\n+     * Utility method to get String argument null safe", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NzMxMg==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490857312", "createdAt": "2020-09-18T10:36:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/base/BaseFragment.java", "diffHunk": "@@ -29,6 +30,28 @@ public void onCreate(Bundle savedInstanceState) {\n         EventBus.getDefault().post(new NewRelicEvent(getClass().getSimpleName()));\n     }\n \n+    /**\n+     * Utility method to make getContext null safe\n+     * @return context if not null or throw exception else wise\n+     */\n+    public Context getContextOrThrow() {\n+        if (getContext() != null)\n+            return getContext();\n+        throw new IllegalStateException(\"Context can only be accessed when attached with activity\");\n+    }\n+\n+    /**\n+     * Utility method to get String argument null safe", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4MzY5Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk3NTIxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxODo1ODozOFrOHTw4Uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNjo0N1rOHULTTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NTg0Mw==", "bodyText": "can directly return the value.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490485843", "createdAt": "2020-09-17T18:58:38Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODczMg==", "bodyText": "Implemented", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490918732", "createdAt": "2020-09-18T12:36:47Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NTg0Mw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk4MzI5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowMDo1NFrOHTw9ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNjozOVrOHULS_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzE0Ng==", "bodyText": "/**\n     * This function match the provide date with the current date\n     *\n     * @return true if the provided date is today else false.\n     */\nis better.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490487146", "createdAt": "2020-09-17T19:00:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODY1Mw==", "bodyText": "Updated", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490918653", "createdAt": "2020-09-18T12:36:39Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4NzE0Ng=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2ODk5NTkyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowNDozMVrOHTxFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNjowOFrOHULSGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4OTE0Nw==", "bodyText": "IMO: isPastDate is more suitable here.\nneed doc-string here.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490489147", "createdAt": "2020-09-17T19:04:31Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODQyNw==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490918427", "createdAt": "2020-09-18T12:36:08Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ4OTE0Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAwNDQyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowNjo0OFrOHTxKhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNjozMlrOHULS2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDUwMg==", "bodyText": "no need to get current date in string form and then convert into a date object, we can directly use new Date() or Calendar.getInstance().getTime().", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490490502", "createdAt": "2020-09-17T19:06:48Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODYxOA==", "bodyText": "Updated", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490918618", "createdAt": "2020-09-18T12:36:32Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDUwMg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAwNDkwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowNjo1NFrOHTxKxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNjoyMVrOHULSkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDU2Ng==", "bodyText": "no need to get current date in string form and then convert into a date object, we can directly use new Date() or Calendar.getInstance().getTime().", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490490566", "createdAt": "2020-09-17T19:06:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date pastDate = convertToDate(date);\n+        if (currentDate != null && pastDate != null) {\n+            return pastDate.compareTo(currentDate) < 0;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isDateDue(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODU0NQ==", "bodyText": "Updated", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490918545", "createdAt": "2020-09-18T12:36:21Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date pastDate = convertToDate(date);\n+        if (currentDate != null && pastDate != null) {\n+            return pastDate.compareTo(currentDate) < 0;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isDateDue(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDU2Ng=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAwNjYzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowNzoyN1rOHTxL7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjozNjoxNVrOHULSWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDg2MA==", "bodyText": "IMO: isDueDate is more suitable here.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490490860", "createdAt": "2020-09-17T19:07:27Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date pastDate = convertToDate(date);\n+        if (currentDate != null && pastDate != null) {\n+            return pastDate.compareTo(currentDate) < 0;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isDateDue(String date) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxODQ5MA==", "bodyText": "Updated", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490918490", "createdAt": "2020-09-18T12:36:15Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date pastDate = convertToDate(date);\n+        if (currentDate != null && pastDate != null) {\n+            return pastDate.compareTo(currentDate) < 0;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isDateDue(String date) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MDg2MA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAxMzgyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTowOTo0MVrOHTxQfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMToxNToxOVrOHUIvNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MjAzMQ==", "bodyText": "can directly return the value.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490492031", "createdAt": "2020-09-17T19:09:41Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date pastDate = convertToDate(date);\n+        if (currentDate != null && pastDate != null) {\n+            return pastDate.compareTo(currentDate) < 0;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isDateDue(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date dueDate = convertToDate(date);\n+        if (currentDate != null && dueDate != null) {\n+            return dueDate.compareTo(currentDate) > 0;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This function returns Simple date in the yyyy-MM-dd format\n+     */\n+    public static String convertToSimpleDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg3NjcyNw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490876727", "createdAt": "2020-09-18T11:15:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DateUtil.java", "diffHunk": "@@ -62,6 +62,67 @@ public static String formatCourseNotStartedDate(String date) {\n         }\n     }\n \n+    /**\n+     * This function returns course date in the EEE, MMM dd, yyyy format\n+     */\n+    public static String formatCourseDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"EEE, MMM dd, yyyy\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);\n+            return formattedDate;\n+        } catch (Exception e) {\n+            //This will be removed when the PR for log changes is merged with master\n+            logger.error(e);\n+            return \"\";\n+        }\n+    }\n+\n+    /**\n+     * This function match the provide date with current date\n+     *\n+     * @return true if the provided date is today\n+     */\n+    public static boolean isDateToday(String date) {\n+        return convertToSimpleDate(date).equals(convertToSimpleDate(getCurrentTimeStamp()));\n+    }\n+\n+    public static boolean isDatePast(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date pastDate = convertToDate(date);\n+        if (currentDate != null && pastDate != null) {\n+            return pastDate.compareTo(currentDate) < 0;\n+        }\n+        return false;\n+    }\n+\n+    public static boolean isDateDue(String date) {\n+        Date currentDate = convertToDate(getCurrentTimeStamp());\n+        Date dueDate = convertToDate(date);\n+        if (currentDate != null && dueDate != null) {\n+            return dueDate.compareTo(currentDate) > 0;\n+        }\n+        return false;\n+    }\n+\n+    /**\n+     * This function returns Simple date in the yyyy-MM-dd format\n+     */\n+    public static String convertToSimpleDate(String date) {\n+        try {\n+            SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n+            Date startDate = DateUtil.convertToDate(date);\n+\n+            String formattedDate = dateFormat.format(startDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5MjAzMQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAxOTMxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/custom/IconProgressBar.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxMDo1NlrOHTxTqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMTowOFrOHUJQJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5Mjg0MA==", "bodyText": "unnecessary change.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490492840", "createdAt": "2020-09-17T19:10:56Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/custom/IconProgressBar.java", "diffHunk": "@@ -10,6 +10,7 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import android.util.AttributeSet;\n+import android.view.View;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NTE1Nw==", "bodyText": "Removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490885157", "createdAt": "2020-09-18T11:31:08Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/custom/IconProgressBar.java", "diffHunk": "@@ -10,6 +10,7 @@\n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import android.util.AttributeSet;\n+import android.view.View;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5Mjg0MA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTAzNDQwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOToxNTozM1rOHTxdSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMTozMDo0MFrOHUJPCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTMwNQ==", "bodyText": "need auto-format.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490495305", "createdAt": "2020-09-17T19:15:33Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg4NDg3NA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490884874", "createdAt": "2020-09-18T11:30:40Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/adapters/CourseDatesAdapter.kt", "diffHunk": "@@ -0,0 +1,74 @@\n+package org.edx.mobile.view.adapters\n+\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import androidx.recyclerview.widget.RecyclerView\n+import org.edx.mobile.BR\n+import org.edx.mobile.R\n+import org.edx.mobile.databinding.ItemCourseDateBlockBinding\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+import java.util.*\n+import kotlin.collections.HashMap\n+\n+class CourseDatesAdapter(private val data: HashMap<String, ArrayList<CourseDateBlock>>, private val keys: ArrayList<String>, private val onLinkClick: OnDateBlockListener) : RecyclerView.Adapter<CourseDatesAdapter.CourseDateHolder>() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ5NTMwNQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTE0NDg5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTozNTo1OVrOHTykNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNjowMlrOHUG7Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzQ2Mw==", "bodyText": "need auto-format", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490513463", "createdAt": "2020-09-17T19:35:59Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NzA3NA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490847074", "createdAt": "2020-09-18T10:16:02Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxMzQ2Mw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTE0OTQyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTozNjo1NFrOHTynUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNzowOFrOHUG9hQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDI1Nw==", "bodyText": "need to add sample text for the editor preview.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490514257", "createdAt": "2020-09-17T19:36:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"list\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet\"\n+            android:layout_width=\"@dimen/bullet_width\"\n+            android:layout_height=\"@dimen/bullet_height\"\n+            app:layout_constraintBottom_toBottomOf=\"@id/bullet_today\"\n+            app:layout_constraintEnd_toEndOf=\"@id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"@id/bullet_today\"\n+            binding:bulletBackground=\"@{dateType.dateBlockTag}\"\n+            binding:isDatePast=\"@{dateType.isDatePassed()}\"\n+            binding:isVisible=\"@{!dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet_today\"\n+            android:layout_width=\"@dimen/today_bullet_width\"\n+            android:layout_height=\"@dimen/today_bullet_height\"\n+            android:layout_marginStart=\"@dimen/edx_half_margin\"\n+            android:layout_marginTop=\"@dimen/widget_margin_half\"\n+            android:layout_marginEnd=\"@dimen/edx_half_margin\"\n+            android:src=\"@drawable/yellow_circle_black_border\"\n+            android:visibility=\"invisible\"\n+            app:layout_constraintStart_toStartOf=\"parent\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:isVisible=\"@{dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\"\n+            tools:visibility=\"visible\" />\n+\n+        <View\n+            android:id=\"@+id/line_below_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toBottomOf=\"@+id/date_info_container\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toBottomOf=\"@+id/bullet\" />\n+\n+        <LinearLayout\n+            android:id=\"@+id/date_info_container\"\n+            android:layout_width=\"0dp\"\n+            android:layout_height=\"wrap_content\"\n+            android:orientation=\"vertical\"\n+            android:paddingStart=\"@dimen/edx_margin\"\n+            android:paddingBottom=\"@dimen/edx_double_margin\"\n+            app:layout_constraintEnd_toEndOf=\"parent\"\n+            app:layout_constraintStart_toEndOf=\"@+id/bullet\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:addView=\"@{list}\"\n+            binding:clickListener=\"@{listener}\">\n+\n+            <LinearLayout\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"wrap_content\"\n+                android:orientation=\"horizontal\">\n+\n+                <TextView\n+                    android:id=\"@+id/date\"\n+                    android:layout_width=\"wrap_content\"\n+                    android:layout_height=\"wrap_content\"\n+                    android:text=\"@{dateType.getFormattedDate()}\"\n+                    android:textColor=\"@color/switch_text_color\"\n+                    android:textSize=\"@dimen/edx_large\"\n+                    fontPath=\"fonts/OpenSans-Semibold.ttf\" />\n+\n+                <TextView\n+                    android:id=\"@+id/date_tag\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NzYyMQ==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490847621", "createdAt": "2020-09-18T10:17:08Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"list\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet\"\n+            android:layout_width=\"@dimen/bullet_width\"\n+            android:layout_height=\"@dimen/bullet_height\"\n+            app:layout_constraintBottom_toBottomOf=\"@id/bullet_today\"\n+            app:layout_constraintEnd_toEndOf=\"@id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"@id/bullet_today\"\n+            binding:bulletBackground=\"@{dateType.dateBlockTag}\"\n+            binding:isDatePast=\"@{dateType.isDatePassed()}\"\n+            binding:isVisible=\"@{!dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet_today\"\n+            android:layout_width=\"@dimen/today_bullet_width\"\n+            android:layout_height=\"@dimen/today_bullet_height\"\n+            android:layout_marginStart=\"@dimen/edx_half_margin\"\n+            android:layout_marginTop=\"@dimen/widget_margin_half\"\n+            android:layout_marginEnd=\"@dimen/edx_half_margin\"\n+            android:src=\"@drawable/yellow_circle_black_border\"\n+            android:visibility=\"invisible\"\n+            app:layout_constraintStart_toStartOf=\"parent\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:isVisible=\"@{dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\"\n+            tools:visibility=\"visible\" />\n+\n+        <View\n+            android:id=\"@+id/line_below_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toBottomOf=\"@+id/date_info_container\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toBottomOf=\"@+id/bullet\" />\n+\n+        <LinearLayout\n+            android:id=\"@+id/date_info_container\"\n+            android:layout_width=\"0dp\"\n+            android:layout_height=\"wrap_content\"\n+            android:orientation=\"vertical\"\n+            android:paddingStart=\"@dimen/edx_margin\"\n+            android:paddingBottom=\"@dimen/edx_double_margin\"\n+            app:layout_constraintEnd_toEndOf=\"parent\"\n+            app:layout_constraintStart_toEndOf=\"@+id/bullet\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:addView=\"@{list}\"\n+            binding:clickListener=\"@{listener}\">\n+\n+            <LinearLayout\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"wrap_content\"\n+                android:orientation=\"horizontal\">\n+\n+                <TextView\n+                    android:id=\"@+id/date\"\n+                    android:layout_width=\"wrap_content\"\n+                    android:layout_height=\"wrap_content\"\n+                    android:text=\"@{dateType.getFormattedDate()}\"\n+                    android:textColor=\"@color/switch_text_color\"\n+                    android:textSize=\"@dimen/edx_large\"\n+                    fontPath=\"fonts/OpenSans-Semibold.ttf\" />\n+\n+                <TextView\n+                    android:id=\"@+id/date_tag\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDI1Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTE0OTg4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTozNjo1OFrOHTynnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoxNjozN1rOHUG8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDMzNQ==", "bodyText": "need to add sample text for the editor preview.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490514335", "createdAt": "2020-09-17T19:36:58Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"list\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet\"\n+            android:layout_width=\"@dimen/bullet_width\"\n+            android:layout_height=\"@dimen/bullet_height\"\n+            app:layout_constraintBottom_toBottomOf=\"@id/bullet_today\"\n+            app:layout_constraintEnd_toEndOf=\"@id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"@id/bullet_today\"\n+            binding:bulletBackground=\"@{dateType.dateBlockTag}\"\n+            binding:isDatePast=\"@{dateType.isDatePassed()}\"\n+            binding:isVisible=\"@{!dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet_today\"\n+            android:layout_width=\"@dimen/today_bullet_width\"\n+            android:layout_height=\"@dimen/today_bullet_height\"\n+            android:layout_marginStart=\"@dimen/edx_half_margin\"\n+            android:layout_marginTop=\"@dimen/widget_margin_half\"\n+            android:layout_marginEnd=\"@dimen/edx_half_margin\"\n+            android:src=\"@drawable/yellow_circle_black_border\"\n+            android:visibility=\"invisible\"\n+            app:layout_constraintStart_toStartOf=\"parent\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:isVisible=\"@{dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\"\n+            tools:visibility=\"visible\" />\n+\n+        <View\n+            android:id=\"@+id/line_below_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toBottomOf=\"@+id/date_info_container\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toBottomOf=\"@+id/bullet\" />\n+\n+        <LinearLayout\n+            android:id=\"@+id/date_info_container\"\n+            android:layout_width=\"0dp\"\n+            android:layout_height=\"wrap_content\"\n+            android:orientation=\"vertical\"\n+            android:paddingStart=\"@dimen/edx_margin\"\n+            android:paddingBottom=\"@dimen/edx_double_margin\"\n+            app:layout_constraintEnd_toEndOf=\"parent\"\n+            app:layout_constraintStart_toEndOf=\"@+id/bullet\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:addView=\"@{list}\"\n+            binding:clickListener=\"@{listener}\">\n+\n+            <LinearLayout\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"wrap_content\"\n+                android:orientation=\"horizontal\">\n+\n+                <TextView\n+                    android:id=\"@+id/date\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg0NzM1MA==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490847350", "createdAt": "2020-09-18T10:16:37Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,127 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:binding=\"http://schemas.android.com/apk/res-auto\"\n+    xmlns:tools=\"http://schemas.android.com/tools\">\n+\n+    <data>\n+\n+        <variable\n+            name=\"dateType\"\n+            type=\"org.edx.mobile.model.course.CourseDateBlock\" />\n+\n+        <variable\n+            name=\"listener\"\n+            type=\"org.edx.mobile.interfaces.OnDateBlockListener\" />\n+\n+        <variable\n+            name=\"list\"\n+            type=\"java.util.ArrayList&lt;org.edx.mobile.model.course.CourseDateBlock&gt;\" />\n+    </data>\n+\n+    <androidx.constraintlayout.widget.ConstraintLayout\n+        android:id=\"@+id/item_container\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:background=\"@color/white\"\n+        android:orientation=\"horizontal\">\n+\n+\n+        <View\n+            android:id=\"@+id/line_above_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toTopOf=\"@+id/bullet\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"parent\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet\"\n+            android:layout_width=\"@dimen/bullet_width\"\n+            android:layout_height=\"@dimen/bullet_height\"\n+            app:layout_constraintBottom_toBottomOf=\"@id/bullet_today\"\n+            app:layout_constraintEnd_toEndOf=\"@id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toTopOf=\"@id/bullet_today\"\n+            binding:bulletBackground=\"@{dateType.dateBlockTag}\"\n+            binding:isDatePast=\"@{dateType.isDatePassed()}\"\n+            binding:isVisible=\"@{!dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\" />\n+\n+        <ImageView\n+            android:id=\"@+id/bullet_today\"\n+            android:layout_width=\"@dimen/today_bullet_width\"\n+            android:layout_height=\"@dimen/today_bullet_height\"\n+            android:layout_marginStart=\"@dimen/edx_half_margin\"\n+            android:layout_marginTop=\"@dimen/widget_margin_half\"\n+            android:layout_marginEnd=\"@dimen/edx_half_margin\"\n+            android:src=\"@drawable/yellow_circle_black_border\"\n+            android:visibility=\"invisible\"\n+            app:layout_constraintStart_toStartOf=\"parent\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:isVisible=\"@{dateType.isToday()}\"\n+            tools:ignore=\"ContentDescription\"\n+            tools:visibility=\"visible\" />\n+\n+        <View\n+            android:id=\"@+id/line_below_dot\"\n+            android:layout_width=\"@dimen/width_hairline\"\n+            android:layout_height=\"0dp\"\n+            android:background=\"@drawable/black_line_vertical\"\n+            app:layout_constraintBottom_toBottomOf=\"@+id/date_info_container\"\n+            app:layout_constraintEnd_toEndOf=\"@+id/bullet_today\"\n+            app:layout_constraintStart_toStartOf=\"@+id/bullet_today\"\n+            app:layout_constraintTop_toBottomOf=\"@+id/bullet\" />\n+\n+        <LinearLayout\n+            android:id=\"@+id/date_info_container\"\n+            android:layout_width=\"0dp\"\n+            android:layout_height=\"wrap_content\"\n+            android:orientation=\"vertical\"\n+            android:paddingStart=\"@dimen/edx_margin\"\n+            android:paddingBottom=\"@dimen/edx_double_margin\"\n+            app:layout_constraintEnd_toEndOf=\"parent\"\n+            app:layout_constraintStart_toEndOf=\"@+id/bullet\"\n+            app:layout_constraintTop_toTopOf=\"parent\"\n+            binding:addView=\"@{list}\"\n+            binding:clickListener=\"@{listener}\">\n+\n+            <LinearLayout\n+                android:layout_width=\"match_parent\"\n+                android:layout_height=\"wrap_content\"\n+                android:orientation=\"horizontal\">\n+\n+                <TextView\n+                    android:id=\"@+id/date\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUxNDMzNQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTIyNjkzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxOTo1NzoyNlrOHTzV9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowMjo1N1rOHUKSRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNjE5Nw==", "bodyText": "Better to use Badge instated of Tag. as word Badge used in documentation", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490526197", "createdAt": "2020-09-17T19:57:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMjA4Ng==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490902086", "createdAt": "2020-09-18T12:02:57Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyNjE5Nw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI0MzIwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowMjoyNlrOHTzgMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyMDowN1rOHUKypw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyODgxOQ==", "bodyText": "as per feature document text color should be black.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490528819", "createdAt": "2020-09-17T20:02:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMDM3NQ==", "bodyText": "updated on doc", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490910375", "createdAt": "2020-09-18T12:20:07Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyODgxOQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI0NjgyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowMzozNVrOHTzicw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxOTo0OVrOHUKyAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTM5NQ==", "bodyText": "better to define the color in color.xml, which can help in future development related to the multiple themes app.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490529395", "createdAt": "2020-09-17T20:03:35Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMDIxMQ==", "bodyText": "added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490910211", "createdAt": "2020-09-18T12:19:49Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTM5NQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI0ODQ4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowNDowNFrOHTzjdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoxOTo0MlrOHUKxyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTY1NQ==", "bodyText": "same.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490529655", "createdAt": "2020-09-17T20:04:04Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMDE1NA==", "bodyText": "added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490910154", "createdAt": "2020-09-18T12:19:42Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTY1NQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI0OTAxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowNDoxM1rOHTzjxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyMDoxOVrOHUKzBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTczMw==", "bodyText": "same.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490529733", "createdAt": "2020-09-17T20:04:13Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n+                    }\n+                    CourseDateType.DUE_NEXT -> {\n+                        textView.setTextColor(Color.WHITE)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMDQ2OA==", "bodyText": "added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490910468", "createdAt": "2020-09-18T12:20:19Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n+                    }\n+                    CourseDateType.DUE_NEXT -> {\n+                        textView.setTextColor(Color.WHITE)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTczMw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI0OTM2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowNDoxOVrOHTzj-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyMDoyNlrOHUKzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTc4NA==", "bodyText": "same.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490529784", "createdAt": "2020-09-17T20:04:19Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n+                    }\n+                    CourseDateType.DUE_NEXT -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n+                    }\n+                    CourseDateType.NOT_YET_RELEASED -> {\n+                        textView.setTextColor(Color.GRAY)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMDUxNg==", "bodyText": "added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490910516", "createdAt": "2020-09-18T12:20:26Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n+                    }\n+                    CourseDateType.DUE_NEXT -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n+                    }\n+                    CourseDateType.NOT_YET_RELEASED -> {\n+                        textView.setTextColor(Color.GRAY)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUyOTc4NA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI1NDA3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowNTozNVrOHTzmvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjoyMTo1OFrOHUK2Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMDQ5Mg==", "bodyText": "We need to use semi bold instated of bold. this will set bold typeface to text.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490530492", "createdAt": "2020-09-17T20:05:35Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n+                    }\n+                    CourseDateType.DUE_NEXT -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n+                    }\n+                    CourseDateType.NOT_YET_RELEASED -> {\n+                        textView.setTextColor(Color.GRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n+                    }\n+                    else -> {\n+                        textView.visibility = View.INVISIBLE\n+                    }\n+                }\n+            }\n+            textView.setTypeface(null, Typeface.BOLD_ITALIC)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkxMTI0Ng==", "bodyText": "added in xml", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490911246", "createdAt": "2020-09-18T12:21:58Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {\n+\n+    companion object {\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isUserHasAccess\")\n+        fun isViewAccessible(view: View, type: CourseDateType) {\n+            when (type) {\n+                CourseDateType.VERIFIED_ONLY,\n+                CourseDateType.NOT_YET_RELEASED ->\n+                    view.isEnabled = false\n+                else ->\n+                    view.isEnabled = true\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:setText\")\n+        fun setText(textView: TextView, text: String?) {\n+            if (text.isNullOrBlank().not()) {\n+                textView.text = text\n+                textView.visibility = View.VISIBLE\n+            } else {\n+                textView.visibility = View.GONE\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:isVisible\")\n+        fun isViewVisible(imageView: ImageView, isVisible: Boolean) {\n+            imageView.visibility = if (isVisible) View.VISIBLE else View.INVISIBLE\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:addView\", \"binding:clickListener\", requireAll = true)\n+        fun addView(linearLayout: LinearLayout, list: ArrayList<CourseDateBlock>, clickListener: OnDateBlockListener) {\n+            val inflater: LayoutInflater = linearLayout.context.getSystemService(Context.LAYOUT_INFLATER_SERVICE) as LayoutInflater\n+            if (linearLayout.childCount < 2) {\n+                list.forEach { item ->\n+                    val childView = inflater.inflate(R.layout.sub_item_course_date_block, null)\n+\n+                    setText(childView.title, item.title)\n+                    isViewAccessible(childView.title, item.dateBlockTag)\n+\n+                    setText(childView.description, item.description)\n+                    isViewAccessible(childView.description, item.dateBlockTag)\n+\n+                    if (item.showLink()) {\n+                        childView.title.paintFlags = Paint.UNDERLINE_TEXT_FLAG\n+                    }\n+\n+                    childView.setOnClickListener {\n+                        if (item.showLink()) {\n+                            clickListener.onClick(item.link)\n+                        }\n+                    }\n+                    linearLayout.addView(childView)\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:bulletBackground\", \"binding:isDatePast\", requireAll = true)\n+        fun setBulletBackground(bulletView: ImageView, type: CourseDateType, isDatePast: Boolean) {\n+            bulletView.bringToFront()\n+            when (type) {\n+                CourseDateType.PAST_DUE -> {\n+                    bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_gray_circle)\n+                }\n+                CourseDateType.BLANK,\n+                CourseDateType.COMPLETED,\n+                CourseDateType.DUE_NEXT,\n+                CourseDateType.NOT_YET_RELEASED,\n+                CourseDateType.VERIFIED_ONLY -> {\n+                    if (isDatePast && (type == CourseDateType.VERIFIED_ONLY).not()) {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_border_white_circle)\n+                    } else {\n+                        bulletView.background = ContextCompat.getDrawable(bulletView.context, R.drawable.black_circle)\n+                    }\n+                }\n+            }\n+        }\n+\n+        @JvmStatic\n+        @BindingAdapter(\"binding:tagBackground\", \"binding:isToday\", requireAll = true)\n+        fun setTagBackground(textView: TextView, type: CourseDateType, isToday: Boolean) {\n+            if (isToday || type == CourseDateType.TODAY) {\n+                textView.text = CourseDateType.TODAY.getTitle()\n+                textView.setTextColor(Color.BLACK)\n+                textView.background = ContextCompat.getDrawable(textView.context, R.drawable.yellow_roundedbg)\n+            } else {\n+                setText(textView, type.getTitle())\n+                when (type) {\n+                    CourseDateType.VERIFIED_ONLY -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.black_roundedbg)\n+                        TextViewCompat.setCompoundDrawablesRelativeWithIntrinsicBounds(textView,\n+                                IconDrawable(textView.context, FontAwesomeIcons.fa_lock)\n+                                        .sizeRes(textView.context, R.dimen.small_icon_size)\n+                                        .colorRes(textView.context, R.color.white),\n+                                null, null, null\n+                        )\n+                    }\n+                    CourseDateType.COMPLETED -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_silver_roundedbg)\n+                    }\n+                    CourseDateType.PAST_DUE -> {\n+                        textView.setTextColor(Color.DKGRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.light_gray_roundedbg)\n+                    }\n+                    CourseDateType.DUE_NEXT -> {\n+                        textView.setTextColor(Color.WHITE)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.dark_gray_roundedbg)\n+                    }\n+                    CourseDateType.NOT_YET_RELEASED -> {\n+                        textView.setTextColor(Color.GRAY)\n+                        textView.background = ContextCompat.getDrawable(textView.context, R.drawable.silver_border_transparent_roundedbg)\n+                    }\n+                    else -> {\n+                        textView.visibility = View.INVISIBLE\n+                    }\n+                }\n+            }\n+            textView.setTypeface(null, Typeface.BOLD_ITALIC)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMDQ5Mg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI2NTE3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowOTowM1rOHTztlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozMDowMVrOHUHXrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjI0NQ==", "bodyText": "need to set up OpenSans-Semibold font style.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490532245", "createdAt": "2020-09-17T20:09:03Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NDMxNg==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490854316", "createdAt": "2020-09-18T10:30:01Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjI0NQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI2NTg0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowOToxNlrOHTzuAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoyNzo1MVrOHUHS-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjM1NA==", "bodyText": "need to set up OpenSans-Semi font style.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490532354", "createdAt": "2020-09-17T20:09:16Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:textColor=\"@color/switch_text_color\"\n+            android:textSize=\"@dimen/edx_base\"\n+            android:visibility=\"gone\"\n+            android:textStyle=\"bold\" />\n+\n+        <TextView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1MzExNA==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490853114", "createdAt": "2020-09-18T10:27:51Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:textColor=\"@color/switch_text_color\"\n+            android:textSize=\"@dimen/edx_base\"\n+            android:visibility=\"gone\"\n+            android:textStyle=\"bold\" />\n+\n+        <TextView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjM1NA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI2NjgwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDowOTozNVrOHTzurQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozMDoxN1rOHUHYLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjUyNQ==", "bodyText": "need auto-format.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490532525", "createdAt": "2020-09-17T20:09:35Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NDQ0Nw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490854447", "createdAt": "2020-09-18T10:30:17Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjUyNQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI2ODY1OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoxMDoxMVrOHTzv4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoyOTo1N1rOHUHXhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjgzMg==", "bodyText": "no need to use bold text style.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490532832", "createdAt": "2020-09-17T20:10:11Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:textColor=\"@color/switch_text_color\"\n+            android:textSize=\"@dimen/edx_base\"\n+            android:visibility=\"gone\"\n+            android:textStyle=\"bold\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NDI3Ng==", "bodyText": "removed", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490854276", "createdAt": "2020-09-18T10:29:57Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:textColor=\"@color/switch_text_color\"\n+            android:textSize=\"@dimen/edx_base\"\n+            android:visibility=\"gone\"\n+            android:textStyle=\"bold\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMjgzMg=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI3MTIwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoxMDo1M1rOHTzxZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozMDoxMFrOHUHX9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzIyMw==", "bodyText": "better to add some sample text for the editor preview.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490533223", "createdAt": "2020-09-17T20:10:53Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NDM4OA==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490854388", "createdAt": "2020-09-18T10:30:10Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzIyMw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI3MTQ2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoxMTowMFrOHTzxlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDoyNzozNFrOHUHSTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzI3MA==", "bodyText": "better to add some sample text for the editor preview.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490533270", "createdAt": "2020-09-17T20:11:00Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:textColor=\"@color/switch_text_color\"\n+            android:textSize=\"@dimen/edx_base\"\n+            android:visibility=\"gone\"\n+            android:textStyle=\"bold\" />\n+\n+        <TextView", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1Mjk0Mw==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490852943", "createdAt": "2020-09-18T10:27:34Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/layout/sub_item_course_date_block.xml", "diffHunk": "@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<layout xmlns:android=\"http://schemas.android.com/apk/res/android\">\n+\n+    <LinearLayout\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:paddingTop=\"@dimen/widget_margin_half\"\n+        android:paddingBottom=\"@dimen/widget_margin_half\"\n+        android:orientation=\"vertical\">\n+\n+        <TextView\n+            android:id=\"@+id/title\"\n+            android:layout_width=\"match_parent\"\n+            android:layout_height=\"wrap_content\"\n+            android:textColor=\"@color/switch_text_color\"\n+            android:textSize=\"@dimen/edx_base\"\n+            android:visibility=\"gone\"\n+            android:textStyle=\"bold\" />\n+\n+        <TextView", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzMzI3MA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTI3OTkwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoxMzo0NFrOHTz2vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMjowMTo1MFrOHUKQZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDU4OQ==", "bodyText": "class and method need doc-string and ref", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490534589", "createdAt": "2020-09-17T20:13:44Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMTYwNQ==", "bodyText": "Added", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490901605", "createdAt": "2020-09-18T12:01:50Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/util/DataBindingHelperUtils.kt", "diffHunk": "@@ -0,0 +1,149 @@\n+package org.edx.mobile.util\n+\n+import android.content.Context\n+import android.graphics.Color\n+import android.graphics.Paint\n+import android.graphics.Typeface\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.widget.ImageView\n+import android.widget.LinearLayout\n+import android.widget.TextView\n+import androidx.core.content.ContextCompat\n+import androidx.core.widget.TextViewCompat\n+import androidx.databinding.BindingAdapter\n+import com.joanzapata.iconify.IconDrawable\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import kotlinx.android.synthetic.main.sub_item_course_date_block.view.*\n+import org.edx.mobile.R\n+import org.edx.mobile.interfaces.OnDateBlockListener\n+import org.edx.mobile.model.course.CourseDateBlock\n+\n+class DataBindingHelperUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzNDU4OQ=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMxMTM3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/values/dimens.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyMzowN1rOHT0J7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozNDozN1rOHUHfuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzOTUwMA==", "bodyText": "no need to create a separate dimension for height & width of the same size.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490539500", "createdAt": "2020-09-17T20:23:07Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,14 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"bullet_width\">9dp</dimen>\n+    <dimen name=\"bullet_height\">9dp</dimen>\n+    <dimen name=\"today_bullet_width\">14dp</dimen>\n+    <dimen name=\"today_bullet_height\">14dp</dimen>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NjM3Nw==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490856377", "createdAt": "2020-09-18T10:34:37Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,14 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"bullet_width\">9dp</dimen>\n+    <dimen name=\"bullet_height\">9dp</dimen>\n+    <dimen name=\"today_bullet_width\">14dp</dimen>\n+    <dimen name=\"today_bullet_height\">14dp</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzOTUwMA=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2OTMxMTUyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/res/values/dimens.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QyMDoyMzoxMFrOHT0KBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMDozNDoyOVrOHUHfdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzOTUyNw==", "bodyText": "no need to create a separate dimension for height & width of the same size.", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490539527", "createdAt": "2020-09-17T20:23:10Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,14 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"bullet_width\">9dp</dimen>\n+    <dimen name=\"bullet_height\">9dp</dimen>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDg1NjMxMA==", "bodyText": "Done", "url": "https://github.com/edx/edx-app-android/pull/1435#discussion_r490856310", "createdAt": "2020-09-18T10:34:29Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/res/values/dimens.xml", "diffHunk": "@@ -258,4 +258,14 @@\n     <dimen name=\"edx_segmented_control_start_corner\">5dp</dimen>\n     <dimen name=\"edx_segmented_control_end_corner\">0dp</dimen>\n     <dimen name=\"social_button_top_margin\">6dp</dimen>\n+\n+    <!-- Course Dates Block  -->\n+    <dimen name=\"bullet_width\">9dp</dimen>\n+    <dimen name=\"bullet_height\">9dp</dimen>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDUzOTUyNw=="}, "originalCommit": {"oid": "dbd449990454f92d7508e543979911179f64ee2a"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 551, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}