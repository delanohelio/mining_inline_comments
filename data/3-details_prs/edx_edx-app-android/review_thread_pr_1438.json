{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ5Mzc1NjY4", "number": 1438, "reviewThreads": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDo1MzoyNlrOEPfWiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyNjoyOFrOEQvshQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njc3NzY5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDo1MzoyNlrOGzOnnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDo1MzoyNlrOGzOnnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MDA3Nw==", "bodyText": "no need to initialize Null.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456370077", "createdAt": "2020-07-17T10:53:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njc4NTgyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDo1NjoxOFrOGzOsgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTowMjoyNlrOG0BLxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MTMyOQ==", "bodyText": "these lines of code should be in the background thread otherwise increase load time.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456371329", "createdAt": "2020-07-17T10:56:18Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE5ODUzNA==", "bodyText": "IMO we have to use the retrofit callback.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r457198534", "createdAt": "2020-07-20T09:02:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MTMyOQ=="}, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njc5MjAwOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDo1ODoxN1rOGzOwHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMDo1ODoxN1rOGzOwHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3MjI1Mg==", "bodyText": "better to display loadingIndicator before loading course data when getting cached data.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456372252", "createdAt": "2020-07-17T10:58:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjgyMjM4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTowOTo0N1rOGzPCZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTowOTo0N1rOGzPCZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NjkzNQ==", "bodyText": "should cover all the scenarios as cover before. L#125", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456376935", "createdAt": "2020-07-17T11:09:47Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n+                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 247}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjgyNzk3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMToxMjowMFrOGzPF0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMToxMjowMFrOGzPF0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3NzgxMA==", "bodyText": "IMO getEnrolledCourses is the more appropriate name here instated of apiCall", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456377810", "createdAt": "2020-07-17T11:12:00Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NjgzMDQ4OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMToxMzowMVrOGzPHRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMToxMzowMVrOGzPHRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM3ODE4MQ==", "bodyText": "better to add @NotNull annotation with call and response params.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456378181", "createdAt": "2020-07-17T11:13:01Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njg2MDA5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMToyNDoxN1rOGzPYwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMToyNDoxN1rOGzPYwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4MjY1Ng==", "bodyText": "IMO, we have to check response code 200, there is the min chance to get other response code, as isSuccessful Returns true if response code is in the range [200..300).", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456382656", "createdAt": "2020-07-17T11:24:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0Njg3NzI5OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTozMDo1OFrOGzPjAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxMTozMDo1OFrOGzPjAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjM4NTI4Mw==", "bodyText": "better to replace with lambda notation.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456385283", "createdAt": "2020-07-17T11:30:58Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 228}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU1MTQ3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0Njo0OVrOGzV49w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0Njo0OVrOGzV49w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ4OTIwNw==", "bodyText": "there should be more appropriate method name e.d populateCourseData.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456489207", "createdAt": "2020-07-17T14:46:49Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -110,70 +108,25 @@ public void onRefresh() {\n     @Override\n     public void onViewCreated(View view, Bundle savedInstanceState) {\n         super.onViewCreated(view, savedInstanceState);\n-        loadData(true);\n-    }\n-\n-    @Override\n-    public Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> onCreateLoader(int i, Bundle bundle) {\n-        return new CoursesAsyncLoader(getActivity());\n+        loadData(true, true);\n     }\n \n-    @Override\n-    public void onLoadFinished(Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> asyncTaskResultLoader, AsyncTaskResult<List<EnrolledCoursesResponse>> result) {\n-        adapter.clear();\n-        final Exception exception = result.getEx();\n-        if (exception != null) {\n-            if (exception instanceof AuthException) {\n-                loginPrefs.clear();\n-                getActivity().finish();\n-            } else if (exception instanceof HttpStatusException) {\n-                final HttpStatusException httpStatusException = (HttpStatusException) exception;\n-                switch (httpStatusException.getStatusCode()) {\n-                    case HttpStatus.UNAUTHORIZED: {\n-                        environment.getRouter().forceLogout(getContext(),\n-                                environment.getAnalyticsRegistry(),\n-                                environment.getNotificationDelegate());\n-                        break;\n-                    }\n-                }\n-            } else {\n-                logger.error(exception);\n-            }\n-\n-            errorNotification.showError(getActivity(), exception, R.string.lbl_reload,\n-                    new View.OnClickListener() {\n-                        @Override\n-                        public void onClick(View v) {\n-                            if (NetworkUtil.isConnected(getContext())) {\n-                                onRefresh();\n-                            }\n-                        }\n-                    });\n-        } else if (result.getResult() != null) {\n-            ArrayList<EnrolledCoursesResponse> newItems = new ArrayList<EnrolledCoursesResponse>(result.getResult());\n-\n-            updateDatabaseAfterDownload(newItems);\n-\n-            if (result.getResult().size() > 0) {\n-                adapter.setItems(newItems);\n-            }\n-            addFindCoursesFooter();\n-            adapter.notifyDataSetChanged();\n+    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU2MDY3OnYy", "diffSide": "LEFT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0ODo1NFrOGzV-WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo0ODo1NFrOGzV-WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MDU4NQ==", "bodyText": "As these line of code is executed in any case pass/fail service response. Should cover in retrofit call fail/success too.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456490585", "createdAt": "2020-07-17T14:48:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -110,70 +108,25 @@ public void onRefresh() {\n     @Override\n     public void onViewCreated(View view, Bundle savedInstanceState) {\n         super.onViewCreated(view, savedInstanceState);\n-        loadData(true);\n-    }\n-\n-    @Override\n-    public Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> onCreateLoader(int i, Bundle bundle) {\n-        return new CoursesAsyncLoader(getActivity());\n+        loadData(true, true);\n     }\n \n-    @Override\n-    public void onLoadFinished(Loader<AsyncTaskResult<List<EnrolledCoursesResponse>>> asyncTaskResultLoader, AsyncTaskResult<List<EnrolledCoursesResponse>> result) {\n-        adapter.clear();\n-        final Exception exception = result.getEx();\n-        if (exception != null) {\n-            if (exception instanceof AuthException) {\n-                loginPrefs.clear();\n-                getActivity().finish();\n-            } else if (exception instanceof HttpStatusException) {\n-                final HttpStatusException httpStatusException = (HttpStatusException) exception;\n-                switch (httpStatusException.getStatusCode()) {\n-                    case HttpStatus.UNAUTHORIZED: {\n-                        environment.getRouter().forceLogout(getContext(),\n-                                environment.getAnalyticsRegistry(),\n-                                environment.getNotificationDelegate());\n-                        break;\n-                    }\n-                }\n-            } else {\n-                logger.error(exception);\n-            }\n-\n-            errorNotification.showError(getActivity(), exception, R.string.lbl_reload,\n-                    new View.OnClickListener() {\n-                        @Override\n-                        public void onClick(View v) {\n-                            if (NetworkUtil.isConnected(getContext())) {\n-                                onRefresh();\n-                            }\n-                        }\n-                    });\n-        } else if (result.getResult() != null) {\n-            ArrayList<EnrolledCoursesResponse> newItems = new ArrayList<EnrolledCoursesResponse>(result.getResult());\n-\n-            updateDatabaseAfterDownload(newItems);\n-\n-            if (result.getResult().size() > 0) {\n-                adapter.setItems(newItems);\n-            }\n-            addFindCoursesFooter();\n-            adapter.notifyDataSetChanged();\n+    private void setCourseData(ArrayList<EnrolledCoursesResponse> data) {\n+        updateDatabaseAfterDownload(data);\n \n-            if (adapter.isEmpty() && !ConfigUtil.Companion.isCourseDiscoveryEnabled(environment)) {\n-                errorNotification.showError(R.string.no_courses_to_display,\n-                        FontAwesomeIcons.fa_exclamation_circle, 0, null);\n-                binding.myCourseList.setVisibility(View.GONE);\n-            } else {\n-                binding.myCourseList.setVisibility(View.VISIBLE);\n-                errorNotification.hideError();\n-            }\n+        if (data.size() > 0) {\n+            adapter.setItems(data);\n         }\n-        binding.swipeContainer.setRefreshing(false);\n-        binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+        addFindCoursesFooter();\n+        adapter.notifyDataSetChanged();\n \n-        if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n-            EventBus.getDefault().registerSticky(MyCoursesListFragment.this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU2NjY3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1MDoxMlrOGzWB6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1MDoxMlrOGzWB6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5MTQ5Nw==", "bodyText": "should create a common method to show the error message, as these lines of code also using in case of success.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456491497", "createdAt": "2020-07-17T14:50:12Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }\n+            }\n+\n+            @Override\n+            public void onFailure(Call<List<EnrolledCoursesResponse>> call, Throwable t) {\n+                errorNotification.showError(getContext(), t.getCause(), R.string.lbl_reload,\n+                        new View.OnClickListener() {\n+                            @Override\n+                            public void onClick(View v) {\n+                                if (NetworkUtil.isConnected(getContext())) {\n+                                    onRefresh();\n+                                }\n+                            }\n+                        });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NzU5NDAzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1Njo1NFrOGzWS0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNDo1Njo1NFrOGzWS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjQ5NTgyNg==", "bodyText": "should place these line of code in onFailure case too.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r456495826", "createdAt": "2020-07-17T14:56:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.java", "diffHunk": "@@ -238,12 +183,74 @@ public void onEventMainThread(EnrolledInCourseEvent event) {\n         refreshOnResume = true;\n     }\n \n-    protected void loadData(boolean showProgress) {\n+    protected void loadData(boolean showProgress, boolean isCached) {\n+        if (isCached) {\n+            List<EnrolledCoursesResponse> enrolledCoursesResponse = null;\n+            try {\n+                enrolledCoursesResponse = executeStrict(api.getEnrolledCoursesFromCache());\n+                environment.getNotificationDelegate().syncWithServerForFailure();\n+                environment.getNotificationDelegate().checkCourseEnrollment(enrolledCoursesResponse);\n+                setCourseData(new ArrayList<>(enrolledCoursesResponse));\n+                if (enrolledCoursesResponse.size() > 0) {\n+                    showProgress = false;\n+                }\n+            } catch (Exception exception) {\n+                logger.error(exception);\n+            }\n+        }\n         if (showProgress) {\n             binding.loadingIndicator.getRoot().setVisibility(View.VISIBLE);\n             errorNotification.hideError();\n         }\n-        getLoaderManager().restartLoader(MY_COURSE_LOADER_ID, null, this);\n+        getUserEnrolledCourses();\n+    }\n+\n+    private void getUserEnrolledCourses() {\n+        Call<List<EnrolledCoursesResponse>> apiCall = api.getEnrolledCourses();\n+        apiCall.enqueue(new Callback<List<EnrolledCoursesResponse>>() {\n+            @Override\n+            public void onResponse(Call<List<EnrolledCoursesResponse>> call, Response<List<EnrolledCoursesResponse>> response) {\n+                if (response.isSuccessful()) {\n+                    setCourseData(new ArrayList<>(response.body()));\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment.getRouter().forceLogout(getContext(),\n+                            environment.getAnalyticsRegistry(),\n+                            environment.getNotificationDelegate());\n+                } else {\n+                    errorNotification.showError(getContext(), new HttpStatusException(\n+                            Response.error(HttpStatus.INTERNAL_SERVER_ERROR,\n+                                    ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))),\n+                            R.string.lbl_reload,\n+                            new View.OnClickListener() {\n+                                @Override\n+                                public void onClick(View v) {\n+                                    if (NetworkUtil.isConnected(getContext())) {\n+                                        onRefresh();\n+                                    }\n+                                }\n+                            });\n+                }\n+                binding.swipeContainer.setRefreshing(false);\n+                binding.loadingIndicator.getRoot().setVisibility(View.GONE);\n+\n+                if (!EventBus.getDefault().isRegistered(MyCoursesListFragment.this)) {\n+                    EventBus.getDefault().registerSticky(MyCoursesListFragment.this);\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8faa0a574503f5865fdaea8a0e6e71a4ffc09b59"}, "originalPosition": 242}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI1NDQ3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0MjowMFrOG00Gfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTozMjoxN1rOG1akOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMjc2Nw==", "bodyText": "Need auto-format.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458032767", "createdAt": "2020-07-21T11:42:00Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2Mjk3MA==", "bodyText": "pending", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458662970", "createdAt": "2020-07-22T09:32:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzMjc2Nw=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI2NDAxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NDo1NFrOG00MaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NDo1NFrOG00MaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNDI4MQ==", "bodyText": "Need to remove single lambda parameter declaration.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458034281", "createdAt": "2020-07-21T11:44:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }\n+            }\n+        })\n+\n+    }\n+\n+    private fun addFindCoursesFooter() { // Validate footer is not already added.\n+        if (binding.myCourseList.footerViewsCount > 0) {\n+            return\n+        }\n+        if (isCourseDiscoveryEnabled(environment!!)) { // Add 'Find a Course' list item as a footer.\n+            val footer: PanelFindCourseBinding = DataBindingUtil.inflate(LayoutInflater.from(activity),\n+                    R.layout.panel_find_course, binding.myCourseList, false)\n+            binding.myCourseList.addFooterView(footer.root, null, false)\n+            footer.courseBtn.setOnClickListener { v: View? ->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 217}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI3MzAyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NzozNFrOG00Rqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NzozNFrOG00Rqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNTYyNg==", "bodyText": "should avoid using !!.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458035626", "createdAt": "2020-07-21T11:47:34Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI3MzMzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NzozOVrOG00R2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0NzozOVrOG00R2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNTY3Mw==", "bodyText": "should avoid using !!.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458035673", "createdAt": "2020-07-21T11:47:39Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODI3ODQ0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0OTowOFrOG00U_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMTo0OTowOFrOG00U_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAzNjQ3OA==", "bodyText": "should be nullable while removing !!.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458036478", "createdAt": "2020-07-21T11:49:08Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODkwMDU0OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoyMDoyMlrOG06Tfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoyMDoyMlrOG06Tfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEzNDM5OA==", "bodyText": "Should not call when populateCourseData from the cache.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458134398", "createdAt": "2020-07-21T14:20:22Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTY0NjEyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowNjo1MVrOG1BoTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowNjo1MVrOG1BoTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NDQxMg==", "bodyText": "The app should not handle the error codes in case of fetching data from the cache.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458254412", "createdAt": "2020-07-21T17:06:51Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTY0ODIyOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzowNzoxOFrOG1BpgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1MjoyNlrOG1VELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NDcyMQ==", "bodyText": "The app should not handle the error codes in case of fetching data from the cache.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458254721", "createdAt": "2020-07-21T17:07:18Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1NjM0MA==", "bodyText": "Are we sure while fetching data from cache we won't get any exception?", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458356340", "createdAt": "2020-07-21T20:06:11Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NDcyMQ=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3Mjg0NA==", "bodyText": "When we get an exception while fetching data from the cache, the app should make the service call if get any error then app handle those exceptions.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458572844", "createdAt": "2020-07-22T06:52:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1NDcyMQ=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTY3NzIzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzoxNDo1NFrOG1B7fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNjo1NDo1MVrOG1VIag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1OTMyNg==", "bodyText": "IMO, App should make the server call on completion of the cache call.\n@miankhalid thoughts?", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458259326", "createdAt": "2020-07-21T17:14:54Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODM1Njk2NA==", "bodyText": "In the start, I suggested this as well", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458356964", "createdAt": "2020-07-21T20:07:29Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1OTMyNg=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3MzkzMA==", "bodyText": "@miankhalid thoughts?", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458573930", "createdAt": "2020-07-22T06:54:51Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1OTMyNg=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc1ODgzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzozNjo0MlrOG1Cu9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOTozNDowMFrOG1an9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MjUwMQ==", "bodyText": "I think there is no need this TODO from now,  Should confirm before removing this TODO", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458272501", "createdAt": "2020-07-21T17:36:42Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3NDE0MQ==", "bodyText": "FYI @miankhalid", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458574141", "createdAt": "2020-07-22T06:55:20Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MjUwMQ=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU4MTMwMw==", "bodyText": "If the TODO item is completed then yes, it makes sense to remove the TODO now.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458581303", "createdAt": "2020-07-22T07:11:07Z", "author": {"login": "miankhalid"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MjUwMQ=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MzkyNw==", "bodyText": "pending", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458663927", "createdAt": "2020-07-22T09:34:00Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3MjUwMQ=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTc5MzQ2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NTozN1rOG1DE_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNzo0NTozN1rOG1DE_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI3ODE0MQ==", "bodyText": "IMO it's better to add lateinit with Inject labeled members.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458278141", "createdAt": "2020-07-21T17:45:37Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTg2NjM2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODowNToyNFrOG1Dz_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwOToyNzoyNlrOG1aY1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5MDE3Mg==", "bodyText": "I think we have to add L54-L55 may be open edx community uses those lines of code?\n@miankhalid thoughts?", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458290172", "createdAt": "2020-07-21T18:05:24Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2MDA1NQ==", "bodyText": "not need to add.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458660055", "createdAt": "2020-07-22T09:27:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5MDE3Mg=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTkxMjExOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoxODoxOFrOG1ERig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQxMDozMjowMFrOG1clKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NzczOA==", "bodyText": "there should be a Ref for this inspiration.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458297738", "createdAt": "2020-07-21T18:18:18Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY2Mzk3Ng==", "bodyText": "pending", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458663976", "createdAt": "2020-07-22T09:34:06Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NzczOA=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODY5NTk3Ng==", "bodyText": "inspiration from BaseWebViewFragment.java L:173", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458695976", "createdAt": "2020-07-22T10:32:00Z", "author": {"login": "omerhabib26"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5NzczOA=="}, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTkyMTY2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMDo1MFrOG1EXtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMDo1MFrOG1EXtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTMxOA==", "bodyText": "comment should be in the next line.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458299318", "createdAt": "2020-07-21T18:20:50Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }\n+            }\n+        })\n+\n+    }\n+\n+    private fun addFindCoursesFooter() { // Validate footer is not already added.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 209}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTkyMjU2OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMTowNVrOG1EYSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMTowNVrOG1EYSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI5OTQ2Ng==", "bodyText": "comment should be in the next line.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458299466", "createdAt": "2020-07-21T18:21:05Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }\n+            }\n+        })\n+\n+    }\n+\n+    private fun addFindCoursesFooter() { // Validate footer is not already added.\n+        if (binding.myCourseList.footerViewsCount > 0) {\n+            return\n+        }\n+        if (isCourseDiscoveryEnabled(environment!!)) { // Add 'Find a Course' list item as a footer.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTkyNjcxOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMjoxN1rOG1Ea1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMjoxN1rOG1Ea1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMDExNg==", "bodyText": "comment should be in the next line.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458300116", "createdAt": "2020-07-21T18:22:17Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTkyNjkzOnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMjoyMlrOG1Ea-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMjoyMlrOG1Ea-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMDE1NA==", "bodyText": "comment should be in the next line.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458300154", "createdAt": "2020-07-21T18:22:22Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTkyNzI3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMjoyNlrOG1EbLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyMjoyNlrOG1EbLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMDIwNA==", "bodyText": "comment should be in the next line.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458300204", "createdAt": "2020-07-21T18:22:26Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1OTk0MTE3OnYy", "diffSide": "RIGHT", "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyNjoyOFrOG1EkJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxODoyNjoyOFrOG1EkJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODMwMjUwMw==", "bodyText": "comment should be in the next line.", "url": "https://github.com/edx/edx-app-android/pull/1438#discussion_r458302503", "createdAt": "2020-07-21T18:26:28Z", "author": {"login": "farhan-arshad-dev"}, "path": "OpenEdXMobile/src/main/java/org/edx/mobile/view/MyCoursesListFragment.kt", "diffHunk": "@@ -0,0 +1,256 @@\n+package org.edx.mobile.view\n+\n+import android.os.Bundle\n+import android.view.LayoutInflater\n+import android.view.View\n+import android.view.ViewGroup\n+import androidx.databinding.DataBindingUtil\n+import com.joanzapata.iconify.fonts.FontAwesomeIcons\n+import de.greenrobot.event.EventBus\n+import okhttp3.MediaType\n+import okhttp3.ResponseBody\n+import org.edx.mobile.R\n+import org.edx.mobile.core.IEdxEnvironment\n+import org.edx.mobile.course.CourseAPI\n+import org.edx.mobile.databinding.FragmentMyCoursesListBinding\n+import org.edx.mobile.databinding.PanelFindCourseBinding\n+import org.edx.mobile.deeplink.Screen\n+import org.edx.mobile.event.EnrolledInCourseEvent\n+import org.edx.mobile.event.MainDashboardRefreshEvent\n+import org.edx.mobile.event.MoveToDiscoveryTabEvent\n+import org.edx.mobile.event.NetworkConnectivityChangeEvent\n+import org.edx.mobile.exception.AuthException\n+import org.edx.mobile.http.HttpStatus\n+import org.edx.mobile.http.HttpStatusException\n+import org.edx.mobile.http.notifications.FullScreenErrorNotification\n+import org.edx.mobile.interfaces.RefreshListener\n+import org.edx.mobile.logger.Logger\n+import org.edx.mobile.model.api.EnrolledCoursesResponse\n+import org.edx.mobile.module.db.DataCallback\n+import org.edx.mobile.module.prefs.LoginPrefs\n+import org.edx.mobile.util.ConfigUtil.Companion.isCourseDiscoveryEnabled\n+import org.edx.mobile.util.NetworkUtil\n+import org.edx.mobile.util.UiUtil\n+import org.edx.mobile.view.adapters.MyCoursesAdapter\n+import retrofit2.Call\n+import retrofit2.Callback\n+import retrofit2.Response\n+import java.util.*\n+import javax.inject.Inject\n+\n+class MyCoursesListFragment : OfflineSupportBaseFragment(), RefreshListener {\n+    private lateinit var adapter: MyCoursesAdapter\n+    private lateinit var binding: FragmentMyCoursesListBinding\n+    private val logger = Logger(javaClass.simpleName)\n+    private var refreshOnResume = false\n+    @Inject\n+    private var environment: IEdxEnvironment? = null\n+    @Inject\n+    var api: CourseAPI? = null\n+    private lateinit var errorNotification: FullScreenErrorNotification\n+    //TODO: All these callbacks aren't essentially part of MyCoursesListFragment and should move in\n+    // the Tabs container fragment that's going to be implemented in LEARNER-3251\n+    override fun onCreate(savedInstanceState: Bundle?) {\n+        super.onCreate(savedInstanceState)\n+        adapter = object : MyCoursesAdapter(activity, environment) {\n+            override fun onItemClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, false)\n+            }\n+\n+            override fun onAnnouncementClicked(model: EnrolledCoursesResponse) {\n+                environment.router.showCourseDashboardTabs(activity!!, model, true)\n+            }\n+        }\n+    }\n+\n+    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?,\n+                              savedInstanceState: Bundle?): View? {\n+        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_my_courses_list, container, false)\n+        errorNotification = FullScreenErrorNotification(binding.myCourseList)\n+        binding.swipeContainer.setOnRefreshListener {\n+            // Hide the progress bar as swipe layout has its own progress indicator\n+            binding.loadingIndicator.root.visibility = View.GONE\n+            errorNotification.hideError()\n+            loadData(showProgress = false, isCached = false)\n+        }\n+        UiUtil.setSwipeRefreshLayoutColors(binding.swipeContainer)\n+        // Add empty view to cause divider to render at the top of the list.\n+        binding.myCourseList.addHeaderView(View(context), null, false)\n+        binding.myCourseList.adapter = adapter\n+        binding.myCourseList.onItemClickListener = adapter\n+        return binding.root\n+    }\n+\n+    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n+        super.onViewCreated(view, savedInstanceState)\n+        loadData(showProgress = true, isCached = true)\n+    }\n+\n+    private fun populateCourseData(data: ArrayList<EnrolledCoursesResponse>) {\n+        updateDatabaseAfterDownload(data)\n+        if (data.size > 0) {\n+            adapter.setItems(data)\n+        }\n+        addFindCoursesFooter()\n+        adapter.notifyDataSetChanged()\n+        if (adapter.isEmpty && !isCourseDiscoveryEnabled(environment!!)) {\n+            errorNotification.showError(R.string.no_courses_to_display,\n+                    FontAwesomeIcons.fa_exclamation_circle, 0, null)\n+            binding.myCourseList.visibility = View.GONE\n+        } else {\n+            binding.myCourseList.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+    }\n+\n+    private fun updateDatabaseAfterDownload(list: ArrayList<EnrolledCoursesResponse>?) {\n+        if (list != null && list.size > 0) { //update all videos in the DB as Deactivated\n+            environment?.database?.updateAllVideosAsDeactivated(dataCallback)\n+            for (i in list.indices) { //Check if the flag of isIs_active is marked to true,\n+                //then activate all videos\n+                if (list[i].isIs_active) { //update all videos for a course fetched in the API as Activated\n+                    environment?.database?.updateVideosActivatedForCourse(list[i].course.id,\n+                            dataCallback)\n+                } else {\n+                    list.removeAt(i)\n+                }\n+            }\n+            //Delete all videos which are marked as Deactivated in the database\n+            environment?.storage?.deleteAllUnenrolledVideos()\n+        }\n+    }\n+\n+    private val dataCallback: DataCallback<Int> = object : DataCallback<Int>() {\n+        override fun onResult(result: Int) {}\n+        override fun onFail(ex: Exception) {\n+            logger.error(ex)\n+        }\n+    }\n+\n+    override fun onResume() {\n+        super.onResume()\n+        if (refreshOnResume) {\n+            loadData(showProgress = false, isCached = true)\n+            refreshOnResume = false\n+        }\n+    }\n+\n+    override fun onDestroy() {\n+        super.onDestroy()\n+        EventBus.getDefault().unregister(this)\n+    }\n+\n+    fun onEventMainThread(event: EnrolledInCourseEvent?) {\n+        refreshOnResume = true\n+    }\n+\n+    private fun loadData(showProgress: Boolean, isCached: Boolean) {\n+        if (showProgress) {\n+            binding.loadingIndicator.root.visibility = View.VISIBLE\n+            errorNotification.hideError()\n+        }\n+        if (isCached) {\n+            getUserEnrolledCourses(api?.enrolledCoursesFromCache!!)\n+        }\n+        getUserEnrolledCourses(api?.enrolledCourses!!)\n+    }\n+\n+    private fun invalidateView() {\n+        binding.swipeContainer.isRefreshing = false\n+        binding.loadingIndicator.root.visibility = View.GONE\n+\n+        if (!EventBus.getDefault().isRegistered(this@MyCoursesListFragment)) {\n+            EventBus.getDefault().registerSticky(this@MyCoursesListFragment)\n+        }\n+    }\n+\n+    private fun showError(error: Throwable) {\n+        context?.let { context ->\n+            error.cause?.let { cause ->\n+                errorNotification.showError(context, cause, R.string.lbl_reload) {\n+                    if (NetworkUtil.isConnected(context)) {\n+                        onRefresh()\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    private fun getUserEnrolledCourses(enrolledCoursesApi: Call<List<EnrolledCoursesResponse>>) {\n+        enrolledCoursesApi.enqueue(object : Callback<List<EnrolledCoursesResponse>> {\n+            override fun onResponse(call: Call<List<EnrolledCoursesResponse>>, response: Response<List<EnrolledCoursesResponse>>) {\n+                if (response.isSuccessful && response.code() == HttpStatus.OK) {\n+                    populateCourseData(ArrayList(response.body()))\n+                } else if (response.code() == HttpStatus.UNAUTHORIZED) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(HttpStatusException(Response.error<Any>(HttpStatus.INTERNAL_SERVER_ERROR,\n+                            ResponseBody.create(MediaType.parse(\"text/plain\"), response.message()))))\n+                }\n+                invalidateView()\n+            }\n+\n+            override fun onFailure(call: Call<List<EnrolledCoursesResponse>>, t: Throwable) {\n+                if (t is AuthException || (t is HttpStatusException && t.statusCode == HttpStatus.UNAUTHORIZED)) {\n+                    environment?.router?.forceLogout(context,\n+                            environment?.analyticsRegistry,\n+                            environment?.notificationDelegate)\n+                } else {\n+                    showError(t)\n+                    invalidateView()\n+                }\n+            }\n+        })\n+\n+    }\n+\n+    private fun addFindCoursesFooter() { // Validate footer is not already added.\n+        if (binding.myCourseList.footerViewsCount > 0) {\n+            return\n+        }\n+        if (isCourseDiscoveryEnabled(environment!!)) { // Add 'Find a Course' list item as a footer.\n+            val footer: PanelFindCourseBinding = DataBindingUtil.inflate(LayoutInflater.from(activity),\n+                    R.layout.panel_find_course, binding.myCourseList, false)\n+            binding.myCourseList.addFooterView(footer.root, null, false)\n+            footer.courseBtn.setOnClickListener { v: View? ->\n+                environment?.analyticsRegistry?.trackUserFindsCourses()\n+                EventBus.getDefault().post(MoveToDiscoveryTabEvent(Screen.COURSE_DISCOVERY))\n+            }\n+        }\n+        // Add empty view to cause divider to render at the bottom of the list.\n+        binding.myCourseList.addFooterView(View(context), null, false)\n+    }\n+\n+    override fun onRefresh() {\n+        EventBus.getDefault().post(MainDashboardRefreshEvent())\n+    }\n+\n+    fun onEvent(event: MainDashboardRefreshEvent?) {\n+        loadData(showProgress = true, isCached = false)\n+    }\n+\n+    override fun onRevisit() {\n+        super.onRevisit()\n+        if (NetworkUtil.isConnected(activity)) {\n+            binding.swipeContainer.isEnabled = true\n+        }\n+    }\n+\n+    fun onEvent(event: NetworkConnectivityChangeEvent?) {\n+        if (activity != null) {\n+            if (NetworkUtil.isConnected(context)) {\n+                binding.swipeContainer.isEnabled = true\n+            } else { //Disable swipe functionality and hide the loading view", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb391aa762efb5db818e222477781fe218d8960e"}, "originalPosition": 245}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 567, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}