{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyNjYxNjky", "number": 1286, "reviewThreads": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNDo0NFrOFA5JWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMjozNFrOFCB-RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgwNjAwOnYy", "diffSide": "LEFT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/TestAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNDo0NFrOH_Z1fA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNDo0NFrOH_Z1fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0NTYyOA==", "bodyText": "Moved to ChannelDistributionTestEventCreationUtils", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536245628", "createdAt": "2020-12-04T17:04:44Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/TestAction.java", "diffHunk": "@@ -39,25 +34,4 @@\n \n     public abstract MessageResult testConfig(String configId, FieldModel fieldModel, FieldUtility registeredFieldValues) throws IntegrationException;\n \n-    public ProviderMessageContent createTestNotificationContent(FieldUtility fieldUtility, ItemOperation operation, String messageId) throws AlertException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDgwNzY3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ConfigurationAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNToyMlrOH_Z2og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzowNToyMlrOH_Z2og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI0NTkyMg==", "bodyText": "A Jira issue was created against 6.5.0 for this.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536245922", "createdAt": "2020-12-04T17:05:22Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ConfigurationAction.java", "diffHunk": "@@ -24,14 +24,20 @@\n \n import java.util.EnumMap;\n import java.util.Map;\n+import java.util.Optional;\n \n+import com.synopsys.integration.alert.common.channel.ChannelDistributionTestAction;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.descriptor.api.model.DescriptorKey;\n \n public abstract class ConfigurationAction {\n     private final DescriptorKey descriptorKey;\n-    private final Map<ConfigContextEnum, ApiAction> apiActionMap = new EnumMap(ConfigContextEnum.class);\n-    private final Map<ConfigContextEnum, TestAction> testActionMap = new EnumMap(ConfigContextEnum.class);\n+    private final Map<ConfigContextEnum, ApiAction> apiActionMap = new EnumMap<>(ConfigContextEnum.class);\n+    private final Map<ConfigContextEnum, TestAction> testActionMap = new EnumMap<>(ConfigContextEnum.class);\n+\n+    // FIXME there needs to be a better distinction between a global TestAction and a distribution TestAction\n+    //  for 6.4.0, this will have to suffice to avoid additional scope-creep of re-architecting TestActions\n+    private ChannelDistributionTestAction channelDistributionTestAction;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NDg0MTcxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/event/DistributionEvent.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxNzoxNjowOVrOH_aL0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoxNjozOVrOIBelvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MTM0NA==", "bodyText": "I would love to know if this is required, or if we can remove it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536251344", "createdAt": "2020-12-04T17:16:09Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/event/DistributionEvent.java", "diffHunk": "@@ -24,30 +24,43 @@\n \n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import org.jetbrains.annotations.Nullable;\n+\n import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n-import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n \n public class DistributionEvent extends ContentEvent {\n-    private static final long serialVersionUID = -2067819359358348281L;\n-    private final FieldUtility fieldUtility;\n-    private final String configId;\n+    private static final long serialVersionUID = -7858733753649257748L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM4NDA0Mw==", "bodyText": "A DistributionEvent implements serializable because of AlertEvent which is serializable.  Each sub-class must define the Serial Version ID otherwise you get compiler warnings and SonarCloud issues.\nWe perform our own serialization of the events into a JSON string in the EventManager and MessageReciever classes.  So AlertEvent should still work extending only Stringable since we manually serialize the even objects in Alert.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538384043", "createdAt": "2020-12-08T13:43:49Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/event/DistributionEvent.java", "diffHunk": "@@ -24,30 +24,43 @@\n \n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import org.jetbrains.annotations.Nullable;\n+\n import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n-import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n \n public class DistributionEvent extends ContentEvent {\n-    private static final long serialVersionUID = -2067819359358348281L;\n-    private final FieldUtility fieldUtility;\n-    private final String configId;\n+    private static final long serialVersionUID = -7858733753649257748L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MTM0NA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyMDY2OA==", "bodyText": "Are they compiler warnings or IDE warnings? I could have sworn we determined that we should no longer be generating serialVersionUID on Serializable classes.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538420668", "createdAt": "2020-12-08T14:16:39Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/event/DistributionEvent.java", "diffHunk": "@@ -24,30 +24,43 @@\n \n import java.util.Map;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n+import org.jetbrains.annotations.Nullable;\n+\n import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n-import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n \n public class DistributionEvent extends ContentEvent {\n-    private static final long serialVersionUID = -2067819359358348281L;\n-    private final FieldUtility fieldUtility;\n-    private final String configId;\n+    private static final long serialVersionUID = -7858733753649257748L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjI1MTM0NA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTE2NTcwOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODozNzo1MVrOH_dKbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1Mzo0NFrOH_dtbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMDE0Mg==", "bodyText": "Do we prefer a constructor for this over a static method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536300142", "createdAt": "2020-12-04T18:37:51Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java", "diffHunk": "@@ -51,20 +52,29 @@\n \n public class JiraTestIssueRequestCreator implements TestIssueRequestCreator {\n     private final Logger logger = LoggerFactory.getLogger(JiraTestIssueRequestCreator.class);\n-    private final FieldUtility fieldUtility;\n+\n+    private final String customTopic;\n+    private final String customMessage;\n     private final JiraMessageParser jiraMessageParser;\n \n     public JiraTestIssueRequestCreator(FieldUtility fieldUtility, JiraMessageParser jiraMessageParser) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTEwMw==", "bodyText": "No. This is definitely an area that needs improvement, but changing this existing constructor would have only added to the already-excessive scope-creep.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536309103", "createdAt": "2020-12-04T18:53:44Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraTestIssueRequestCreator.java", "diffHunk": "@@ -51,20 +52,29 @@\n \n public class JiraTestIssueRequestCreator implements TestIssueRequestCreator {\n     private final Logger logger = LoggerFactory.getLogger(JiraTestIssueRequestCreator.class);\n-    private final FieldUtility fieldUtility;\n+\n+    private final String customTopic;\n+    private final String customMessage;\n     private final JiraMessageParser jiraMessageParser;\n \n     public JiraTestIssueRequestCreator(FieldUtility fieldUtility, JiraMessageParser jiraMessageParser) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMDE0Mg=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTE3NTMyOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo0MDozOFrOH_dQQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo1MjowOFrOH_dptg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMTYzNQ==", "bodyText": "Is including the properties from FieldUtlity for temporary compatibility, or are there fields the context needs that aren't in the JiraCloudJobDetailsModel?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536301635", "createdAt": "2020-12-04T18:40:38Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "diffHunk": "@@ -78,4 +83,23 @@ public JiraCloudContext build(FieldUtility fieldUtility) {\n         return new JiraCloudContext(jiraCloudPropertiesFactory.createJiraProperties(fieldUtility), createIssueConfig(fieldUtility));\n     }\n \n+    @Override\n+    public JiraCloudContext build(ConfigurationModel globalConfig, DistributionJobModel jobModel) {\n+        FieldUtility globalFieldUtility = new FieldUtility(globalConfig.getCopyOfKeyToFieldMap());\n+        JiraCloudProperties jiraProperties = jiraCloudPropertiesFactory.createJiraProperties(globalFieldUtility);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwODE1MA==", "bodyText": "The former. The Jira channels share several common interfaces and I was trying to simplify for compatibility.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536308150", "createdAt": "2020-12-04T18:52:08Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "diffHunk": "@@ -78,4 +83,23 @@ public JiraCloudContext build(FieldUtility fieldUtility) {\n         return new JiraCloudContext(jiraCloudPropertiesFactory.createJiraProperties(fieldUtility), createIssueConfig(fieldUtility));\n     }\n \n+    @Override\n+    public JiraCloudContext build(ConfigurationModel globalConfig, DistributionJobModel jobModel) {\n+        FieldUtility globalFieldUtility = new FieldUtility(globalConfig.getCopyOfKeyToFieldMap());\n+        JiraCloudProperties jiraProperties = jiraCloudPropertiesFactory.createJiraProperties(globalFieldUtility);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwMTYzNQ=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTE5ODc1OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxODo0NjozNFrOH_ddhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDowMjoxMlrOIBdqLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTAyOA==", "bodyText": "Why do we have the 2 exceptions here, rather than just the AlertRuntimeException?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536305028", "createdAt": "2020-12-04T18:46:34Z", "author": {"login": "jamesrichard91"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraServerChannel(Gson gson, JiraServerChannelKey descriptorKey, AuditAcc\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraServerContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Server global configuration\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwOTgwOA==", "bodyText": "I didn't want to modify the method signature, but a missing global configuration is an AlertConfigurationException. It will be wrapped, but will make it more clear what the problem is.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536309808", "createdAt": "2020-12-04T18:54:52Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraServerChannel(Gson gson, JiraServerChannelKey descriptorKey, AuditAcc\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraServerContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Server global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTAyOA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MDUyNg==", "bodyText": "Perhaps we can introduce a new exception in a separate PR?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537870526", "createdAt": "2020-12-07T22:09:40Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraServerChannel(Gson gson, JiraServerChannelKey descriptorKey, AuditAcc\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraServerContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Server global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTAyOA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3MTYyMg==", "bodyText": "Since we do this in a few places, we should try to figure out why this exception can be thrown in a place that does not allow checked exceptions before we assume that a new exception is needed.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538371622", "createdAt": "2020-12-08T13:31:47Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraServerChannel(Gson gson, JiraServerChannelKey descriptorKey, AuditAcc\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraServerContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Server global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTAyOA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3NDY2NQ==", "bodyText": "Jira issue created.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538374665", "createdAt": "2020-12-08T13:34:38Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraServerChannel(Gson gson, JiraServerChannelKey descriptorKey, AuditAcc\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraServerContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Server global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTAyOA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwNTQyMg==", "bodyText": "We change the method signature in the future to throw an AlertConfigurationException since that appears to be the correct action.  That should be done in a smaller PR.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538405422", "createdAt": "2020-12-08T14:02:12Z", "author": {"login": "psantos1113"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraServerChannel(Gson gson, JiraServerChannelKey descriptorKey, AuditAcc\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraServerContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Server global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMwNTAyOA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2NTI1NjAwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/component/audit/web/AuditEntryActionsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNFQxOTowMToxMVrOH_d-gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxMzozNToxN1rOIAm_6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMzQ3NA==", "bodyText": "It looks like you are missing the Mockito.when for the oldJobAccessor.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536313474", "createdAt": "2020-12-04T19:01:11Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/alert/component/audit/web/AuditEntryActionsTest.java", "diffHunk": "@@ -152,20 +157,26 @@ public void testPagedRequest() throws AlertDatabaseConstraintException {\n \n         NotificationContentRepository notificationRepository = Mockito.mock(NotificationContentRepository.class);\n         AuditNotificationRepository auditNotificationRepository = Mockito.mock(AuditNotificationRepository.class);\n-        JobAccessor jobAccessor = Mockito.mock(JobAccessor.class);\n+        JobAccessor oldJobAccessor = Mockito.mock(JobAccessor.class);\n+        JobAccessorV2 jobAccessor = Mockito.mock(JobAccessorV2.class);\n+        Mockito.when(jobAccessor.getJobById(Mockito.any())).thenReturn(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxNDk1NQ==", "bodyText": "I see you do this further down. So is line 162 still necessary?\nMockito.doReturn(Optional.of(configuration)).when(oldJobAccessor).getJobById(Mockito.any());\n        Mockito.doReturn(Optional.of(distributionJob)).when(jobAccessor).getJobById(Mockito.any());", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r536314955", "createdAt": "2020-12-04T19:03:57Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/alert/component/audit/web/AuditEntryActionsTest.java", "diffHunk": "@@ -152,20 +157,26 @@ public void testPagedRequest() throws AlertDatabaseConstraintException {\n \n         NotificationContentRepository notificationRepository = Mockito.mock(NotificationContentRepository.class);\n         AuditNotificationRepository auditNotificationRepository = Mockito.mock(AuditNotificationRepository.class);\n-        JobAccessor jobAccessor = Mockito.mock(JobAccessor.class);\n+        JobAccessor oldJobAccessor = Mockito.mock(JobAccessor.class);\n+        JobAccessorV2 jobAccessor = Mockito.mock(JobAccessorV2.class);\n+        Mockito.when(jobAccessor.getJobById(Mockito.any())).thenReturn(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMzQ3NA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUwOTg2NA==", "bodyText": "I updated AuditEntryActions because it used NotificationProcessor, but I did not need to update DefaultAuditAccessor for this PR.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537509864", "createdAt": "2020-12-07T13:35:17Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/component/audit/web/AuditEntryActionsTest.java", "diffHunk": "@@ -152,20 +157,26 @@ public void testPagedRequest() throws AlertDatabaseConstraintException {\n \n         NotificationContentRepository notificationRepository = Mockito.mock(NotificationContentRepository.class);\n         AuditNotificationRepository auditNotificationRepository = Mockito.mock(AuditNotificationRepository.class);\n-        JobAccessor jobAccessor = Mockito.mock(JobAccessor.class);\n+        JobAccessor oldJobAccessor = Mockito.mock(JobAccessor.class);\n+        JobAccessorV2 jobAccessor = Mockito.mock(JobAccessorV2.class);\n+        Mockito.when(jobAccessor.getJobById(Mockito.any())).thenReturn(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjMxMzQ3NA=="}, "originalCommit": {"oid": "7cfac286e5ab424db9ad5047e04af2879607566c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NTgxODE4OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailDistributionTestAction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOToxOTowNFrOIA2hmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxOTozNDo1MFrOIA3P3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2NDI1MA==", "bodyText": "This does not seem correct, why are we only using the additional email addresses? Part of the email distribution test is to verify the email recipients. So we should be using the configuration as specified in the test.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537764250", "createdAt": "2020-12-07T19:19:04Z", "author": {"login": "jamesrichard91"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailDistributionTestAction.java", "diffHunk": "@@ -62,10 +62,12 @@ public MessageResult testConfig(\n     private DistributionJobModel creatUpdatedJobModelWithEmailAddresses(DistributionJobModel originalJobModel, @Nullable String destination) throws IntegrationException {\n         Set<String> updateEmailAddresses = emailActionHelper.createUpdatedEmailAddresses(originalJobModel, destination);\n         EmailJobDetailsModel originalEmailJobDetails = originalJobModel.getDistributionJobDetails().getAsEmailJobDetails();\n+\n+        // For testing configuration, just use additional email addresses field", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af5c5ed808f73ab1b3ce2a11e5c96fa8ab3da5ba"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc3NjA5Mg==", "bodyText": "EmailTestActionHelper will get all of the correct recipients for a Job.\nWhen testing configuration, the event is not tied to a real notification, so when the event gets to the channel, the EmailAddressHandler will not be able to look up the \"Project Owner\" or \"project members\" correctly. Before my changes, we would shove an extra field into FieldUtility with the results of EmailTestActionHelper; now that there is no FieldUtility we append the results of EmailTestActionHelper as additional email addresses instead and only use those emails for testing.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537776092", "createdAt": "2020-12-07T19:34:50Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailDistributionTestAction.java", "diffHunk": "@@ -62,10 +62,12 @@ public MessageResult testConfig(\n     private DistributionJobModel creatUpdatedJobModelWithEmailAddresses(DistributionJobModel originalJobModel, @Nullable String destination) throws IntegrationException {\n         Set<String> updateEmailAddresses = emailActionHelper.createUpdatedEmailAddresses(originalJobModel, destination);\n         EmailJobDetailsModel originalEmailJobDetails = originalJobModel.getDistributionJobDetails().getAsEmailJobDetails();\n+\n+        // For testing configuration, just use additional email addresses field", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzc2NDI1MA=="}, "originalCommit": {"oid": "af5c5ed808f73ab1b3ce2a11e5c96fa8ab3da5ba"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI4NTA2OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailTestActionHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowNzoyM1rOIA6vIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowNzoyM1rOIA6vIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzMzI1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null != providerProjects && !providerProjects.isEmpty()) {\n          \n          \n            \n                        if (CollectionUtils.isNotEmpty(providerProjects)) {", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537833250", "createdAt": "2020-12-07T21:07:23Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailTestActionHelper.java", "diffHunk": "@@ -24,72 +24,68 @@\n \n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n import org.springframework.stereotype.Component;\n \n import com.synopsys.integration.alert.channel.email.EmailAddressHandler;\n-import com.synopsys.integration.alert.channel.email.descriptor.EmailDescriptor;\n-import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n-import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.job.BlackDuckProjectDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class EmailActionHelper {\n+public class EmailTestActionHelper {\n     private final EmailAddressHandler emailAddressHandler;\n     private final ProviderDataAccessor providerDataAccessor;\n \n-    public EmailActionHelper(EmailAddressHandler emailAddressHandler, ProviderDataAccessor providerDataAccessor) {\n+    public EmailTestActionHelper(EmailAddressHandler emailAddressHandler, ProviderDataAccessor providerDataAccessor) {\n         this.emailAddressHandler = emailAddressHandler;\n         this.providerDataAccessor = providerDataAccessor;\n     }\n \n-    public FieldUtility createUpdatedFieldAccessor(FieldUtility fieldUtility, String destination) throws IntegrationException {\n+    public Set<String> createUpdatedEmailAddresses(DistributionJobModel distributionJobModel, @Nullable String destination) throws IntegrationException {\n         Set<String> emailAddresses = new HashSet<>();\n         if (StringUtils.isNotBlank(destination)) {\n             emailAddresses.add(destination);\n         }\n \n-        boolean filterByProject = fieldUtility.getBooleanOrFalse(ProviderDistributionUIConfig.KEY_FILTER_BY_PROJECT);\n-        Long providerConfigId = fieldUtility.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).orElse(null);\n-        boolean onlyAdditionalEmails = fieldUtility.getBooleanOrFalse(EmailDescriptor.KEY_EMAIL_ADDITIONAL_ADDRESSES_ONLY);\n+        DistributionJobDetailsModel distributionJobDetails = distributionJobModel.getDistributionJobDetails();\n+        EmailJobDetailsModel emailJobDetails = distributionJobDetails.getAsEmailJobDetails();\n+\n+        Long providerConfigId = distributionJobModel.getBlackDuckGlobalConfigId();\n+        boolean onlyAdditionalEmails = emailJobDetails.isAdditionalEmailAddressesOnly();\n \n         if (null != providerConfigId && !onlyAdditionalEmails) {\n-            Set<ProviderProject> providerProjects = retrieveProviderProjects(fieldUtility, filterByProject, providerConfigId);\n-            if (null != providerProjects) {\n-                Set<String> providerEmailAddresses = addEmailAddresses(providerConfigId, providerProjects, fieldUtility);\n+            Set<ProviderProject> providerProjects = retrieveProviderProjects(distributionJobModel, providerConfigId);\n+            if (null != providerProjects && !providerProjects.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjI5MDYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/channel/ChannelDescriptorTestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTowODo1N1rOIA6yfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzozODo0N1rOIBcCcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNDExMA==", "bodyText": "Why would the optional be null?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537834110", "createdAt": "2020-12-07T21:08:57Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/alert/channel/ChannelDescriptorTestIT.java", "diffHunk": "@@ -53,43 +63,54 @@\n     protected DistributionEvent channelEvent;\n \n     protected ContentConverter contentConverter;\n-    protected TestProperties properties;\n+    protected TestProperties testProperties;\n \n+    @Autowired\n+    protected ProviderKey providerKey;\n+    @Autowired\n+    protected JobAccessorV2 jobAccessor;\n     @Autowired\n     protected DefaultConfigurationAccessor configurationAccessor;\n     @Autowired\n     protected DefaultDescriptorAccessor descriptorAccessor;\n     @Autowired\n+    protected DescriptorProcessor descriptorProcessor;\n+    @Autowired\n     protected RegisteredDescriptorRepository registeredDescriptorRepository;\n \n-    protected ConfigurationModel provider_global;\n-    protected Optional<ConfigurationModel> global_config;\n-    protected ConfigurationModel distribution_config;\n-    protected String destinationName;\n+    protected ConfigurationModel providerGlobalConfig;\n+    protected Optional<ConfigurationModel> optionalChannelGlobalConfig;\n+    protected DistributionJobModel distributionJobModel;\n+    protected String eventDestinationName;\n \n     @BeforeEach\n     public void init() throws Exception {\n         gson = new Gson();\n         contentConverter = new ContentConverter(gson, new DefaultConversionService());\n-        properties = new TestProperties();\n-        global_config = saveGlobalConfiguration();\n-        distribution_config = saveDistributionConfiguration();\n+        testProperties = new TestProperties();\n+        providerGlobalConfig = saveProviderGlobalConfig();\n+        optionalChannelGlobalConfig = saveGlobalConfiguration();\n+        eventDestinationName = getEventDestinationName();\n         channelEvent = createChannelEvent();\n-        destinationName = getDestinationName();\n+        distributionJobModel = saveDistributionJob();\n     }\n \n     @AfterEach\n     public void cleanupTest() {\n-        if (null != global_config && global_config.isPresent()) {\n-            configurationAccessor.deleteConfiguration(global_config.get());\n+        if (null != optionalChannelGlobalConfig && optionalChannelGlobalConfig.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM3ODg2NA==", "bodyText": "I believe this code was here before and I just renamed the variable. I'll clean this up though.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538378864", "createdAt": "2020-12-08T13:38:47Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/channel/ChannelDescriptorTestIT.java", "diffHunk": "@@ -53,43 +63,54 @@\n     protected DistributionEvent channelEvent;\n \n     protected ContentConverter contentConverter;\n-    protected TestProperties properties;\n+    protected TestProperties testProperties;\n \n+    @Autowired\n+    protected ProviderKey providerKey;\n+    @Autowired\n+    protected JobAccessorV2 jobAccessor;\n     @Autowired\n     protected DefaultConfigurationAccessor configurationAccessor;\n     @Autowired\n     protected DefaultDescriptorAccessor descriptorAccessor;\n     @Autowired\n+    protected DescriptorProcessor descriptorProcessor;\n+    @Autowired\n     protected RegisteredDescriptorRepository registeredDescriptorRepository;\n \n-    protected ConfigurationModel provider_global;\n-    protected Optional<ConfigurationModel> global_config;\n-    protected ConfigurationModel distribution_config;\n-    protected String destinationName;\n+    protected ConfigurationModel providerGlobalConfig;\n+    protected Optional<ConfigurationModel> optionalChannelGlobalConfig;\n+    protected DistributionJobModel distributionJobModel;\n+    protected String eventDestinationName;\n \n     @BeforeEach\n     public void init() throws Exception {\n         gson = new Gson();\n         contentConverter = new ContentConverter(gson, new DefaultConversionService());\n-        properties = new TestProperties();\n-        global_config = saveGlobalConfiguration();\n-        distribution_config = saveDistributionConfiguration();\n+        testProperties = new TestProperties();\n+        providerGlobalConfig = saveProviderGlobalConfig();\n+        optionalChannelGlobalConfig = saveGlobalConfiguration();\n+        eventDestinationName = getEventDestinationName();\n         channelEvent = createChannelEvent();\n-        destinationName = getDestinationName();\n+        distributionJobModel = saveDistributionJob();\n     }\n \n     @AfterEach\n     public void cleanupTest() {\n-        if (null != global_config && global_config.isPresent()) {\n-            configurationAccessor.deleteConfiguration(global_config.get());\n+        if (null != optionalChannelGlobalConfig && optionalChannelGlobalConfig.isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzgzNDExMA=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjQ3MDA5OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldExtractorUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMTo1MzoxNlrOIA8ZJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo1MzowMFrOIBdAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDM4OA==", "bodyText": "Isn't this an example of a way to not use an optional? Instead of being passed a null list, we should be passing an empty list which we then check for content and modify/use as needed.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537860388", "createdAt": "2020-12-07T21:53:16Z", "author": {"login": "bamandel"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldExtractorUtils.java", "diffHunk": "@@ -66,10 +81,12 @@ public static DistributionJobModel convertToDistributionJobModel(UUID jobId, Map\n                                                   .policyFilterPolicyNames(extractFieldValues(\"blackduck.policy.notification.filter\", configuredFieldsMap))\n                                                   .vulnerabilityFilterSeverityNames(extractFieldValues(\"blackduck.vulnerability.notification.filter\", configuredFieldsMap));\n \n-        List<BlackDuckProjectDetailsModel> blackDuckProjectDetails = extractFieldValues(\"channel.common.configured.project\", configuredFieldsMap)\n-                                                                         .stream()\n-                                                                         .map(projectName -> new BlackDuckProjectDetailsModel(projectName, projectName))\n-                                                                         .collect(Collectors.toList());\n+        List<BlackDuckProjectDetailsModel> blackDuckProjectDetails = Optional.ofNullable(projectFilterDetails)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5NDc3Mw==", "bodyText": "This maintains the same functionality that existed previously from what I can see.  I think this can be improved to how you suggest but it is probably a bit beyond the scope of this PR and should be done separately.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538394773", "createdAt": "2020-12-08T13:53:00Z", "author": {"login": "psantos1113"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/job/JobConfigurationModelFieldExtractorUtils.java", "diffHunk": "@@ -66,10 +81,12 @@ public static DistributionJobModel convertToDistributionJobModel(UUID jobId, Map\n                                                   .policyFilterPolicyNames(extractFieldValues(\"blackduck.policy.notification.filter\", configuredFieldsMap))\n                                                   .vulnerabilityFilterSeverityNames(extractFieldValues(\"blackduck.vulnerability.notification.filter\", configuredFieldsMap));\n \n-        List<BlackDuckProjectDetailsModel> blackDuckProjectDetails = extractFieldValues(\"channel.common.configured.project\", configuredFieldsMap)\n-                                                                         .stream()\n-                                                                         .map(projectName -> new BlackDuckProjectDetailsModel(projectName, projectName))\n-                                                                         .collect(Collectors.toList());\n+        List<BlackDuckProjectDetailsModel> blackDuckProjectDetails = Optional.ofNullable(projectFilterDetails)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2MDM4OA=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjUxODYyOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjowNDo0N1rOIA81OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNDoyMzowNVrOIBfBeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NzU3Ng==", "bodyText": "Instead of nesting exceptions, we should make a runtime configuration exception.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537867576", "createdAt": "2020-12-07T22:04:47Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraCloudChannel(JiraCloudChannelKey jiraChannelKey, Gson gson, AuditAcce\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraCloudContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Cloud global configuration\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMzU0OQ==", "bodyText": "Why not just throw the AlertRuntimeException with the error message?  The nested exception doesn't buy you anything.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538403549", "createdAt": "2020-12-08T14:00:16Z", "author": {"login": "psantos1113"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraCloudChannel(JiraCloudChannelKey jiraChannelKey, Gson gson, AuditAcce\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraCloudContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Cloud global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NzU3Ng=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQyNzc3MA==", "bodyText": "I created a Jira issue to resolve this. One reason for wrapping it is because the AlertConfigurationException is the correct exception to throw, so when someone comes to resolve this, they will have the correct alternative available.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538427770", "createdAt": "2020-12-08T14:23:05Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudChannel.java", "diffHunk": "@@ -55,8 +57,9 @@ public JiraCloudChannel(JiraCloudChannelKey jiraChannelKey, Gson gson, AuditAcce\n \n     @Override\n     protected IssueTrackerContext getIssueTrackerContext(DistributionEvent event) {\n-        FieldUtility fieldUtility = event.getFieldUtility();\n-        return jiraCloudContextBuilder.build(fieldUtility);\n+        ConfigurationModel globalConfig = event.getChannelGlobalConfig()\n+                                              .orElseThrow(() -> new AlertRuntimeException(new AlertConfigurationException(\"Missing Jira Cloud global configuration\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg2NzU3Ng=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU2MTUxOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/msteams/MsTeamsChannel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxNTowMVrOIA9NSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo0MjoxNlrOIBcQWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MzczNg==", "bodyText": "We shouldn't be creating this inline optional object to act as our if statement. I believe an if statement here would be much clearer", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537873736", "createdAt": "2020-12-07T22:15:01Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/msteams/MsTeamsChannel.java", "diffHunk": "@@ -59,8 +63,11 @@ public MsTeamsChannel(MsTeamsKey msTeamsKey, Gson gson, AuditAccessor auditAcces\n \n     @Override\n     public void distributeMessage(DistributionEvent event) throws IntegrationException {\n-        FieldUtility fields = event.getFieldUtility();\n-        String webhook = fields.getString(MsTeamsDescriptor.KEY_WEBHOOK)\n+        DistributionJobModel distributionJobModel = event.getDistributionJobModel();\n+        DistributionJobDetailsModel distributionJobDetails = distributionJobModel.getDistributionJobDetails();\n+        MSTeamsJobDetailsModel asMSTeamsJobDetails = distributionJobDetails.getAsMSTeamsJobDetails();\n+        String webhook = Optional.ofNullable(asMSTeamsJobDetails.getWebhook())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM4MjQyNw==", "bodyText": "I thought we as a team decided this was the preferred way to handle these cases?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538382427", "createdAt": "2020-12-08T13:42:16Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/msteams/MsTeamsChannel.java", "diffHunk": "@@ -59,8 +63,11 @@ public MsTeamsChannel(MsTeamsKey msTeamsKey, Gson gson, AuditAccessor auditAcces\n \n     @Override\n     public void distributeMessage(DistributionEvent event) throws IntegrationException {\n-        FieldUtility fields = event.getFieldUtility();\n-        String webhook = fields.getString(MsTeamsDescriptor.KEY_WEBHOOK)\n+        DistributionJobModel distributionJobModel = event.getDistributionJobModel();\n+        DistributionJobDetailsModel distributionJobDetails = distributionJobModel.getDistributionJobDetails();\n+        MSTeamsJobDetailsModel asMSTeamsJobDetails = distributionJobDetails.getAsMSTeamsJobDetails();\n+        String webhook = Optional.ofNullable(asMSTeamsJobDetails.getWebhook())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3MzczNg=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU2NzY0OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/slack/parser/SlackChannelEventParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxNjo0MFrOIA9Q4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoxNjo0MFrOIA9Q4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NDY1Ng==", "bodyText": "This optional should be a ternary operator or an if statement.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537874656", "createdAt": "2020-12-07T22:16:40Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/slack/parser/SlackChannelEventParser.java", "diffHunk": "@@ -76,7 +81,9 @@ public SlackChannelEventParser(SlackChannelMessageParser slackChannelMessagePars\n             throw new AlertFieldException(fieldErrors);\n         }\n \n-        String channelUsername = fields.getString(SlackDescriptor.KEY_CHANNEL_USERNAME).orElse(SLACK_DEFAULT_USERNAME);\n+        String channelUsername = Optional.ofNullable(slackJobDetails.getChannelUsername())\n+                                     .filter(StringUtils::isNotBlank)\n+                                     .orElse(SLACK_DEFAULT_USERNAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjU4NDczOnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyMToyNFrOIA9akA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyMToyNFrOIA9akA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg3NzEzNg==", "bodyText": "This should be an if statement", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537877136", "createdAt": "2020-12-07T22:21:24Z", "author": {"login": "bamandel"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -324,33 +325,56 @@ protected ValidationActionResponse validateWithoutChecks(JobFieldModel resource)\n     @Override\n     protected ValidationActionResponse testWithoutChecks(JobFieldModel resource) {\n         ValidationResponseModel responseModel;\n-        String id = resource.getJobId();\n+        String jobIdString = resource.getJobId();\n+        UUID jobId = Optional.ofNullable(jobIdString)\n+                         .filter(StringUtils::isNotBlank)\n+                         .map(UUID::fromString)\n+                         .orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjYwODg0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjoyNjo1OFrOIA9n6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo0MzozOFrOIBcV1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDU1NQ==", "bodyText": "Resource should return an empty list instead of null so we can process without checking for anything.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537880555", "createdAt": "2020-12-07T22:26:58Z", "author": {"login": "bamandel"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -324,33 +325,56 @@ protected ValidationActionResponse validateWithoutChecks(JobFieldModel resource)\n     @Override\n     protected ValidationActionResponse testWithoutChecks(JobFieldModel resource) {\n         ValidationResponseModel responseModel;\n-        String id = resource.getJobId();\n+        String jobIdString = resource.getJobId();\n+        UUID jobId = Optional.ofNullable(jobIdString)\n+                         .filter(StringUtils::isNotBlank)\n+                         .map(UUID::fromString)\n+                         .orElse(null);\n+\n         try {\n \n             Collection<FieldModel> otherJobModels = new LinkedList<>();\n             FieldModel channelFieldModel = getChannelFieldModelAndPopulateOtherJobModels(resource, otherJobModels);\n \n             if (null != channelFieldModel) {\n-                Optional<TestAction> testActionOptional = descriptorProcessor.retrieveTestAction(channelFieldModel);\n-                if (testActionOptional.isPresent()) {\n+                Optional<ChannelDistributionTestAction> optionalChannelDistributionTestAction = descriptorProcessor.retrieveChannelDistributionTestAction(channelFieldModel.getDescriptorName());\n+                if (optionalChannelDistributionTestAction.isPresent()) {\n+                    ChannelDistributionTestAction channelDistributionTestAction = optionalChannelDistributionTestAction.get();\n                     Map<String, ConfigurationFieldModel> fields = createFieldsMap(channelFieldModel, otherJobModels);\n                     // The custom message fields are not written to the database or defined fields in the database.  Need to manually add them.\n                     // TODO Create a mechanism to create the field accessor with a combination of fields in the database and fields that are not.\n                     Optional<ConfigurationFieldModel> topicField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_TOPIC);\n                     Optional<ConfigurationFieldModel> messageField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_MESSAGE);\n+                    Optional<ConfigurationFieldModel> destinationField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_DESTINATION_NAME);\n                     topicField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_TOPIC, model));\n                     messageField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_MESSAGE, model));\n-                    TestAction testAction = testActionOptional.get();\n-                    FieldUtility fieldUtility = new FieldUtility(fields);\n-                    String jobId = channelFieldModel.getId();\n+                    destinationField.ifPresent(model -> fields.put(TestAction.KEY_DESTINATION_NAME, model));\n \n-                    MessageResult providerTestResult = testProviderConfig(fieldUtility, jobId, channelFieldModel);\n+                    MessageResult providerTestResult = testProviderConfig(new FieldUtility(fields), jobIdString, channelFieldModel);\n                     if (providerTestResult.hasErrors()) {\n                         responseModel = ValidationResponseModel.fromStatusCollection(providerTestResult.getStatusMessage(), providerTestResult.getFieldStatuses());\n                         return new ValidationActionResponse(HttpStatus.OK, responseModel);\n                     }\n \n-                    MessageResult testActionResult = testAction.testConfig(jobId, channelFieldModel, fieldUtility);\n+                    // Not all channels have a global config\n+                    ConfigurationModel nullableChannelGlobalConfig = configurationAccessor.getConfigurationsByDescriptorNameAndContext(channelFieldModel.getDescriptorName(), ConfigContextEnum.GLOBAL)\n+                                                                         .stream()\n+                                                                         .findFirst()\n+                                                                         .orElse(null);\n+\n+                    List<BlackDuckProjectDetailsModel> projectFilterDetails = Optional.ofNullable(resource.getConfiguredProviderProjects()).orElse(List.of())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM4MzgzMA==", "bodyText": "resource is a REST API request-body, so this can absolutely be null.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538383830", "createdAt": "2020-12-08T13:43:38Z", "author": {"login": "gkillough"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -324,33 +325,56 @@ protected ValidationActionResponse validateWithoutChecks(JobFieldModel resource)\n     @Override\n     protected ValidationActionResponse testWithoutChecks(JobFieldModel resource) {\n         ValidationResponseModel responseModel;\n-        String id = resource.getJobId();\n+        String jobIdString = resource.getJobId();\n+        UUID jobId = Optional.ofNullable(jobIdString)\n+                         .filter(StringUtils::isNotBlank)\n+                         .map(UUID::fromString)\n+                         .orElse(null);\n+\n         try {\n \n             Collection<FieldModel> otherJobModels = new LinkedList<>();\n             FieldModel channelFieldModel = getChannelFieldModelAndPopulateOtherJobModels(resource, otherJobModels);\n \n             if (null != channelFieldModel) {\n-                Optional<TestAction> testActionOptional = descriptorProcessor.retrieveTestAction(channelFieldModel);\n-                if (testActionOptional.isPresent()) {\n+                Optional<ChannelDistributionTestAction> optionalChannelDistributionTestAction = descriptorProcessor.retrieveChannelDistributionTestAction(channelFieldModel.getDescriptorName());\n+                if (optionalChannelDistributionTestAction.isPresent()) {\n+                    ChannelDistributionTestAction channelDistributionTestAction = optionalChannelDistributionTestAction.get();\n                     Map<String, ConfigurationFieldModel> fields = createFieldsMap(channelFieldModel, otherJobModels);\n                     // The custom message fields are not written to the database or defined fields in the database.  Need to manually add them.\n                     // TODO Create a mechanism to create the field accessor with a combination of fields in the database and fields that are not.\n                     Optional<ConfigurationFieldModel> topicField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_TOPIC);\n                     Optional<ConfigurationFieldModel> messageField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_MESSAGE);\n+                    Optional<ConfigurationFieldModel> destinationField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_DESTINATION_NAME);\n                     topicField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_TOPIC, model));\n                     messageField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_MESSAGE, model));\n-                    TestAction testAction = testActionOptional.get();\n-                    FieldUtility fieldUtility = new FieldUtility(fields);\n-                    String jobId = channelFieldModel.getId();\n+                    destinationField.ifPresent(model -> fields.put(TestAction.KEY_DESTINATION_NAME, model));\n \n-                    MessageResult providerTestResult = testProviderConfig(fieldUtility, jobId, channelFieldModel);\n+                    MessageResult providerTestResult = testProviderConfig(new FieldUtility(fields), jobIdString, channelFieldModel);\n                     if (providerTestResult.hasErrors()) {\n                         responseModel = ValidationResponseModel.fromStatusCollection(providerTestResult.getStatusMessage(), providerTestResult.getFieldStatuses());\n                         return new ValidationActionResponse(HttpStatus.OK, responseModel);\n                     }\n \n-                    MessageResult testActionResult = testAction.testConfig(jobId, channelFieldModel, fieldUtility);\n+                    // Not all channels have a global config\n+                    ConfigurationModel nullableChannelGlobalConfig = configurationAccessor.getConfigurationsByDescriptorNameAndContext(channelFieldModel.getDescriptorName(), ConfigContextEnum.GLOBAL)\n+                                                                         .stream()\n+                                                                         .findFirst()\n+                                                                         .orElse(null);\n+\n+                    List<BlackDuckProjectDetailsModel> projectFilterDetails = Optional.ofNullable(resource.getConfiguredProviderProjects()).orElse(List.of())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg4MDU1NQ=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjcwODQ1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1Mzo1OVrOIA-gWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo1MjoxMlrOIBc8iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTAwMg==", "bodyText": "Im not sure what this comment means, I found an issue with 6.3.0 where the test discovers a certificate error but it does not make it to the UI because this is changing the response to an OK status. Please refer to #1289 to see the changes I would like to make in this area.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537895002", "createdAt": "2020-12-07T22:53:59Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -194,6 +194,8 @@ public final ValidationActionResponse test(JobFieldModel resource) {\n             return ValidationActionResponse.createOKResponseWithContent(validationResponse);\n         }\n         ValidationActionResponse response = testWithoutChecks(resource);\n+        // FIXME this should only return OK if validation COMPLETED successfully (even\n+        //  if there are field errors), not if there were other types of errors unrelated to validation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM4NDc5Ng==", "bodyText": "I created a 6.5.0 Jira issue for this as well. I'll take a look at your PR.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538384796", "createdAt": "2020-12-08T13:44:30Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -194,6 +194,8 @@ public final ValidationActionResponse test(JobFieldModel resource) {\n             return ValidationActionResponse.createOKResponseWithContent(validationResponse);\n         }\n         ValidationActionResponse response = testWithoutChecks(resource);\n+        // FIXME this should only return OK if validation COMPLETED successfully (even\n+        //  if there are field errors), not if there were other types of errors unrelated to validation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTAwMg=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODM5MzczNg==", "bodyText": "Your issue is different. This is addressing the fact that field-errors produce a 2xx response (which they should because the validation completed successfully), but errors during validation also result in a 2xx which they should not.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538393736", "createdAt": "2020-12-08T13:52:12Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -194,6 +194,8 @@ public final ValidationActionResponse test(JobFieldModel resource) {\n             return ValidationActionResponse.createOKResponseWithContent(validationResponse);\n         }\n         ValidationActionResponse response = testWithoutChecks(resource);\n+        // FIXME this should only return OK if validation COMPLETED successfully (even\n+        //  if there are field errors), not if there were other types of errors unrelated to validation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTAwMg=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjcxNDAzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobModelBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMjo1NTozMlrOIA-jeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMzo1NzoxN1rOIBdV_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTgwMA==", "bodyText": "Is this going to be done in this PR? or is there a Jira ticket to track this?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537895800", "createdAt": "2020-12-07T22:55:32Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobModelBuilder.java", "diffHunk": "@@ -53,6 +53,7 @@\n     private DistributionJobDetailsModel distributionJobDetails;\n \n     public DistributionJobModel build() {\n+        // TODO validate required fields are present", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQwMDI1NQ==", "bodyText": "It will not be done in this PR because this is meant to have parity with the previous model which had no checks for completeness. I will create a Jira issue.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r538400255", "createdAt": "2020-12-08T13:57:17Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobModelBuilder.java", "diffHunk": "@@ -53,6 +53,7 @@\n     private DistributionJobDetailsModel distributionJobDetails;\n \n     public DistributionJobModel build() {\n+        // TODO validate required fields are present", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5NTgwMA=="}, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NjczNzk3OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailTestActionHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMjozNFrOIA-wvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QyMzowMjozNFrOIA-wvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzg5OTE5OA==", "bodyText": "I don't think the ProviderProject's are database entities anymore, this should be updated to reflect that.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1286#discussion_r537899198", "createdAt": "2020-12-07T23:02:34Z", "author": {"login": "jamesrichard91"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/actions/EmailTestActionHelper.java", "diffHunk": "@@ -24,72 +24,68 @@\n \n import java.util.HashSet;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n import org.springframework.stereotype.Component;\n \n import com.synopsys.integration.alert.channel.email.EmailAddressHandler;\n-import com.synopsys.integration.alert.channel.email.descriptor.EmailDescriptor;\n-import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n-import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.job.BlackDuckProjectDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class EmailActionHelper {\n+public class EmailTestActionHelper {\n     private final EmailAddressHandler emailAddressHandler;\n     private final ProviderDataAccessor providerDataAccessor;\n \n-    public EmailActionHelper(EmailAddressHandler emailAddressHandler, ProviderDataAccessor providerDataAccessor) {\n+    public EmailTestActionHelper(EmailAddressHandler emailAddressHandler, ProviderDataAccessor providerDataAccessor) {\n         this.emailAddressHandler = emailAddressHandler;\n         this.providerDataAccessor = providerDataAccessor;\n     }\n \n-    public FieldUtility createUpdatedFieldAccessor(FieldUtility fieldUtility, String destination) throws IntegrationException {\n+    public Set<String> createUpdatedEmailAddresses(DistributionJobModel distributionJobModel, @Nullable String destination) throws IntegrationException {\n         Set<String> emailAddresses = new HashSet<>();\n         if (StringUtils.isNotBlank(destination)) {\n             emailAddresses.add(destination);\n         }\n \n-        boolean filterByProject = fieldUtility.getBooleanOrFalse(ProviderDistributionUIConfig.KEY_FILTER_BY_PROJECT);\n-        Long providerConfigId = fieldUtility.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).orElse(null);\n-        boolean onlyAdditionalEmails = fieldUtility.getBooleanOrFalse(EmailDescriptor.KEY_EMAIL_ADDITIONAL_ADDRESSES_ONLY);\n+        DistributionJobDetailsModel distributionJobDetails = distributionJobModel.getDistributionJobDetails();\n+        EmailJobDetailsModel emailJobDetails = distributionJobDetails.getAsEmailJobDetails();\n+\n+        Long providerConfigId = distributionJobModel.getBlackDuckGlobalConfigId();\n+        boolean onlyAdditionalEmails = emailJobDetails.isAdditionalEmailAddressesOnly();\n \n         if (null != providerConfigId && !onlyAdditionalEmails) {\n-            Set<ProviderProject> providerProjects = retrieveProviderProjects(fieldUtility, filterByProject, providerConfigId);\n-            if (null != providerProjects) {\n-                Set<String> providerEmailAddresses = addEmailAddresses(providerConfigId, providerProjects, fieldUtility);\n+            Set<ProviderProject> providerProjects = retrieveProviderProjects(distributionJobModel, providerConfigId);\n+            if (null != providerProjects && !providerProjects.isEmpty()) {\n+                Set<String> providerEmailAddresses = addEmailAddresses(providerConfigId, providerProjects, distributionJobModel, emailJobDetails);\n                 emailAddresses.addAll(providerEmailAddresses);\n             }\n         }\n-\n-        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(EmailDescriptor.KEY_EMAIL_ADDRESSES);\n-        configurationFieldModel.setFieldValues(emailAddresses);\n-\n-        Map<String, ConfigurationFieldModel> fields = fieldUtility.getFields();\n-        fields.put(EmailDescriptor.KEY_EMAIL_ADDRESSES, configurationFieldModel);\n-\n-        return new FieldUtility(fields);\n+        return emailAddresses;\n     }\n \n     private boolean doesProjectMatchConfiguration(String currentProjectName, String projectNamePattern, Set<String> configuredProjectNames) {\n         return currentProjectName.matches(projectNamePattern) || configuredProjectNames.contains(currentProjectName);\n     }\n \n-    private Set<ProviderProject> retrieveProviderProjects(FieldUtility fieldUtility, boolean filterByProject, Long providerConfigId) {\n+    private Set<ProviderProject> retrieveProviderProjects(DistributionJobModel distributionJobModel, Long providerConfigId) {\n         List<ProviderProject> providerProjects = providerDataAccessor.getProjectsByProviderConfigId(providerConfigId);\n-        if (filterByProject) {\n-            Optional<ConfigurationFieldModel> projectField = fieldUtility.getField(ProviderDistributionUIConfig.KEY_CONFIGURED_PROJECT);\n-            Set<String> configuredProjects = new HashSet<>(projectField.map(ConfigurationFieldModel::getFieldValues).orElse(Set.of()));\n-            String projectNamePattern = fieldUtility.getStringOrEmpty(ProviderDistributionUIConfig.KEY_PROJECT_NAME_PATTERN);\n+        if (distributionJobModel.isFilterByProject()) {\n+            Set<String> configuredProjects = distributionJobModel.getProjectFilterDetails()\n+                                                 .stream()\n+                                                 .map(BlackDuckProjectDetailsModel::getName)\n+                                                 .collect(Collectors.toSet());\n+            String projectNamePattern = distributionJobModel.getProjectNamePattern().orElse(\"\");\n             return providerProjects\n                        .stream()\n                        .filter(databaseEntity -> doesProjectMatchConfiguration(databaseEntity.getName(), projectNamePattern, configuredProjects))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57dd1b17667a4b95b0f8fa56e16678428ef8da42"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2238, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}