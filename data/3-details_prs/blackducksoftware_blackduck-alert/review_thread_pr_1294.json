{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MTc2ODky", "number": 1294, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNzowNFrOFEEVgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToxNzoxMVrOFENECw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODA5NjY3OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNzowNFrOIEAoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNzowNFrOIEAoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3NTYyNw==", "bodyText": "This will be done in the next PR.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541075627", "createdAt": "2020-12-11T16:37:04Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "diffHunk": "@@ -91,13 +52,18 @@ public JiraCloudContext build(ConfigurationModel globalConfig, DistributionJobMo\n         DistributionJobDetailsModel distributionJobDetails = jobModel.getDistributionJobDetails();\n         JiraCloudJobDetailsModel jiraCouldJobDetails = distributionJobDetails.getAsJiraCouldJobDetails();\n \n-        IssueConfig issueConfig = new IssueConfig();\n-        issueConfig.setProjectName(jiraCouldJobDetails.getProjectNameOrKey());\n-        issueConfig.setIssueCreator(jiraCouldJobDetails.getIssueCreatorEmail());\n-        issueConfig.setIssueType(jiraCouldJobDetails.getIssueType());\n-        issueConfig.setCommentOnIssues(jiraCouldJobDetails.isAddComments());\n-        issueConfig.setResolveTransition(jiraCouldJobDetails.getResolveTransition());\n-        issueConfig.setOpenTransition(jiraCouldJobDetails.getReopenTransition());\n+        // FIXME add custom fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd3bc14dacad53bcfeab6430bdb74475abefad1"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODA5OTEwOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerContextBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNzoyOFrOIEAp7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxNjozNzoyOFrOIEAp7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTA3NTk0OA==", "bodyText": "This will be done in the next PR.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541075948", "createdAt": "2020-12-11T16:37:28Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/JiraServerContextBuilder.java", "diffHunk": "@@ -91,14 +52,18 @@ public JiraServerContext build(ConfigurationModel globalConfig, DistributionJobM\n         DistributionJobDetailsModel distributionJobDetails = testJobModel.getDistributionJobDetails();\n         JiraServerJobDetailsModel jiraServerJobDetails = distributionJobDetails.getAsJiraServerJobDetails();\n \n-        IssueConfig issueConfig = new IssueConfig();\n-        issueConfig.setProjectName(jiraServerJobDetails.getProjectNameOrKey());\n-        issueConfig.setIssueCreator(jiraServerJobDetails.getIssueCreatorUsername());\n-        issueConfig.setIssueType(jiraServerJobDetails.getIssueType());\n-        issueConfig.setCommentOnIssues(jiraServerJobDetails.isAddComments());\n-        issueConfig.setResolveTransition(jiraServerJobDetails.getResolveTransition());\n-        issueConfig.setOpenTransition(jiraServerJobDetails.getReopenTransition());\n-\n+        // FIXME add custom fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ddd3bc14dacad53bcfeab6430bdb74475abefad1"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODgwMjMzOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToxNjoxNlrOIEHRtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToyNDoyOFrOIEHv4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE4NDQzOA==", "bodyText": "Are we passing in the projectNameOrKey twice on purpose? or was this an accident?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541184438", "createdAt": "2020-12-11T19:16:16Z", "author": {"login": "jamesrichard91"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "diffHunk": "@@ -91,13 +52,18 @@ public JiraCloudContext build(ConfigurationModel globalConfig, DistributionJobMo\n         DistributionJobDetailsModel distributionJobDetails = jobModel.getDistributionJobDetails();\n         JiraCloudJobDetailsModel jiraCouldJobDetails = distributionJobDetails.getAsJiraCouldJobDetails();\n \n-        IssueConfig issueConfig = new IssueConfig();\n-        issueConfig.setProjectName(jiraCouldJobDetails.getProjectNameOrKey());\n-        issueConfig.setIssueCreator(jiraCouldJobDetails.getIssueCreatorEmail());\n-        issueConfig.setIssueType(jiraCouldJobDetails.getIssueType());\n-        issueConfig.setCommentOnIssues(jiraCouldJobDetails.isAddComments());\n-        issueConfig.setResolveTransition(jiraCouldJobDetails.getResolveTransition());\n-        issueConfig.setOpenTransition(jiraCouldJobDetails.getReopenTransition());\n+        // FIXME add custom fields\n+        JiraIssueConfig issueConfig = new JiraIssueConfig(\n+            jiraCouldJobDetails.getProjectNameOrKey(),\n+            jiraCouldJobDetails.getProjectNameOrKey(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5MjE2Mw==", "bodyText": "I'm not entirely sure we use all of these fields and it's something that needs a closer look, but this object has \"project name\" and \"project key\" fields and I'm passing it into both just in case. In Jira APIs you can use both interchangeably (unlike the project id).", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541192163", "createdAt": "2020-12-11T19:24:28Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/cloud/JiraCloudContextBuilder.java", "diffHunk": "@@ -91,13 +52,18 @@ public JiraCloudContext build(ConfigurationModel globalConfig, DistributionJobMo\n         DistributionJobDetailsModel distributionJobDetails = jobModel.getDistributionJobDetails();\n         JiraCloudJobDetailsModel jiraCouldJobDetails = distributionJobDetails.getAsJiraCouldJobDetails();\n \n-        IssueConfig issueConfig = new IssueConfig();\n-        issueConfig.setProjectName(jiraCouldJobDetails.getProjectNameOrKey());\n-        issueConfig.setIssueCreator(jiraCouldJobDetails.getIssueCreatorEmail());\n-        issueConfig.setIssueType(jiraCouldJobDetails.getIssueType());\n-        issueConfig.setCommentOnIssues(jiraCouldJobDetails.isAddComments());\n-        issueConfig.setResolveTransition(jiraCouldJobDetails.getResolveTransition());\n-        issueConfig.setOpenTransition(jiraCouldJobDetails.getReopenTransition());\n+        // FIXME add custom fields\n+        JiraIssueConfig issueConfig = new JiraIssueConfig(\n+            jiraCouldJobDetails.getProjectNameOrKey(),\n+            jiraCouldJobDetails.getProjectNameOrKey(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE4NDQzOA=="}, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODgxNDMyOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraCustomFieldResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToxODoxMVrOIEHY_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToyNTowMVrOIEHyLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE4NjMwMg==", "bodyText": "How long are we keeping this cache around for?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541186302", "createdAt": "2020-12-11T19:18:11Z", "author": {"login": "jamesrichard91"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraCustomFieldResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.channel.jira.common.model.CustomFieldDefinitionModel;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraResolvedCustomField;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.function.ThrowingSupplier;\n+import com.synopsys.integration.jira.common.model.response.CustomFieldCreationResponseModel;\n+\n+public abstract class JiraCustomFieldResolver {\n+    private static final String CUSTOM_FIELD_TYPE_STRING_VALUE = \"string\";\n+    private static final String CUSTOM_FIELD_TYPE_ARRAY_VALUE = \"array\";\n+    private static final String CUSTOM_FIELD_TYPE_OPTION_VALUE = \"option\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final ThrowingSupplier<List<CustomFieldCreationResponseModel>, IntegrationException> retrieveAvailableFields;\n+    private final Map<String, CustomFieldCreationResponseModel> fieldCache;\n+    private boolean isCachePopulated;\n+\n+    public JiraCustomFieldResolver(\n+        ThrowingSupplier<List<CustomFieldCreationResponseModel>, IntegrationException> retrieveAvailableFields) {\n+        this.retrieveAvailableFields = retrieveAvailableFields;\n+        this.fieldCache = new HashMap<>();\n+        this.isCachePopulated = false;\n+    }\n+\n+    public final JiraResolvedCustomField resolveCustomField(JiraCustomFieldConfig jiraCustomFieldConfig) {\n+        CustomFieldDefinitionModel fieldDefinition = retrieveCustomFieldDefinition(jiraCustomFieldConfig);\n+        Object requestObject = convertValueToRequestObject(fieldDefinition, jiraCustomFieldConfig);\n+        return new JiraResolvedCustomField(fieldDefinition.getFieldId(), requestObject);\n+    }\n+\n+    protected Optional<CustomFieldCreationResponseModel> retrieveFieldDefinition(String fieldName) {\n+        if (!isCachePopulated) {\n+            try {\n+                initializeCache();\n+            } catch (IntegrationException e) {\n+                logger.warn(\"No Jira Cloud user-visible fields found\");\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.ofNullable(fieldCache.get(fieldName));\n+    }\n+\n+    protected CustomFieldDefinitionModel retrieveCustomFieldDefinition(JiraCustomFieldConfig customFieldConfig) {\n+        String fieldName = customFieldConfig.getFieldName();\n+        CustomFieldCreationResponseModel fieldResponse = retrieveFieldDefinition(fieldName)\n+                                                             .orElseThrow(() -> new AlertRuntimeException(String.format(\"No custom field named '%s' existed\", fieldName)));\n+        return new CustomFieldDefinitionModel(fieldResponse.getId(), fieldResponse.getSchema().getType());\n+    }\n+\n+    protected Object convertValueToRequestObject(CustomFieldDefinitionModel fieldDefinition, JiraCustomFieldConfig jiraCustomFieldConfig) {\n+        String fieldType = fieldDefinition.getFieldType();\n+        switch (fieldType) {\n+            case CUSTOM_FIELD_TYPE_STRING_VALUE:\n+                return jiraCustomFieldConfig;\n+            case CUSTOM_FIELD_TYPE_ARRAY_VALUE:\n+                JsonArray jsonArray = new JsonArray();\n+                jsonArray.add(jiraCustomFieldConfig.getFieldValue());\n+                return jsonArray;\n+            case CUSTOM_FIELD_TYPE_OPTION_VALUE:\n+                JsonObject jsonObject = new JsonObject();\n+                jsonObject.addProperty(\"value\", jiraCustomFieldConfig.getFieldValue());\n+                return jsonObject;\n+            default:\n+                throw new AlertRuntimeException(String.format(\"Unsupported field type '%s' for field: %s\", fieldType, jiraCustomFieldConfig.getFieldName()));\n+        }\n+    }\n+\n+    private void initializeCache() throws IntegrationException {\n+        List<CustomFieldCreationResponseModel> userVisibleFields = retrieveAvailableFields.get();\n+        for (CustomFieldCreationResponseModel fieldModel : userVisibleFields) {\n+            fieldCache.put(fieldModel.getName(), fieldModel);\n+        }\n+        isCachePopulated = true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5Mjc0OQ==", "bodyText": "For the duration of processing of a single event.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541192749", "createdAt": "2020-12-11T19:25:01Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/JiraCustomFieldResolver.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.channel.jira.common.model.CustomFieldDefinitionModel;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraResolvedCustomField;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.function.ThrowingSupplier;\n+import com.synopsys.integration.jira.common.model.response.CustomFieldCreationResponseModel;\n+\n+public abstract class JiraCustomFieldResolver {\n+    private static final String CUSTOM_FIELD_TYPE_STRING_VALUE = \"string\";\n+    private static final String CUSTOM_FIELD_TYPE_ARRAY_VALUE = \"array\";\n+    private static final String CUSTOM_FIELD_TYPE_OPTION_VALUE = \"option\";\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private final ThrowingSupplier<List<CustomFieldCreationResponseModel>, IntegrationException> retrieveAvailableFields;\n+    private final Map<String, CustomFieldCreationResponseModel> fieldCache;\n+    private boolean isCachePopulated;\n+\n+    public JiraCustomFieldResolver(\n+        ThrowingSupplier<List<CustomFieldCreationResponseModel>, IntegrationException> retrieveAvailableFields) {\n+        this.retrieveAvailableFields = retrieveAvailableFields;\n+        this.fieldCache = new HashMap<>();\n+        this.isCachePopulated = false;\n+    }\n+\n+    public final JiraResolvedCustomField resolveCustomField(JiraCustomFieldConfig jiraCustomFieldConfig) {\n+        CustomFieldDefinitionModel fieldDefinition = retrieveCustomFieldDefinition(jiraCustomFieldConfig);\n+        Object requestObject = convertValueToRequestObject(fieldDefinition, jiraCustomFieldConfig);\n+        return new JiraResolvedCustomField(fieldDefinition.getFieldId(), requestObject);\n+    }\n+\n+    protected Optional<CustomFieldCreationResponseModel> retrieveFieldDefinition(String fieldName) {\n+        if (!isCachePopulated) {\n+            try {\n+                initializeCache();\n+            } catch (IntegrationException e) {\n+                logger.warn(\"No Jira Cloud user-visible fields found\");\n+                return Optional.empty();\n+            }\n+        }\n+        return Optional.ofNullable(fieldCache.get(fieldName));\n+    }\n+\n+    protected CustomFieldDefinitionModel retrieveCustomFieldDefinition(JiraCustomFieldConfig customFieldConfig) {\n+        String fieldName = customFieldConfig.getFieldName();\n+        CustomFieldCreationResponseModel fieldResponse = retrieveFieldDefinition(fieldName)\n+                                                             .orElseThrow(() -> new AlertRuntimeException(String.format(\"No custom field named '%s' existed\", fieldName)));\n+        return new CustomFieldDefinitionModel(fieldResponse.getId(), fieldResponse.getSchema().getType());\n+    }\n+\n+    protected Object convertValueToRequestObject(CustomFieldDefinitionModel fieldDefinition, JiraCustomFieldConfig jiraCustomFieldConfig) {\n+        String fieldType = fieldDefinition.getFieldType();\n+        switch (fieldType) {\n+            case CUSTOM_FIELD_TYPE_STRING_VALUE:\n+                return jiraCustomFieldConfig;\n+            case CUSTOM_FIELD_TYPE_ARRAY_VALUE:\n+                JsonArray jsonArray = new JsonArray();\n+                jsonArray.add(jiraCustomFieldConfig.getFieldValue());\n+                return jsonArray;\n+            case CUSTOM_FIELD_TYPE_OPTION_VALUE:\n+                JsonObject jsonObject = new JsonObject();\n+                jsonObject.addProperty(\"value\", jiraCustomFieldConfig.getFieldValue());\n+                return jsonObject;\n+            default:\n+                throw new AlertRuntimeException(String.format(\"Unsupported field type '%s' for field: %s\", fieldType, jiraCustomFieldConfig.getFieldName()));\n+        }\n+    }\n+\n+    private void initializeCache() throws IntegrationException {\n+        List<CustomFieldCreationResponseModel> userVisibleFields = retrieveAvailableFields.get();\n+        for (CustomFieldCreationResponseModel fieldModel : userVisibleFields) {\n+            fieldCache.put(fieldModel.getName(), fieldModel);\n+        }\n+        isCachePopulated = true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE4NjMwMg=="}, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5ODg2MTYxOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOToyNjoxOVrOIEH2zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxOTozMDo1OVrOIEIIVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5MzkzMg==", "bodyText": "Do we also need the Jira field type? Should this class be serializable?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541193932", "createdAt": "2020-12-11T19:26:19Z", "author": {"login": "jamesrichard91"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.model;\n+\n+public class JiraCustomFieldConfig {\n+    private final String fieldName;\n+    private final String fieldValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5ODQyMA==", "bodyText": "We get the field type when we look up the field to get its ID. This class is transient in the way that it is used, so I don't think it needs to be serializable.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541198420", "createdAt": "2020-12-11T19:30:59Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.model;\n+\n+public class JiraCustomFieldConfig {\n+    private final String fieldName;\n+    private final String fieldValue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTE5MzkzMg=="}, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5OTUyNjUxOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/util/JiraServerCustomFieldResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQyMToxNzoxMVrOIEOYSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzoxNDozNlrOIFP1xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMDgwOQ==", "bodyText": "Instead of using an entire class for this function, you can open up the method that uses this function to accept the function as a parameter. Then wherever you make the distinction between JiraServerCustomFieldResolver and JiraCloudCustomFieldResolver (Couldn't find it in the PR) you instead set a variable function equal to what is being passed here... does that make sense? I think it would be clearer than having 2 separate basically empty classes.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r541300809", "createdAt": "2020-12-11T21:17:11Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/util/JiraServerCustomFieldResolver.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.server.util;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraCustomFieldResolver;\n+import com.synopsys.integration.jira.common.server.service.FieldService;\n+\n+public class JiraServerCustomFieldResolver extends JiraCustomFieldResolver {\n+    public JiraServerCustomFieldResolver(FieldService fieldService) {\n+        super(fieldService::getUserVisibleFields);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM3MzMxOA==", "bodyText": "Yeah, I was thinking about this. I didn't know if it would be the most expressive API to ask for a Supplier in the constructor, but I think you're right that it's better than the duplication.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1294#discussion_r542373318", "createdAt": "2020-12-14T13:14:36Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/server/util/JiraServerCustomFieldResolver.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.server.util;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraCustomFieldResolver;\n+import com.synopsys.integration.jira.common.server.service.FieldService;\n+\n+public class JiraServerCustomFieldResolver extends JiraCustomFieldResolver {\n+    public JiraServerCustomFieldResolver(FieldService fieldService) {\n+        super(fieldService::getUserVisibleFields);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MTMwMDgwOQ=="}, "originalCommit": {"oid": "ad74730726fc1490b07cf4242512a7cf6067be3f"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2253, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}