{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjczMTk4", "number": 878, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzo1Njo0OVrODjFckA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMjo1N1rODjNcqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTE1OTg0OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzo1Njo0OVrOFusarw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMTowNjozOVrOFu8NjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNjU0Mw==", "bodyText": "providerConfigNameField", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384506543", "createdAt": "2020-02-26T13:56:49Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java", "diffHunk": "@@ -75,12 +76,9 @@ public ProviderDistributionUIConfig(String label, String urlName, ProviderConten\n \n     @Override\n     public List<ConfigField> createFields() {\n-        // TODO extract label and description\n-        // FIXME add endpoint\n-        ConfigField providerConfigName = new EndpointSelectField(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME, \"Provider Config Name\", \"The name of the provider configuration to use for this distribution job.\")\n-                                             .applyClearable(false)\n-                                             .applyRequired(true);\n-\n+        ConfigField providerConfigField = new EndpointSelectField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, ProviderDescriptor.LABEL_PROVIDER_CONFIG_NAME, ProviderDescriptor.DESCRIPTION_PROVIDER_CONFIG_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDc2NTMyNA==", "bodyText": "done", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384765324", "createdAt": "2020-02-26T21:06:39Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java", "diffHunk": "@@ -75,12 +76,9 @@ public ProviderDistributionUIConfig(String label, String urlName, ProviderConten\n \n     @Override\n     public List<ConfigField> createFields() {\n-        // TODO extract label and description\n-        // FIXME add endpoint\n-        ConfigField providerConfigName = new EndpointSelectField(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME, \"Provider Config Name\", \"The name of the provider configuration to use for this distribution job.\")\n-                                             .applyClearable(false)\n-                                             .applyRequired(true);\n-\n+        ConfigField providerConfigField = new EndpointSelectField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, ProviderDescriptor.LABEL_PROVIDER_CONFIG_NAME, ProviderDescriptor.DESCRIPTION_PROVIDER_CONFIG_NAME)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNjU0Mw=="}, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MTE4NjE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDowMzo0NlrOFusqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo1NzowOVrOFu2BSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw==", "bodyText": "Should we validate if configId is a number?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384510627", "createdAt": "2020-02-26T14:03:46Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "diffHunk": "@@ -63,7 +64,13 @@ public MessageResult testConfig(String configId, String description, FieldAccess\n         String apiToken = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_API_KEY);\n         String url = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_URL);\n         String timeout = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_TIMEOUT);\n-        BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(Long.valueOf(configId), fieldAccessor);\n+        Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n+\n+        if (StringUtils.isNotBlank(configId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1Njc3OA==", "bodyText": "If a configId isn't a number then something is very wrong. I feel it should break in that case.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384656778", "createdAt": "2020-02-26T17:44:22Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "diffHunk": "@@ -63,7 +64,13 @@ public MessageResult testConfig(String configId, String description, FieldAccess\n         String apiToken = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_API_KEY);\n         String url = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_URL);\n         String timeout = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_TIMEOUT);\n-        BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(Long.valueOf(configId), fieldAccessor);\n+        Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n+\n+        if (StringUtils.isNotBlank(configId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw=="}, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY2Mzg4MQ==", "bodyText": "If someone is using REST calls, configId may not be a number.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384663881", "createdAt": "2020-02-26T17:57:09Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "diffHunk": "@@ -63,7 +64,13 @@ public MessageResult testConfig(String configId, String description, FieldAccess\n         String apiToken = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_API_KEY);\n         String url = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_URL);\n         String timeout = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_TIMEOUT);\n-        BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(Long.valueOf(configId), fieldAccessor);\n+        Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n+\n+        if (StringUtils.isNotBlank(configId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw=="}, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjA2NDYyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzozMjo0MlrOFu1MjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzozMjo0MlrOFu1MjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDM4MA==", "bodyText": "Could this be converted to a stream?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384650380", "createdAt": "2020-02-26T17:32:42Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.synopsys.integration.alert.common.descriptor.config.ui;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+@Component\n+public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final DescriptorMap descriptorMap;\n+\n+    @Autowired\n+    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n+        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager, responseFactory, gson);\n+        this.configurationAccessor = configurationAccessor;\n+        this.descriptorMap = descriptorMap;\n+    }\n+\n+    @Override\n+    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+        String providerName = fieldModel.getDescriptorName();\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        if (descriptorKey.isPresent()) {\n+            List<LabelValueSelectOption> options = new LinkedList<>();\n+            List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n+            for (ConfigurationModel configurationModel : configurationModels) {\n+                FieldAccessor accessor = new FieldAccessor(configurationModel.getCopyOfKeyToFieldMap());\n+                Optional<String> configName = accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+                if (configName.isPresent()) {\n+                    options.add(new LabelValueSelectOption(configName.get()));\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjA5NDU1OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MToyNFrOFu1etw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0MToyNFrOFu1etw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTAzMQ==", "bodyText": "These lines can all be collapsed into something similar to\ngetConfigurationById(configId).filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\nAlthough exception handling could cause problems here.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384655031", "createdAt": "2020-02-26T17:41:24Z", "author": {"login": "bamandel"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -167,15 +167,22 @@ public void deleteJob(UUID jobId) throws AlertDatabaseConstraintException {\n         if (StringUtils.isBlank(providerConfigName)) {\n             throw new AlertDatabaseConstraintException(\"The provider configuration name cannot be null\");\n         }\n-        Long fieldId = definedFieldRepository.findFirstByKey(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)\n+        Long fieldId = definedFieldRepository.findFirstByKey(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n                            .map(DefinedFieldEntity::getId)\n-                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)));\n-        Optional<Long> optionalProviderConfigId = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n-                                                      .stream()\n-                                                      .map(FieldValueEntity::getConfigId)\n-                                                      .findFirst();\n-        if (optionalProviderConfigId.isPresent()) {\n-            return getConfigurationById(optionalProviderConfigId.get());\n+                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)));\n+        List<Long> providerConfigIds = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n+                                           .stream()\n+                                           .map(FieldValueEntity::getConfigId)\n+                                           .collect(Collectors.toList());\n+        if (!providerConfigIds.isEmpty()) {\n+            for (Long configId : providerConfigIds) {\n+                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n+                Optional<ConfigurationModel> globalModel = configurationModel\n+                                                               .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n+                if (globalModel.isPresent()) {\n+                    return globalModel;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4MjQ3MDgyOnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMjo1N1rOFu5Lcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMjo1N1rOFu5Lcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNTYzNA==", "bodyText": "Why are we not just returning the Optional globalModel? What is the purpose of the isPresent check?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384715634", "createdAt": "2020-02-26T19:32:57Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -167,15 +167,22 @@ public void deleteJob(UUID jobId) throws AlertDatabaseConstraintException {\n         if (StringUtils.isBlank(providerConfigName)) {\n             throw new AlertDatabaseConstraintException(\"The provider configuration name cannot be null\");\n         }\n-        Long fieldId = definedFieldRepository.findFirstByKey(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)\n+        Long fieldId = definedFieldRepository.findFirstByKey(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n                            .map(DefinedFieldEntity::getId)\n-                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)));\n-        Optional<Long> optionalProviderConfigId = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n-                                                      .stream()\n-                                                      .map(FieldValueEntity::getConfigId)\n-                                                      .findFirst();\n-        if (optionalProviderConfigId.isPresent()) {\n-            return getConfigurationById(optionalProviderConfigId.get());\n+                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)));\n+        List<Long> providerConfigIds = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n+                                           .stream()\n+                                           .map(FieldValueEntity::getConfigId)\n+                                           .collect(Collectors.toList());\n+        if (!providerConfigIds.isEmpty()) {\n+            for (Long configId : providerConfigIds) {\n+                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n+                Optional<ConfigurationModel> globalModel = configurationModel\n+                                                               .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n+                if (globalModel.isPresent()) {\n+                    return globalModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2138, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}