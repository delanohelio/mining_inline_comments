{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4OTIxNjE0", "number": 1158, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowMTo0N1rOEgWxZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxNDoyN1rOEgW_7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzYyOTgxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowMTo0N1rOHNK4_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowMTo0N1rOHNK4_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3MTk2NA==", "bodyText": "In ResponseStatusException, the message parameter in @Nullable. We should use .orElse(null) here so that the default message for the HttpStatus will be used by the exception.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483571964", "createdAt": "2020-09-04T12:01:47Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseFactory.java", "diffHunk": "@@ -75,6 +75,18 @@ public static ResponseStatusException createNotImplementedException(@Nullable St\n         return new ResponseStatusException(HttpStatus.NOT_IMPLEMENTED, customMessage);\n     }\n \n+    public static <T> ResponseStatusException createStatusException(ActionResponse<T> actionResponse) {\n+        String customMessage = actionResponse.getMessage().orElse(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzYzNDg2OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowMzo0NFrOHNK8Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowMzo0NFrOHNK8Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3Mjc1OA==", "bodyText": "For the sake of consistency, it might be nice to wrap the List<LabelValueSelectOption> in an object.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483572758", "createdAt": "2020-09-04T12:03:44Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderSelectCustomFunctionAction.java", "diffHunk": "@@ -27,35 +27,39 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class ProviderSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderSelectCustomEndpoint(CustomEndpointManager customEndpointManager, DescriptorMap descriptorMap) throws AlertException {\n-        super(ChannelDistributionUIConfig.KEY_PROVIDER_NAME, customEndpointManager);\n+    public ProviderSelectCustomFunctionAction(AuthorizationManager authorizationManager, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n-        return descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n-                   .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n-                   .flatMap(Optional::stream)\n-                   .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n-                   .sorted()\n-                   .collect(Collectors.toList());\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n+        List<LabelValueSelectOption> content = descriptorMap.getDescriptorByType(DescriptorType.PROVIDER).stream()\n+                                                   .map(descriptor -> descriptor.createMetaData(ConfigContextEnum.DISTRIBUTION))\n+                                                   .flatMap(Optional::stream)\n+                                                   .map(descriptorMetadata -> new LabelValueSelectOption(descriptorMetadata.getLabel(), descriptorMetadata.getName()))\n+                                                   .sorted()\n+                                                   .collect(Collectors.toList());\n+        return new ActionResponse<>(HttpStatus.OK, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzYzODAwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowNDo1MFrOHNK93A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowNDo1MFrOHNK93A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3MzIxMg==", "bodyText": "It might be nice to wrap the List<ProviderProject>.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483573212", "createdAt": "2020-09-04T12:04:50Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionCustomFunctionAction.java", "diffHunk": "@@ -30,34 +30,38 @@\n import org.springframework.stereotype.Component;\n import org.springframework.web.server.ResponseStatusException;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.table.TableSelectCustomEndpoint;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n-public class ProviderDistributionCustomEndpoint extends TableSelectCustomEndpoint {\n+public class ProviderDistributionCustomFunctionAction extends CustomFunctionAction<List<ProviderProject>> {\n     private static final String MISSING_PROVIDER_ERROR = \"Provider name is required to retrieve projects.\";\n \n     private final ProviderDataAccessor providerDataAccessor;\n \n     @Autowired\n-    public ProviderDistributionCustomEndpoint(CustomEndpointManager customEndpointManager, ProviderDataAccessor providerDataAccessor) throws AlertException {\n-        super(ProviderDistributionUIConfig.KEY_CONFIGURED_PROJECT, customEndpointManager);\n+    public ProviderDistributionCustomFunctionAction(AuthorizationManager authorizationManager, ProviderDataAccessor providerDataAccessor) {\n+        super(authorizationManager);\n         this.providerDataAccessor = providerDataAccessor;\n     }\n \n     @Override\n-    protected List<?> createData(FieldModel fieldModel) throws ResponseStatusException {\n+    public ActionResponse<List<ProviderProject>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws IntegrationException {\n         String providerName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_PROVIDER_NAME).orElse(\"\");\n         if (StringUtils.isBlank(providerName)) {\n             throw new ResponseStatusException(HttpStatus.BAD_REQUEST, MISSING_PROVIDER_ERROR);\n         }\n \n         String providerConfigName = fieldModel.getFieldValue(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).orElse(\"\");\n-        return providerDataAccessor.getProjectsByProviderConfigName(providerConfigName);\n+        List<ProviderProject> content = providerDataAccessor.getProjectsByProviderConfigName(providerConfigName);\n+        return new ActionResponse<>(HttpStatus.OK, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY0NTgwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjowNzoyN1rOHNLCbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMzoxMzoxNFrOHNNBIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg==", "bodyText": "I'm working backwards here, but we might want to rethink content being a List. It adds one more step to the controller for enforcing the pattern of an API always returning a JSON Object.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483574382", "createdAt": "2020-09-04T12:07:27Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -27,47 +27,51 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n @Component\n-public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private final ConfigurationAccessor configurationAccessor;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n-        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager);\n+    public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizationManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.configurationAccessor = configurationAccessor;\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        List<LabelValueSelectOption> content = List.of();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            return configurationModels.stream()\n-                       .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                       .map(FieldAccessor::new)\n-                       .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n-                       .flatMap(Optional::stream)\n-                       .map(LabelValueSelectOption::new)\n-                       .collect(Collectors.toList());\n+            content = configurationModels.stream()\n+                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n+                          .map(FieldAccessor::new)\n+                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .flatMap(Optional::stream)\n+                          .map(LabelValueSelectOption::new)\n+                          .collect(Collectors.toList());\n         }\n-        return List.of();\n+        return new ActionResponse<>(HttpStatus.OK, content);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MTAyMA==", "bodyText": "We need to change the corresponding javascript code for those fields to expect an object and rather than an array. I will look into it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483581020", "createdAt": "2020-09-04T12:21:48Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -27,47 +27,51 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n @Component\n-public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private final ConfigurationAccessor configurationAccessor;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n-        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager);\n+    public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizationManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.configurationAccessor = configurationAccessor;\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        List<LabelValueSelectOption> content = List.of();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            return configurationModels.stream()\n-                       .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                       .map(FieldAccessor::new)\n-                       .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n-                       .flatMap(Optional::stream)\n-                       .map(LabelValueSelectOption::new)\n-                       .collect(Collectors.toList());\n+            content = configurationModels.stream()\n+                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n+                          .map(FieldAccessor::new)\n+                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .flatMap(Optional::stream)\n+                          .map(LabelValueSelectOption::new)\n+                          .collect(Collectors.toList());\n         }\n-        return List.of();\n+        return new ActionResponse<>(HttpStatus.OK, content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg=="}, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU5MDY4Nw==", "bodyText": "Maybe a follow-up PR then, but we could definitely prepare the actions for that change.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483590687", "createdAt": "2020-09-04T12:42:11Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -27,47 +27,51 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n @Component\n-public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private final ConfigurationAccessor configurationAccessor;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n-        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager);\n+    public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizationManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.configurationAccessor = configurationAccessor;\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        List<LabelValueSelectOption> content = List.of();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            return configurationModels.stream()\n-                       .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                       .map(FieldAccessor::new)\n-                       .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n-                       .flatMap(Optional::stream)\n-                       .map(LabelValueSelectOption::new)\n-                       .collect(Collectors.toList());\n+            content = configurationModels.stream()\n+                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n+                          .map(FieldAccessor::new)\n+                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .flatMap(Optional::stream)\n+                          .map(LabelValueSelectOption::new)\n+                          .collect(Collectors.toList());\n         }\n-        return List.of();\n+        return new ActionResponse<>(HttpStatus.OK, content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg=="}, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwNjgxOQ==", "bodyText": "I have created a new branch ps_function_select_options for the comments because this PR functions with the UI as is.  I will need to make UI changes to update UI fields to render options properly.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483606819", "createdAt": "2020-09-04T13:13:14Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -27,47 +27,51 @@\n import java.util.stream.Collectors;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n @Component\n-public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+public class ProviderConfigSelectCustomFunctionAction extends CustomFunctionAction<List<LabelValueSelectOption>> {\n     private final ConfigurationAccessor configurationAccessor;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n-        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager);\n+    public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizationManager, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) {\n+        super(authorizationManager);\n         this.configurationAccessor = configurationAccessor;\n         this.descriptorMap = descriptorMap;\n     }\n \n     @Override\n-    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+    public ActionResponse<List<LabelValueSelectOption>> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) throws AlertDatabaseConstraintException {\n         String providerName = fieldModel.getDescriptorName();\n         Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        List<LabelValueSelectOption> content = List.of();\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n-            return configurationModels.stream()\n-                       .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                       .map(FieldAccessor::new)\n-                       .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n-                       .flatMap(Optional::stream)\n-                       .map(LabelValueSelectOption::new)\n-                       .collect(Collectors.toList());\n+            content = configurationModels.stream()\n+                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n+                          .map(FieldAccessor::new)\n+                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .flatMap(Optional::stream)\n+                          .map(LabelValueSelectOption::new)\n+                          .collect(Collectors.toList());\n         }\n-        return List.of();\n+        return new ActionResponse<>(HttpStatus.OK, content);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NDM4Mg=="}, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY2NzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxNDoyN1rOHNLPNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoyMDoxNFrOHNLZVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NzY1Mg==", "bodyText": "Does this inherit the @RequestMapping from the sub-class?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483577652", "createdAt": "2020-09-04T12:14:27Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.functions;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.web.common.BaseController;\n+\n+public abstract class AbstractFunctionController<T> extends BaseController {\n+    public static final String API_FUNCTION_URL = CustomFunctionAction.API_FUNCTION_URL;\n+    private final CustomFunctionAction<T> functionAction;\n+\n+    public AbstractFunctionController(CustomFunctionAction<T> functionAction) {\n+        this.functionAction = functionAction;\n+    }\n+\n+    @PostMapping", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU4MDI0NA==", "bodyText": "yes it does.  The PostMapping just makes the controller accept post to the path in the RequestMapping defined in the sub-class that implements this abstract class.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1158#discussion_r483580244", "createdAt": "2020-09-04T12:20:14Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/functions/AbstractFunctionController.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.functions;\n+\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.web.common.BaseController;\n+\n+public abstract class AbstractFunctionController<T> extends BaseController {\n+    public static final String API_FUNCTION_URL = CustomFunctionAction.API_FUNCTION_URL;\n+    private final CustomFunctionAction<T> functionAction;\n+\n+    public AbstractFunctionController(CustomFunctionAction<T> functionAction) {\n+        this.functionAction = functionAction;\n+    }\n+\n+    @PostMapping", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NzY1Mg=="}, "originalCommit": {"oid": "2baa7161c8a41872d577115c34493308286385af"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1729, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}