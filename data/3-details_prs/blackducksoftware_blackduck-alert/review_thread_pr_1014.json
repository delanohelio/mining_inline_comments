{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTU1NzA1", "number": 1014, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyMzozOFrOEEuzUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNDozMVrOEEwjQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzk2NTYyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/ConfigField.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyMzozOFrOGiiUSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyMzozOFrOGiiUSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2NzAxOA==", "bodyText": "The comment should be removed", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438867018", "createdAt": "2020-06-11T15:23:38Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/ConfigField.java", "diffHunk": "@@ -194,22 +195,21 @@ public ConfigField applyValidationFunctions(ConfigValidationFunction... validati\n         return this;\n     }\n \n-    public Collection<String> validate(FieldValueModel fieldToValidate, FieldModel fieldModel) {\n+    public ValidationResult validate(FieldValueModel fieldToValidate, FieldModel fieldModel) {\n         return validate(fieldToValidate, fieldModel, getValidationFunctions());\n     }\n \n-    private Collection<String> validate(FieldValueModel fieldToValidate, FieldModel fieldModel, List<ConfigValidationFunction> validationFunctions) {\n-        Collection<String> errors = new LinkedList<>();\n-        validateRequiredField(fieldToValidate, errors);\n-        validateLength(fieldToValidate, errors);\n-        if (errors.isEmpty()) {\n+    private ValidationResult validate(FieldValueModel fieldToValidate, FieldModel fieldModel, List<ConfigValidationFunction> validationFunctions) {\n+        ValidationResult errors = ValidationResult.of(validateRequiredField(fieldToValidate), validateLength(fieldToValidate));\n+\n+        if (!errors.hasErrors()) {\n             for (ConfigValidationFunction validation : validationFunctions) {\n                 if (null != validation) {\n-                    errors.addAll(validation.apply(fieldToValidate, fieldModel));\n+                    //errors.addAll(validation.apply(fieldToValidate, fieldModel));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzk3NjQ4OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyNjoyNVrOGiibsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyNjoyNVrOGiibsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg2ODkxMg==", "bodyText": "It might be nice to update the variable name to validationResult.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438868912", "createdAt": "2020-06-11T15:26:25Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java", "diffHunk": "@@ -151,13 +150,13 @@ public void unRegisterTarget(String targetKey) throws AlertException {\n             if (validationFunction.isPresent()) {\n                 writeFile(tempFilename, fileResource);\n                 File fileToValidate = filePersistenceUtil.createUploadsFile(tempFilename);\n-                Collection<String> errors = validationFunction.get().apply(fileToValidate);\n+                ValidationResult errors = validationFunction.get().apply(fileToValidate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzk5NTU1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNToyOTo0MFrOGiioAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozMTo1OVrOGiixWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MjA2NA==", "bodyText": "A stream would work nicely here. You can use Stream.of (or something similar) on the array validationResults and then use the map method to convert the list to errors.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438872064", "createdAt": "2020-06-11T15:29:40Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.validators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ValidationResult {\n+\n+    private Collection<String> errors;\n+\n+    private ValidationResult() {\n+        this.errors = List.of();\n+    }\n+\n+    private ValidationResult(Collection<String> errors) {\n+        this.errors = errors;\n+    }\n+\n+    public Collection<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public boolean hasErrors() {\n+        return !errors.isEmpty();\n+    }\n+\n+    public String combineErrorMessages() {\n+        return StringUtils.join(errors, \", \");\n+    }\n+\n+    public static ValidationResult of() {\n+        return new ValidationResult();\n+    }\n+\n+    public static ValidationResult of(Collection<String> errors) {\n+        return new ValidationResult(errors);\n+    }\n+\n+    public static ValidationResult of(String... errors) {\n+        return new ValidationResult(Arrays.asList(errors));\n+    }\n+\n+    public static ValidationResult of(ValidationResult... validationResults) {\n+        Collection<String> newValidationResult = new ArrayList(validationResults.length);\n+        for (ValidationResult result : validationResults) {\n+            newValidationResult.addAll(result.getErrors());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3NDQ1OA==", "bodyText": "Arrays.stream(...)\nStream.of(...) calls that method, I'm not sure if we have convention on which one we prefer.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438874458", "createdAt": "2020-06-11T15:31:59Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.validators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ValidationResult {\n+\n+    private Collection<String> errors;\n+\n+    private ValidationResult() {\n+        this.errors = List.of();\n+    }\n+\n+    private ValidationResult(Collection<String> errors) {\n+        this.errors = errors;\n+    }\n+\n+    public Collection<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public boolean hasErrors() {\n+        return !errors.isEmpty();\n+    }\n+\n+    public String combineErrorMessages() {\n+        return StringUtils.join(errors, \", \");\n+    }\n+\n+    public static ValidationResult of() {\n+        return new ValidationResult();\n+    }\n+\n+    public static ValidationResult of(Collection<String> errors) {\n+        return new ValidationResult(errors);\n+    }\n+\n+    public static ValidationResult of(String... errors) {\n+        return new ValidationResult(Arrays.asList(errors));\n+    }\n+\n+    public static ValidationResult of(ValidationResult... validationResults) {\n+        Collection<String> newValidationResult = new ArrayList(validationResults.length);\n+        for (ValidationResult result : validationResults) {\n+            newValidationResult.addAll(result.getErrors());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MjA2NA=="}, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzk5OTIzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozMDoxOFrOGiiqhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNTozMDoxOFrOGiiqhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg3MjcwOQ==", "bodyText": "As a team convention, we tend to put public static methods above the constructor(s).", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438872709", "createdAt": "2020-06-11T15:30:18Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.validators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ValidationResult {\n+\n+    private Collection<String> errors;\n+\n+    private ValidationResult() {\n+        this.errors = List.of();\n+    }\n+\n+    private ValidationResult(Collection<String> errors) {\n+        this.errors = errors;\n+    }\n+\n+    public Collection<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public boolean hasErrors() {\n+        return !errors.isEmpty();\n+    }\n+\n+    public String combineErrorMessages() {\n+        return StringUtils.join(errors, \", \");\n+    }\n+\n+    public static ValidationResult of() {\n+        return new ValidationResult();\n+    }\n+\n+    public static ValidationResult of(Collection<String> errors) {\n+        return new ValidationResult(errors);\n+    }\n+\n+    public static ValidationResult of(String... errors) {\n+        return new ValidationResult(Arrays.asList(errors));\n+    }\n+\n+    public static ValidationResult of(ValidationResult... validationResults) {\n+        Collection<String> newValidationResult = new ArrayList(validationResults.length);\n+        for (ValidationResult result : validationResults) {\n+            newValidationResult.addAll(result.getErrors());\n+        }\n+        return new ValidationResult(newValidationResult);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDI1MDA0OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyMzo1M1rOGilK9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyMzo1M1rOGilK9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMzc4MQ==", "bodyText": "Can we change the name of the is method to success()?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438913781", "createdAt": "2020-06-11T16:23:53Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.validators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ValidationResult {\n+\n+    private Collection<String> errors;\n+\n+    private ValidationResult() {\n+        this.errors = List.of();\n+    }\n+\n+    private ValidationResult(Collection<String> errors) {\n+        this.errors = errors;\n+    }\n+\n+    public Collection<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public boolean hasErrors() {\n+        return !errors.isEmpty();\n+    }\n+\n+    public String combineErrorMessages() {\n+        return StringUtils.join(errors, \", \");\n+    }\n+\n+    public static ValidationResult of() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDI1MTEzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNDoxM1rOGilLwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNDoxM1rOGilLwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxMzk4NA==", "bodyText": "Can we change the name of the is method to errors(Collection<String> errors)?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438913984", "createdAt": "2020-06-11T16:24:13Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.validators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ValidationResult {\n+\n+    private Collection<String> errors;\n+\n+    private ValidationResult() {\n+        this.errors = List.of();\n+    }\n+\n+    private ValidationResult(Collection<String> errors) {\n+        this.errors = errors;\n+    }\n+\n+    public Collection<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public boolean hasErrors() {\n+        return !errors.isEmpty();\n+    }\n+\n+    public String combineErrorMessages() {\n+        return StringUtils.join(errors, \", \");\n+    }\n+\n+    public static ValidationResult of() {\n+        return new ValidationResult();\n+    }\n+\n+    public static ValidationResult of(Collection<String> errors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDI1MjE5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNDozMVrOGilMcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNDozMVrOGilMcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNDE2Mw==", "bodyText": "Can we change the name of the is method to error(String... errors)?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1014#discussion_r438914163", "createdAt": "2020-06-11T16:24:31Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.validators;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+public class ValidationResult {\n+\n+    private Collection<String> errors;\n+\n+    private ValidationResult() {\n+        this.errors = List.of();\n+    }\n+\n+    private ValidationResult(Collection<String> errors) {\n+        this.errors = errors;\n+    }\n+\n+    public Collection<String> getErrors() {\n+        return errors;\n+    }\n+\n+    public boolean hasErrors() {\n+        return !errors.isEmpty();\n+    }\n+\n+    public String combineErrorMessages() {\n+        return StringUtils.join(errors, \", \");\n+    }\n+\n+    public static ValidationResult of() {\n+        return new ValidationResult();\n+    }\n+\n+    public static ValidationResult of(Collection<String> errors) {\n+        return new ValidationResult(errors);\n+    }\n+\n+    public static ValidationResult of(String... errors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb9a2d2a503dd9a597182d54869d1c9247dc406b"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1814, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}