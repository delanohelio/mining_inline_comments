{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMTYwMTcw", "number": 1009, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNTo1MFrOEDekOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyOTowOFrOEDeqXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDgxOTc3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyNTo1MFrOGghHyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTowNTo1M1rOGgi79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDI4Mw==", "bodyText": "We also need the configuredFields from this set on the new instance. You could do this through the constructor or you could do something like this:\npublic ConfigurationModelMutable createMutableCopy() {\n    ConfigurationModelMutable mutableCopy = new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);\n    mutableCopy.getConfiguredFields().putAll(configuredFields);\n    return mutableCopy;\n}\nor (not 100% sure this will work)\npublic ConfigurationModelMutable createMutableCopy() {\n    ConfigurationModelMutable mutableCopy = new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);\n    mutableCopy.configuredFields = configuredFields;\n    return mutableCopy;\n}\nEdit: I forgot you cannot actually do it through the constructor because the super-class owns configuredFields.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436750283", "createdAt": "2020-06-08T14:25:50Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModel.java", "diffHunk": "@@ -88,20 +91,7 @@ public ConfigContextEnum getDescriptorContext() {\n         return new HashMap<>(configuredFields);\n     }\n \n-    public void put(ConfigurationFieldModel configFieldModel) {\n-        Objects.requireNonNull(configFieldModel);\n-        String fieldKey = configFieldModel.getFieldKey();\n-        Objects.requireNonNull(fieldKey);\n-        if (configuredFields.containsKey(fieldKey)) {\n-            ConfigurationFieldModel oldConfigField = configuredFields.get(fieldKey);\n-            List<String> values = combine(oldConfigField, configFieldModel);\n-            oldConfigField.setFieldValues(values);\n-        } else {\n-            configuredFields.put(fieldKey, configFieldModel);\n-        }\n-    }\n-\n-    private List<String> combine(ConfigurationFieldModel first, ConfigurationFieldModel second) {\n-        return Stream.concat(first.getFieldValues().stream(), second.getFieldValues().stream()).collect(Collectors.toList());\n+    public ConfigurationModelMutable createMutableCopy() {\n+        return new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc4MDAyMg==", "bodyText": "I like the putAll approach better.  The equals operator would assign the mutable to the same object reference as the immutable instance.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436780022", "createdAt": "2020-06-08T15:05:53Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModel.java", "diffHunk": "@@ -88,20 +91,7 @@ public ConfigContextEnum getDescriptorContext() {\n         return new HashMap<>(configuredFields);\n     }\n \n-    public void put(ConfigurationFieldModel configFieldModel) {\n-        Objects.requireNonNull(configFieldModel);\n-        String fieldKey = configFieldModel.getFieldKey();\n-        Objects.requireNonNull(fieldKey);\n-        if (configuredFields.containsKey(fieldKey)) {\n-            ConfigurationFieldModel oldConfigField = configuredFields.get(fieldKey);\n-            List<String> values = combine(oldConfigField, configFieldModel);\n-            oldConfigField.setFieldValues(values);\n-        } else {\n-            configuredFields.put(fieldKey, configFieldModel);\n-        }\n-    }\n-\n-    private List<String> combine(ConfigurationFieldModel first, ConfigurationFieldModel second) {\n-        return Stream.concat(first.getFieldValues().stream(), second.getFieldValues().stream()).collect(Collectors.toList());\n+    public ConfigurationModelMutable createMutableCopy() {\n+        return new ConfigurationModelMutable(descriptorId, configurationId, createdAt, lastUpdated, context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1MDI4Mw=="}, "originalCommit": {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDgzNTUxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModelTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoyOTowOFrOGghRkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDozNzoxN1rOGghnjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ==", "bodyText": "Let's add a configuredField or two to configurationModel to make sure that the fields are copied.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436752785", "createdAt": "2020-06-08T14:29:08Z", "author": {"login": "gkillough"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModelTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.synopsys.integration.alert.common.persistence.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+\n+public class ConfigurationModelTest {\n+    private final Long descriptorId = 1L;\n+    private final Long configurationId = 2L;\n+    private final String createdAt = \"createdAt-test\";\n+    private final String lastUpdated = \"lastUpdated-test\";\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldKey = \"fieldKey\";\n+\n+    @Test\n+    public void getDescriptorIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(descriptorId, configurationModel.getDescriptorId());\n+    }\n+\n+    @Test\n+    public void getConfigurationIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configurationId, configurationModel.getConfigurationId());\n+    }\n+\n+    @Test\n+    public void getCreatedAtTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(createdAt, configurationModel.getCreatedAt());\n+    }\n+\n+    @Test\n+    public void getLastUpdatedTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(lastUpdated, configurationModel.getLastUpdated());\n+    }\n+\n+    @Test\n+    public void getDescriptorContextTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configContextEnum, configurationModel.getDescriptorContext());\n+    }\n+\n+    @Test\n+    public void getFieldTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertFalse(configurationModel.getField(fieldKey).isPresent());\n+    }\n+\n+    @Test\n+    public void getCopyOfFieldListTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfFieldList().isEmpty());\n+    }\n+\n+    @Test\n+    public void getCopyOfKeyToFieldMapTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfKeyToFieldMap().isEmpty());\n+    }\n+\n+    @Test\n+    public void createMutableCopyTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NDU0Mg==", "bodyText": "If all of its constructors create the Map maybe we should consider passing it as a parameter in one of them.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436754542", "createdAt": "2020-06-08T14:31:39Z", "author": {"login": "gkillough"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModelTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.synopsys.integration.alert.common.persistence.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+\n+public class ConfigurationModelTest {\n+    private final Long descriptorId = 1L;\n+    private final Long configurationId = 2L;\n+    private final String createdAt = \"createdAt-test\";\n+    private final String lastUpdated = \"lastUpdated-test\";\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldKey = \"fieldKey\";\n+\n+    @Test\n+    public void getDescriptorIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(descriptorId, configurationModel.getDescriptorId());\n+    }\n+\n+    @Test\n+    public void getConfigurationIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configurationId, configurationModel.getConfigurationId());\n+    }\n+\n+    @Test\n+    public void getCreatedAtTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(createdAt, configurationModel.getCreatedAt());\n+    }\n+\n+    @Test\n+    public void getLastUpdatedTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(lastUpdated, configurationModel.getLastUpdated());\n+    }\n+\n+    @Test\n+    public void getDescriptorContextTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configContextEnum, configurationModel.getDescriptorContext());\n+    }\n+\n+    @Test\n+    public void getFieldTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertFalse(configurationModel.getField(fieldKey).isPresent());\n+    }\n+\n+    @Test\n+    public void getCopyOfFieldListTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfFieldList().isEmpty());\n+    }\n+\n+    @Test\n+    public void getCopyOfKeyToFieldMapTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfKeyToFieldMap().isEmpty());\n+    }\n+\n+    @Test\n+    public void createMutableCopyTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ=="}, "originalCommit": {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1NTYzOQ==", "bodyText": "configurationModel does not have access to the put method so it cannot add a configuredField. I would be able to add a field on the configurationModelMutable but that test would be covered in ConfigurationModelMutableTest.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436755639", "createdAt": "2020-06-08T14:33:21Z", "author": {"login": "ChomickiM"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModelTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.synopsys.integration.alert.common.persistence.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+\n+public class ConfigurationModelTest {\n+    private final Long descriptorId = 1L;\n+    private final Long configurationId = 2L;\n+    private final String createdAt = \"createdAt-test\";\n+    private final String lastUpdated = \"lastUpdated-test\";\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldKey = \"fieldKey\";\n+\n+    @Test\n+    public void getDescriptorIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(descriptorId, configurationModel.getDescriptorId());\n+    }\n+\n+    @Test\n+    public void getConfigurationIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configurationId, configurationModel.getConfigurationId());\n+    }\n+\n+    @Test\n+    public void getCreatedAtTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(createdAt, configurationModel.getCreatedAt());\n+    }\n+\n+    @Test\n+    public void getLastUpdatedTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(lastUpdated, configurationModel.getLastUpdated());\n+    }\n+\n+    @Test\n+    public void getDescriptorContextTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configContextEnum, configurationModel.getDescriptorContext());\n+    }\n+\n+    @Test\n+    public void getFieldTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertFalse(configurationModel.getField(fieldKey).isPresent());\n+    }\n+\n+    @Test\n+    public void getCopyOfFieldListTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfFieldList().isEmpty());\n+    }\n+\n+    @Test\n+    public void getCopyOfKeyToFieldMapTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfKeyToFieldMap().isEmpty());\n+    }\n+\n+    @Test\n+    public void createMutableCopyTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ=="}, "originalCommit": {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1ODQxNQ==", "bodyText": "Ok, that makes me think we will need to update the constructor(s) in ConfigurationModel then.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1009#discussion_r436758415", "createdAt": "2020-06-08T14:37:17Z", "author": {"login": "gkillough"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModelTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package com.synopsys.integration.alert.common.persistence.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+\n+public class ConfigurationModelTest {\n+    private final Long descriptorId = 1L;\n+    private final Long configurationId = 2L;\n+    private final String createdAt = \"createdAt-test\";\n+    private final String lastUpdated = \"lastUpdated-test\";\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldKey = \"fieldKey\";\n+\n+    @Test\n+    public void getDescriptorIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(descriptorId, configurationModel.getDescriptorId());\n+    }\n+\n+    @Test\n+    public void getConfigurationIdTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configurationId, configurationModel.getConfigurationId());\n+    }\n+\n+    @Test\n+    public void getCreatedAtTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(createdAt, configurationModel.getCreatedAt());\n+    }\n+\n+    @Test\n+    public void getLastUpdatedTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(lastUpdated, configurationModel.getLastUpdated());\n+    }\n+\n+    @Test\n+    public void getDescriptorContextTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertEquals(configContextEnum, configurationModel.getDescriptorContext());\n+    }\n+\n+    @Test\n+    public void getFieldTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertFalse(configurationModel.getField(fieldKey).isPresent());\n+    }\n+\n+    @Test\n+    public void getCopyOfFieldListTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfFieldList().isEmpty());\n+    }\n+\n+    @Test\n+    public void getCopyOfKeyToFieldMapTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        assertTrue(configurationModel.getCopyOfKeyToFieldMap().isEmpty());\n+    }\n+\n+    @Test\n+    public void createMutableCopyTest() {\n+        ConfigurationModel configurationModel = createConfigurationModel();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc1Mjc4NQ=="}, "originalCommit": {"oid": "aa1e9b43d31f915c4b4ea133e52c9af8f9ac35ca"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1811, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}