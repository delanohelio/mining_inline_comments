{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4MTA3NTQy", "number": 1250, "title": "On demand data", "bodyText": "Retrieve the Black Duck data on demand, instead of syncing the Black Duck data with the Alert database\n\nChanges proposed in this pull request:\n\nLeave the old DefaultProviderDataAccessor in place in case we need to switch back to it\nAdd a new BlackDuckProviderDataAccessor to replace the DefaultProviderDataAccessor\nThe BlackDuckProviderDataAccessor will retrieve the Project and User data from Black Duck as needed", "createdAt": "2020-11-09T23:30:22Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250", "merged": true, "mergeCommit": {"oid": "b9fe85166815178bbad47d6848cc4523756e471b"}, "closed": true, "closedAt": "2020-11-10T18:22:40Z", "author": {"login": "jamesrichard91"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda820lgH2gAyNTE4MTA3NTQyOjNjN2RhNzA3ZGIyMjQ1M2VlZmVjOTAzMWYxOTBmMDRhMGQwMzJkNDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbME9UAH2gAyNTE4MTA3NTQyOmFmODgzZTExYjM5OWYwMGY2MjQzNjc4Y2NhZTVkN2ZkODU5ZmE5ZmU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3c7da707db22453eefec9031f190f04a0d032d43", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3c7da707db22453eefec9031f190f04a0d032d43", "committedDate": "2020-11-09T22:53:27Z", "message": "Refactor(Java): Updating Alert to retrieve the Black Duck data as needed instead of syncing the project/user data with the database."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf4addfb2e21b23502c07211cab97d0afc3d7e8", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/acf4addfb2e21b23502c07211cab97d0afc3d7e8", "committedDate": "2020-11-09T23:20:41Z", "message": "Merge branch 'master' into jr_on_demand_data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0f336df3339ac89bed293d17a33b3edccde4ca78", "committedDate": "2020-11-09T23:31:30Z", "message": "Refactor: Removing unused static variables."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MTI0NTAy", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527124502", "createdAt": "2020-11-10T11:50:23Z", "commit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1MDoyM1rOHwZBFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMTo1MDoyM1rOHwZBFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDUwMzU3Mw==", "bodyText": "Can this class be deleted since the BlackDuckProviderDataAccessor now exists.  And in the past DefaultProviderDataAccessor was the only ProviderDataAccessor implementation once we removed support for Polaris.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520503573", "createdAt": "2020-11-10T11:50:23Z", "author": {"login": "psantos1113"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -54,7 +53,8 @@\n \n @Component\n @Transactional\n-public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n+public class DefaultProviderDataAccessor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjA5Njc2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527209676", "createdAt": "2020-11-10T13:40:27Z", "commit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MDoyN1rOHwc_Nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MDoyN1rOHwc_Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2ODYzMQ==", "bodyText": "providerConfigID and providerConfigId are both used in this class. We should stick to one capitalization strategy.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520568631", "createdAt": "2020-11-10T13:40:27Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java", "diffHunk": "@@ -93,7 +93,7 @@ public FieldUtility updateEmailAddresses(Long providerConfigId, MessageContentGr\n         return new FieldUtility(fieldMap);\n     }\n \n-    public Set<String> getEmailAddressesForProject(ProviderProject project, boolean projectOwnerOnly) {\n+    public Set<String> getEmailAddressesForProject(Long providerConfigID, ProviderProject project, boolean projectOwnerOnly) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjExMjY1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527211265", "createdAt": "2020-11-10T13:42:09Z", "commit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MjowOVrOHwdD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxMzo0MjowOVrOHwdD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU2OTg0Mw==", "bodyText": "We should delete all of these commented annotations and worry about re-adding them if we ever want to implement the interface again.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520569843", "createdAt": "2020-11-10T13:42:09Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -73,7 +73,7 @@ public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepo\n         this.configurationAccessor = configurationAccessor;\n     }\n \n-    @Override\n+    //    @Override", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjEzODgx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527213881", "createdAt": "2020-11-10T13:44:51Z", "commit": {"oid": "0f336df3339ac89bed293d17a33b3edccde4ca78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9745b6c9b99777a1ec2d02c9fa7a84a6f5506378", "committedDate": "2020-11-10T14:11:42Z", "message": "Refactor (Java): removing commented annotations, fixing capitalization inconsistencies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MjQ3MTcz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527247173", "createdAt": "2020-11-10T14:18:50Z", "commit": {"oid": "9745b6c9b99777a1ec2d02c9fa7a84a6f5506378"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "102d9395a6e96c3e4cd72a3fb118a6e25e47b734", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/102d9395a6e96c3e4cd72a3fb118a6e25e47b734", "committedDate": "2020-11-10T14:23:56Z", "message": "Adding deprecated annotation to DefaultProviderDataAccessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9a7a52a086c5e9aa07cbeff150c5a658a96bc97b", "committedDate": "2020-11-10T14:34:53Z", "message": "Merge branch 'master' into jr_on_demand_data"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzE4MTg0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527318184", "createdAt": "2020-11-10T15:26:16Z", "commit": {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNjoxNlrOHwh7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyNjoxNlrOHwh7NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY0OTUyNA==", "bodyText": "For API's we have a response NOT_IMPLEMENTED. is there some similar runtime exception we could throw here?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520649524", "createdAt": "2020-11-10T15:26:16Z", "author": {"login": "bamandel"}, "path": "provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.alert.provider.blackduck.factory.BlackDuckPropertiesFactory;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+import com.synopsys.integration.rest.HttpUrl;\n+\n+@Component\n+public class BlackDuckProviderDataAccessor implements ProviderDataAccessor {\n+    private final IntLogger logger = new Slf4jIntLogger(LoggerFactory.getLogger(BlackDuckProviderDataAccessor.class));\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final BlackDuckPropertiesFactory blackDuckPropertiesFactory;\n+\n+    @Autowired\n+    public BlackDuckProviderDataAccessor(ConfigurationAccessor configurationAccessor, BlackDuckPropertiesFactory blackDuckPropertiesFactory) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.blackDuckPropertiesFactory = blackDuckPropertiesFactory;\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getProviderConfigurationByName(providerConfigName);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider '%s'. %s\", providerConfigName, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigId(Long providerConfigId) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getConfigurationById(providerConfigId);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider with id '%s'. %s\", providerConfigId, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    private List<ProviderProject> getProjectsForProvider(ConfigurationModel blackDuckConfigurationModel) throws IntegrationException {\n+        BlackDuckProperties properties = blackDuckPropertiesFactory.createProperties(blackDuckConfigurationModel);\n+        BlackDuckHttpClient blackDuckHttpClient = properties.createBlackDuckHttpClient(logger);\n+        BlackDuckServicesFactory blackDuckServicesFactory = properties.createBlackDuckServicesFactory(blackDuckHttpClient, logger);\n+        ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+        List<ProjectView> allProjects = projectService.getAllProjects();\n+        return convertBlackDuckProjects(allProjects, blackDuckServicesFactory.getBlackDuckService());\n+    }\n+\n+    @Override\n+    public void deleteProjects(Collection<ProviderProject> providerProjects) {\n+        //ignored since we are not using the database", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b"}, "originalPosition": 109}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzIxMTAx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527321101", "createdAt": "2020-11-10T15:28:59Z", "commit": {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyODo1OVrOHwiDhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNToyODo1OVrOHwiDhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY1MTY1NQ==", "bodyText": "All other methods return a List. Why is this one specifically a set? I feel we should return all lists or all sets to be consistent", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#discussion_r520651655", "createdAt": "2020-11-10T15:28:59Z", "author": {"login": "bamandel"}, "path": "provider/src/main/java/com/synopsys/integration/alert/database/api/BlackDuckProviderDataAccessor.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.alert.provider.blackduck.factory.BlackDuckPropertiesFactory;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+import com.synopsys.integration.rest.HttpUrl;\n+\n+@Component\n+public class BlackDuckProviderDataAccessor implements ProviderDataAccessor {\n+    private final IntLogger logger = new Slf4jIntLogger(LoggerFactory.getLogger(BlackDuckProviderDataAccessor.class));\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final BlackDuckPropertiesFactory blackDuckPropertiesFactory;\n+\n+    @Autowired\n+    public BlackDuckProviderDataAccessor(ConfigurationAccessor configurationAccessor, BlackDuckPropertiesFactory blackDuckPropertiesFactory) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.blackDuckPropertiesFactory = blackDuckPropertiesFactory;\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getProviderConfigurationByName(providerConfigName);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider '%s'. %s\", providerConfigName, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    @Override\n+    public List<ProviderProject> getProjectsByProviderConfigId(Long providerConfigId) {\n+        try {\n+            Optional<ConfigurationModel> providerConfigOptional = configurationAccessor.getConfigurationById(providerConfigId);\n+            if (providerConfigOptional.isPresent()) {\n+                return getProjectsForProvider(providerConfigOptional.get());\n+            }\n+        } catch (IntegrationException e) {\n+            logger.error(String.format(\"Could not get the project for the provider with id '%s'. %s\", providerConfigId, e.getMessage()));\n+            logger.debug(e.getMessage(), e);\n+        }\n+        return List.of();\n+    }\n+\n+    private List<ProviderProject> getProjectsForProvider(ConfigurationModel blackDuckConfigurationModel) throws IntegrationException {\n+        BlackDuckProperties properties = blackDuckPropertiesFactory.createProperties(blackDuckConfigurationModel);\n+        BlackDuckHttpClient blackDuckHttpClient = properties.createBlackDuckHttpClient(logger);\n+        BlackDuckServicesFactory blackDuckServicesFactory = properties.createBlackDuckServicesFactory(blackDuckHttpClient, logger);\n+        ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+        List<ProjectView> allProjects = projectService.getAllProjects();\n+        return convertBlackDuckProjects(allProjects, blackDuckServicesFactory.getBlackDuckService());\n+    }\n+\n+    @Override\n+    public void deleteProjects(Collection<ProviderProject> providerProjects) {\n+        //ignored since we are not using the database\n+    }\n+\n+    @Override\n+    public Set<String> getEmailAddressesForProjectHref(Long providerConfigId, String projectHref) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b"}, "originalPosition": 113}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzI4MzUz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527328353", "createdAt": "2020-11-10T15:35:48Z", "commit": {"oid": "9a7a52a086c5e9aa07cbeff150c5a658a96bc97b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cb90890ebefa1667f01e3f67a3f4dcd67c63bb", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/35cb90890ebefa1667f01e3f67a3f4dcd67c63bb", "committedDate": "2020-11-10T16:00:39Z", "message": "Updating the ProviderDataAccessorTestIT to resolve compilation errors. Adding TODO to update the tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e750bd65525a17799925faa3b86d3e923f22bff", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0e750bd65525a17799925faa3b86d3e923f22bff", "committedDate": "2020-11-10T16:08:32Z", "message": "Fixing test compilation error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3MzgzMjc3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1250#pullrequestreview-527383277", "createdAt": "2020-11-10T16:28:58Z", "commit": {"oid": "0e750bd65525a17799925faa3b86d3e923f22bff"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af883e11b399f00f6243678ccae5d7fd859fa9fe", "author": {"user": {"login": "jamesrichard91", "name": "James Richard"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/af883e11b399f00f6243678ccae5d7fd859fa9fe", "committedDate": "2020-11-10T16:37:28Z", "message": "Moving the BlackDuckProviderDataAccessor"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2890, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}