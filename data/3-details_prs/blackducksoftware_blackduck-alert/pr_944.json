{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDg3NzAz", "number": 944, "title": "Add authentication test", "bodyText": "Remove the destinationName query parameter and the testFieldLabel.\nRemove the role mapping for the admin, job manager, and user.  Roles are defined in the user management section.\nMoved the SAML role attribute mapping under the SAML configuration.\nAbility to add a custom set of fields for a test dialog in the global config.\nAdd test action for LDAP and SAML authentication.\nFixed an issue with LDAP authentication that prevented testing.", "createdAt": "2020-04-09T15:21:44Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944", "merged": true, "mergeCommit": {"oid": "a772f18389eefc3430b0e26e7a3ebaf264258d3a"}, "closed": true, "closedAt": "2020-04-09T18:30:47Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcU_acMAH2gAyNDAxNDg3NzAzOjM3OTlmZmYzNjJlMjhlN2U2YzhkOWNjMWMzNWVlMWNmZTRhNjE5YjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWAwxIgH2gAyNDAxNDg3NzAzOmM4ZjRiNjU2MjEyYWY1MjRjZTIwZWE5MTY2MmI0MWRhOGEwNTk3NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3799fff362e28e7e6c8d9cc1c35ee1cfe4a619b5", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3799fff362e28e7e6c8d9cc1c35ee1cfe4a619b5", "committedDate": "2020-04-06T14:17:28Z", "message": "feat: Add generic test fields to descriptor."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a5a925a8a5ac9a3a2184ca3fc6801ddef3c84b44", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a5a925a8a5ac9a3a2184ca3fc6801ddef3c84b44", "committedDate": "2020-04-06T14:17:46Z", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0dd7291527cd5ed19e0d56e8d8a9c632b6d0dc9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f0dd7291527cd5ed19e0d56e8d8a9c632b6d0dc9", "committedDate": "2020-04-06T20:46:40Z", "message": "feat: Test dialog for authentication."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1547846788cb8f1d03d9507ca1e2c1aecf9ee88", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c1547846788cb8f1d03d9507ca1e2c1aecf9ee88", "committedDate": "2020-04-07T13:39:54Z", "message": "refactor: Add a field model to the test action."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb95c2641c712e89f4b22d265d10213295bae5f9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/eb95c2641c712e89f4b22d265d10213295bae5f9", "committedDate": "2020-04-07T20:36:48Z", "message": "fix: Fix the provider to invoke other authentication performers if there is an exception."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2458bf39375eac2a9186c88749781864e642b41c", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2458bf39375eac2a9186c88749781864e642b41c", "committedDate": "2020-04-07T20:37:53Z", "message": "feat: Invoke LDAP authentication test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16f02c982f5f8ccdf790ba92552ceb046ae123c9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/16f02c982f5f8ccdf790ba92552ceb046ae123c9", "committedDate": "2020-04-08T14:15:39Z", "message": "feat: LDAP testing of existing config."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae93a4de5b84745f02e5b2aaa10d96b474578009", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ae93a4de5b84745f02e5b2aaa10d96b474578009", "committedDate": "2020-04-08T21:21:47Z", "message": "feat: Test SAML configuration and re-initialize with database values."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cc0be1c6e5ec4b25fbb8846f6888de92981d75a", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0cc0be1c6e5ec4b25fbb8846f6888de92981d75a", "committedDate": "2020-04-09T12:29:33Z", "message": "refactor: Use the initialize method added to SAMLManager."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1870307f6dd750d3d16042a6ba6788af7d10d2cb", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1870307f6dd750d3d16042a6ba6788af7d10d2cb", "committedDate": "2020-04-09T12:43:23Z", "message": "refactor: Remove the createTestLabel method of UIConfig."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c7cd2b27e59b13e837ad7e5deaee70c007d089f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0c7cd2b27e59b13e837ad7e5deaee70c007d089f", "committedDate": "2020-04-09T13:00:45Z", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57c024c284b82d05a08b4191bde97c05a393ce3e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/57c024c284b82d05a08b4191bde97c05a393ce3e", "committedDate": "2020-04-09T13:16:58Z", "message": "chore: Fix the URL for the SonarCloud badge."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac28786dbac48aedd357b12e4a0ec64aae27c65e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ac28786dbac48aedd357b12e4a0ec64aae27c65e", "committedDate": "2020-04-09T13:32:51Z", "message": "fix: Fix failing test due to versioning of Alert."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f23fb44c0295cabae524799e550d4966d0ae905f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f23fb44c0295cabae524799e550d4966d0ae905f", "committedDate": "2020-04-09T13:37:42Z", "message": "chore: Remove extra character to fix URL."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ddb5a2831a473443be6ec27a74214f6bcb895a", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/05ddb5a2831a473443be6ec27a74214f6bcb895a", "committedDate": "2020-04-09T14:00:51Z", "message": "refactor: Fix SonarCloud issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "add0a5bb9d8a14e062136e0098a428e1c3a9e9e1", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/add0a5bb9d8a14e062136e0098a428e1c3a9e9e1", "committedDate": "2020-04-09T14:30:41Z", "message": "refactor: Clean up remaining code smells."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5fbb5a93a42ce31453463f92448a5548ca868fec", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5fbb5a93a42ce31453463f92448a5548ca868fec", "committedDate": "2020-04-09T15:07:02Z", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTIzNzk4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390923798", "createdAt": "2020-04-09T15:57:43Z", "commit": {"oid": "5fbb5a93a42ce31453463f92448a5548ca868fec"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1Nzo0M1rOGDfEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1Nzo0M1rOGDfEzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwODA0NA==", "bodyText": "This should be combined into one error log message.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406308044", "createdAt": "2020-04-09T15:57:43Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,12 +50,19 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        return authenticationPerformers\n-                   .stream()\n-                   .map(authPerformer -> authPerformer.performAuthentication(authentication))\n-                   .flatMap(Optional::stream)\n-                   .findAny()\n-                   .orElse(authentication);\n+        for (AuthenticationPerformer authenticationPerformer : authenticationPerformers) {\n+            try {\n+                Optional<Authentication> completedAuthentication = authenticationPerformer.performAuthentication(authentication);\n+                if (completedAuthentication.isPresent() && completedAuthentication.get().isAuthenticated()) {\n+                    return completedAuthentication.get();\n+                }\n+            } catch (Exception ex) {\n+                logger.info(\"Error with with authentication type {} - cause: {}\", authenticationPerformer.getAuthenticationType(), ex.getMessage());\n+                logger.error(\"Error details: \", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fbb5a93a42ce31453463f92448a5548ca868fec"}, "originalPosition": 35}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28e3de50518ebfbfda268d8a80f99b7c5ca1d91e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/28e3de50518ebfbfda268d8a80f99b7c5ca1d91e", "committedDate": "2020-04-09T16:01:02Z", "message": "Merge remote-tracking branch 'origin/master' into ps_auth_test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b61b9e56fa9e10d9fba8c010115d285998f66a5e", "committedDate": "2020-04-09T16:13:26Z", "message": "refactor: Clean up error message."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTUzNTk3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390953597", "createdAt": "2020-04-09T16:36:01Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozNjowMVrOGDghMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozNjowMVrOGDghMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMTY5OA==", "bodyText": "The name here is misspelled and may not be accurate", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406331698", "createdAt": "2020-04-09T16:36:01Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/jira/cloud/actions/JiraDistributionTestAction.java", "diffHunk": "@@ -56,11 +57,11 @@ public JiraDistributionTestAction(JiraChannel jiraChannel, Gson gson, JiraMessag\n     }\n \n     @Override\n-    public MessageResult testConfig(String jobId, String destination, FieldAccessor fieldAccessor) throws IntegrationException {\n+    public MessageResult testConfig(String jobId, FieldModel fieldModel, FieldAccessor registeredFieldValuesr) throws IntegrationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTU1Mjk0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390955294", "createdAt": "2020-04-09T16:38:16Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozODoxNlrOGDgmXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozODoxNlrOGDgmXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMzAyMw==", "bodyText": "Will we want to say something if both are enabled? Or is that allowed?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406333023", "createdAt": "2020-04-09T16:38:16Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTU3MjU2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390957256", "createdAt": "2020-04-09T16:40:54Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MDo1NFrOGDgsvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MDo1NFrOGDgsvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDY1NA==", "bodyText": "Should we put something in the errorMap here saying an unexpected error occurred?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406334654", "createdAt": "2020-04-09T16:40:54Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTU3NTQ1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390957545", "createdAt": "2020-04-09T16:41:19Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MToxOVrOGDgtmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MToxOVrOGDgtmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDg3Mg==", "bodyText": "Should we put an error here saying an unexpected error occurred?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406334872", "createdAt": "2020-04-09T16:41:19Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);\n+            }\n+        }\n+\n+        if (testMetaDataFile) {\n+            logger.info(\"Testing SAML Metadata File...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createFileProvider();\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata File error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_FILE, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTY2Njky", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390966692", "createdAt": "2020-04-09T16:54:04Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NDowNFrOGDhKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NDowNFrOGDhKPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MjIwNQ==", "bodyText": "Relative path should be absolute", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406342205", "createdAt": "2020-04-09T16:54:04Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/ChannelTestModal.js", "diffHunk": "@@ -1,14 +1,24 @@\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n import { Modal } from 'react-bootstrap';\n-import TextInput from 'field/input/TextInput';\n+import FieldsPanel from 'field/FieldsPanel';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import * as FieldMapping from \"../util/fieldMapping\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTY5MTU3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390969157", "createdAt": "2020-04-09T16:57:12Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NzoxMlrOGDhRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NzoxMlrOGDhRuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0NDEyMA==", "bodyText": "Should destination still be used/exist?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406344120", "createdAt": "2020-04-09T16:57:12Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/ChannelTestModal.js", "diffHunk": "@@ -24,32 +34,37 @@ class ChannelTestModal extends Component {\n     handleSendTestMessage(event) {\n         event.preventDefault();\n         event.stopPropagation();\n-        const { destination } = this.state;\n+        const { destination, testFieldModel } = this.state;\n         const { fieldModel } = this.props;\n-        this.props.sendTestMessage(fieldModel, destination);\n+        const combinedModel = FieldModelUtilities.combineFieldModels(fieldModel, testFieldModel);\n+        if (fieldModel && fieldModel.id) {\n+            combinedModel.id = fieldModel.id;\n+        }\n+        this.props.sendTestMessage(combinedModel, destination);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTcwODYw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390970860", "createdAt": "2020-04-09T16:59:21Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTcxNzY4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390971768", "createdAt": "2020-04-09T17:00:32Z", "commit": {"oid": "5fbb5a93a42ce31453463f92448a5548ca868fec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTc1MDU4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390975058", "createdAt": "2020-04-09T17:05:16Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowNToxN1rOGDhj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowNToxN1rOGDhj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0ODc4Ng==", "bodyText": "Should we clear the authentication after the test?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406348786", "createdAt": "2020-04-09T17:05:17Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 90}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTc3ODI3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390977827", "createdAt": "2020-04-09T17:09:19Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowOToxOVrOGDhsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowOToxOVrOGDhsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MTAxNg==", "bodyText": "You could add .filter(Authentication::isAuthenticated) to avoid chaining methods after a .get().", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406351016", "createdAt": "2020-04-09T17:09:19Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,12 +50,19 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        return authenticationPerformers\n-                   .stream()\n-                   .map(authPerformer -> authPerformer.performAuthentication(authentication))\n-                   .flatMap(Optional::stream)\n-                   .findAny()\n-                   .orElse(authentication);\n+        for (AuthenticationPerformer authenticationPerformer : authenticationPerformers) {\n+            try {\n+                Optional<Authentication> completedAuthentication = authenticationPerformer.performAuthentication(authentication);\n+                if (completedAuthentication.isPresent() && completedAuthentication.get().isAuthenticated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTgwNDYw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390980460", "createdAt": "2020-04-09T17:13:04Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxMzowNFrOGDh0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxMzowNFrOGDh0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MzA4MA==", "bodyText": "It doesn't look like there will ever be an IllegalArgumentException because we catch it in the method called.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406353080", "createdAt": "2020-04-09T17:13:04Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/ldap/LdapManager.java", "diffHunk": "@@ -82,41 +81,45 @@ public boolean isLdapEnabled() {\n         return false;\n     }\n \n-    public ConfigurationModel getCurrentConfiguration() throws AlertDatabaseConstraintException, AlertConfigurationException {\n-        return configurationAccessor.getConfigurationsByDescriptorKey(authenticationDescriptorKey)\n-                   .stream()\n-                   .findFirst()\n-                   .orElseThrow(() -> new AlertConfigurationException(\"Settings configuration missing\"));\n+    public FieldAccessor getCurrentConfiguration() throws AlertDatabaseConstraintException, AlertConfigurationException {\n+        ConfigurationModel configModel = configurationAccessor.getConfigurationsByDescriptorKey(authenticationDescriptorKey)\n+                                             .stream()\n+                                             .findFirst()\n+                                             .orElseThrow(() -> new AlertConfigurationException(\"Settings configuration missing\"));\n+        return new FieldAccessor(configModel.getCopyOfKeyToFieldMap());\n     }\n \n-    public LdapAuthenticationProvider getAuthenticationProvider() throws AlertConfigurationException {\n-        updateContext();\n-        return authenticationProvider;\n+    public Optional<LdapAuthenticationProvider> getAuthenticationProvider() throws AlertConfigurationException {\n+        try {\n+            FieldAccessor fieldAccessor = getCurrentConfiguration();\n+            return createAuthProvider(fieldAccessor);\n+        } catch (IllegalArgumentException | AlertDatabaseConstraintException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTgxNzUz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390981753", "createdAt": "2020-04-09T17:14:59Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTg3MDAy", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#pullrequestreview-390987002", "createdAt": "2020-04-09T17:22:40Z", "commit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8f4b656212af524ce20ea91662b41da8a059764", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c8f4b656212af524ce20ea91662b41da8a059764", "committedDate": "2020-04-09T18:25:41Z", "message": "refactor: Implement latest PR feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2676, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}