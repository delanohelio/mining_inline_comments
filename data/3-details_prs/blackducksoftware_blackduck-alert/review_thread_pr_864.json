{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3OTcwOTMx", "number": 864, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNDoxN1rODhrdwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0ODozNFrODhsL-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQxNzI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/factories/BlackDuckTaskFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNDoxN1rOFsjIsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNDozNVrOFsjJIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1NzMzMQ==", "bodyText": "We want to get rid of the getter/setter for properties and pass them in through the constructor.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/864#discussion_r382257331", "createdAt": "2020-02-20T21:04:17Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/factories/BlackDuckTaskFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.factories;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.FilePersistenceUtil;\n+import com.synopsys.integration.alert.common.provider.ProviderProperties;\n+import com.synopsys.integration.alert.common.provider.lifecycle.ProviderTask;\n+import com.synopsys.integration.alert.common.provider.lifecycle.ProviderTaskFactory;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderKey;\n+import com.synopsys.integration.alert.provider.blackduck.tasks.BlackDuckAccumulator;\n+import com.synopsys.integration.alert.provider.blackduck.tasks.BlackDuckDataSyncTask;\n+\n+@Component\n+public class BlackDuckTaskFactory implements ProviderTaskFactory {\n+    private final BlackDuckProviderKey blackDuckProviderKey;\n+    private final TaskScheduler taskScheduler;\n+    private final ProviderDataAccessor blackDuckDataAccessor;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final NotificationManager notificationManager;\n+    private final FilePersistenceUtil filePersistenceUtil;\n+\n+    @Autowired\n+    public BlackDuckTaskFactory(BlackDuckProviderKey blackDuckProviderKey, TaskScheduler taskScheduler, ProviderDataAccessor blackDuckDataAccessor,\n+        ConfigurationAccessor configurationAccessor, NotificationManager notificationManager, FilePersistenceUtil filePersistenceUtil) {\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+        this.taskScheduler = taskScheduler;\n+        this.blackDuckDataAccessor = blackDuckDataAccessor;\n+        this.configurationAccessor = configurationAccessor;\n+        this.notificationManager = notificationManager;\n+        this.filePersistenceUtil = filePersistenceUtil;\n+    }\n+\n+    @Override\n+    public List<ProviderTask> createTasks(ProviderProperties providerProperties) {\n+        BlackDuckAccumulator accumulator = new BlackDuckAccumulator(blackDuckProviderKey, taskScheduler, notificationManager, filePersistenceUtil);\n+        accumulator.setProviderPropertiesForRun(providerProperties);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59feaf68c0c60dca48c658f55b6c143177b2f91a"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1NzQ0Mg==", "bodyText": "That is part of the reason why it can't be a component.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/864#discussion_r382257442", "createdAt": "2020-02-20T21:04:35Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/factories/BlackDuckTaskFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.factories;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.FilePersistenceUtil;\n+import com.synopsys.integration.alert.common.provider.ProviderProperties;\n+import com.synopsys.integration.alert.common.provider.lifecycle.ProviderTask;\n+import com.synopsys.integration.alert.common.provider.lifecycle.ProviderTaskFactory;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderKey;\n+import com.synopsys.integration.alert.provider.blackduck.tasks.BlackDuckAccumulator;\n+import com.synopsys.integration.alert.provider.blackduck.tasks.BlackDuckDataSyncTask;\n+\n+@Component\n+public class BlackDuckTaskFactory implements ProviderTaskFactory {\n+    private final BlackDuckProviderKey blackDuckProviderKey;\n+    private final TaskScheduler taskScheduler;\n+    private final ProviderDataAccessor blackDuckDataAccessor;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final NotificationManager notificationManager;\n+    private final FilePersistenceUtil filePersistenceUtil;\n+\n+    @Autowired\n+    public BlackDuckTaskFactory(BlackDuckProviderKey blackDuckProviderKey, TaskScheduler taskScheduler, ProviderDataAccessor blackDuckDataAccessor,\n+        ConfigurationAccessor configurationAccessor, NotificationManager notificationManager, FilePersistenceUtil filePersistenceUtil) {\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+        this.taskScheduler = taskScheduler;\n+        this.blackDuckDataAccessor = blackDuckDataAccessor;\n+        this.configurationAccessor = configurationAccessor;\n+        this.notificationManager = notificationManager;\n+        this.filePersistenceUtil = filePersistenceUtil;\n+    }\n+\n+    @Override\n+    public List<ProviderTask> createTasks(ProviderProperties providerProperties) {\n+        BlackDuckAccumulator accumulator = new BlackDuckAccumulator(blackDuckProviderKey, taskScheduler, notificationManager, filePersistenceUtil);\n+        accumulator.setProviderPropertiesForRun(providerProperties);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1NzMzMQ=="}, "originalCommit": {"oid": "59feaf68c0c60dca48c658f55b6c143177b2f91a"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjQxOTQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/factories/BlackDuckTaskFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNToxMFrOFsjKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTowNToxMFrOFsjKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI1NzY3OQ==", "bodyText": "This doesn't seem to have the properties set at all.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/864#discussion_r382257679", "createdAt": "2020-02-20T21:05:10Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/factories/BlackDuckTaskFactory.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.factories;\n+\n+import java.util.List;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n+import com.synopsys.integration.alert.common.persistence.accessor.ProviderDataAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.FilePersistenceUtil;\n+import com.synopsys.integration.alert.common.provider.ProviderProperties;\n+import com.synopsys.integration.alert.common.provider.lifecycle.ProviderTask;\n+import com.synopsys.integration.alert.common.provider.lifecycle.ProviderTaskFactory;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderKey;\n+import com.synopsys.integration.alert.provider.blackduck.tasks.BlackDuckAccumulator;\n+import com.synopsys.integration.alert.provider.blackduck.tasks.BlackDuckDataSyncTask;\n+\n+@Component\n+public class BlackDuckTaskFactory implements ProviderTaskFactory {\n+    private final BlackDuckProviderKey blackDuckProviderKey;\n+    private final TaskScheduler taskScheduler;\n+    private final ProviderDataAccessor blackDuckDataAccessor;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final NotificationManager notificationManager;\n+    private final FilePersistenceUtil filePersistenceUtil;\n+\n+    @Autowired\n+    public BlackDuckTaskFactory(BlackDuckProviderKey blackDuckProviderKey, TaskScheduler taskScheduler, ProviderDataAccessor blackDuckDataAccessor,\n+        ConfigurationAccessor configurationAccessor, NotificationManager notificationManager, FilePersistenceUtil filePersistenceUtil) {\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+        this.taskScheduler = taskScheduler;\n+        this.blackDuckDataAccessor = blackDuckDataAccessor;\n+        this.configurationAccessor = configurationAccessor;\n+        this.notificationManager = notificationManager;\n+        this.filePersistenceUtil = filePersistenceUtil;\n+    }\n+\n+    @Override\n+    public List<ProviderTask> createTasks(ProviderProperties providerProperties) {\n+        BlackDuckAccumulator accumulator = new BlackDuckAccumulator(blackDuckProviderKey, taskScheduler, notificationManager, filePersistenceUtil);\n+        accumulator.setProviderPropertiesForRun(providerProperties);\n+        BlackDuckDataSyncTask syncTask = new BlackDuckDataSyncTask(blackDuckProviderKey, taskScheduler, blackDuckDataAccessor, configurationAccessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59feaf68c0c60dca48c658f55b6c143177b2f91a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NjUzNTYxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/provider/lifecycle/ProviderTask.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0ODozNFrOFskTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQyMTo0ODozNFrOFskTcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjI3NjQ2Nw==", "bodyText": "I think validateProviderProperties and invalidateProviderProperties should also be deleted now.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/864#discussion_r382276467", "createdAt": "2020-02-20T21:48:34Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/provider/lifecycle/ProviderTask.java", "diffHunk": "@@ -62,10 +62,6 @@ public String getTaskName() {\n         return ProviderTask.computeProviderTaskName(providerKey, getProviderProperties().getConfigId(), getClass());\n     }\n \n-    public final void setProviderPropertiesForRun(ProviderProperties providerProperties) {\n-        this.providerProperties = providerProperties;\n-    }\n-\n     protected ProviderProperties getProviderProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bac6cf616a1f2264187369a43aae7136ebf6c2dc"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2117, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}