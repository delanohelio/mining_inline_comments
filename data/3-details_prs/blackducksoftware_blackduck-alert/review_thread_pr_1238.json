{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjQ5MTU2", "number": 1238, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMTowNVrOE0hITA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMzoyMlrOE1V2VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTA0MjA0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyMTowNVrOHsSbfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxOToyNzowNFrOHsSniQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTM0Mw==", "bodyText": "There should only be 1 name per job, so why are we returning a list for this method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1238#discussion_r516201343", "createdAt": "2020-11-02T19:21:05Z", "author": {"login": "jamesrichard91"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -230,18 +231,18 @@ public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAcc\n         }\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n-        ValidationResponseModel responseModel = ValidationResponseModel.success(\"Valid name\");\n+    private List<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n+        List<AlertFieldStatus> fieldStatuses = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8da6b4619d601f9e530743c1156129c5aa34680"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwNDQyNQ==", "bodyText": "I think your right, I saw the the for loop and incorrectly thought it should have been returned as a list because it looped through all of the fieldModels. I can change this to return a single AlertFieldStatus.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1238#discussion_r516204425", "createdAt": "2020-11-02T19:27:04Z", "author": {"login": "ChomickiM"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -230,18 +231,18 @@ public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAcc\n         }\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n-        ValidationResponseModel responseModel = ValidationResponseModel.success(\"Valid name\");\n+    private List<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n+        List<AlertFieldStatus> fieldStatuses = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIwMTM0Mw=="}, "originalCommit": {"oid": "f8da6b4619d601f9e530743c1156129c5aa34680"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNTE5OTQ0OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowODo0NVrOHsT7jA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQyMDowODo0NVrOHsT7jA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjIyNTkzMg==", "bodyText": "Could you use a stream here to remove the for loop?  You would have to change the method signature of validateJobNameUnique to take a FieldValueModel.\nOptional<AlertFieldStatus> fieldStatus = jobFieldModel.getFieldModels().stream()\n     .filter(fieldModel ->                                            \n                     fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME).isPresent())\n     .map(fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME))\n     .map(fieldValueModel -> validateJobNameUnique(currentJobId, fieldValueModel)\n     .orElse(Optional.empty());", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1238#discussion_r516225932", "createdAt": "2020-11-02T20:08:45Z", "author": {"login": "psantos1113"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -230,18 +231,17 @@ public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAcc\n         }\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n-        ValidationResponseModel responseModel = ValidationResponseModel.success(\"Valid name\");\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n         for (FieldModel fieldModel : jobFieldModel.getFieldModels()) {\n-            responseModel = validateJobNameUnique(currentJobId, fieldModel);\n-            if (responseModel.hasErrors()) {\n-                return responseModel;\n+            Optional<AlertFieldStatus> fieldStatus = validateJobNameUnique(currentJobId, fieldModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a23c43c45b3bd6be50e2b97717c782ee8ef985d"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0MzY3OTU3OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxMzoyMlrOHtkDfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNFQxODoxODo0OVrOHtkPUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzODY4Ng==", "bodyText": "This is for 6.3.0 right? This method should not be used in 6.4.0+", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1238#discussion_r517538686", "createdAt": "2020-11-04T18:13:22Z", "author": {"login": "gkillough"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -230,43 +231,38 @@ public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAcc\n         }\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n-        ValidationResponseModel responseModel = ValidationResponseModel.success(\"Valid name\");\n-        for (FieldModel fieldModel : jobFieldModel.getFieldModels()) {\n-            responseModel = validateJobNameUnique(currentJobId, fieldModel);\n-            if (responseModel.hasErrors()) {\n-                return responseModel;\n-            }\n-        }\n-        return responseModel;\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n+        Optional<AlertFieldStatus> fieldStatus = jobFieldModel.getFieldModels().stream()\n+                                                     .filter(fieldModel -> fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME).isPresent())\n+                                                     .findFirst()\n+                                                     .flatMap(fieldModel -> fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME))\n+                                                     .flatMap(fieldValueModel -> validateJobNameUnique(currentJobId, fieldValueModel));\n+        return fieldStatus;\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, FieldModel fieldModel) {\n-        Optional<FieldValueModel> jobNameFieldOptional = fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME);\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, FieldValueModel fieldValueModel) {\n         String error = \"\";\n-        if (jobNameFieldOptional.isPresent()) {\n-            String jobName = jobNameFieldOptional.get().getValue().orElse(null);\n-            if (StringUtils.isNotBlank(jobName)) {\n-                List<ConfigurationJobModel> jobs = configurationAccessor.getAllJobs();\n-\n-                boolean foundDuplicateName = jobs.stream()\n-                                                 .filter(job -> filterOutMatchingJobs(currentJobId, job))\n-                                                 .flatMap(job -> job.getCopyOfConfigurations().stream())\n-                                                 .map(configurationModel -> configurationModel.getField(ChannelDistributionUIConfig.KEY_NAME).orElse(null))\n-                                                 .filter(configurationFieldModel -> (null != configurationFieldModel) && configurationFieldModel.getFieldValue().isPresent())\n-                                                 .anyMatch(configurationFieldModel -> jobName.equals(configurationFieldModel.getFieldValue().get()));\n-                if (foundDuplicateName) {\n-                    error = \"A distribution configuration with this name already exists.\";\n-                }\n-            } else {\n-                error = \"Name cannot be blank.\";\n+        String jobName = fieldValueModel.getValue().orElse(null);\n+        if (StringUtils.isNotBlank(jobName)) {\n+            List<ConfigurationJobModel> jobs = configurationAccessor.getAllJobs();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37b8756ded3ca1006730a2d8855e7d1adb224dff"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MDQ3MQ==", "bodyText": "Yes, its for 6.3.0, this is coming from Line 250 in the old code", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1238#discussion_r517540471", "createdAt": "2020-11-04T18:16:28Z", "author": {"login": "ChomickiM"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -230,43 +231,38 @@ public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAcc\n         }\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n-        ValidationResponseModel responseModel = ValidationResponseModel.success(\"Valid name\");\n-        for (FieldModel fieldModel : jobFieldModel.getFieldModels()) {\n-            responseModel = validateJobNameUnique(currentJobId, fieldModel);\n-            if (responseModel.hasErrors()) {\n-                return responseModel;\n-            }\n-        }\n-        return responseModel;\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n+        Optional<AlertFieldStatus> fieldStatus = jobFieldModel.getFieldModels().stream()\n+                                                     .filter(fieldModel -> fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME).isPresent())\n+                                                     .findFirst()\n+                                                     .flatMap(fieldModel -> fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME))\n+                                                     .flatMap(fieldValueModel -> validateJobNameUnique(currentJobId, fieldValueModel));\n+        return fieldStatus;\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, FieldModel fieldModel) {\n-        Optional<FieldValueModel> jobNameFieldOptional = fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME);\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, FieldValueModel fieldValueModel) {\n         String error = \"\";\n-        if (jobNameFieldOptional.isPresent()) {\n-            String jobName = jobNameFieldOptional.get().getValue().orElse(null);\n-            if (StringUtils.isNotBlank(jobName)) {\n-                List<ConfigurationJobModel> jobs = configurationAccessor.getAllJobs();\n-\n-                boolean foundDuplicateName = jobs.stream()\n-                                                 .filter(job -> filterOutMatchingJobs(currentJobId, job))\n-                                                 .flatMap(job -> job.getCopyOfConfigurations().stream())\n-                                                 .map(configurationModel -> configurationModel.getField(ChannelDistributionUIConfig.KEY_NAME).orElse(null))\n-                                                 .filter(configurationFieldModel -> (null != configurationFieldModel) && configurationFieldModel.getFieldValue().isPresent())\n-                                                 .anyMatch(configurationFieldModel -> jobName.equals(configurationFieldModel.getFieldValue().get()));\n-                if (foundDuplicateName) {\n-                    error = \"A distribution configuration with this name already exists.\";\n-                }\n-            } else {\n-                error = \"Name cannot be blank.\";\n+        String jobName = fieldValueModel.getValue().orElse(null);\n+        if (StringUtils.isNotBlank(jobName)) {\n+            List<ConfigurationJobModel> jobs = configurationAccessor.getAllJobs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzODY4Ng=="}, "originalCommit": {"oid": "37b8756ded3ca1006730a2d8855e7d1adb224dff"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzU0MTcxNQ==", "bodyText": "Gotcha. Just make sure when you merge 6.3.0 -> master that you don't use getAllJobs.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1238#discussion_r517541715", "createdAt": "2020-11-04T18:18:49Z", "author": {"login": "gkillough"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -230,43 +231,38 @@ public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAcc\n         }\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n-        ValidationResponseModel responseModel = ValidationResponseModel.success(\"Valid name\");\n-        for (FieldModel fieldModel : jobFieldModel.getFieldModels()) {\n-            responseModel = validateJobNameUnique(currentJobId, fieldModel);\n-            if (responseModel.hasErrors()) {\n-                return responseModel;\n-            }\n-        }\n-        return responseModel;\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, JobFieldModel jobFieldModel) {\n+        Optional<AlertFieldStatus> fieldStatus = jobFieldModel.getFieldModels().stream()\n+                                                     .filter(fieldModel -> fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME).isPresent())\n+                                                     .findFirst()\n+                                                     .flatMap(fieldModel -> fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME))\n+                                                     .flatMap(fieldValueModel -> validateJobNameUnique(currentJobId, fieldValueModel));\n+        return fieldStatus;\n     }\n \n-    private ValidationResponseModel validateJobNameUnique(@Nullable UUID currentJobId, FieldModel fieldModel) {\n-        Optional<FieldValueModel> jobNameFieldOptional = fieldModel.getFieldValueModel(ChannelDistributionUIConfig.KEY_NAME);\n+    private Optional<AlertFieldStatus> validateJobNameUnique(@Nullable UUID currentJobId, FieldValueModel fieldValueModel) {\n         String error = \"\";\n-        if (jobNameFieldOptional.isPresent()) {\n-            String jobName = jobNameFieldOptional.get().getValue().orElse(null);\n-            if (StringUtils.isNotBlank(jobName)) {\n-                List<ConfigurationJobModel> jobs = configurationAccessor.getAllJobs();\n-\n-                boolean foundDuplicateName = jobs.stream()\n-                                                 .filter(job -> filterOutMatchingJobs(currentJobId, job))\n-                                                 .flatMap(job -> job.getCopyOfConfigurations().stream())\n-                                                 .map(configurationModel -> configurationModel.getField(ChannelDistributionUIConfig.KEY_NAME).orElse(null))\n-                                                 .filter(configurationFieldModel -> (null != configurationFieldModel) && configurationFieldModel.getFieldValue().isPresent())\n-                                                 .anyMatch(configurationFieldModel -> jobName.equals(configurationFieldModel.getFieldValue().get()));\n-                if (foundDuplicateName) {\n-                    error = \"A distribution configuration with this name already exists.\";\n-                }\n-            } else {\n-                error = \"Name cannot be blank.\";\n+        String jobName = fieldValueModel.getValue().orElse(null);\n+        if (StringUtils.isNotBlank(jobName)) {\n+            List<ConfigurationJobModel> jobs = configurationAccessor.getAllJobs();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNzUzODY4Ng=="}, "originalCommit": {"oid": "37b8756ded3ca1006730a2d8855e7d1adb224dff"}, "originalPosition": 52}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2340, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}