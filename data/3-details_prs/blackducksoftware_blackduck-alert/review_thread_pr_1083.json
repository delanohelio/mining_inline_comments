{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2MzQ5OTAw", "number": 1083, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyOTo1MlrOER3iTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNjozMVrOER4zDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTcxMTQ5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNToyOTo1MlrOG2z4sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyMTo1MFrOG21tiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNjM4NQ==", "bodyText": "Should this be changed to a switch case? Also the issueRequest line of each block seems identical. Shouldn't we create the isssueRequest after the conditonal blocks?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460126385", "createdAt": "2020-07-24T15:29:52Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.channel.issuetracker.service;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCommentRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerMessageParser;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.datastructure.SetMap;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class IssueTrackerRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final IssueTrackerMessageParser issueTrackerMessageParser;\n+\n+    public IssueTrackerRequestCreator(IssueTrackerMessageParser issueTrackerMessageParser) {\n+        this.issueTrackerMessageParser = issueTrackerMessageParser;\n+    }\n+\n+    public final List<IssueTrackerRequest> createRequests(IssueConfig issueConfig, MessageContentGroup content) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+        for (ProviderMessageContent messageContent : content.getSubContent()) {\n+            List<IssueTrackerRequest> issueKeysForMessage = createRequestsPerComponent(issueConfig, messageContent);\n+            issues.addAll(issueKeysForMessage);\n+        }\n+        return issues;\n+    }\n+\n+    protected abstract IssueSearchProperties createIssueSearchProperties(String providerName, String providerUrl, LinkableItem topic, @Nullable LinkableItem subTopic, @Nullable ComponentItem componentItem, String additionalInfo);\n+\n+    protected List<IssueTrackerRequest> createUpdateRequestsByTopLevelAction(IssueConfig issueConfig, ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic, ItemOperation action) {\n+        if (ItemOperation.DELETE == action) {\n+            logger.debug(\"Attempting to resolve issues in the project {} for Provider: {}, Provider Project: {}[{}].\", issueConfig.getProjectKey(), providerContentKey.getProviderName(), topic.getValue(), nullableSubTopic);\n+            String trackingKey = createAdditionalTrackingKey(null);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, null, trackingKey);\n+            IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, Set.of(), null);\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);\n+            IssueTrackerRequest issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            return List.of(issueRequest);\n+        } else {\n+            logger.debug(\"The top level action was not a DELETE action so it will be ignored\");\n+        }\n+        return List.of();\n+    }\n+\n+    protected List<IssueTrackerRequest> createRequestsByComponentGroup(ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic,\n+        SetMap<String, ComponentItem> groupedComponentItems) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+\n+        for (Set<ComponentItem> componentItems : groupedComponentItems.values()) {\n+            ComponentItem arbitraryItem = componentItems\n+                                              .stream()\n+                                              .findAny()\n+                                              .orElseThrow(\n+                                                  () -> new AlertException(String.format(\"No actionable component items were found. Provider: %s, Topic: %s, SubTopic: %s\", providerContentKey.getProviderName(), topic, nullableSubTopic)));\n+            ItemOperation operation = arbitraryItem.getOperation();\n+            String trackingKey = createAdditionalTrackingKey(arbitraryItem);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, arbitraryItem, trackingKey);\n+\n+            IssueTrackerRequest issueRequest = null;\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, arbitraryItem);\n+            if (ItemOperation.ADD == operation || ItemOperation.UPDATE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCreationRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCreationRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.DELETE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.INFO == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCommentRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCommentRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NjI5Nw==", "bodyText": "Right now, I'm focusing on abstracting common code. Since this code existed and was functional, I am going to leave it for now and address it in a different PR.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460156297", "createdAt": "2020-07-24T16:21:50Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.channel.issuetracker.service;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCommentRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerMessageParser;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.datastructure.SetMap;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class IssueTrackerRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final IssueTrackerMessageParser issueTrackerMessageParser;\n+\n+    public IssueTrackerRequestCreator(IssueTrackerMessageParser issueTrackerMessageParser) {\n+        this.issueTrackerMessageParser = issueTrackerMessageParser;\n+    }\n+\n+    public final List<IssueTrackerRequest> createRequests(IssueConfig issueConfig, MessageContentGroup content) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+        for (ProviderMessageContent messageContent : content.getSubContent()) {\n+            List<IssueTrackerRequest> issueKeysForMessage = createRequestsPerComponent(issueConfig, messageContent);\n+            issues.addAll(issueKeysForMessage);\n+        }\n+        return issues;\n+    }\n+\n+    protected abstract IssueSearchProperties createIssueSearchProperties(String providerName, String providerUrl, LinkableItem topic, @Nullable LinkableItem subTopic, @Nullable ComponentItem componentItem, String additionalInfo);\n+\n+    protected List<IssueTrackerRequest> createUpdateRequestsByTopLevelAction(IssueConfig issueConfig, ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic, ItemOperation action) {\n+        if (ItemOperation.DELETE == action) {\n+            logger.debug(\"Attempting to resolve issues in the project {} for Provider: {}, Provider Project: {}[{}].\", issueConfig.getProjectKey(), providerContentKey.getProviderName(), topic.getValue(), nullableSubTopic);\n+            String trackingKey = createAdditionalTrackingKey(null);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, null, trackingKey);\n+            IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, Set.of(), null);\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);\n+            IssueTrackerRequest issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            return List.of(issueRequest);\n+        } else {\n+            logger.debug(\"The top level action was not a DELETE action so it will be ignored\");\n+        }\n+        return List.of();\n+    }\n+\n+    protected List<IssueTrackerRequest> createRequestsByComponentGroup(ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic,\n+        SetMap<String, ComponentItem> groupedComponentItems) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+\n+        for (Set<ComponentItem> componentItems : groupedComponentItems.values()) {\n+            ComponentItem arbitraryItem = componentItems\n+                                              .stream()\n+                                              .findAny()\n+                                              .orElseThrow(\n+                                                  () -> new AlertException(String.format(\"No actionable component items were found. Provider: %s, Topic: %s, SubTopic: %s\", providerContentKey.getProviderName(), topic, nullableSubTopic)));\n+            ItemOperation operation = arbitraryItem.getOperation();\n+            String trackingKey = createAdditionalTrackingKey(arbitraryItem);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, arbitraryItem, trackingKey);\n+\n+            IssueTrackerRequest issueRequest = null;\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, arbitraryItem);\n+            if (ItemOperation.ADD == operation || ItemOperation.UPDATE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCreationRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCreationRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.DELETE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.INFO == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCommentRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCommentRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNjM4NQ=="}, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTcxNTcxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozMDo1NFrOG2z7Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNDoxOFrOG21yOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNzAzNA==", "bodyText": "Seems like this would be better suited in a Utility class of some kind", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460127034", "createdAt": "2020-07-24T15:30:54Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.channel.issuetracker.service;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCommentRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerMessageParser;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.datastructure.SetMap;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class IssueTrackerRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final IssueTrackerMessageParser issueTrackerMessageParser;\n+\n+    public IssueTrackerRequestCreator(IssueTrackerMessageParser issueTrackerMessageParser) {\n+        this.issueTrackerMessageParser = issueTrackerMessageParser;\n+    }\n+\n+    public final List<IssueTrackerRequest> createRequests(IssueConfig issueConfig, MessageContentGroup content) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+        for (ProviderMessageContent messageContent : content.getSubContent()) {\n+            List<IssueTrackerRequest> issueKeysForMessage = createRequestsPerComponent(issueConfig, messageContent);\n+            issues.addAll(issueKeysForMessage);\n+        }\n+        return issues;\n+    }\n+\n+    protected abstract IssueSearchProperties createIssueSearchProperties(String providerName, String providerUrl, LinkableItem topic, @Nullable LinkableItem subTopic, @Nullable ComponentItem componentItem, String additionalInfo);\n+\n+    protected List<IssueTrackerRequest> createUpdateRequestsByTopLevelAction(IssueConfig issueConfig, ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic, ItemOperation action) {\n+        if (ItemOperation.DELETE == action) {\n+            logger.debug(\"Attempting to resolve issues in the project {} for Provider: {}, Provider Project: {}[{}].\", issueConfig.getProjectKey(), providerContentKey.getProviderName(), topic.getValue(), nullableSubTopic);\n+            String trackingKey = createAdditionalTrackingKey(null);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, null, trackingKey);\n+            IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, Set.of(), null);\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);\n+            IssueTrackerRequest issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            return List.of(issueRequest);\n+        } else {\n+            logger.debug(\"The top level action was not a DELETE action so it will be ignored\");\n+        }\n+        return List.of();\n+    }\n+\n+    protected List<IssueTrackerRequest> createRequestsByComponentGroup(ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic,\n+        SetMap<String, ComponentItem> groupedComponentItems) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+\n+        for (Set<ComponentItem> componentItems : groupedComponentItems.values()) {\n+            ComponentItem arbitraryItem = componentItems\n+                                              .stream()\n+                                              .findAny()\n+                                              .orElseThrow(\n+                                                  () -> new AlertException(String.format(\"No actionable component items were found. Provider: %s, Topic: %s, SubTopic: %s\", providerContentKey.getProviderName(), topic, nullableSubTopic)));\n+            ItemOperation operation = arbitraryItem.getOperation();\n+            String trackingKey = createAdditionalTrackingKey(arbitraryItem);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, arbitraryItem, trackingKey);\n+\n+            IssueTrackerRequest issueRequest = null;\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, arbitraryItem);\n+            if (ItemOperation.ADD == operation || ItemOperation.UPDATE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCreationRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCreationRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.DELETE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.INFO == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCommentRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCommentRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            }\n+            if (null != issueRequest) {\n+                issues.add(issueRequest);\n+            }\n+        }\n+        return issues;\n+    }\n+\n+    protected String createAdditionalTrackingKey(ComponentItem componentItem) {\n+        if (null != componentItem && !componentItem.collapseOnCategory()) {\n+            LinkableItem categoryItem = componentItem.getCategoryItem();\n+            return categoryItem.getName() + categoryItem.getValue();\n+        }\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private List<IssueTrackerRequest> createRequestsPerComponent(IssueConfig issueConfig, ProviderMessageContent messageContent) throws IntegrationException {\n+        LinkableItem topic = messageContent.getTopic();\n+        LinkableItem nullableSubTopic = messageContent.getSubTopic().orElse(null);\n+\n+        ContentKey providerContentKey = messageContent.getContentKey();\n+        String providerUrl = messageContent.getProvider().getUrl()\n+                                 .map(this::formatProviderUrl)\n+                                 .orElse(\"\");\n+        List<IssueTrackerRequest> requests;\n+        if (messageContent.isTopLevelActionOnly()) {\n+            requests = createUpdateRequestsByTopLevelAction(issueConfig, providerContentKey, providerUrl, topic, nullableSubTopic, messageContent.getAction().orElse(ItemOperation.INFO));\n+        } else {\n+            requests = createRequestsByComponentGroup(providerContentKey, providerUrl, topic, nullableSubTopic, messageContent.groupRelatedComponentItems());\n+        }\n+        return requests;\n+    }\n+\n+    private String formatProviderUrl(String originalUrl) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NzQ5OA==", "bodyText": "It was in a jira-specific utility class before, but it didn't belong there. This class is going to get some more brushing up in a future PR, but for now, I'm trying to avoid scope creep on things not directly related to completing Azure functionality.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460157498", "createdAt": "2020-07-24T16:24:18Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.channel.issuetracker.service;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCommentRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerMessageParser;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.datastructure.SetMap;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class IssueTrackerRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final IssueTrackerMessageParser issueTrackerMessageParser;\n+\n+    public IssueTrackerRequestCreator(IssueTrackerMessageParser issueTrackerMessageParser) {\n+        this.issueTrackerMessageParser = issueTrackerMessageParser;\n+    }\n+\n+    public final List<IssueTrackerRequest> createRequests(IssueConfig issueConfig, MessageContentGroup content) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+        for (ProviderMessageContent messageContent : content.getSubContent()) {\n+            List<IssueTrackerRequest> issueKeysForMessage = createRequestsPerComponent(issueConfig, messageContent);\n+            issues.addAll(issueKeysForMessage);\n+        }\n+        return issues;\n+    }\n+\n+    protected abstract IssueSearchProperties createIssueSearchProperties(String providerName, String providerUrl, LinkableItem topic, @Nullable LinkableItem subTopic, @Nullable ComponentItem componentItem, String additionalInfo);\n+\n+    protected List<IssueTrackerRequest> createUpdateRequestsByTopLevelAction(IssueConfig issueConfig, ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic, ItemOperation action) {\n+        if (ItemOperation.DELETE == action) {\n+            logger.debug(\"Attempting to resolve issues in the project {} for Provider: {}, Provider Project: {}[{}].\", issueConfig.getProjectKey(), providerContentKey.getProviderName(), topic.getValue(), nullableSubTopic);\n+            String trackingKey = createAdditionalTrackingKey(null);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, null, trackingKey);\n+            IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, Set.of(), null);\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);\n+            IssueTrackerRequest issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            return List.of(issueRequest);\n+        } else {\n+            logger.debug(\"The top level action was not a DELETE action so it will be ignored\");\n+        }\n+        return List.of();\n+    }\n+\n+    protected List<IssueTrackerRequest> createRequestsByComponentGroup(ContentKey providerContentKey, String providerUrl, LinkableItem topic, LinkableItem nullableSubTopic,\n+        SetMap<String, ComponentItem> groupedComponentItems) throws IntegrationException {\n+        List<IssueTrackerRequest> issues = new LinkedList<>();\n+\n+        for (Set<ComponentItem> componentItems : groupedComponentItems.values()) {\n+            ComponentItem arbitraryItem = componentItems\n+                                              .stream()\n+                                              .findAny()\n+                                              .orElseThrow(\n+                                                  () -> new AlertException(String.format(\"No actionable component items were found. Provider: %s, Topic: %s, SubTopic: %s\", providerContentKey.getProviderName(), topic, nullableSubTopic)));\n+            ItemOperation operation = arbitraryItem.getOperation();\n+            String trackingKey = createAdditionalTrackingKey(arbitraryItem);\n+            IssueSearchProperties issueSearchProperties = createIssueSearchProperties(providerContentKey.getProviderName(), providerUrl, topic, nullableSubTopic, arbitraryItem, trackingKey);\n+\n+            IssueTrackerRequest issueRequest = null;\n+            AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, arbitraryItem);\n+            if (ItemOperation.ADD == operation || ItemOperation.UPDATE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCreationRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCreationRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.DELETE == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueResolutionRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            } else if (ItemOperation.INFO == operation) {\n+                IssueContentModel issueContentModel = issueTrackerMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCommentRequest.OPERATION, topic, nullableSubTopic, componentItems, arbitraryItem);\n+                issueRequest = IssueCommentRequest.of(issueSearchProperties, issueContentModel, alertIssueOrigin);\n+            }\n+            if (null != issueRequest) {\n+                issues.add(issueRequest);\n+            }\n+        }\n+        return issues;\n+    }\n+\n+    protected String createAdditionalTrackingKey(ComponentItem componentItem) {\n+        if (null != componentItem && !componentItem.collapseOnCategory()) {\n+            LinkableItem categoryItem = componentItem.getCategoryItem();\n+            return categoryItem.getName() + categoryItem.getValue();\n+        }\n+        return StringUtils.EMPTY;\n+    }\n+\n+    private List<IssueTrackerRequest> createRequestsPerComponent(IssueConfig issueConfig, ProviderMessageContent messageContent) throws IntegrationException {\n+        LinkableItem topic = messageContent.getTopic();\n+        LinkableItem nullableSubTopic = messageContent.getSubTopic().orElse(null);\n+\n+        ContentKey providerContentKey = messageContent.getContentKey();\n+        String providerUrl = messageContent.getProvider().getUrl()\n+                                 .map(this::formatProviderUrl)\n+                                 .orElse(\"\");\n+        List<IssueTrackerRequest> requests;\n+        if (messageContent.isTopLevelActionOnly()) {\n+            requests = createUpdateRequestsByTopLevelAction(issueConfig, providerContentKey, providerUrl, topic, nullableSubTopic, messageContent.getAction().orElse(ItemOperation.INFO));\n+        } else {\n+            requests = createRequestsByComponentGroup(providerContentKey, providerUrl, topic, nullableSubTopic, messageContent.groupRelatedComponentItems());\n+        }\n+        return requests;\n+    }\n+\n+    private String formatProviderUrl(String originalUrl) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNzAzNA=="}, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTcyMTEzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/message/IssueTrackerMessageParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozMjoxOVrOG2z-gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozMjoxOVrOG2z-gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyNzg3Mg==", "bodyText": "Copy/Pasted from JiraMessageParser. Abstracted the two fields that were jira-specific.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460127872", "createdAt": "2020-07-24T15:32:19Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/message/IssueTrackerMessageParser.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.channel.issuetracker.message;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.lang.Nullable;\n+\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.message.ChannelMessageParser;\n+import com.synopsys.integration.alert.common.channel.message.MessageSplitter;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+\n+public abstract class IssueTrackerMessageParser extends ChannelMessageParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTczMTUyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozNTowNlrOG20E6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozNTowNlrOG20E6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEyOTUxMw==", "bodyText": "Copy/Pasted from JiraMessageContentConverter. Replaced JiraMessageParser with IssueTrackerMessageParser, added an abstract method createIssueSearchProperties.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460129513", "createdAt": "2020-07-24T15:35:06Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueTrackerRequestCreator.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.channel.issuetracker.service;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.Nullable;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCommentRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerMessageParser;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.MessageContentGroup;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.datastructure.SetMap;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class IssueTrackerRequestCreator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTc0MDIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozNzoyN1rOG20KXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozNzoyN1rOG20KXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMDkwOQ==", "bodyText": "Looking for suggestions on where to instantiate this. It used to be an abstract class and each issue-tracker would have to extend it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460130909", "createdAt": "2020-07-24T15:37:27Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTc0MTY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozNzo0N1rOG20LLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozNzo0N1rOG20LLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMTExOQ==", "bodyText": "Out of scope.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460131119", "createdAt": "2020-07-24T15:37:47Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );\n+\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+    private final AzureWorkItemService azureWorkItemService;\n+\n+    public AzureBoardsIssueHandler(AzureBoardsMessageParser azureBoardsMessageParser, AzureWorkItemService azureWorkItemService) {\n+        super(CONTENT_LENGTH_VALIDATOR);\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+        this.azureWorkItemService = azureWorkItemService;\n+    }\n+\n+    @Override\n+    protected Optional<WorkItemResponseModel> createIssue(IssueConfig issueConfig, IssueTrackerRequest request) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;\n+        String azureOrganizationName = azureBoardsIssueConfig.getOrganizationName();\n+        String azureProjectName = azureBoardsIssueConfig.getProjectName();\n+\n+        IssueSearchProperties issueProperties = request.getIssueSearchProperties();\n+        IssueContentModel issueContentModel = request.getRequestContent();\n+        if (!issueContentModel.getDescriptionComments().isEmpty() && !azureBoardsIssueConfig.getCommentOnIssues()) {\n+            String description = truncateDescription(issueContentModel.getDescription());\n+            issueContentModel = IssueContentModel.of(issueContentModel.getTitle(), description, List.of());\n+        }\n+\n+        WorkItemRequest workItemRequest = createWorkItemRequest(issueConfig.getIssueCreator(), issueContentModel);\n+        try {\n+            WorkItemResponseModel workItemResponseModel = azureWorkItemService.createWorkItem(azureOrganizationName, azureProjectName, azureBoardsIssueConfig.getIssueType(), workItemRequest);\n+            Integer workItemId = workItemResponseModel.getId();\n+            logger.debug(\"Created new Azure Boards work item: {}\", workItemId);\n+            addWorkItemProperties(workItemId, issueProperties);\n+            if (azureBoardsIssueConfig.getCommentOnIssues()) {\n+                addComment(azureOrganizationName, azureProjectName, workItemId, \"This issue was automatically created by Alert.\");\n+                for (String additionalComment : issueContentModel.getDescriptionComments()) {\n+                    String comment = String.format(\"%s %s %s\", DESCRIPTION_CONTINUED_TEXT, azureBoardsMessageParser.getLineSeparator(), additionalComment);\n+                    addComment(azureOrganizationName, azureProjectName, workItemId, comment);\n+                }\n+            }\n+            return Optional.of(workItemResponseModel);\n+        } catch (IntegrationRestException e) {\n+            logger.error(\"Error creating issue\", e);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<WorkItemResponseModel> retrieveExistingIssues(String projectSearchIdentifier, IssueTrackerRequest request) throws IntegrationException {\n+        // FIXME implement\n+        return null;\n+    }\n+\n+    @Override\n+    protected boolean transitionIssue(WorkItemResponseModel issueModel, IssueConfig issueConfig, IssueOperation operation) throws IntegrationException {\n+        // FIXME implement\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTc0NTEwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozODo1NVrOG20Ndw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTozODo1NVrOG20Ndw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDEzMTcwMw==", "bodyText": "Out of scope.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460131703", "createdAt": "2020-07-24T15:38:55Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );\n+\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+    private final AzureWorkItemService azureWorkItemService;\n+\n+    public AzureBoardsIssueHandler(AzureBoardsMessageParser azureBoardsMessageParser, AzureWorkItemService azureWorkItemService) {\n+        super(CONTENT_LENGTH_VALIDATOR);\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+        this.azureWorkItemService = azureWorkItemService;\n+    }\n+\n+    @Override\n+    protected Optional<WorkItemResponseModel> createIssue(IssueConfig issueConfig, IssueTrackerRequest request) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;\n+        String azureOrganizationName = azureBoardsIssueConfig.getOrganizationName();\n+        String azureProjectName = azureBoardsIssueConfig.getProjectName();\n+\n+        IssueSearchProperties issueProperties = request.getIssueSearchProperties();\n+        IssueContentModel issueContentModel = request.getRequestContent();\n+        if (!issueContentModel.getDescriptionComments().isEmpty() && !azureBoardsIssueConfig.getCommentOnIssues()) {\n+            String description = truncateDescription(issueContentModel.getDescription());\n+            issueContentModel = IssueContentModel.of(issueContentModel.getTitle(), description, List.of());\n+        }\n+\n+        WorkItemRequest workItemRequest = createWorkItemRequest(issueConfig.getIssueCreator(), issueContentModel);\n+        try {\n+            WorkItemResponseModel workItemResponseModel = azureWorkItemService.createWorkItem(azureOrganizationName, azureProjectName, azureBoardsIssueConfig.getIssueType(), workItemRequest);\n+            Integer workItemId = workItemResponseModel.getId();\n+            logger.debug(\"Created new Azure Boards work item: {}\", workItemId);\n+            addWorkItemProperties(workItemId, issueProperties);\n+            if (azureBoardsIssueConfig.getCommentOnIssues()) {\n+                addComment(azureOrganizationName, azureProjectName, workItemId, \"This issue was automatically created by Alert.\");\n+                for (String additionalComment : issueContentModel.getDescriptionComments()) {\n+                    String comment = String.format(\"%s %s %s\", DESCRIPTION_CONTINUED_TEXT, azureBoardsMessageParser.getLineSeparator(), additionalComment);\n+                    addComment(azureOrganizationName, azureProjectName, workItemId, comment);\n+                }\n+            }\n+            return Optional.of(workItemResponseModel);\n+        } catch (IntegrationRestException e) {\n+            logger.error(\"Error creating issue\", e);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<WorkItemResponseModel> retrieveExistingIssues(String projectSearchIdentifier, IssueTrackerRequest request) throws IntegrationException {\n+        // FIXME implement\n+        return null;\n+    }\n+\n+    @Override\n+    protected boolean transitionIssue(WorkItemResponseModel issueModel, IssueConfig issueConfig, IssueOperation operation) throws IntegrationException {\n+        // FIXME implement\n+        return false;\n+    }\n+\n+    @Override\n+    protected void addComment(IssueConfig issueConfig, String workItemIdString, String comment) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;\n+        Integer workItemId = Integer.valueOf(workItemIdString);\n+        addComment(azureBoardsIssueConfig.getOrganizationName(), azureBoardsIssueConfig.getProjectName(), workItemId, comment);\n+    }\n+\n+    @Override\n+    protected String getIssueKey(WorkItemResponseModel issueModel) {\n+        return issueModel.getId().toString();\n+    }\n+\n+    @Override\n+    protected IssueTrackerIssueResponseModel createResponseModel(AlertIssueOrigin alertIssueOrigin, String issueTitle, IssueOperation issueOperation, WorkItemResponseModel issueResponse) {\n+        // FIXME implement\n+        return null;\n+    }\n+\n+    @Override\n+    protected String getIssueTrackerUrl() {\n+        // FIXME implement\n+        return null;\n+    }\n+\n+    @Override\n+    protected void logIssueAction(String issueTrackerProjectName, IssueTrackerRequest request) {\n+        // FIXME implement or remove abstraction\n+    }\n+\n+    private WorkItemRequest createWorkItemRequest(@Nullable String issueCreatorUniqueName, IssueContentModel issueContentModel) {\n+        List<WorkItemElementOperationModel> requestElementOps = new ArrayList<>();\n+\n+        WorkItemElementOperationModel titleField = createAddFieldModel(WorkItemResponseFields.System_Title, issueContentModel.getTitle());\n+        requestElementOps.add(titleField);\n+\n+        WorkItemElementOperationModel descriptionField = createAddFieldModel(WorkItemResponseFields.System_Description, issueContentModel.getDescription());\n+        requestElementOps.add(descriptionField);\n+\n+        // FIXME determine if we can support this\n+        // if (StringUtils.isNotBlank(issueCreatorUniqueName)) {\n+        // WorkItemUserModel workItemUserModel = new WorkItemUserModel(null, null, issueConfig.getIssueCreator(), null, null, null, null, null);\n+        // WorkItemElementOperationModel createdByField = createAddFieldModel(WorkItemResponseFields.System_CreatedBy, workItemUserModel);\n+        // requestElementOps.add(createdByField);\n+        // }\n+        return new WorkItemRequest(requestElementOps);\n+    }\n+\n+    private void addWorkItemProperties(Integer workItemId, IssueSearchProperties issueSearchProperties) {\n+        // FIXME implement\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg2MDI1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowOTo0NlrOG21UTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozNTozN1rOG22JRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTgzNg==", "bodyText": "Would generics work well here? Or do we prefer casting manually?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460149836", "createdAt": "2020-07-24T16:09:46Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );\n+\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+    private final AzureWorkItemService azureWorkItemService;\n+\n+    public AzureBoardsIssueHandler(AzureBoardsMessageParser azureBoardsMessageParser, AzureWorkItemService azureWorkItemService) {\n+        super(CONTENT_LENGTH_VALIDATOR);\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+        this.azureWorkItemService = azureWorkItemService;\n+    }\n+\n+    @Override\n+    protected Optional<WorkItemResponseModel> createIssue(IssueConfig issueConfig, IssueTrackerRequest request) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1ODE3NA==", "bodyText": "Not in this case. Azure has an edge case where it has an extra field in IssueConfig.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460158174", "createdAt": "2020-07-24T16:25:35Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );\n+\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+    private final AzureWorkItemService azureWorkItemService;\n+\n+    public AzureBoardsIssueHandler(AzureBoardsMessageParser azureBoardsMessageParser, AzureWorkItemService azureWorkItemService) {\n+        super(CONTENT_LENGTH_VALIDATOR);\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+        this.azureWorkItemService = azureWorkItemService;\n+    }\n+\n+    @Override\n+    protected Optional<WorkItemResponseModel> createIssue(IssueConfig issueConfig, IssueTrackerRequest request) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTgzNg=="}, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MzM5Ng==", "bodyText": "Turns out, this was not actually an edge case. When we actually need the extra field, we have it. Just an overly cautious add on my part. This class has been deleted.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460163396", "createdAt": "2020-07-24T16:35:37Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );\n+\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+    private final AzureWorkItemService azureWorkItemService;\n+\n+    public AzureBoardsIssueHandler(AzureBoardsMessageParser azureBoardsMessageParser, AzureWorkItemService azureWorkItemService) {\n+        super(CONTENT_LENGTH_VALIDATOR);\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+        this.azureWorkItemService = azureWorkItemService;\n+    }\n+\n+    @Override\n+    protected Optional<WorkItemResponseModel> createIssue(IssueConfig issueConfig, IssueTrackerRequest request) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTgzNg=="}, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTkxODIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNjozMVrOG212xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNjozMVrOG212xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1ODY2Mg==", "bodyText": "Another possible reason for generics.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1083#discussion_r460158662", "createdAt": "2020-07-24T16:26:31Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/service/AzureBoardsIssueHandler.java", "diffHunk": "@@ -0,0 +1,176 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.service;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Nullable;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.model.AzureBoardsIssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentLengthValidator;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerIssueResponseModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.IssueHandler;\n+import com.synopsys.integration.azure.boards.common.service.workitem.AzureWorkItemService;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperation;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemElementOperationModel;\n+import com.synopsys.integration.azure.boards.common.service.workitem.request.WorkItemRequest;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseFields;\n+import com.synopsys.integration.azure.boards.common.service.workitem.response.WorkItemResponseModel;\n+import com.synopsys.integration.azure.boards.common.util.AzureFieldDefinition;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class AzureBoardsIssueHandler extends IssueHandler<WorkItemResponseModel> {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private static final IssueContentLengthValidator CONTENT_LENGTH_VALIDATOR = new IssueContentLengthValidator(\n+        AzureBoardsMessageParser.TITLE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT,\n+        AzureBoardsMessageParser.MESSAGE_SIZE_LIMIT\n+    );\n+\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+    private final AzureWorkItemService azureWorkItemService;\n+\n+    public AzureBoardsIssueHandler(AzureBoardsMessageParser azureBoardsMessageParser, AzureWorkItemService azureWorkItemService) {\n+        super(CONTENT_LENGTH_VALIDATOR);\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+        this.azureWorkItemService = azureWorkItemService;\n+    }\n+\n+    @Override\n+    protected Optional<WorkItemResponseModel> createIssue(IssueConfig issueConfig, IssueTrackerRequest request) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;\n+        String azureOrganizationName = azureBoardsIssueConfig.getOrganizationName();\n+        String azureProjectName = azureBoardsIssueConfig.getProjectName();\n+\n+        IssueSearchProperties issueProperties = request.getIssueSearchProperties();\n+        IssueContentModel issueContentModel = request.getRequestContent();\n+        if (!issueContentModel.getDescriptionComments().isEmpty() && !azureBoardsIssueConfig.getCommentOnIssues()) {\n+            String description = truncateDescription(issueContentModel.getDescription());\n+            issueContentModel = IssueContentModel.of(issueContentModel.getTitle(), description, List.of());\n+        }\n+\n+        WorkItemRequest workItemRequest = createWorkItemRequest(issueConfig.getIssueCreator(), issueContentModel);\n+        try {\n+            WorkItemResponseModel workItemResponseModel = azureWorkItemService.createWorkItem(azureOrganizationName, azureProjectName, azureBoardsIssueConfig.getIssueType(), workItemRequest);\n+            Integer workItemId = workItemResponseModel.getId();\n+            logger.debug(\"Created new Azure Boards work item: {}\", workItemId);\n+            addWorkItemProperties(workItemId, issueProperties);\n+            if (azureBoardsIssueConfig.getCommentOnIssues()) {\n+                addComment(azureOrganizationName, azureProjectName, workItemId, \"This issue was automatically created by Alert.\");\n+                for (String additionalComment : issueContentModel.getDescriptionComments()) {\n+                    String comment = String.format(\"%s %s %s\", DESCRIPTION_CONTINUED_TEXT, azureBoardsMessageParser.getLineSeparator(), additionalComment);\n+                    addComment(azureOrganizationName, azureProjectName, workItemId, comment);\n+                }\n+            }\n+            return Optional.of(workItemResponseModel);\n+        } catch (IntegrationRestException e) {\n+            logger.error(\"Error creating issue\", e);\n+        }\n+        return Optional.empty();\n+    }\n+\n+    @Override\n+    protected List<WorkItemResponseModel> retrieveExistingIssues(String projectSearchIdentifier, IssueTrackerRequest request) throws IntegrationException {\n+        // FIXME implement\n+        return null;\n+    }\n+\n+    @Override\n+    protected boolean transitionIssue(WorkItemResponseModel issueModel, IssueConfig issueConfig, IssueOperation operation) throws IntegrationException {\n+        // FIXME implement\n+        return false;\n+    }\n+\n+    @Override\n+    protected void addComment(IssueConfig issueConfig, String workItemIdString, String comment) throws IntegrationException {\n+        AzureBoardsIssueConfig azureBoardsIssueConfig = (AzureBoardsIssueConfig) issueConfig;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85a903c9fa5bc3aba675793b52b3848b07bf5fea"}, "originalPosition": 119}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1905, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}