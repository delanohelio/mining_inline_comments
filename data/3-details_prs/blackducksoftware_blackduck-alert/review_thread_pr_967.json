{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExNTQ3MTg4", "number": 967, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMToyM1rOD4ELog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNzowMlrOD4EnSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE1MzYyOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultNotificationManagerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMToyM1rOGOrlTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyMToyM1rOGOrlTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA0NzMwOQ==", "bodyText": "Is the comment here still needed?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418047309", "createdAt": "2020-04-30T14:21:23Z", "author": {"login": "gkillough"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultNotificationManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.event.EventManager;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n+import com.synopsys.integration.alert.database.audit.AuditEntryEntity;\n+import com.synopsys.integration.alert.database.audit.AuditEntryRepository;\n+import com.synopsys.integration.alert.database.audit.AuditNotificationRelation;\n+import com.synopsys.integration.alert.database.audit.AuditNotificationRepository;\n+import com.synopsys.integration.alert.database.notification.NotificationContentRepository;\n+import com.synopsys.integration.alert.database.notification.NotificationEntity;\n+\n+public class DefaultNotificationManagerTest {\n+\n+    private final Long id = 1L;\n+    private final Long providerConfigId = 2L;\n+\n+    private final String provider = \"provider-test\";\n+    private final String providerConfigName = \"providerConfigName-test\"; //provider.common.config.name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE4MjU2OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultNotificationManagerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyNzoyOVrOGOr3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDoyOTo1OFrOGOr-mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1MTk4OQ==", "bodyText": "Small thing, but you could just check the isEmpty method here.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418051989", "createdAt": "2020-04-30T14:27:29Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultNotificationManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.event.EventManager;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n+import com.synopsys.integration.alert.database.audit.AuditEntryEntity;\n+import com.synopsys.integration.alert.database.audit.AuditEntryRepository;\n+import com.synopsys.integration.alert.database.audit.AuditNotificationRelation;\n+import com.synopsys.integration.alert.database.audit.AuditNotificationRepository;\n+import com.synopsys.integration.alert.database.notification.NotificationContentRepository;\n+import com.synopsys.integration.alert.database.notification.NotificationEntity;\n+\n+public class DefaultNotificationManagerTest {\n+\n+    private final Long id = 1L;\n+    private final Long providerConfigId = 2L;\n+\n+    private final String provider = \"provider-test\";\n+    private final String providerConfigName = \"providerConfigName-test\"; //provider.common.config.name\n+    private final String notificationType = \"notificationType-test\";\n+    private final String content = \"content\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    private AlertNotificationModel expectedAlertNotificationModel = new AlertNotificationModel(id, providerConfigId, provider, fieldValue, notificationType, content, new Date(), new Date());\n+\n+    @Test\n+    public void saveAllNotificationsTest() throws Exception {\n+        Date createdAt = new Date();\n+        Date providerCreationTime = new Date(System.currentTimeMillis() - 10000);\n+\n+        AlertNotificationModel alertNotificationModel = new AlertNotificationModel(null, providerConfigId, provider, providerConfigName, notificationType, content, createdAt, providerCreationTime);\n+        NotificationEntity notificationEntity = new NotificationEntity(id, createdAt, provider, providerConfigId, providerCreationTime, notificationType, content);\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+\n+        NotificationContentRepository notificationContentRepository = Mockito.mock(NotificationContentRepository.class);\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        EventManager eventManager = Mockito.mock(EventManager.class);\n+\n+        Mockito.when(notificationContentRepository.saveAll(Mockito.any())).thenReturn(List.of(notificationEntity));\n+        Mockito.when(configurationAccessor.getConfigurationById(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+\n+        DefaultNotificationManager notificationManager = new DefaultNotificationManager(notificationContentRepository, null, null, configurationAccessor, eventManager);\n+        List<AlertNotificationModel> alertNotificationModelList = notificationManager.saveAllNotifications(List.of(alertNotificationModel));\n+\n+        assertEquals(1, alertNotificationModelList.size());\n+        AlertNotificationModel testAlertNotificationModel = alertNotificationModelList.get(0);\n+        testExpectedAlertNotificationModel(expectedAlertNotificationModel, testAlertNotificationModel);\n+    }\n+\n+    @Test\n+    public void saveAllNotificationsEmptyModelListTest() {\n+        NotificationContentRepository notificationContentRepository = Mockito.mock(NotificationContentRepository.class);\n+\n+        Mockito.when(notificationContentRepository.saveAll(Mockito.any())).thenReturn(new ArrayList<>());\n+\n+        DefaultNotificationManager notificationManager = new DefaultNotificationManager(notificationContentRepository, null, null, null, null);\n+        List<AlertNotificationModel> alertNotificationModelList = notificationManager.saveAllNotifications(new ArrayList<>());\n+\n+        assertEquals(0, alertNotificationModelList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1Mzc4Ng==", "bodyText": "I have assertEquals 0 in several places when checking for empty lists, I can go through and change all of them to isEmpty if thats a better solution", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418053786", "createdAt": "2020-04-30T14:29:58Z", "author": {"login": "ChomickiM"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultNotificationManagerTest.java", "diffHunk": "@@ -0,0 +1,308 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageImpl;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.data.domain.Sort;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.event.EventManager;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n+import com.synopsys.integration.alert.database.audit.AuditEntryEntity;\n+import com.synopsys.integration.alert.database.audit.AuditEntryRepository;\n+import com.synopsys.integration.alert.database.audit.AuditNotificationRelation;\n+import com.synopsys.integration.alert.database.audit.AuditNotificationRepository;\n+import com.synopsys.integration.alert.database.notification.NotificationContentRepository;\n+import com.synopsys.integration.alert.database.notification.NotificationEntity;\n+\n+public class DefaultNotificationManagerTest {\n+\n+    private final Long id = 1L;\n+    private final Long providerConfigId = 2L;\n+\n+    private final String provider = \"provider-test\";\n+    private final String providerConfigName = \"providerConfigName-test\"; //provider.common.config.name\n+    private final String notificationType = \"notificationType-test\";\n+    private final String content = \"content\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    private AlertNotificationModel expectedAlertNotificationModel = new AlertNotificationModel(id, providerConfigId, provider, fieldValue, notificationType, content, new Date(), new Date());\n+\n+    @Test\n+    public void saveAllNotificationsTest() throws Exception {\n+        Date createdAt = new Date();\n+        Date providerCreationTime = new Date(System.currentTimeMillis() - 10000);\n+\n+        AlertNotificationModel alertNotificationModel = new AlertNotificationModel(null, providerConfigId, provider, providerConfigName, notificationType, content, createdAt, providerCreationTime);\n+        NotificationEntity notificationEntity = new NotificationEntity(id, createdAt, provider, providerConfigId, providerCreationTime, notificationType, content);\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+\n+        NotificationContentRepository notificationContentRepository = Mockito.mock(NotificationContentRepository.class);\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        EventManager eventManager = Mockito.mock(EventManager.class);\n+\n+        Mockito.when(notificationContentRepository.saveAll(Mockito.any())).thenReturn(List.of(notificationEntity));\n+        Mockito.when(configurationAccessor.getConfigurationById(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+\n+        DefaultNotificationManager notificationManager = new DefaultNotificationManager(notificationContentRepository, null, null, configurationAccessor, eventManager);\n+        List<AlertNotificationModel> alertNotificationModelList = notificationManager.saveAllNotifications(List.of(alertNotificationModel));\n+\n+        assertEquals(1, alertNotificationModelList.size());\n+        AlertNotificationModel testAlertNotificationModel = alertNotificationModelList.get(0);\n+        testExpectedAlertNotificationModel(expectedAlertNotificationModel, testAlertNotificationModel);\n+    }\n+\n+    @Test\n+    public void saveAllNotificationsEmptyModelListTest() {\n+        NotificationContentRepository notificationContentRepository = Mockito.mock(NotificationContentRepository.class);\n+\n+        Mockito.when(notificationContentRepository.saveAll(Mockito.any())).thenReturn(new ArrayList<>());\n+\n+        DefaultNotificationManager notificationManager = new DefaultNotificationManager(notificationContentRepository, null, null, null, null);\n+        List<AlertNotificationModel> alertNotificationModelList = notificationManager.saveAllNotifications(new ArrayList<>());\n+\n+        assertEquals(0, alertNotificationModelList.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1MTk4OQ=="}, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTE5NzAyOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozMDo1M1rOGOsA-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozMDo1M1rOGOsA-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NDM5Mg==", "bodyText": "This could also just be an isEmpty check. It may be clearer", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418054392", "createdAt": "2020-04-30T14:30:53Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectEntity;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectRepository;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelation;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelationRepository;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n+\n+public class DefaultProviderDataAccessorTest {\n+    private final String name = \"name-test\";\n+    private final String description = \"decription-test\";\n+    private final String href = \"href-test\";\n+    private final String projectOwnerEmail = \"noreply@blackducksoftware.com\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameTest() throws Exception {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameEmptyTest() throws Exception {\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(0, providerProjectList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTIwMTQwOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozMTo0OVrOGOsDxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozMTo0OVrOGOsDxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NTExMA==", "bodyText": "I've seen this a couple times. You could abstract it into a private method like you did in the other test.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418055110", "createdAt": "2020-04-30T14:31:49Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectEntity;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectRepository;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelation;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelationRepository;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n+\n+public class DefaultProviderDataAccessorTest {\n+    private final String name = \"name-test\";\n+    private final String description = \"decription-test\";\n+    private final String href = \"href-test\";\n+    private final String projectOwnerEmail = \"noreply@blackducksoftware.com\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameTest() throws Exception {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameEmptyTest() throws Exception {\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(0, providerProjectList.size());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigIdTest() {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigId(1L);\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTIxMDc0OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNDowMFrOGOsJ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNDoyOFrOGOsLPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NjY4Mg==", "bodyText": "Not sure if it's the same for tests, but sonarqube generally prefers primitive types over their Object counterparts. Using boolean here may be preferred.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418056682", "createdAt": "2020-04-30T14:34:00Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectEntity;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectRepository;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelation;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelationRepository;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n+\n+public class DefaultProviderDataAccessorTest {\n+    private final String name = \"name-test\";\n+    private final String description = \"decription-test\";\n+    private final String href = \"href-test\";\n+    private final String projectOwnerEmail = \"noreply@blackducksoftware.com\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameTest() throws Exception {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameEmptyTest() throws Exception {\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(0, providerProjectList.size());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigIdTest() {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigId(1L);\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void deleteProjectsTest() {\n+        ProviderProject providerProject = new ProviderProject(name, description, href, projectOwnerEmail);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        providerDataAccessor.deleteProjects(List.of(providerProject));\n+\n+        Mockito.verify(providerProjectRepository).deleteByHref(Mockito.any());\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefTest() throws Exception {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+        providerProjectEntity.setId(1L);\n+        ProviderUserProjectRelation providerUserProjectRelation = new ProviderUserProjectRelation(2L, 1L);\n+        ProviderUserEntity providerUserEntity = new ProviderUserEntity(projectOwnerEmail, Boolean.TRUE, 1L);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+        ProviderUserProjectRelationRepository providerUserProjectRelationRepository = Mockito.mock(ProviderUserProjectRelationRepository.class);\n+        ProviderUserRepository providerUserRepository = Mockito.mock(ProviderUserRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.of(providerProjectEntity));\n+        Mockito.when(providerUserProjectRelationRepository.findByProviderProjectId(Mockito.any())).thenReturn(List.of(providerUserProjectRelation));\n+        Mockito.when(providerUserRepository.findAllById(Mockito.any())).thenReturn(List.of(providerUserEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, providerUserProjectRelationRepository, providerUserRepository, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(href);\n+\n+        assertEquals(1, emailAddresses.size());\n+        assertTrue(emailAddresses.contains(projectOwnerEmail));\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefEmptyTest() {\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(\"test-href\");\n+\n+        assertEquals(0, emailAddresses.size());\n+    }\n+\n+    @Test\n+    public void getUsersByProviderConfigIdTest() {\n+        Boolean optOut = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NzAyMw==", "bodyText": "Unless that would break the assertEquals, then this makes sense.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418057023", "createdAt": "2020-04-30T14:34:28Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectEntity;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectRepository;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelation;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelationRepository;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n+\n+public class DefaultProviderDataAccessorTest {\n+    private final String name = \"name-test\";\n+    private final String description = \"decription-test\";\n+    private final String href = \"href-test\";\n+    private final String projectOwnerEmail = \"noreply@blackducksoftware.com\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameTest() throws Exception {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameEmptyTest() throws Exception {\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(0, providerProjectList.size());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigIdTest() {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigId(1L);\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void deleteProjectsTest() {\n+        ProviderProject providerProject = new ProviderProject(name, description, href, projectOwnerEmail);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        providerDataAccessor.deleteProjects(List.of(providerProject));\n+\n+        Mockito.verify(providerProjectRepository).deleteByHref(Mockito.any());\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefTest() throws Exception {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+        providerProjectEntity.setId(1L);\n+        ProviderUserProjectRelation providerUserProjectRelation = new ProviderUserProjectRelation(2L, 1L);\n+        ProviderUserEntity providerUserEntity = new ProviderUserEntity(projectOwnerEmail, Boolean.TRUE, 1L);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+        ProviderUserProjectRelationRepository providerUserProjectRelationRepository = Mockito.mock(ProviderUserProjectRelationRepository.class);\n+        ProviderUserRepository providerUserRepository = Mockito.mock(ProviderUserRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.of(providerProjectEntity));\n+        Mockito.when(providerUserProjectRelationRepository.findByProviderProjectId(Mockito.any())).thenReturn(List.of(providerUserProjectRelation));\n+        Mockito.when(providerUserRepository.findAllById(Mockito.any())).thenReturn(List.of(providerUserEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, providerUserProjectRelationRepository, providerUserRepository, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(href);\n+\n+        assertEquals(1, emailAddresses.size());\n+        assertTrue(emailAddresses.contains(projectOwnerEmail));\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefEmptyTest() {\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(\"test-href\");\n+\n+        assertEquals(0, emailAddresses.size());\n+    }\n+\n+    @Test\n+    public void getUsersByProviderConfigIdTest() {\n+        Boolean optOut = Boolean.TRUE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NjY4Mg=="}, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTIxNDI1OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNDo0NFrOGOsMDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNDo0NFrOGOsMDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1NzIzMA==", "bodyText": "This could be an isEmpty check", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418057230", "createdAt": "2020-04-30T14:34:44Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectEntity;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectRepository;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelation;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelationRepository;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n+\n+public class DefaultProviderDataAccessorTest {\n+    private final String name = \"name-test\";\n+    private final String description = \"decription-test\";\n+    private final String href = \"href-test\";\n+    private final String projectOwnerEmail = \"noreply@blackducksoftware.com\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameTest() throws Exception {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameEmptyTest() throws Exception {\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(0, providerProjectList.size());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigIdTest() {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigId(1L);\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void deleteProjectsTest() {\n+        ProviderProject providerProject = new ProviderProject(name, description, href, projectOwnerEmail);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        providerDataAccessor.deleteProjects(List.of(providerProject));\n+\n+        Mockito.verify(providerProjectRepository).deleteByHref(Mockito.any());\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefTest() throws Exception {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+        providerProjectEntity.setId(1L);\n+        ProviderUserProjectRelation providerUserProjectRelation = new ProviderUserProjectRelation(2L, 1L);\n+        ProviderUserEntity providerUserEntity = new ProviderUserEntity(projectOwnerEmail, Boolean.TRUE, 1L);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+        ProviderUserProjectRelationRepository providerUserProjectRelationRepository = Mockito.mock(ProviderUserProjectRelationRepository.class);\n+        ProviderUserRepository providerUserRepository = Mockito.mock(ProviderUserRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.of(providerProjectEntity));\n+        Mockito.when(providerUserProjectRelationRepository.findByProviderProjectId(Mockito.any())).thenReturn(List.of(providerUserProjectRelation));\n+        Mockito.when(providerUserRepository.findAllById(Mockito.any())).thenReturn(List.of(providerUserEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, providerUserProjectRelationRepository, providerUserRepository, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(href);\n+\n+        assertEquals(1, emailAddresses.size());\n+        assertTrue(emailAddresses.contains(projectOwnerEmail));\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefEmptyTest() {\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(\"test-href\");\n+\n+        assertEquals(0, emailAddresses.size());\n+    }\n+\n+    @Test\n+    public void getUsersByProviderConfigIdTest() {\n+        Boolean optOut = Boolean.TRUE;\n+\n+        ProviderUserEntity providerUserEntity = new ProviderUserEntity(projectOwnerEmail, optOut, 1L);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+        ProviderUserRepository providerUserRepository = Mockito.mock(ProviderUserRepository.class);\n+\n+        Mockito.when(providerUserRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerUserEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, providerUserRepository, null);\n+        List<ProviderUserModel> providerUserModelList = providerDataAccessor.getUsersByProviderConfigId(1L);\n+\n+        assertEquals(1, providerUserModelList.size());\n+        ProviderUserModel providerUserModel = providerUserModelList.get(0);\n+        assertEquals(projectOwnerEmail, providerUserModel.getEmailAddress());\n+        assertEquals(optOut, providerUserModel.getOptOut());\n+    }\n+\n+    @Test\n+    public void getUsersByProviderConfigIdNullTest() {\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(null, null, null, null);\n+        List<ProviderUserModel> providerUserModelList = providerDataAccessor.getUsersByProviderConfigId(null);\n+\n+        assertEquals(0, providerUserModelList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwMTIyNDQxOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNzowMlrOGOsS0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0zMFQxNDozNzowMlrOGOsS0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODA1ODk2Mg==", "bodyText": "This chunk of asserts also looks like it's used in multiple places. A private method may help", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/967#discussion_r418058962", "createdAt": "2020-04-30T14:37:02Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessorTest.java", "diffHunk": "@@ -0,0 +1,251 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderProject;\n+import com.synopsys.integration.alert.common.persistence.model.ProviderUserModel;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectEntity;\n+import com.synopsys.integration.alert.database.provider.project.ProviderProjectRepository;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelation;\n+import com.synopsys.integration.alert.database.provider.project.ProviderUserProjectRelationRepository;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserEntity;\n+import com.synopsys.integration.alert.database.provider.user.ProviderUserRepository;\n+\n+public class DefaultProviderDataAccessorTest {\n+    private final String name = \"name-test\";\n+    private final String description = \"decription-test\";\n+    private final String href = \"href-test\";\n+    private final String projectOwnerEmail = \"noreply@blackducksoftware.com\";\n+\n+    private final String KEY_PROVIDER_CONFIG_NAME = ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME;\n+    private final String fieldValue = \"test-channel.common.name-value\";\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameTest() throws Exception {\n+        ConfigurationModel configurationModel = createConfigurationModel();\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.of(configurationModel));\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigNameEmptyTest() throws Exception {\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(configurationAccessor.getProviderConfigurationByName(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigName(\"test-providerConfigName\");\n+\n+        assertEquals(0, providerProjectList.size());\n+    }\n+\n+    @Test\n+    public void getProjectsByProviderConfigIdTest() {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+\n+        ConfigurationAccessor configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerProjectEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, configurationAccessor);\n+        List<ProviderProject> providerProjectList = providerDataAccessor.getProjectsByProviderConfigId(1L);\n+\n+        assertEquals(1, providerProjectList.size());\n+        ProviderProject providerProject = providerProjectList.get(0);\n+        assertEquals(name, providerProject.getName());\n+        assertEquals(description, providerProject.getDescription());\n+        assertEquals(href, providerProject.getHref());\n+        assertEquals(projectOwnerEmail, providerProject.getProjectOwnerEmail());\n+    }\n+\n+    @Test\n+    public void deleteProjectsTest() {\n+        ProviderProject providerProject = new ProviderProject(name, description, href, projectOwnerEmail);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        providerDataAccessor.deleteProjects(List.of(providerProject));\n+\n+        Mockito.verify(providerProjectRepository).deleteByHref(Mockito.any());\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefTest() throws Exception {\n+        ProviderProjectEntity providerProjectEntity = new ProviderProjectEntity(name, description, href, projectOwnerEmail, 1L);\n+        providerProjectEntity.setId(1L);\n+        ProviderUserProjectRelation providerUserProjectRelation = new ProviderUserProjectRelation(2L, 1L);\n+        ProviderUserEntity providerUserEntity = new ProviderUserEntity(projectOwnerEmail, Boolean.TRUE, 1L);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+        ProviderUserProjectRelationRepository providerUserProjectRelationRepository = Mockito.mock(ProviderUserProjectRelationRepository.class);\n+        ProviderUserRepository providerUserRepository = Mockito.mock(ProviderUserRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.of(providerProjectEntity));\n+        Mockito.when(providerUserProjectRelationRepository.findByProviderProjectId(Mockito.any())).thenReturn(List.of(providerUserProjectRelation));\n+        Mockito.when(providerUserRepository.findAllById(Mockito.any())).thenReturn(List.of(providerUserEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, providerUserProjectRelationRepository, providerUserRepository, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(href);\n+\n+        assertEquals(1, emailAddresses.size());\n+        assertTrue(emailAddresses.contains(projectOwnerEmail));\n+    }\n+\n+    @Test\n+    public void getEmailAddressesForProjectHrefEmptyTest() {\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+\n+        Mockito.when(providerProjectRepository.findFirstByHref(Mockito.any())).thenReturn(Optional.empty());\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, null, null);\n+        Set<String> emailAddresses = providerDataAccessor.getEmailAddressesForProjectHref(\"test-href\");\n+\n+        assertEquals(0, emailAddresses.size());\n+    }\n+\n+    @Test\n+    public void getUsersByProviderConfigIdTest() {\n+        Boolean optOut = Boolean.TRUE;\n+\n+        ProviderUserEntity providerUserEntity = new ProviderUserEntity(projectOwnerEmail, optOut, 1L);\n+\n+        ProviderProjectRepository providerProjectRepository = Mockito.mock(ProviderProjectRepository.class);\n+        ProviderUserRepository providerUserRepository = Mockito.mock(ProviderUserRepository.class);\n+\n+        Mockito.when(providerUserRepository.findByProviderConfigId(Mockito.any())).thenReturn(List.of(providerUserEntity));\n+\n+        DefaultProviderDataAccessor providerDataAccessor = new DefaultProviderDataAccessor(providerProjectRepository, null, providerUserRepository, null);\n+        List<ProviderUserModel> providerUserModelList = providerDataAccessor.getUsersByProviderConfigId(1L);\n+\n+        assertEquals(1, providerUserModelList.size());\n+        ProviderUserModel providerUserModel = providerUserModelList.get(0);\n+        assertEquals(projectOwnerEmail, providerUserModel.getEmailAddress());\n+        assertEquals(optOut, providerUserModel.getOptOut());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f3b2d84e181b1009f69fba80c03e529594a56b3"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1994, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}