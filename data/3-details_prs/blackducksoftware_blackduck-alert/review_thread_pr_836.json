{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5Mjc3NzY4", "number": 836, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMjoxNlrODcEIQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1OTowMFrODcEvSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzU0MzY4OnYy", "diffSide": "RIGHT", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/rest/model/ConfigurationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMjoxNlrOFj6Vmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMToyMjoxNlrOFj6Vmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIwMDI4Mg==", "bodyText": "No need to have a space before the end of the method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/836#discussion_r373200282", "createdAt": "2020-01-30T21:22:16Z", "author": {"login": "gkillough"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/rest/model/ConfigurationTest.java", "diffHunk": "@@ -0,0 +1,33 @@\n+package com.synopsys.integration.alert.common.rest.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+\n+public class ConfigurationTest {\n+    @Test\n+    public void getFieldAccessorTest() {\n+        String fieldKey = \"Key1\";\n+\n+        ConfigurationFieldModel testConfigurationFieldModel = Mockito.mock(ConfigurationFieldModel.class);\n+        Map<String, ConfigurationFieldModel> keyToFieldMapTest = new HashMap<>();\n+        keyToFieldMapTest.put(fieldKey, testConfigurationFieldModel);\n+\n+        Configuration testConfig = new Configuration(keyToFieldMapTest);\n+        FieldAccessor testFieldAccessor = testConfig.getFieldAccessor();\n+        Optional<ConfigurationFieldModel> newConfigurationFieldModel = testFieldAccessor.getField(fieldKey);\n+\n+        assertTrue(newConfigurationFieldModel.isPresent());\n+        assertEquals(testConfigurationFieldModel, newConfigurationFieldModel.get());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3770691a3a8f8eb7822a7a6f9bf89d0b3699452"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzYwNzkwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/rest/model/AlertPagedModelTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0NjoyNlrOFj69_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo0NjoyNlrOFj69_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxMDYyMw==", "bodyText": "All of these methods look quite similar. You can define testAlertPagedModel in the @BeforeEach method instead of manually doing it every time.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/836#discussion_r373210623", "createdAt": "2020-01-30T21:46:26Z", "author": {"login": "bamandel"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/rest/model/AlertPagedModelTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.alert.common.rest.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+public class AlertPagedModelTest {\n+    int testTotalPages = 1;\n+    int testCurrentPage = 2;\n+    int testPageSize = 3;\n+    List<AlertSerializableModel> testContent;\n+\n+    @BeforeEach\n+    public void init() {\n+        testContent = new ArrayList<>();\n+        AlertSerializableModel testAlertSerializableModel = Mockito.mock(AlertSerializableModel.class);\n+        testContent.add(testAlertSerializableModel);\n+    }\n+\n+    @Test\n+    public void getTotalPagesTest() {\n+        AlertPagedModel<AlertSerializableModel> testAlertPagedModel = new AlertPagedModel<>(testTotalPages, testCurrentPage, testPageSize, testContent);\n+        assertEquals(testTotalPages, testAlertPagedModel.getTotalPages());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3770691a3a8f8eb7822a7a6f9bf89d0b3699452"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzY0MzYzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/rest/model/FieldValueModelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1OTowMFrOFj7T0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMTo1OTowMFrOFj7T0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzIxNjIwOQ==", "bodyText": "Instead of adding a comment, you should be able to put a variation of this string in the assertTrue. When it fails, it'll print out your message.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/836#discussion_r373216209", "createdAt": "2020-01-30T21:59:00Z", "author": {"login": "bamandel"}, "path": "alert-common/src/test/java/com/synopsys/integration/alert/common/rest/model/FieldValueModelTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+package com.synopsys.integration.alert.common.rest.model;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class FieldValueModelTest {\n+    String testValue = \"valueToTest\";\n+\n+    private FieldValueModel createEmptyFieldValueModel() {\n+        List<String> values = new ArrayList();\n+        return new FieldValueModel(values, Boolean.TRUE);\n+    }\n+\n+    @Test\n+    public void getValuesTest() {\n+        String duplicateTestValue = testValue;\n+        List<String> values = new ArrayList();\n+        values.add(testValue);\n+        values.add(duplicateTestValue);\n+        FieldValueModel testFieldValueModel = new FieldValueModel(values, Boolean.TRUE);\n+\n+        assertTrue(testFieldValueModel.getValues().containsAll(values));\n+        // getValues() will create a Set, this assert verifies duplicate values removed\n+        assertTrue(testFieldValueModel.getValues().size() == 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3770691a3a8f8eb7822a7a6f9bf89d0b3699452"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2072, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}