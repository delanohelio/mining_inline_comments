{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTg0OTkw", "number": 1188, "title": " system controller", "bodyText": "Convert SystemActions to use ActionResponse and convert tests to parameterized tests.", "createdAt": "2020-09-24T17:09:27Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188", "merged": true, "mergeCommit": {"oid": "0cfc58ed7c9f2c4b010169a857231cb0041467bb"}, "closed": true, "closedAt": "2020-09-24T18:04:20Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMDBJvAH2gAyNDkyNTg0OTkwOmE1ZWVjMmMwOGJhMjc5ZDEyMTM5YmZkMmY1MDA1ZmRlZjdiNzAyM2I=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMFDhfAH2gAyNDkyNTg0OTkwOjRhN2Q2ZmE4ZWQxNjM5YWJiNjhlZTY3NWEzODNkMjY3NGQwNWI0NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a5eec2c08ba279d12139bfd2f5005fdef7b7023b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a5eec2c08ba279d12139bfd2f5005fdef7b7023b", "committedDate": "2020-09-24T15:35:18Z", "message": "refactor: Change system controller to use ActionResponse."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa6a9761ee8177ac6562404cca489284e433ce18", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/aa6a9761ee8177ac6562404cca489284e433ce18", "committedDate": "2020-09-24T16:55:53Z", "message": "test: Use parameterized tests, add a few, and make methods private."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06aa66af4a29ded1b18a22aa428ea994a24b2460", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/06aa66af4a29ded1b18a22aa428ea994a24b2460", "committedDate": "2020-09-24T16:57:35Z", "message": "refactor: Remove unused dependencies."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f683c7cf21f9e9be8bdef174fa25f20eb535a605", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f683c7cf21f9e9be8bdef174fa25f20eb535a605", "committedDate": "2020-09-24T16:58:07Z", "message": "Merge remote-tracking branch 'origin/master' into ps_system_controller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/50047b87cda04d282f6d23fe466734a26c083b5b", "committedDate": "2020-09-24T17:04:11Z", "message": "chore: Update copyright header."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Nzg4MDU4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#pullrequestreview-495788058", "createdAt": "2020-09-24T17:18:44Z", "commit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1Nzg5MTQ2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#pullrequestreview-495789146", "createdAt": "2020-09-24T17:20:05Z", "commit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzkxNjA4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#pullrequestreview-495791608", "createdAt": "2020-09-24T17:23:15Z", "commit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzoxNlrOHXlEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzoxNlrOHXlEmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjY4MQ==", "bodyText": "Are we sure we want to use a parameterized test here? It looks like we just want to create a start and end time list and iterate over it in the test. Parameterized tests will just make it harder to debug the test in my opinion.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#discussion_r494486681", "createdAt": "2020-09-24T17:23:16Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/actions/SystemActionsTest.java", "diffHunk": "@@ -1,157 +1,88 @@\n package com.synopsys.integration.alert.web.actions;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n \n-import com.synopsys.integration.alert.common.descriptor.accessor.SettingsUtility;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.persistence.model.SystemMessageModel;\n-import com.synopsys.integration.alert.common.rest.ProxyManager;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n-import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptorKey;\n import com.synopsys.integration.alert.database.api.DefaultSystemStatusUtility;\n import com.synopsys.integration.alert.database.system.DefaultSystemMessageUtility;\n+import com.synopsys.integration.alert.web.api.system.MultiSystemMessageModel;\n import com.synopsys.integration.alert.web.api.system.SystemActions;\n-import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.rest.RestConstants;\n \n public class SystemActionsTest {\n-    private static final SettingsDescriptorKey SETTINGS_DESCRIPTOR_KEY = new SettingsDescriptorKey();\n-\n     private DefaultSystemStatusUtility defaultSystemStatusUtility;\n     private DefaultSystemMessageUtility defaultSystemMessageUtility;\n-    private FieldModelProcessor fieldModelProcessor;\n-    private SettingsUtility settingsUtility;\n \n     @BeforeEach\n-    public void initiailize() throws AlertException {\n+    public void initiailize() {\n         defaultSystemStatusUtility = Mockito.mock(DefaultSystemStatusUtility.class);\n         defaultSystemMessageUtility = Mockito.mock(DefaultSystemMessageUtility.class);\n-        settingsUtility = Mockito.mock(SettingsUtility.class);\n-        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n         List<SystemMessageModel> messages = createSystemMessageList();\n         Mockito.when(defaultSystemMessageUtility.getSystemMessages()).thenReturn(messages);\n+        Mockito.when(defaultSystemMessageUtility.getSystemMessagesBefore(Mockito.any())).thenReturn(messages);\n         Mockito.when(defaultSystemMessageUtility.getSystemMessagesAfter(Mockito.any())).thenReturn(messages);\n-        Mockito.when(settingsUtility.getKey()).thenReturn(SETTINGS_DESCRIPTOR_KEY);\n-        Mockito.when(settingsUtility.doesConfigurationExist()).thenReturn(true);\n+        Mockito.when(defaultSystemMessageUtility.findBetween(Mockito.any())).thenReturn(messages);\n     }\n \n-    @Test\n-    public void getSystemMessagesSinceStartup() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesSinceStartup();\n-        Mockito.verify(defaultSystemStatusUtility).getStartupTime();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n+    public static List<Pair<String, String>> getStartAndEndTimes() {\n+        return List.of(\n+            Pair.of(null, null),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", null),\n+            Pair.of(null, \"2018-11-13T00:00:00.000Z\"),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\")\n+        );\n     }\n \n-    @Test\n-    public void testGetSystemMessagesAfter() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesAfter(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBefore() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBefore(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesBefore(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBetween() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBetween(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).findBetween(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessages() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessages();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessages();\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "originalPosition": 107}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzkzMTc0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#pullrequestreview-495793174", "createdAt": "2020-09-24T17:25:15Z", "commit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbe575645b341760dfd54de979ac14e63c16a243", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bbe575645b341760dfd54de979ac14e63c16a243", "committedDate": "2020-09-24T17:28:48Z", "message": "refactor: Extend AlertSerializableModel."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODE0NzY2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#pullrequestreview-495814766", "createdAt": "2020-09-24T17:54:16Z", "commit": {"oid": "bbe575645b341760dfd54de979ac14e63c16a243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODE1MjQ0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#pullrequestreview-495815244", "createdAt": "2020-09-24T17:54:56Z", "commit": {"oid": "bbe575645b341760dfd54de979ac14e63c16a243"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a7d6fa8ed1639abb68ee675a383d2674d05b447", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4a7d6fa8ed1639abb68ee675a383d2674d05b447", "committedDate": "2020-09-24T17:57:42Z", "message": "refactor: Add missing extends AlertSerializableModel."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3516, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}