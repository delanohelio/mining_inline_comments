{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc2MzI1MTI5", "number": 1145, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxNTozM1rOEeU4BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyMjowNlrOEeVBxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM0NzU2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/web/controller/SystemControllerTestIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxNTozM1rOHJ6qEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoxNTozM1rOHJ6qEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2MDI3Mg==", "bodyText": "You might want to delete this commented code.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1145#discussion_r480160272", "createdAt": "2020-08-31T14:15:33Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/web/controller/SystemControllerTestIT.java", "diffHunk": "@@ -40,7 +38,7 @@\n     private final String SYSTEM_INITIAL_SETUP_BASE_URL = BaseController.BASE_PATH + \"/system/setup/initial\";\n     private final String SYSTEM_INITIAL_DESCRIPTOR = BaseController.BASE_PATH + \"/system/setup/descriptor\";\n     private final Gson gson = new Gson();\n-    private final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);\n+    //private final ContentConverter contentConverter = Mockito.mock(ContentConverter.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b34d5bf2f91595c296499786aaa771d5f9534311"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMjM3MjU1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/web/controller/SystemControllerTestIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyMjowNlrOHJ65qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDoyMjowNlrOHJ65qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE2NDI2Nw==", "bodyText": "you could throw a failed assertion after this line if you're expecting this exception to be thrown", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1145#discussion_r480164267", "createdAt": "2020-08-31T14:22:06Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/controller/SystemControllerTestIT.java", "diffHunk": "@@ -94,61 +92,48 @@ public void testPostInitialSystemSetup() throws Exception {\n \n     @Test\n     public void testGetLatestMessagesHandling() {\n-        ResponseFactory responseFactory = new ResponseFactory();\n-        SystemController handler = new SystemController(systemActions, contentConverter, responseFactory);\n-        ResponseEntity<String> responseEntity = handler.getLatestSystemMessages();\n+        SystemController handler = new SystemController(systemActions);\n+        handler.getLatestSystemMessages();\n         Mockito.verify(systemActions).getSystemMessagesSinceStartup();\n-        Mockito.verify(contentConverter).getJsonString(Mockito.any());\n-        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n     }\n \n     @Test\n-    public void testGetSystemMessagesgetAll() {\n-        ResponseFactory responseFactory = new ResponseFactory();\n-        SystemController handler = new SystemController(systemActions, contentConverter, responseFactory);\n-        ResponseEntity<String> responseEntity = handler.getSystemMessages(\"\", \"\");\n+    public void testGetSystemMessagesGetAll() {\n+        SystemController handler = new SystemController(systemActions);\n+        handler.getSystemMessages(\"\", \"\");\n         Mockito.verify(systemActions).getSystemMessages();\n-        Mockito.verify(contentConverter).getJsonString(Mockito.any());\n-        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n     }\n \n     @Test\n     public void testGetSystemMessagesGetAfter() throws Exception {\n-        ResponseFactory responseFactory = new ResponseFactory();\n-        SystemController handler = new SystemController(systemActions, contentConverter, responseFactory);\n-        ResponseEntity<String> responseEntity = handler.getSystemMessages(\"2018-11-13T00:00:00.000Z\", null);\n+        SystemController handler = new SystemController(systemActions);\n+        handler.getSystemMessages(\"2018-11-13T00:00:00.000Z\", null);\n         Mockito.verify(systemActions).getSystemMessagesAfter(Mockito.anyString());\n-        Mockito.verify(contentConverter).getJsonString(Mockito.any());\n-        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n     }\n \n     @Test\n     public void testGetSystemMessagesGetBefore() throws Exception {\n-        ResponseFactory responseFactory = new ResponseFactory();\n-        SystemController handler = new SystemController(systemActions, contentConverter, responseFactory);\n-        ResponseEntity<String> responseEntity = handler.getSystemMessages(null, \"2018-11-13T00:00:00.000Z\");\n+        SystemController handler = new SystemController(systemActions);\n+        handler.getSystemMessages(null, \"2018-11-13T00:00:00.000Z\");\n         Mockito.verify(systemActions).getSystemMessagesBefore(Mockito.anyString());\n-        Mockito.verify(contentConverter).getJsonString(Mockito.any());\n-        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n     }\n \n     @Test\n     public void testGetSystemMessagesGetBetween() throws Exception {\n-        ResponseFactory responseFactory = new ResponseFactory();\n-        SystemController handler = new SystemController(systemActions, contentConverter, responseFactory);\n-        ResponseEntity<String> responseEntity = handler.getSystemMessages(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n+        SystemController handler = new SystemController(systemActions);\n+        handler.getSystemMessages(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n         Mockito.verify(systemActions).getSystemMessagesBetween(Mockito.anyString(), Mockito.anyString());\n-        Mockito.verify(contentConverter).getJsonString(Mockito.any());\n-        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());\n     }\n \n     @Test\n     public void testGetSystemMessagesBadDateRange() throws Exception {\n-        ResponseFactory responseFactory = new ResponseFactory();\n-        SystemController handler = new SystemController(systemActions, contentConverter, responseFactory);\n+        SystemController handler = new SystemController(systemActions);\n         Mockito.when(systemActions.getSystemMessagesBetween(Mockito.anyString(), Mockito.anyString())).thenThrow(new ParseException(\"error parsing date \", 0));\n-        ResponseEntity<String> responseEntity = handler.getSystemMessages(\"bad-start-time\", \"bad-end-time\");\n+        try {\n+            handler.getSystemMessages(\"bad-start-time\", \"bad-end-time\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6bea4b41988964b0b27cf0e036004b7d74970ab1"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1714, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}