{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5ODEzNTU3", "number": 1278, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTozMDozMVrOE_NTNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxODozOVrOE_OxcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzEzNjU0OnYy", "diffSide": "LEFT", "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTozMDozMVrOH8yc8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTo0MjozMVrOH8zCGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMzIxNg==", "bodyText": "Why is this no longer needed?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1278#discussion_r533503216", "createdAt": "2020-12-01T15:30:31Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "diffHunk": "@@ -516,30 +525,11 @@ public void validateJobsByIdEmptyListTest() {\n         assertTrue(actionResponse.hasContent());\n     }\n \n-    @Test\n-    public void validateJobsByIdInternalServerErrorTest() throws Exception {\n-        JobIdsRequestModel jobIdsRequestModel = new JobIdsRequestModel(List.of(jobId));\n-        DescriptorKey descriptorKey = createDescriptorKey();\n-        Descriptor descriptor = createDescriptor(descriptorType);\n-\n-        Mockito.when(descriptorMap.getDescriptorMap()).thenReturn(Map.of(descriptorKey, descriptor));\n-        Mockito.when(authorizationManager.anyReadPermission(Mockito.any())).thenReturn(true);\n-        Mockito.when(jobAccessor.getJobsById(Mockito.any())).thenReturn(List.of(configurationJobModel));\n-\n-        Mockito.doThrow(new AlertException(\"Exception for Alert test\")).when(fieldModelProcessor).performAfterReadAction(Mockito.any());\n-\n-        ActionResponse<List<JobFieldStatuses>> actionResponse = jobConfigActions.validateJobsById(jobIdsRequestModel);\n-\n-        assertTrue(actionResponse.isError());\n-        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, actionResponse.getHttpStatus());\n-        assertFalse(actionResponse.hasContent());\n-    }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b165d10c3db74ed1961b62d8029a443f012181ea"}, "originalPosition": 257}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUxMjczMA==", "bodyText": "The method JobConfigActions.convertJobDatabaseModelToRestModel(...), the method that threw the exception this test was for, is no longer used in JobConfigActions.validateJobsById(...). So there is no longer a need to test exception handling as there is none.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1278#discussion_r533512730", "createdAt": "2020-12-01T15:42:31Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "diffHunk": "@@ -516,30 +525,11 @@ public void validateJobsByIdEmptyListTest() {\n         assertTrue(actionResponse.hasContent());\n     }\n \n-    @Test\n-    public void validateJobsByIdInternalServerErrorTest() throws Exception {\n-        JobIdsRequestModel jobIdsRequestModel = new JobIdsRequestModel(List.of(jobId));\n-        DescriptorKey descriptorKey = createDescriptorKey();\n-        Descriptor descriptor = createDescriptor(descriptorType);\n-\n-        Mockito.when(descriptorMap.getDescriptorMap()).thenReturn(Map.of(descriptorKey, descriptor));\n-        Mockito.when(authorizationManager.anyReadPermission(Mockito.any())).thenReturn(true);\n-        Mockito.when(jobAccessor.getJobsById(Mockito.any())).thenReturn(List.of(configurationJobModel));\n-\n-        Mockito.doThrow(new AlertException(\"Exception for Alert test\")).when(fieldModelProcessor).performAfterReadAction(Mockito.any());\n-\n-        ActionResponse<List<JobFieldStatuses>> actionResponse = jobConfigActions.validateJobsById(jobIdsRequestModel);\n-\n-        assertTrue(actionResponse.isError());\n-        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, actionResponse.getHttpStatus());\n-        assertFalse(actionResponse.hasContent());\n-    }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUwMzIxNg=="}, "originalCommit": {"oid": "b165d10c3db74ed1961b62d8029a443f012181ea"}, "originalPosition": 257}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzI3MTUzOnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTo1NzowMlrOH8zwCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNTo1NzowMlrOH8zwCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzUyNDQ4OQ==", "bodyText": "It might be better to have this listed closer to where it's actually used", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1278#discussion_r533524489", "createdAt": "2020-12-01T15:57:02Z", "author": {"login": "bamandel"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -248,6 +248,7 @@ private DistributionJobModel createJobWithId(UUID jobId, DistributionJobRequestM\n     }\n \n     private DistributionJobModel convertToDistributionJobModel(DistributionJobEntity jobEntity) {\n+        UUID jobId = jobEntity.getJobId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b165d10c3db74ed1961b62d8029a443f012181ea"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM3MDE2OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobFieldModelPopulationUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxNjo1OVrOH80tig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjo0Mjo0NFrOH815Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MDIzNA==", "bodyText": "Are all of these constants no longer available in this package? Using the same constants would cut down on any potential misspellings.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1278#discussion_r533540234", "createdAt": "2020-12-01T16:16:59Z", "author": {"login": "bamandel"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobFieldModelPopulationUtils.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * web\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.descriptor.api.BlackDuckProviderKey;\n+\n+public class JobFieldModelPopulationUtils {\n+    public static JobFieldModel createJobFieldModel(DistributionJobModel jobModel) {\n+        FieldModel providerFieldModel = new FieldModel(new BlackDuckProviderKey().getUniversalKey(), ConfigContextEnum.DISTRIBUTION.name(), new HashMap<>());\n+        populateProviderFields(providerFieldModel, jobModel);\n+\n+        FieldModel channelFieldModel = new FieldModel(jobModel.getChannelDescriptorName(), ConfigContextEnum.DISTRIBUTION.name(), new HashMap<>());\n+        populateChannelFields(channelFieldModel, jobModel);\n+\n+        String jobIdString = Optional.ofNullable(jobModel.getJobId())\n+                                 .map(UUID::toString)\n+                                 .orElse(null);\n+        return new JobFieldModel(jobIdString, Set.of(providerFieldModel, channelFieldModel));\n+    }\n+\n+    public static void populateProviderFields(FieldModel providerFieldModel, DistributionJobModel jobModel) {\n+        String providerCommonConfigId = Optional.ofNullable(jobModel.getBlackDuckGlobalConfigId())\n+                                            .map(String::valueOf)\n+                                            .orElse(null);\n+        putField(providerFieldModel, \"provider.common.config.id\", providerCommonConfigId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b165d10c3db74ed1961b62d8029a443f012181ea"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU1OTU1OA==", "bodyText": "Ugh lol. I stole a lot of this from the DB util which didn't have access to these field constants. I'll fix it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1278#discussion_r533559558", "createdAt": "2020-12-01T16:42:44Z", "author": {"login": "gkillough"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobFieldModelPopulationUtils.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * web\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.descriptor.api.BlackDuckProviderKey;\n+\n+public class JobFieldModelPopulationUtils {\n+    public static JobFieldModel createJobFieldModel(DistributionJobModel jobModel) {\n+        FieldModel providerFieldModel = new FieldModel(new BlackDuckProviderKey().getUniversalKey(), ConfigContextEnum.DISTRIBUTION.name(), new HashMap<>());\n+        populateProviderFields(providerFieldModel, jobModel);\n+\n+        FieldModel channelFieldModel = new FieldModel(jobModel.getChannelDescriptorName(), ConfigContextEnum.DISTRIBUTION.name(), new HashMap<>());\n+        populateChannelFields(channelFieldModel, jobModel);\n+\n+        String jobIdString = Optional.ofNullable(jobModel.getJobId())\n+                                 .map(UUID::toString)\n+                                 .orElse(null);\n+        return new JobFieldModel(jobIdString, Set.of(providerFieldModel, channelFieldModel));\n+    }\n+\n+    public static void populateProviderFields(FieldModel providerFieldModel, DistributionJobModel jobModel) {\n+        String providerCommonConfigId = Optional.ofNullable(jobModel.getBlackDuckGlobalConfigId())\n+                                            .map(String::valueOf)\n+                                            .orElse(null);\n+        putField(providerFieldModel, \"provider.common.config.id\", providerCommonConfigId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MDIzNA=="}, "originalCommit": {"oid": "b165d10c3db74ed1961b62d8029a443f012181ea"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NzM3Nzc3OnYy", "diffSide": "RIGHT", "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobFieldModelPopulationUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxODozOVrOH80yXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNjoxODozOVrOH80yXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU0MTQ3MQ==", "bodyText": "Do we want to make util classes final? I don't see any reason why we'd want someone extending this.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1278#discussion_r533541471", "createdAt": "2020-12-01T16:18:39Z", "author": {"login": "bamandel"}, "path": "web/src/main/java/com/synopsys/integration/alert/web/api/job/JobFieldModelPopulationUtils.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * web\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.descriptor.api.BlackDuckProviderKey;\n+\n+public class JobFieldModelPopulationUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b165d10c3db74ed1961b62d8029a443f012181ea"}, "originalPosition": 47}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2222, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}