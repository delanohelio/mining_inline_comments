{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjI5OTIx", "number": 1304, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNjowNlrOFFyIXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozOTozMVrOFGQcBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNjA4NTQyOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNjowNlrOIGdzdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNjowNlrOIGdzdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MDY3Ng==", "bodyText": "I believe there is a slight spelling mistake here 'may'", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r543650676", "createdAt": "2020-12-15T20:06:06Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for may fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9b034945899a141550402a687ba2cf1a718deb"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTAyMTA2OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozNDoxMlrOIHLRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozNToxMVrOIHLVNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NTcxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotBlank(fieldReplacementValue)) {\n          \n          \n            \n                        this.fieldReplacementValue = fieldReplacementValue;\n          \n          \n            \n                    }\n          \n          \n            \n                    this.fieldReplacementValue = StringUtils.trimToNull(fieldReplacementValue);", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544395719", "createdAt": "2020-12-16T15:34:12Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -22,21 +22,38 @@\n  */\n package com.synopsys.integration.alert.channel.jira.common.model;\n \n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n public class JiraCustomFieldConfig {\n     private final String fieldName;\n-    private final String fieldValue;\n+    private final String fieldOriginalValue;\n+    private @Nullable String fieldReplacementValue;\n \n-    public JiraCustomFieldConfig(String fieldName, String fieldValue) {\n+    public JiraCustomFieldConfig(String fieldName, String fieldOriginalValue) {\n         this.fieldName = fieldName;\n-        this.fieldValue = fieldValue;\n+        this.fieldOriginalValue = fieldOriginalValue;\n     }\n \n     public String getFieldName() {\n         return fieldName;\n     }\n \n-    public String getFieldValue() {\n-        return fieldValue;\n+    public String getFieldOriginalValue() {\n+        return fieldOriginalValue;\n+    }\n+\n+    public Optional<String> getFieldReplacementValue() {\n+        return Optional.ofNullable(fieldReplacementValue);\n+    }\n+\n+    public void setFieldReplacementValue(String fieldReplacementValue) {\n+        // Leave the field null if it would be set to a blank value\n+        if (StringUtils.isNotBlank(fieldReplacementValue)) {\n+            this.fieldReplacementValue = fieldReplacementValue;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NjU5OQ==", "bodyText": "Not sure if this is better since you are re-assigning it every time, but I think it's a little clearer and doesn't need a comment.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544396599", "createdAt": "2020-12-16T15:35:11Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -22,21 +22,38 @@\n  */\n package com.synopsys.integration.alert.channel.jira.common.model;\n \n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n public class JiraCustomFieldConfig {\n     private final String fieldName;\n-    private final String fieldValue;\n+    private final String fieldOriginalValue;\n+    private @Nullable String fieldReplacementValue;\n \n-    public JiraCustomFieldConfig(String fieldName, String fieldValue) {\n+    public JiraCustomFieldConfig(String fieldName, String fieldOriginalValue) {\n         this.fieldName = fieldName;\n-        this.fieldValue = fieldValue;\n+        this.fieldOriginalValue = fieldOriginalValue;\n     }\n \n     public String getFieldName() {\n         return fieldName;\n     }\n \n-    public String getFieldValue() {\n-        return fieldValue;\n+    public String getFieldOriginalValue() {\n+        return fieldOriginalValue;\n+    }\n+\n+    public Optional<String> getFieldReplacementValue() {\n+        return Optional.ofNullable(fieldReplacementValue);\n+    }\n+\n+    public void setFieldReplacementValue(String fieldReplacementValue) {\n+        // Leave the field null if it would be set to a blank value\n+        if (StringUtils.isNotBlank(fieldReplacementValue)) {\n+            this.fieldReplacementValue = fieldReplacementValue;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NTcxOQ=="}, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA0NjkzOnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozODo1MFrOIHLhBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1NTo0M1rOIHMYnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotBlank(nullableValue)) {\n          \n          \n            \n                        return Optional.of(nullableValue);\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.of(DEFAULT_REPLACEMENT);\n          \n          \n            \n                    return Optional.ofNullable(StringUtils.trimToNull(nullableValue))\n          \n          \n            \n                                                    .or(() -> Optional.of(\"DEFAULT_REPLACEMENT\"));", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544399622", "createdAt": "2020-12-16T15:38:50Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for many fields\n+    public static final String DEFAULT_REPLACEMENT = \"None\";\n+\n+    public static void injectReplacementFieldValue(JiraCustomFieldConfig jiraCustomField, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        String originalValue = jiraCustomField.getFieldOriginalValue();\n+        extractReplacementValue(originalValue, jiraIssueSearchProperties)\n+            .ifPresent(jiraCustomField::setFieldReplacementValue);\n+    }\n+\n+    private static Optional<String> extractReplacementValue(String originalFieldValue, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        switch (originalFieldValue) {\n+            case REPLACEMENT_PROVIDER_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getProvider());\n+            case REPLACEMENT_PROJECT_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getTopicValue());\n+            case REPLACEMENT_PROJECT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubTopicValue());\n+            case REPLACEMENT_COMPONENT_NAME:\n+                return defaultIfBlank(jiraIssueSearchProperties.getComponentValue());\n+            case REPLACEMENT_COMPONENT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubComponentValue());\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<String> defaultIfBlank(String nullableValue) {\n+        if (StringUtils.isNotBlank(nullableValue)) {\n+            return Optional.of(nullableValue);\n+        }\n+        return Optional.of(DEFAULT_REPLACEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxMzg1NQ==", "bodyText": "I haven't been taking advantage of .or enough. I definitely will now.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544413855", "createdAt": "2020-12-16T15:55:43Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for many fields\n+    public static final String DEFAULT_REPLACEMENT = \"None\";\n+\n+    public static void injectReplacementFieldValue(JiraCustomFieldConfig jiraCustomField, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        String originalValue = jiraCustomField.getFieldOriginalValue();\n+        extractReplacementValue(originalValue, jiraIssueSearchProperties)\n+            .ifPresent(jiraCustomField::setFieldReplacementValue);\n+    }\n+\n+    private static Optional<String> extractReplacementValue(String originalFieldValue, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        switch (originalFieldValue) {\n+            case REPLACEMENT_PROVIDER_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getProvider());\n+            case REPLACEMENT_PROJECT_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getTopicValue());\n+            case REPLACEMENT_PROJECT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubTopicValue());\n+            case REPLACEMENT_COMPONENT_NAME:\n+                return defaultIfBlank(jiraIssueSearchProperties.getComponentValue());\n+            case REPLACEMENT_COMPONENT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubComponentValue());\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<String> defaultIfBlank(String nullableValue) {\n+        if (StringUtils.isNotBlank(nullableValue)) {\n+            return Optional.of(nullableValue);\n+        }\n+        return Optional.of(DEFAULT_REPLACEMENT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTYyMg=="}, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTA1MDk0OnYy", "diffSide": "RIGHT", "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraErrorMessageUtility.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozOTozMVrOIHLjXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo1NjowOFrOIHMZ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMDIyMA==", "bodyText": "Do we prefer List.of() over Collections.emptyList()?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544400220", "createdAt": "2020-12-16T15:39:31Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraErrorMessageUtility.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JiraErrorMessageUtility {\n+    private final Gson gson;\n+\n+    public JiraErrorMessageUtility(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    public AlertException improveRestException(IntegrationRestException restException, String issueCreatorFieldKey, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n+        try {\n+            List<String> responseErrors = extractErrorsFromResponseContent(restException.getHttpResponseContent(), issueCreatorFieldKey, issueCreatorEmail);\n+            if (!responseErrors.isEmpty()) {\n+                message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n+            }\n+        } catch (AlertFieldException reporterException) {\n+            return reporterException;\n+        }\n+        return new AlertException(message, restException);\n+    }\n+\n+    private List<String> extractErrorsFromResponseContent(String httpResponseContent, String issueCreatorFieldKey, String issueCreatorEmail) throws AlertFieldException {\n+        JsonObject responseContentObject = gson.fromJson(httpResponseContent, JsonObject.class);\n+        if (null != responseContentObject && responseContentObject.has(\"errors\")) {\n+            return extractSpecificErrorsFromErrorsObject(responseContentObject.getAsJsonObject(\"errors\"), issueCreatorFieldKey, issueCreatorEmail);\n+        }\n+        return List.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQxNDIwNQ==", "bodyText": "With Java 11 we prefer List.of().", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544414205", "createdAt": "2020-12-16T15:56:08Z", "author": {"login": "gkillough"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraErrorMessageUtility.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JiraErrorMessageUtility {\n+    private final Gson gson;\n+\n+    public JiraErrorMessageUtility(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    public AlertException improveRestException(IntegrationRestException restException, String issueCreatorFieldKey, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n+        try {\n+            List<String> responseErrors = extractErrorsFromResponseContent(restException.getHttpResponseContent(), issueCreatorFieldKey, issueCreatorEmail);\n+            if (!responseErrors.isEmpty()) {\n+                message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n+            }\n+        } catch (AlertFieldException reporterException) {\n+            return reporterException;\n+        }\n+        return new AlertException(message, restException);\n+    }\n+\n+    private List<String> extractErrorsFromResponseContent(String httpResponseContent, String issueCreatorFieldKey, String issueCreatorEmail) throws AlertFieldException {\n+        JsonObject responseContentObject = gson.fromJson(httpResponseContent, JsonObject.class);\n+        if (null != responseContentObject && responseContentObject.has(\"errors\")) {\n+            return extractSpecificErrorsFromErrorsObject(responseContentObject.getAsJsonObject(\"errors\"), issueCreatorFieldKey, issueCreatorEmail);\n+        }\n+        return List.of();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMDIyMA=="}, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 65}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2268, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}