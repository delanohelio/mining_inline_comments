{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc4OTY5MDU3", "number": 870, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0NjowM1rODiVMNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0NjoxNVrODiVMdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzI1MzY1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/provider/lifecycle/ProviderLifecycleManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0NjowM1rOFthGCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0NjowM1rOFthGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MjQ1Ng==", "bodyText": "This should say \"tasks\".", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/870#discussion_r383272456", "createdAt": "2020-02-24T13:46:03Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/provider/lifecycle/ProviderLifecycleManager.java", "diffHunk": "@@ -81,29 +80,28 @@ public ProviderLifecycleManager(List<Provider> providers, TaskManager taskManage\n         }\n \n         List<ProviderTask> providerTasks = provider.createProviderTasks(providerProperties);\n+        unscheduleTasksForProviderConfig(provider, providerProperties.getConfigId());\n         for (ProviderTask task : providerTasks) {\n             if (taskManager.getNextRunTime(task.getTaskName()).isEmpty()) {\n                 scheduleTask(task);\n                 acceptedTasks.add(task);\n             }\n         }\n+        logger.debug(\"Finished scheduling task for config with id {} and descriptor id {}\", providerConfig.getConfigurationId(), providerConfig.getDescriptorId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d686df7d7805cbf7c779acdd767b36cd581de25f"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3MzI1NDI5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/provider/lifecycle/ProviderLifecycleManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0NjoxNVrOFthGaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxMzo0NjoxNVrOFthGaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzI3MjU1Mw==", "bodyText": "\"tasks\"", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/870#discussion_r383272553", "createdAt": "2020-02-24T13:46:15Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/provider/lifecycle/ProviderLifecycleManager.java", "diffHunk": "@@ -81,29 +80,28 @@ public ProviderLifecycleManager(List<Provider> providers, TaskManager taskManage\n         }\n \n         List<ProviderTask> providerTasks = provider.createProviderTasks(providerProperties);\n+        unscheduleTasksForProviderConfig(provider, providerProperties.getConfigId());\n         for (ProviderTask task : providerTasks) {\n             if (taskManager.getNextRunTime(task.getTaskName()).isEmpty()) {\n                 scheduleTask(task);\n                 acceptedTasks.add(task);\n             }\n         }\n+        logger.debug(\"Finished scheduling task for config with id {} and descriptor id {}\", providerConfig.getConfigurationId(), providerConfig.getDescriptorId());\n         return acceptedTasks;\n     }\n \n     public void unscheduleTasksForProviderConfig(Provider provider, Long providerConfigId) {\n         logger.debug(\"Performing unscheduling task for provider config: id={}\", providerConfigId);\n \n-        // TODO find a better way to get the task names\n-        Set<String> runningTasksForProviderConfig = taskManager.getRunningTaskNames()\n-                                                        .stream()\n-                                                        .filter(name -> name.contains(provider.getKey().getUniversalKey()))\n-                                                        .filter(name -> name.contains(\"id:\" + providerConfigId))\n-                                                        .collect(Collectors.toSet());\n-        for (String taskName : runningTasksForProviderConfig) {\n-            if (taskManager.getNextRunTime(taskName).isPresent()) {\n-                unscheduleTask(taskName);\n-            }\n+        List<ProviderTask> tasks = taskManager.getTasksByClass(ProviderTask.class).stream()\n+                                       .filter(task -> task.getProviderProperties().getConfigId().equals(providerConfigId))\n+                                       .collect(Collectors.toList());\n+\n+        for (ProviderTask task : tasks) {\n+            unscheduleTask(task.getTaskName());\n         }\n+        logger.debug(\"Finished unscheduling task for provider config: id={}\", providerConfigId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d686df7d7805cbf7c779acdd767b36cd581de25f"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2129, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}