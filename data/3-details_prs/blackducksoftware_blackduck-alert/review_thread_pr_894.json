{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMDk3OTMy", "number": 894, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMDoxMVrODkwrYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNDoxMFrODkxypQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODcyODY3OnYy", "diffSide": "LEFT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMDoxMVrOFxQ23g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMDoxMVrOFxQ23g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMDczNA==", "bodyText": "Issue created", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387200734", "createdAt": "2020-03-03T18:10:11Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/UploadEndpointManager.java", "diffHunk": "@@ -153,7 +153,6 @@ public void unRegisterTarget(String targetKey) throws AlertException {\n                 File fileToValidate = filePersistenceUtil.createUploadsFile(tempFilename);\n                 Collection<String> errors = validationFunction.get().apply(fileToValidate);\n                 filePersistenceUtil.delete(fileToValidate);\n-                // TODO Implement a ValidationResult object that UploadValidationFunction and ConfigValidationFunction can return.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODczMzkwOnYy", "diffSide": "LEFT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMTo0NFrOFxQ6Dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMTo0NFrOFxQ6Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMTU1MQ==", "bodyText": "Issue created", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387201551", "createdAt": "2020-03-03T18:11:44Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/ConfigurationModel.java", "diffHunk": "@@ -88,7 +88,6 @@ public ConfigContextEnum getDescriptorContext() {\n         return new HashMap<>(configuredFields);\n     }\n \n-    // TODO it might be worthwhile to expose a builder for this class rather than allowing this method to be used outside of the accessors", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODczNjcwOnYy", "diffSide": "LEFT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMjo0N1rOFxQ7-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxMjo0N1rOFxQ7-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwMjA0MA==", "bodyText": "Issue created", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387202040", "createdAt": "2020-03-03T18:12:47Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -425,7 +425,6 @@ private ConfigurationModel createConfigModel(Long descriptorId, Long configId, D\n \n         ConfigurationModel newModel = new ConfigurationModel(descriptorId, configId, createdAtFormatted, lastUpdatedFormatted, configContext);\n         List<FieldValueEntity> fieldValueEntities = fieldValueRepository.findByConfigId(configId);\n-        // TODO should empty fields be included?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODc1OTA0OnYy", "diffSide": "LEFT", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxOTozOFrOFxRJ_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoxOTozOFrOFxRJ_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwNTYyOQ==", "bodyText": "It is because of the filter chain.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387205629", "createdAt": "2020-03-03T18:19:38Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,7 +47,6 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        // TODO investigate why parallelStream() does not work here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODc2MDU3OnYy", "diffSide": "LEFT", "path": "src/main/java/com/synopsys/integration/alert/workflow/startup/component/SystemMessageInitializer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyMDowN1rOFxRLBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODoyMDowN1rOFxRLBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIwNTg5NQ==", "bodyText": "Issue created to replace this.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387205895", "createdAt": "2020-03-03T18:20:07Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/workflow/startup/component/SystemMessageInitializer.java", "diffHunk": "@@ -61,10 +61,9 @@ public boolean validate() {\n         logger.info(\"----------------------------------------\");\n         logger.info(\"Validating system configuration....\");\n \n-        boolean defaultUserSettingsValid = settingsValidator.validateUser().isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODg5NDA1OnYy", "diffSide": "LEFT", "path": "src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1ODo1M1rOFxSfbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODo1ODo1M1rOFxSfbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIyNzUwMg==", "bodyText": "I was under the impression that changing to the use of href was a much more significant change than just these few lines.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387227502", "createdAt": "2020-03-03T18:58:53Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/email/EmailAddressHandler.java", "diffHunk": "@@ -120,11 +125,11 @@ public FieldAccessor updateEmailAddresses(String providerConfigName, MessageCont\n         return Set.of();\n     }\n \n-    private Set<String> collectProviderEmailsFromProject(String providerConfigName, String projectName, boolean projectOwnerOnly) {\n+    private Set<String> collectProviderEmailsFromProject(String providerConfigName, String projectHref, boolean projectOwnerOnly) {\n         Optional<ProviderProject> optionalProject = providerDataAccessor.getProjectsByProviderConfigName(providerConfigName)\n                                                         .stream()\n-                                                        .filter(project -> project.getName().equals(projectName))\n-                                                        .findFirst(); // FIXME use href", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODkxMTA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/UserManagementAuthoritiesPopulator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNDoxMFrOFxSqbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTowNzoyOFrOFxSxKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMDMxOQ==", "bodyText": "Should the style be like the following to match our convention with streams()?\n`\nroles.addAll(existingRoles\n.stream()\n.filter(StringUtils::isNotBlank)\n.collect(Collectors.toSet()));\n`", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387230319", "createdAt": "2020-03-03T19:04:10Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/UserManagementAuthoritiesPopulator.java", "diffHunk": "@@ -72,19 +69,10 @@ public UserManagementAuthoritiesPopulator(AuthenticationDescriptorKey Authentica\n     }\n \n     public Set<String> addAdditionalRoleNames(String userName, Set<String> existingRoles, boolean appendRolePrefix) {\n-        // TODO remove in 6.0.0 the createRolesMapping method.\n-        Map<String, String> roleMap = createRolesMapping(appendRolePrefix);\n         Set<String> rolesFromDB = getRolesFromDatabase(userName, appendRolePrefix);\n         Set<String> roles = new LinkedHashSet<>();\n         roles.addAll(rolesFromDB);\n-        roles.addAll(existingRoles.stream().filter(role -> StringUtils.isNotBlank(role)).collect(Collectors.toSet()));\n-        //TODO remove in 6.0.0 with the deprecated method\n-        if (!roleMap.isEmpty()) {\n-            roles.addAll(existingRoles.stream()\n-                             .filter(roleMap::containsKey)\n-                             .map(roleMap::get)\n-                             .collect(Collectors.toSet()));\n-        }\n+        roles.addAll(existingRoles.stream().filter(StringUtils::isNotBlank).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMjA0MQ==", "bodyText": "You can use this for multi-line code blocks (language optional).\n```java\n<your_code>\n```", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/894#discussion_r387232041", "createdAt": "2020-03-03T19:07:28Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/UserManagementAuthoritiesPopulator.java", "diffHunk": "@@ -72,19 +69,10 @@ public UserManagementAuthoritiesPopulator(AuthenticationDescriptorKey Authentica\n     }\n \n     public Set<String> addAdditionalRoleNames(String userName, Set<String> existingRoles, boolean appendRolePrefix) {\n-        // TODO remove in 6.0.0 the createRolesMapping method.\n-        Map<String, String> roleMap = createRolesMapping(appendRolePrefix);\n         Set<String> rolesFromDB = getRolesFromDatabase(userName, appendRolePrefix);\n         Set<String> roles = new LinkedHashSet<>();\n         roles.addAll(rolesFromDB);\n-        roles.addAll(existingRoles.stream().filter(role -> StringUtils.isNotBlank(role)).collect(Collectors.toSet()));\n-        //TODO remove in 6.0.0 with the deprecated method\n-        if (!roleMap.isEmpty()) {\n-            roles.addAll(existingRoles.stream()\n-                             .filter(roleMap::containsKey)\n-                             .map(roleMap::get)\n-                             .collect(Collectors.toSet()));\n-        }\n+        roles.addAll(existingRoles.stream().filter(StringUtils::isNotBlank).collect(Collectors.toSet()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIzMDMxOQ=="}, "originalCommit": {"oid": "2b2c92fa8124d711f4973258c69602d291cb72e9"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2160, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}