{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTE0Mjg3", "number": 1207, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNDowOFrOEqQVAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTozMVrOEqWFqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNzQzMTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNDowOFrOHcWyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNDowOFrOHcWyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5NTQ4OQ==", "bodyText": "Isn't this handled by the validate method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499495489", "createdAt": "2020-10-05T10:24:08Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -35,101 +34,139 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.server.ResponseStatusException;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.action.api.AbstractResourceActions;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.accessor.RoleAccessor;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n-import com.synopsys.integration.alert.common.exception.AlertConfigurationException;\n-import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n-import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.exception.AlertForbiddenOperationException;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n import com.synopsys.integration.alert.common.persistence.model.UserRoleModel;\n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.component.users.UserManagementDescriptorKey;\n+import com.synopsys.integration.alert.web.api.role.util.PermissionModelUtil;\n \n @Component\n-public class RoleActions {\n+public class RoleActions extends AbstractResourceActions<RolePermissionModel, MultiRolePermissionModel> {\n     private static final String FIELD_KEY_ROLE_NAME = \"roleName\";\n     private final RoleAccessor roleAccessor;\n     private final AuthorizationManager authorizationManager;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public RoleActions(RoleAccessor roleAccessor, AuthorizationManager authorizationManager, DescriptorMap descriptorMap, List<DescriptorKey> descriptorKeys) {\n+    public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, RoleAccessor roleAccessor, AuthorizationManager authorizationManager, DescriptorMap descriptorMap, List<DescriptorKey> descriptorKeys) {\n+        super(userManagementDescriptorKey, ConfigContextEnum.GLOBAL, authorizationManager);\n         this.roleAccessor = roleAccessor;\n         this.authorizationManager = authorizationManager;\n         this.descriptorMap = descriptorMap;\n     }\n \n-    public List<RolePermissionModel> getRoles() {\n-        return roleAccessor.getRoles().stream()\n-                   .map(this::convertUserRoleModel)\n-                   .collect(Collectors.toList());\n-    }\n-\n-    public ValidationResponseModel validateRoleFields(RolePermissionModel rolePermissionModel) {\n-        return validateRoleNameFieldRequired(rolePermissionModel.getRoleName())\n-                   .map(requiredFieldError -> ValidationResponseModel.fromStatusCollection(\"There were problems with the role configuration\", List.of(requiredFieldError)))\n-                   .orElseGet(() -> ValidationResponseModel.success(\"The role name is valid\"));\n+    @Override\n+    protected ActionResponse<RolePermissionModel> createWithoutChecks(RolePermissionModel resource) {\n+        try {\n+            String roleName = resource.getRoleName();\n+            Set<PermissionModel> permissions = resource.getPermissions();\n+            PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n+            UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n+            return new ActionResponse<>(HttpStatus.OK, convertUserRoleModel(userRoleModel));\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the role. %s\", ex.getMessage()));\n+        }\n     }\n \n-    public UserRoleModel createRole(RolePermissionModel rolePermissionModel) throws AlertDatabaseConstraintException, AlertFieldException, AlertConfigurationException {\n-        String roleName = rolePermissionModel.getRoleName();\n-        List<AlertFieldStatus> fieldErrors = fullyValidateRoleNameField(roleName);\n-        if (!fieldErrors.isEmpty()) {\n-            throw new AlertFieldException(fieldErrors);\n+    @Override\n+    protected ActionResponse<RolePermissionModel> deleteWithoutChecks(Long id) {\n+        Optional<UserRoleModel> existingRole = roleAccessor.getRoles(List.of(id))\n+                                                   .stream()\n+                                                   .findFirst();\n+        if (existingRole.isPresent()) {\n+            try {\n+                authorizationManager.deleteRole(id);\n+            } catch (AlertException ex) {\n+                return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n+            }\n+            return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND);\n+    }\n \n-        Set<PermissionModel> permissions = rolePermissionModel.getPermissions();\n-        validatePermissions(permissions);\n-        PermissionMatrixModel permissionMatrixModel = convertToPermissionMatrixModel(permissions);\n-        UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n-        return userRoleModel;\n+    @Override\n+    protected ActionResponse<MultiRolePermissionModel> readAllWithoutChecks() {\n+        List<RolePermissionModel> roles = roleAccessor.getRoles().stream()\n+                                              .map(this::convertUserRoleModel)\n+                                              .collect(Collectors.toList());\n+        return new ActionResponse<>(HttpStatus.OK, new MultiRolePermissionModel(roles));\n     }\n \n-    public UserRoleModel updateRole(Long roleId, RolePermissionModel rolePermissionModel) throws AlertDatabaseConstraintException, AlertConfigurationException, AlertFieldException {\n-        String roleName = rolePermissionModel.getRoleName();\n-        Optional<AlertFieldStatus> roleNameMissingError = validateRoleNameFieldRequired(roleName);\n-        if (roleNameMissingError.isPresent()) {\n-            throw AlertFieldException.singleFieldError(roleNameMissingError.get());\n+    @Override\n+    protected ActionResponse<RolePermissionModel> readWithoutChecks(Long id) {\n+        Optional<RolePermissionModel> role = findExisting(id);\n+        if (role.isPresent()) {\n+            return new ActionResponse<>(HttpStatus.OK, role.get());\n         }\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Role with id:%d not found.\", id));\n+    }\n \n-        UserRoleModel existingRole = getExistingRoleOrThrow404(roleId);\n-        boolean targetRoleNameIsUsedByDifferentRole = roleAccessor.getRoles()\n-                                                          .stream()\n-                                                          .filter(role -> !role.getId().equals(existingRole.getId()))\n-                                                          .anyMatch(role -> role.getName().equalsIgnoreCase(roleName));\n-        if (targetRoleNameIsUsedByDifferentRole) {\n-            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"The role name is already in use\");\n-        }\n+    @Override\n+    protected ValidationActionResponse testWithoutChecks(RolePermissionModel resource) {\n+        return validateWithoutChecks(resource);\n+    }\n \n-        if (!existingRole.getName().equals(roleName)) {\n-            authorizationManager.updateRoleName(roleId, roleName);\n+    @Override\n+    protected ActionResponse<RolePermissionModel> updateWithoutChecks(Long id, RolePermissionModel resource) {\n+        try {\n+            String roleName = resource.getRoleName();\n+            Optional<UserRoleModel> existingRole = roleAccessor.getRoles(List.of(id))\n+                                                       .stream()\n+                                                       .findFirst();\n+            if (existingRole.isPresent()) {\n+                boolean targetRoleNameIsUsedByDifferentRole = roleAccessor.getRoles()\n+                                                                  .stream()\n+                                                                  .filter(role -> !role.getId().equals(existingRole.get().getId()))\n+                                                                  .anyMatch(role -> role.getName().equalsIgnoreCase(roleName));\n+                if (targetRoleNameIsUsedByDifferentRole) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6149a6b6710f538fc3a11c2d820564d68460f71d"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODMzODk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyMzo1NVrOHcfcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyMzo1NVrOHcfcXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzNzM0MQ==", "bodyText": "You may want to make Util classes final signifying to everyone that they shouldn't be extendable.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499637341", "createdAt": "2020-10-05T14:23:55Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.role.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n+import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.web.api.role.PermissionModel;\n+\n+public class PermissionModelUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODM3NTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTozMVrOHcfzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozNDoxMFrOHcf6uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MzE4NQ==", "bodyText": "Didn't we already have something like this?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499643185", "createdAt": "2020-10-05T14:31:31Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.role.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n+import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.web.api.role.PermissionModel;\n+\n+public class PermissionModelUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NTExMw==", "bodyText": "convertToPermissionMatrixModel used to be a private method of the RoleActions. We wanted access to it in the test classes so we decided to move it into its own util class that can then be used by both rather than duplicating the code just for tests. If we already had a util class doing this type of work I may be unaware of it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499645113", "createdAt": "2020-10-05T14:34:10Z", "author": {"login": "ChomickiM"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.role.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n+import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.web.api.role.PermissionModel;\n+\n+public class PermissionModelUtil {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MzE4NQ=="}, "originalCommit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2277, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}