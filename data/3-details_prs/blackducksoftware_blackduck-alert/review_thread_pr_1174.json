{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5NDEyNTg2", "number": 1174, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxNjowNVrOElCKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0NDoyNVrOElCvjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjY4MjEwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/ProviderDescriptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxNjowNVrOHUTnKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxNjowNVrOHUTnKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NDg5MQ==", "bodyText": "Why did this get a field suffix and no others did?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1174#discussion_r491054891", "createdAt": "2020-09-18T16:16:05Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/ProviderDescriptor.java", "diffHunk": "@@ -22,22 +22,23 @@\n  */\n package com.synopsys.integration.alert.common.descriptor;\n \n+import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderGlobalUIConfig;\n-import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n import com.synopsys.integration.alert.common.provider.ProviderKey;\n \n public abstract class ProviderDescriptor extends Descriptor {\n     public static final String KEY_COMMON_PROVIDER_PREFIX = \"provider.common.\";\n     public static final String KEY_PROVIDER_CONFIG_NAME = KEY_COMMON_PROVIDER_PREFIX + \"config.name\";\n+    public static final String KEY_PROVIDER_CONFIG_ID = KEY_COMMON_PROVIDER_PREFIX + \"config.id\";\n     public static final String KEY_PROVIDER_CONFIG_ENABLED = KEY_COMMON_PROVIDER_PREFIX + \"config.enabled\";\n     public static final String LABEL_PROVIDER_CONFIG_ENABLED = \"Enabled\";\n-    public static final String LABEL_PROVIDER_CONFIG_NAME = \"Provider Configuration\";\n+    public static final String LABEL_PROVIDER_CONFIG_FIELD = \"Provider Configuration\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dadb2fbc980220b83898cd35c13b916f58be0df"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MjY5MDk5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjoxOTowNFrOHUTs5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozODo0N1rOHUUWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjM1Nw==", "bodyText": "Could the optional mapping be used here instead of this if check? We start with an optional and end with one. I feel there's a cleaner way to do this.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1174#discussion_r491056357", "createdAt": "2020-09-18T16:19:04Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -66,14 +66,21 @@ public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizati\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n             options = configurationModels.stream()\n-                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                          .map(FieldAccessor::new)\n-                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .map(this::createNameToIdOption)\n                           .flatMap(Optional::stream)\n-                          .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n         LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n         return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n+\n+    private Optional<LabelValueSelectOption> createNameToIdOption(ConfigurationModel configurationModel) {\n+        Optional<String> providerConfigName = configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).flatMap(ConfigurationFieldModel::getFieldValue);\n+        if (providerConfigName.isPresent()) {\n+            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), configurationModel.getConfigurationId().toString());\n+            return Optional.of(providerConfigOption);\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5dadb2fbc980220b83898cd35c13b916f58be0df"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2NjkyMg==", "bodyText": "Couldn't we use the .map() method on the providerConfigName variable to convert it to a LabelValueSelectOption and then you won't need the if's", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1174#discussion_r491066922", "createdAt": "2020-09-18T16:38:47Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomFunctionAction.java", "diffHunk": "@@ -66,14 +66,21 @@ public ProviderConfigSelectCustomFunctionAction(AuthorizationManager authorizati\n         if (descriptorKey.isPresent()) {\n             List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n             options = configurationModels.stream()\n-                          .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                          .map(FieldAccessor::new)\n-                          .map(accessor -> accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME))\n+                          .map(this::createNameToIdOption)\n                           .flatMap(Optional::stream)\n-                          .map(LabelValueSelectOption::new)\n                           .collect(Collectors.toList());\n         }\n         LabelValueSelectOptions optionList = new LabelValueSelectOptions(options);\n         return new ActionResponse<>(HttpStatus.OK, optionList);\n     }\n+\n+    private Optional<LabelValueSelectOption> createNameToIdOption(ConfigurationModel configurationModel) {\n+        Optional<String> providerConfigName = configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME).flatMap(ConfigurationFieldModel::getFieldValue);\n+        if (providerConfigName.isPresent()) {\n+            LabelValueSelectOption providerConfigOption = new LabelValueSelectOption(providerConfigName.get(), configurationModel.getConfigurationId().toString());\n+            return Optional.of(providerConfigOption);\n+        }\n+        return Optional.empty();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA1NjM1Nw=="}, "originalCommit": {"oid": "5dadb2fbc980220b83898cd35c13b916f58be0df"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjc3NzA4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/web/PolicyNotificationFilterCustomFunctionAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0NDoyNVrOHUUhog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjo0NDoyNVrOHUUhog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2OTg1OA==", "bodyText": "Just something to note, if we successfully remove AlertDatabaseConstraintException we'll be able to collapse this call into the previous Optional.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1174#discussion_r491069858", "createdAt": "2020-09-18T16:44:25Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/web/PolicyNotificationFilterCustomFunctionAction.java", "diffHunk": "@@ -138,16 +138,14 @@ private boolean isFilterablePolicy(Collection<String> notificationTypes) {\n \n     private Optional<BlackDuckProperties> createBlackDuckProperties(FieldModel fieldModel) throws IntegrationException {\n         FieldAccessor fieldAccessor = fieldModelConverter.convertToFieldAccessor(fieldModel);\n-        Optional<ConfigurationModel> configurationModel = configurationAccessor.getProviderConfigurationByName(fieldAccessor.getStringOrNull(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME));\n-        Optional<FieldAccessor> providerFieldAccessor = configurationModel\n-                                                            .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n-                                                            .map(FieldAccessor::new);\n-\n-        if (configurationModel.isPresent() && providerFieldAccessor.isPresent()) {\n-            ConfigurationModel configModel = configurationModel.get();\n-            return Optional.of(blackDuckPropertiesFactory.createProperties(configModel.getConfigurationId(), providerFieldAccessor.get()));\n+        Long providerConfigId = fieldAccessor.getLong(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).orElse(null);\n+        if (null == providerConfigId) {\n+            return Optional.empty();\n         }\n-        return Optional.empty();\n+        return configurationAccessor.getConfigurationById(providerConfigId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b920eb7eba35a3e38da1aa5ea1f67292c0a72b32"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1760, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}