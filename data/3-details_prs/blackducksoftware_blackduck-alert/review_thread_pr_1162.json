{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MDAyMTA0", "number": 1162, "reviewThreads": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozODo0M1rOEiLYbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTozOTozNFrOEiqwAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjczNTE3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/SSLValidationResponseModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozODo0M1rOHP6FuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTozODo0M1rOHP6FuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0MjQyNQ==", "bodyText": "The PKIX SSL error that displays an error message in the UI.  The object that needs to be created for the PKIX exception is a message and an isDetailed boolean.  This object was created to supply the same result object for a PKIX error.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r486442425", "createdAt": "2020-09-10T15:38:43Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/SSLValidationResponseModel.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action;\n+\n+import java.util.Map;\n+\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+\n+public class SSLValidationResponseModel extends ValidationResponseModel {\n+    private boolean isDetailed;\n+\n+    public SSLValidationResponseModel(String message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mjc0ODYwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0MTozN1rOHP6OJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0MTozN1rOHP6OJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0NDU4MA==", "bodyText": "This class checks permissions and validates the content first.  The abstract methods are to be implemented by a concrete class to perform the functionality.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r486444580", "createdAt": "2020-09-10T15:41:37Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Mjc2OTM0OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0NjoxM1rOHP6bIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxNTo0NjoxM1rOHP6bIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjQ0NzkwNA==", "bodyText": "This class can be used by classes that deal with resources other than FieldModel or JobFieldModel i.e. CertificateActions, UserActions,RoleActions, and TaskActions.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r486447904", "createdAt": "2020-09-10T15:46:13Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -0,0 +1,143 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractResourceActions<T> implements ResourceActions<T>, ValidateAction<T>, TestAction<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjQyMDk2OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo0NzowMFrOHQdY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NjoxOFrOHQfhrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMDc3MA==", "bodyText": "I'm thinking that when we further separate Alert into sub-projects, the models for the REST API stuff should be moved into that sub-project as well. That way we can avoid misusing the models and bogging down alert-common.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487020770", "createdAt": "2020-09-11T12:47:00Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java", "diffHunk": "@@ -22,12 +22,32 @@\n  */\n package com.synopsys.integration.alert.common.action;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NTc4OQ==", "bodyText": "I think after this PR and the feature branch are merged into master we will no longer need to use AlertFieldException and IntegrationRestException in Alert.  So the static method in this ValidationActionResponse will be able to be removed also.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487055789", "createdAt": "2020-09-11T13:46:18Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java", "diffHunk": "@@ -22,12 +22,32 @@\n  */\n package com.synopsys.integration.alert.common.action;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyMDc3MA=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjQ0ODQyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo1NDo0NVrOHQdqCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNDowNTo1OFrOHQgS2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTE2Mg==", "bodyText": "Looking at these names and how they are used below, we might want to distinguish them a little more from each other. Maybe instead of the public create and the protected createResource, the public method could be called createWithPermissionCheck and the protected method could be called createWithoutPermissionCheck or something along those lines.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487025162", "createdAt": "2020-09-11T12:54:45Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MTAyMA==", "bodyText": "I would prefer to change the names of the abstract methods because the public methods are displayed in the Swagger API.  To an end user they just want to create, read, update, delete, validate, or test the resources. Whether we perform permission checks or not should not be exposed to them.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487041020", "createdAt": "2020-09-11T13:22:09Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTE2Mg=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MTQ2Nw==", "bodyText": "Aren't the actions invoked by the controllers? The name of the method in the controller should be the name that is displayed, no?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487051467", "createdAt": "2020-09-11T13:39:51Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTE2Mg=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA2ODM3OA==", "bodyText": "You're right been looking at this code for too long.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487068378", "createdAt": "2020-09-11T14:05:58Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyNTE2Mg=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjQ2NjE2OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjo1OTo0OFrOHQd1QQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyNToyN1rOHQevXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyODAzMw==", "bodyText": "It might be worthwhile to create an enhancement request for AuthorizationManager to have methods that also take collections of enums.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487028033", "createdAt": "2020-09-11T12:59:48Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        return readAllByContextAndDescriptor(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {\n+        if (!authorizationManager.hasCreatePermission(resource.getContext(), resource.getDescriptorName())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<FieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name(), ConfigContextEnum.GLOBAL.name()), descriptorNames)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MjkxMA==", "bodyText": "Yeah I was going to make that change in this set of code changes but I will add it separately.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487042910", "createdAt": "2020-09-11T13:25:27Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        return readAllByContextAndDescriptor(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {\n+        if (!authorizationManager.hasCreatePermission(resource.getContext(), resource.getDescriptorName())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<FieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name(), ConfigContextEnum.GLOBAL.name()), descriptorNames)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyODAzMw=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjQ3NTM3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzowMjo0MlrOHQd7PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyNjozMFrOHQexxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyOTU2NQ==", "bodyText": "Based on the way this class is used (i.e. in a controller) is this case actually possible? If the RequestMapping requires an id, and an id is missing from the request, then it will either be a call to the \"getAll\" endpoint (if one exists) or Spring will return a 404.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487029565", "createdAt": "2020-09-11T13:02:42Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        return readAllByContextAndDescriptor(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {\n+        if (!authorizationManager.hasCreatePermission(resource.getContext(), resource.getDescriptorName())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<FieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name(), ConfigContextEnum.GLOBAL.name()), descriptorNames)) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            return readAllResources();\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error reading configurations: %s\", ex.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> getOne(Long id) {\n+        if (null == id) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, AbstractResourceActions.RESOURCE_IDENTIFIER_MISSING);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MzUyNw==", "bodyText": "Just tested this out Spring throws an exception if it's the wrong type so I will remove that.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487043527", "createdAt": "2020-09-11T13:26:30Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements ResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteResource(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllResources();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptor(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testResource(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateResource(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        return readAllByContextAndDescriptor(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {\n+        if (!authorizationManager.hasCreatePermission(resource.getContext(), resource.getDescriptorName())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<FieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name(), ConfigContextEnum.GLOBAL.name()), descriptorNames)) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            return readAllResources();\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error reading configurations: %s\", ex.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> getOne(Long id) {\n+        if (null == id) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, AbstractResourceActions.RESOURCE_IDENTIFIER_MISSING);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAyOTU2NQ=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUwNDMyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxMDo0OFrOHQeNUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxMDo0OFrOHQeNUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNDE5Mg==", "bodyText": "Same thought as the previous class. We should make it more explicit what the difference between something like ActionResponse<JobFieldModel> create(JobFieldModel resource) and ActionResponse<JobFieldModel> createResource(JobFieldModel resource) is.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487034192", "createdAt": "2020-09-11T13:10:48Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteResource(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllResources();\n+\n+    protected abstract ValidationActionResponse testResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateResource(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(JobFieldModel resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUwNzQzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxMTozNlrOHQePUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxMTozNlrOHQePUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNDcwNQ==", "bodyText": "Same thought as the previous class.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487034705", "createdAt": "2020-09-11T13:11:36Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteResource(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllResources();\n+\n+    protected abstract ValidationActionResponse testResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateResource(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(JobFieldModel resource);\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> create(JobFieldModel resource) {\n+        boolean hasPermissions = hasRequiredPermissions(resource.getFieldModels(), authorizationManager::hasCreatePermission);\n+        if (!hasPermissions) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<JobFieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name()), descriptorNames)) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            List<JobFieldModel> models = new LinkedList<>();\n+            ActionResponse<List<JobFieldModel>> response = readAllResources();\n+            List<JobFieldModel> allModels = response.getContent().orElse(List.of());\n+            for (JobFieldModel jobModel : allModels) {\n+                boolean includeJob = hasRequiredPermissions(jobModel.getFieldModels(), authorizationManager::hasReadPermission);\n+                if (includeJob) {\n+                    models.add(jobModel);\n+                }\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, models);\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error reading job configurations: %s\", ex.getMessage()));\n+        }\n+\n+    }\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> getOne(UUID id) {\n+        if (null == id) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, AbstractResourceActions.RESOURCE_IDENTIFIER_MISSING);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUxNzI2OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxNDoyMVrOHQeViw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyNzozMVrOHQe0Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNjI5OQ==", "bodyText": "When the constructor for ActionResponse would take a null parameter, we should either add a static initializer or a new constructor without the message parameter.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487036299", "createdAt": "2020-09-11T13:14:21Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteResource(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllResources();\n+\n+    protected abstract ValidationActionResponse testResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateResource(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(JobFieldModel resource);\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> create(JobFieldModel resource) {\n+        boolean hasPermissions = hasRequiredPermissions(resource.getFieldModels(), authorizationManager::hasCreatePermission);\n+        if (!hasPermissions) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<JobFieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name()), descriptorNames)) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            List<JobFieldModel> models = new LinkedList<>();\n+            ActionResponse<List<JobFieldModel>> response = readAllResources();\n+            List<JobFieldModel> allModels = response.getContent().orElse(List.of());\n+            for (JobFieldModel jobModel : allModels) {\n+                boolean includeJob = hasRequiredPermissions(jobModel.getFieldModels(), authorizationManager::hasReadPermission);\n+                if (includeJob) {\n+                    models.add(jobModel);\n+                }\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, models);\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error reading job configurations: %s\", ex.getMessage()));\n+        }\n+\n+    }\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> getOne(UUID id) {\n+        if (null == id) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, AbstractResourceActions.RESOURCE_IDENTIFIER_MISSING);\n+        }\n+\n+        Optional<JobFieldModel> optionalModel = findJobFieldModel(id);\n+\n+        if (optionalModel.isPresent()) {\n+            JobFieldModel fieldModel = optionalModel.get();\n+            boolean hasPermissions = hasRequiredPermissions(fieldModel.getFieldModels(), authorizationManager::hasReadPermission);\n+            if (!hasPermissions) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, fieldModel);\n+        }\n+\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NDExMA==", "bodyText": "We have a constructor that takes the status only.  I missed some places where that should be used.  I will fix that.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487044110", "createdAt": "2020-09-11T13:27:31Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,211 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteResource(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllResources();\n+\n+    protected abstract ValidationActionResponse testResource(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateResource(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateResource(JobFieldModel resource);\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> create(JobFieldModel resource) {\n+        boolean hasPermissions = hasRequiredPermissions(resource.getFieldModels(), authorizationManager::hasCreatePermission);\n+        if (!hasPermissions) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateResource(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createResource(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<JobFieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name()), descriptorNames)) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            List<JobFieldModel> models = new LinkedList<>();\n+            ActionResponse<List<JobFieldModel>> response = readAllResources();\n+            List<JobFieldModel> allModels = response.getContent().orElse(List.of());\n+            for (JobFieldModel jobModel : allModels) {\n+                boolean includeJob = hasRequiredPermissions(jobModel.getFieldModels(), authorizationManager::hasReadPermission);\n+                if (includeJob) {\n+                    models.add(jobModel);\n+                }\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, models);\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error reading job configurations: %s\", ex.getMessage()));\n+        }\n+\n+    }\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> getOne(UUID id) {\n+        if (null == id) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, AbstractResourceActions.RESOURCE_IDENTIFIER_MISSING);\n+        }\n+\n+        Optional<JobFieldModel> optionalModel = findJobFieldModel(id);\n+\n+        if (optionalModel.isPresent()) {\n+            JobFieldModel fieldModel = optionalModel.get();\n+            boolean hasPermissions = hasRequiredPermissions(fieldModel.getFieldModels(), authorizationManager::hasReadPermission);\n+            if (!hasPermissions) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, fieldModel);\n+        }\n+\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND, null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNjI5OQ=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjUzODgwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/JobResourceActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMDoxMFrOHQei7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MTozN1rOHQfVbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzOTcyNg==", "bodyText": "Should this extend ResourceActions?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487039726", "createdAt": "2020-09-11T13:20:10Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/JobResourceActions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+\n+public interface JobResourceActions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NTg2Ng==", "bodyText": "If I add another Generic to resource actions to define the type for the ids then yes it would be possible.  The id type for Jobs is UUID and other resources is a Long.  Hindsight being 2020 perhaps the ids should have always been a UUID but because we have two different ID types I didn't want to make it extend.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487045866", "createdAt": "2020-09-11T13:30:18Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/JobResourceActions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+\n+public interface JobResourceActions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzOTcyNg=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1MjY1Mw==", "bodyText": "Ok, I think this could be a future enhancement if we ever migrate to UUIDs across the board.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487052653", "createdAt": "2020-09-11T13:41:37Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/JobResourceActions.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.UUID;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+\n+public interface JobResourceActions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzOTcyNg=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU0OTQxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/FieldValueModel.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyMjo1NlrOHQepvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzozMTo0MFrOHQe-Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MTQ2OA==", "bodyText": "Should this call setValues with Set.of() if the parameter is null?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487041468", "createdAt": "2020-09-11T13:22:56Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/FieldValueModel.java", "diffHunk": "@@ -60,7 +60,9 @@ public void setValues(Collection<String> values) {\n     }\n \n     public void setValue(String value) {\n-        setValues(Set.of(value));\n+        if (null != value) {\n+            setValues(Set.of(value));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NjY3OA==", "bodyText": "yes good catch.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487046678", "createdAt": "2020-09-11T13:31:40Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/FieldValueModel.java", "diffHunk": "@@ -60,7 +60,9 @@ public void setValues(Collection<String> values) {\n     }\n \n     public void setValue(String value) {\n-        setValues(Set.of(value));\n+        if (null != value) {\n+            setValues(Set.of(value));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MTQ2OA=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU1NzQzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomFunctionAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoyNTowNFrOHQeujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0MzozMVrOHQfaeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MjcwMw==", "bodyText": "Won't configActions.update check write permissions? Should the if-statement check if the id is present to determine whether to create or update?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487042703", "createdAt": "2020-09-11T13:25:04Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomFunctionAction.java", "diffHunk": "@@ -155,11 +155,13 @@ private OAuthEndpointResponse createErrorResponse(String errorMessage) {\n         if (StringUtils.isNotBlank(fieldModel.getId())) {\n             if (authorizationManager.hasWritePermission(ConfigContextEnum.GLOBAL.name(), azureBoardsChannelKey.getUniversalKey())) {\n                 Long id = Long.parseLong(fieldModel.getId());\n-                return Optional.ofNullable(configActions.updateConfig(id, fieldModel));\n+                ActionResponse<FieldModel> response = configActions.update(id, fieldModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1Mzk0NA==", "bodyText": "yes", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487053944", "createdAt": "2020-09-11T13:43:31Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomFunctionAction.java", "diffHunk": "@@ -155,11 +155,13 @@ private OAuthEndpointResponse createErrorResponse(String errorMessage) {\n         if (StringUtils.isNotBlank(fieldModel.getId())) {\n             if (authorizationManager.hasWritePermission(ConfigContextEnum.GLOBAL.name(), azureBoardsChannelKey.getUniversalKey())) {\n                 Long id = Long.parseLong(fieldModel.getId());\n-                return Optional.ofNullable(configActions.updateConfig(id, fieldModel));\n+                ActionResponse<FieldModel> response = configActions.update(id, fieldModel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0MjcwMw=="}, "originalCommit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjU3Njc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzozMDoxMVrOHQe6qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzozNDoyM1rOHQfECA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NTgwMw==", "bodyText": "Will this clash with the overridden validate method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487045803", "createdAt": "2020-09-11T13:30:11Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigController.java", "diffHunk": "@@ -22,316 +22,83 @@\n  */\n package com.synopsys.integration.alert.web.api.job;\n \n-import java.util.Collection;\n-import java.util.EnumSet;\n-import java.util.LinkedList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n import java.util.UUID;\n-import java.util.function.BiFunction;\n-import java.util.stream.Collectors;\n \n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.synopsys.integration.alert.common.ContentConverter;\n-import com.synopsys.integration.alert.common.descriptor.Descriptor;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n-import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n-import com.synopsys.integration.alert.common.message.model.MessageResult;\n-import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n-import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n-import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.api.BaseJobResourceController;\n+import com.synopsys.integration.alert.common.rest.api.ReadAllController;\n+import com.synopsys.integration.alert.common.rest.api.TestController;\n+import com.synopsys.integration.alert.common.rest.api.ValidateController;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n-import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.web.api.config.ConfigController;\n-import com.synopsys.integration.alert.web.common.BaseController;\n-import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n-import com.synopsys.integration.exception.IntegrationException;\n-import com.synopsys.integration.function.ThrowingFunction;\n-import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @RestController\n @RequestMapping(JobConfigController.JOB_CONFIGURATION_PATH)\n-public class JobConfigController extends BaseController {\n+public class JobConfigController implements BaseJobResourceController, ReadAllController, TestController<JobFieldModel>, ValidateController<JobFieldModel> {\n     public static final String JOB_CONFIGURATION_PATH = ConfigController.CONFIGURATION_PATH + \"/job\";\n-    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n-    private final Logger logger = LoggerFactory.getLogger(JobConfigController.class);\n     private final JobConfigActions jobConfigActions;\n-    private final ResponseFactory responseFactory;\n-    private final ContentConverter contentConverter;\n-    private final AuthorizationManager authorizationManager;\n-    private final DescriptorAccessor descriptorAccessor;\n-    private final DescriptorMap descriptorMap;\n-    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n \n     @Autowired\n-    public JobConfigController(JobConfigActions jobConfigActions, ResponseFactory responseFactory, ContentConverter contentConverter, AuthorizationManager authorizationManager,\n-        DescriptorAccessor descriptorAccessor, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {\n+    public JobConfigController(JobConfigActions jobConfigActions) {\n         this.jobConfigActions = jobConfigActions;\n-        this.responseFactory = responseFactory;\n-        this.contentConverter = contentConverter;\n-        this.authorizationManager = authorizationManager;\n-        this.descriptorAccessor = descriptorAccessor;\n-        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n-        this.descriptorMap = descriptorMap;\n     }\n \n-    @GetMapping\n-    public ResponseEntity<String> getJobs() {\n-        try {\n-            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n-                                              .stream()\n-                                              .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n-                                              .map(RegisteredDescriptorModel::getName)\n-                                              .collect(Collectors.toSet());\n-            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name()), descriptorNames)) {\n-                return responseFactory.createForbiddenResponse();\n-            }\n-            List<JobFieldModel> models = new LinkedList<>();\n-            List<JobFieldModel> allModels = jobConfigActions.getAllJobs();\n-\n-            for (JobFieldModel jobModel : allModels) {\n-                boolean includeJob = hasRequiredPermissions(jobModel.getFieldModels(), authorizationManager::hasReadPermission);\n-                if (includeJob) {\n-                    models.add(jobModel);\n-                }\n-            }\n-            return responseFactory.createOkContentResponse(contentConverter.getJsonString(models));\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createMessageResponse(HttpStatus.INTERNAL_SERVER_ERROR, \"There was an issue retrieving data from the database.\");\n-        }\n-    }\n-\n-    @GetMapping(\"/{id}\")\n-    public ResponseEntity<String> getJob(@PathVariable UUID id) {\n-        Optional<JobFieldModel> optionalModel;\n-        try {\n-            optionalModel = jobConfigActions.getJobById(id);\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createMessageResponse(HttpStatus.INTERNAL_SERVER_ERROR, \"There was an issue retrieving data from the database for ID: \" + id);\n-        }\n-\n-        if (optionalModel.isPresent()) {\n-            JobFieldModel fieldModel = optionalModel.get();\n-            boolean hasPermissions = hasRequiredPermissions(fieldModel.getFieldModels(), authorizationManager::hasReadPermission);\n-            if (!hasPermissions) {\n-                return responseFactory.createForbiddenResponse();\n-            }\n-            return responseFactory.createOkContentResponse(contentConverter.getJsonString(fieldModel));\n-        }\n-\n-        return responseFactory.createNotFoundResponse(\"Configuration not found for the specified id\");\n-    }\n-\n-    @PostMapping\n-    public ResponseEntity<String> postConfig(@RequestBody(required = true) JobFieldModel restModel) {\n-        boolean hasPermissions = hasRequiredPermissions(restModel.getFieldModels(), authorizationManager::hasCreatePermission);\n-        if (!hasPermissions) {\n-            return responseFactory.createForbiddenResponse();\n-        }\n-\n-        try {\n-            return runPostConfig(restModel);\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createInternalServerErrorResponse(restModel.getJobId(), e.getMessage());\n-        }\n-    }\n-\n-    private ResponseEntity<String> runPostConfig(JobFieldModel restModel) throws AlertException {\n-        String id = restModel.getJobId();\n-        if (StringUtils.isNotBlank(id) && jobConfigActions.doesJobExist(id)) {\n-            return responseFactory.createConflictResponse(id, \"Provided id must not be in use. To update an existing configuration, use PUT.\");\n-        }\n-\n-        try {\n-            JobFieldModel updatedEntity = jobConfigActions.saveJob(restModel);\n-            return responseFactory.createCreatedResponse(updatedEntity.getJobId(), \"Created\");\n-        } catch (AlertFieldException e) {\n-            return responseFactory.createFieldErrorResponse(id, \"There were errors with the configuration.\", e.getFieldErrors());\n-        }\n-    }\n-\n-    @PutMapping(\"/{id}\")\n-    public ResponseEntity<String> putConfig(@PathVariable UUID id, @RequestBody(required = true) JobFieldModel restModel) {\n-        boolean hasPermissions = hasRequiredPermissions(restModel.getFieldModels(), authorizationManager::hasWritePermission);\n-        if (!hasPermissions) {\n-            return responseFactory.createForbiddenResponse();\n-        }\n-\n-        try {\n-            return runPutConfig(id, restModel);\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createInternalServerErrorResponse(restModel.getJobId(), e.getMessage());\n-        }\n+    @GetMapping(\"/validate\")\n+    public List<JobFieldStatuses> validateJobs() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0ODIwMA==", "bodyText": "no because the overridden validate method is a POST mapping and takes a parameter.  The method signature is different and has a different request mapping associated with it.  They do not conflict.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487048200", "createdAt": "2020-09-11T13:34:23Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigController.java", "diffHunk": "@@ -22,316 +22,83 @@\n  */\n package com.synopsys.integration.alert.web.api.job;\n \n-import java.util.Collection;\n-import java.util.EnumSet;\n-import java.util.LinkedList;\n import java.util.List;\n-import java.util.Optional;\n-import java.util.Set;\n import java.util.UUID;\n-import java.util.function.BiFunction;\n-import java.util.stream.Collectors;\n \n-import org.apache.commons.lang3.StringUtils;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.PutMapping;\n import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.synopsys.integration.alert.common.ContentConverter;\n-import com.synopsys.integration.alert.common.descriptor.Descriptor;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n-import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n-import com.synopsys.integration.alert.common.message.model.MessageResult;\n-import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n-import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n-import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.api.BaseJobResourceController;\n+import com.synopsys.integration.alert.common.rest.api.ReadAllController;\n+import com.synopsys.integration.alert.common.rest.api.TestController;\n+import com.synopsys.integration.alert.common.rest.api.ValidateController;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n-import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.web.api.config.ConfigController;\n-import com.synopsys.integration.alert.web.common.BaseController;\n-import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n-import com.synopsys.integration.exception.IntegrationException;\n-import com.synopsys.integration.function.ThrowingFunction;\n-import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @RestController\n @RequestMapping(JobConfigController.JOB_CONFIGURATION_PATH)\n-public class JobConfigController extends BaseController {\n+public class JobConfigController implements BaseJobResourceController, ReadAllController, TestController<JobFieldModel>, ValidateController<JobFieldModel> {\n     public static final String JOB_CONFIGURATION_PATH = ConfigController.CONFIGURATION_PATH + \"/job\";\n-    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n-    private final Logger logger = LoggerFactory.getLogger(JobConfigController.class);\n     private final JobConfigActions jobConfigActions;\n-    private final ResponseFactory responseFactory;\n-    private final ContentConverter contentConverter;\n-    private final AuthorizationManager authorizationManager;\n-    private final DescriptorAccessor descriptorAccessor;\n-    private final DescriptorMap descriptorMap;\n-    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n \n     @Autowired\n-    public JobConfigController(JobConfigActions jobConfigActions, ResponseFactory responseFactory, ContentConverter contentConverter, AuthorizationManager authorizationManager,\n-        DescriptorAccessor descriptorAccessor, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {\n+    public JobConfigController(JobConfigActions jobConfigActions) {\n         this.jobConfigActions = jobConfigActions;\n-        this.responseFactory = responseFactory;\n-        this.contentConverter = contentConverter;\n-        this.authorizationManager = authorizationManager;\n-        this.descriptorAccessor = descriptorAccessor;\n-        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n-        this.descriptorMap = descriptorMap;\n     }\n \n-    @GetMapping\n-    public ResponseEntity<String> getJobs() {\n-        try {\n-            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n-                                              .stream()\n-                                              .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n-                                              .map(RegisteredDescriptorModel::getName)\n-                                              .collect(Collectors.toSet());\n-            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name()), descriptorNames)) {\n-                return responseFactory.createForbiddenResponse();\n-            }\n-            List<JobFieldModel> models = new LinkedList<>();\n-            List<JobFieldModel> allModels = jobConfigActions.getAllJobs();\n-\n-            for (JobFieldModel jobModel : allModels) {\n-                boolean includeJob = hasRequiredPermissions(jobModel.getFieldModels(), authorizationManager::hasReadPermission);\n-                if (includeJob) {\n-                    models.add(jobModel);\n-                }\n-            }\n-            return responseFactory.createOkContentResponse(contentConverter.getJsonString(models));\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createMessageResponse(HttpStatus.INTERNAL_SERVER_ERROR, \"There was an issue retrieving data from the database.\");\n-        }\n-    }\n-\n-    @GetMapping(\"/{id}\")\n-    public ResponseEntity<String> getJob(@PathVariable UUID id) {\n-        Optional<JobFieldModel> optionalModel;\n-        try {\n-            optionalModel = jobConfigActions.getJobById(id);\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createMessageResponse(HttpStatus.INTERNAL_SERVER_ERROR, \"There was an issue retrieving data from the database for ID: \" + id);\n-        }\n-\n-        if (optionalModel.isPresent()) {\n-            JobFieldModel fieldModel = optionalModel.get();\n-            boolean hasPermissions = hasRequiredPermissions(fieldModel.getFieldModels(), authorizationManager::hasReadPermission);\n-            if (!hasPermissions) {\n-                return responseFactory.createForbiddenResponse();\n-            }\n-            return responseFactory.createOkContentResponse(contentConverter.getJsonString(fieldModel));\n-        }\n-\n-        return responseFactory.createNotFoundResponse(\"Configuration not found for the specified id\");\n-    }\n-\n-    @PostMapping\n-    public ResponseEntity<String> postConfig(@RequestBody(required = true) JobFieldModel restModel) {\n-        boolean hasPermissions = hasRequiredPermissions(restModel.getFieldModels(), authorizationManager::hasCreatePermission);\n-        if (!hasPermissions) {\n-            return responseFactory.createForbiddenResponse();\n-        }\n-\n-        try {\n-            return runPostConfig(restModel);\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createInternalServerErrorResponse(restModel.getJobId(), e.getMessage());\n-        }\n-    }\n-\n-    private ResponseEntity<String> runPostConfig(JobFieldModel restModel) throws AlertException {\n-        String id = restModel.getJobId();\n-        if (StringUtils.isNotBlank(id) && jobConfigActions.doesJobExist(id)) {\n-            return responseFactory.createConflictResponse(id, \"Provided id must not be in use. To update an existing configuration, use PUT.\");\n-        }\n-\n-        try {\n-            JobFieldModel updatedEntity = jobConfigActions.saveJob(restModel);\n-            return responseFactory.createCreatedResponse(updatedEntity.getJobId(), \"Created\");\n-        } catch (AlertFieldException e) {\n-            return responseFactory.createFieldErrorResponse(id, \"There were errors with the configuration.\", e.getFieldErrors());\n-        }\n-    }\n-\n-    @PutMapping(\"/{id}\")\n-    public ResponseEntity<String> putConfig(@PathVariable UUID id, @RequestBody(required = true) JobFieldModel restModel) {\n-        boolean hasPermissions = hasRequiredPermissions(restModel.getFieldModels(), authorizationManager::hasWritePermission);\n-        if (!hasPermissions) {\n-            return responseFactory.createForbiddenResponse();\n-        }\n-\n-        try {\n-            return runPutConfig(id, restModel);\n-        } catch (AlertException e) {\n-            logger.error(e.getMessage(), e);\n-            return responseFactory.createInternalServerErrorResponse(restModel.getJobId(), e.getMessage());\n-        }\n+    @GetMapping(\"/validate\")\n+    public List<JobFieldStatuses> validateJobs() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA0NTgwMw=="}, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjYzMTc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/certificate/CertificateActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NDozNlrOHQfdGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NDozNlrOHQfdGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NDYxNw==", "bodyText": "Missing a space before \"{}\"", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487054617", "createdAt": "2020-09-11T13:44:36Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/certificate/CertificateActions.java", "diffHunk": "@@ -28,77 +28,116 @@\n import java.util.stream.Collectors;\n \n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.action.api.AbstractResourceActions;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.exception.AlertException;\n-import com.synopsys.integration.alert.common.exception.AlertFieldException;\n import com.synopsys.integration.alert.common.persistence.accessor.CustomCertificateAccessor;\n import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.common.security.CertificateUtility;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.component.certificates.CertificatesDescriptor;\n+import com.synopsys.integration.alert.component.certificates.CertificatesDescriptorKey;\n import com.synopsys.integration.util.IntegrationEscapeUtil;\n \n @Component\n-public class CertificateActions {\n+public class CertificateActions extends AbstractResourceActions<CertificateModel> {\n     private final Logger logger = LoggerFactory.getLogger(CertificateActions.class);\n     private static final String ERROR_DUPLICATE_ALIAS = \"A certificate with this alias already exists.\";\n     private final CertificateUtility certificateUtility;\n     private final CustomCertificateAccessor certificateAccessor;\n     private final IntegrationEscapeUtil escapeUtil;\n \n     @Autowired\n-    public CertificateActions(CustomCertificateAccessor certificateAccessor, CertificateUtility certificateUtility) {\n+    public CertificateActions(CertificatesDescriptorKey descriptorKey, AuthorizationManager authorizationManager, CustomCertificateAccessor certificateAccessor, CertificateUtility certificateUtility) {\n+        super(descriptorKey, ConfigContextEnum.GLOBAL, authorizationManager);\n         this.certificateAccessor = certificateAccessor;\n         this.certificateUtility = certificateUtility;\n         escapeUtil = new IntegrationEscapeUtil();\n     }\n \n-    public List<CertificateModel> readCertificates() {\n-        return certificateAccessor.getCertificates().stream()\n-                   .map(this::convertFromDatabaseModel)\n-                   .collect(Collectors.toList());\n+    @Override\n+    public ActionResponse<List<CertificateModel>> readAllResources() {\n+        List<CertificateModel> certificates = certificateAccessor.getCertificates().stream()\n+                                                  .map(this::convertFromDatabaseModel)\n+                                                  .collect(Collectors.toList());\n+        return new ActionResponse<>(HttpStatus.OK, certificates);\n     }\n \n-    public Optional<CertificateModel> readCertificate(Long id) {\n-        return certificateAccessor.getCertificate(id)\n-                   .map(this::convertFromDatabaseModel);\n+    @Override\n+    public ActionResponse<CertificateModel> readResource(Long id) {\n+        Optional<CertificateModel> model = certificateAccessor.getCertificate(id)\n+                                               .map(this::convertFromDatabaseModel);\n+        if (model.isPresent()) {\n+            return new ActionResponse<>(HttpStatus.OK, model.get());\n+        }\n+\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Certificate with id:%d not found.\", id));\n     }\n \n-    public ValidationResponseModel validateCertificate(CertificateModel certificateModel) {\n-        List<AlertFieldStatus> fieldErrors = validateCertificateFields(certificateModel);\n+    @Override\n+    public ValidationActionResponse testResource(CertificateModel resource) {\n+        return validateResource(resource);\n+    }\n+\n+    @Override\n+    public ValidationActionResponse validateResource(CertificateModel resource) {\n+        ValidationResponseModel responseModel;\n+        if (StringUtils.isNotBlank(resource.getId()) && !NumberUtils.isCreatable(resource.getId())) {\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"Invalid resource id\");\n+            return new ValidationActionResponse(HttpStatus.BAD_REQUEST, responseModel);\n+        }\n+        List<AlertFieldStatus> fieldErrors = validateCertificateFields(resource);\n         if (fieldErrors.isEmpty()) {\n-            return ValidationResponseModel.withoutFieldStatuses(\"The certificate configuration is valid\");\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"The certificate configuration is valid\");\n+            return new ValidationActionResponse(HttpStatus.OK, responseModel);\n         }\n-        return ValidationResponseModel.fromStatusCollection(\"There were problems with the certificate configuration\", fieldErrors);\n+        responseModel = ValidationResponseModel.fromStatusCollection(\"There were problems with the certificate configuration\", fieldErrors);\n+        return new ValidationActionResponse(HttpStatus.BAD_REQUEST, responseModel);\n     }\n \n-    public CertificateModel createCertificate(CertificateModel certificateModel) throws AlertException {\n-        if (null != certificateModel.getId()) {\n-            throw new AlertDatabaseConstraintException(\"id cannot be present to create a new certificate on the server.\");\n-        }\n-        validateCertificateModel(certificateModel);\n-        String loggableAlias = escapeUtil.replaceWithUnderscore(certificateModel.getAlias());\n+    @Override\n+    public ActionResponse<CertificateModel> createResource(CertificateModel resource) {\n+        String loggableAlias = escapeUtil.replaceWithUnderscore(resource.getAlias());\n         logger.info(\"Importing certificate with alias {}\", loggableAlias);\n-        return importCertificate(certificateModel);\n+        try {\n+            CertificateModel certificateModel = importCertificate(resource);\n+            return new ActionResponse<>(HttpStatus.OK, certificateModel);\n+        } catch (AlertException ex) {\n+            String message = ex.getMessage();\n+            logger.error(\"There was an issue importing the certificate.{}\", message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjYzNjk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/certificate/CertificateActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NTo0MFrOHQfgLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NTo0MFrOHQfgLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NTQwNA==", "bodyText": "null passed to the constructor", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487055404", "createdAt": "2020-09-11T13:45:40Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/certificate/CertificateActions.java", "diffHunk": "@@ -113,19 +152,22 @@ private CertificateModel importCertificate(CertificateModel certificateModel) th\n         }\n     }\n \n-    /**\n-     * @return true if the certificate existed\n-     */\n-    public boolean deleteCertificate(Long id) throws AlertException {\n-        Optional<CustomCertificateModel> certificate = certificateAccessor.getCertificate(id);\n-        if (certificate.isPresent()) {\n-            CustomCertificateModel certificateModel = certificate.get();\n-            logger.info(\"Delete certificate with id: {} and alias: {}\", certificateModel.getNullableId(), certificateModel.getAlias());\n-            certificateUtility.removeCertificate(certificateModel);\n-            certificateAccessor.deleteCertificate(id);\n-            return true;\n+    @Override\n+    public ActionResponse<CertificateModel> deleteResource(Long id) {\n+        try {\n+            Optional<CustomCertificateModel> certificate = certificateAccessor.getCertificate(id);\n+            if (certificate.isPresent()) {\n+                CustomCertificateModel certificateModel = certificate.get();\n+                logger.info(\"Delete certificate with id: {} and alias: {}\", certificateModel.getNullableId(), certificateModel.getAlias());\n+                certificateUtility.removeCertificate(certificateModel);\n+                certificateAccessor.deleteCertificate(id);\n+            }\n+        } catch (AlertException ex) {\n+            logger.error(\"Error deleting certificate\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting certificate: %s\", ex.getMessage()));\n         }\n-        return false;\n+\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjYzODcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/certificate/CertificateActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NjowOFrOHQfhQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0NjowOFrOHQfhQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NTY4MA==", "bodyText": "If the certificate is not present, we should return a 404", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487055680", "createdAt": "2020-09-11T13:46:08Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/certificate/CertificateActions.java", "diffHunk": "@@ -113,19 +152,22 @@ private CertificateModel importCertificate(CertificateModel certificateModel) th\n         }\n     }\n \n-    /**\n-     * @return true if the certificate existed\n-     */\n-    public boolean deleteCertificate(Long id) throws AlertException {\n-        Optional<CustomCertificateModel> certificate = certificateAccessor.getCertificate(id);\n-        if (certificate.isPresent()) {\n-            CustomCertificateModel certificateModel = certificate.get();\n-            logger.info(\"Delete certificate with id: {} and alias: {}\", certificateModel.getNullableId(), certificateModel.getAlias());\n-            certificateUtility.removeCertificate(certificateModel);\n-            certificateAccessor.deleteCertificate(id);\n-            return true;\n+    @Override\n+    public ActionResponse<CertificateModel> deleteResource(Long id) {\n+        try {\n+            Optional<CustomCertificateModel> certificate = certificateAccessor.getCertificate(id);\n+            if (certificate.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY1MDM3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigController.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0OTowN1rOHQfohA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo0OTowN1rOHQfohA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1NzU0MA==", "bodyText": "Eventually, we should wrap this list in an object before returning.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487057540", "createdAt": "2020-09-11T13:49:07Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigController.java", "diffHunk": "@@ -22,241 +22,69 @@\n  */\n package com.synopsys.integration.alert.web.api.config;\n \n-import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.ResponseEntity;\n-import org.springframework.web.bind.annotation.DeleteMapping;\n import org.springframework.web.bind.annotation.GetMapping;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.PostMapping;\n-import org.springframework.web.bind.annotation.PutMapping;\n-import org.springframework.web.bind.annotation.RequestBody;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.bind.annotation.RestController;\n \n-import com.synopsys.integration.alert.common.ContentConverter;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n-import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n-import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.api.ConfigResourceController;\n+import com.synopsys.integration.alert.common.rest.api.TestController;\n+import com.synopsys.integration.alert.common.rest.api.ValidateController;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n-import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.web.common.BaseController;\n-import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n-import com.synopsys.integration.exception.IntegrationException;\n-import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @RestController\n @RequestMapping(ConfigController.CONFIGURATION_PATH)\n-public class ConfigController extends BaseController {\n+public class ConfigController implements ConfigResourceController, TestController<FieldModel>, ValidateController<FieldModel> {\n     public static final String CONFIGURATION_PATH = BaseController.BASE_PATH + \"/configuration\";\n-    public static final String EXCEPTION_FORMAT_CONFIGURATIONS_NOT_FOUND_FOR_CONTEXT_AND_DESCRIPTOR = \"Configurations not found for the context '%s' and descriptor '%s'.\";\n-    private final Logger logger = LoggerFactory.getLogger(ConfigController.class);\n     private final ConfigActions configActions;\n-    private final ContentConverter contentConverter;\n-    private final ResponseFactory responseFactory;\n-    private final AuthorizationManager authorizationManager;\n-    private final DescriptorMap descriptorMap;\n-    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n \n     @Autowired\n-    public ConfigController(ConfigActions configActions, ContentConverter contentConverter, ResponseFactory responseFactory, AuthorizationManager authorizationManager,\n-        DescriptorMap descriptorMap, PKIXErrorResponseFactory pkixErrorResponseFactory) {\n+    public ConfigController(ConfigActions configActions) {\n         this.configActions = configActions;\n-        this.contentConverter = contentConverter;\n-        this.responseFactory = responseFactory;\n-        this.authorizationManager = authorizationManager;\n-        this.descriptorMap = descriptorMap;\n-        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n     }\n \n     @GetMapping\n-    public ResponseEntity<String> getConfigs(@RequestParam ConfigContextEnum context, @RequestParam(required = false) String descriptorName) {\n-        List<FieldModel> models;\n-        if (!authorizationManager.hasReadPermission(context.name(), descriptorName)) {\n-            return responseFactory.createForbiddenResponse();\n-        }\n-        try {\n-            DescriptorKey descriptorKey = descriptorMap.getDescriptorKey(descriptorName).orElseThrow(() -> new AlertException(\"Could not find a Descriptor with the name: \" + descriptorName));\n-            models = configActions.getConfigs(context, descriptorKey);\n-        } catch (AlertException e) {\n-            logger.error(\"Was not able to find configurations with the context {}, and descriptorName {} to get.\", context, descriptorName);\n-            return responseFactory.createNotFoundResponse(String.format(EXCEPTION_FORMAT_CONFIGURATIONS_NOT_FOUND_FOR_CONTEXT_AND_DESCRIPTOR, context, descriptorName));\n-        }\n-\n-        if (models.isEmpty()) {\n-            return responseFactory.createNotFoundResponse(String.format(EXCEPTION_FORMAT_CONFIGURATIONS_NOT_FOUND_FOR_CONTEXT_AND_DESCRIPTOR, context, descriptorName));\n-        }\n-\n-        return responseFactory.createOkContentResponse(contentConverter.getJsonString(models));\n+    public List<FieldModel> getAll(@RequestParam ConfigContextEnum context, @RequestParam(required = false) String descriptorName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY1NzMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MDo0NlrOHQfsuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MDo0NlrOHQfsuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1ODYxOQ==", "bodyText": "null used in constructor", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487058619", "createdAt": "2020-09-11T13:50:46Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "diffHunk": "@@ -31,85 +30,128 @@\n import java.util.Optional;\n \n import org.apache.commons.lang3.EnumUtils;\n-import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.action.api.AbstractConfigResourceActions;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.exception.AlertException;\n import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n import com.synopsys.integration.alert.web.common.descriptor.DescriptorProcessor;\n import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @Component\n-public class ConfigActions {\n+public class ConfigActions extends AbstractConfigResourceActions {\n+    private final Logger logger = LoggerFactory.getLogger(ConfigActions.class);\n     private final ConfigurationAccessor configurationAccessor;\n     private final FieldModelProcessor fieldModelProcessor;\n     private final DescriptorProcessor descriptorProcessor;\n     private final ConfigurationFieldModelConverter modelConverter;\n+    private final DescriptorMap descriptorMap;\n+    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n \n     @Autowired\n-    public ConfigActions(ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter) {\n+    public ConfigActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor, ConfigurationAccessor configurationAccessor,\n+        FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter,\n+        DescriptorMap descriptorMap, PKIXErrorResponseFactory pkixErrorResponseFactory) {\n+        super(authorizationManager, descriptorAccessor);\n         this.configurationAccessor = configurationAccessor;\n         this.fieldModelProcessor = fieldModelProcessor;\n         this.descriptorProcessor = descriptorProcessor;\n         this.modelConverter = modelConverter;\n+        this.descriptorMap = descriptorMap;\n+        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n     }\n \n-    public boolean doesConfigExist(String id) throws AlertException {\n-        return StringUtils.isNotBlank(id) && doesConfigExist(Long.parseLong(id));\n+    @Override\n+    protected ActionResponse<List<FieldModel>> readAllResources() {\n+        return new ActionResponse<>(HttpStatus.NOT_IMPLEMENTED, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjY2NDk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MjozNlrOHQfxew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzo1MjozNlrOHQfxew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzA1OTgzNQ==", "bodyText": "null passed in constructor", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487059835", "createdAt": "2020-09-11T13:52:36Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -258,53 +324,80 @@ public MessageResult validateJob(JobFieldModel jobFieldModel) {\n             }\n         }\n \n-        return errorsList;\n+        return new ActionResponse<>(HttpStatus.OK, errorsList);\n     }\n \n-    // TODO abstract duplicate functionality\n-    public MessageResult testJob(JobFieldModel jobFieldModel) throws IntegrationException {\n-        MessageResult jobValidationResult = validateJob(jobFieldModel);\n-        if (jobValidationResult.hasErrors()) {\n-            return jobValidationResult;\n-        }\n-\n-        Collection<FieldModel> otherJobModels = new LinkedList<>();\n-        FieldModel channelFieldModel = getChannelFieldModelAndPopulateOtherJobModels(jobFieldModel, otherJobModels);\n-\n-        if (null != channelFieldModel) {\n-            Optional<TestAction> testActionOptional = descriptorProcessor.retrieveTestAction(channelFieldModel);\n-            if (testActionOptional.isPresent()) {\n-                Map<String, ConfigurationFieldModel> fields = createFieldsMap(channelFieldModel, otherJobModels);\n-                // The custom message fields are not written to the database or defined fields in the database.  Need to manually add them.\n-                // TODO Create a mechanism to create the field accessor with a combination of fields in the database and fields that are not.\n-                Optional<ConfigurationFieldModel> topicField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_TOPIC);\n-                Optional<ConfigurationFieldModel> messageField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_MESSAGE);\n-                topicField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_TOPIC, model));\n-                messageField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_MESSAGE, model));\n-                TestAction testAction = testActionOptional.get();\n-                FieldAccessor fieldAccessor = new FieldAccessor(fields);\n-                String jobId = channelFieldModel.getId();\n-\n-                MessageResult providerTestResult = testProviderConfig(fieldAccessor, jobId, channelFieldModel);\n-                if (providerTestResult.hasErrors()) {\n-                    return providerTestResult;\n+    @Override\n+    protected ValidationActionResponse testResource(JobFieldModel resource) {\n+        ValidationResponseModel responseModel;\n+        String id = resource.getJobId();\n+        try {\n+\n+            Collection<FieldModel> otherJobModels = new LinkedList<>();\n+            FieldModel channelFieldModel = getChannelFieldModelAndPopulateOtherJobModels(resource, otherJobModels);\n+\n+            if (null != channelFieldModel) {\n+                Optional<TestAction> testActionOptional = descriptorProcessor.retrieveTestAction(channelFieldModel);\n+                if (testActionOptional.isPresent()) {\n+                    Map<String, ConfigurationFieldModel> fields = createFieldsMap(channelFieldModel, otherJobModels);\n+                    // The custom message fields are not written to the database or defined fields in the database.  Need to manually add them.\n+                    // TODO Create a mechanism to create the field accessor with a combination of fields in the database and fields that are not.\n+                    Optional<ConfigurationFieldModel> topicField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_TOPIC);\n+                    Optional<ConfigurationFieldModel> messageField = convertFieldToConfigurationField(channelFieldModel, TestAction.KEY_CUSTOM_MESSAGE);\n+                    topicField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_TOPIC, model));\n+                    messageField.ifPresent(model -> fields.put(TestAction.KEY_CUSTOM_MESSAGE, model));\n+                    TestAction testAction = testActionOptional.get();\n+                    FieldAccessor fieldAccessor = new FieldAccessor(fields);\n+                    String jobId = channelFieldModel.getId();\n+\n+                    MessageResult providerTestResult = testProviderConfig(fieldAccessor, jobId, channelFieldModel);\n+                    if (providerTestResult.hasErrors()) {\n+                        responseModel = ValidationResponseModel.fromStatusCollection(providerTestResult.getStatusMessage(), providerTestResult.getFieldStatuses());\n+                        return new ValidationActionResponse(HttpStatus.OK, responseModel);\n+                    }\n+\n+                    MessageResult testActionResult = testAction.testConfig(jobId, channelFieldModel, fieldAccessor);\n+                    List<AlertFieldStatus> resultFieldStatuses = testActionResult.getFieldStatuses();\n+                    responseModel = ValidationResponseModel.fromStatusCollection(testActionResult.getStatusMessage(), resultFieldStatuses);\n+                    return new ValidationActionResponse(HttpStatus.OK, responseModel);\n+                } else {\n+                    String descriptorName = channelFieldModel.getDescriptorName();\n+                    logger.error(\"Test action did not exist: {}\", descriptorName);\n+                    responseModel = ValidationResponseModel.withoutFieldStatuses(\"Test functionality not implemented for \" + descriptorName);\n+                    return new ValidationActionResponse(HttpStatus.METHOD_NOT_ALLOWED, responseModel);\n                 }\n-\n-                List<AlertFieldStatus> resultFieldStatuses = concatStatuses(jobValidationResult.getFieldStatuses(), providerTestResult.getFieldStatuses());\n-                MessageResult testActionResult = testAction.testConfig(jobId, channelFieldModel, fieldAccessor);\n-                resultFieldStatuses = concatStatuses(resultFieldStatuses, testActionResult.getFieldStatuses());\n-                return new MessageResult(testActionResult.getStatusMessage(), resultFieldStatuses);\n-            } else {\n-                String descriptorName = channelFieldModel.getDescriptorName();\n-                logger.error(\"Test action did not exist: {}\", descriptorName);\n-                throw new AlertMethodNotAllowedException(\"Test functionality not implemented for \" + descriptorName);\n             }\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"No field model of type channel was was sent to test.\");\n+            return new ValidationActionResponse(HttpStatus.BAD_REQUEST, responseModel);\n+        } catch (IntegrationRestException e) {\n+            logger.error(e.getMessage(), e);\n+            return ValidationActionResponse.createResponseFromIntegrationRestException(e);\n+        } catch (AlertFieldException e) {\n+            logger.error(\"Test Error with field Errors\", e);\n+            responseModel = ValidationResponseModel.fromStatusCollection(e.getMessage(), e.getFieldErrors());\n+            return new ValidationActionResponse(HttpStatus.OK, responseModel);\n+        } catch (AlertMethodNotAllowedException e) {\n+            logger.error(e.getMessage(), e);\n+            return new ValidationActionResponse(HttpStatus.METHOD_NOT_ALLOWED, ValidationResponseModel.withoutFieldStatuses(e.getMessage()));\n+        } catch (IntegrationException e) {\n+            responseModel = pkixErrorResponseFactory.createSSLExceptionResponse(id, e)\n+                                .orElse(ValidationResponseModel.withoutFieldStatuses(e.getMessage()));\n+            return new ValidationActionResponse(HttpStatus.OK, responseModel);\n+        } catch (Exception e) {\n+            logger.error(e.getMessage(), e);\n+            responseModel = pkixErrorResponseFactory.createSSLExceptionResponse(id, e)\n+                                .orElse(ValidationResponseModel.withoutFieldStatuses(e.getMessage()));\n+            return new ValidationActionResponse(HttpStatus.OK, responseModel);\n         }\n-        return new MessageResult(\"No field model of type channel was was sent to test.\");\n     }\n \n-    public Optional<String> checkGlobalConfigExists(String descriptorName) {\n-        return globalConfigExistsValidator.validate(descriptorName);\n+    public ActionResponse<String> checkGlobalConfigExists(String descriptorName) {\n+        Optional<String> configMissingMessage = globalConfigExistsValidator.validate(descriptorName);\n+        if (configMissingMessage.isPresent()) {\n+            String message = configMissingMessage.get();\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, message);\n+        }\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5"}, "originalPosition": 475}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzc0NDgxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODo1Nzo0MlrOHQqO-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMToxMjowNlrOHRO8Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMTIyNg==", "bodyText": "Do we prefer calling the other constructor ('this' keyword) in cases like this?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487231226", "createdAt": "2020-09-11T18:57:42Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzMjYwMg==", "bodyText": "The other constructor is from an earlier incarnation. I will remove it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487832602", "createdAt": "2020-09-14T11:12:06Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzMTIyNg=="}, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzc2MjQ4OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTowMzo0N1rOHQqaNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTowMzo0N1rOHQqaNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNDEwMA==", "bodyText": "This statement is written a lot. Should we have a private method or static method in ActionResponse to ensure it's always the same message?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487234100", "createdAt": "2020-09-11T19:03:47Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,184 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createAfterChecks(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteAfterChecks(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllAfterChecks();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptorAfterChecks(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testAfterChecks(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        return readAllByContextAndDescriptorAfterChecks(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {\n+        if (!authorizationManager.hasCreatePermission(resource.getContext(), resource.getDescriptorName())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateAfterChecks(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createAfterChecks(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<FieldModel>> getAll() {\n+        try {\n+            Set<String> descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                              .stream()\n+                                              .map(RegisteredDescriptorModel::getName)\n+                                              .collect(Collectors.toSet());\n+            if (!authorizationManager.anyReadPermission(List.of(ConfigContextEnum.DISTRIBUTION.name(), ConfigContextEnum.GLOBAL.name()), descriptorNames)) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+            }\n+            return readAllAfterChecks();\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error reading configurations: %s\", ex.getMessage()));\n+        }\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> getOne(Long id) {\n+        Optional<FieldModel> fieldModel = findFieldModel(id);\n+        if (fieldModel.isPresent()) {\n+            FieldModel model = fieldModel.get();\n+            if (!authorizationManager.hasReadPermission(model.getContext(), model.getDescriptorName())) {\n+                return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzc4NDM1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxMTowNVrOHQqnzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxMTowNVrOHQqnzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzNzU4MA==", "bodyText": "Instead of the Set object, could we return the statement in the try block otherwise return Set.of?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487237580", "createdAt": "2020-09-11T19:11:05Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+\n+    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+\n+    private Set<String> getDescriptorNames() {\n+        Set<String> descriptorNames = Set.of();\n+        try {\n+            descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                  .stream()\n+                                  .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                  .map(RegisteredDescriptorModel::getName)\n+                                  .collect(Collectors.toSet());\n+        } catch (AlertDatabaseConstraintException ex) {\n+            // ignore or add a logger.\n+        }\n+\n+        return descriptorNames;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzc4NzM3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxMjowMFrOHQqpoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxMjowMFrOHQqpoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIzODA0OA==", "bodyText": "More of these calls to FORBIDDEN and FORBIDDEN_MESSAGE. Makes me this we should put this object creation in a static variable somewhere.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487238048", "createdAt": "2020-09-11T19:12:00Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+\n+    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+\n+    private Set<String> getDescriptorNames() {\n+        Set<String> descriptorNames = Set.of();\n+        try {\n+            descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                  .stream()\n+                                  .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                  .map(RegisteredDescriptorModel::getName)\n+                                  .collect(Collectors.toSet());\n+        } catch (AlertDatabaseConstraintException ex) {\n+            // ignore or add a logger.\n+        }\n+\n+        return descriptorNames;\n+    }\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> create(JobFieldModel resource) {\n+        boolean hasPermissions = hasRequiredPermissions(resource.getFieldModels(), authorizationManager::hasCreatePermission);\n+        if (!hasPermissions) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzgwODEzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxNzozOVrOHQq3BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxNzozOVrOHQq3BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MTQ3Ng==", "bodyText": "This class also has references to the forbidden action response", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487241476", "createdAt": "2020-09-11T19:17:39Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractResourceActions<T> implements LongResourceActions<T>, ValidateAction<T>, TestAction<T> {\n+    public static final String FORBIDDEN_MESSAGE = \"User not authorized to perform the request\";\n+    public static final String RESOURCE_IDENTIFIER_MISSING = \"Resource identifier missing.\";\n+    private DescriptorKey descriptorKey;\n+    private AuthorizationManager authorizationManager;\n+    private ConfigContextEnum context;\n+\n+    public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum context, AuthorizationManager authorizationManager) {\n+        this.descriptorKey = descriptorKey;\n+        this.context = context;\n+        // to do change the authorization manager to use the context enum and the descriptor key\n+        this.authorizationManager = authorizationManager;\n+\n+    }\n+\n+    protected abstract ActionResponse<T> createAfterChecks(T resource);\n+\n+    protected abstract ActionResponse<T> deleteAfterChecks(Long id);\n+\n+    protected abstract ActionResponse<List<T>> readAllAfterChecks();\n+\n+    protected abstract ActionResponse<T> readAfterChecks(Long id);\n+\n+    protected abstract ValidationActionResponse testAfterChecks(T resource);\n+\n+    protected abstract ActionResponse<T> updateAfterChecks(Long id, T resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(T resource);\n+\n+    protected abstract Optional<T> findExisting(Long id);\n+\n+    @Override\n+    public ActionResponse<T> create(T resource) {\n+        if (!authorizationManager.hasCreatePermission(context.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NzgxMDY4OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxODoxOVrOHQq41w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOToxODoxOVrOHQq41w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI0MTk0Mw==", "bodyText": "Do we still want this null check or will this be removed?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487241943", "createdAt": "2020-09-11T19:18:19Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -0,0 +1,158 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractResourceActions<T> implements LongResourceActions<T>, ValidateAction<T>, TestAction<T> {\n+    public static final String FORBIDDEN_MESSAGE = \"User not authorized to perform the request\";\n+    public static final String RESOURCE_IDENTIFIER_MISSING = \"Resource identifier missing.\";\n+    private DescriptorKey descriptorKey;\n+    private AuthorizationManager authorizationManager;\n+    private ConfigContextEnum context;\n+\n+    public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum context, AuthorizationManager authorizationManager) {\n+        this.descriptorKey = descriptorKey;\n+        this.context = context;\n+        // to do change the authorization manager to use the context enum and the descriptor key\n+        this.authorizationManager = authorizationManager;\n+\n+    }\n+\n+    protected abstract ActionResponse<T> createAfterChecks(T resource);\n+\n+    protected abstract ActionResponse<T> deleteAfterChecks(Long id);\n+\n+    protected abstract ActionResponse<List<T>> readAllAfterChecks();\n+\n+    protected abstract ActionResponse<T> readAfterChecks(Long id);\n+\n+    protected abstract ValidationActionResponse testAfterChecks(T resource);\n+\n+    protected abstract ActionResponse<T> updateAfterChecks(Long id, T resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(T resource);\n+\n+    protected abstract Optional<T> findExisting(Long id);\n+\n+    @Override\n+    public ActionResponse<T> create(T resource) {\n+        if (!authorizationManager.hasCreatePermission(context.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        ValidationActionResponse validationResponse = validateAfterChecks(resource);\n+        if (validationResponse.isError()) {\n+            return new ActionResponse<>(validationResponse.getHttpStatus(), validationResponse.getMessage().orElse(null));\n+        }\n+        return createAfterChecks(resource);\n+    }\n+\n+    @Override\n+    public ActionResponse<List<T>> getAll() {\n+        if (!authorizationManager.hasReadPermission(context.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, AbstractResourceActions.FORBIDDEN_MESSAGE);\n+        }\n+        return readAllAfterChecks();\n+    }\n+\n+    @Override\n+    public ActionResponse<T> getOne(Long id) {\n+        if (null == id) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, RESOURCE_IDENTIFIER_MISSING);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzg2MjQ1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTozNToxMVrOHQrZjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMzo1ODoyM1rOHRVrTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MDMxOQ==", "bodyText": "This may look better if we fo an if check with a return then return Bad request by default if the if statement is skipped.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487250319", "createdAt": "2020-09-11T19:35:11Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "diffHunk": "@@ -118,54 +160,103 @@ public void deleteConfig(Long id) throws AlertException {\n                 configurationAccessor.deleteConfiguration(Long.parseLong(fieldModel.getId()));\n                 fieldModelProcessor.performAfterDeleteAction(fieldModel);\n             }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error deleting config id: %d\", id), ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n+\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT);\n     }\n \n-    public FieldModel saveConfig(FieldModel fieldModel, DescriptorKey descriptorKey) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n-        String context = modifiedFieldModel.getContext();\n-        Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n-        ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey, EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n-        FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n-        return dbSavedModel.fill(afterSaveAction);\n+    @Override\n+    protected ActionResponse<FieldModel> createAfterChecks(FieldModel resource) {\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(resource.getDescriptorName());\n+        if (descriptorKey.isPresent()) {\n+            try {\n+                FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(resource);\n+                String context = modifiedFieldModel.getContext();\n+                Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n+                ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey.get(), EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n+                FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n+                FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n+                FieldModel responseModel = dbSavedModel.fill(afterSaveAction);\n+                return new ActionResponse<>(HttpStatus.OK, responseModel);\n+            } catch (AlertException ex) {\n+                logger.error(\"Error creating configuration\", ex);\n+                return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+            }\n+        }\n+        return new ActionResponse<>(HttpStatus.BAD_REQUEST, \"descriptorName is missing or invalid\");\n     }\n \n-    public FieldModel updateConfig(Long id, FieldModel fieldModel) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n-        FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n-\n-        FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(fieldModel);\n-        Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n-        ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n-        FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n-        return dbSavedModel.fill(afterUpdateAction);\n+    @Override\n+    protected ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource) {\n+        try {\n+            Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n+            FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n+\n+            FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(resource);\n+            Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n+            ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n+            FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n+            FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n+            FieldModel responseModel = dbSavedModel.fill(afterUpdateAction);\n+            return new ActionResponse<>(HttpStatus.OK, responseModel);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error creating configuration\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+        }\n     }\n \n-    public String validateConfig(FieldModel fieldModel, List<AlertFieldStatus> fieldErrors) throws AlertFieldException {\n-        fieldErrors.addAll(fieldModelProcessor.validateFieldModel(fieldModel));\n-        if (!fieldErrors.isEmpty()) {\n-            throw new AlertFieldException(fieldErrors);\n+    @Override\n+    protected ValidationActionResponse validateAfterChecks(FieldModel resource) {\n+        List<AlertFieldStatus> fieldStatuses = fieldModelProcessor.validateFieldModel(resource);\n+        ValidationResponseModel responseModel;\n+        HttpStatus status = HttpStatus.OK;\n+        if (fieldStatuses.isEmpty()) {\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"The configuration is valid\");\n+        } else {\n+            status = HttpStatus.BAD_REQUEST;\n+            responseModel = ValidationResponseModel.fromStatusCollection(\"There were problems with the configuration\", fieldStatuses);\n         }\n-        return \"Valid\";\n+        return new ValidationActionResponse(status, responseModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgzNzExMQ==", "bodyText": "There's a ticket to add audit logging especially for users and role actions.  To ensure that we are logging consistently we most likely won't be able to use the circuit breaker pattern and return right away if we want to log when an action starts and completes.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487837111", "createdAt": "2020-09-14T11:21:11Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "diffHunk": "@@ -118,54 +160,103 @@ public void deleteConfig(Long id) throws AlertException {\n                 configurationAccessor.deleteConfiguration(Long.parseLong(fieldModel.getId()));\n                 fieldModelProcessor.performAfterDeleteAction(fieldModel);\n             }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error deleting config id: %d\", id), ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n+\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT);\n     }\n \n-    public FieldModel saveConfig(FieldModel fieldModel, DescriptorKey descriptorKey) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n-        String context = modifiedFieldModel.getContext();\n-        Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n-        ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey, EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n-        FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n-        return dbSavedModel.fill(afterSaveAction);\n+    @Override\n+    protected ActionResponse<FieldModel> createAfterChecks(FieldModel resource) {\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(resource.getDescriptorName());\n+        if (descriptorKey.isPresent()) {\n+            try {\n+                FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(resource);\n+                String context = modifiedFieldModel.getContext();\n+                Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n+                ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey.get(), EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n+                FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n+                FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n+                FieldModel responseModel = dbSavedModel.fill(afterSaveAction);\n+                return new ActionResponse<>(HttpStatus.OK, responseModel);\n+            } catch (AlertException ex) {\n+                logger.error(\"Error creating configuration\", ex);\n+                return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+            }\n+        }\n+        return new ActionResponse<>(HttpStatus.BAD_REQUEST, \"descriptorName is missing or invalid\");\n     }\n \n-    public FieldModel updateConfig(Long id, FieldModel fieldModel) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n-        FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n-\n-        FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(fieldModel);\n-        Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n-        ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n-        FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n-        return dbSavedModel.fill(afterUpdateAction);\n+    @Override\n+    protected ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource) {\n+        try {\n+            Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n+            FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n+\n+            FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(resource);\n+            Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n+            ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n+            FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n+            FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n+            FieldModel responseModel = dbSavedModel.fill(afterUpdateAction);\n+            return new ActionResponse<>(HttpStatus.OK, responseModel);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error creating configuration\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+        }\n     }\n \n-    public String validateConfig(FieldModel fieldModel, List<AlertFieldStatus> fieldErrors) throws AlertFieldException {\n-        fieldErrors.addAll(fieldModelProcessor.validateFieldModel(fieldModel));\n-        if (!fieldErrors.isEmpty()) {\n-            throw new AlertFieldException(fieldErrors);\n+    @Override\n+    protected ValidationActionResponse validateAfterChecks(FieldModel resource) {\n+        List<AlertFieldStatus> fieldStatuses = fieldModelProcessor.validateFieldModel(resource);\n+        ValidationResponseModel responseModel;\n+        HttpStatus status = HttpStatus.OK;\n+        if (fieldStatuses.isEmpty()) {\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"The configuration is valid\");\n+        } else {\n+            status = HttpStatus.BAD_REQUEST;\n+            responseModel = ValidationResponseModel.fromStatusCollection(\"There were problems with the configuration\", fieldStatuses);\n         }\n-        return \"Valid\";\n+        return new ValidationActionResponse(status, responseModel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MDMxOQ=="}, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Nzk0Mjk5MQ==", "bodyText": "Won't we still be able to log in all cases? Returning early would act like the if else statement above and you can fit all logs as needed, unless I'm missing something about that logging.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487942991", "createdAt": "2020-09-14T13:58:23Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "diffHunk": "@@ -118,54 +160,103 @@ public void deleteConfig(Long id) throws AlertException {\n                 configurationAccessor.deleteConfiguration(Long.parseLong(fieldModel.getId()));\n                 fieldModelProcessor.performAfterDeleteAction(fieldModel);\n             }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error deleting config id: %d\", id), ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n+\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT);\n     }\n \n-    public FieldModel saveConfig(FieldModel fieldModel, DescriptorKey descriptorKey) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n-        String context = modifiedFieldModel.getContext();\n-        Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n-        ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey, EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n-        FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n-        return dbSavedModel.fill(afterSaveAction);\n+    @Override\n+    protected ActionResponse<FieldModel> createAfterChecks(FieldModel resource) {\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(resource.getDescriptorName());\n+        if (descriptorKey.isPresent()) {\n+            try {\n+                FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(resource);\n+                String context = modifiedFieldModel.getContext();\n+                Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n+                ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey.get(), EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n+                FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n+                FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n+                FieldModel responseModel = dbSavedModel.fill(afterSaveAction);\n+                return new ActionResponse<>(HttpStatus.OK, responseModel);\n+            } catch (AlertException ex) {\n+                logger.error(\"Error creating configuration\", ex);\n+                return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+            }\n+        }\n+        return new ActionResponse<>(HttpStatus.BAD_REQUEST, \"descriptorName is missing or invalid\");\n     }\n \n-    public FieldModel updateConfig(Long id, FieldModel fieldModel) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n-        FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n-\n-        FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(fieldModel);\n-        Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n-        ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n-        FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n-        return dbSavedModel.fill(afterUpdateAction);\n+    @Override\n+    protected ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource) {\n+        try {\n+            Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n+            FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n+\n+            FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(resource);\n+            Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n+            ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n+            FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n+            FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n+            FieldModel responseModel = dbSavedModel.fill(afterUpdateAction);\n+            return new ActionResponse<>(HttpStatus.OK, responseModel);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error creating configuration\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+        }\n     }\n \n-    public String validateConfig(FieldModel fieldModel, List<AlertFieldStatus> fieldErrors) throws AlertFieldException {\n-        fieldErrors.addAll(fieldModelProcessor.validateFieldModel(fieldModel));\n-        if (!fieldErrors.isEmpty()) {\n-            throw new AlertFieldException(fieldErrors);\n+    @Override\n+    protected ValidationActionResponse validateAfterChecks(FieldModel resource) {\n+        List<AlertFieldStatus> fieldStatuses = fieldModelProcessor.validateFieldModel(resource);\n+        ValidationResponseModel responseModel;\n+        HttpStatus status = HttpStatus.OK;\n+        if (fieldStatuses.isEmpty()) {\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"The configuration is valid\");\n+        } else {\n+            status = HttpStatus.BAD_REQUEST;\n+            responseModel = ValidationResponseModel.fromStatusCollection(\"There were problems with the configuration\", fieldStatuses);\n         }\n-        return \"Valid\";\n+        return new ValidationActionResponse(status, responseModel);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MDMxOQ=="}, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzg2ODM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTozNzoxN1rOHQrdJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTozNzoxN1rOHQrdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MTIzNg==", "bodyText": "Might be cleaner to remove this declaration and just create the object before returning.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487251236", "createdAt": "2020-09-11T19:37:17Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/config/ConfigActions.java", "diffHunk": "@@ -118,54 +160,103 @@ public void deleteConfig(Long id) throws AlertException {\n                 configurationAccessor.deleteConfiguration(Long.parseLong(fieldModel.getId()));\n                 fieldModelProcessor.performAfterDeleteAction(fieldModel);\n             }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error deleting config id: %d\", id), ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n+\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT);\n     }\n \n-    public FieldModel saveConfig(FieldModel fieldModel, DescriptorKey descriptorKey) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n-        String context = modifiedFieldModel.getContext();\n-        Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n-        ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey, EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n-        FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n-        return dbSavedModel.fill(afterSaveAction);\n+    @Override\n+    protected ActionResponse<FieldModel> createAfterChecks(FieldModel resource) {\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(resource.getDescriptorName());\n+        if (descriptorKey.isPresent()) {\n+            try {\n+                FieldModel modifiedFieldModel = fieldModelProcessor.performBeforeSaveAction(resource);\n+                String context = modifiedFieldModel.getContext();\n+                Map<String, ConfigurationFieldModel> configurationFieldModelMap = modelConverter.convertToConfigurationFieldModelMap(modifiedFieldModel);\n+                ConfigurationModel configuration = configurationAccessor.createConfiguration(descriptorKey.get(), EnumUtils.getEnum(ConfigContextEnum.class, context), configurationFieldModelMap.values());\n+                FieldModel dbSavedModel = modelConverter.convertToFieldModel(configuration);\n+                FieldModel afterSaveAction = fieldModelProcessor.performAfterSaveAction(dbSavedModel);\n+                FieldModel responseModel = dbSavedModel.fill(afterSaveAction);\n+                return new ActionResponse<>(HttpStatus.OK, responseModel);\n+            } catch (AlertException ex) {\n+                logger.error(\"Error creating configuration\", ex);\n+                return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+            }\n+        }\n+        return new ActionResponse<>(HttpStatus.BAD_REQUEST, \"descriptorName is missing or invalid\");\n     }\n \n-    public FieldModel updateConfig(Long id, FieldModel fieldModel) throws AlertException {\n-        validateConfig(fieldModel, new ArrayList<>());\n-        Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n-        FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n-\n-        FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(fieldModel);\n-        Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n-        ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n-        FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n-        FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n-        return dbSavedModel.fill(afterUpdateAction);\n+    @Override\n+    protected ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource) {\n+        try {\n+            Optional<ConfigurationModel> optionalPreviousConfig = configurationAccessor.getConfigurationById(id);\n+            FieldModel previousFieldModel = optionalPreviousConfig.isPresent() ? modelConverter.convertToFieldModel(optionalPreviousConfig.get()) : null;\n+\n+            FieldModel updatedFieldModel = fieldModelProcessor.performBeforeUpdateAction(resource);\n+            Collection<ConfigurationFieldModel> updatedFields = fieldModelProcessor.fillFieldModelWithExistingData(id, updatedFieldModel);\n+            ConfigurationModel configurationModel = configurationAccessor.updateConfiguration(id, updatedFields);\n+            FieldModel dbSavedModel = modelConverter.convertToFieldModel(configurationModel);\n+            FieldModel afterUpdateAction = fieldModelProcessor.performAfterUpdateAction(previousFieldModel, dbSavedModel);\n+            FieldModel responseModel = dbSavedModel.fill(afterUpdateAction);\n+            return new ActionResponse<>(HttpStatus.OK, responseModel);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error creating configuration\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error creating config: %s\", ex.getMessage()));\n+        }\n     }\n \n-    public String validateConfig(FieldModel fieldModel, List<AlertFieldStatus> fieldErrors) throws AlertFieldException {\n-        fieldErrors.addAll(fieldModelProcessor.validateFieldModel(fieldModel));\n-        if (!fieldErrors.isEmpty()) {\n-            throw new AlertFieldException(fieldErrors);\n+    @Override\n+    protected ValidationActionResponse validateAfterChecks(FieldModel resource) {\n+        List<AlertFieldStatus> fieldStatuses = fieldModelProcessor.validateFieldModel(resource);\n+        ValidationResponseModel responseModel;\n+        HttpStatus status = HttpStatus.OK;\n+        if (fieldStatuses.isEmpty()) {\n+            responseModel = ValidationResponseModel.withoutFieldStatuses(\"The configuration is valid\");\n+        } else {\n+            status = HttpStatus.BAD_REQUEST;\n+            responseModel = ValidationResponseModel.fromStatusCollection(\"There were problems with the configuration\", fieldStatuses);\n         }\n-        return \"Valid\";\n+        return new ValidationActionResponse(status, responseModel);\n     }\n \n-    public String testConfig(FieldModel restModel) throws IntegrationException {\n-        validateConfig(restModel, new ArrayList<>());\n-        Optional<TestAction> testActionOptional = descriptorProcessor.retrieveTestAction(restModel);\n+    @Override\n+    protected ValidationActionResponse testAfterChecks(FieldModel resource) {\n+        Optional<TestAction> testActionOptional = descriptorProcessor.retrieveTestAction(resource);\n+        ValidationResponseModel responseModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0Nzg3NDU5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTozOTozNFrOHQrg8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxOTozOTozNFrOHQrg8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzI1MjIxMA==", "bodyText": "A lot of constructor params getting passed. Something to look into, maybe add a TODO to revisit this?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1162#discussion_r487252210", "createdAt": "2020-09-11T19:39:34Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -56,150 +63,183 @@\n import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.message.model.MessageResult;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n import com.synopsys.integration.alert.web.common.descriptor.DescriptorProcessor;\n import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @Component\n-public class JobConfigActions {\n+public class JobConfigActions extends AbstractJobResourceActions {\n     private final Logger logger = LoggerFactory.getLogger(JobConfigActions.class);\n     private final ConfigurationAccessor configurationAccessor;\n     private final FieldModelProcessor fieldModelProcessor;\n     private final DescriptorProcessor descriptorProcessor;\n     private final ConfigurationFieldModelConverter modelConverter;\n     private final GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public JobConfigActions(ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter,\n-        GlobalConfigExistsValidator globalConfigExistsValidator) {\n+    public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor, ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor,\n+        ConfigurationFieldModelConverter modelConverter, GlobalConfigExistsValidator globalConfigExistsValidator, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1737, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}