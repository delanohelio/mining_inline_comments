{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1NDg1NTA1", "number": 858, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTozMDo0MVrODf_o9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDozMDoyMVrODgtzQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0ODc1MTI3OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxOTozMDo0MVrOFqBWWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowNDo1MVrOFrF3dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNjYxNw==", "bodyText": "Why are we ignoring this exception?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r379606617", "createdAt": "2020-02-14T19:30:41Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -58,56 +54,52 @@\n @Component\n @Transactional\n public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n-    public static final Integer DEFAULT_OFFSET = 0;\n-    public static final Integer DEFAULT_LIMIT = 100;\n-\n     public static final int MAX_DESCRIPTION_LENGTH = 250;\n     public static final int MAX_PROJECT_NAME_LENGTH = 507;\n \n     private final Logger logger = LoggerFactory.getLogger(DefaultProviderDataAccessor.class);\n     private final ProviderProjectRepository providerProjectRepository;\n     private final ProviderUserProjectRelationRepository providerUserProjectRelationRepository;\n     private final ProviderUserRepository providerUserRepository;\n+    private final ConfigurationAccessor configurationAccessor;\n \n     @Autowired\n-    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository) {\n+    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository,\n+        ConfigurationAccessor configurationAccessor) {\n         this.providerProjectRepository = providerProjectRepository;\n         this.providerUserProjectRelationRepository = providerUserProjectRelationRepository;\n         this.providerUserRepository = providerUserRepository;\n+        this.configurationAccessor = configurationAccessor;\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByHref(String href) {\n-        return providerProjectRepository.findFirstByHref(href).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByName(String name) {\n-        return providerProjectRepository.findFirstByName(name).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderName(String providerName) {\n-        return providerProjectRepository.findByProvider(providerName)\n-                   .stream()\n-                   .map(this::convertToProjectModel)\n-                   .collect(Collectors.toList());\n+    public List<ProviderProject> findByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<Long> optionalConfigId = configurationAccessor.getProviderConfigurationByName(providerConfigName)\n+                                                  .map(ConfigurationModel::getConfigurationId);\n+            if (optionalConfigId.isPresent()) {\n+                return providerProjectRepository.findByProviderConfigId(optionalConfigId.get())\n+                           .stream()\n+                           .map(this::convertToProjectModel)\n+                           .collect(Collectors.toList());\n+            }\n+        } catch (AlertDatabaseConstraintException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d85892ad101f9a3ebd43298ebed271254999f88"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4Mjk2Nw==", "bodyText": "If the configId is present, then the database constraint is fulfilled, meaning that specific exception will not be thrown.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r380682967", "createdAt": "2020-02-18T13:51:38Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -58,56 +54,52 @@\n @Component\n @Transactional\n public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n-    public static final Integer DEFAULT_OFFSET = 0;\n-    public static final Integer DEFAULT_LIMIT = 100;\n-\n     public static final int MAX_DESCRIPTION_LENGTH = 250;\n     public static final int MAX_PROJECT_NAME_LENGTH = 507;\n \n     private final Logger logger = LoggerFactory.getLogger(DefaultProviderDataAccessor.class);\n     private final ProviderProjectRepository providerProjectRepository;\n     private final ProviderUserProjectRelationRepository providerUserProjectRelationRepository;\n     private final ProviderUserRepository providerUserRepository;\n+    private final ConfigurationAccessor configurationAccessor;\n \n     @Autowired\n-    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository) {\n+    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository,\n+        ConfigurationAccessor configurationAccessor) {\n         this.providerProjectRepository = providerProjectRepository;\n         this.providerUserProjectRelationRepository = providerUserProjectRelationRepository;\n         this.providerUserRepository = providerUserRepository;\n+        this.configurationAccessor = configurationAccessor;\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByHref(String href) {\n-        return providerProjectRepository.findFirstByHref(href).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByName(String name) {\n-        return providerProjectRepository.findFirstByName(name).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderName(String providerName) {\n-        return providerProjectRepository.findByProvider(providerName)\n-                   .stream()\n-                   .map(this::convertToProjectModel)\n-                   .collect(Collectors.toList());\n+    public List<ProviderProject> findByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<Long> optionalConfigId = configurationAccessor.getProviderConfigurationByName(providerConfigName)\n+                                                  .map(ConfigurationModel::getConfigurationId);\n+            if (optionalConfigId.isPresent()) {\n+                return providerProjectRepository.findByProviderConfigId(optionalConfigId.get())\n+                           .stream()\n+                           .map(this::convertToProjectModel)\n+                           .collect(Collectors.toList());\n+            }\n+        } catch (AlertDatabaseConstraintException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNjYxNw=="}, "originalCommit": {"oid": "6d85892ad101f9a3ebd43298ebed271254999f88"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY4Nzk1OQ==", "bodyText": "Not to mention that because this is a search for projects, we don't necessarily want to throw an exception, but instead return an empty List.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r380687959", "createdAt": "2020-02-18T14:00:01Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -58,56 +54,52 @@\n @Component\n @Transactional\n public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n-    public static final Integer DEFAULT_OFFSET = 0;\n-    public static final Integer DEFAULT_LIMIT = 100;\n-\n     public static final int MAX_DESCRIPTION_LENGTH = 250;\n     public static final int MAX_PROJECT_NAME_LENGTH = 507;\n \n     private final Logger logger = LoggerFactory.getLogger(DefaultProviderDataAccessor.class);\n     private final ProviderProjectRepository providerProjectRepository;\n     private final ProviderUserProjectRelationRepository providerUserProjectRelationRepository;\n     private final ProviderUserRepository providerUserRepository;\n+    private final ConfigurationAccessor configurationAccessor;\n \n     @Autowired\n-    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository) {\n+    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository,\n+        ConfigurationAccessor configurationAccessor) {\n         this.providerProjectRepository = providerProjectRepository;\n         this.providerUserProjectRelationRepository = providerUserProjectRelationRepository;\n         this.providerUserRepository = providerUserRepository;\n+        this.configurationAccessor = configurationAccessor;\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByHref(String href) {\n-        return providerProjectRepository.findFirstByHref(href).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByName(String name) {\n-        return providerProjectRepository.findFirstByName(name).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderName(String providerName) {\n-        return providerProjectRepository.findByProvider(providerName)\n-                   .stream()\n-                   .map(this::convertToProjectModel)\n-                   .collect(Collectors.toList());\n+    public List<ProviderProject> findByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<Long> optionalConfigId = configurationAccessor.getProviderConfigurationByName(providerConfigName)\n+                                                  .map(ConfigurationModel::getConfigurationId);\n+            if (optionalConfigId.isPresent()) {\n+                return providerProjectRepository.findByProviderConfigId(optionalConfigId.get())\n+                           .stream()\n+                           .map(this::convertToProjectModel)\n+                           .collect(Collectors.toList());\n+            }\n+        } catch (AlertDatabaseConstraintException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNjYxNw=="}, "originalCommit": {"oid": "6d85892ad101f9a3ebd43298ebed271254999f88"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyOTIwNw==", "bodyText": "You may want to add a comment to avoid future confusion. But given your explanation this seems fine", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r380729207", "createdAt": "2020-02-18T15:04:51Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -58,56 +54,52 @@\n @Component\n @Transactional\n public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n-    public static final Integer DEFAULT_OFFSET = 0;\n-    public static final Integer DEFAULT_LIMIT = 100;\n-\n     public static final int MAX_DESCRIPTION_LENGTH = 250;\n     public static final int MAX_PROJECT_NAME_LENGTH = 507;\n \n     private final Logger logger = LoggerFactory.getLogger(DefaultProviderDataAccessor.class);\n     private final ProviderProjectRepository providerProjectRepository;\n     private final ProviderUserProjectRelationRepository providerUserProjectRelationRepository;\n     private final ProviderUserRepository providerUserRepository;\n+    private final ConfigurationAccessor configurationAccessor;\n \n     @Autowired\n-    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository) {\n+    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository,\n+        ConfigurationAccessor configurationAccessor) {\n         this.providerProjectRepository = providerProjectRepository;\n         this.providerUserProjectRelationRepository = providerUserProjectRelationRepository;\n         this.providerUserRepository = providerUserRepository;\n+        this.configurationAccessor = configurationAccessor;\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByHref(String href) {\n-        return providerProjectRepository.findFirstByHref(href).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByName(String name) {\n-        return providerProjectRepository.findFirstByName(name).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderName(String providerName) {\n-        return providerProjectRepository.findByProvider(providerName)\n-                   .stream()\n-                   .map(this::convertToProjectModel)\n-                   .collect(Collectors.toList());\n+    public List<ProviderProject> findByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<Long> optionalConfigId = configurationAccessor.getProviderConfigurationByName(providerConfigName)\n+                                                  .map(ConfigurationModel::getConfigurationId);\n+            if (optionalConfigId.isPresent()) {\n+                return providerProjectRepository.findByProviderConfigId(optionalConfigId.get())\n+                           .stream()\n+                           .map(this::convertToProjectModel)\n+                           .collect(Collectors.toList());\n+            }\n+        } catch (AlertDatabaseConstraintException ignored) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTYwNjYxNw=="}, "originalCommit": {"oid": "6d85892ad101f9a3ebd43298ebed271254999f88"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjIyMzk0OnYy", "diffSide": "LEFT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDowODowMFrOFrDoVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDowODowMFrOFrDoVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDY5MjU2NQ==", "bodyText": "This was never used in production.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r380692565", "createdAt": "2020-02-18T14:08:00Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -130,78 +122,51 @@ public void deleteProjects(ProviderKey providerKey, Collection<ProviderProject>\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderUserModel> getAllUsers(String providerName) {\n-        return providerUserRepository.findByProvider(providerName)\n+    public List<ProviderUserModel> getAllUsers(Long providerConfigId) {\n+        return providerUserRepository.findByProviderConfigId(providerConfigId)\n                    .stream()\n                    .map(this::convertToUserModel)\n                    .collect(Collectors.toList());\n     }\n \n     @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public AlertPagedModel<ProviderUserModel> getPageOfUsers(String providerName, Integer pageNumber, Integer pageSize, String q) throws AlertDatabaseConstraintException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6d85892ad101f9a3ebd43298ebed271254999f88"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NjMxNDI1OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNDozMDoyMVrOFrEe4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNTowNDo1NVrOFrF3rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwNjUzMA==", "bodyText": "Are we missing @Transactional on this method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r380706530", "createdAt": "2020-02-18T14:30:21Z", "author": {"login": "psantos1113"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -58,56 +54,52 @@\n @Component\n @Transactional\n public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n-    public static final Integer DEFAULT_OFFSET = 0;\n-    public static final Integer DEFAULT_LIMIT = 100;\n-\n     public static final int MAX_DESCRIPTION_LENGTH = 250;\n     public static final int MAX_PROJECT_NAME_LENGTH = 507;\n \n     private final Logger logger = LoggerFactory.getLogger(DefaultProviderDataAccessor.class);\n     private final ProviderProjectRepository providerProjectRepository;\n     private final ProviderUserProjectRelationRepository providerUserProjectRelationRepository;\n     private final ProviderUserRepository providerUserRepository;\n+    private final ConfigurationAccessor configurationAccessor;\n \n     @Autowired\n-    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository) {\n+    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository,\n+        ConfigurationAccessor configurationAccessor) {\n         this.providerProjectRepository = providerProjectRepository;\n         this.providerUserProjectRelationRepository = providerUserProjectRelationRepository;\n         this.providerUserRepository = providerUserRepository;\n+        this.configurationAccessor = configurationAccessor;\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByHref(String href) {\n-        return providerProjectRepository.findFirstByHref(href).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByName(String name) {\n-        return providerProjectRepository.findFirstByName(name).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderName(String providerName) {\n-        return providerProjectRepository.findByProvider(providerName)\n-                   .stream()\n-                   .map(this::convertToProjectModel)\n-                   .collect(Collectors.toList());\n+    public List<ProviderProject> findByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<Long> optionalConfigId = configurationAccessor.getProviderConfigurationByName(providerConfigName)\n+                                                  .map(ConfigurationModel::getConfigurationId);\n+            if (optionalConfigId.isPresent()) {\n+                return providerProjectRepository.findByProviderConfigId(optionalConfigId.get())\n+                           .stream()\n+                           .map(this::convertToProjectModel)\n+                           .collect(Collectors.toList());\n+            }\n+        } catch (AlertDatabaseConstraintException ignored) {\n+        }\n+        return List.of();\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderKey(ProviderKey providerKey) {\n-        return providerProjectRepository.findByProvider(providerKey.getUniversalKey())\n+    public List<ProviderProject> findByProviderConfigId(Long providerConfigId) {\n+        return providerProjectRepository.findByProviderConfigId(providerConfigId)\n                    .stream()\n                    .map(this::convertToProjectModel)\n                    .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void deleteProjects(ProviderKey providerKey, Collection<ProviderProject> providerProjects) {\n+    public void deleteProjects(Collection<ProviderProject> providerProjects) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7df40f2fd5aaa0a514e5e697f7a7fa7dbe896e9"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcyOTI2Mw==", "bodyText": "The class is annotated with @Transactional, so this method will be. The read committed methods just override the class level annotation.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/858#discussion_r380729263", "createdAt": "2020-02-18T15:04:55Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultProviderDataAccessor.java", "diffHunk": "@@ -58,56 +54,52 @@\n @Component\n @Transactional\n public class DefaultProviderDataAccessor implements ProviderDataAccessor {\n-    public static final Integer DEFAULT_OFFSET = 0;\n-    public static final Integer DEFAULT_LIMIT = 100;\n-\n     public static final int MAX_DESCRIPTION_LENGTH = 250;\n     public static final int MAX_PROJECT_NAME_LENGTH = 507;\n \n     private final Logger logger = LoggerFactory.getLogger(DefaultProviderDataAccessor.class);\n     private final ProviderProjectRepository providerProjectRepository;\n     private final ProviderUserProjectRelationRepository providerUserProjectRelationRepository;\n     private final ProviderUserRepository providerUserRepository;\n+    private final ConfigurationAccessor configurationAccessor;\n \n     @Autowired\n-    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository) {\n+    public DefaultProviderDataAccessor(ProviderProjectRepository providerProjectRepository, ProviderUserProjectRelationRepository providerUserProjectRelationRepository, ProviderUserRepository providerUserRepository,\n+        ConfigurationAccessor configurationAccessor) {\n         this.providerProjectRepository = providerProjectRepository;\n         this.providerUserProjectRelationRepository = providerUserProjectRelationRepository;\n         this.providerUserRepository = providerUserRepository;\n+        this.configurationAccessor = configurationAccessor;\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByHref(String href) {\n-        return providerProjectRepository.findFirstByHref(href).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public Optional<ProviderProject> findFirstByName(String name) {\n-        return providerProjectRepository.findFirstByName(name).map(this::convertToProjectModel);\n-    }\n-\n-    @Override\n-    @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderName(String providerName) {\n-        return providerProjectRepository.findByProvider(providerName)\n-                   .stream()\n-                   .map(this::convertToProjectModel)\n-                   .collect(Collectors.toList());\n+    public List<ProviderProject> findByProviderConfigName(String providerConfigName) {\n+        try {\n+            Optional<Long> optionalConfigId = configurationAccessor.getProviderConfigurationByName(providerConfigName)\n+                                                  .map(ConfigurationModel::getConfigurationId);\n+            if (optionalConfigId.isPresent()) {\n+                return providerProjectRepository.findByProviderConfigId(optionalConfigId.get())\n+                           .stream()\n+                           .map(this::convertToProjectModel)\n+                           .collect(Collectors.toList());\n+            }\n+        } catch (AlertDatabaseConstraintException ignored) {\n+        }\n+        return List.of();\n     }\n \n     @Override\n     @Transactional(readOnly = true, isolation = Isolation.READ_COMMITTED)\n-    public List<ProviderProject> findByProviderKey(ProviderKey providerKey) {\n-        return providerProjectRepository.findByProvider(providerKey.getUniversalKey())\n+    public List<ProviderProject> findByProviderConfigId(Long providerConfigId) {\n+        return providerProjectRepository.findByProviderConfigId(providerConfigId)\n                    .stream()\n                    .map(this::convertToProjectModel)\n                    .collect(Collectors.toList());\n     }\n \n     @Override\n-    public void deleteProjects(ProviderKey providerKey, Collection<ProviderProject> providerProjects) {\n+    public void deleteProjects(Collection<ProviderProject> providerProjects) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcwNjUzMA=="}, "originalCommit": {"oid": "d7df40f2fd5aaa0a514e5e697f7a7fa7dbe896e9"}, "originalPosition": 96}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2107, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}