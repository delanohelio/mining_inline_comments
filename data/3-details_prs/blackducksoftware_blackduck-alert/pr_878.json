{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwMjczMTk4", "number": 878, "title": "provider config select", "bodyText": "Adds the provider config select field to the distribution UI.\nFixes the backend code to be able to send messages to the channels.\nFixes the email address lookup to use the provider config name.", "createdAt": "2020-02-26T13:46:15Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878", "merged": true, "mergeCommit": {"oid": "e1a691065474e46637a354f9869256aac32892f3"}, "closed": true, "closedAt": "2020-02-27T11:18:33Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcHj8K0gH2gAyMzgwMjczMTk4OmVhNzQ4YjYzM2VmZDE3NDg2ODE1NGMxZTM2ZGRkMTk1Zjg3MTdmNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIZSqKgH2gAyMzgwMjczMTk4OjljNGZlODE3NTlmMTFmYTZiZDM4ZjQzYTc4ZjQ3N2ViZGYyMGU0YTI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea748b633efd174868154c1e36ddd195f8717f4f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ea748b633efd174868154c1e36ddd195f8717f4f", "committedDate": "2020-02-24T20:55:57Z", "message": "feat: Select provider config in distribution."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17e1be3325bcb7d8ea8e7a3a14b15b7841e66e28", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/17e1be3325bcb7d8ea8e7a3a14b15b7841e66e28", "committedDate": "2020-02-24T21:11:11Z", "message": "fix: Check if config id is set."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ee527d48b1195cd686a237bbddae2afb28e9e9b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5ee527d48b1195cd686a237bbddae2afb28e9e9b", "committedDate": "2020-02-24T21:31:07Z", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_config_select"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a9bbd2c737d30c0789326b31c30ceb6c4de1fe", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/68a9bbd2c737d30c0789326b31c30ceb6c4de1fe", "committedDate": "2020-02-25T12:05:12Z", "message": "feat: Select provider config in Job."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24101e2c8b810f222a59eacb1eea9d431447fd7d", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/24101e2c8b810f222a59eacb1eea9d431447fd7d", "committedDate": "2020-02-25T12:45:47Z", "message": "feat: Include config name for project selection."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e35ac39bd83b7644d9c7bb64e0d461007910bb6", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5e35ac39bd83b7644d9c7bb64e0d461007910bb6", "committedDate": "2020-02-25T18:34:05Z", "message": "fix: Find the provider config with Global context."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2779f95438cf6baec216102d6fab7822766ef33", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f2779f95438cf6baec216102d6fab7822766ef33", "committedDate": "2020-02-25T18:34:52Z", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_config_select"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0726a3d322a80267b850306c28691dc37bf82835", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0726a3d322a80267b850306c28691dc37bf82835", "committedDate": "2020-02-25T21:09:07Z", "message": "test: Fix the test with the save actions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b55c1a9747037e66f30c5b06e62d0083b4c1bac", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5b55c1a9747037e66f30c5b06e62d0083b4c1bac", "committedDate": "2020-02-26T01:58:27Z", "message": "feat: Create content collector factory."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5f82b0528dff46c5b5c7ff62122ffeb563b0486f", "committedDate": "2020-02-26T13:42:33Z", "message": "feat: Lookup emails based on provider config name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTE2MzU2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#pullrequestreview-364916356", "createdAt": "2020-02-26T13:56:48Z", "commit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzo1Njo0OVrOFusarw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxMzo1Njo0OVrOFusarw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUwNjU0Mw==", "bodyText": "providerConfigNameField", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384506543", "createdAt": "2020-02-26T13:56:49Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderDistributionUIConfig.java", "diffHunk": "@@ -75,12 +76,9 @@ public ProviderDistributionUIConfig(String label, String urlName, ProviderConten\n \n     @Override\n     public List<ConfigField> createFields() {\n-        // TODO extract label and description\n-        // FIXME add endpoint\n-        ConfigField providerConfigName = new EndpointSelectField(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME, \"Provider Config Name\", \"The name of the provider configuration to use for this distribution job.\")\n-                                             .applyClearable(false)\n-                                             .applyRequired(true);\n-\n+        ConfigField providerConfigField = new EndpointSelectField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, ProviderDescriptor.LABEL_PROVIDER_CONFIG_NAME, ProviderDescriptor.DESCRIPTION_PROVIDER_CONFIG_NAME)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTIxODI3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#pullrequestreview-364921827", "createdAt": "2020-02-26T14:03:46Z", "commit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDowMzo0NlrOFusqow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNDowMzo0NlrOFusqow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw==", "bodyText": "Should we validate if configId is a number?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384510627", "createdAt": "2020-02-26T14:03:46Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "diffHunk": "@@ -63,7 +64,13 @@ public MessageResult testConfig(String configId, String description, FieldAccess\n         String apiToken = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_API_KEY);\n         String url = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_URL);\n         String timeout = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_TIMEOUT);\n-        BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(Long.valueOf(configId), fieldAccessor);\n+        Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n+\n+        if (StringUtils.isNotBlank(configId)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0OTI5MzEy", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#pullrequestreview-364929312", "createdAt": "2020-02-26T14:13:17Z", "commit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTAwMDk0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#pullrequestreview-365100094", "createdAt": "2020-02-26T17:32:42Z", "commit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzozMjo0MlrOFu1MjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxNzo0NDoyMlrOFu1lig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1MDM4MA==", "bodyText": "Could this be converted to a stream?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384650380", "createdAt": "2020-02-26T17:32:42Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderConfigSelectCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,55 @@\n+package com.synopsys.integration.alert.common.descriptor.config.ui;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+@Component\n+public class ProviderConfigSelectCustomEndpoint extends SelectCustomEndpoint {\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final DescriptorMap descriptorMap;\n+\n+    @Autowired\n+    public ProviderConfigSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap) throws AlertException {\n+        super(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME, customEndpointManager, responseFactory, gson);\n+        this.configurationAccessor = configurationAccessor;\n+        this.descriptorMap = descriptorMap;\n+    }\n+\n+    @Override\n+    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+        String providerName = fieldModel.getDescriptorName();\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(providerName);\n+        if (descriptorKey.isPresent()) {\n+            List<LabelValueSelectOption> options = new LinkedList<>();\n+            List<ConfigurationModel> configurationModels = configurationAccessor.getConfigurationByDescriptorKeyAndContext(descriptorKey.get(), ConfigContextEnum.GLOBAL);\n+            for (ConfigurationModel configurationModel : configurationModels) {\n+                FieldAccessor accessor = new FieldAccessor(configurationModel.getCopyOfKeyToFieldMap());\n+                Optional<String> configName = accessor.getString(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+                if (configName.isPresent()) {\n+                    options.add(new LabelValueSelectOption(configName.get()));\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1NTAzMQ==", "bodyText": "These lines can all be collapsed into something similar to\ngetConfigurationById(configId).filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\nAlthough exception handling could cause problems here.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384655031", "createdAt": "2020-02-26T17:41:24Z", "author": {"login": "bamandel"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -167,15 +167,22 @@ public void deleteJob(UUID jobId) throws AlertDatabaseConstraintException {\n         if (StringUtils.isBlank(providerConfigName)) {\n             throw new AlertDatabaseConstraintException(\"The provider configuration name cannot be null\");\n         }\n-        Long fieldId = definedFieldRepository.findFirstByKey(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)\n+        Long fieldId = definedFieldRepository.findFirstByKey(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n                            .map(DefinedFieldEntity::getId)\n-                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)));\n-        Optional<Long> optionalProviderConfigId = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n-                                                      .stream()\n-                                                      .map(FieldValueEntity::getConfigId)\n-                                                      .findFirst();\n-        if (optionalProviderConfigId.isPresent()) {\n-            return getConfigurationById(optionalProviderConfigId.get());\n+                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)));\n+        List<Long> providerConfigIds = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n+                                           .stream()\n+                                           .map(FieldValueEntity::getConfigId)\n+                                           .collect(Collectors.toList());\n+        if (!providerConfigIds.isEmpty()) {\n+            for (Long configId : providerConfigIds) {\n+                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n+                Optional<ConfigurationModel> globalModel = configurationModel\n+                                                               .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n+                if (globalModel.isPresent()) {\n+                    return globalModel;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDY1Njc3OA==", "bodyText": "If a configId isn't a number then something is very wrong. I feel it should break in that case.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384656778", "createdAt": "2020-02-26T17:44:22Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/actions/BlackDuckGlobalTestAction.java", "diffHunk": "@@ -63,7 +64,13 @@ public MessageResult testConfig(String configId, String description, FieldAccess\n         String apiToken = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_API_KEY);\n         String url = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_URL);\n         String timeout = fieldAccessor.getStringOrEmpty(BlackDuckDescriptor.KEY_BLACKDUCK_TIMEOUT);\n-        BlackDuckProperties blackDuckProperties = blackDuckPropertiesFactory.createProperties(Long.valueOf(configId), fieldAccessor);\n+        Long parsedConfigurationId = ProviderProperties.UNKNOWN_CONFIG_ID;\n+\n+        if (StringUtils.isNotBlank(configId)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDUxMDYyNw=="}, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY1MTgxNzg5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#pullrequestreview-365181789", "createdAt": "2020-02-26T19:32:57Z", "commit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMjo1N1rOFu5Lcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQxOTozMjo1N1rOFu5Lcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDcxNTYzNA==", "bodyText": "Why are we not just returning the Optional globalModel? What is the purpose of the isPresent check?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/878#discussion_r384715634", "createdAt": "2020-02-26T19:32:57Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -167,15 +167,22 @@ public void deleteJob(UUID jobId) throws AlertDatabaseConstraintException {\n         if (StringUtils.isBlank(providerConfigName)) {\n             throw new AlertDatabaseConstraintException(\"The provider configuration name cannot be null\");\n         }\n-        Long fieldId = definedFieldRepository.findFirstByKey(ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)\n+        Long fieldId = definedFieldRepository.findFirstByKey(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n                            .map(DefinedFieldEntity::getId)\n-                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderGlobalUIConfig.KEY_PROVIDER_CONFIG_NAME)));\n-        Optional<Long> optionalProviderConfigId = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n-                                                      .stream()\n-                                                      .map(FieldValueEntity::getConfigId)\n-                                                      .findFirst();\n-        if (optionalProviderConfigId.isPresent()) {\n-            return getConfigurationById(optionalProviderConfigId.get());\n+                           .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"The key '%s' is not registered in the database\", ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)));\n+        List<Long> providerConfigIds = fieldValueRepository.findAllByFieldIdAndValue(fieldId, providerConfigName)\n+                                           .stream()\n+                                           .map(FieldValueEntity::getConfigId)\n+                                           .collect(Collectors.toList());\n+        if (!providerConfigIds.isEmpty()) {\n+            for (Long configId : providerConfigIds) {\n+                Optional<ConfigurationModel> configurationModel = getConfigurationById(configId);\n+                Optional<ConfigurationModel> globalModel = configurationModel\n+                                                               .filter(model -> model.getDescriptorContext() == ConfigContextEnum.GLOBAL);\n+                if (globalModel.isPresent()) {\n+                    return globalModel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5f82b0528dff46c5b5c7ff62122ffeb563b0486f"}, "originalPosition": 34}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0baef67e0868cceb8eb15e1f05c73f821aa2e273", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0baef67e0868cceb8eb15e1f05c73f821aa2e273", "committedDate": "2020-02-26T21:37:24Z", "message": "refactor: Implement PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b5f7d366fb3ea61977ab0132f972da176aa91ff", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2b5f7d366fb3ea61977ab0132f972da176aa91ff", "committedDate": "2020-02-27T10:40:44Z", "message": "refactor: Eliminate an extra line of code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8992cb475ce0972e3d4f04ea3339e91e725dc969", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8992cb475ce0972e3d4f04ea3339e91e725dc969", "committedDate": "2020-02-27T10:57:14Z", "message": "Merge remote-tracking branch 'origin/feat_provider_lifecycle_management' into ps_provider_config_select"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c4fe81759f11fa6bd38f43a78f477ebdf20e4a2", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9c4fe81759f11fa6bd38f43a78f477ebdf20e4a2", "committedDate": "2020-02-27T11:05:29Z", "message": "refactor: Add copyright header."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2846, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}