{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3Nzg3Mjkz", "number": 940, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyNDo1N1rODubLfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozNToyN1rODubc9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDA2Mzk5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/accessor/DescriptorGlobalConfigUtility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyNDo1N1rOGAaUKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNToyNDo1N1rOGAaUKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4NDMyOA==", "bodyText": "I was initially confused because I thought this returned an Optional. Let's change the method name from getConfigurationByDescriptorKeyAndContext to getConfigurationsByDescriptorKeyAndContext (making configuration plural).", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/940#discussion_r403084328", "createdAt": "2020-04-03T15:24:57Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/accessor/DescriptorGlobalConfigUtility.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.accessor;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.action.ApiAction;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+public class DescriptorGlobalConfigUtility {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ApiAction apiAction;\n+    private final ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private DescriptorKey key;\n+    private ConfigContextEnum context;\n+\n+    public DescriptorGlobalConfigUtility(DescriptorKey descriptorKey, ConfigurationAccessor configurationAccessor, ApiAction apiAction,\n+        ConfigurationFieldModelConverter configurationFieldModelConverter) {\n+        this.key = descriptorKey;\n+        this.context = ConfigContextEnum.GLOBAL;\n+        this.configurationAccessor = configurationAccessor;\n+        this.apiAction = apiAction;\n+        this.configurationFieldModelConverter = configurationFieldModelConverter;\n+    }\n+\n+    public DescriptorKey getKey() {\n+        return key;\n+    }\n+\n+    public boolean doesConfigurationExist() {\n+        try {\n+            return !configurationAccessor.getConfigurationByDescriptorKeyAndContext(key, context).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3a1951bbccb4305ffa99c745a50a35c0f542e2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDA5ODY3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/accessor/DescriptorGlobalConfigUtility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozMzoxNlrOGAaqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozMzoxNlrOGAaqQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA4OTk4Ng==", "bodyText": "You access key and context by referencing the fields directly but in other places in this class you use the getKey() method. Can we make this more consistent? Either access the fields or use the get methods.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/940#discussion_r403089986", "createdAt": "2020-04-03T15:33:16Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/accessor/DescriptorGlobalConfigUtility.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.accessor;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.common.action.ApiAction;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+public class DescriptorGlobalConfigUtility {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ApiAction apiAction;\n+    private final ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private DescriptorKey key;\n+    private ConfigContextEnum context;\n+\n+    public DescriptorGlobalConfigUtility(DescriptorKey descriptorKey, ConfigurationAccessor configurationAccessor, ApiAction apiAction,\n+        ConfigurationFieldModelConverter configurationFieldModelConverter) {\n+        this.key = descriptorKey;\n+        this.context = ConfigContextEnum.GLOBAL;\n+        this.configurationAccessor = configurationAccessor;\n+        this.apiAction = apiAction;\n+        this.configurationFieldModelConverter = configurationFieldModelConverter;\n+    }\n+\n+    public DescriptorKey getKey() {\n+        return key;\n+    }\n+\n+    public boolean doesConfigurationExist() {\n+        try {\n+            return !configurationAccessor.getConfigurationByDescriptorKeyAndContext(key, context).isEmpty();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3a1951bbccb4305ffa99c745a50a35c0f542e2"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDEwNzIwOnYy", "diffSide": "RIGHT", "path": "deployment/blackduck-alert.env", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozNTowMlrOGAavWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowNDoxMFrOGAebDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MTI4OA==", "bodyText": "I know this is probably not part of this PR but why is this COMMON_CONFIG_NAME and not DEFAULT_CONFIG_NAME?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/940#discussion_r403091288", "createdAt": "2020-04-03T15:35:02Z", "author": {"login": "jamesrichard91"}, "path": "deployment/blackduck-alert.env", "diffHunk": "@@ -21,15 +26,14 @@ ALERT_ENCRYPTION_GLOBAL_SALT=\n \n # -- BlackDuck Provider Settings\n \n+#ALERT_PROVIDER_BLACKDUCK_PROVIDER_COMMON_CONFIG_NAME=Default Config", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3a1951bbccb4305ffa99c745a50a35c0f542e2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1MTYzMA==", "bodyText": "COMMON_CONFIG_NAME for the environment variable gets turned into common.config.name which is the registered field name in the database for the configuration.  Each provider configuration you add has a common.config.name field.  Using this name requires no additional code to be added to AlertStartupInitializer to handle creating an initial Black Duck Provider configuration.  If we use a different environment variable name then we will need to add special logic to the AlertStartupInitializer class to process the blackduck provider and look for a specific environment variable name rather than use our existing environment variable naming convention.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/940#discussion_r403151630", "createdAt": "2020-04-03T17:04:10Z", "author": {"login": "psantos1113"}, "path": "deployment/blackduck-alert.env", "diffHunk": "@@ -21,15 +26,14 @@ ALERT_ENCRYPTION_GLOBAL_SALT=\n \n # -- BlackDuck Provider Settings\n \n+#ALERT_PROVIDER_BLACKDUCK_PROVIDER_COMMON_CONFIG_NAME=Default Config", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MTI4OA=="}, "originalCommit": {"oid": "ce3a1951bbccb4305ffa99c745a50a35c0f542e2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMDEwODY4OnYy", "diffSide": "RIGHT", "path": "deployment/blackduck-alert.env", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNTozNToyN1rOGAawVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QxNzowNDowNFrOGAeatg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MTU0MQ==", "bodyText": "Same as above, why isnt this DEFAULT_CONFIG_ENABLED ?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/940#discussion_r403091541", "createdAt": "2020-04-03T15:35:27Z", "author": {"login": "jamesrichard91"}, "path": "deployment/blackduck-alert.env", "diffHunk": "@@ -21,15 +26,14 @@ ALERT_ENCRYPTION_GLOBAL_SALT=\n \n # -- BlackDuck Provider Settings\n \n+#ALERT_PROVIDER_BLACKDUCK_PROVIDER_COMMON_CONFIG_NAME=Default Config\n+#ALERT_PROVIDER_BLACKDUCK_PROVIDER_COMMON_CONFIG_ENABLED=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce3a1951bbccb4305ffa99c745a50a35c0f542e2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzE1MTU0Mg==", "bodyText": "see the answer above.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/940#discussion_r403151542", "createdAt": "2020-04-03T17:04:04Z", "author": {"login": "psantos1113"}, "path": "deployment/blackduck-alert.env", "diffHunk": "@@ -21,15 +26,14 @@ ALERT_ENCRYPTION_GLOBAL_SALT=\n \n # -- BlackDuck Provider Settings\n \n+#ALERT_PROVIDER_BLACKDUCK_PROVIDER_COMMON_CONFIG_NAME=Default Config\n+#ALERT_PROVIDER_BLACKDUCK_PROVIDER_COMMON_CONFIG_ENABLED=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzA5MTU0MQ=="}, "originalCommit": {"oid": "ce3a1951bbccb4305ffa99c745a50a35c0f542e2"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1955, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}