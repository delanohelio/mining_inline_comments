{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODQ0MDQ1", "number": 1023, "title": "table id fix", "bodyText": "Fix table display to only have one popup used for both insert and edit which prevents the duplicate ids.\nUse a table reference to be able to change the save and test functions that are called since insert and edit call different functions.\nAdd ids to the fields table display renders to help with automation.\nFix lint issues with the classes that use TableDisplay", "createdAt": "2020-06-17T13:14:51Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023", "merged": true, "mergeCommit": {"oid": "2d05a193fd43584057f4cc1d49fd5bcb37ad3950"}, "closed": true, "closedAt": "2020-06-17T20:04:33Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr5ayAAH2gAyNDM1ODQ0MDQ1OjQ3Y2YyMzY2MThjMmQ4NGM2NmJkNDA0MmRjYjIzNjIwNDdkMWM5OWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsOXjkgFqTQzMjY3NTk1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "47cf236618c2d84c66bd4042dcb2362047d1c99b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/47cf236618c2d84c66bd4042dcb2362047d1c99b", "committedDate": "2020-06-16T18:18:40Z", "message": "fix: Only have one pop-up to prevent duplicate ids."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c78e639d9512721987cccce697752e81593d5fc", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8c78e639d9512721987cccce697752e81593d5fc", "committedDate": "2020-06-16T19:16:12Z", "message": "refactor: Add ids and fix lint issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d256392da9cbda154abe9fddfbefa659fd01784", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/6d256392da9cbda154abe9fddfbefa659fd01784", "committedDate": "2020-06-16T19:28:23Z", "message": "refactor: Add ids and fix lint issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22b53679799f1eb66c366df3cde208f09ee4c548", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/22b53679799f1eb66c366df3cde208f09ee4c548", "committedDate": "2020-06-16T19:50:06Z", "message": "refactor: Add ids and fix lint issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60019e363b590db2c7f42b966c940ddf9300f82d", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/60019e363b590db2c7f42b966c940ddf9300f82d", "committedDate": "2020-06-17T12:20:08Z", "message": "refactor: Add ids and fix lint issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f04d027fbc84720720585daa5e9bae2f634e6309", "committedDate": "2020-06-17T13:01:40Z", "message": "Merge remote-tracking branch 'origin/master' into ps_table_id_fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzk3NTA2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432397506", "createdAt": "2020-06-17T13:25:43Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoyNTo0NFrOGlFnrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzoyNTo0NFrOGlFnrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0MjU3Mw==", "bodyText": "I know this was already here, but won't searchable always be true because of this? Similar question with dataFormat above.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441542573", "createdAt": "2020-06-17T13:25:44Z", "author": {"login": "gkillough"}, "path": "src/main/js/field/TableDisplay.js", "diffHunk": "@@ -50,24 +53,35 @@ class TableDisplay extends Component {\n         this.updateData();\n     }\n \n-    componentDidUpdate(prevProps, prevState) {\n-        if (!this.state.showConfiguration && this.state.currentRowSelected && !this.props.inProgress && !this.props.hasFieldErrors && this.state.uiValidation === VALIDATION_STATE.SUCCESS) {\n+    componentDidUpdate() {\n+        const { showConfiguration, currentRowSelected, uiValidation } = this.state;\n+        const { inProgress, hasFieldErrors } = this.props;\n+        if (!showConfiguration && currentRowSelected && !inProgress && !hasFieldErrors\n+            && uiValidation === VALIDATION_STATE.SUCCESS) {\n             this.handleClose();\n         }\n     }\n \n     createTableColumns() {\n         const defaultDataFormat = (cell) => {\n             if (cell) {\n-                return <div title={cell.toString()}> {cell} </div>;\n+                return (\n+                    <div title={cell.toString()}>\n+                        {cell}\n+                    </div>\n+                );\n             }\n-            return <div> {cell} </div>;\n+            return (\n+                <div>\n+                    {cell}\n+                </div>\n+            );\n         };\n \n-        return this.props.columns.map(column => {\n-\n-            const assignedDataFormate = column['dataFormat'] ? column['dataFormat'] : defaultDataFormat;\n-            const searchable = column['searchable'] ? column['searchable'] : true;\n+        const { columns } = this.props;\n+        return columns.map((column) => {\n+            const assignedDataFormate = column.dataFormat ? column.dataFormat : defaultDataFormat;\n+            const searchable = column.searchable ? column.searchable : true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDA1MzYz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432405363", "createdAt": "2020-06-17T13:33:51Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDA1NTI0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432405524", "createdAt": "2020-06-17T13:34:02Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozNDowMlrOGlF-qA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzozNDowMlrOGlF-qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU0ODQ1Ng==", "bodyText": "We might have this exact function in another utility class. May be useful importing and using it", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441548456", "createdAt": "2020-06-17T13:34:02Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/loaded/certificates/CertificatesPage.js", "diffHunk": "@@ -31,125 +35,157 @@ class CertificatesPage extends Component {\n     }\n \n     componentDidUpdate(prevProps) {\n-        if (prevProps.saveStatus === 'SAVING' && (this.props.saveStatus === 'SAVED' || this.props.saveStatus === 'ERROR')) {\n-            this.state.saveCallback(true);\n+        const { saveCallback, deleteCallback } = this.state;\n+        const { saveStatus, deleteSuccess, inProgress } = this.props;\n+        if (prevProps.saveStatus === 'SAVING' && (saveStatus === 'SAVED' || saveStatus === 'ERROR')) {\n+            saveCallback(true);\n         }\n-        if (prevProps.inProgress && !prevProps.deleteSuccess && !this.props.inProgress && this.props.deleteSuccess) {\n-            this.state.deleteCallback();\n+        if (prevProps.inProgress && !prevProps.deleteSuccess && !inProgress && deleteSuccess) {\n+            deleteCallback();\n         }\n     }\n \n-    createColumns() {\n-        return [\n-            {\n-                header: 'id',\n-                headerLabel: 'Id',\n-                isKey: true,\n-                hidden: true\n-            },\n-            {\n-                header: 'alias',\n-                headerLabel: 'Alias',\n-                isKey: false,\n-                hidden: false\n-            },\n-            {\n-                header: 'lastUpdated',\n-                headerLabel: 'Last Updated',\n-                isKey: false,\n-                hidden: false\n-            }\n-\n-        ];\n-    }\n \n     onConfigClose(callback) {\n-        this.props.clearFieldErrors();\n+        const { clearFieldErrors } = this.props;\n+        clearFieldErrors();\n         callback();\n     }\n \n-    clearModalFieldState() {\n-        if (this.state.certificate && Object.keys(this.state.certificate).length > 0) {\n-            this.setState({\n-                certificate: {}\n-            });\n-        }\n-    }\n-\n-    retrieveData() {\n-        this.props.getCertificates();\n-    }\n-\n-    handleChange(e) {\n-        const { name, value, type, checked } = e.target;\n-        const { certificate } = this.state;\n-\n-        const updatedValue = type === 'checkbox' ? checked.toString().toLowerCase() === 'true' : value;\n-        const newCertificate = Object.assign(certificate, { [name]: updatedValue });\n-        this.setState({\n-            certificate: newCertificate\n-        });\n-    }\n-\n     onSave(callback) {\n+        const { saveCertificateAction } = this.props;\n         const { certificate } = this.state;\n-        this.props.saveCertificate(certificate);\n+        saveCertificateAction(certificate);\n         this.setState({\n             saveCallback: callback\n         });\n         return true;\n     }\n \n     onDelete(certificatesToDelete, callback) {\n+        const { deleteCertificateAction } = this.props;\n         if (certificatesToDelete) {\n-            certificatesToDelete.forEach(certificateId => {\n-                this.props.deleteCertificate(certificateId);\n+            certificatesToDelete.forEach((certificateId) => {\n+                deleteCertificateAction(certificateId);\n             });\n         }\n         this.setState({\n             deleteCallback: callback\n         });\n     }\n \n+    onEdit(selectedRow, callback) {\n+        this.setState({\n+            certificate: selectedRow\n+        }, callback);\n+    }\n+\n+    onCopy(selectedRow, callback) {\n+        const copy = JSON.parse(JSON.stringify(selectedRow));\n+        copy.id = null;\n+        this.setState({\n+            certificate: copy\n+        }, callback);\n+    }\n+\n     createModalFields() {\n         const { certificate } = this.state;\n         const { fieldErrors } = this.props;\n         const aliasKey = 'alias';\n         const certificateContentKey = 'certificateContent';\n         return (\n             <div>\n-                <ReadOnlyField label=\"Last Updated\" name=\"lastUpdated\" readOnly=\"true\" value={certificate['lastUpdated']} />\n+                <ReadOnlyField\n+                    id=\"lastUpdated\"\n+                    label=\"Last Updated\"\n+                    name=\"lastUpdated\"\n+                    readOnly=\"true\"\n+                    value={certificate.lastUpdated}\n+                />\n                 <TextInput\n-                    name={aliasKey} label=\"Alias\" description=\"The certificate alias name.\"\n-                    required onChange={this.handleChange} value={certificate[aliasKey]}\n+                    id={aliasKey}\n+                    name={aliasKey}\n+                    label=\"Alias\"\n+                    description=\"The certificate alias name.\"\n+                    required\n+                    onChange={this.handleChange}\n+                    value={certificate[aliasKey]}\n                     errorName={aliasKey}\n-                    errorValue={fieldErrors[aliasKey]} />\n+                    errorValue={fieldErrors[aliasKey]}\n+                />\n                 <TextArea\n-                    name={certificateContentKey} label=\"Certificate Content\" description=\"The certificate content text.\"\n-                    required onChange={this.handleChange} value={certificate[certificateContentKey]}\n+                    id={certificateContentKey}\n+                    name={certificateContentKey}\n+                    label=\"Certificate Content\"\n+                    description=\"The certificate content text.\"\n+                    required\n+                    onChange={this.handleChange}\n+                    value={certificate[certificateContentKey]}\n                     errorName={certificateContentKey}\n-                    errorValue={fieldErrors[certificateContentKey]} />\n+                    errorValue={fieldErrors[certificateContentKey]}\n+                />\n             </div>\n         );\n     }\n \n-    onEdit(selectedRow, callback) {\n+    handleChange(e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 181}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDEyODYz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432412863", "createdAt": "2020-06-17T13:41:29Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0MToyOVrOGlGTcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0MToyOVrOGlGTcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1Mzc3OQ==", "bodyText": "This can also be changed to the util handleChange", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441553779", "createdAt": "2020-06-17T13:41:29Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/loaded/users/RoleTable.js", "diffHunk": "@@ -80,136 +49,189 @@ class RoleTable extends Component {\n     }\n \n     onCopy(selectedRow, callback) {\n-        selectedRow.id = null;\n+        const copy = JSON.parse(JSON.stringify(selectedRow));\n+        copy.id = null;\n         this.setState({\n-            role: selectedRow\n+            role: copy\n         }, callback);\n     }\n \n     onSave(callback) {\n-        const { descriptors } = this.props;\n+        const { descriptors, saveRoleAction } = this.props;\n         const { role } = this.state;\n         const { permissions } = role;\n-        let correctedPermissions = [];\n-        permissions.forEach(permission => {\n+        const correctedPermissions = [];\n+        permissions.forEach((permission) => {\n             const descriptorName = permission[PERMISSIONS_TABLE.DESCRIPTOR_NAME];\n-            const descriptor = descriptors.find(currentDescriptor => currentDescriptor.label === descriptorName);\n+            const descriptor = descriptors.find((currentDescriptor) => currentDescriptor.label === descriptorName);\n             if (descriptor) {\n                 const descriptorKey = descriptor.name;\n-\n-                permission[PERMISSIONS_TABLE.DESCRIPTOR_NAME] = descriptorKey;\n-                correctedPermissions.push(permission);\n+                const permissionCopy = JSON.parse(JSON.stringify(permission));\n+                permissionCopy[PERMISSIONS_TABLE.DESCRIPTOR_NAME] = descriptorKey;\n+                correctedPermissions.push(permissionCopy);\n             }\n         });\n         role.permissions = correctedPermissions;\n \n         this.setState({\n             saveCallback: callback\n-        }, () => this.props.saveRole(role));\n+        }, () => saveRoleAction(role));\n \n         return true;\n     }\n \n     onDelete(rolesToDelete, callback) {\n+        const { deleteRoleAction } = this.props;\n         if (rolesToDelete) {\n-            rolesToDelete.forEach(roleId => {\n-                this.props.deleteRole(roleId);\n+            rolesToDelete.forEach((roleId) => {\n+                deleteRoleAction(roleId);\n             });\n         }\n         callback();\n         this.retrieveData();\n     }\n \n     onRoleClose(callback) {\n+        const { clearFieldErrorsAction } = this.props;\n         this.setState({\n             role: {\n                 permissions: []\n             }\n         }, callback);\n-        this.props.clearFieldErrors();\n+        clearFieldErrorsAction();\n+    }\n \n+    handleChange(e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDE2MzIz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432416323", "createdAt": "2020-06-17T13:44:52Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0NDo1MlrOGlGdlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0NDo1MlrOGlGdlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1NjM3NQ==", "bodyText": "Any specific reason we changed to this type of increment?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441556375", "createdAt": "2020-06-17T13:44:52Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/loaded/users/RoleTable.js", "diffHunk": "@@ -80,136 +49,189 @@ class RoleTable extends Component {\n     }\n \n     onCopy(selectedRow, callback) {\n-        selectedRow.id = null;\n+        const copy = JSON.parse(JSON.stringify(selectedRow));\n+        copy.id = null;\n         this.setState({\n-            role: selectedRow\n+            role: copy\n         }, callback);\n     }\n \n     onSave(callback) {\n-        const { descriptors } = this.props;\n+        const { descriptors, saveRoleAction } = this.props;\n         const { role } = this.state;\n         const { permissions } = role;\n-        let correctedPermissions = [];\n-        permissions.forEach(permission => {\n+        const correctedPermissions = [];\n+        permissions.forEach((permission) => {\n             const descriptorName = permission[PERMISSIONS_TABLE.DESCRIPTOR_NAME];\n-            const descriptor = descriptors.find(currentDescriptor => currentDescriptor.label === descriptorName);\n+            const descriptor = descriptors.find((currentDescriptor) => currentDescriptor.label === descriptorName);\n             if (descriptor) {\n                 const descriptorKey = descriptor.name;\n-\n-                permission[PERMISSIONS_TABLE.DESCRIPTOR_NAME] = descriptorKey;\n-                correctedPermissions.push(permission);\n+                const permissionCopy = JSON.parse(JSON.stringify(permission));\n+                permissionCopy[PERMISSIONS_TABLE.DESCRIPTOR_NAME] = descriptorKey;\n+                correctedPermissions.push(permissionCopy);\n             }\n         });\n         role.permissions = correctedPermissions;\n \n         this.setState({\n             saveCallback: callback\n-        }, () => this.props.saveRole(role));\n+        }, () => saveRoleAction(role));\n \n         return true;\n     }\n \n     onDelete(rolesToDelete, callback) {\n+        const { deleteRoleAction } = this.props;\n         if (rolesToDelete) {\n-            rolesToDelete.forEach(roleId => {\n-                this.props.deleteRole(roleId);\n+            rolesToDelete.forEach((roleId) => {\n+                deleteRoleAction(roleId);\n             });\n         }\n         callback();\n         this.retrieveData();\n     }\n \n     onRoleClose(callback) {\n+        const { clearFieldErrorsAction } = this.props;\n         this.setState({\n             role: {\n                 permissions: []\n             }\n         }, callback);\n-        this.props.clearFieldErrors();\n+        clearFieldErrorsAction();\n+    }\n \n+    handleChange(e) {\n+        const {\n+            name, value, type, checked\n+        } = e.target;\n+        const { role } = this.state;\n+        const updatedValue = type === 'checkbox' ? checked.toString()\n+        .toLowerCase() === 'true' : value;\n+        const newRole = Object.assign(role, { [name]: updatedValue });\n+        this.setState({\n+            role: newRole\n+        });\n+    }\n+\n+    createColumns() {\n+        return [\n+            {\n+                header: 'id',\n+                headerLabel: 'Id',\n+                isKey: true,\n+                hidden: true\n+            },\n+            {\n+                header: 'roleName',\n+                headerLabel: 'Name',\n+                isKey: false,\n+                hidden: false\n+            }\n+        ];\n+    }\n+\n+    retrieveData() {\n+        const { getRoles } = this.props;\n+        getRoles();\n     }\n \n     async savePermissions(permission) {\n         const { role, incrementalId } = this.state;\n         const { permissions } = role;\n-\n-        if (!permission.id) {\n-            permission.id = incrementalId;\n+        const permissionCopy = JSON.parse(JSON.stringify(permission));\n+        if (!permissionCopy.id) {\n+            permissionCopy.id = incrementalId;\n             this.setState({\n                 incrementalId: incrementalId + 1\n             });\n-            permissions.push(permission);\n+            permissions.push(permissionCopy);\n         } else {\n-            const matchingPermissionIndex = permissions.findIndex(listPermission => listPermission.id === permission.id);\n+            const matchingPermissionIndex = permissions.findIndex((listPermission) => listPermission.id === permission.id);\n             if (matchingPermissionIndex > -1) {\n                 permissions[matchingPermissionIndex] = permission;\n             }\n         }\n         role.permissions = permissions;\n         this.setState({\n-            role: role\n+            role\n         });\n         return true;\n     }\n \n     deletePermission(permissionIds) {\n         const { role } = this.state;\n         const { permissions } = role;\n-        const filteredPermissions = permissions.filter(listPermission => !permissionIds.includes(listPermission.id));\n-        let newRole = { ...role };\n+        const filteredPermissions = permissions.filter((listPermission) => !permissionIds.includes(listPermission.id));\n+        const newRole = { ...role };\n         newRole.permissions = filteredPermissions;\n         this.setState({\n             role: newRole\n         });\n     }\n \n     createModalFields() {\n-        const { role } = this.state;\n+        const { role, incrementalId } = this.state;\n \n         const { permissions } = role;\n-        let incrementedId = this.state.incrementalId;\n-        permissions.forEach(permission => {\n-            if (!permission.id) {\n-                permission.id = incrementedId;\n-                incrementedId++;\n+        let incrementedId = incrementalId;\n+        const updatedPermissions = [];\n+        permissions.forEach((permission) => {\n+            const permissionCopy = JSON.parse(JSON.stringify(permission));\n+            if (!permissionCopy.id) {\n+                permissionCopy.id = incrementedId;\n+                incrementedId += 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDIwOTc4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432420978", "createdAt": "2020-06-17T13:49:35Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0OTozNVrOGlGrRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo0OTozNVrOGlGrRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU1OTg3Nw==", "bodyText": "We may be able to replace this handle change as well", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441559877", "createdAt": "2020-06-17T13:49:35Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/loaded/users/UserTable.js", "diffHunk": "@@ -78,30 +80,34 @@ class UserTable extends Component {\n     }\n \n     retrieveData() {\n-        this.props.getUsers();\n+        const { getUsers } = this.props;\n+        getUsers();\n     }\n \n     handleChange(e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDI5MTcw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432429170", "createdAt": "2020-06-17T13:57:29Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1NzoyOVrOGlHC1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1NzoyOVrOGlHC1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NTkwOA==", "bodyText": "Can all of these if checks be condensed into 1?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441565908", "createdAt": "2020-06-17T13:57:29Z", "author": {"login": "bamandel"}, "path": "src/main/js/field/TableDisplay.js", "diffHunk": "@@ -195,28 +221,47 @@ class TableDisplay extends Component {\n                 uiValidation: validationState\n             });\n         };\n-        this.props.onConfigTest(callback);\n+        onConfigTest(callback);\n+    }\n+\n+    handleCancel() {\n+        this.hideModal();\n+        this.handleClose();\n     }\n \n-    createEditModal() {\n-        const { currentRowSelected } = this.state;\n-        const { modalTitle, newConfigFields, inProgress, saveButton, testButton, testButtonLabel, errorDialogMessage, actionMessage } = this.props;\n-        const popupActionMessage = errorDialogMessage ? errorDialogMessage : actionMessage;\n+    createTableModal() {\n+        const tablePopupRef = this.tablePopup.current;\n+        const { currentRowSelected, isInsertModal } = this.state;\n+        const {\n+            modalTitle, newConfigFields, inProgress, saveButton, testButton, testButtonLabel, errorDialogMessage,\n+            actionMessage\n+        } = this.props;\n+        const popupActionMessage = errorDialogMessage || actionMessage;\n+        const configFields = isInsertModal ? newConfigFields() : newConfigFields(currentRowSelected);\n+        let cancelFunction = this.handleCancel;\n+        if (isInsertModal) {\n+            cancelFunction = tablePopupRef && tablePopupRef.onCancel;\n+        }\n+        let submitFunction = this.handleSubmit;\n+        if (isInsertModal) {\n+            submitFunction = tablePopupRef && tablePopupRef.handleSubmit;\n+        }\n+        let testFunction = this.handleTest;\n+        if (isInsertModal) {\n+            testFunction = tablePopupRef && tablePopupRef.handleTest;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDMzODg5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432433889", "createdAt": "2020-06-17T14:02:05Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowMjowNVrOGlHQUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNDowMjowNVrOGlHQUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2OTM2Mw==", "bodyText": "Instead of creating 2 complete differnt TableHeaderColumn objects, we should change this to create a single one, but pass it different values to dataFormat and children. This would cut down on needing to change multiple places if we need to change the look of this column.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#discussion_r441569363", "createdAt": "2020-06-17T14:02:05Z", "author": {"login": "bamandel"}, "path": "src/main/js/field/TableDisplay.js", "diffHunk": "@@ -295,68 +323,87 @@ class TableDisplay extends Component {\n     }\n \n     deleteItems() {\n-        this.props.onConfigDelete(this.state.rowsToDelete, this.closeDeleteModal);\n+        const { rowsToDelete } = this.state;\n+        const { onConfigDelete } = this.props;\n+        onConfigDelete(rowsToDelete, this.closeDeleteModal);\n     }\n \n     editButtonClicked(currentRowSelected) {\n-        this.props.clearModalFieldState();\n+        const { clearModalFieldState, onEditState } = this.props;\n+        clearModalFieldState();\n         const callback = () => this.setState({\n             currentRowSelected,\n             showConfiguration: true\n         });\n-        this.props.onEditState(currentRowSelected, callback);\n+        onEditState(currentRowSelected, callback);\n     }\n \n     editButtonClick(cell, row) {\n-        return (<IconTableCellFormatter\n-            handleButtonClicked={this.editButtonClicked}\n-            currentRowSelected={row}\n-            buttonIconName=\"pencil-alt\"\n-            buttonText=\"Edit\"\n-        />);\n+        return (\n+            <IconTableCellFormatter\n+                handleButtonClicked={this.editButtonClicked}\n+                currentRowSelected={row}\n+                buttonIconName=\"pencil-alt\"\n+                buttonText=\"Edit\"\n+            />\n+        );\n     }\n \n     copyButtonClicked(currentRowSelected) {\n+        const { onConfigCopy } = this.props;\n         const callback = () => this.setState({\n             currentRowSelected,\n             showConfiguration: true\n         });\n-        this.props.onConfigCopy(currentRowSelected, callback);\n+        onConfigCopy(currentRowSelected, callback);\n     }\n \n     copyButtonClick(cell, row) {\n-        return (<IconTableCellFormatter\n-            handleButtonClicked={this.copyButtonClicked}\n-            currentRowSelected={row}\n-            buttonIconName=\"copy\"\n-            buttonText=\"Copy\"\n-        />);\n+        return (\n+            <IconTableCellFormatter\n+                handleButtonClicked={this.copyButtonClicked}\n+                currentRowSelected={row}\n+                buttonIconName=\"copy\"\n+                buttonText=\"Copy\"\n+            />\n+        );\n     }\n \n     render() {\n         const tableColumns = this.createTableColumns();\n-        if (this.props.enableEdit) {\n-            tableColumns.push(<TableHeaderColumn\n-                dataField=\"\"\n-                width=\"48\"\n-                columnClassName=\"tableCell\"\n-                dataFormat={this.editButtonClick}\n-                thStyle={{ textAlign: 'center' }}\n-            >Edit</TableHeaderColumn>);\n-        }\n-        if (this.props.enableCopy) {\n-            tableColumns.push(<TableHeaderColumn\n-                dataField=\"\"\n-                width=\"48\"\n-                columnClassName=\"tableCell\"\n-                dataFormat={this.copyButtonClick}\n-                thStyle={{ textAlign: 'center' }}\n-            >Copy</TableHeaderColumn>);\n-        }\n-\n+        const { showDelete } = this.state;\n         const {\n-            selectRowBox, sortName, sortOrder, autoRefresh, tableMessage, newButton, deleteButton, data, tableSearchable, inProgress\n+            selectRowBox, sortName, sortOrder, autoRefresh, tableMessage, newButton, deleteButton, data,\n+            tableSearchable, enableEdit, enableCopy, inProgress, tableRefresh, refreshData\n         } = this.props;\n+        if (enableEdit) {\n+            const editColumn = (\n+                <TableHeaderColumn\n+                    dataField=\"\"\n+                    width=\"48\"\n+                    columnClassName=\"tableCell\"\n+                    dataFormat={this.editButtonClick}\n+                    thStyle={{ textAlign: 'center' }}\n+                >\n+                    Edit\n+                </TableHeaderColumn>\n+            );\n+            tableColumns.push(editColumn);\n+        }\n+        if (enableCopy) {\n+            const copyColumn = (\n+                <TableHeaderColumn\n+                    dataField=\"\"\n+                    width=\"48\"\n+                    columnClassName=\"tableCell\"\n+                    dataFormat={this.copyButtonClick}\n+                    thStyle={{ textAlign: 'center' }}\n+                >\n+                    Copy\n+                </TableHeaderColumn>\n+            );\n+            tableColumns.push(copyColumn);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "originalPosition": 481}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDQ1NjI0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432445624", "createdAt": "2020-06-17T14:13:45Z", "commit": {"oid": "f04d027fbc84720720585daa5e9bae2f634e6309"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7345063557aed2ae137fdbf9daf547e80afc36b8", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7345063557aed2ae137fdbf9daf547e80afc36b8", "committedDate": "2020-06-17T14:30:33Z", "message": "refactor: Implement PR feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e2c92808fe8a64be6e888651761803f88f81e92", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7e2c92808fe8a64be6e888651761803f88f81e92", "committedDate": "2020-06-17T17:54:36Z", "message": "Merge remote-tracking branch 'origin/master' into ps_table_id_fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNjc1OTUx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1023#pullrequestreview-432675951", "createdAt": "2020-06-17T18:43:09Z", "commit": {"oid": "7e2c92808fe8a64be6e888651761803f88f81e92"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3555, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}