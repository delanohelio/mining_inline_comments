{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxOTEwMzY4", "number": 1265, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTo1Nzo0MVrOE5pv2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTo1Nzo0MVrOE5pv2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4ODg4MjgwOnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQxOTo1Nzo0MVrOH0PGtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQyMDowMToxN1rOH0POjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNTQ3OQ==", "bodyText": "Can we not use UserView here because it doesn't declare the getEmail method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1265#discussion_r524535479", "createdAt": "2020-11-16T19:57:41Z", "author": {"login": "jamesrichard91"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java", "diffHunk": "@@ -195,26 +205,35 @@ public void updateProjectAndUserData(Long providerConfigId, Map<ProviderProject,\n     private AlertPagedModel<ProviderProject> retrieveProjectsForProvider(ConfigurationModel blackDuckConfigurationModel, int pageNumber, int pageSize, String searchTerm) throws IntegrationException {\n         BlackDuckServicesFactory blackDuckServicesFactory = createBlackDuckServicesFactory(blackDuckConfigurationModel);\n         BlackDuckService blackDuckService = blackDuckServicesFactory.getBlackDuckService();\n-        RequestFactory requestFactory = blackDuckServicesFactory.getRequestFactory();\n-\n-        BlackDuckJsonTransformer blackDuckJsonTransformer = new BlackDuckJsonTransformer(blackDuckServicesFactory.getGson(), blackDuckServicesFactory.getObjectMapper(), blackDuckServicesFactory.getLogger());\n-        BlackDuckResponsesTransformer blackDuckResponsesTransformer = new BlackDuckResponsesTransformer(blackDuckServicesFactory.getBlackDuckHttpClient(), blackDuckJsonTransformer);\n-\n-        int offset = pageNumber * pageSize;\n-        HttpUrl projectsRequestUrl = blackDuckServicesFactory.getBlackDuckHttpClient().getBaseUrl().appendRelativeUrl(ApiDiscovery.PROJECTS_LINK.getPath());\n-        BlackDuckRequestBuilder blackDuckRequestBuilder = requestFactory.createCommonGetRequestBuilder()\n-                                                              .url(projectsRequestUrl);\n \n         Predicate<ProjectView> searchFilter = alwaysTruePredicate -> true;\n         if (StringUtils.isNotBlank(searchTerm)) {\n             searchFilter = projectView -> StringUtils.containsIgnoreCase(projectView.getName(), searchTerm);\n         }\n \n-        PagedRequest pagedRequest = new PagedRequest(blackDuckRequestBuilder, offset, pageSize);\n-        BlackDuckPageResponse<ProjectView> projectViewBlackDuckPageResponse = blackDuckResponsesTransformer.getSomeMatchingResponses(pagedRequest, ProjectView.class, searchFilter, pagedRequest.getLimit());\n+        BlackDuckPageResponse<ProjectView> pageOfViews = retrieveBlackDuckPageResponse(blackDuckServicesFactory, ApiDiscovery.PROJECTS_LINK_RESPONSE, pageNumber, pageSize, searchFilter);\n+\n+        List<ProviderProject> foundProjects = convertBlackDuckProjects(pageOfViews.getItems(), blackDuckService);\n+        int totalPageCount = (pageOfViews.getTotalCount() + (pageSize - 1)) / pageSize;\n+        return new AlertPagedModel<>(totalPageCount, pageNumber, pageSize, foundProjects);\n+    }\n+\n+    private AlertPagedModel<ProviderUserModel> retrieveUsersForProvider(ConfigurationModel blackDuckConfigurationModel, int pageNumber, int pageSize, String searchTerm) throws IntegrationException {\n+        BlackDuckServicesFactory blackDuckServicesFactory = createBlackDuckServicesFactory(blackDuckConfigurationModel);\n \n-        List<ProviderProject> foundProjects = convertBlackDuckProjects(projectViewBlackDuckPageResponse.getItems(), blackDuckService);\n-        int totalPageCount = (projectViewBlackDuckPageResponse.getTotalCount() + (pageSize - 1)) / pageSize;\n+        Predicate<UserView> searchFilter = userView -> StringUtils.isNotBlank(userView.getEmail());\n+        if (StringUtils.isNotBlank(searchTerm)) {\n+            searchFilter = searchFilter.and(userView -> StringUtils.containsIgnoreCase(userView.getEmail(), searchTerm));\n+        }\n+\n+        BlackDuckPageResponse<UserView> pageOfViews = retrieveBlackDuckPageResponse(blackDuckServicesFactory, ApiDiscovery.USERS_LINK_RESPONSE, pageNumber, pageSize, searchFilter);\n+\n+        List<ProviderUserModel> foundProjects = pageOfViews.getItems()\n+                                                    .stream()\n+                                                    .map(UserViewV4::getEmail)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a85bb32a023d9d38fdc5412a45ea1024a9989aeb"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNzQ4Ng==", "bodyText": "This was a typo that I have now fixed. It still worked though because they both deserialized to the same thing.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1265#discussion_r524537486", "createdAt": "2020-11-16T20:01:17Z", "author": {"login": "gkillough"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/BlackDuckProviderDataAccessor.java", "diffHunk": "@@ -195,26 +205,35 @@ public void updateProjectAndUserData(Long providerConfigId, Map<ProviderProject,\n     private AlertPagedModel<ProviderProject> retrieveProjectsForProvider(ConfigurationModel blackDuckConfigurationModel, int pageNumber, int pageSize, String searchTerm) throws IntegrationException {\n         BlackDuckServicesFactory blackDuckServicesFactory = createBlackDuckServicesFactory(blackDuckConfigurationModel);\n         BlackDuckService blackDuckService = blackDuckServicesFactory.getBlackDuckService();\n-        RequestFactory requestFactory = blackDuckServicesFactory.getRequestFactory();\n-\n-        BlackDuckJsonTransformer blackDuckJsonTransformer = new BlackDuckJsonTransformer(blackDuckServicesFactory.getGson(), blackDuckServicesFactory.getObjectMapper(), blackDuckServicesFactory.getLogger());\n-        BlackDuckResponsesTransformer blackDuckResponsesTransformer = new BlackDuckResponsesTransformer(blackDuckServicesFactory.getBlackDuckHttpClient(), blackDuckJsonTransformer);\n-\n-        int offset = pageNumber * pageSize;\n-        HttpUrl projectsRequestUrl = blackDuckServicesFactory.getBlackDuckHttpClient().getBaseUrl().appendRelativeUrl(ApiDiscovery.PROJECTS_LINK.getPath());\n-        BlackDuckRequestBuilder blackDuckRequestBuilder = requestFactory.createCommonGetRequestBuilder()\n-                                                              .url(projectsRequestUrl);\n \n         Predicate<ProjectView> searchFilter = alwaysTruePredicate -> true;\n         if (StringUtils.isNotBlank(searchTerm)) {\n             searchFilter = projectView -> StringUtils.containsIgnoreCase(projectView.getName(), searchTerm);\n         }\n \n-        PagedRequest pagedRequest = new PagedRequest(blackDuckRequestBuilder, offset, pageSize);\n-        BlackDuckPageResponse<ProjectView> projectViewBlackDuckPageResponse = blackDuckResponsesTransformer.getSomeMatchingResponses(pagedRequest, ProjectView.class, searchFilter, pagedRequest.getLimit());\n+        BlackDuckPageResponse<ProjectView> pageOfViews = retrieveBlackDuckPageResponse(blackDuckServicesFactory, ApiDiscovery.PROJECTS_LINK_RESPONSE, pageNumber, pageSize, searchFilter);\n+\n+        List<ProviderProject> foundProjects = convertBlackDuckProjects(pageOfViews.getItems(), blackDuckService);\n+        int totalPageCount = (pageOfViews.getTotalCount() + (pageSize - 1)) / pageSize;\n+        return new AlertPagedModel<>(totalPageCount, pageNumber, pageSize, foundProjects);\n+    }\n+\n+    private AlertPagedModel<ProviderUserModel> retrieveUsersForProvider(ConfigurationModel blackDuckConfigurationModel, int pageNumber, int pageSize, String searchTerm) throws IntegrationException {\n+        BlackDuckServicesFactory blackDuckServicesFactory = createBlackDuckServicesFactory(blackDuckConfigurationModel);\n \n-        List<ProviderProject> foundProjects = convertBlackDuckProjects(projectViewBlackDuckPageResponse.getItems(), blackDuckService);\n-        int totalPageCount = (projectViewBlackDuckPageResponse.getTotalCount() + (pageSize - 1)) / pageSize;\n+        Predicate<UserView> searchFilter = userView -> StringUtils.isNotBlank(userView.getEmail());\n+        if (StringUtils.isNotBlank(searchTerm)) {\n+            searchFilter = searchFilter.and(userView -> StringUtils.containsIgnoreCase(userView.getEmail(), searchTerm));\n+        }\n+\n+        BlackDuckPageResponse<UserView> pageOfViews = retrieveBlackDuckPageResponse(blackDuckServicesFactory, ApiDiscovery.USERS_LINK_RESPONSE, pageNumber, pageSize, searchFilter);\n+\n+        List<ProviderUserModel> foundProjects = pageOfViews.getItems()\n+                                                    .stream()\n+                                                    .map(UserViewV4::getEmail)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDUzNTQ3OQ=="}, "originalCommit": {"oid": "a85bb32a023d9d38fdc5412a45ea1024a9989aeb"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2208, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}