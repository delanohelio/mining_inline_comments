{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTU3MDUy", "number": 1180, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowODo0M1rOEmPwxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoyNjozOFrOEmQIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTM5NTg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowODo0M1rOHWKg7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDowODo0M1rOHWKg7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwMjk4OQ==", "bodyText": "Wouldn't this be an INTERNAL_SERVER_ERROR since we return the GONE response if there are issues with the two input fields? Maybe this try-catch is too big and we need two to handle the BAD_REQUEST case and the INTERNAL_SERVER_ERROR case?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1180#discussion_r493002989", "createdAt": "2020-09-22T20:08:43Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "diffHunk": "@@ -31,102 +31,135 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.channel.ChannelEventManager;\n import com.synopsys.integration.alert.common.descriptor.accessor.AuditUtility;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.event.DistributionEvent;\n-import com.synopsys.integration.alert.common.exception.AlertJobMissingException;\n-import com.synopsys.integration.alert.common.exception.AlertNotificationPurgedException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n import com.synopsys.integration.alert.common.persistence.model.AuditEntryModel;\n+import com.synopsys.integration.alert.common.persistence.model.AuditEntryPageModel;\n import com.synopsys.integration.alert.common.persistence.model.AuditJobStatusModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n-import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.workflow.processor.notification.NotificationProcessor;\n+import com.synopsys.integration.alert.component.audit.AuditDescriptorKey;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n @Transactional\n public class AuditEntryActions {\n     private final Logger logger = LoggerFactory.getLogger(AuditEntryActions.class);\n \n+    private final AuthorizationManager authorizationManager;\n+    private final AuditDescriptorKey descriptorKey;\n     private final AuditUtility auditUtility;\n     private final NotificationManager notificationManager;\n     private final ConfigurationAccessor jobConfigReader;\n     private final ChannelEventManager eventManager;\n     private final NotificationProcessor notificationProcessor;\n \n     @Autowired\n-    public AuditEntryActions(AuditUtility auditUtility, NotificationManager notificationManager, ConfigurationAccessor jobConfigReader, ChannelEventManager eventManager, NotificationProcessor notificationProcessor) {\n+    public AuditEntryActions(AuthorizationManager authorizationManager, AuditDescriptorKey descriptorKey, AuditUtility auditUtility, NotificationManager notificationManager, ConfigurationAccessor jobConfigReader,\n+        ChannelEventManager eventManager, NotificationProcessor notificationProcessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorKey = descriptorKey;\n         this.auditUtility = auditUtility;\n         this.notificationManager = notificationManager;\n         this.jobConfigReader = jobConfigReader;\n         this.eventManager = eventManager;\n         this.notificationProcessor = notificationProcessor;\n     }\n \n-    public AlertPagedModel<AuditEntryModel> get() {\n+    public ActionResponse<AuditEntryPageModel> get() {\n         return get(null, null, null, null, null, false);\n     }\n \n-    public AlertPagedModel<AuditEntryModel> get(Integer pageNumber, Integer pageSize, String searchTerm, String sortField, String sortOrder, boolean onlyShowSentNotifications) {\n-        AlertPagedModel<AuditEntryModel> pagedRestModel = auditUtility.getPageOfAuditEntries(pageNumber, pageSize, searchTerm, sortField, sortOrder, onlyShowSentNotifications, auditUtility::convertToAuditEntryModelFromNotification);\n+    public ActionResponse<AuditEntryPageModel> get(Integer pageNumber, Integer pageSize, String searchTerm, String sortField, String sortOrder, boolean onlyShowSentNotifications) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        AuditEntryPageModel pagedRestModel = auditUtility.getPageOfAuditEntries(pageNumber, pageSize, searchTerm, sortField, sortOrder, onlyShowSentNotifications, auditUtility::convertToAuditEntryModelFromNotification);\n         logger.debug(\"Paged Audit Entry Rest Model: {}\", pagedRestModel);\n-        return pagedRestModel;\n+        return new ActionResponse<>(HttpStatus.OK, pagedRestModel);\n     }\n \n-    public Optional<AuditEntryModel> get(Long id) {\n-        if (id != null) {\n-            Optional<AlertNotificationModel> notificationContent = notificationManager.findById(id);\n-            return notificationContent.map(auditUtility::convertToAuditEntryModelFromNotification);\n+    public ActionResponse<AuditEntryModel> get(Long id) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        Optional<AlertNotificationModel> notificationContent = notificationManager.findById(id);\n+        if (notificationContent.isPresent()) {\n+            AuditEntryModel auditEntryModel = auditUtility.convertToAuditEntryModelFromNotification(notificationContent.get());\n+            return new ActionResponse<>(HttpStatus.OK, auditEntryModel);\n         }\n-        return Optional.empty();\n+        return new ActionResponse<>(HttpStatus.GONE, \"This Audit entry could not be found.\");\n     }\n \n-    public Optional<AuditJobStatusModel> getAuditInfoForJob(UUID jobId) {\n-        if (jobId != null) {\n-            return auditUtility.findFirstByJobId(jobId);\n+    public ActionResponse<AuditJobStatusModel> getAuditInfoForJob(UUID jobId) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        Optional<AuditJobStatusModel> auditJobStatusModel = auditUtility.findFirstByJobId(jobId);\n+        if (auditJobStatusModel.isPresent()) {\n+            return new ActionResponse<>(HttpStatus.OK, auditJobStatusModel.get());\n         }\n-        return Optional.empty();\n+        return new ActionResponse<>(HttpStatus.GONE, \"The Audit information could not be found for this job.\");\n     }\n \n-    public AlertPagedModel<AuditEntryModel> resendNotification(Long notificationId, UUID commonConfigId) throws IntegrationException {\n-        AlertNotificationModel notificationContent = notificationManager\n-                                                         .findById(notificationId)\n-                                                         .orElseThrow(() -> new AlertNotificationPurgedException(\"No notification with this id exists.\"));\n-        List<DistributionEvent> distributionEvents;\n-        if (null != commonConfigId) {\n-            ConfigurationJobModel commonDistributionConfig = jobConfigReader.getJobById(commonConfigId).orElseThrow(() -> {\n-                logger.warn(\"The Distribution Job with Id {} could not be found. This notification could not be sent\", commonConfigId);\n-                return new AlertJobMissingException(\"The Distribution Job with this id could not be found.\", commonConfigId);\n-            });\n-            if (commonDistributionConfig.isEnabled()) {\n-                distributionEvents = notificationProcessor.processNotifications(commonDistributionConfig, List.of(notificationContent));\n+    public ActionResponse<AuditEntryPageModel> resendNotification(Long notificationId, UUID commonConfigId) {\n+        if (!authorizationManager.hasExecutePermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        try {\n+            Optional<AlertNotificationModel> notification = notificationManager\n+                                                                .findById(notificationId);\n+            if (notification.isEmpty()) {\n+                return new ActionResponse<>(HttpStatus.GONE, \"No notification with this id exists.\");\n+            }\n+            AlertNotificationModel notificationContent = notification.get();\n+\n+            List<DistributionEvent> distributionEvents;\n+            if (null != commonConfigId) {\n+                Optional<ConfigurationJobModel> commonDistributionConfig = jobConfigReader.getJobById(commonConfigId);\n+                if (commonDistributionConfig.isEmpty()) {\n+                    String message = String.format(\"The Distribution Job with this id could not be found. %s\", commonConfigId.toString());\n+                    return new ActionResponse<>(HttpStatus.GONE, message);\n+                }\n+                ConfigurationJobModel commonConfig = commonDistributionConfig.get();\n+                if (commonConfig.isEnabled()) {\n+                    distributionEvents = notificationProcessor.processNotifications(commonConfig, List.of(notificationContent));\n+                } else {\n+                    UUID jobConfigId = commonConfig.getJobId();\n+                    logger.warn(\"The Distribution Job with Id {} was disabled. This notification could not be sent\", jobConfigId);\n+                    String message = String.format(\"The Distribution Job is currently disabled. %s\", jobConfigId.toString());\n+                    return new ActionResponse<>(HttpStatus.GONE, message);\n+                }\n             } else {\n-                UUID jobConfigId = commonDistributionConfig.getJobId();\n-                logger.warn(\"The Distribution Job with Id {} was disabled. This notification could not be sent\", jobConfigId);\n-                throw new AlertJobMissingException(\"The Distribution Job is currently disabled.\", jobConfigId);\n+                distributionEvents = notificationProcessor.processNotifications(List.of(notificationContent));\n+            }\n+            if (distributionEvents.isEmpty()) {\n+                logger.warn(\"This notification could not be sent. Make sure you have a Distribution Job configured to handle this notification.\");\n             }\n-        } else {\n-            distributionEvents = notificationProcessor.processNotifications(List.of(notificationContent));\n-        }\n-        if (distributionEvents.isEmpty()) {\n-            logger.warn(\"This notification could not be sent. Make sure you have a Distribution Job configured to handle this notification.\");\n-        }\n \n-        for (DistributionEvent event : distributionEvents) {\n-            UUID commonDistributionId = UUID.fromString(event.getConfigId());\n-            Long auditId = auditUtility.findMatchingAuditId(notificationContent.getId(), commonDistributionId).orElse(null);\n-            Map<Long, Long> notificationIdToAuditId = new HashMap<>();\n-            notificationIdToAuditId.put(notificationContent.getId(), auditId);\n-            event.setNotificationIdToAuditId(notificationIdToAuditId);\n-            eventManager.sendEvent(event);\n+            for (DistributionEvent event : distributionEvents) {\n+                UUID commonDistributionId = UUID.fromString(event.getConfigId());\n+                Long auditId = auditUtility.findMatchingAuditId(notificationContent.getId(), commonDistributionId).orElse(null);\n+                Map<Long, Long> notificationIdToAuditId = new HashMap<>();\n+                notificationIdToAuditId.put(notificationContent.getId(), auditId);\n+                event.setNotificationIdToAuditId(notificationIdToAuditId);\n+                eventManager.sendEvent(event);\n+            }\n+            return get();\n+        } catch (IntegrationException e) {\n+            return new ActionResponse<>(HttpStatus.BAD_REQUEST, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51487d0ec63643fc5c4be9b052dda0f189252f73"}, "originalPosition": 176}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQyNzkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoxODoyNVrOHWK0mA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDo1MDo1N1rOHWlbhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwODAyNA==", "bodyText": "We can't use the new ConfigAction helper classes to cut down on duplicate code here?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1180#discussion_r493008024", "createdAt": "2020-09-22T20:18:25Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "diffHunk": "@@ -31,102 +31,135 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.channel.ChannelEventManager;\n import com.synopsys.integration.alert.common.descriptor.accessor.AuditUtility;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.event.DistributionEvent;\n-import com.synopsys.integration.alert.common.exception.AlertJobMissingException;\n-import com.synopsys.integration.alert.common.exception.AlertNotificationPurgedException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n import com.synopsys.integration.alert.common.persistence.model.AuditEntryModel;\n+import com.synopsys.integration.alert.common.persistence.model.AuditEntryPageModel;\n import com.synopsys.integration.alert.common.persistence.model.AuditJobStatusModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n-import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.workflow.processor.notification.NotificationProcessor;\n+import com.synopsys.integration.alert.component.audit.AuditDescriptorKey;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n @Transactional\n public class AuditEntryActions {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51487d0ec63643fc5c4be9b052dda0f189252f73"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ0Mzk3NA==", "bodyText": "Unfortunately the classes that are there right now will require more empty implementation code.  Only the\nget(Long id) matches one of the method signatures.  Once we have all the Action and controller classes converted to return ActionResponses another pass on the classes we have in case improvements can be made.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1180#discussion_r493443974", "createdAt": "2020-09-23T10:50:57Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "diffHunk": "@@ -31,102 +31,135 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.channel.ChannelEventManager;\n import com.synopsys.integration.alert.common.descriptor.accessor.AuditUtility;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.event.DistributionEvent;\n-import com.synopsys.integration.alert.common.exception.AlertJobMissingException;\n-import com.synopsys.integration.alert.common.exception.AlertNotificationPurgedException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n import com.synopsys.integration.alert.common.persistence.model.AuditEntryModel;\n+import com.synopsys.integration.alert.common.persistence.model.AuditEntryPageModel;\n import com.synopsys.integration.alert.common.persistence.model.AuditJobStatusModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n-import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.workflow.processor.notification.NotificationProcessor;\n+import com.synopsys.integration.alert.component.audit.AuditDescriptorKey;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n @Transactional\n public class AuditEntryActions {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAwODAyNA=="}, "originalCommit": {"oid": "51487d0ec63643fc5c4be9b052dda0f189252f73"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTQ1NjMzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMDoyNjozOFrOHWLGGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDoyMTo1NlrOHWjzmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMjUwNw==", "bodyText": "If the job is disabled, shouldn't this be a BAD_REQUEST response instead of GONE?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1180#discussion_r493012507", "createdAt": "2020-09-22T20:26:38Z", "author": {"login": "jamesrichard91"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "diffHunk": "@@ -31,102 +31,135 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.channel.ChannelEventManager;\n import com.synopsys.integration.alert.common.descriptor.accessor.AuditUtility;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.event.DistributionEvent;\n-import com.synopsys.integration.alert.common.exception.AlertJobMissingException;\n-import com.synopsys.integration.alert.common.exception.AlertNotificationPurgedException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n import com.synopsys.integration.alert.common.persistence.model.AuditEntryModel;\n+import com.synopsys.integration.alert.common.persistence.model.AuditEntryPageModel;\n import com.synopsys.integration.alert.common.persistence.model.AuditJobStatusModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n-import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.workflow.processor.notification.NotificationProcessor;\n+import com.synopsys.integration.alert.component.audit.AuditDescriptorKey;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n @Transactional\n public class AuditEntryActions {\n     private final Logger logger = LoggerFactory.getLogger(AuditEntryActions.class);\n \n+    private final AuthorizationManager authorizationManager;\n+    private final AuditDescriptorKey descriptorKey;\n     private final AuditUtility auditUtility;\n     private final NotificationManager notificationManager;\n     private final ConfigurationAccessor jobConfigReader;\n     private final ChannelEventManager eventManager;\n     private final NotificationProcessor notificationProcessor;\n \n     @Autowired\n-    public AuditEntryActions(AuditUtility auditUtility, NotificationManager notificationManager, ConfigurationAccessor jobConfigReader, ChannelEventManager eventManager, NotificationProcessor notificationProcessor) {\n+    public AuditEntryActions(AuthorizationManager authorizationManager, AuditDescriptorKey descriptorKey, AuditUtility auditUtility, NotificationManager notificationManager, ConfigurationAccessor jobConfigReader,\n+        ChannelEventManager eventManager, NotificationProcessor notificationProcessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorKey = descriptorKey;\n         this.auditUtility = auditUtility;\n         this.notificationManager = notificationManager;\n         this.jobConfigReader = jobConfigReader;\n         this.eventManager = eventManager;\n         this.notificationProcessor = notificationProcessor;\n     }\n \n-    public AlertPagedModel<AuditEntryModel> get() {\n+    public ActionResponse<AuditEntryPageModel> get() {\n         return get(null, null, null, null, null, false);\n     }\n \n-    public AlertPagedModel<AuditEntryModel> get(Integer pageNumber, Integer pageSize, String searchTerm, String sortField, String sortOrder, boolean onlyShowSentNotifications) {\n-        AlertPagedModel<AuditEntryModel> pagedRestModel = auditUtility.getPageOfAuditEntries(pageNumber, pageSize, searchTerm, sortField, sortOrder, onlyShowSentNotifications, auditUtility::convertToAuditEntryModelFromNotification);\n+    public ActionResponse<AuditEntryPageModel> get(Integer pageNumber, Integer pageSize, String searchTerm, String sortField, String sortOrder, boolean onlyShowSentNotifications) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        AuditEntryPageModel pagedRestModel = auditUtility.getPageOfAuditEntries(pageNumber, pageSize, searchTerm, sortField, sortOrder, onlyShowSentNotifications, auditUtility::convertToAuditEntryModelFromNotification);\n         logger.debug(\"Paged Audit Entry Rest Model: {}\", pagedRestModel);\n-        return pagedRestModel;\n+        return new ActionResponse<>(HttpStatus.OK, pagedRestModel);\n     }\n \n-    public Optional<AuditEntryModel> get(Long id) {\n-        if (id != null) {\n-            Optional<AlertNotificationModel> notificationContent = notificationManager.findById(id);\n-            return notificationContent.map(auditUtility::convertToAuditEntryModelFromNotification);\n+    public ActionResponse<AuditEntryModel> get(Long id) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        Optional<AlertNotificationModel> notificationContent = notificationManager.findById(id);\n+        if (notificationContent.isPresent()) {\n+            AuditEntryModel auditEntryModel = auditUtility.convertToAuditEntryModelFromNotification(notificationContent.get());\n+            return new ActionResponse<>(HttpStatus.OK, auditEntryModel);\n         }\n-        return Optional.empty();\n+        return new ActionResponse<>(HttpStatus.GONE, \"This Audit entry could not be found.\");\n     }\n \n-    public Optional<AuditJobStatusModel> getAuditInfoForJob(UUID jobId) {\n-        if (jobId != null) {\n-            return auditUtility.findFirstByJobId(jobId);\n+    public ActionResponse<AuditJobStatusModel> getAuditInfoForJob(UUID jobId) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        Optional<AuditJobStatusModel> auditJobStatusModel = auditUtility.findFirstByJobId(jobId);\n+        if (auditJobStatusModel.isPresent()) {\n+            return new ActionResponse<>(HttpStatus.OK, auditJobStatusModel.get());\n         }\n-        return Optional.empty();\n+        return new ActionResponse<>(HttpStatus.GONE, \"The Audit information could not be found for this job.\");\n     }\n \n-    public AlertPagedModel<AuditEntryModel> resendNotification(Long notificationId, UUID commonConfigId) throws IntegrationException {\n-        AlertNotificationModel notificationContent = notificationManager\n-                                                         .findById(notificationId)\n-                                                         .orElseThrow(() -> new AlertNotificationPurgedException(\"No notification with this id exists.\"));\n-        List<DistributionEvent> distributionEvents;\n-        if (null != commonConfigId) {\n-            ConfigurationJobModel commonDistributionConfig = jobConfigReader.getJobById(commonConfigId).orElseThrow(() -> {\n-                logger.warn(\"The Distribution Job with Id {} could not be found. This notification could not be sent\", commonConfigId);\n-                return new AlertJobMissingException(\"The Distribution Job with this id could not be found.\", commonConfigId);\n-            });\n-            if (commonDistributionConfig.isEnabled()) {\n-                distributionEvents = notificationProcessor.processNotifications(commonDistributionConfig, List.of(notificationContent));\n+    public ActionResponse<AuditEntryPageModel> resendNotification(Long notificationId, UUID commonConfigId) {\n+        if (!authorizationManager.hasExecutePermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        try {\n+            Optional<AlertNotificationModel> notification = notificationManager\n+                                                                .findById(notificationId);\n+            if (notification.isEmpty()) {\n+                return new ActionResponse<>(HttpStatus.GONE, \"No notification with this id exists.\");\n+            }\n+            AlertNotificationModel notificationContent = notification.get();\n+\n+            List<DistributionEvent> distributionEvents;\n+            if (null != commonConfigId) {\n+                Optional<ConfigurationJobModel> commonDistributionConfig = jobConfigReader.getJobById(commonConfigId);\n+                if (commonDistributionConfig.isEmpty()) {\n+                    String message = String.format(\"The Distribution Job with this id could not be found. %s\", commonConfigId.toString());\n+                    return new ActionResponse<>(HttpStatus.GONE, message);\n+                }\n+                ConfigurationJobModel commonConfig = commonDistributionConfig.get();\n+                if (commonConfig.isEnabled()) {\n+                    distributionEvents = notificationProcessor.processNotifications(commonConfig, List.of(notificationContent));\n+                } else {\n+                    UUID jobConfigId = commonConfig.getJobId();\n+                    logger.warn(\"The Distribution Job with Id {} was disabled. This notification could not be sent\", jobConfigId);\n+                    String message = String.format(\"The Distribution Job is currently disabled. %s\", jobConfigId.toString());\n+                    return new ActionResponse<>(HttpStatus.GONE, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "51487d0ec63643fc5c4be9b052dda0f189252f73"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQxNzM3MA==", "bodyText": "Given that the job is disabled and not deleted then BAD_REQUEST makes sense rather than GONE.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1180#discussion_r493417370", "createdAt": "2020-09-23T10:21:56Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/audit/AuditEntryActions.java", "diffHunk": "@@ -31,102 +31,135 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.channel.ChannelEventManager;\n import com.synopsys.integration.alert.common.descriptor.accessor.AuditUtility;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n import com.synopsys.integration.alert.common.event.DistributionEvent;\n-import com.synopsys.integration.alert.common.exception.AlertJobMissingException;\n-import com.synopsys.integration.alert.common.exception.AlertNotificationPurgedException;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.NotificationManager;\n import com.synopsys.integration.alert.common.persistence.model.AuditEntryModel;\n+import com.synopsys.integration.alert.common.persistence.model.AuditEntryPageModel;\n import com.synopsys.integration.alert.common.persistence.model.AuditJobStatusModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.rest.model.AlertNotificationModel;\n-import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.workflow.processor.notification.NotificationProcessor;\n+import com.synopsys.integration.alert.component.audit.AuditDescriptorKey;\n import com.synopsys.integration.exception.IntegrationException;\n \n @Component\n @Transactional\n public class AuditEntryActions {\n     private final Logger logger = LoggerFactory.getLogger(AuditEntryActions.class);\n \n+    private final AuthorizationManager authorizationManager;\n+    private final AuditDescriptorKey descriptorKey;\n     private final AuditUtility auditUtility;\n     private final NotificationManager notificationManager;\n     private final ConfigurationAccessor jobConfigReader;\n     private final ChannelEventManager eventManager;\n     private final NotificationProcessor notificationProcessor;\n \n     @Autowired\n-    public AuditEntryActions(AuditUtility auditUtility, NotificationManager notificationManager, ConfigurationAccessor jobConfigReader, ChannelEventManager eventManager, NotificationProcessor notificationProcessor) {\n+    public AuditEntryActions(AuthorizationManager authorizationManager, AuditDescriptorKey descriptorKey, AuditUtility auditUtility, NotificationManager notificationManager, ConfigurationAccessor jobConfigReader,\n+        ChannelEventManager eventManager, NotificationProcessor notificationProcessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorKey = descriptorKey;\n         this.auditUtility = auditUtility;\n         this.notificationManager = notificationManager;\n         this.jobConfigReader = jobConfigReader;\n         this.eventManager = eventManager;\n         this.notificationProcessor = notificationProcessor;\n     }\n \n-    public AlertPagedModel<AuditEntryModel> get() {\n+    public ActionResponse<AuditEntryPageModel> get() {\n         return get(null, null, null, null, null, false);\n     }\n \n-    public AlertPagedModel<AuditEntryModel> get(Integer pageNumber, Integer pageSize, String searchTerm, String sortField, String sortOrder, boolean onlyShowSentNotifications) {\n-        AlertPagedModel<AuditEntryModel> pagedRestModel = auditUtility.getPageOfAuditEntries(pageNumber, pageSize, searchTerm, sortField, sortOrder, onlyShowSentNotifications, auditUtility::convertToAuditEntryModelFromNotification);\n+    public ActionResponse<AuditEntryPageModel> get(Integer pageNumber, Integer pageSize, String searchTerm, String sortField, String sortOrder, boolean onlyShowSentNotifications) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        AuditEntryPageModel pagedRestModel = auditUtility.getPageOfAuditEntries(pageNumber, pageSize, searchTerm, sortField, sortOrder, onlyShowSentNotifications, auditUtility::convertToAuditEntryModelFromNotification);\n         logger.debug(\"Paged Audit Entry Rest Model: {}\", pagedRestModel);\n-        return pagedRestModel;\n+        return new ActionResponse<>(HttpStatus.OK, pagedRestModel);\n     }\n \n-    public Optional<AuditEntryModel> get(Long id) {\n-        if (id != null) {\n-            Optional<AlertNotificationModel> notificationContent = notificationManager.findById(id);\n-            return notificationContent.map(auditUtility::convertToAuditEntryModelFromNotification);\n+    public ActionResponse<AuditEntryModel> get(Long id) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        Optional<AlertNotificationModel> notificationContent = notificationManager.findById(id);\n+        if (notificationContent.isPresent()) {\n+            AuditEntryModel auditEntryModel = auditUtility.convertToAuditEntryModelFromNotification(notificationContent.get());\n+            return new ActionResponse<>(HttpStatus.OK, auditEntryModel);\n         }\n-        return Optional.empty();\n+        return new ActionResponse<>(HttpStatus.GONE, \"This Audit entry could not be found.\");\n     }\n \n-    public Optional<AuditJobStatusModel> getAuditInfoForJob(UUID jobId) {\n-        if (jobId != null) {\n-            return auditUtility.findFirstByJobId(jobId);\n+    public ActionResponse<AuditJobStatusModel> getAuditInfoForJob(UUID jobId) {\n+        if (!authorizationManager.hasReadPermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        Optional<AuditJobStatusModel> auditJobStatusModel = auditUtility.findFirstByJobId(jobId);\n+        if (auditJobStatusModel.isPresent()) {\n+            return new ActionResponse<>(HttpStatus.OK, auditJobStatusModel.get());\n         }\n-        return Optional.empty();\n+        return new ActionResponse<>(HttpStatus.GONE, \"The Audit information could not be found for this job.\");\n     }\n \n-    public AlertPagedModel<AuditEntryModel> resendNotification(Long notificationId, UUID commonConfigId) throws IntegrationException {\n-        AlertNotificationModel notificationContent = notificationManager\n-                                                         .findById(notificationId)\n-                                                         .orElseThrow(() -> new AlertNotificationPurgedException(\"No notification with this id exists.\"));\n-        List<DistributionEvent> distributionEvents;\n-        if (null != commonConfigId) {\n-            ConfigurationJobModel commonDistributionConfig = jobConfigReader.getJobById(commonConfigId).orElseThrow(() -> {\n-                logger.warn(\"The Distribution Job with Id {} could not be found. This notification could not be sent\", commonConfigId);\n-                return new AlertJobMissingException(\"The Distribution Job with this id could not be found.\", commonConfigId);\n-            });\n-            if (commonDistributionConfig.isEnabled()) {\n-                distributionEvents = notificationProcessor.processNotifications(commonDistributionConfig, List.of(notificationContent));\n+    public ActionResponse<AuditEntryPageModel> resendNotification(Long notificationId, UUID commonConfigId) {\n+        if (!authorizationManager.hasExecutePermission(ConfigContextEnum.GLOBAL.name(), descriptorKey.getUniversalKey())) {\n+            return new ActionResponse<>(HttpStatus.FORBIDDEN, ActionResponse.FORBIDDEN_MESSAGE);\n+        }\n+        try {\n+            Optional<AlertNotificationModel> notification = notificationManager\n+                                                                .findById(notificationId);\n+            if (notification.isEmpty()) {\n+                return new ActionResponse<>(HttpStatus.GONE, \"No notification with this id exists.\");\n+            }\n+            AlertNotificationModel notificationContent = notification.get();\n+\n+            List<DistributionEvent> distributionEvents;\n+            if (null != commonConfigId) {\n+                Optional<ConfigurationJobModel> commonDistributionConfig = jobConfigReader.getJobById(commonConfigId);\n+                if (commonDistributionConfig.isEmpty()) {\n+                    String message = String.format(\"The Distribution Job with this id could not be found. %s\", commonConfigId.toString());\n+                    return new ActionResponse<>(HttpStatus.GONE, message);\n+                }\n+                ConfigurationJobModel commonConfig = commonDistributionConfig.get();\n+                if (commonConfig.isEnabled()) {\n+                    distributionEvents = notificationProcessor.processNotifications(commonConfig, List.of(notificationContent));\n+                } else {\n+                    UUID jobConfigId = commonConfig.getJobId();\n+                    logger.warn(\"The Distribution Job with Id {} was disabled. This notification could not be sent\", jobConfigId);\n+                    String message = String.format(\"The Distribution Job is currently disabled. %s\", jobConfigId.toString());\n+                    return new ActionResponse<>(HttpStatus.GONE, message);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzAxMjUwNw=="}, "originalCommit": {"oid": "51487d0ec63643fc5c4be9b052dda0f189252f73"}, "originalPosition": 141}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1772, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}