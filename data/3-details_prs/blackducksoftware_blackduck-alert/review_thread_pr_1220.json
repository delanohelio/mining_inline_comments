{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAxODIyNjE0", "number": 1220, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoxMjo0NFrOEtCBSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1Nzo1MFrOEtDbNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1NjU0NDczOnYy", "diffSide": "RIGHT", "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLContext.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzoxMjo0NFrOHgl9SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0NDo1N1rOHgqdLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzODM3Ng==", "bodyText": "This could be simplified to:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (null != enabledField) {\n          \n          \n            \n                            enabledField.setFieldValue(String.valueOf(false));\n          \n          \n            \n                        } else {\n          \n          \n            \n                            enabledField = ConfigurationFieldModel.create(AuthenticationDescriptor.KEY_SAML_ENABLED);\n          \n          \n            \n                            enabledField.setFieldValue(String.valueOf(false));\n          \n          \n            \n                            fields.put(AuthenticationDescriptor.KEY_SAML_ENABLED, enabledField);\n          \n          \n            \n                        }\n          \n          \n            \n                        if (null == enabledField) {\n          \n          \n            \n                            enabledField = ConfigurationFieldModel.create(AuthenticationDescriptor.KEY_SAML_ENABLED);\n          \n          \n            \n                            fields.put(AuthenticationDescriptor.KEY_SAML_ENABLED, enabledField);\n          \n          \n            \n                        }\n          \n          \n            \n                        enabledField.setFieldValue(String.valueOf(false));\n          \n      \n    \n    \n  \n\nIf it feels weird to modify the reference after the fields.put(...) call, you could call fields.put(...) after the last line without any significant performance impact.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1220#discussion_r503938376", "createdAt": "2020-10-13T13:12:44Z", "author": {"login": "gkillough"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLContext.java", "diffHunk": "@@ -69,6 +70,24 @@ public boolean isSAMLEnabled() {\n         return false;\n     }\n \n+    public void disableSAML() {\n+        try {\n+            ConfigurationModel configurationModel = getCurrentConfiguration();\n+            Map<String, ConfigurationFieldModel> fields = configurationModel.getCopyOfKeyToFieldMap();\n+            ConfigurationFieldModel enabledField = fields.get(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+            if (null != enabledField) {\n+                enabledField.setFieldValue(String.valueOf(false));\n+            } else {\n+                enabledField = ConfigurationFieldModel.create(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+                enabledField.setFieldValue(String.valueOf(false));\n+                fields.put(AuthenticationDescriptor.KEY_SAML_ENABLED, enabledField);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f495a8764339bec89f435c712362b3a9829255b9"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxMjA3Ng==", "bodyText": "That's not a problem.  I'll implement the change.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1220#discussion_r504012076", "createdAt": "2020-10-13T14:44:57Z", "author": {"login": "psantos1113"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLContext.java", "diffHunk": "@@ -69,6 +70,24 @@ public boolean isSAMLEnabled() {\n         return false;\n     }\n \n+    public void disableSAML() {\n+        try {\n+            ConfigurationModel configurationModel = getCurrentConfiguration();\n+            Map<String, ConfigurationFieldModel> fields = configurationModel.getCopyOfKeyToFieldMap();\n+            ConfigurationFieldModel enabledField = fields.get(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+            if (null != enabledField) {\n+                enabledField.setFieldValue(String.valueOf(false));\n+            } else {\n+                enabledField = ConfigurationFieldModel.create(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+                enabledField.setFieldValue(String.valueOf(false));\n+                fields.put(AuthenticationDescriptor.KEY_SAML_ENABLED, enabledField);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzkzODM3Ng=="}, "originalCommit": {"oid": "f495a8764339bec89f435c712362b3a9829255b9"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc3MzQ4OnYy", "diffSide": "RIGHT", "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1NzozNVrOHgoJaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0Mjo0N1rOHgqV_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDI0OQ==", "bodyText": "Should we be handling such broad exceptions here?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1220#discussion_r503974249", "createdAt": "2020-10-13T13:57:35Z", "author": {"login": "bamandel"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLManager.java", "diffHunk": "@@ -166,4 +173,33 @@ private ExtendedMetadataDelegate createDelegate(MetadataProvider provider) {\n     private HttpClient httpClient() {\n         return new HttpClient(new MultiThreadedHttpConnectionManager());\n     }\n+\n+    private boolean checkMetadataProvidersValid(String metaDataUrl, String entityId) {\n+        boolean httpProviderValid = false;\n+        boolean fileProviderValid = false;\n+        boolean entityIdValid = StringUtils.isNotBlank(entityId);\n+        if (!entityIdValid) {\n+            logger.error(\"Validated SAML entity id missing.\");\n+        }\n+        try {\n+            Optional<ExtendedMetadataDelegate> provider = createHttpProvider(metaDataUrl);\n+            if (provider.isPresent()) {\n+                provider.get().initialize();\n+                httpProviderValid = true;\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f495a8764339bec89f435c712362b3a9829255b9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxMDIzNw==", "bodyText": "Yes, because if there's a runtime exception on initialize of the metadata provider then you won't be able to login with SAML, LDAP or the database users.  The only exception that is advertised by the initialize method is a MetadataProviderException, but if the XML Metadata file isn't formatted correctly you can get a SAXParser exception which isn't wrapped in a MetaDataProviderException or advertised as a thrown exception.  We don't want the exception to bubble all the way up because it could cause the server to crash.\nHere we are validating as best we can that the SAML configuration is good.  If it is, then configure SAML.  If it isn't valid, then we want to be able to disable the SAML configuration.  SAML has two parts to it.  The database configuration to enable SAML authentication in Alert, which has already happened before this point, and the SAML library portion.  We need to be able to recover from an exception in order to disable SAML configuration in the database. This is the most cautious way to be able to recover.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1220#discussion_r504010237", "createdAt": "2020-10-13T14:42:47Z", "author": {"login": "psantos1113"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLManager.java", "diffHunk": "@@ -166,4 +173,33 @@ private ExtendedMetadataDelegate createDelegate(MetadataProvider provider) {\n     private HttpClient httpClient() {\n         return new HttpClient(new MultiThreadedHttpConnectionManager());\n     }\n+\n+    private boolean checkMetadataProvidersValid(String metaDataUrl, String entityId) {\n+        boolean httpProviderValid = false;\n+        boolean fileProviderValid = false;\n+        boolean entityIdValid = StringUtils.isNotBlank(entityId);\n+        if (!entityIdValid) {\n+            logger.error(\"Validated SAML entity id missing.\");\n+        }\n+        try {\n+            Optional<ExtendedMetadataDelegate> provider = createHttpProvider(metaDataUrl);\n+            if (provider.isPresent()) {\n+                provider.get().initialize();\n+                httpProviderValid = true;\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDI0OQ=="}, "originalCommit": {"oid": "f495a8764339bec89f435c712362b3a9829255b9"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1Njc3NDkzOnYy", "diffSide": "RIGHT", "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxMzo1Nzo1MFrOHgoKLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QxNDo0MzowMFrOHgqWnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDQ0Ng==", "bodyText": "Another very broad exception handling", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1220#discussion_r503974446", "createdAt": "2020-10-13T13:57:50Z", "author": {"login": "bamandel"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLManager.java", "diffHunk": "@@ -166,4 +173,33 @@ private ExtendedMetadataDelegate createDelegate(MetadataProvider provider) {\n     private HttpClient httpClient() {\n         return new HttpClient(new MultiThreadedHttpConnectionManager());\n     }\n+\n+    private boolean checkMetadataProvidersValid(String metaDataUrl, String entityId) {\n+        boolean httpProviderValid = false;\n+        boolean fileProviderValid = false;\n+        boolean entityIdValid = StringUtils.isNotBlank(entityId);\n+        if (!entityIdValid) {\n+            logger.error(\"Validated SAML entity id missing.\");\n+        }\n+        try {\n+            Optional<ExtendedMetadataDelegate> provider = createHttpProvider(metaDataUrl);\n+            if (provider.isPresent()) {\n+                provider.get().initialize();\n+                httpProviderValid = true;\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"Validating SAML Metadata URL error: \", ex);\n+        }\n+\n+        try {\n+            Optional<ExtendedMetadataDelegate> provider = createFileProvider();\n+            if (provider.isPresent()) {\n+                provider.get().initialize();\n+                fileProviderValid = true;\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f495a8764339bec89f435c712362b3a9829255b9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDAxMDM5Ng==", "bodyText": "see the previous comment", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1220#discussion_r504010396", "createdAt": "2020-10-13T14:43:00Z", "author": {"login": "psantos1113"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/authentication/security/saml/SAMLManager.java", "diffHunk": "@@ -166,4 +173,33 @@ private ExtendedMetadataDelegate createDelegate(MetadataProvider provider) {\n     private HttpClient httpClient() {\n         return new HttpClient(new MultiThreadedHttpConnectionManager());\n     }\n+\n+    private boolean checkMetadataProvidersValid(String metaDataUrl, String entityId) {\n+        boolean httpProviderValid = false;\n+        boolean fileProviderValid = false;\n+        boolean entityIdValid = StringUtils.isNotBlank(entityId);\n+        if (!entityIdValid) {\n+            logger.error(\"Validated SAML entity id missing.\");\n+        }\n+        try {\n+            Optional<ExtendedMetadataDelegate> provider = createHttpProvider(metaDataUrl);\n+            if (provider.isPresent()) {\n+                provider.get().initialize();\n+                httpProviderValid = true;\n+            }\n+        } catch (Exception ex) {\n+            logger.error(\"Validating SAML Metadata URL error: \", ex);\n+        }\n+\n+        try {\n+            Optional<ExtendedMetadataDelegate> provider = createFileProvider();\n+            if (provider.isPresent()) {\n+                provider.get().initialize();\n+                fileProviderValid = true;\n+            }\n+        } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzk3NDQ0Ng=="}, "originalCommit": {"oid": "f495a8764339bec89f435c712362b3a9829255b9"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2300, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}