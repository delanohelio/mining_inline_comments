{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDE4NTk5", "number": 1120, "title": " oauth  request validation", "bodyText": "Create a small in memory cache to manage the OAuth request keys contained in the state as part of validating a request to the AzureOAuthCallbackController.  If it isn't a request that Alert has made then do not process the request further.", "createdAt": "2020-08-19T19:51:19Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120", "merged": true, "mergeCommit": {"oid": "a7840fd0263bcfba8765677563d4ee6c4ba6be53"}, "closed": true, "closedAt": "2020-08-20T16:44:27Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAdlz_gH2gAyNDcwNDE4NTk5OjRhYWI3MmM1ODcyOTE4MmYxY2E2ZTlkYjcyZTVmNzI5OTliZjc4Njg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAzBCyAH2gAyNDcwNDE4NTk5OjcyZjhkNjk2NGFjOTUzNjhiNjZjM2RlZWFjNTRmMTIyZDRkZDA5YmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4aab72c58729182f1ca6e9db72e5f72999bf7868", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4aab72c58729182f1ca6e9db72e5f72999bf7868", "committedDate": "2020-08-19T15:45:47Z", "message": "feat: Add code to validate the oauth request in the callback controller."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c9c0c2ef2282fe620d18addcd95355607192f02", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7c9c0c2ef2282fe620d18addcd95355607192f02", "committedDate": "2020-08-19T19:40:02Z", "message": "feat: Add code to validate the OAuth requests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/111d302d02cc1757c337fafbe1bc8912b6f2d499", "committedDate": "2020-08-19T19:40:26Z", "message": "test: Add unit tests for the classes added."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwODU2NzE3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#pullrequestreview-470856717", "createdAt": "2020-08-19T20:14:36Z", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTM3NTgw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#pullrequestreview-470937580", "createdAt": "2020-08-19T20:52:02Z", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MjowMlrOHDYojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MjowMlrOHDYojw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMTM3NQ==", "bodyText": "Could this be improved to an actual response? Or do we want to continue processing?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473311375", "createdAt": "2020-08-19T20:52:02Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureOAuthCallbackController.java", "diffHunk": "@@ -72,73 +74,94 @@\n     private final ProxyManager proxyManager;\n     private final ConfigurationAccessor configurationAccessor;\n     private final AzureRedirectUtil azureRedirectUtil;\n+    private final OAuthRequestValidator oAuthRequestValidator;\n+    private final AuthorizationManager authorizationManager;\n \n     @Autowired\n     public AzureOAuthCallbackController(ResponseFactory responseFactory, Gson gson, AzureBoardsChannelKey azureBoardsChannelKey,\n         AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, ProxyManager proxyManager, ConfigurationAccessor configurationAccessor,\n-        AzureRedirectUtil azureRedirectUtil) {\n+        AzureRedirectUtil azureRedirectUtil, OAuthRequestValidator oAuthRequestValidator, AuthorizationManager authorizationManager) {\n         this.responseFactory = responseFactory;\n         this.gson = gson;\n         this.azureBoardsChannelKey = azureBoardsChannelKey;\n         this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n         this.proxyManager = proxyManager;\n         this.configurationAccessor = configurationAccessor;\n         this.azureRedirectUtil = azureRedirectUtil;\n+        this.oAuthRequestValidator = oAuthRequestValidator;\n+        this.authorizationManager = authorizationManager;\n     }\n \n     @GetMapping\n     public ResponseEntity<String> oauthCallback(HttpServletRequest request) {\n         logger.debug(\"Azure OAuth callback method called\");\n+        if (!authorizationManager.hasExecutePermission(ConfigContextEnum.GLOBAL.name(), azureBoardsChannelKey.getUniversalKey())) {\n+            logger.debug(\"Azure OAuth callback user does not have permission to call the controller.\");\n+            return responseFactory.createForbiddenResponse();\n+        }\n+\n+        String state = request.getParameter(\"state\");\n         try {\n             String requestURI = request.getRequestURI();\n             String requestQueryString = request.getQueryString();\n             logger.debug(\"Request URI {}?{}\", requestURI, requestQueryString);\n             String authorizationCode = request.getParameter(\"code\");\n-            String state = request.getParameter(\"state\");\n-            FieldAccessor fieldAccessor = createFieldAccessor();\n-            if (fieldAccessor.getFields().isEmpty()) {\n-                logger.error(\"Azure oauth callback: Channel global configuration missing\");\n+            if (!oAuthRequestValidator.hasRequestKey(state)) {\n+                logger.info(\"OAuth request {} not found.\", state);\n             } else {\n-                if (StringUtils.isBlank(authorizationCode)) {\n-                    logger.error(\"Azure oauth callback: Authorization code isn't valid. Stop processing\");\n+                logger.info(createOAuthRequestLoggerMessage(state, \"Processing...\"));\n+                oAuthRequestValidator.removeAuthorizationRequest(state);\n+                FieldAccessor fieldAccessor = createFieldAccessor();\n+                if (fieldAccessor.getFields().isEmpty()) {\n+                    logger.error(createOAuthRequestLoggerMessage(state, \"Azure oauth callback: Channel global configuration missing\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTYyMDg2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#pullrequestreview-470962086", "createdAt": "2020-08-19T21:03:22Z", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTg4NTQ1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#pullrequestreview-471588545", "createdAt": "2020-08-20T13:11:30Z", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMTozMFrOHEADlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMTozMFrOHEADlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NzI2OQ==", "bodyText": "Why not make the variable more self-revealing? CRON_EXPRESSION_EVERY_5_MINUTES?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473957269", "createdAt": "2020-08-20T13:11:30Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestPurgeTask.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.workflow.task.StartupScheduledTask;\n+import com.synopsys.integration.alert.common.workflow.task.TaskManager;\n+\n+@Component\n+public class OAuthRequestPurgeTask extends StartupScheduledTask {\n+    // every 5 minutes.\n+    public static final String CRON_EXPRESSION = \"0 0/5 * 1/1 * ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTkzNDUy", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#pullrequestreview-471593452", "createdAt": "2020-08-20T13:13:41Z", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMzo0MVrOHEAIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMzo0MVrOHEAIlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1ODU0OQ==", "bodyText": "Why not do this in one stream and just check isAfter instead?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473958549", "createdAt": "2020-08-20T13:13:41Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestValidator.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OAuthRequestValidator {\n+    private final Logger logger = LoggerFactory.getLogger(OAuthRequestValidator.class);\n+    private final Map<String, Instant> requestMap = new ConcurrentHashMap<>();\n+\n+    public void addAuthorizationRequest(String requestKey) {\n+        logger.debug(\"Adding OAuth authorization key {}\", requestKey);\n+        requestMap.put(requestKey, Instant.now());\n+    }\n+\n+    public void removeAuthorizationRequest(String requestKey) {\n+        requestMap.remove(requestKey);\n+        logger.debug(\"Removed OAuth authorization key {}\", requestKey);\n+    }\n+\n+    public boolean hasRequestKey(String requestKey) {\n+        return requestMap.containsKey(requestKey);\n+    }\n+\n+    public void removeRequestsOlderThanInstant(Instant instant) {\n+        Set<Map.Entry<String, Instant>> entriesToRemove = requestMap.entrySet().stream()\n+                                                              .filter(entry -> entry.getValue().isBefore(instant))\n+                                                              .collect(Collectors.toSet());\n+        entriesToRemove.stream()\n+            .map(Map.Entry::getKey)\n+            .forEach(this::removeAuthorizationRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTk5ODI0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#pullrequestreview-471599824", "createdAt": "2020-08-20T13:16:32Z", "commit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "72f8d6964ac95368b66c3deeac54f122d4dd09bb", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/72f8d6964ac95368b66c3deeac54f122d4dd09bb", "committedDate": "2020-08-20T16:43:32Z", "message": "refactor: Implement PR feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3406, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}