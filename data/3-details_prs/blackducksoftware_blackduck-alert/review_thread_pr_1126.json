{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNjg3ODk4", "number": 1126, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozODoyMlrOEbA9pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNjo0MlrOEbBivw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYyNzkxOnYy", "diffSide": "RIGHT", "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/http/AzureHttpService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozODoyMlrOHEyCvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTozODo0OVrOHEyDkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NjI1NA==", "bodyText": "I'm not 100% sure we care about parsing the response in delete requests. Is there typically a body?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474776254", "createdAt": "2020-08-21T15:38:22Z", "author": {"login": "gkillough"}, "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/http/AzureHttpService.java", "diffHunk": "@@ -95,6 +101,25 @@ public HttpResponse post(String urlEndpoint, Object requestBodyObject) throws IO\n         return executeRequestAndParseResponse(postRequest, responseType);\n     }\n \n+    public HttpResponse delete(String urlEndpoint) throws IOException {\n+        return deleteResponse(urlEndpoint);\n+    }\n+\n+    public <T> T delete(String urlEndpoint, Type responseType) throws HttpServiceException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NjQ2Ng==", "bodyText": "Nvm, I see below there is.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474776466", "createdAt": "2020-08-21T15:38:49Z", "author": {"login": "gkillough"}, "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/http/AzureHttpService.java", "diffHunk": "@@ -95,6 +101,25 @@ public HttpResponse post(String urlEndpoint, Object requestBodyObject) throws IO\n         return executeRequestAndParseResponse(postRequest, responseType);\n     }\n \n+    public HttpResponse delete(String urlEndpoint) throws IOException {\n+        return deleteResponse(urlEndpoint);\n+    }\n+\n+    public <T> T delete(String urlEndpoint, Type responseType) throws HttpServiceException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3NjI1NA=="}, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzYzODY2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0MToyNVrOHEyJKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0Mzo1N1rOHEyOog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Nzg5OA==", "bodyText": "I think this might be true for Jira, but it might not be in Azure. I think the OAuth user is likely the default creator and we may not need to explicitly set it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474777898", "createdAt": "2020-08-21T15:41:25Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {\n+        return AzureBoardsDescriptor.KEY_AZURE_PROJECT;\n+    }\n+\n+    protected String getIssueTypeFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_TYPE;\n+    }\n+\n+    protected String getIssueCreatorFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }\n+\n+    protected String getAddCommentsFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMMENT;\n+    }\n+\n+    protected String getResolveTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMPLETED_STATE;\n+    }\n+\n+    protected String getOpenTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_REOPEN_STATE;\n+    }\n+\n+    protected String getDefaultIssueCreatorFieldKey() {\n+        //TODO: We may need to expose a default issue creator email address in the global config\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3OTI5OA==", "bodyText": "If that is the case I can leave the descriptor as is and remove the TODO string. I just wanted another opinion since we are using the KEY_WORK_ITEM_CREATOR_EMAIL for both the creatorFieldKey and the default issue key.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474779298", "createdAt": "2020-08-21T15:43:57Z", "author": {"login": "ChomickiM"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {\n+        return AzureBoardsDescriptor.KEY_AZURE_PROJECT;\n+    }\n+\n+    protected String getIssueTypeFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_TYPE;\n+    }\n+\n+    protected String getIssueCreatorFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }\n+\n+    protected String getAddCommentsFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMMENT;\n+    }\n+\n+    protected String getResolveTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMPLETED_STATE;\n+    }\n+\n+    protected String getOpenTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_REOPEN_STATE;\n+    }\n+\n+    protected String getDefaultIssueCreatorFieldKey() {\n+        //TODO: We may need to expose a default issue creator email address in the global config\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3Nzg5OA=="}, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY0NjMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0MzozNVrOHEyN0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0MzozNVrOHEyN0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3OTA4OQ==", "bodyText": "I believe Azure has its own IssueSearchProperties. We definitely should not be using the Jira ones.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474779089", "createdAt": "2020-08-21T15:43:35Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsMessageParser;\n+import com.synopsys.integration.alert.channel.jira.common.util.JiraIssuePropertiesUtil;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.TestIssueRequestCreator;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.provider.state.ProviderProperties;\n+\n+//TODO: This is a near copy of JiraTestIssueRequestCreator, we should abstract out this class\n+public class AzureBoardsTestIssueRequestCreator implements TestIssueRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(AzureBoardsTestIssueRequestCreator.class);\n+    private final FieldAccessor fieldAccessor;\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+\n+    public AzureBoardsTestIssueRequestCreator(FieldAccessor fieldAccessor, AzureBoardsMessageParser azureBoardsMessageParser) {\n+        this.fieldAccessor = fieldAccessor;\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+    }\n+\n+    //TODO There are multiple references to JiraIssuePropertiesUtil. This class may be pulled out from Jira to become generic.\n+    @Override\n+    public IssueTrackerRequest createRequest(IssueOperation operation, String messageId) {\n+        try {\n+            String topic = fieldAccessor.getString(TestAction.KEY_CUSTOM_TOPIC).orElse(\"Alert Test Message\");\n+            String customMessage = fieldAccessor.getString(TestAction.KEY_CUSTOM_MESSAGE).orElse(\"Test Message Content\");\n+            ProviderMessageContent providerMessageContent = createTestNotificationContent(ItemOperation.ADD, messageId, topic, customMessage);\n+            ComponentItem arbitraryItem = providerMessageContent.getComponentItems().stream()\n+                                              .findAny()\n+                                              .orElseThrow(() -> new AlertException(\"No actionable component items were found. Cannot create test message content.\"));\n+\n+            ContentKey providerContentKey = providerMessageContent.getContentKey();\n+            String providerName = providerMessageContent.getProvider().getValue();\n+            String providerUrl = providerMessageContent.getProvider().getUrl()\n+                                     .map(JiraIssuePropertiesUtil::formatProviderUrl)\n+                                     .orElse(\"\");\n+\n+            LinkableItem topicItem = providerMessageContent.getTopic();\n+            LinkableItem subTopicItem = providerMessageContent.getSubTopic().orElse(null);\n+            Set<ComponentItem> componentItems = providerMessageContent.getComponentItems();\n+\n+            IssueSearchProperties issueSearchProperties = JiraIssuePropertiesUtil.create(providerName, providerUrl, topicItem, subTopicItem, arbitraryItem, StringUtils.EMPTY);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY0OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NDozMVrOHEyPzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NDozMVrOHEyPzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc3OTU5OQ==", "bodyText": "This method should be moved into a new utility class regardless of Azure's use of it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474779599", "createdAt": "2020-08-21T15:44:31Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsMessageParser;\n+import com.synopsys.integration.alert.channel.jira.common.util.JiraIssuePropertiesUtil;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.TestIssueRequestCreator;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.provider.state.ProviderProperties;\n+\n+//TODO: This is a near copy of JiraTestIssueRequestCreator, we should abstract out this class\n+public class AzureBoardsTestIssueRequestCreator implements TestIssueRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(AzureBoardsTestIssueRequestCreator.class);\n+    private final FieldAccessor fieldAccessor;\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+\n+    public AzureBoardsTestIssueRequestCreator(FieldAccessor fieldAccessor, AzureBoardsMessageParser azureBoardsMessageParser) {\n+        this.fieldAccessor = fieldAccessor;\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+    }\n+\n+    //TODO There are multiple references to JiraIssuePropertiesUtil. This class may be pulled out from Jira to become generic.\n+    @Override\n+    public IssueTrackerRequest createRequest(IssueOperation operation, String messageId) {\n+        try {\n+            String topic = fieldAccessor.getString(TestAction.KEY_CUSTOM_TOPIC).orElse(\"Alert Test Message\");\n+            String customMessage = fieldAccessor.getString(TestAction.KEY_CUSTOM_MESSAGE).orElse(\"Test Message Content\");\n+            ProviderMessageContent providerMessageContent = createTestNotificationContent(ItemOperation.ADD, messageId, topic, customMessage);\n+            ComponentItem arbitraryItem = providerMessageContent.getComponentItems().stream()\n+                                              .findAny()\n+                                              .orElseThrow(() -> new AlertException(\"No actionable component items were found. Cannot create test message content.\"));\n+\n+            ContentKey providerContentKey = providerMessageContent.getContentKey();\n+            String providerName = providerMessageContent.getProvider().getValue();\n+            String providerUrl = providerMessageContent.getProvider().getUrl()\n+                                     .map(JiraIssuePropertiesUtil::formatProviderUrl)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY1OTE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsConstants.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NzoxNFrOHEyVkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1MDoyMFrOHEyb9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MTA3NQ==", "bodyText": "Why is this commented out?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474781075", "createdAt": "2020-08-21T15:47:14Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsConstants.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+public class AzureBoardsConstants {\n+    //TODO: Figure out what constants we will need to use in Azure Boards\n+\n+    //TODO: Figure out which of these values should be the default work item type. A list can be found here:\n+    //https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20item%20types/list?view=azure-devops-rest-5.1\n+    public static final String DEFAULT_WORK_ITEM_TYPE = \"Task\";\n+    //public static final String DEFAULT_WORK_ITEM_TYPE_REFERENCE_NAME = \"Microsoft.VSTS.WorkItemTypes.Task\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjcxMQ==", "bodyText": "In the AzureBoardContextFactory.createIssueConfig we weren't sure which constant would be used whether it would be the the TYPE or the TYPE_REFERENCE_NAME. Our goal was during testing we could figure out which one is required by Azure.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474782711", "createdAt": "2020-08-21T15:50:20Z", "author": {"login": "ChomickiM"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsConstants.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+public class AzureBoardsConstants {\n+    //TODO: Figure out what constants we will need to use in Azure Boards\n+\n+    //TODO: Figure out which of these values should be the default work item type. A list can be found here:\n+    //https://docs.microsoft.com/en-us/rest/api/azure/devops/wit/work%20item%20types/list?view=azure-devops-rest-5.1\n+    public static final String DEFAULT_WORK_ITEM_TYPE = \"Task\";\n+    //public static final String DEFAULT_WORK_ITEM_TYPE_REFERENCE_NAME = \"Microsoft.VSTS.WorkItemTypes.Task\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MTA3NQ=="}, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY2MDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/actions/AzureBoardsGlobalTestAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NzozMlrOHEyWKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo0NzozMlrOHEyWKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MTIyNQ==", "bodyText": "Is this message true for both exceptions? We might consider exposing the exception message if it is an AlertException (i.e. have separate catch blocks).", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474781225", "createdAt": "2020-08-21T15:47:32Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/actions/AzureBoardsGlobalTestAction.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.actions;\n+\n+import java.net.Proxy;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.channel.azure.boards.AzureRedirectUtil;\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.ProxyManager;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpService;\n+import com.synopsys.integration.azure.boards.common.http.HttpServiceException;\n+import com.synopsys.integration.azure.boards.common.service.project.AzureProjectService;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AzureBoardsGlobalTestAction extends TestAction {\n+    public static final Logger logger = LoggerFactory.getLogger(AzureBoardsGlobalTestAction.class);\n+    private final Gson gson;\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+    private final ProxyManager proxyManager;\n+\n+    @Autowired\n+    public AzureBoardsGlobalTestAction(Gson gson, AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil, ProxyManager proxyManager) {\n+        this.gson = gson;\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+        this.proxyManager = proxyManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        try {\n+            Optional<ConfigurationFieldModel> configurationFieldModel = registeredFieldValues.getField(AzureBoardsDescriptor.KEY_ORGANIZATION_NAME);\n+            String organizationName = configurationFieldModel.flatMap(ConfigurationFieldModel::getFieldValue).orElse(null);\n+\n+            AzureBoardsProperties azureBoardsProperties = AzureBoardsProperties.fromFieldAccessor(azureBoardsCredentialDataStoreFactory, azureRedirectUtil.createOAuthRedirectUri(), registeredFieldValues);\n+            AzureHttpService azureHttpService = createAzureHttpService(azureBoardsProperties);\n+            AzureProjectService azureProjectService = new AzureProjectService(azureHttpService);\n+            azureProjectService.getProjects(organizationName);\n+            return new MessageResult(\"Successfully connected to Azure instance.\");\n+        } catch (HttpServiceException | AlertException ex) {\n+            logger.error(\"Global Test Action failed testing Azure Boards connection.\", ex);\n+            throw new AlertException(\"Could not establish an OAuth Connection.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY3MDE0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1MDozMlrOHEycYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzoyNTozM1rOHE1Vng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjgxOA==", "bodyText": "What's the plan with this class? Is this class extended somewhere? Should all these methods be protected?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474782818", "createdAt": "2020-08-21T15:50:32Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4NjU4NQ==", "bodyText": "This is a carryover from the Jira equivalent in JiraContextBuilder which was protected becasue it was extended by both the Server and Cloud versions. I can check if these are used elsewhere and make them public otherwise I think I should just be able to set them private since I believe the only use of them is within this class in the createIssueConfig.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474786585", "createdAt": "2020-08-21T15:57:36Z", "author": {"login": "ChomickiM"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjgxOA=="}, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgzMDIzOA==", "bodyText": "If this the is the only class using these accessors make the private.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474830238", "createdAt": "2020-08-21T17:25:33Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4MjgxOA=="}, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY5NDEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1NzozMVrOHEyq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1NzozMVrOHEyq8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4NjU0NA==", "bodyText": "if getProjectFieldKey ends up becoming a private method, you can add the FieldAccessor as a parameter then do all this within the method instead of here.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474786544", "createdAt": "2020-08-21T15:57:31Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {\n+        return AzureBoardsDescriptor.KEY_AZURE_PROJECT;\n+    }\n+\n+    protected String getIssueTypeFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_TYPE;\n+    }\n+\n+    protected String getIssueCreatorFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }\n+\n+    protected String getAddCommentsFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMMENT;\n+    }\n+\n+    protected String getResolveTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMPLETED_STATE;\n+    }\n+\n+    protected String getOpenTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_REOPEN_STATE;\n+    }\n+\n+    protected String getDefaultIssueCreatorFieldKey() {\n+        //TODO: We may need to expose a default issue creator email address in the global config\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }\n+\n+    public AzureBoardsContext build(FieldAccessor fieldAccessor) {\n+        return new AzureBoardsContext(createAzureBoardsProperties(fieldAccessor), createIssueConfig(fieldAccessor));\n+    }\n+\n+    protected IssueConfig createIssueConfig(FieldAccessor fieldAccessor) {\n+        String projectName = fieldAccessor.getStringOrNull(getProjectFieldKey());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzY5Nzk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1ODo0MVrOHEytaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNTo1ODo0MVrOHEytaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc4NzE3Ng==", "bodyText": "This is a good example of the comment I made on line 79", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474787176", "createdAt": "2020-08-21T15:58:41Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsContextFactory.java", "diffHunk": "@@ -0,0 +1,100 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.config.IssueConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+\n+@Component\n+public class AzureBoardsContextFactory {\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final AzureRedirectUtil azureRedirectUtil;\n+\n+    @Autowired\n+    public AzureBoardsContextFactory(AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, AzureRedirectUtil azureRedirectUtil) {\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.azureRedirectUtil = azureRedirectUtil;\n+    }\n+\n+    protected String getProjectFieldKey() {\n+        return AzureBoardsDescriptor.KEY_AZURE_PROJECT;\n+    }\n+\n+    protected String getIssueTypeFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_TYPE;\n+    }\n+\n+    protected String getIssueCreatorFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }\n+\n+    protected String getAddCommentsFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMMENT;\n+    }\n+\n+    protected String getResolveTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_COMPLETED_STATE;\n+    }\n+\n+    protected String getOpenTransitionFieldKey() {\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_REOPEN_STATE;\n+    }\n+\n+    protected String getDefaultIssueCreatorFieldKey() {\n+        //TODO: We may need to expose a default issue creator email address in the global config\n+        return AzureBoardsDescriptor.KEY_WORK_ITEM_CREATOR_EMAIL;\n+    }\n+\n+    public AzureBoardsContext build(FieldAccessor fieldAccessor) {\n+        return new AzureBoardsContext(createAzureBoardsProperties(fieldAccessor), createIssueConfig(fieldAccessor));\n+    }\n+\n+    protected IssueConfig createIssueConfig(FieldAccessor fieldAccessor) {\n+        String projectName = fieldAccessor.getStringOrNull(getProjectFieldKey());\n+        String issueCreator = fieldAccessor.getString(getIssueCreatorFieldKey()).orElseGet(() -> fieldAccessor.getStringOrNull(getDefaultIssueCreatorFieldKey()));\n+        String issueType = fieldAccessor.getString(getIssueTypeFieldKey()).orElse(AzureBoardsConstants.DEFAULT_WORK_ITEM_TYPE);\n+        Boolean commentOnIssues = fieldAccessor.getBooleanOrFalse(getAddCommentsFieldKey());\n+        String resolveTransition = fieldAccessor.getStringOrNull(getResolveTransitionFieldKey());\n+        String openTransition = fieldAccessor.getStringOrNull(getOpenTransitionFieldKey());\n+\n+        IssueConfig issueConfig = new IssueConfig();\n+        issueConfig.setProjectName(projectName);\n+        issueConfig.setIssueCreator(issueCreator);\n+        issueConfig.setIssueType(issueType);\n+        issueConfig.setCommentOnIssues(commentOnIssues);\n+        issueConfig.setResolveTransition(resolveTransition);\n+        issueConfig.setOpenTransition(openTransition);\n+\n+        return issueConfig;\n+    }\n+\n+    private AzureBoardsProperties createAzureBoardsProperties(FieldAccessor fieldAccessor) {\n+        return AzureBoardsProperties.fromFieldAccessor(azureBoardsCredentialDataStoreFactory, azureRedirectUtil.createOAuthRedirectUri(), fieldAccessor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzcxODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNToxOFrOHEy6YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNToxOFrOHEy6YA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MDQ5Ng==", "bodyText": "Do we want to be returning null? If we want null, I think returning an optional may be better.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474790496", "createdAt": "2020-08-21T16:05:18Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsMessageParser;\n+import com.synopsys.integration.alert.channel.jira.common.util.JiraIssuePropertiesUtil;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.TestIssueRequestCreator;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.provider.state.ProviderProperties;\n+\n+//TODO: This is a near copy of JiraTestIssueRequestCreator, we should abstract out this class\n+public class AzureBoardsTestIssueRequestCreator implements TestIssueRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(AzureBoardsTestIssueRequestCreator.class);\n+    private final FieldAccessor fieldAccessor;\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+\n+    public AzureBoardsTestIssueRequestCreator(FieldAccessor fieldAccessor, AzureBoardsMessageParser azureBoardsMessageParser) {\n+        this.fieldAccessor = fieldAccessor;\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+    }\n+\n+    //TODO There are multiple references to JiraIssuePropertiesUtil. This class may be pulled out from Jira to become generic.\n+    @Override\n+    public IssueTrackerRequest createRequest(IssueOperation operation, String messageId) {\n+        try {\n+            String topic = fieldAccessor.getString(TestAction.KEY_CUSTOM_TOPIC).orElse(\"Alert Test Message\");\n+            String customMessage = fieldAccessor.getString(TestAction.KEY_CUSTOM_MESSAGE).orElse(\"Test Message Content\");\n+            ProviderMessageContent providerMessageContent = createTestNotificationContent(ItemOperation.ADD, messageId, topic, customMessage);\n+            ComponentItem arbitraryItem = providerMessageContent.getComponentItems().stream()\n+                                              .findAny()\n+                                              .orElseThrow(() -> new AlertException(\"No actionable component items were found. Cannot create test message content.\"));\n+\n+            ContentKey providerContentKey = providerMessageContent.getContentKey();\n+            String providerName = providerMessageContent.getProvider().getValue();\n+            String providerUrl = providerMessageContent.getProvider().getUrl()\n+                                     .map(JiraIssuePropertiesUtil::formatProviderUrl)\n+                                     .orElse(\"\");\n+\n+            LinkableItem topicItem = providerMessageContent.getTopic();\n+            LinkableItem subTopicItem = providerMessageContent.getSubTopic().orElse(null);\n+            Set<ComponentItem> componentItems = providerMessageContent.getComponentItems();\n+\n+            IssueSearchProperties issueSearchProperties = JiraIssuePropertiesUtil.create(providerName, providerUrl, topicItem, subTopicItem, arbitraryItem, StringUtils.EMPTY);\n+\n+            switch (operation) {\n+                case RESOLVE:\n+                    return createResolveIssueRequest(providerContentKey, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);\n+                case OPEN:\n+                case UPDATE:\n+                default:\n+                    return createCreateOrUpdateIssueRequest(providerContentKey, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);\n+            }\n+\n+        } catch (AlertException ex) {\n+            logger.error(\"Error create test issue content\", ex);\n+        }\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzcyMDk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNjowOVrOHEy8AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNjowOVrOHEy8AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MDkxMw==", "bodyText": "Can we add a constructor that passes null for you and takes a single argument?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474790913", "createdAt": "2020-08-21T16:06:09Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsMessageParser;\n+import com.synopsys.integration.alert.channel.jira.common.util.JiraIssuePropertiesUtil;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.TestIssueRequestCreator;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.provider.state.ProviderProperties;\n+\n+//TODO: This is a near copy of JiraTestIssueRequestCreator, we should abstract out this class\n+public class AzureBoardsTestIssueRequestCreator implements TestIssueRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(AzureBoardsTestIssueRequestCreator.class);\n+    private final FieldAccessor fieldAccessor;\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+\n+    public AzureBoardsTestIssueRequestCreator(FieldAccessor fieldAccessor, AzureBoardsMessageParser azureBoardsMessageParser) {\n+        this.fieldAccessor = fieldAccessor;\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+    }\n+\n+    //TODO There are multiple references to JiraIssuePropertiesUtil. This class may be pulled out from Jira to become generic.\n+    @Override\n+    public IssueTrackerRequest createRequest(IssueOperation operation, String messageId) {\n+        try {\n+            String topic = fieldAccessor.getString(TestAction.KEY_CUSTOM_TOPIC).orElse(\"Alert Test Message\");\n+            String customMessage = fieldAccessor.getString(TestAction.KEY_CUSTOM_MESSAGE).orElse(\"Test Message Content\");\n+            ProviderMessageContent providerMessageContent = createTestNotificationContent(ItemOperation.ADD, messageId, topic, customMessage);\n+            ComponentItem arbitraryItem = providerMessageContent.getComponentItems().stream()\n+                                              .findAny()\n+                                              .orElseThrow(() -> new AlertException(\"No actionable component items were found. Cannot create test message content.\"));\n+\n+            ContentKey providerContentKey = providerMessageContent.getContentKey();\n+            String providerName = providerMessageContent.getProvider().getValue();\n+            String providerUrl = providerMessageContent.getProvider().getUrl()\n+                                     .map(JiraIssuePropertiesUtil::formatProviderUrl)\n+                                     .orElse(\"\");\n+\n+            LinkableItem topicItem = providerMessageContent.getTopic();\n+            LinkableItem subTopicItem = providerMessageContent.getSubTopic().orElse(null);\n+            Set<ComponentItem> componentItems = providerMessageContent.getComponentItems();\n+\n+            IssueSearchProperties issueSearchProperties = JiraIssuePropertiesUtil.create(providerName, providerUrl, topicItem, subTopicItem, arbitraryItem, StringUtils.EMPTY);\n+\n+            switch (operation) {\n+                case RESOLVE:\n+                    return createResolveIssueRequest(providerContentKey, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);\n+                case OPEN:\n+                case UPDATE:\n+                default:\n+                    return createCreateOrUpdateIssueRequest(providerContentKey, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);\n+            }\n+\n+        } catch (AlertException ex) {\n+            logger.error(\"Error create test issue content\", ex);\n+        }\n+\n+        return null;\n+    }\n+\n+    // TODO simplify the following 2 methods\n+    private IssueTrackerRequest createResolveIssueRequest(ContentKey providerContentKey, LinkableItem topicItem, LinkableItem subTopicItem, Set<ComponentItem> componentItems, ComponentItem arbitraryItem,\n+        IssueSearchProperties issueSearchProperties) {\n+        IssueContentModel contentModel = azureBoardsMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topicItem, subTopicItem, componentItems, arbitraryItem);\n+        AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NzcyMjg3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNjo0MlrOHEy9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNjo0MlrOHEy9JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MTIwNQ==", "bodyText": "This could use the single constructor", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1126#discussion_r474791205", "createdAt": "2020-08-21T16:06:42Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureBoardsTestIssueRequestCreator.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards;\n+\n+import java.util.Set;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsMessageParser;\n+import com.synopsys.integration.alert.channel.jira.common.util.JiraIssuePropertiesUtil;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.channel.issuetracker.enumeration.IssueOperation;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.AlertIssueOrigin;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueContentModel;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueCreationRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueResolutionRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueSearchProperties;\n+import com.synopsys.integration.alert.common.channel.issuetracker.message.IssueTrackerRequest;\n+import com.synopsys.integration.alert.common.channel.issuetracker.service.TestIssueRequestCreator;\n+import com.synopsys.integration.alert.common.enumeration.ItemOperation;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.message.model.ComponentItem;\n+import com.synopsys.integration.alert.common.message.model.ContentKey;\n+import com.synopsys.integration.alert.common.message.model.LinkableItem;\n+import com.synopsys.integration.alert.common.message.model.ProviderMessageContent;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.provider.state.ProviderProperties;\n+\n+//TODO: This is a near copy of JiraTestIssueRequestCreator, we should abstract out this class\n+public class AzureBoardsTestIssueRequestCreator implements TestIssueRequestCreator {\n+    private final Logger logger = LoggerFactory.getLogger(AzureBoardsTestIssueRequestCreator.class);\n+    private final FieldAccessor fieldAccessor;\n+    private final AzureBoardsMessageParser azureBoardsMessageParser;\n+\n+    public AzureBoardsTestIssueRequestCreator(FieldAccessor fieldAccessor, AzureBoardsMessageParser azureBoardsMessageParser) {\n+        this.fieldAccessor = fieldAccessor;\n+        this.azureBoardsMessageParser = azureBoardsMessageParser;\n+    }\n+\n+    //TODO There are multiple references to JiraIssuePropertiesUtil. This class may be pulled out from Jira to become generic.\n+    @Override\n+    public IssueTrackerRequest createRequest(IssueOperation operation, String messageId) {\n+        try {\n+            String topic = fieldAccessor.getString(TestAction.KEY_CUSTOM_TOPIC).orElse(\"Alert Test Message\");\n+            String customMessage = fieldAccessor.getString(TestAction.KEY_CUSTOM_MESSAGE).orElse(\"Test Message Content\");\n+            ProviderMessageContent providerMessageContent = createTestNotificationContent(ItemOperation.ADD, messageId, topic, customMessage);\n+            ComponentItem arbitraryItem = providerMessageContent.getComponentItems().stream()\n+                                              .findAny()\n+                                              .orElseThrow(() -> new AlertException(\"No actionable component items were found. Cannot create test message content.\"));\n+\n+            ContentKey providerContentKey = providerMessageContent.getContentKey();\n+            String providerName = providerMessageContent.getProvider().getValue();\n+            String providerUrl = providerMessageContent.getProvider().getUrl()\n+                                     .map(JiraIssuePropertiesUtil::formatProviderUrl)\n+                                     .orElse(\"\");\n+\n+            LinkableItem topicItem = providerMessageContent.getTopic();\n+            LinkableItem subTopicItem = providerMessageContent.getSubTopic().orElse(null);\n+            Set<ComponentItem> componentItems = providerMessageContent.getComponentItems();\n+\n+            IssueSearchProperties issueSearchProperties = JiraIssuePropertiesUtil.create(providerName, providerUrl, topicItem, subTopicItem, arbitraryItem, StringUtils.EMPTY);\n+\n+            switch (operation) {\n+                case RESOLVE:\n+                    return createResolveIssueRequest(providerContentKey, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);\n+                case OPEN:\n+                case UPDATE:\n+                default:\n+                    return createCreateOrUpdateIssueRequest(providerContentKey, topicItem, subTopicItem, componentItems, arbitraryItem, issueSearchProperties);\n+            }\n+\n+        } catch (AlertException ex) {\n+            logger.error(\"Error create test issue content\", ex);\n+        }\n+\n+        return null;\n+    }\n+\n+    // TODO simplify the following 2 methods\n+    private IssueTrackerRequest createResolveIssueRequest(ContentKey providerContentKey, LinkableItem topicItem, LinkableItem subTopicItem, Set<ComponentItem> componentItems, ComponentItem arbitraryItem,\n+        IssueSearchProperties issueSearchProperties) {\n+        IssueContentModel contentModel = azureBoardsMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueResolutionRequest.OPERATION, topicItem, subTopicItem, componentItems, arbitraryItem);\n+        AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);\n+        return IssueResolutionRequest.of(issueSearchProperties, contentModel, alertIssueOrigin);\n+    }\n+\n+    private IssueTrackerRequest createCreateOrUpdateIssueRequest(ContentKey providerContentKey, LinkableItem topicItem, LinkableItem subTopicItem, Set<ComponentItem> componentItems, ComponentItem arbitraryItem,\n+        IssueSearchProperties issueSearchProperties) {\n+        IssueContentModel contentModel = azureBoardsMessageParser.createIssueContentModel(providerContentKey.getProviderName(), IssueCreationRequest.OPERATION, topicItem, subTopicItem, componentItems, arbitraryItem);\n+        AlertIssueOrigin alertIssueOrigin = new AlertIssueOrigin(providerContentKey, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a382ebb963474e8dde6d39c56a742f722c9a8c6c"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1693, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}