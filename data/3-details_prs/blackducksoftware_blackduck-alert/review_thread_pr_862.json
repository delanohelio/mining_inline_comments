{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MzAwODk1", "number": 862, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1NDo1NlrODhN-xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDowNzo0MlrODhiY7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTU4NjYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/config/FieldModelProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1NDo1NlrOFr3QcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMDo1NDo1NlrOFr3QcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTUzODQxNw==", "bodyText": "Actual change.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/862#discussion_r381538417", "createdAt": "2020-02-19T20:54:56Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/config/FieldModelProcessor.java", "diffHunk": "@@ -50,122 +50,122 @@\n     private final DescriptorProcessor descriptorProcessor;\n \n     @Autowired\n-    public FieldModelProcessor(final ConfigurationFieldModelConverter fieldModelConverter, final FieldValidationAction fieldValidationAction, final DescriptorProcessor descriptorProcessor) {\n+    public FieldModelProcessor(ConfigurationFieldModelConverter fieldModelConverter, FieldValidationAction fieldValidationAction, DescriptorProcessor descriptorProcessor) {\n         this.fieldModelConverter = fieldModelConverter;\n         this.fieldValidationAction = fieldValidationAction;\n         this.descriptorProcessor = descriptorProcessor;\n     }\n \n-    public FieldModel performAfterReadAction(final FieldModel fieldModel) throws AlertException {\n-        final Optional<ApiAction> optionalApiAction = descriptorProcessor.retrieveApiAction(fieldModel);\n+    public FieldModel performAfterReadAction(FieldModel fieldModel) throws AlertException {\n+        Optional<ApiAction> optionalApiAction = descriptorProcessor.retrieveApiAction(fieldModel);\n         if (optionalApiAction.isPresent()) {\n-            final ApiAction apiAction = optionalApiAction.get();\n+            ApiAction apiAction = optionalApiAction.get();\n             return apiAction.afterGetAction(fieldModel);\n         }\n         return fieldModel;\n     }\n \n-    public FieldModel performBeforeDeleteAction(final FieldModel fieldModel) throws AlertException {\n-        final Optional<ApiAction> optionalApiAction = descriptorProcessor.retrieveApiAction(fieldModel);\n+    public FieldModel performBeforeDeleteAction(FieldModel fieldModel) throws AlertException {\n+        Optional<ApiAction> optionalApiAction = descriptorProcessor.retrieveApiAction(fieldModel);\n         if (optionalApiAction.isPresent()) {\n-            final ApiAction apiAction = optionalApiAction.get();\n+            ApiAction apiAction = optionalApiAction.get();\n             return apiAction.beforeDeleteAction(fieldModel);\n         }\n         return fieldModel;\n     }\n \n-    public void performAfterDeleteAction(final String descriptorName, final String context) throws AlertException {\n-        final Optional<ApiAction> optionalApiAction = descriptorProcessor.retrieveApiAction(descriptorName, context);\n+    public void performAfterDeleteAction(FieldModel fieldModel) throws AlertException {\n+        Optional<ApiAction> optionalApiAction = descriptorProcessor.retrieveApiAction(fieldModel.getDescriptorName(), fieldModel.getContext());\n         if (optionalApiAction.isPresent()) {\n-            final ApiAction apiAction = optionalApiAction.get();\n-            apiAction.afterDeleteAction(descriptorName, context);\n+            ApiAction apiAction = optionalApiAction.get();\n+            apiAction.afterDeleteAction(fieldModel);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511690ec1e19d3435b0d82b1813680879f228c67"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDkwNzc0OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/ScheduledTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDowMTo1N1rOFsUadQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDoxMToxOVrOFsUxSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNjExNw==", "bodyText": "Is this used by any other class should this be private", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/862#discussion_r382016117", "createdAt": "2020-02-20T14:01:57Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/ScheduledTask.java", "diffHunk": "@@ -46,36 +46,41 @@\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n     private final TaskScheduler taskScheduler;\n-    private final String taskName;\n     private ScheduledFuture<?> future;\n \n-    public ScheduledTask(final TaskScheduler taskScheduler, final String taskName) {\n+    public static String computeTaskName(Class<? extends ScheduledTask> clazz) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511690ec1e19d3435b0d82b1813680879f228c67"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyMTk2Mg==", "bodyText": "It is used in the static method computeProviderTaskName() which is currently only called by the SchedulingGlobalApiAction.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/862#discussion_r382021962", "createdAt": "2020-02-20T14:11:19Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/ScheduledTask.java", "diffHunk": "@@ -46,36 +46,41 @@\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n     private final TaskScheduler taskScheduler;\n-    private final String taskName;\n     private ScheduledFuture<?> future;\n \n-    public ScheduledTask(final TaskScheduler taskScheduler, final String taskName) {\n+    public static String computeTaskName(Class<? extends ScheduledTask> clazz) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNjExNw=="}, "originalCommit": {"oid": "511690ec1e19d3435b0d82b1813680879f228c67"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDkzMDM5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/ScheduledTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDowNzo0MlrOFsUoWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDoyMToyOFrOFsVKRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxOTY3Mg==", "bodyText": "Couldn't we keep getTaskName() and in the constructor of Scheduled task do the following:\ntaskName = computeTaskName();", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/862#discussion_r382019672", "createdAt": "2020-02-20T14:07:42Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/ScheduledTask.java", "diffHunk": "@@ -46,36 +46,41 @@\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n     private final TaskScheduler taskScheduler;\n-    private final String taskName;\n     private ScheduledFuture<?> future;\n \n-    public ScheduledTask(final TaskScheduler taskScheduler, final String taskName) {\n+    public static String computeTaskName(Class<? extends ScheduledTask> clazz) {\n+        String packageName = clazz.getPackageName();\n+        String simpleClassName = clazz.getSimpleName();\n+\n+        return String.format(\"Task::Class[%s.%s]\", packageName, simpleClassName);\n+    }\n+\n+    public ScheduledTask(TaskScheduler taskScheduler) {\n         this.taskScheduler = taskScheduler;\n-        this.taskName = taskName;\n     }\n \n-    public String getTaskName() {\n-        return taskName;\n+    public String computeTaskName() {\n+        return ScheduledTask.computeTaskName(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "511690ec1e19d3435b0d82b1813680879f228c67"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAyODM1Nw==", "bodyText": "We can do this for ScheduledTask, but not for ProviderTask which extends it. This is because ProviderTask would need ProviderProperties passed to its constructor which is currently part of a different ticket.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/862#discussion_r382028357", "createdAt": "2020-02-20T14:21:28Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/workflow/task/ScheduledTask.java", "diffHunk": "@@ -46,36 +46,41 @@\n     private final Logger logger = LoggerFactory.getLogger(getClass());\n \n     private final TaskScheduler taskScheduler;\n-    private final String taskName;\n     private ScheduledFuture<?> future;\n \n-    public ScheduledTask(final TaskScheduler taskScheduler, final String taskName) {\n+    public static String computeTaskName(Class<? extends ScheduledTask> clazz) {\n+        String packageName = clazz.getPackageName();\n+        String simpleClassName = clazz.getSimpleName();\n+\n+        return String.format(\"Task::Class[%s.%s]\", packageName, simpleClassName);\n+    }\n+\n+    public ScheduledTask(TaskScheduler taskScheduler) {\n         this.taskScheduler = taskScheduler;\n-        this.taskName = taskName;\n     }\n \n-    public String getTaskName() {\n-        return taskName;\n+    public String computeTaskName() {\n+        return ScheduledTask.computeTaskName(getClass());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxOTY3Mg=="}, "originalCommit": {"oid": "511690ec1e19d3435b0d82b1813680879f228c67"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2113, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}