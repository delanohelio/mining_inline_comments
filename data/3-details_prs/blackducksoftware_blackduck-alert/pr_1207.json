{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3MTE0Mjg3", "number": 1207, "title": "Update roles for action responses", "bodyText": "", "createdAt": "2020-10-02T20:13:42Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207", "merged": true, "mergeCommit": {"oid": "9b0b9799e60e7d0840edddbbd531afdb0fccccea"}, "closed": true, "closedAt": "2020-10-05T15:22:36Z", "author": {"login": "ChomickiM"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMEeNygH2gAyNDk3MTE0Mjg3OjhlNmM0OWU5NmU2M2YwOWJjMDIzODFkYzU3MTQxM2Q2ZDlmM2M3M2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPlS_oAFqTUwMjE1OTIxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8e6c49e96e63f09bc02381dc571413d6d9f3c73c", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8e6c49e96e63f09bc02381dc571413d6d9f3c73c", "committedDate": "2020-09-24T17:16:57Z", "message": "refactor: Initial commit to refactor RoleActions to use ActionResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5879a5679200633b948e57a4aca0cda33d071fa3", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5879a5679200633b948e57a4aca0cda33d071fa3", "committedDate": "2020-09-24T19:01:01Z", "message": "Merge branch 'master' into mc_action_response_roles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf1ef5b9927e94889d94962f6c2c21c9c18fd380", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bf1ef5b9927e94889d94962f6c2c21c9c18fd380", "committedDate": "2020-09-28T15:32:27Z", "message": "refactor: Update RoleActions and RoleController to use ActionResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "091545a11496bf9420457b83731eb59b68c974fb", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/091545a11496bf9420457b83731eb59b68c974fb", "committedDate": "2020-09-28T18:42:17Z", "message": "test: Initial commit for RoleActionsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fadc45145065b6a35541c2d021506589ea4f371", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1fadc45145065b6a35541c2d021506589ea4f371", "committedDate": "2020-09-28T18:42:42Z", "message": "Merge branch 'master' into mc_action_response_roles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be3c306139a458a6ef5d3acd4b5511a4de19fd3e", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/be3c306139a458a6ef5d3acd4b5511a4de19fd3e", "committedDate": "2020-09-29T17:30:59Z", "message": "test: Remove Mocks and use MockMvc to create a user from UserControllerTestIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9958224d419b79cc2602dcd6937be0289d8d6398", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9958224d419b79cc2602dcd6937be0289d8d6398", "committedDate": "2020-09-30T17:02:01Z", "message": "refactor: Adding RoleActionsTest and fixing incorrect actionResponse content"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "007cf2948f972963629854604995b166a8ed9eca", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/007cf2948f972963629854604995b166a8ed9eca", "committedDate": "2020-09-30T18:33:59Z", "message": "Merge branch 'master' into mc_action_response_roles\n\n# Conflicts:\n#\tsrc/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java\n#\tsrc/test/java/com/synopsys/integration/alert/web/api/user/UserControllerTestIT.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c6bb82ead28e7fa024837c540d4b0306bb0ff2f", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7c6bb82ead28e7fa024837c540d4b0306bb0ff2f", "committedDate": "2020-10-01T13:20:27Z", "message": "test: Initial commit for RoleControllerTestIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "606089876b8b01cc4297287bb4ef723c3b3f3f18", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/606089876b8b01cc4297287bb4ef723c3b3f3f18", "committedDate": "2020-10-01T13:34:30Z", "message": "Merge branch 'master' into mc_action_response_roles"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a4a2bf7ee6c53d644daae5fd67497b29b8e1d31", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7a4a2bf7ee6c53d644daae5fd67497b29b8e1d31", "committedDate": "2020-10-02T15:54:05Z", "message": "refactor: Update validation in RoleActions to verify permissions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "789e3d1a5e08236100ec133ed1d1dcf131bd8601", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/789e3d1a5e08236100ec133ed1d1dcf131bd8601", "committedDate": "2020-10-02T15:54:32Z", "message": "test: Create tests for RoleActions and RoleController"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6149a6b6710f538fc3a11c2d820564d68460f71d", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/6149a6b6710f538fc3a11c2d820564d68460f71d", "committedDate": "2020-10-02T20:12:04Z", "message": "test: Improve RoleActionsTest to test public api rather than protected methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxOTE3NTMw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-501917530", "createdAt": "2020-10-05T10:24:08Z", "commit": {"oid": "6149a6b6710f538fc3a11c2d820564d68460f71d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNDowOFrOHcWyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMDoyNDowOFrOHcWyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQ5NTQ4OQ==", "bodyText": "Isn't this handled by the validate method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499495489", "createdAt": "2020-10-05T10:24:08Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/RoleActions.java", "diffHunk": "@@ -35,101 +34,139 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.server.ResponseStatusException;\n \n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.action.api.AbstractResourceActions;\n import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n import com.synopsys.integration.alert.common.descriptor.accessor.RoleAccessor;\n import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n-import com.synopsys.integration.alert.common.exception.AlertConfigurationException;\n-import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n-import com.synopsys.integration.alert.common.exception.AlertFieldException;\n-import com.synopsys.integration.alert.common.exception.AlertForbiddenOperationException;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n import com.synopsys.integration.alert.common.persistence.model.UserRoleModel;\n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.component.users.UserManagementDescriptorKey;\n+import com.synopsys.integration.alert.web.api.role.util.PermissionModelUtil;\n \n @Component\n-public class RoleActions {\n+public class RoleActions extends AbstractResourceActions<RolePermissionModel, MultiRolePermissionModel> {\n     private static final String FIELD_KEY_ROLE_NAME = \"roleName\";\n     private final RoleAccessor roleAccessor;\n     private final AuthorizationManager authorizationManager;\n     private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public RoleActions(RoleAccessor roleAccessor, AuthorizationManager authorizationManager, DescriptorMap descriptorMap, List<DescriptorKey> descriptorKeys) {\n+    public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, RoleAccessor roleAccessor, AuthorizationManager authorizationManager, DescriptorMap descriptorMap, List<DescriptorKey> descriptorKeys) {\n+        super(userManagementDescriptorKey, ConfigContextEnum.GLOBAL, authorizationManager);\n         this.roleAccessor = roleAccessor;\n         this.authorizationManager = authorizationManager;\n         this.descriptorMap = descriptorMap;\n     }\n \n-    public List<RolePermissionModel> getRoles() {\n-        return roleAccessor.getRoles().stream()\n-                   .map(this::convertUserRoleModel)\n-                   .collect(Collectors.toList());\n-    }\n-\n-    public ValidationResponseModel validateRoleFields(RolePermissionModel rolePermissionModel) {\n-        return validateRoleNameFieldRequired(rolePermissionModel.getRoleName())\n-                   .map(requiredFieldError -> ValidationResponseModel.fromStatusCollection(\"There were problems with the role configuration\", List.of(requiredFieldError)))\n-                   .orElseGet(() -> ValidationResponseModel.success(\"The role name is valid\"));\n+    @Override\n+    protected ActionResponse<RolePermissionModel> createWithoutChecks(RolePermissionModel resource) {\n+        try {\n+            String roleName = resource.getRoleName();\n+            Set<PermissionModel> permissions = resource.getPermissions();\n+            PermissionMatrixModel permissionMatrixModel = PermissionModelUtil.convertToPermissionMatrixModel(permissions);\n+            UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n+            return new ActionResponse<>(HttpStatus.OK, convertUserRoleModel(userRoleModel));\n+        } catch (AlertException ex) {\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"There was an issue creating the role. %s\", ex.getMessage()));\n+        }\n     }\n \n-    public UserRoleModel createRole(RolePermissionModel rolePermissionModel) throws AlertDatabaseConstraintException, AlertFieldException, AlertConfigurationException {\n-        String roleName = rolePermissionModel.getRoleName();\n-        List<AlertFieldStatus> fieldErrors = fullyValidateRoleNameField(roleName);\n-        if (!fieldErrors.isEmpty()) {\n-            throw new AlertFieldException(fieldErrors);\n+    @Override\n+    protected ActionResponse<RolePermissionModel> deleteWithoutChecks(Long id) {\n+        Optional<UserRoleModel> existingRole = roleAccessor.getRoles(List.of(id))\n+                                                   .stream()\n+                                                   .findFirst();\n+        if (existingRole.isPresent()) {\n+            try {\n+                authorizationManager.deleteRole(id);\n+            } catch (AlertException ex) {\n+                return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, String.format(\"Error deleting role: %s\", ex.getMessage()));\n+            }\n+            return new ActionResponse<>(HttpStatus.NO_CONTENT);\n         }\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND);\n+    }\n \n-        Set<PermissionModel> permissions = rolePermissionModel.getPermissions();\n-        validatePermissions(permissions);\n-        PermissionMatrixModel permissionMatrixModel = convertToPermissionMatrixModel(permissions);\n-        UserRoleModel userRoleModel = authorizationManager.createRoleWithPermissions(roleName, permissionMatrixModel);\n-        return userRoleModel;\n+    @Override\n+    protected ActionResponse<MultiRolePermissionModel> readAllWithoutChecks() {\n+        List<RolePermissionModel> roles = roleAccessor.getRoles().stream()\n+                                              .map(this::convertUserRoleModel)\n+                                              .collect(Collectors.toList());\n+        return new ActionResponse<>(HttpStatus.OK, new MultiRolePermissionModel(roles));\n     }\n \n-    public UserRoleModel updateRole(Long roleId, RolePermissionModel rolePermissionModel) throws AlertDatabaseConstraintException, AlertConfigurationException, AlertFieldException {\n-        String roleName = rolePermissionModel.getRoleName();\n-        Optional<AlertFieldStatus> roleNameMissingError = validateRoleNameFieldRequired(roleName);\n-        if (roleNameMissingError.isPresent()) {\n-            throw AlertFieldException.singleFieldError(roleNameMissingError.get());\n+    @Override\n+    protected ActionResponse<RolePermissionModel> readWithoutChecks(Long id) {\n+        Optional<RolePermissionModel> role = findExisting(id);\n+        if (role.isPresent()) {\n+            return new ActionResponse<>(HttpStatus.OK, role.get());\n         }\n+        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Role with id:%d not found.\", id));\n+    }\n \n-        UserRoleModel existingRole = getExistingRoleOrThrow404(roleId);\n-        boolean targetRoleNameIsUsedByDifferentRole = roleAccessor.getRoles()\n-                                                          .stream()\n-                                                          .filter(role -> !role.getId().equals(existingRole.getId()))\n-                                                          .anyMatch(role -> role.getName().equalsIgnoreCase(roleName));\n-        if (targetRoleNameIsUsedByDifferentRole) {\n-            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"The role name is already in use\");\n-        }\n+    @Override\n+    protected ValidationActionResponse testWithoutChecks(RolePermissionModel resource) {\n+        return validateWithoutChecks(resource);\n+    }\n \n-        if (!existingRole.getName().equals(roleName)) {\n-            authorizationManager.updateRoleName(roleId, roleName);\n+    @Override\n+    protected ActionResponse<RolePermissionModel> updateWithoutChecks(Long id, RolePermissionModel resource) {\n+        try {\n+            String roleName = resource.getRoleName();\n+            Optional<UserRoleModel> existingRole = roleAccessor.getRoles(List.of(id))\n+                                                       .stream()\n+                                                       .findFirst();\n+            if (existingRole.isPresent()) {\n+                boolean targetRoleNameIsUsedByDifferentRole = roleAccessor.getRoles()\n+                                                                  .stream()\n+                                                                  .filter(role -> !role.getId().equals(existingRole.get().getId()))\n+                                                                  .anyMatch(role -> role.getName().equalsIgnoreCase(roleName));\n+                if (targetRoleNameIsUsedByDifferentRole) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6149a6b6710f538fc3a11c2d820564d68460f71d"}, "originalPosition": 152}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/fb9fdc98637611ada15ceb16b12d200fce1dba43", "committedDate": "2020-10-05T13:41:29Z", "message": "test: Removed unneeded validation from update. Added new test to increase coverage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTA5NTM0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-502109534", "createdAt": "2020-10-05T14:23:55Z", "commit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyMzo1NVrOHcfcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyMzo1NVrOHcfcXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzNzM0MQ==", "bodyText": "You may want to make Util classes final signifying to everyone that they shouldn't be extendable.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499637341", "createdAt": "2020-10-05T14:23:55Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.role.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n+import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.web.api.role.PermissionModel;\n+\n+public class PermissionModelUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTE3NjE2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-502117616", "createdAt": "2020-10-05T14:31:30Z", "commit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTozMVrOHcfzMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozMTozMVrOHcfzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0MzE4NQ==", "bodyText": "Didn't we already have something like this?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#discussion_r499643185", "createdAt": "2020-10-05T14:31:31Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/role/util/PermissionModelUtil.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.api.role.util;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.synopsys.integration.alert.common.enumeration.AccessOperation;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionMatrixModel;\n+import com.synopsys.integration.alert.common.util.BitwiseUtil;\n+import com.synopsys.integration.alert.web.api.role.PermissionModel;\n+\n+public class PermissionModelUtil {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTE4MzA0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-502118304", "createdAt": "2020-10-05T14:32:09Z", "commit": {"oid": "fb9fdc98637611ada15ceb16b12d200fce1dba43"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "faac4305a84763ac560bbf9e6711d18d7227fa31", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/faac4305a84763ac560bbf9e6711d18d7227fa31", "committedDate": "2020-10-05T14:34:44Z", "message": "refactor: Make PermissionModelUtil final"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTMxNzg3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-502131787", "createdAt": "2020-10-05T14:45:27Z", "commit": {"oid": "faac4305a84763ac560bbf9e6711d18d7227fa31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTU0MDgz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-502154083", "createdAt": "2020-10-05T15:07:58Z", "commit": {"oid": "faac4305a84763ac560bbf9e6711d18d7227fa31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAyMTU5MjE1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1207#pullrequestreview-502159215", "createdAt": "2020-10-05T15:13:20Z", "commit": {"oid": "faac4305a84763ac560bbf9e6711d18d7227fa31"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2978, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}