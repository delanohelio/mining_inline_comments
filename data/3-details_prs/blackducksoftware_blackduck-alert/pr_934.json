{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODI1MjQ5", "number": 934, "title": "provider table", "bodyText": "Changes to add the provider table for configuring multiple providers.", "createdAt": "2020-03-25T21:00:02Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934", "merged": true, "mergeCommit": {"oid": "c2f421ca8757fcd086dda7fc9db63d8c4051411a"}, "closed": true, "closedAt": "2020-03-27T11:39:34Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 35, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcNATOnAH2gAyMzkzODI1MjQ5OmFlZTIyZWQ5MmVjZDdiOTY0MjdiM2MyMGM2NGM3M2M0ZGY3NzA5YmY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcRhXGzAH2gAyMzkzODI1MjQ5OmQxZTk0ZjcyM2I1ZDdlMDY2ZGFhYTc0ZDQ1ZWNkZGVjY2RlODVmMDQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "aee22ed92ecd7b96427b3c20c64c73c4df7709bf", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/aee22ed92ecd7b96427b3c20c64c73c4df7709bf", "committedDate": "2020-03-12T18:48:06Z", "message": "feat: Add initial provider component."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ba9decbc217cfaacf9a9242aec4800b8dab8557f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ba9decbc217cfaacf9a9242aec4800b8dab8557f", "committedDate": "2020-03-12T18:48:50Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8464490e5d8a50f46ef3d7632b88faac27d918d", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b8464490e5d8a50f46ef3d7632b88faac27d918d", "committedDate": "2020-03-13T19:44:23Z", "message": "feat: Fetch all provider global configurations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae358cb652cc597dc26aff9fa8a493c56c084fc4", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ae358cb652cc597dc26aff9fa8a493c56c084fc4", "committedDate": "2020-03-16T16:40:10Z", "message": "feat: Provider get table data to display."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bceb347a225f5b4dff151d20d9662b1d9cee102c", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bceb347a225f5b4dff151d20d9662b1d9cee102c", "committedDate": "2020-03-17T16:05:23Z", "message": "feat: Implement ability to create and edit configs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7558cb09f9a94a22e6c0af567e4940ad5e8f4a6", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e7558cb09f9a94a22e6c0af567e4940ad5e8f4a6", "committedDate": "2020-03-17T18:43:19Z", "message": "feat: Add ability to test configurations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f18246df9fa8bbe12f40458980a69870447c7b3", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3f18246df9fa8bbe12f40458980a69870447c7b3", "committedDate": "2020-03-17T19:45:39Z", "message": "feat: Add test button and status message."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bca0463327b211fef0449d10055bcae4a813317", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5bca0463327b211fef0449d10055bcae4a813317", "committedDate": "2020-03-17T19:46:41Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee1c27f3b86407bad0e3cdcd09c9ada56461ca93", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ee1c27f3b86407bad0e3cdcd09c9ada56461ca93", "committedDate": "2020-03-18T15:07:31Z", "message": "feat: Only get the provider global configuration."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8cae6221f7e1c98ff5a85c74538e9e6718964db", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a8cae6221f7e1c98ff5a85c74538e9e6718964db", "committedDate": "2020-03-18T20:12:00Z", "message": "feat: Fix the edit save and cancel buttons."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee18f9d9bfb36b47d38531c7a9ebb179a1f65311", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ee18f9d9bfb36b47d38531c7a9ebb179a1f65311", "committedDate": "2020-03-20T18:08:03Z", "message": "feat: use callbacks for table events."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54eb0f511b96514098015a482d58135967be7e5c", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/54eb0f511b96514098015a482d58135967be7e5c", "committedDate": "2020-03-20T19:31:34Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a711a6fc3260bb81c9b501b26ce8cc98c1816efa", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a711a6fc3260bb81c9b501b26ce8cc98c1816efa", "committedDate": "2020-03-20T20:12:42Z", "message": "feat: Implement correct updates to the table on save."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dd854f3993fb27e4622e31eba4eac81d7c6173f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4dd854f3993fb27e4622e31eba4eac81d7c6173f", "committedDate": "2020-03-24T18:02:37Z", "message": "feat: Get latest table data on save or delete."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e3eaeb285c7256a1b1e69de0e6c12c5f6abd76b6", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e3eaeb285c7256a1b1e69de0e6c12c5f6abd76b6", "committedDate": "2020-03-24T18:07:57Z", "message": "feat: Use TableDisplay callbacks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7587087131c355f6e808f8ddef4cb661ddccce98", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7587087131c355f6e808f8ddef4cb661ddccce98", "committedDate": "2020-03-24T18:11:47Z", "message": "feat: Use TableDisplay callbacks."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea769f785ec7a0001c085c27d9ab6314cb24d80a", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ea769f785ec7a0001c085c27d9ab6314cb24d80a", "committedDate": "2020-03-24T18:20:56Z", "message": "feat: Use TableDisplay callbacks for roles."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de43b3390c2a89fb81869ec2667e6b6f0660e87e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/de43b3390c2a89fb81869ec2667e6b6f0660e87e", "committedDate": "2020-03-24T20:17:14Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dbd4f401c5039b11096726839f3a2e8eb95c5300", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/dbd4f401c5039b11096726839f3a2e8eb95c5300", "committedDate": "2020-03-25T13:17:56Z", "message": "feat: Separate copy functionality from edit in the tables."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "117cfe10b732e7e7994e4df99787f29fd5cca004", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/117cfe10b732e7e7994e4df99787f29fd5cca004", "committedDate": "2020-03-25T13:36:20Z", "message": "feat: Add custom column renderers to TableDisplay."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e363ffe80b2673e4b4a3a63883b62eb97f1ae24e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e363ffe80b2673e4b4a3a63883b62eb97f1ae24e", "committedDate": "2020-03-25T15:27:29Z", "message": "feat: Add provider name validator."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db0f0e8231da752ee9354a9097247e7fbe8dec7e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/db0f0e8231da752ee9354a9097247e7fbe8dec7e", "committedDate": "2020-03-25T16:07:02Z", "message": "feat: Clear sensitive fields when copying."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af342d13d11874ba679af0e4b737fee02c19ae46", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/af342d13d11874ba679af0e4b737fee02c19ae46", "committedDate": "2020-03-25T18:00:46Z", "message": "feat: Remove old Providers display."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "688e00f5c0b90dcae9a61a5c49f79c8b9015a4f9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/688e00f5c0b90dcae9a61a5c49f79c8b9015a4f9", "committedDate": "2020-03-25T19:06:04Z", "message": "feat: Use the new confirm modal for delete."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd38969112dc6b8a643f918e7fc33ff471031890", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/cd38969112dc6b8a643f918e7fc33ff471031890", "committedDate": "2020-03-25T20:50:47Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f484bb8b61e8a2708b5b6100f99a7954e4b5e35", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4f484bb8b61e8a2708b5b6100f99a7954e4b5e35", "committedDate": "2020-03-26T10:18:41Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2212415e7b0427bb939ad359710bca887d161791", "committedDate": "2020-03-26T11:57:56Z", "message": "feat: Update the import statements."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMDcwMzQ4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#pullrequestreview-382070348", "createdAt": "2020-03-26T14:34:37Z", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDozNDozN1rOF8J5cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDo1NDo1MlrOF8K3fA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyMTA0Mg==", "bodyText": "I don't think we really need this empty check. If the content is empty, we'll stream through an empty list creating another empty list which we're checking later on.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398621042", "createdAt": "2020-03-26T14:34:37Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderGlobalUIConfig.java", "diffHunk": "@@ -58,4 +74,29 @@ public ProviderKey getProviderKey() {\n         return providerKey;\n     }\n \n+    private Collection<String> validateDuplicateNames(FieldValueModel fieldToValidate, FieldModel fieldModel) {\n+        try {\n+            List<ConfigurationModel> configurations = configurationAccessor.getConfigurationsByDescriptorType(DescriptorType.PROVIDER);\n+            if (!configurations.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNDI2Ng==", "bodyText": "Probably don't need this variable anymore", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398634266", "createdAt": "2020-03-26T14:51:39Z", "author": {"login": "bamandel"}, "path": "src/main/js/field/TableDisplay.js", "diffHunk": "@@ -150,25 +151,57 @@ class TableDisplay extends Component {\n         this.handleSubmit();\n     }\n \n+    handleInsertModalTest(event, onModalClose) {\n+        if (event) {\n+            event.preventDefault()\n+            event.stopPropagation();\n+        }\n+        const { nestedInAnotherModal } = this.props;\n+        // nested modals are not supported by react-bootstrap.\n+        // if this table is nested in a modal it cannot call onModalClose because it would close all modals.\n+        if (!nestedInAnotherModal) {\n+            onModalClose();\n+        }\n+        this.handleTest();\n+    }\n+\n     handleSubmit(event) {\n         if (event) {\n             event.preventDefault()\n             event.stopPropagation();\n         }\n-        const result = this.props.onConfigSave();\n-        const validationState = result ? VALIDATION_STATE.SUCCESS : VALIDATION_STATE.FAILED;\n-        this.setState({\n-            uiValidation: validationState\n-        });\n-        this.setState({\n-            showConfiguration: false\n-        });\n+        const callback = (result) => {\n+            const validationState = result ? VALIDATION_STATE.SUCCESS : VALIDATION_STATE.FAILED;\n+            const validationSetCallback = () => this.setState({\n+                showConfiguration: false\n+            }, this.updateData);\n+            this.setState({\n+                uiValidation: validationState\n+            }, validationSetCallback);\n+        };\n+        this.props.onConfigSave(callback);\n+    }\n+\n+    handleTest(event) {\n+        if (event) {\n+            event.preventDefault()\n+            event.stopPropagation();\n+        }\n+        const callback = (result) => {\n+            const validationState = result ? VALIDATION_STATE.SUCCESS : VALIDATION_STATE.FAILED;\n+            this.setState({\n+                uiValidation: validationState\n+            });\n+        };\n+        this.props.onConfigTest(callback);\n     }\n \n     createEditModal() {\n         const { currentRowSelected } = this.state;\n-        const { modalTitle, newConfigFields, inProgress } = this.props;\n-        const showModal = Boolean(currentRowSelected) || this.isShowModal();\n+        const { modalTitle, newConfigFields, inProgress, testButton, testButtonLabel, errorDialogMessage, actionMessage } = this.props;\n+        const showModal = this.isShowModal();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNjEzMA==", "bodyText": "HandleChange seems to be very similar everywhere. Could this be made common somewhere? If it's similar to the TableDisplay, perhaps we add most of this code there?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398636130", "createdAt": "2020-03-26T14:53:58Z", "author": {"login": "bamandel"}, "path": "src/main/js/providers/ProviderTable.js", "diffHunk": "@@ -0,0 +1,363 @@\n+import React, { Component } from 'react';\n+import { connect } from 'react-redux';\n+import { withRouter } from 'react-router-dom';\n+import ConfigurationLabel from 'component/common/ConfigurationLabel';\n+import PropTypes from 'prop-types';\n+import { clearConfigFieldErrors, deleteConfig, getAllConfigs, testConfig, updateConfig } from 'store/actions/globalConfiguration';\n+import * as DescriptorUtilities from 'util/descriptorUtilities';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import TableDisplay from 'field/TableDisplay';\n+import FieldsPanel from 'field/FieldsPanel';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+const ProviderCommonKeys = {\n+    KEY_NAME: 'provider.common.config.name',\n+    KEY_ENABLED: 'provider.common.config.enabled'\n+}\n+\n+class ProviderTable extends Component {\n+    constructor(props) {\n+        super(props);\n+        this.createTableData = this.createTableData.bind(this);\n+        this.retrieveData = this.retrieveData.bind(this);\n+        this.clearModalFieldState = this.clearModalFieldState.bind(this);\n+        this.createColumns = this.createColumns.bind(this);\n+        this.handleChange = this.handleChange.bind(this);\n+        this.onSave = this.onSave.bind(this);\n+        this.onTest = this.onTest.bind(this);\n+        this.onConfigClose = this.onConfigClose.bind(this);\n+        this.onDelete = this.onDelete.bind(this);\n+        this.createModalFields = this.createModalFields.bind(this);\n+        this.onEdit = this.onEdit.bind(this);\n+        this.onCopy = this.onCopy.bind(this);\n+        this.combineModelWithDefaults = this.combineModelWithDefaults.bind(this);\n+\n+        this.state = {\n+            descriptor: null,\n+            providerConfig: {},\n+            saveCallback: () => null\n+        };\n+    }\n+\n+    componentDidMount() {\n+        const descriptor = this.props.descriptors.find(descriptor => descriptor.name === this.props.descriptorName\n+            && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.GLOBAL)\n+        if (descriptor) {\n+            const emptyConfig = FieldModelUtilities.createFieldModelWithDefaults(descriptor.fields, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, descriptor.name);\n+            this.setState({\n+                descriptor,\n+                providerConfig: emptyConfig\n+            });\n+            this.props.getAllConfigs(descriptor.name);\n+        }\n+    }\n+\n+    componentDidUpdate(prevProps) {\n+        if (prevProps.updateStatus === 'UPDATING' && (this.props.updateStatus === 'UPDATED' || this.props.updateStatus === 'ERROR')) {\n+            this.state.saveCallback(true);\n+        }\n+    }\n+\n+    combineModelWithDefaults(providerConfig) {\n+        const { descriptor } = this.state;\n+        if (!descriptor) {\n+            return {};\n+        }\n+        const emptyConfig = FieldModelUtilities.createFieldModelWithDefaults(descriptor.fields, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, descriptor.name);\n+        const updatedFieldModel = FieldModelUtilities.combineFieldModels(emptyConfig, providerConfig);\n+        if (providerConfig.id) {\n+            updatedFieldModel.id = providerConfig.id;\n+        }\n+        return updatedFieldModel;\n+    }\n+\n+    createColumns() {\n+        return [\n+            {\n+                header: 'id',\n+                headerLabel: 'Id',\n+                isKey: true,\n+                hidden: true\n+            },\n+            {\n+                header: 'name',\n+                headerLabel: 'Name',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'createdAt',\n+                headerLabel: 'Created At',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'lastUpdated',\n+                headerLabel: 'Last Updated',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'enabled',\n+                headerLabel: 'Enabled',\n+                isKey: false,\n+                hidden: false,\n+                dataFormat: this.enabledState\n+            }\n+        ];\n+    }\n+\n+    enabledState(cell) {\n+        const icon = (cell == 'true') ? 'check' : 'times';\n+        const color = (cell == 'true') ? 'synopsysGreen' : 'synopsysRed';\n+        const className = `alert-icon ${color}`;\n+\n+        return (\n+            <div className=\"btn btn-link jobIconButton\">\n+                <FontAwesomeIcon icon={icon} className={className} size=\"lg\" />\n+            </div>\n+        );\n+    }\n+\n+    onConfigClose(callback) {\n+        this.props.clearFieldErrors();\n+        callback();\n+    }\n+\n+    clearModalFieldState() {\n+        if (this.state.providerConfig && Object.keys(this.state.providerConfig).length > 0) {\n+            this.setState({\n+                providerConfig: {}\n+            });\n+        }\n+    }\n+\n+    retrieveData() {\n+        const { descriptor } = this.state;\n+        if (descriptor) {\n+            this.props.getAllConfigs(descriptor.name);\n+        }\n+    }\n+\n+    handleChange(e) {\n+        const { name, value, type, checked } = e.target;\n+        const { providerConfig } = this.state;\n+\n+        const updatedValue = type === 'checkbox' ? checked.toString().toLowerCase() === 'true' : value;\n+        const newProviderConfig = Object.assign(providerConfig, FieldModelUtilities.updateFieldModelSingleValue(providerConfig, name, updatedValue));\n+\n+        this.setState({\n+            providerConfig: newProviderConfig\n+        });\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNjkyNA==", "bodyText": "FieldsPanel handles its on handleChange similar to this. Perhaps we could do it that way.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398636924", "createdAt": "2020-03-26T14:54:52Z", "author": {"login": "bamandel"}, "path": "src/main/js/providers/ProviderTable.js", "diffHunk": "@@ -0,0 +1,363 @@\n+import React, { Component } from 'react';\n+import { connect } from 'react-redux';\n+import { withRouter } from 'react-router-dom';\n+import ConfigurationLabel from 'component/common/ConfigurationLabel';\n+import PropTypes from 'prop-types';\n+import { clearConfigFieldErrors, deleteConfig, getAllConfigs, testConfig, updateConfig } from 'store/actions/globalConfiguration';\n+import * as DescriptorUtilities from 'util/descriptorUtilities';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import TableDisplay from 'field/TableDisplay';\n+import FieldsPanel from 'field/FieldsPanel';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+const ProviderCommonKeys = {\n+    KEY_NAME: 'provider.common.config.name',\n+    KEY_ENABLED: 'provider.common.config.enabled'\n+}\n+\n+class ProviderTable extends Component {\n+    constructor(props) {\n+        super(props);\n+        this.createTableData = this.createTableData.bind(this);\n+        this.retrieveData = this.retrieveData.bind(this);\n+        this.clearModalFieldState = this.clearModalFieldState.bind(this);\n+        this.createColumns = this.createColumns.bind(this);\n+        this.handleChange = this.handleChange.bind(this);\n+        this.onSave = this.onSave.bind(this);\n+        this.onTest = this.onTest.bind(this);\n+        this.onConfigClose = this.onConfigClose.bind(this);\n+        this.onDelete = this.onDelete.bind(this);\n+        this.createModalFields = this.createModalFields.bind(this);\n+        this.onEdit = this.onEdit.bind(this);\n+        this.onCopy = this.onCopy.bind(this);\n+        this.combineModelWithDefaults = this.combineModelWithDefaults.bind(this);\n+\n+        this.state = {\n+            descriptor: null,\n+            providerConfig: {},\n+            saveCallback: () => null\n+        };\n+    }\n+\n+    componentDidMount() {\n+        const descriptor = this.props.descriptors.find(descriptor => descriptor.name === this.props.descriptorName\n+            && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.GLOBAL)\n+        if (descriptor) {\n+            const emptyConfig = FieldModelUtilities.createFieldModelWithDefaults(descriptor.fields, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, descriptor.name);\n+            this.setState({\n+                descriptor,\n+                providerConfig: emptyConfig\n+            });\n+            this.props.getAllConfigs(descriptor.name);\n+        }\n+    }\n+\n+    componentDidUpdate(prevProps) {\n+        if (prevProps.updateStatus === 'UPDATING' && (this.props.updateStatus === 'UPDATED' || this.props.updateStatus === 'ERROR')) {\n+            this.state.saveCallback(true);\n+        }\n+    }\n+\n+    combineModelWithDefaults(providerConfig) {\n+        const { descriptor } = this.state;\n+        if (!descriptor) {\n+            return {};\n+        }\n+        const emptyConfig = FieldModelUtilities.createFieldModelWithDefaults(descriptor.fields, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, descriptor.name);\n+        const updatedFieldModel = FieldModelUtilities.combineFieldModels(emptyConfig, providerConfig);\n+        if (providerConfig.id) {\n+            updatedFieldModel.id = providerConfig.id;\n+        }\n+        return updatedFieldModel;\n+    }\n+\n+    createColumns() {\n+        return [\n+            {\n+                header: 'id',\n+                headerLabel: 'Id',\n+                isKey: true,\n+                hidden: true\n+            },\n+            {\n+                header: 'name',\n+                headerLabel: 'Name',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'createdAt',\n+                headerLabel: 'Created At',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'lastUpdated',\n+                headerLabel: 'Last Updated',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'enabled',\n+                headerLabel: 'Enabled',\n+                isKey: false,\n+                hidden: false,\n+                dataFormat: this.enabledState\n+            }\n+        ];\n+    }\n+\n+    enabledState(cell) {\n+        const icon = (cell == 'true') ? 'check' : 'times';\n+        const color = (cell == 'true') ? 'synopsysGreen' : 'synopsysRed';\n+        const className = `alert-icon ${color}`;\n+\n+        return (\n+            <div className=\"btn btn-link jobIconButton\">\n+                <FontAwesomeIcon icon={icon} className={className} size=\"lg\" />\n+            </div>\n+        );\n+    }\n+\n+    onConfigClose(callback) {\n+        this.props.clearFieldErrors();\n+        callback();\n+    }\n+\n+    clearModalFieldState() {\n+        if (this.state.providerConfig && Object.keys(this.state.providerConfig).length > 0) {\n+            this.setState({\n+                providerConfig: {}\n+            });\n+        }\n+    }\n+\n+    retrieveData() {\n+        const { descriptor } = this.state;\n+        if (descriptor) {\n+            this.props.getAllConfigs(descriptor.name);\n+        }\n+    }\n+\n+    handleChange(e) {\n+        const { name, value, type, checked } = e.target;\n+        const { providerConfig } = this.state;\n+\n+        const updatedValue = type === 'checkbox' ? checked.toString().toLowerCase() === 'true' : value;\n+        const newProviderConfig = Object.assign(providerConfig, FieldModelUtilities.updateFieldModelSingleValue(providerConfig, name, updatedValue));\n+\n+        this.setState({\n+            providerConfig: newProviderConfig\n+        });\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYzNjEzMA=="}, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 152}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTMwMTAx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#pullrequestreview-382130101", "createdAt": "2020-03-26T15:33:02Z", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMzowMlrOF8MvcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozMzowMlrOF8MvcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2NzYzMg==", "bodyText": "Should this be a database constraint? I don't think this is the appropriate place to handle this error.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398667632", "createdAt": "2020-03-26T15:33:02Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/ui/ProviderGlobalUIConfig.java", "diffHunk": "@@ -58,4 +74,29 @@ public ProviderKey getProviderKey() {\n         return providerKey;\n     }\n \n+    private Collection<String> validateDuplicateNames(FieldValueModel fieldToValidate, FieldModel fieldModel) {\n+        try {\n+            List<ConfigurationModel> configurations = configurationAccessor.getConfigurationsByDescriptorType(DescriptorType.PROVIDER);\n+            if (!configurations.isEmpty()) {\n+                List<ConfigurationModel> modelsWithName = configurations.stream()\n+                                                              .filter(configurationModel ->\n+                                                                          configurationModel.getField(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME)\n+                                                                              .flatMap(ConfigurationFieldModel::getFieldValue)\n+                                                                              .filter(configName -> configName.equals(fieldToValidate.getValue().orElse(\"\")))\n+                                                                              .isPresent())\n+                                                              .collect(Collectors.toList());\n+                if (modelsWithName.size() > 1) {\n+                    return List.of(ERROR_DUPLICATE_PROVIDER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTMyMDM2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#pullrequestreview-382132036", "createdAt": "2020-03-26T15:35:03Z", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozNTowM1rOF8M1pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozNTowM1rOF8M1pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2OTIyMQ==", "bodyText": "Anything we can do to make this more dynamic? We should have a display name in the provider metadata no?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398669221", "createdAt": "2020-03-26T15:35:03Z", "author": {"login": "gkillough"}, "path": "src/main/js/Navigation.js", "diffHunk": "@@ -40,12 +40,18 @@ class Navigation extends Component {\n \n     render() {\n         const channelGlobals = this.createNavItemForDescriptors(DescriptorUtilities.DESCRIPTOR_TYPE.CHANNEL, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, '/alert/channels/', 'Channels');\n-        const providers = this.createNavItemForDescriptors(DescriptorUtilities.DESCRIPTOR_TYPE.PROVIDER, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, '/alert/providers/', 'Providers');\n         const components = this.createNavItemForDescriptors(DescriptorUtilities.DESCRIPTOR_TYPE.COMPONENT, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, '/alert/components/');\n \n         const nav = (\n             <Fragment>\n-                {providers}\n+                <li className=\"navHeader\">\n+                    Providers\n+                </li>\n+                <li>\n+                    <NavLink to=\"/alert/providers/blackduck\" activeClassName=\"activeNav\">\n+                        Black Duck\n+                    </NavLink>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTM2MjQw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#pullrequestreview-382136240", "createdAt": "2020-03-26T15:39:06Z", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozOTowNlrOF8NC2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNTozOTowNlrOF8NC2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY3MjYwMA==", "bodyText": "Are we storing the CSRF token as a cookie?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398672600", "createdAt": "2020-03-26T15:39:06Z", "author": {"login": "gkillough"}, "path": "src/main/js/store/actions/globalConfiguration.js", "diffHunk": "@@ -152,6 +167,27 @@ export function refreshConfig(id) {\n     };\n }\n \n+export function getAllConfigs(descriptorName) {\n+    return (dispatch, getState) => {\n+        dispatch(fetchingConfig());\n+        const { csrfToken } = getState().session;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMTQ4MTk2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#pullrequestreview-382148196", "createdAt": "2020-03-26T15:51:06Z", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgyMjM1MDc5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#pullrequestreview-382235079", "createdAt": "2020-03-26T17:21:34Z", "commit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoyMTozNFrOF8R3_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNzoyMTozNFrOF8R3_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODc1MTc0Mw==", "bodyText": "I dont think this method name makes sense. Maybe checkGlobalPermissions ?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/934#discussion_r398751743", "createdAt": "2020-03-26T17:21:34Z", "author": {"login": "jamesrichard91"}, "path": "src/main/js/providers/ProviderTable.js", "diffHunk": "@@ -0,0 +1,363 @@\n+import React, { Component } from 'react';\n+import { connect } from 'react-redux';\n+import { withRouter } from 'react-router-dom';\n+import ConfigurationLabel from 'component/common/ConfigurationLabel';\n+import PropTypes from 'prop-types';\n+import { clearConfigFieldErrors, deleteConfig, getAllConfigs, testConfig, updateConfig } from 'store/actions/globalConfiguration';\n+import * as DescriptorUtilities from 'util/descriptorUtilities';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import TableDisplay from 'field/TableDisplay';\n+import FieldsPanel from 'field/FieldsPanel';\n+import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n+\n+const ProviderCommonKeys = {\n+    KEY_NAME: 'provider.common.config.name',\n+    KEY_ENABLED: 'provider.common.config.enabled'\n+}\n+\n+class ProviderTable extends Component {\n+    constructor(props) {\n+        super(props);\n+        this.createTableData = this.createTableData.bind(this);\n+        this.retrieveData = this.retrieveData.bind(this);\n+        this.clearModalFieldState = this.clearModalFieldState.bind(this);\n+        this.createColumns = this.createColumns.bind(this);\n+        this.handleChange = this.handleChange.bind(this);\n+        this.onSave = this.onSave.bind(this);\n+        this.onTest = this.onTest.bind(this);\n+        this.onConfigClose = this.onConfigClose.bind(this);\n+        this.onDelete = this.onDelete.bind(this);\n+        this.createModalFields = this.createModalFields.bind(this);\n+        this.onEdit = this.onEdit.bind(this);\n+        this.onCopy = this.onCopy.bind(this);\n+        this.combineModelWithDefaults = this.combineModelWithDefaults.bind(this);\n+\n+        this.state = {\n+            descriptor: null,\n+            providerConfig: {},\n+            saveCallback: () => null\n+        };\n+    }\n+\n+    componentDidMount() {\n+        const descriptor = this.props.descriptors.find(descriptor => descriptor.name === this.props.descriptorName\n+            && descriptor.context === DescriptorUtilities.CONTEXT_TYPE.GLOBAL)\n+        if (descriptor) {\n+            const emptyConfig = FieldModelUtilities.createFieldModelWithDefaults(descriptor.fields, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, descriptor.name);\n+            this.setState({\n+                descriptor,\n+                providerConfig: emptyConfig\n+            });\n+            this.props.getAllConfigs(descriptor.name);\n+        }\n+    }\n+\n+    componentDidUpdate(prevProps) {\n+        if (prevProps.updateStatus === 'UPDATING' && (this.props.updateStatus === 'UPDATED' || this.props.updateStatus === 'ERROR')) {\n+            this.state.saveCallback(true);\n+        }\n+    }\n+\n+    combineModelWithDefaults(providerConfig) {\n+        const { descriptor } = this.state;\n+        if (!descriptor) {\n+            return {};\n+        }\n+        const emptyConfig = FieldModelUtilities.createFieldModelWithDefaults(descriptor.fields, DescriptorUtilities.CONTEXT_TYPE.GLOBAL, descriptor.name);\n+        const updatedFieldModel = FieldModelUtilities.combineFieldModels(emptyConfig, providerConfig);\n+        if (providerConfig.id) {\n+            updatedFieldModel.id = providerConfig.id;\n+        }\n+        return updatedFieldModel;\n+    }\n+\n+    createColumns() {\n+        return [\n+            {\n+                header: 'id',\n+                headerLabel: 'Id',\n+                isKey: true,\n+                hidden: true\n+            },\n+            {\n+                header: 'name',\n+                headerLabel: 'Name',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'createdAt',\n+                headerLabel: 'Created At',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'lastUpdated',\n+                headerLabel: 'Last Updated',\n+                isKey: false,\n+                hidden: false\n+            },\n+            {\n+                header: 'enabled',\n+                headerLabel: 'Enabled',\n+                isKey: false,\n+                hidden: false,\n+                dataFormat: this.enabledState\n+            }\n+        ];\n+    }\n+\n+    enabledState(cell) {\n+        const icon = (cell == 'true') ? 'check' : 'times';\n+        const color = (cell == 'true') ? 'synopsysGreen' : 'synopsysRed';\n+        const className = `alert-icon ${color}`;\n+\n+        return (\n+            <div className=\"btn btn-link jobIconButton\">\n+                <FontAwesomeIcon icon={icon} className={className} size=\"lg\" />\n+            </div>\n+        );\n+    }\n+\n+    onConfigClose(callback) {\n+        this.props.clearFieldErrors();\n+        callback();\n+    }\n+\n+    clearModalFieldState() {\n+        if (this.state.providerConfig && Object.keys(this.state.providerConfig).length > 0) {\n+            this.setState({\n+                providerConfig: {}\n+            });\n+        }\n+    }\n+\n+    retrieveData() {\n+        const { descriptor } = this.state;\n+        if (descriptor) {\n+            this.props.getAllConfigs(descriptor.name);\n+        }\n+    }\n+\n+    handleChange(e) {\n+        const { name, value, type, checked } = e.target;\n+        const { providerConfig } = this.state;\n+\n+        const updatedValue = type === 'checkbox' ? checked.toString().toLowerCase() === 'true' : value;\n+        const newProviderConfig = Object.assign(providerConfig, FieldModelUtilities.updateFieldModelSingleValue(providerConfig, name, updatedValue));\n+\n+        this.setState({\n+            providerConfig: newProviderConfig\n+        });\n+    }\n+\n+    onSave(callback) {\n+        const { providerConfig } = this.state;\n+        const configToUpdate = this.combineModelWithDefaults(providerConfig);\n+        this.props.updateConfig(configToUpdate);\n+        this.setState({\n+            saveCallback: callback\n+        });\n+        return true;\n+    }\n+\n+    onTest(callback) {\n+        const { providerConfig } = this.state;\n+        const configToUpdate = this.combineModelWithDefaults(providerConfig);\n+        this.props.testConfig(configToUpdate, '');\n+        callback(true);\n+        return true;\n+    }\n+\n+    onDelete(configsToDelete, callback) {\n+        if (configsToDelete) {\n+            configsToDelete.forEach(configId => {\n+                this.props.deleteConfig(configId);\n+            });\n+        }\n+        callback();\n+        this.retrieveData();\n+    }\n+\n+    createModalFields() {\n+        const { providerConfig, descriptor } = this.state;\n+        const { fieldErrors } = this.props;\n+        const newConfig = this.combineModelWithDefaults(providerConfig);\n+        if (descriptor) {\n+            return (\n+                <div>\n+                    <FieldsPanel\n+                        descriptorFields={descriptor.fields}\n+                        self={this}\n+                        fieldErrors={fieldErrors}\n+                        stateName={'providerConfig'}\n+                        currentConfig={newConfig}\n+                    />\n+                </div>\n+            );\n+        }\n+        return <div />;\n+    }\n+\n+    onEdit(selectedRow, callback) {\n+        const { id } = selectedRow;\n+        const { providerConfigs } = this.props;\n+        const selectedConfig = providerConfigs.find(config => config.id === id);\n+        this.setState({\n+            providerConfig: selectedConfig\n+        }, callback);\n+    }\n+\n+    onCopy(selectedRow, callback) {\n+        const { id } = selectedRow;\n+        const { providerConfigs } = this.props;\n+        let selectedConfig = providerConfigs.find(config => config.id === id);\n+        const { descriptor } = this.state;\n+        if (descriptor) {\n+            descriptor.fields.forEach(field => {\n+                if (field.sensitive) {\n+                    selectedConfig = FieldModelUtilities.updateFieldModelSingleValue(selectedConfig, field.key, \"\");\n+                }\n+            });\n+        }\n+\n+        selectedConfig.id = null;\n+        this.setState({\n+            providerConfig: selectedConfig\n+        }, callback);\n+    }\n+\n+    checkJobPermissions(operation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2212415e7b0427bb939ad359710bca887d161791"}, "originalPosition": 230}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d00d13c771d53614ab6ff492cc864705daf48d9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/0d00d13c771d53614ab6ff492cc864705daf48d9", "committedDate": "2020-03-26T18:33:28Z", "message": "Merge remote-tracking branch 'origin/master' into ps_provider_table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1e94f723b5d7e066daaa74d45ecddeccde85f04", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d1e94f723b5d7e066daaa74d45ecddeccde85f04", "committedDate": "2020-03-26T19:34:54Z", "message": "refactor: Implement PR feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2654, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}