{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MjY5MDQ5", "number": 1295, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo1MDo0M1rOFE_fVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzoxODozOVrOFGtClA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQwNzc4ODM5OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/resources/liquibase/6.4.0/notification-content-processing-column.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxMzo1MDo0M1rOIFRVqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxNTozNDoyN1rOIFWSKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM5Nzg2NA==", "bodyText": "The id's should have a unique text describing the change now.  Try something like add_processed_column_to_notification_table", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r542397864", "createdAt": "2020-12-14T13:50:43Z", "author": {"login": "psantos1113"}, "path": "alert-database/src/main/resources/liquibase/6.4.0/notification-content-processing-column.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+                   xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd\">\n+\n+    <changeSet author=\"martinch\" id=\"2020-12-01-14-04-07-258\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0aab07e0dfc799eab0570c992d21f83544f5665"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQzODA3MQ==", "bodyText": "I thought we were still using the time as the ID, I gave Martin bad information.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r542438071", "createdAt": "2020-12-14T14:43:54Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/resources/liquibase/6.4.0/notification-content-processing-column.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+                   xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd\">\n+\n+    <changeSet author=\"martinch\" id=\"2020-12-01-14-04-07-258\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM5Nzg2NA=="}, "originalCommit": {"oid": "b0aab07e0dfc799eab0570c992d21f83544f5665"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjQ3ODg5MA==", "bodyText": "We started changing back in September to more descriptive IDs", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r542478890", "createdAt": "2020-12-14T15:34:27Z", "author": {"login": "psantos1113"}, "path": "alert-database/src/main/resources/liquibase/6.4.0/notification-content-processing-column.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<databaseChangeLog xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"\n+                   xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.3.xsd\">\n+\n+    <changeSet author=\"martinch\" id=\"2020-12-01-14-04-07-258\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjM5Nzg2NA=="}, "originalCommit": {"oid": "b0aab07e0dfc799eab0570c992d21f83544f5665"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDI1MjAwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/event/NotificationEvent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMDo1OVrOIGM2sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoxMDo1OVrOIGM2sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM3Mjk3OQ==", "bodyText": "It might be more appropriate to call this \"NotificationsReceivedEvent\" now.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r543372979", "createdAt": "2020-12-15T14:10:59Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/event/NotificationEvent.java", "diffHunk": "@@ -22,18 +22,10 @@\n  */\n package com.synopsys.integration.alert.common.event;\n \n-import java.util.List;\n-\n public class NotificationEvent extends AlertEvent {\n     public static final String NOTIFICATION_EVENT_TYPE = \"notification_event\";\n-    private final List<Long> notificationIds;\n \n-    public NotificationEvent(final List<Long> notificationIds) {\n+    public NotificationEvent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc15ebc47129106ae93fdfaed689539910c2605a"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDMzMDAxOnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoyMDowNFrOIGNkVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDoyMDowNFrOIGNkVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM4NDY2MA==", "bodyText": "The sort and page size should be reflected in the method name. Also, I believe we don't want to expose Page (use AlertPagedModel instead?) outside of the DB API, but we may not have done the best job of that up until this point.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r543384660", "createdAt": "2020-12-15T14:20:04Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "diffHunk": "@@ -185,6 +193,25 @@ public PageRequest getPageRequestForNotifications(Integer pageNumber, Integer pa\n         return PageRequest.of(pageNumber, pageSize, Sort.by(sortingOrder));\n     }\n \n+    //TODO this needs unit tests\n+    @Override\n+    public Page<AlertNotificationModel> findNotificationsNotProcessed() {\n+        Sort.Order sortingOrder = Sort.Order.asc(\"providerCreationTime\");\n+        PageRequest pageRequest = PageRequest.of(0, 100, Sort.by(sortingOrder));\n+        return notificationContentRepository.findNotProcessedNotifications(pageRequest)\n+                   .map(this::toModel);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cc15ebc47129106ae93fdfaed689539910c2605a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTEwOTY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/ScalingPerformanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0OTo1NlrOIHMF-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTo0OTo1NlrOIHMF-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwOTA4Mg==", "bodyText": "Make sure this does not get merged into master.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544409082", "createdAt": "2020-12-16T15:49:56Z", "author": {"login": "jamesrichard91"}, "path": "src/test/java/com/synopsys/integration/alert/performance/ScalingPerformanceTest.java", "diffHunk": "@@ -69,7 +68,7 @@ public static void initTest() {\n \n     @Test\n     @Ignore\n-    @Disabled\n+    //@Disabled //TODO remove this when testing", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9ba7d7d5e11e130c3912e7d759186778307c2599"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMTk5Njk5OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1NTo1MFrOIHUWJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1NTo1MFrOIHUWJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NDI5Mg==", "bodyText": "It seems like we should be passing the pageSize as a parameter. This class shouldn't be the one that decides on that size.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544544292", "createdAt": "2020-12-16T18:55:50Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "diffHunk": "@@ -185,6 +174,27 @@ public PageRequest getPageRequestForNotifications(Integer pageNumber, Integer pa\n         return PageRequest.of(pageNumber, pageSize, Sort.by(sortingOrder));\n     }\n \n+    @Override\n+    public AlertPagedModel<AlertNotificationModel> getFirstPageOfNotificationsNotProcessed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4a66de782530ec919bb8840d01fba70acad7f0"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjAwMTQ4OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1Njo0NlrOIHUYvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxODo1Njo0NlrOIHUYvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0NDk1OA==", "bodyText": "Can we clean up this line-wrapping?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544544958", "createdAt": "2020-12-16T18:56:46Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "diffHunk": "@@ -215,7 +225,8 @@ private AlertNotificationModel toModel(NotificationEntity entity) {\n                                      .flatMap(ConfigurationFieldModel::getFieldValue)\n                                      .orElse(providerConfigName);\n         }\n-        return new AlertNotificationModel(entity.getId(), providerConfigId, entity.getProvider(), providerConfigName, entity.getNotificationType(), entity.getContent(), entity.getCreatedAt(), entity.getProviderCreationTime());\n+        return new AlertNotificationModel(entity.getId(), providerConfigId, entity.getProvider(), providerConfigName, entity.getNotificationType(), entity.getContent(), entity.getCreatedAt(), entity.getProviderCreationTime(),\n+            entity.getProcessed());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4a66de782530ec919bb8840d01fba70acad7f0"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjAyMDc3OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/notification/NotificationContentRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowMDo1NlrOIHUkGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowMDo1NlrOIHUkGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU0Nzg2Nw==", "bodyText": "We might be able to do this without a custom query:\nhttps://docs.spring.io/spring-data/jpa/docs/current/reference/html/#jpa.query-methods.query-creation\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Query(value = \"SELECT entity FROM NotificationEntity entity WHERE entity.processed = false\")\n          \n          \n            \n                Page<NotificationEntity> findNotProcessedNotifications(Pageable pageable);\n          \n          \n            \n                Page<NotificationEntity> findByProcessedFalse(Pageable pageable);", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544547867", "createdAt": "2020-12-16T19:00:56Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/notification/NotificationContentRepository.java", "diffHunk": "@@ -84,4 +82,6 @@\n                        + \")\")\n     Page<NotificationEntity> findMatchingSentNotification(@Param(\"searchTerm\") String searchTerm, Pageable pageable);\n \n+    @Query(value = \"SELECT entity FROM NotificationEntity entity WHERE entity.processed = false\")\n+    Page<NotificationEntity> findNotProcessedNotifications(Pageable pageable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4a66de782530ec919bb8840d01fba70acad7f0"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjAzOTYzOnYy", "diffSide": "RIGHT", "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowNTo0OFrOIHUvaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowNTo0OFrOIHUvaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU1MDc2MA==", "bodyText": "Rather than nesting all of the logic inside of this if-statement, can we negate this condition and use the code from the else here? Then return to short-circuit.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544550760", "createdAt": "2020-12-16T19:05:48Z", "author": {"login": "gkillough"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,44 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4a66de782530ec919bb8840d01fba70acad7f0"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjA1MDc3OnYy", "diffSide": "RIGHT", "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowODoyOVrOIHU1_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTowODoyOVrOIHU1_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU1MjQ0NA==", "bodyText": "Can we clean up this line-wrapping?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544552444", "createdAt": "2020-12-16T19:08:29Z", "author": {"login": "gkillough"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,44 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n             logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n-            List<DistributionEvent> distributionEvents = notificationProcessor.processNotifications(FrequencyType.REAL_TIME, notifications);\n-            logger.info(\"Sending {} events for notifications.\", distributionEvents.size());\n-            eventManager.sendEvents(distributionEvents);\n+            logger.info(\"Processing event for notifications.\");\n+\n+            int numPagesProcessed = 0;\n+\n+            AlertPagedModel<AlertNotificationModel> pageOfAlertNotificationModels = notificationAccessor.getFirstPageOfNotificationsNotProcessed();\n+            //TODO: Once we create a way of handling channel events in parallel, we can remove the MAX_NUMBER_PAGES_PROCESSED.\n+            while (!CollectionUtils.isEmpty(pageOfAlertNotificationModels.getModels()) && numPagesProcessed < MAX_NUMBER_PAGES_PROCESSED) {\n+                List<AlertNotificationModel> notifications = pageOfAlertNotificationModels.getModels();\n+                logger.info(\"Sending {} notifications.\", notifications.size());\n+                List<DistributionEvent> distributionEvents = notificationProcessor.processNotifications(FrequencyType.REAL_TIME, notifications);\n+                logger.info(\"Sending {} events for notifications.\", distributionEvents.size());\n+                eventManager.sendEvents(distributionEvents);\n+                notificationAccessor.setNotificationsProcessed(notifications);\n+                numPagesProcessed++;\n+                pageOfAlertNotificationModels = notificationAccessor.getFirstPageOfNotificationsNotProcessed();\n+                logger.trace(\"Processing Page: {}. New pages found: {}\", numPagesProcessed,\n+                    pageOfAlertNotificationModels.getTotalPages());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4a66de782530ec919bb8840d01fba70acad7f0"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjIyNDc3OnYy", "diffSide": "RIGHT", "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo1MDo1MVrOIHWchg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoxNDoyOFrOIHXUvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3ODY5NA==", "bodyText": "Why are we getting a paged result and verifying that we process a specific separate number? Wouldn't we want to get the paged result and simply process all of them?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544578694", "createdAt": "2020-12-16T19:50:51Z", "author": {"login": "bamandel"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,46 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n-            logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (!NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n+            logger.warn(\"Received an event of type '{}', but this listener is for type '{}'.\", event.getDestination(), NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE);\n+            return;\n+        }\n+        logger.debug(\"Event {}\", event);\n+        logger.info(\"Processing event for notifications.\");\n+\n+        int numPagesProcessed = 0;\n+        int pageSize = 100;\n+\n+        AlertPagedModel<AlertNotificationModel> pageOfAlertNotificationModels = notificationAccessor.getFirstPageOfNotificationsNotProcessed(pageSize);\n+        //TODO: Once we create a way of handling channel events in parallel, we can remove the MAX_NUMBER_PAGES_PROCESSED.\n+        while (!CollectionUtils.isEmpty(pageOfAlertNotificationModels.getModels()) && numPagesProcessed < MAX_NUMBER_PAGES_PROCESSED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4NzU1OQ==", "bodyText": "There is a possibility where a customer can have a constant stream of notifications. We have a limitation right now Paulo and I discovered getting addressed in IALERT-2116. Right now, we must wait until it finishes any pages that are in the queue before it actually sends the event to the channels. Because of this we are putting in a hard upper limit so that at some point, even if it takes a long time, it will still send the messages to the channels.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544587559", "createdAt": "2020-12-16T20:05:25Z", "author": {"login": "ChomickiM"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,46 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n-            logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (!NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n+            logger.warn(\"Received an event of type '{}', but this listener is for type '{}'.\", event.getDestination(), NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE);\n+            return;\n+        }\n+        logger.debug(\"Event {}\", event);\n+        logger.info(\"Processing event for notifications.\");\n+\n+        int numPagesProcessed = 0;\n+        int pageSize = 100;\n+\n+        AlertPagedModel<AlertNotificationModel> pageOfAlertNotificationModels = notificationAccessor.getFirstPageOfNotificationsNotProcessed(pageSize);\n+        //TODO: Once we create a way of handling channel events in parallel, we can remove the MAX_NUMBER_PAGES_PROCESSED.\n+        while (!CollectionUtils.isEmpty(pageOfAlertNotificationModels.getModels()) && numPagesProcessed < MAX_NUMBER_PAGES_PROCESSED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3ODY5NA=="}, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4OTU1MA==", "bodyText": "I guess my next question is the page is 100 items and the max number is 100. Why are these the same?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544589550", "createdAt": "2020-12-16T20:08:42Z", "author": {"login": "bamandel"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,46 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n-            logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (!NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n+            logger.warn(\"Received an event of type '{}', but this listener is for type '{}'.\", event.getDestination(), NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE);\n+            return;\n+        }\n+        logger.debug(\"Event {}\", event);\n+        logger.info(\"Processing event for notifications.\");\n+\n+        int numPagesProcessed = 0;\n+        int pageSize = 100;\n+\n+        AlertPagedModel<AlertNotificationModel> pageOfAlertNotificationModels = notificationAccessor.getFirstPageOfNotificationsNotProcessed(pageSize);\n+        //TODO: Once we create a way of handling channel events in parallel, we can remove the MAX_NUMBER_PAGES_PROCESSED.\n+        while (!CollectionUtils.isEmpty(pageOfAlertNotificationModels.getModels()) && numPagesProcessed < MAX_NUMBER_PAGES_PROCESSED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3ODY5NA=="}, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5MzA4NQ==", "bodyText": "Admittedly the numbers are fairly arbitrary, this setup would allow us to do 10,000 notifications. So each page can have up to 100 notifications, and we would process 100 pages before we would kick out of the loop and allow the notifications to be sent to the channels. With the setup once the next notification is picked up by the accumulator, the receiver would wake up again and continue processing where it left off.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544593085", "createdAt": "2020-12-16T20:14:28Z", "author": {"login": "ChomickiM"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,46 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n-            logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (!NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n+            logger.warn(\"Received an event of type '{}', but this listener is for type '{}'.\", event.getDestination(), NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE);\n+            return;\n+        }\n+        logger.debug(\"Event {}\", event);\n+        logger.info(\"Processing event for notifications.\");\n+\n+        int numPagesProcessed = 0;\n+        int pageSize = 100;\n+\n+        AlertPagedModel<AlertNotificationModel> pageOfAlertNotificationModels = notificationAccessor.getFirstPageOfNotificationsNotProcessed(pageSize);\n+        //TODO: Once we create a way of handling channel events in parallel, we can remove the MAX_NUMBER_PAGES_PROCESSED.\n+        while (!CollectionUtils.isEmpty(pageOfAlertNotificationModels.getModels()) && numPagesProcessed < MAX_NUMBER_PAGES_PROCESSED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU3ODY5NA=="}, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjI0Njk0OnYy", "diffSide": "RIGHT", "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxOTo1NjoyMVrOIHWpww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDoxMDo0OVrOIHXLzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4MjA4Mw==", "bodyText": "Is this a valid concern? Shouldn't this receiver be setup to only run when this event type is being processed?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544582083", "createdAt": "2020-12-16T19:56:21Z", "author": {"login": "bamandel"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,46 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n-            logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (!NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n+            logger.warn(\"Received an event of type '{}', but this listener is for type '{}'.\", event.getDestination(), NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE);\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU5MDc5Ng==", "bodyText": "This was refactored as part of Gavin's earlier suggestion. Looking into it I'm not entirely sure if it would be possible in this setup for the message to go to the wrong place since its the only consumer of NotificationReceivedEvent. In the event there were multiple consumers I believe then it would be a concern but I'm not too sure, I would need to investigate how JMS would handle that. If others think its no longer relevant then I can remove this.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544590796", "createdAt": "2020-12-16T20:10:49Z", "author": {"login": "ChomickiM"}, "path": "workflow/src/main/java/com/synopsys/integration/alert/workflow/message/NotificationReceiver.java", "diffHunk": "@@ -51,32 +54,46 @@\n \n     @Autowired\n     public NotificationReceiver(Gson gson, NotificationAccessor notificationAccessor, NotificationProcessor notificationProcessor, ChannelEventManager eventManager) {\n-        super(gson, NotificationEvent.class);\n+        super(gson, NotificationReceivedEvent.class);\n         this.notificationAccessor = notificationAccessor;\n         this.notificationProcessor = notificationProcessor;\n         this.eventManager = eventManager;\n     }\n \n     @Override\n-    public void handleEvent(NotificationEvent event) {\n-        if (NotificationEvent.NOTIFICATION_EVENT_TYPE.equals(event.getDestination())) {\n-            if (null == event.getNotificationIds() || event.getNotificationIds().isEmpty()) {\n-                logger.warn(\"Can not process a notification event without notification Id's.\");\n-                return;\n-            }\n-            logger.debug(\"Event {}\", event);\n-            logger.info(\"Processing event for {} notifications.\", event.getNotificationIds().size());\n-            List<AlertNotificationModel> notifications = notificationAccessor.findByIds(event.getNotificationIds());\n+    public void handleEvent(NotificationReceivedEvent event) {\n+        if (!NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE.equals(event.getDestination())) {\n+            logger.warn(\"Received an event of type '{}', but this listener is for type '{}'.\", event.getDestination(), NotificationReceivedEvent.NOTIFICATION_RECEIVED_EVENT_TYPE);\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4MjA4Mw=="}, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyMjI2MjA1OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/notification/NotificationEntity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDowMDowNVrOIHWy4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQyMDowMDowNVrOIHWy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDU4NDQxOQ==", "bodyText": "This method name confused me in another file, we should change the name as setProcessed implies a simple setter where as we are explicitly setting this to true. Something as simple as setProcessedToTrue() would be easier to understand when reading the method elsewhere.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r544584419", "createdAt": "2020-12-16T20:00:05Z", "author": {"login": "bamandel"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/notification/NotificationEntity.java", "diffHunk": "@@ -121,6 +125,14 @@ public OffsetDateTime getProviderCreationTime() {\n         return providerCreationTime;\n     }\n \n+    public boolean getProcessed() {\n+        return processed;\n+    }\n+\n+    public void setProcessed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2a0b6b6450f6182cf85dd15ed1612c8cd85ec38"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQyNTczNzE2OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzoxODozOVrOIH1OZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxMzoxODozOVrOIH1OZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTA4Mjk4Mg==", "bodyText": "This wrapping is also a little funky.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1295#discussion_r545082982", "createdAt": "2020-12-17T13:18:39Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultNotificationAccessor.java", "diffHunk": "@@ -65,16 +64,14 @@\n     private final AuditEntryRepository auditEntryRepository;\n     private final AuditNotificationRepository auditNotificationRepository;\n     private final ConfigurationAccessor configurationAccessor;\n-    private final EventManager eventManager;\n \n     @Autowired\n     public DefaultNotificationAccessor(NotificationContentRepository notificationContentRepository, AuditEntryRepository auditEntryRepository, AuditNotificationRepository auditNotificationRepository,\n-        ConfigurationAccessor configurationAccessor, EventManager eventManager) {\n+        ConfigurationAccessor configurationAccessor) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "692fc00bb039cf2ecfe9acfcbf76808dd7ae436f"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2256, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}