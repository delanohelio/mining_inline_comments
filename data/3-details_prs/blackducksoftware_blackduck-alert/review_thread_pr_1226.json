{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MjU3MzY1", "number": 1226, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1NDoyNlrOEuIVaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOToxMzoyNVrOEuIu-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODA2NTA1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1NDoyNlrOHiVt4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1NDoyNlrOHiVt4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc2OTQ0Mw==", "bodyText": "FWIW, this controller will not have a \"read all\" type action when I'm done with implementing paging, so these changes will be instantly reverted. I'm thinking that CompositeResourceActions should not include readAll, because more and more things will soon incorporate paging.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r505769443", "createdAt": "2020-10-15T18:54:26Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -41,13 +41,14 @@\n import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.MultiJobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n \n-public abstract class AbstractJobResourceActions implements JobResourceActions, ReadAllAction<MultiJobFieldModel>, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+public abstract class AbstractJobResourceActions implements CompositeResourceActions<JobFieldModel, UUID> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODA3MzI1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/MultiFieldModel.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxODo1Njo0M1rOHiVy9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjowMToyNVrOHnK1qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MDc0Mg==", "bodyText": "I'm shocked to see a final here.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r505770742", "createdAt": "2020-10-15T18:56:43Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/MultiFieldModel.java", "diffHunk": "@@ -24,14 +24,13 @@\n \n import java.util.List;\n \n-public class MultiFieldModel extends AlertSerializableModel {\n-    private List<FieldModel> fieldModels;\n-\n-    public MultiFieldModel(List<FieldModel> fieldModels) {\n-        this.fieldModels = fieldModels;\n+public class MultiFieldModel extends MultiResponseModel<FieldModel> {\n+    public MultiFieldModel(final List<FieldModel> models) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MTM0Mw==", "bodyText": "Why constructors, but not elsewhere? That seems inconsistent with the libraries which definitely modify things like headers and requestBodies in constructors.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r505771343", "createdAt": "2020-10-15T18:57:43Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/MultiFieldModel.java", "diffHunk": "@@ -24,14 +24,13 @@\n \n import java.util.List;\n \n-public class MultiFieldModel extends AlertSerializableModel {\n-    private List<FieldModel> fieldModels;\n-\n-    public MultiFieldModel(List<FieldModel> fieldModels) {\n-        this.fieldModels = fieldModels;\n+public class MultiFieldModel extends MultiResponseModel<FieldModel> {\n+    public MultiFieldModel(final List<FieldModel> models) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MDc0Mg=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDA4OQ==", "bodyText": "I can address the final, but I don't understand the comment about the constructors, I'll follow up with you.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510834089", "createdAt": "2020-10-23T12:01:25Z", "author": {"login": "ekerwin"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/MultiFieldModel.java", "diffHunk": "@@ -24,14 +24,13 @@\n \n import java.util.List;\n \n-public class MultiFieldModel extends AlertSerializableModel {\n-    private List<FieldModel> fieldModels;\n-\n-    public MultiFieldModel(List<FieldModel> fieldModels) {\n-        this.fieldModels = fieldModels;\n+public class MultiFieldModel extends MultiResponseModel<FieldModel> {\n+    public MultiFieldModel(final List<FieldModel> models) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3MDc0Mg=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODA5MzY2OnYy", "diffSide": "RIGHT", "path": "component/src/main/java/com/synopsys/integration/alert/component/users/web/role/RoleActions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowMjo0MVrOHiV_uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjowMzowNlrOHnK47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NDAxMQ==", "bodyText": "I think it would be more clear if the method name included the result. e.g. convertDatabaseModelToRestModel or something along those lines.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r505774011", "createdAt": "2020-10-15T19:02:41Z", "author": {"login": "gkillough"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/users/web/role/RoleActions.java", "diffHunk": "@@ -113,21 +112,21 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n     }\n \n     @Override\n-    protected ActionResponse<MultiRolePermissionModel> readAllWithoutChecks() {\n-        List<RolePermissionModel> roles = roleAccessor.getRoles().stream()\n-                                              .map(this::convertUserRoleModel)\n-                                              .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, new MultiRolePermissionModel(roles));\n+    protected List<UserRoleModel> getDatabaseModels() {\n+        return new ArrayList<>(roleAccessor.getRoles());\n     }\n \n     @Override\n-    protected ActionResponse<RolePermissionModel> readWithoutChecks(Long id) {\n-        Optional<RolePermissionModel> role = findExisting(id);\n-        if (role.isPresent()) {\n-            return new ActionResponse<>(HttpStatus.OK, role.get());\n-        }\n-        //This is covered by the findExistingCheck in AbstractResourceActions. TODO for 6.4.0\n-        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Role with id:%d not found.\", id));\n+    protected MultiRolePermissionModel createMultiResponseModel(final List<RolePermissionModel> roles) {\n+        return new MultiRolePermissionModel(roles);\n+    }\n+\n+    @Override\n+    protected RolePermissionModel convertDatabaseModel(UserRoleModel userRoleModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNDkyNA==", "bodyText": "Righto.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510834924", "createdAt": "2020-10-23T12:03:06Z", "author": {"login": "ekerwin"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/users/web/role/RoleActions.java", "diffHunk": "@@ -113,21 +112,21 @@ public RoleActions(UserManagementDescriptorKey userManagementDescriptorKey, Role\n     }\n \n     @Override\n-    protected ActionResponse<MultiRolePermissionModel> readAllWithoutChecks() {\n-        List<RolePermissionModel> roles = roleAccessor.getRoles().stream()\n-                                              .map(this::convertUserRoleModel)\n-                                              .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, new MultiRolePermissionModel(roles));\n+    protected List<UserRoleModel> getDatabaseModels() {\n+        return new ArrayList<>(roleAccessor.getRoles());\n     }\n \n     @Override\n-    protected ActionResponse<RolePermissionModel> readWithoutChecks(Long id) {\n-        Optional<RolePermissionModel> role = findExisting(id);\n-        if (role.isPresent()) {\n-            return new ActionResponse<>(HttpStatus.OK, role.get());\n-        }\n-        //This is covered by the findExistingCheck in AbstractResourceActions. TODO for 6.4.0\n-        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Role with id:%d not found.\", id));\n+    protected MultiRolePermissionModel createMultiResponseModel(final List<RolePermissionModel> roles) {\n+        return new MultiRolePermissionModel(roles);\n+    }\n+\n+    @Override\n+    protected RolePermissionModel convertDatabaseModel(UserRoleModel userRoleModel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NDAxMQ=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODExNTU5OnYy", "diffSide": "RIGHT", "path": "component/src/main/java/com/synopsys/integration/alert/component/certificates/web/CertificateActions.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOTowOToxMlrOHiWNHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QxMjozMTo1MFrOHnL1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NzQzOA==", "bodyText": "Again, I feel like this method name only chooses to tell one half of the story. Why not convertToRestModel? It's also true, but incomplete.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r505777438", "createdAt": "2020-10-15T19:09:12Z", "author": {"login": "gkillough"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/certificates/web/CertificateActions.java", "diffHunk": "@@ -69,25 +69,23 @@ public CertificateActions(CertificatesDescriptorKey descriptorKey, Authorization\n     @Override\n     protected Optional<CertificateModel> findExisting(Long id) {\n         return certificateAccessor.getCertificate(id)\n-                   .map(this::convertFromDatabaseModel);\n+                   .map(this::convertDatabaseModel);\n     }\n \n     @Override\n-    public ActionResponse<MultiCertificateModel> readAllWithoutChecks() {\n-        List<CertificateModel> certificates = certificateAccessor.getCertificates().stream()\n-                                                  .map(this::convertFromDatabaseModel)\n-                                                  .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, new MultiCertificateModel(certificates));\n+    protected List<CustomCertificateModel> getDatabaseModels() {\n+        return certificateAccessor.getCertificates();\n     }\n \n     @Override\n-    protected ActionResponse<CertificateModel> readWithoutChecks(Long id) {\n-        Optional<CertificateModel> model = findExisting(id);\n-        if (model.isPresent()) {\n-            return new ActionResponse<>(HttpStatus.OK, model.get());\n-        }\n+    protected MultiCertificateModel createMultiResponseModel(final List<CertificateModel> certificates) {\n+        return new MultiCertificateModel(certificates);\n+    }\n \n-        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Certificate with id:%d not found.\", id));\n+    @Override\n+    protected CertificateModel convertDatabaseModel(CustomCertificateModel databaseCertificateModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNTQ3OQ==", "bodyText": "It might have been easier to critique the method name in the base class so you only had to do it once.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510835479", "createdAt": "2020-10-23T12:04:05Z", "author": {"login": "ekerwin"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/certificates/web/CertificateActions.java", "diffHunk": "@@ -69,25 +69,23 @@ public CertificateActions(CertificatesDescriptorKey descriptorKey, Authorization\n     @Override\n     protected Optional<CertificateModel> findExisting(Long id) {\n         return certificateAccessor.getCertificate(id)\n-                   .map(this::convertFromDatabaseModel);\n+                   .map(this::convertDatabaseModel);\n     }\n \n     @Override\n-    public ActionResponse<MultiCertificateModel> readAllWithoutChecks() {\n-        List<CertificateModel> certificates = certificateAccessor.getCertificates().stream()\n-                                                  .map(this::convertFromDatabaseModel)\n-                                                  .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, new MultiCertificateModel(certificates));\n+    protected List<CustomCertificateModel> getDatabaseModels() {\n+        return certificateAccessor.getCertificates();\n     }\n \n     @Override\n-    protected ActionResponse<CertificateModel> readWithoutChecks(Long id) {\n-        Optional<CertificateModel> model = findExisting(id);\n-        if (model.isPresent()) {\n-            return new ActionResponse<>(HttpStatus.OK, model.get());\n-        }\n+    protected MultiCertificateModel createMultiResponseModel(final List<CertificateModel> certificates) {\n+        return new MultiCertificateModel(certificates);\n+    }\n \n-        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Certificate with id:%d not found.\", id));\n+    @Override\n+    protected CertificateModel convertDatabaseModel(CustomCertificateModel databaseCertificateModel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NzQzOA=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg1MDM1Ng==", "bodyText": "My mistake.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510850356", "createdAt": "2020-10-23T12:31:50Z", "author": {"login": "gkillough"}, "path": "component/src/main/java/com/synopsys/integration/alert/component/certificates/web/CertificateActions.java", "diffHunk": "@@ -69,25 +69,23 @@ public CertificateActions(CertificatesDescriptorKey descriptorKey, Authorization\n     @Override\n     protected Optional<CertificateModel> findExisting(Long id) {\n         return certificateAccessor.getCertificate(id)\n-                   .map(this::convertFromDatabaseModel);\n+                   .map(this::convertDatabaseModel);\n     }\n \n     @Override\n-    public ActionResponse<MultiCertificateModel> readAllWithoutChecks() {\n-        List<CertificateModel> certificates = certificateAccessor.getCertificates().stream()\n-                                                  .map(this::convertFromDatabaseModel)\n-                                                  .collect(Collectors.toList());\n-        return new ActionResponse<>(HttpStatus.OK, new MultiCertificateModel(certificates));\n+    protected List<CustomCertificateModel> getDatabaseModels() {\n+        return certificateAccessor.getCertificates();\n     }\n \n     @Override\n-    protected ActionResponse<CertificateModel> readWithoutChecks(Long id) {\n-        Optional<CertificateModel> model = findExisting(id);\n-        if (model.isPresent()) {\n-            return new ActionResponse<>(HttpStatus.OK, model.get());\n-        }\n+    protected MultiCertificateModel createMultiResponseModel(final List<CertificateModel> certificates) {\n+        return new MultiCertificateModel(certificates);\n+    }\n \n-        return new ActionResponse<>(HttpStatus.NOT_FOUND, String.format(\"Certificate with id:%d not found.\", id));\n+    @Override\n+    protected CertificateModel convertDatabaseModel(CustomCertificateModel databaseCertificateModel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3NzQzOA=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2ODEzMDQ4OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxOToxMzoyNVrOHiWV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxOTozNzo1M1rOHpNo-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTcwOA==", "bodyText": "Can we use the word \"retrieve\" or \"read\" rather than \"get\"? The \"get\" method-prefix in Java is a ubiquitous convention for accessing fields of a class, so it's nice to make a distinction.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r505779708", "createdAt": "2020-10-15T19:13:25Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -49,16 +54,17 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n         this.context = context;\n         // to do change the authorization manager to use the context enum and the descriptor key\n         this.authorizationManager = authorizationManager;\n-\n     }\n \n     protected abstract ActionResponse<T> createWithoutChecks(T resource);\n \n     protected abstract ActionResponse<T> deleteWithoutChecks(Long id);\n \n-    protected abstract ActionResponse<M> readAllWithoutChecks();\n+    protected abstract List<D> getDatabaseModels();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNjI2OQ==", "bodyText": "Do you want to apply the same level of precision to the accessors? I went off of their method convention of using 'get'.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510836269", "createdAt": "2020-10-23T12:05:23Z", "author": {"login": "ekerwin"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -49,16 +54,17 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n         this.context = context;\n         // to do change the authorization manager to use the context enum and the descriptor key\n         this.authorizationManager = authorizationManager;\n-\n     }\n \n     protected abstract ActionResponse<T> createWithoutChecks(T resource);\n \n     protected abstract ActionResponse<T> deleteWithoutChecks(Long id);\n \n-    protected abstract ActionResponse<M> readAllWithoutChecks();\n+    protected abstract List<D> getDatabaseModels();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTcwOA=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDgzNjc4Mg==", "bodyText": "I'd argue that consistency is the better part of valor here - so if you object to 'get' as a prefix for non-trivial methods, we should alter the api of the accessors, or just leave the 'get' prefix alone.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510836782", "createdAt": "2020-10-23T12:06:24Z", "author": {"login": "ekerwin"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -49,16 +54,17 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n         this.context = context;\n         // to do change the authorization manager to use the context enum and the descriptor key\n         this.authorizationManager = authorizationManager;\n-\n     }\n \n     protected abstract ActionResponse<T> createWithoutChecks(T resource);\n \n     protected abstract ActionResponse<T> deleteWithoutChecks(Long id);\n \n-    protected abstract ActionResponse<M> readAllWithoutChecks();\n+    protected abstract List<D> getDatabaseModels();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTcwOA=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDg0OTg1Mw==", "bodyText": "I was thinking about this with the accessors while modifying them recently and I agree that their prefixes should also change. We can lay one good brick with the actions right now and when the accessors aren't in such a high state of flux, we can refactor those as well.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r510849853", "createdAt": "2020-10-23T12:30:55Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -49,16 +54,17 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n         this.context = context;\n         // to do change the authorization manager to use the context enum and the descriptor key\n         this.authorizationManager = authorizationManager;\n-\n     }\n \n     protected abstract ActionResponse<T> createWithoutChecks(T resource);\n \n     protected abstract ActionResponse<T> deleteWithoutChecks(Long id);\n \n-    protected abstract ActionResponse<M> readAllWithoutChecks();\n+    protected abstract List<D> getDatabaseModels();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTcwOA=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjk3NzE0Ng==", "bodyText": "Well phrased. :)", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1226#discussion_r512977146", "createdAt": "2020-10-27T19:37:53Z", "author": {"login": "ekerwin"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractResourceActions.java", "diffHunk": "@@ -49,16 +54,17 @@ public AbstractResourceActions(DescriptorKey descriptorKey, ConfigContextEnum co\n         this.context = context;\n         // to do change the authorization manager to use the context enum and the descriptor key\n         this.authorizationManager = authorizationManager;\n-\n     }\n \n     protected abstract ActionResponse<T> createWithoutChecks(T resource);\n \n     protected abstract ActionResponse<T> deleteWithoutChecks(Long id);\n \n-    protected abstract ActionResponse<M> readAllWithoutChecks();\n+    protected abstract List<D> getDatabaseModels();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTc3OTcwOA=="}, "originalCommit": {"oid": "ae69590f2de70f3b9dc8cb1c2787181663fe4d49"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2315, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}