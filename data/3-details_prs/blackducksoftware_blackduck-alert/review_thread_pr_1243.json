{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2MzQyOTE3", "number": 1243, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNDowMFrOE12LIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyMDo0NVrOE12dEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODk3NTY5OnYy", "diffSide": "RIGHT", "path": "component/src/test/java/com/synopsys/integration/alert/component/authentication/web/SamlMetadataFileUploadTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNDowMFrOHuWrEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNDowMFrOHuWrEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2ODAxNg==", "bodyText": "We cannot use Mockito .any() here because it clashes with the deprecated String version of the method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1243#discussion_r518368016", "createdAt": "2020-11-05T21:14:00Z", "author": {"login": "JakeMathews"}, "path": "component/src/test/java/com/synopsys/integration/alert/component/authentication/web/SamlMetadataFileUploadTest.java", "diffHunk": "@@ -51,7 +53,7 @@ public void cleanResource() throws Exception {\n     @Test\n     public void performUpload() {\n         SamlMetaDataFileUpload action = new SamlMetaDataFileUpload(descriptorKey, authorizationManager, filePersistenceUtil);\n-        Mockito.when(authorizationManager.hasUploadWritePermission(Mockito.anyString(), Mockito.anyString())).thenReturn(Boolean.TRUE);\n+        Mockito.when(authorizationManager.hasUploadWritePermission(Mockito.any(ConfigContextEnum.class), Mockito.any(DescriptorKey.class))).thenReturn(Boolean.TRUE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc39a353bac50f73bed1518ae6720987d7f936ea"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0ODk4NTkzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/component/users/web/role/RoleActionsTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNTozNlrOHuWxMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToxNTozNlrOHuWxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM2OTU4Nw==", "bodyText": "I added mocks for both methods here since the class being tested could call the deprecated methods. I was thinking of changing the mock to throw an exception when the deprecated methods are called. Thoughts?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1243#discussion_r518369587", "createdAt": "2020-11-05T21:15:36Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/alert/component/users/web/role/RoleActionsTest.java", "diffHunk": "@@ -44,11 +45,17 @@ public void init() {\n         roleAccessor = Mockito.mock(RoleAccessor.class);\n         descriptorKey = createDescriptorKey(\"descriptorKey-test\");\n \n-        Mockito.when(authorizationManager.hasCreatePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n-        Mockito.when(authorizationManager.hasReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n-        Mockito.when(authorizationManager.hasDeletePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n-        Mockito.when(authorizationManager.hasExecutePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n-        Mockito.when(authorizationManager.hasWritePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasCreatePermission(Mockito.any(ConfigContextEnum.class), Mockito.any(DescriptorKey.class))).thenReturn(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc39a353bac50f73bed1518ae6720987d7f936ea"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0OTAyMTYzOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/FieldModel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyMDo0NVrOHuXHhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQyMToyMDo0NVrOHuXHhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODM3NTMwMA==", "bodyText": "Some FieldModels are built using the ConfigContextEnum and DescriptorKey classes, but other FieldModel instantiations are from String sources. I can go through and attempt to convert most FieldModel instantiations to use ConfigContextEnum and DescriptorKey classes, but would need some help in the tricky spots.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1243#discussion_r518375300", "createdAt": "2020-11-05T21:20:45Z", "author": {"login": "JakeMathews"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/model/FieldModel.java", "diffHunk": "@@ -30,6 +30,7 @@\n \n public class FieldModel extends Config {\n     private Map<String, FieldValueModel> keyToValues;\n+    // TODO DescriptorKey and a ConfigContextEnum should be available instead of Strings", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc39a353bac50f73bed1518ae6720987d7f936ea"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2345, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}