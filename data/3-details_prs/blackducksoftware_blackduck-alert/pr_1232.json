{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwOTIyMzc3", "number": 1232, "title": "Increase test coverage for JobConfigActions and JobConfigControllers", "bodyText": "", "createdAt": "2020-10-27T17:12:21Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232", "merged": true, "mergeCommit": {"oid": "ede1339183d20b0d191f728deafeb1925492ef7e"}, "closed": true, "closedAt": "2020-10-28T14:08:46Z", "author": {"login": "ChomickiM"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdUdAo-AH2gAyNTEwOTIyMzc3OjdlYWI0MzdmMzAwZDcyYjM1NWFiYWJlZTkxOWU2NjlmYjA5ODliYWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdW9u2WgH2gAyNTEwOTIyMzc3OjdjMGIzYzlkZTBiMzhkZWMwMTJiMDg2YWY4NTRkYzJlMmQ1NmQ4YWY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7eab437f300d72b355ababee919e669fb0989baa", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7eab437f300d72b355ababee919e669fb0989baa", "committedDate": "2020-10-20T18:23:40Z", "message": "test: Move JobConfigControllerTestIT and improve coverage for JobConfigActionsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9b428d89ecffc3476971a0864bd0e0d07970b89", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b9b428d89ecffc3476971a0864bd0e0d07970b89", "committedDate": "2020-10-21T17:07:57Z", "message": "test: Add delete tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9327c865df18e4a3131074017d97a5dbf34f628b", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9327c865df18e4a3131074017d97a5dbf34f628b", "committedDate": "2020-10-21T17:09:09Z", "message": "Merge branch 'master' into mc_job_config_tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8d8b19ee1a846a3ac6668b02cec7aa43d467c2d", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e8d8b19ee1a846a3ac6668b02cec7aa43d467c2d", "committedDate": "2020-10-26T17:43:17Z", "message": "test: Increase test coverage for JobConfigActions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f08718cb1188ce953cbf10363148b3557b9090c0", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f08718cb1188ce953cbf10363148b3557b9090c0", "committedDate": "2020-10-26T17:45:39Z", "message": "refactor: remove unused blank string check from JobConfigActions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9cd7434ba1c2c2b26b7a3b7575f6e768809472ed", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9cd7434ba1c2c2b26b7a3b7575f6e768809472ed", "committedDate": "2020-10-27T13:34:14Z", "message": "test: Remove extra validation from JobConfigController integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a96491cc92fdb8782c0f093f089d01003a468429", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a96491cc92fdb8782c0f093f089d01003a468429", "committedDate": "2020-10-27T13:35:01Z", "message": "Merge branch 'master' into mc_job_config_tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/26120398141d6d629c383682c9d2d7713b970d2d", "committedDate": "2020-10-27T15:54:59Z", "message": "test: Remove outdated test in JobConfigControllerTestIT and update jobAccessor mocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTYyNzM3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517962737", "createdAt": "2020-10-27T17:22:17Z", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMjoxN1rOHpH0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyMjoxN1rOHpH0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4MTc5Mw==", "bodyText": "This should index from zero for the back-end.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#discussion_r512881793", "createdAt": "2020-10-27T17:22:17Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigControllerTestIT.java", "diffHunk": "@@ -84,27 +71,16 @@ public void setup() {\n \n     @Test\n     @WithMockUser(roles = AlertIntegrationTest.ROLE_ALERT_ADMIN)\n-    // FIXME replace with paged request equivalent\n-    @Ignore\n-    public void testGetConfig() throws Exception {\n-        ConfigurationJobModel emptyConfigurationModel = addJob(slackChannelKey.getUniversalKey(), blackDuckProviderKey.getUniversalKey(), Map.of());\n-        String configId = String.valueOf(emptyConfigurationModel.getJobId());\n+    public void testGetPage() throws Exception {\n+        int pageNumber = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTY3Mzkw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517967390", "createdAt": "2020-10-27T17:27:17Z", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyNzoxOFrOHpIFdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyNzoxOFrOHpIFdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NjEzMg==", "bodyText": "Looks like some strange formatting here. We should keep them all one line or put them all on separate lines", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#discussion_r512886132", "createdAt": "2020-10-27T17:27:18Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "diffHunk": "@@ -0,0 +1,856 @@\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.GlobalConfigExistsValidator;\n+import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.FieldModelProcessor;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.JobIdsValidationRequestModel;\n+import com.synopsys.integration.alert.common.rest.model.JobPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.component.certificates.web.PKIXErrorResponseFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JobConfigActionsTest {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+    private ConfigurationAccessor configurationAccessor;\n+    private JobAccessor jobAccessor;\n+    private FieldModelProcessor fieldModelProcessor;\n+    private DescriptorProcessor descriptorProcessor;\n+    private ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private DescriptorMap descriptorMap;\n+\n+    @BeforeEach\n+    public void init() {\n+        authorizationManager = Mockito.mock(AuthorizationManager.class);\n+        descriptorAccessor = Mockito.mock(DescriptorAccessor.class);\n+        configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        jobAccessor = Mockito.mock(JobAccessor.class);\n+        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n+        descriptorProcessor = Mockito.mock(DescriptorProcessor.class);\n+        configurationFieldModelConverter = Mockito.mock(ConfigurationFieldModelConverter.class);\n+        globalConfigExistsValidator = Mockito.mock(GlobalConfigExistsValidator.class);\n+        pkixErrorResponseFactory = Mockito.mock(PKIXErrorResponseFactory.class);\n+        descriptorMap = Mockito.mock(DescriptorMap.class);\n+\n+        Mockito.when(authorizationManager.hasCreatePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.anyReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasWritePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasDeletePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasExecutePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+    }\n+\n+    @Test\n+    public void createTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+        FieldModel fieldModel = createFieldModel();\n+        JobFieldModel jobFieldModel = new JobFieldModel(jobId.toString(), Set.of(fieldModel));\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+        ConfigurationJobModel configurationJobModel = new ConfigurationJobModel(jobId, Set.of(createConfigurationModel()));\n+\n+        Mockito.when(fieldModelProcessor.performBeforeSaveAction(Mockito.any())).thenReturn(fieldModel);\n+        Mockito.when(configurationFieldModelConverter.convertToConfigurationFieldModelMap(Mockito.any())).thenReturn(Map.of(\"Key\", configurationFieldModel));\n+        Mockito.when(jobAccessor.createJob(Mockito.anyCollection(), Mockito.anyCollection())).thenReturn(configurationJobModel);\n+        Mockito.when(configurationFieldModelConverter.convertToFieldModel(Mockito.any())).thenReturn(fieldModel);\n+        Mockito.when(fieldModelProcessor.performAfterSaveAction(Mockito.any())).thenReturn(fieldModel);\n+\n+        JobConfigActions jobConfigActions = new JobConfigActions(authorizationManager, descriptorAccessor, configurationAccessor, jobAccessor, fieldModelProcessor, descriptorProcessor, configurationFieldModelConverter,\n+            globalConfigExistsValidator,\n+            pkixErrorResponseFactory, descriptorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "originalPosition": 111}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTY4Mzk0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517968394", "createdAt": "2020-10-27T17:28:20Z", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyODoyMFrOHpII9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyODoyMFrOHpII9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NzAyOA==", "bodyText": "Weird formatting here too.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#discussion_r512887028", "createdAt": "2020-10-27T17:28:20Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "diffHunk": "@@ -0,0 +1,856 @@\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.GlobalConfigExistsValidator;\n+import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.FieldModelProcessor;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.JobIdsValidationRequestModel;\n+import com.synopsys.integration.alert.common.rest.model.JobPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.component.certificates.web.PKIXErrorResponseFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JobConfigActionsTest {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+    private ConfigurationAccessor configurationAccessor;\n+    private JobAccessor jobAccessor;\n+    private FieldModelProcessor fieldModelProcessor;\n+    private DescriptorProcessor descriptorProcessor;\n+    private ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private DescriptorMap descriptorMap;\n+\n+    @BeforeEach\n+    public void init() {\n+        authorizationManager = Mockito.mock(AuthorizationManager.class);\n+        descriptorAccessor = Mockito.mock(DescriptorAccessor.class);\n+        configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        jobAccessor = Mockito.mock(JobAccessor.class);\n+        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n+        descriptorProcessor = Mockito.mock(DescriptorProcessor.class);\n+        configurationFieldModelConverter = Mockito.mock(ConfigurationFieldModelConverter.class);\n+        globalConfigExistsValidator = Mockito.mock(GlobalConfigExistsValidator.class);\n+        pkixErrorResponseFactory = Mockito.mock(PKIXErrorResponseFactory.class);\n+        descriptorMap = Mockito.mock(DescriptorMap.class);\n+\n+        Mockito.when(authorizationManager.hasCreatePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.anyReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasWritePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasDeletePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasExecutePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+    }\n+\n+    @Test\n+    public void createTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+        FieldModel fieldModel = createFieldModel();\n+        JobFieldModel jobFieldModel = new JobFieldModel(jobId.toString(), Set.of(fieldModel));\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+        ConfigurationJobModel configurationJobModel = new ConfigurationJobModel(jobId, Set.of(createConfigurationModel()));\n+\n+        Mockito.when(fieldModelProcessor.performBeforeSaveAction(Mockito.any())).thenReturn(fieldModel);\n+        Mockito.when(configurationFieldModelConverter.convertToConfigurationFieldModelMap(Mockito.any())).thenReturn(Map.of(\"Key\", configurationFieldModel));\n+        Mockito.when(jobAccessor.createJob(Mockito.anyCollection(), Mockito.anyCollection())).thenReturn(configurationJobModel);\n+        Mockito.when(configurationFieldModelConverter.convertToFieldModel(Mockito.any())).thenReturn(fieldModel);\n+        Mockito.when(fieldModelProcessor.performAfterSaveAction(Mockito.any())).thenReturn(fieldModel);\n+\n+        JobConfigActions jobConfigActions = new JobConfigActions(authorizationManager, descriptorAccessor, configurationAccessor, jobAccessor, fieldModelProcessor, descriptorProcessor, configurationFieldModelConverter,\n+            globalConfigExistsValidator,\n+            pkixErrorResponseFactory, descriptorMap);\n+\n+        ActionResponse<JobFieldModel> jobFieldModelActionResponse = jobConfigActions.create(jobFieldModel);\n+\n+        assertTrue(jobFieldModelActionResponse.isSuccessful());\n+        assertTrue(jobFieldModelActionResponse.hasContent());\n+        assertEquals(HttpStatus.OK, jobFieldModelActionResponse.getHttpStatus());\n+    }\n+\n+    @Test\n+    public void createServerErrorTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+        FieldModel fieldModel = createFieldModel();\n+        JobFieldModel jobFieldModel = new JobFieldModel(jobId.toString(), Set.of(fieldModel));\n+\n+        Mockito.doThrow(new AlertException(\"Exception for test\")).when(fieldModelProcessor).performBeforeSaveAction(Mockito.any());\n+\n+        JobConfigActions jobConfigActions = new JobConfigActions(authorizationManager, descriptorAccessor, configurationAccessor, jobAccessor, fieldModelProcessor, descriptorProcessor, configurationFieldModelConverter,\n+            globalConfigExistsValidator,\n+            pkixErrorResponseFactory, descriptorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "originalPosition": 130}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTY4OTE1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517968915", "createdAt": "2020-10-27T17:28:56Z", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyODo1NlrOHpIKtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzoyODo1NlrOHpIKtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg4NzQ3Ng==", "bodyText": "formatting", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#discussion_r512887476", "createdAt": "2020-10-27T17:28:56Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "diffHunk": "@@ -0,0 +1,856 @@\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.GlobalConfigExistsValidator;\n+import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.FieldModelProcessor;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.JobIdsValidationRequestModel;\n+import com.synopsys.integration.alert.common.rest.model.JobPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.component.certificates.web.PKIXErrorResponseFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JobConfigActionsTest {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+    private ConfigurationAccessor configurationAccessor;\n+    private JobAccessor jobAccessor;\n+    private FieldModelProcessor fieldModelProcessor;\n+    private DescriptorProcessor descriptorProcessor;\n+    private ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private DescriptorMap descriptorMap;\n+\n+    @BeforeEach\n+    public void init() {\n+        authorizationManager = Mockito.mock(AuthorizationManager.class);\n+        descriptorAccessor = Mockito.mock(DescriptorAccessor.class);\n+        configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        jobAccessor = Mockito.mock(JobAccessor.class);\n+        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n+        descriptorProcessor = Mockito.mock(DescriptorProcessor.class);\n+        configurationFieldModelConverter = Mockito.mock(ConfigurationFieldModelConverter.class);\n+        globalConfigExistsValidator = Mockito.mock(GlobalConfigExistsValidator.class);\n+        pkixErrorResponseFactory = Mockito.mock(PKIXErrorResponseFactory.class);\n+        descriptorMap = Mockito.mock(DescriptorMap.class);\n+\n+        Mockito.when(authorizationManager.hasCreatePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.anyReadPermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasWritePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasDeletePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+        Mockito.when(authorizationManager.hasExecutePermission(Mockito.any(), Mockito.any())).thenReturn(true);\n+    }\n+\n+    @Test\n+    public void createTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+        FieldModel fieldModel = createFieldModel();\n+        JobFieldModel jobFieldModel = new JobFieldModel(jobId.toString(), Set.of(fieldModel));\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(ProviderDescriptor.KEY_PROVIDER_CONFIG_NAME);\n+        ConfigurationJobModel configurationJobModel = new ConfigurationJobModel(jobId, Set.of(createConfigurationModel()));\n+\n+        Mockito.when(fieldModelProcessor.performBeforeSaveAction(Mockito.any())).thenReturn(fieldModel);\n+        Mockito.when(configurationFieldModelConverter.convertToConfigurationFieldModelMap(Mockito.any())).thenReturn(Map.of(\"Key\", configurationFieldModel));\n+        Mockito.when(jobAccessor.createJob(Mockito.anyCollection(), Mockito.anyCollection())).thenReturn(configurationJobModel);\n+        Mockito.when(configurationFieldModelConverter.convertToFieldModel(Mockito.any())).thenReturn(fieldModel);\n+        Mockito.when(fieldModelProcessor.performAfterSaveAction(Mockito.any())).thenReturn(fieldModel);\n+\n+        JobConfigActions jobConfigActions = new JobConfigActions(authorizationManager, descriptorAccessor, configurationAccessor, jobAccessor, fieldModelProcessor, descriptorProcessor, configurationFieldModelConverter,\n+            globalConfigExistsValidator,\n+            pkixErrorResponseFactory, descriptorMap);\n+\n+        ActionResponse<JobFieldModel> jobFieldModelActionResponse = jobConfigActions.create(jobFieldModel);\n+\n+        assertTrue(jobFieldModelActionResponse.isSuccessful());\n+        assertTrue(jobFieldModelActionResponse.hasContent());\n+        assertEquals(HttpStatus.OK, jobFieldModelActionResponse.getHttpStatus());\n+    }\n+\n+    @Test\n+    public void createServerErrorTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+        FieldModel fieldModel = createFieldModel();\n+        JobFieldModel jobFieldModel = new JobFieldModel(jobId.toString(), Set.of(fieldModel));\n+\n+        Mockito.doThrow(new AlertException(\"Exception for test\")).when(fieldModelProcessor).performBeforeSaveAction(Mockito.any());\n+\n+        JobConfigActions jobConfigActions = new JobConfigActions(authorizationManager, descriptorAccessor, configurationAccessor, jobAccessor, fieldModelProcessor, descriptorProcessor, configurationFieldModelConverter,\n+            globalConfigExistsValidator,\n+            pkixErrorResponseFactory, descriptorMap);\n+\n+        ActionResponse<JobFieldModel> jobFieldModelActionResponse = jobConfigActions.create(jobFieldModel);\n+\n+        assertTrue(jobFieldModelActionResponse.isError());\n+        assertFalse(jobFieldModelActionResponse.hasContent());\n+        assertEquals(HttpStatus.INTERNAL_SERVER_ERROR, jobFieldModelActionResponse.getHttpStatus());\n+    }\n+\n+    @Test\n+    public void getPageTest() throws Exception {\n+        int totalPages = 1;\n+        int pageNumber = 0;\n+        int pageSize = 10;\n+        DescriptorType descriptorType = DescriptorType.CHANNEL;\n+        RegisteredDescriptorModel registeredDescriptorModel = new RegisteredDescriptorModel(1L, \"descriptorName\", descriptorType.name());\n+        UUID jobId = UUID.randomUUID();\n+        FieldModel fieldModel = createFieldModel();\n+        ConfigurationJobModel configurationJobModel = new ConfigurationJobModel(jobId, Set.of(createConfigurationModel()));\n+        AlertPagedModel<ConfigurationJobModel> pageOfJobs = new AlertPagedModel(totalPages, pageNumber, pageSize, List.of(configurationJobModel));\n+\n+        Mockito.when(descriptorAccessor.getRegisteredDescriptors()).thenReturn(List.of(registeredDescriptorModel));\n+        Mockito.when(jobAccessor.getPageOfJobs(Mockito.anyInt(), Mockito.anyInt(), Mockito.anyCollection())).thenReturn(pageOfJobs);\n+        Mockito.when(configurationFieldModelConverter.convertToFieldModel(Mockito.any())).thenReturn(fieldModel);\n+\n+        JobConfigActions jobConfigActions = new JobConfigActions(authorizationManager, descriptorAccessor, configurationAccessor, jobAccessor, fieldModelProcessor, descriptorProcessor, configurationFieldModelConverter,\n+            globalConfigExistsValidator,\n+            pkixErrorResponseFactory, descriptorMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "originalPosition": 157}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTcyMDM3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517972037", "createdAt": "2020-10-27T17:32:21Z", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzozMjoyMVrOHpIWDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxNzozMjoyMVrOHpIWDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjg5MDM4Mg==", "bodyText": "It might be better to add a JobConfigAction member to this class then initialize the object here. Cut down on some duplicate code.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#discussion_r512890382", "createdAt": "2020-10-27T17:32:21Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/api/job/JobConfigActionsTest.java", "diffHunk": "@@ -0,0 +1,856 @@\n+package com.synopsys.integration.alert.web.api.job;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.descriptor.Descriptor;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorProcessor;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.GlobalConfigExistsValidator;\n+import com.synopsys.integration.alert.common.descriptor.config.field.ConfigField;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.UIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldUtility;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.FieldModelProcessor;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.JobIdsValidationRequestModel;\n+import com.synopsys.integration.alert.common.rest.model.JobPagedModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.component.certificates.web.PKIXErrorResponseFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JobConfigActionsTest {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+    private ConfigurationAccessor configurationAccessor;\n+    private JobAccessor jobAccessor;\n+    private FieldModelProcessor fieldModelProcessor;\n+    private DescriptorProcessor descriptorProcessor;\n+    private ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private DescriptorMap descriptorMap;\n+\n+    @BeforeEach\n+    public void init() {\n+        authorizationManager = Mockito.mock(AuthorizationManager.class);\n+        descriptorAccessor = Mockito.mock(DescriptorAccessor.class);\n+        configurationAccessor = Mockito.mock(ConfigurationAccessor.class);\n+        jobAccessor = Mockito.mock(JobAccessor.class);\n+        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n+        descriptorProcessor = Mockito.mock(DescriptorProcessor.class);\n+        configurationFieldModelConverter = Mockito.mock(ConfigurationFieldModelConverter.class);\n+        globalConfigExistsValidator = Mockito.mock(GlobalConfigExistsValidator.class);\n+        pkixErrorResponseFactory = Mockito.mock(PKIXErrorResponseFactory.class);\n+        descriptorMap = Mockito.mock(DescriptorMap.class);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTc1Nzg4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517975788", "createdAt": "2020-10-27T17:36:30Z", "commit": {"oid": "26120398141d6d629c383682c9d2d7713b970d2d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61a5351b1dda46a4ce261dd1d8ef0ff7a7eb5a11", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/61a5351b1dda46a4ce261dd1d8ef0ff7a7eb5a11", "committedDate": "2020-10-27T17:38:21Z", "message": "test: Change index and simplify some JobConfig tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3OTkzNTI4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-517993528", "createdAt": "2020-10-27T17:57:12Z", "commit": {"oid": "61a5351b1dda46a4ce261dd1d8ef0ff7a7eb5a11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cd5855fede6d4d4294ab51c6a57abfa4f46743f", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7cd5855fede6d4d4294ab51c6a57abfa4f46743f", "committedDate": "2020-10-27T19:10:59Z", "message": "test: Clean up some duplicate code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4MTA4NzE1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-518108715", "createdAt": "2020-10-27T20:19:48Z", "commit": {"oid": "7cd5855fede6d4d4294ab51c6a57abfa4f46743f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE4NTQ2Njk0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1232#pullrequestreview-518546694", "createdAt": "2020-10-28T11:05:52Z", "commit": {"oid": "7cd5855fede6d4d4294ab51c6a57abfa4f46743f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0cde6f85630caeadeda60020a615f4eab1e1a71", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e0cde6f85630caeadeda60020a615f4eab1e1a71", "committedDate": "2020-10-28T13:38:34Z", "message": "test: Remove unnecessary mocks from JobConfigActionsTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7c0b3c9de0b38dec012b086af854dc2e2d56d8af", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7c0b3c9de0b38dec012b086af854dc2e2d56d8af", "committedDate": "2020-10-28T13:38:57Z", "message": "Merge branch 'master' into mc_job_config_tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3029, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}