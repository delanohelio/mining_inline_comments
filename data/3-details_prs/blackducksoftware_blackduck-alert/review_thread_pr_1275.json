{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI2NjcyNzgw", "number": 1275, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODozNTowOVrOE83wLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowMzozOVrOE867xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjYzNDcwOnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODozNToxMFrOH5QIGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODozNToxMFrOH5QIGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5NTA5OA==", "bodyText": "We should be able to cut out these two steps and go more directly to the DistributionJobModel.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529795098", "createdAt": "2020-11-24T18:35:10Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessorV2;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldExtractorUtils;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldPopulationUtility;\n+import com.synopsys.integration.alert.descriptor.api.model.ProviderKey;\n+import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;\n+\n+@Component\n+public class StaticJobAccessorV2 implements JobAccessorV2 {\n+    private final DistributionJobRepository distributionJobRepository;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    private final JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility;\n+    private final RegisteredDescriptorRepository registeredDescriptorRepository;\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessorV2(\n+        DistributionJobRepository distributionJobRepository,\n+        JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility,\n+        RegisteredDescriptorRepository registeredDescriptorRepository,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.jobConfigurationModelFieldPopulationUtility = jobConfigurationModelFieldPopulationUtility;\n+        this.registeredDescriptorRepository = registeredDescriptorRepository;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DistributionJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit) {\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findAll(pageRequest).map(this::convertToDistributionJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit, String searchTerm, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageNumber, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobEntity> pageOfJobsWithDescriptorNames;\n+        if (StringUtils.isBlank(searchTerm)) {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest);\n+        } else {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNamesAndSearchTerm(descriptorsNamesToInclude, searchTerm, pageRequest);\n+        }\n+\n+        List<DistributionJobModel> configurationJobModels = pageOfJobsWithDescriptorNames.map(this::convertToDistributionJobModel).getContent();\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, configurationJobModels);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(FrequencyType frequency, Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(frequency.name(), providerConfigId, notificationType.name()));\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(providerConfigId, notificationType.name()));\n+    }\n+\n+    private List<DistributionJobModel> getMatchingEnabledJobs(Supplier<List<DistributionJobEntity>> getJobs) {\n+        // TODO change this to return a page of jobs\n+        List<DistributionJobEntity> matchingEnabledJob = getJobs.get();\n+        return matchingEnabledJob\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel createJob(Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) {\n+        return createJobWithId(null, configuredFields, DateUtils.createCurrentDateTimestamp(), null);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel updateJob(UUID jobId, Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) throws AlertDatabaseConstraintException {\n+        DistributionJobEntity jobEntity = distributionJobRepository.findById(jobId)\n+                                              .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"No job exists with the id [%s]\", jobId.toString())));\n+        OffsetDateTime createdAt = jobEntity.getCreatedAt();\n+\n+        deleteJob(jobId);\n+        return createJobWithId(jobId, configuredFields, createdAt, DateUtils.createCurrentDateTimestamp());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteJob(UUID jobId) {\n+        distributionJobRepository.deleteById(jobId);\n+    }\n+\n+    private DistributionJobModel convertToDistributionJobModel(DistributionJobEntity jobEntity) {\n+        ConfigurationJobModel configurationJobModel = convertToConfigurationJobModel(jobEntity);\n+        Map<String, ConfigurationFieldModel> fields = configurationJobModel.getFieldUtility().getFields();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e049f31b7151d5504d87e8b43e544d3a000dc739"}, "originalPosition": 183}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjYzOTAzOnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODozNjoyNlrOH5QKvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTowMDo1MlrOH5RDcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5NTc3NA==", "bodyText": "This is only used in the convertToDistributionJobModel(DistributionJobEntity jobEntity) method, and it looks like the only pieces we use from ConfigurationJobModel are the Job Id and the fields map. So why not change this method to just return the fields map, since the Job Id can be taken from the DistributionJobEntity?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529795774", "createdAt": "2020-11-24T18:36:26Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessorV2;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldExtractorUtils;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldPopulationUtility;\n+import com.synopsys.integration.alert.descriptor.api.model.ProviderKey;\n+import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;\n+\n+@Component\n+public class StaticJobAccessorV2 implements JobAccessorV2 {\n+    private final DistributionJobRepository distributionJobRepository;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    private final JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility;\n+    private final RegisteredDescriptorRepository registeredDescriptorRepository;\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessorV2(\n+        DistributionJobRepository distributionJobRepository,\n+        JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility,\n+        RegisteredDescriptorRepository registeredDescriptorRepository,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.jobConfigurationModelFieldPopulationUtility = jobConfigurationModelFieldPopulationUtility;\n+        this.registeredDescriptorRepository = registeredDescriptorRepository;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DistributionJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit) {\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findAll(pageRequest).map(this::convertToDistributionJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit, String searchTerm, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageNumber, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobEntity> pageOfJobsWithDescriptorNames;\n+        if (StringUtils.isBlank(searchTerm)) {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest);\n+        } else {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNamesAndSearchTerm(descriptorsNamesToInclude, searchTerm, pageRequest);\n+        }\n+\n+        List<DistributionJobModel> configurationJobModels = pageOfJobsWithDescriptorNames.map(this::convertToDistributionJobModel).getContent();\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, configurationJobModels);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(FrequencyType frequency, Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(frequency.name(), providerConfigId, notificationType.name()));\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(providerConfigId, notificationType.name()));\n+    }\n+\n+    private List<DistributionJobModel> getMatchingEnabledJobs(Supplier<List<DistributionJobEntity>> getJobs) {\n+        // TODO change this to return a page of jobs\n+        List<DistributionJobEntity> matchingEnabledJob = getJobs.get();\n+        return matchingEnabledJob\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel createJob(Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) {\n+        return createJobWithId(null, configuredFields, DateUtils.createCurrentDateTimestamp(), null);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel updateJob(UUID jobId, Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) throws AlertDatabaseConstraintException {\n+        DistributionJobEntity jobEntity = distributionJobRepository.findById(jobId)\n+                                              .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"No job exists with the id [%s]\", jobId.toString())));\n+        OffsetDateTime createdAt = jobEntity.getCreatedAt();\n+\n+        deleteJob(jobId);\n+        return createJobWithId(jobId, configuredFields, createdAt, DateUtils.createCurrentDateTimestamp());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteJob(UUID jobId) {\n+        distributionJobRepository.deleteById(jobId);\n+    }\n+\n+    private DistributionJobModel convertToDistributionJobModel(DistributionJobEntity jobEntity) {\n+        ConfigurationJobModel configurationJobModel = convertToConfigurationJobModel(jobEntity);\n+        Map<String, ConfigurationFieldModel> fields = configurationJobModel.getFieldUtility().getFields();\n+        return JobConfigurationModelFieldExtractorUtils.convertToDistributionJobModel(configurationJobModel.getJobId(), fields, jobEntity.getCreatedAt(), jobEntity.getLastUpdated());\n+    }\n+\n+    private ConfigurationJobModel convertToConfigurationJobModel(DistributionJobEntity jobEntity) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e049f31b7151d5504d87e8b43e544d3a000dc739"}, "originalPosition": 187}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgxMDI4OA==", "bodyText": "This method is now removed.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529810288", "createdAt": "2020-11-24T19:00:52Z", "author": {"login": "JakeMathews"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessorV2;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldExtractorUtils;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldPopulationUtility;\n+import com.synopsys.integration.alert.descriptor.api.model.ProviderKey;\n+import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;\n+\n+@Component\n+public class StaticJobAccessorV2 implements JobAccessorV2 {\n+    private final DistributionJobRepository distributionJobRepository;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    private final JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility;\n+    private final RegisteredDescriptorRepository registeredDescriptorRepository;\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessorV2(\n+        DistributionJobRepository distributionJobRepository,\n+        JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility,\n+        RegisteredDescriptorRepository registeredDescriptorRepository,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.jobConfigurationModelFieldPopulationUtility = jobConfigurationModelFieldPopulationUtility;\n+        this.registeredDescriptorRepository = registeredDescriptorRepository;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DistributionJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit) {\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findAll(pageRequest).map(this::convertToDistributionJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit, String searchTerm, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageNumber, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobEntity> pageOfJobsWithDescriptorNames;\n+        if (StringUtils.isBlank(searchTerm)) {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest);\n+        } else {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNamesAndSearchTerm(descriptorsNamesToInclude, searchTerm, pageRequest);\n+        }\n+\n+        List<DistributionJobModel> configurationJobModels = pageOfJobsWithDescriptorNames.map(this::convertToDistributionJobModel).getContent();\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, configurationJobModels);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(FrequencyType frequency, Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(frequency.name(), providerConfigId, notificationType.name()));\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(providerConfigId, notificationType.name()));\n+    }\n+\n+    private List<DistributionJobModel> getMatchingEnabledJobs(Supplier<List<DistributionJobEntity>> getJobs) {\n+        // TODO change this to return a page of jobs\n+        List<DistributionJobEntity> matchingEnabledJob = getJobs.get();\n+        return matchingEnabledJob\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel createJob(Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) {\n+        return createJobWithId(null, configuredFields, DateUtils.createCurrentDateTimestamp(), null);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel updateJob(UUID jobId, Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) throws AlertDatabaseConstraintException {\n+        DistributionJobEntity jobEntity = distributionJobRepository.findById(jobId)\n+                                              .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"No job exists with the id [%s]\", jobId.toString())));\n+        OffsetDateTime createdAt = jobEntity.getCreatedAt();\n+\n+        deleteJob(jobId);\n+        return createJobWithId(jobId, configuredFields, createdAt, DateUtils.createCurrentDateTimestamp());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public void deleteJob(UUID jobId) {\n+        distributionJobRepository.deleteById(jobId);\n+    }\n+\n+    private DistributionJobModel convertToDistributionJobModel(DistributionJobEntity jobEntity) {\n+        ConfigurationJobModel configurationJobModel = convertToConfigurationJobModel(jobEntity);\n+        Map<String, ConfigurationFieldModel> fields = configurationJobModel.getFieldUtility().getFields();\n+        return JobConfigurationModelFieldExtractorUtils.convertToDistributionJobModel(configurationJobModel.getJobId(), fields, jobEntity.getCreatedAt(), jobEntity.getLastUpdated());\n+    }\n+\n+    private ConfigurationJobModel convertToConfigurationJobModel(DistributionJobEntity jobEntity) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5NTc3NA=="}, "originalCommit": {"oid": "e049f31b7151d5504d87e8b43e544d3a000dc739"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjY0NTE5OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODozODowNlrOH5QOaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxODozODowNlrOH5QOaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTc5NjcxNQ==", "bodyText": "I think we want to take in a different model rather than the \"old\" way of Collection<String> descriptorNames and Collection<ConfigurationFieldModel> configuredFields. Something along the lines of DistributionJobRequestModel that has a subset of the fields of DistributionJobModel. This model would not have jobId, createdAt or lastUpdated fields.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529796715", "createdAt": "2020-11-24T18:38:06Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -0,0 +1,225 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.LinkedHashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.Function;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertRuntimeException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessorV2;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.mutable.ConfigurationModelMutable;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldExtractorUtils;\n+import com.synopsys.integration.alert.database.job.JobConfigurationModelFieldPopulationUtility;\n+import com.synopsys.integration.alert.descriptor.api.model.ProviderKey;\n+import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;\n+\n+@Component\n+public class StaticJobAccessorV2 implements JobAccessorV2 {\n+    private final DistributionJobRepository distributionJobRepository;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    private final JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility;\n+    private final RegisteredDescriptorRepository registeredDescriptorRepository;\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessorV2(\n+        DistributionJobRepository distributionJobRepository,\n+        JobConfigurationModelFieldPopulationUtility jobConfigurationModelFieldPopulationUtility,\n+        RegisteredDescriptorRepository registeredDescriptorRepository,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.jobConfigurationModelFieldPopulationUtility = jobConfigurationModelFieldPopulationUtility;\n+        this.registeredDescriptorRepository = registeredDescriptorRepository;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DistributionJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit) {\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findAll(pageRequest).map(this::convertToDistributionJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit, String searchTerm, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageNumber, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobEntity> pageOfJobsWithDescriptorNames;\n+        if (StringUtils.isBlank(searchTerm)) {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest);\n+        } else {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNamesAndSearchTerm(descriptorsNamesToInclude, searchTerm, pageRequest);\n+        }\n+\n+        List<DistributionJobModel> configurationJobModels = pageOfJobsWithDescriptorNames.map(this::convertToDistributionJobModel).getContent();\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, configurationJobModels);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(FrequencyType frequency, Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(frequency.name(), providerConfigId, notificationType.name()));\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(providerConfigId, notificationType.name()));\n+    }\n+\n+    private List<DistributionJobModel> getMatchingEnabledJobs(Supplier<List<DistributionJobEntity>> getJobs) {\n+        // TODO change this to return a page of jobs\n+        List<DistributionJobEntity> matchingEnabledJob = getJobs.get();\n+        return matchingEnabledJob\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel createJob(Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) {\n+        return createJobWithId(null, configuredFields, DateUtils.createCurrentDateTimestamp(), null);\n+    }\n+\n+    @Override\n+    @Transactional\n+    public DistributionJobModel updateJob(UUID jobId, Collection<String> descriptorNames, Collection<ConfigurationFieldModel> configuredFields) throws AlertDatabaseConstraintException {\n+        DistributionJobEntity jobEntity = distributionJobRepository.findById(jobId)\n+                                              .orElseThrow(() -> new AlertDatabaseConstraintException(String.format(\"No job exists with the id [%s]\", jobId.toString())));\n+        OffsetDateTime createdAt = jobEntity.getCreatedAt();\n+\n+        deleteJob(jobId);\n+        return createJobWithId(jobId, configuredFields, createdAt, DateUtils.createCurrentDateTimestamp());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e049f31b7151d5504d87e8b43e544d3a000dc739"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjkyMDE3OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobRequestModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1MzoxOFrOH5S2IQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1MzoxOFrOH5S2IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTgzOTY0OQ==", "bodyText": "Don't forget to generate the license headers before merging.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529839649", "createdAt": "2020-11-24T19:53:18Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobRequestModel.java", "diffHunk": "@@ -0,0 +1,112 @@\n+package com.synopsys.integration.alert.common.persistence.model.job;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af26b6e582b30ae5c3442b25416bc443efb6ab89"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjkzMTU0OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1NjozNlrOH5S9CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1NjozNlrOH5S9CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MTQxNw==", "bodyText": "Let's bump this private method down to below the last public method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529841417", "createdAt": "2020-11-24T19:56:36Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessorV2;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModelBuilder;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobRequestModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.additional.EmailJobAdditionalEmailAddressEntity;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsEntity;\n+import com.synopsys.integration.alert.descriptor.api.model.ProviderKey;\n+import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;\n+\n+@Component\n+public class StaticJobAccessorV2 implements JobAccessorV2 {\n+    private final DistributionJobRepository distributionJobRepository;\n+    private final BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor;\n+    private final AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor;\n+    private final EmailJobDetailsAccessor emailJobDetailsAccessor;\n+    private final JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor;\n+    private final JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor;\n+    private final MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor;\n+    private final SlackJobDetailsAccessor slackJobDetailsAccessor;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessorV2(DistributionJobRepository distributionJobRepository,\n+        BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor,\n+        AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor,\n+        EmailJobDetailsAccessor emailJobDetailsAccessor,\n+        JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor,\n+        JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor,\n+        MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor,\n+        SlackJobDetailsAccessor slackJobDetailsAccessor,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.blackDuckJobDetailsAccessor = blackDuckJobDetailsAccessor;\n+        this.azureBoardsJobDetailsAccessor = azureBoardsJobDetailsAccessor;\n+        this.emailJobDetailsAccessor = emailJobDetailsAccessor;\n+        this.jiraCloudJobDetailsAccessor = jiraCloudJobDetailsAccessor;\n+        this.jiraServerJobDetailsAccessor = jiraServerJobDetailsAccessor;\n+        this.msTeamsJobDetailsAccessor = msTeamsJobDetailsAccessor;\n+        this.slackJobDetailsAccessor = slackJobDetailsAccessor;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DistributionJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit) {\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findAll(pageRequest).map(this::convertToDistributionJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit, String searchTerm, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageNumber, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobEntity> pageOfJobsWithDescriptorNames;\n+        if (StringUtils.isBlank(searchTerm)) {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest);\n+        } else {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNamesAndSearchTerm(descriptorsNamesToInclude, searchTerm, pageRequest);\n+        }\n+\n+        List<DistributionJobModel> configurationJobModels = pageOfJobsWithDescriptorNames.map(this::convertToDistributionJobModel).getContent();\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, configurationJobModels);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(FrequencyType frequency, Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(frequency.name(), providerConfigId, notificationType.name()));\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(providerConfigId, notificationType.name()));\n+    }\n+\n+    private List<DistributionJobModel> getMatchingEnabledJobs(Supplier<List<DistributionJobEntity>> getJobs) {\n+        // TODO change this to return a page of jobs\n+        List<DistributionJobEntity> matchingEnabledJob = getJobs.get();\n+        return matchingEnabledJob\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af26b6e582b30ae5c3442b25416bc443efb6ab89"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjkzMzQ0OnYy", "diffSide": "RIGHT", "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1NzoxMFrOH5S-Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxOTo1NzoxMFrOH5S-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg0MTcwNg==", "bodyText": "We can add the @Transactional(readOnly = true) to these methods.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529841706", "createdAt": "2020-11-24T19:57:10Z", "author": {"login": "gkillough"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/StaticJobAccessorV2.java", "diffHunk": "@@ -0,0 +1,316 @@\n+/**\n+ * alert-database\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.database.api;\n+\n+import java.time.OffsetDateTime;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+import java.util.function.Supplier;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.PageRequest;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.JobAccessorV2;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobModelBuilder;\n+import com.synopsys.integration.alert.common.persistence.model.job.DistributionJobRequestModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.AzureBoardsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.EmailJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraCloudJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.JiraServerJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.MSTeamsJobDetailsModel;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.SlackJobDetailsModel;\n+import com.synopsys.integration.alert.common.rest.model.AlertPagedModel;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.job.DistributionJobEntity;\n+import com.synopsys.integration.alert.database.job.DistributionJobRepository;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.azure.boards.AzureBoardsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.blackduck.BlackDuckJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.email.EmailJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.email.additional.EmailJobAdditionalEmailAddressEntity;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.cloud.JiraCloudJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.jira.server.JiraServerJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.msteams.MSTeamsJobDetailsEntity;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsAccessor;\n+import com.synopsys.integration.alert.database.job.slack.SlackJobDetailsEntity;\n+import com.synopsys.integration.alert.descriptor.api.model.ProviderKey;\n+import com.synopsys.integration.blackduck.api.manual.enumeration.NotificationType;\n+\n+@Component\n+public class StaticJobAccessorV2 implements JobAccessorV2 {\n+    private final DistributionJobRepository distributionJobRepository;\n+    private final BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor;\n+    private final AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor;\n+    private final EmailJobDetailsAccessor emailJobDetailsAccessor;\n+    private final JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor;\n+    private final JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor;\n+    private final MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor;\n+    private final SlackJobDetailsAccessor slackJobDetailsAccessor;\n+\n+    // Temporary until all three tiers of the application have been updated to new Job models\n+    // BlackDuck is currently the only provider, so this is safe in the short-term while we transition to new models\n+    private final ProviderKey blackDuckProviderKey;\n+\n+    @Autowired\n+    public StaticJobAccessorV2(DistributionJobRepository distributionJobRepository,\n+        BlackDuckJobDetailsAccessor blackDuckJobDetailsAccessor,\n+        AzureBoardsJobDetailsAccessor azureBoardsJobDetailsAccessor,\n+        EmailJobDetailsAccessor emailJobDetailsAccessor,\n+        JiraCloudJobDetailsAccessor jiraCloudJobDetailsAccessor,\n+        JiraServerJobDetailsAccessor jiraServerJobDetailsAccessor,\n+        MSTeamsJobDetailsAccessor msTeamsJobDetailsAccessor,\n+        SlackJobDetailsAccessor slackJobDetailsAccessor,\n+        ProviderKey blackDuckProviderKey\n+    ) {\n+        this.distributionJobRepository = distributionJobRepository;\n+        this.blackDuckJobDetailsAccessor = blackDuckJobDetailsAccessor;\n+        this.azureBoardsJobDetailsAccessor = azureBoardsJobDetailsAccessor;\n+        this.emailJobDetailsAccessor = emailJobDetailsAccessor;\n+        this.jiraCloudJobDetailsAccessor = jiraCloudJobDetailsAccessor;\n+        this.jiraServerJobDetailsAccessor = jiraServerJobDetailsAccessor;\n+        this.msTeamsJobDetailsAccessor = msTeamsJobDetailsAccessor;\n+        this.slackJobDetailsAccessor = slackJobDetailsAccessor;\n+        this.blackDuckProviderKey = blackDuckProviderKey;\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public List<DistributionJobModel> getJobsById(Collection<UUID> jobIds) {\n+        return distributionJobRepository.findAllById(jobIds)\n+                   .stream()\n+                   .map(this::convertToDistributionJobModel)\n+                   .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit) {\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobModel> pageOfJobsWithDescriptorNames = distributionJobRepository.findAll(pageRequest).map(this::convertToDistributionJobModel);\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, pageOfJobsWithDescriptorNames.getContent());\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public AlertPagedModel<DistributionJobModel> getPageOfJobs(int pageNumber, int pageLimit, String searchTerm, Collection<String> descriptorsNamesToInclude) {\n+        if (!descriptorsNamesToInclude.contains(blackDuckProviderKey.getUniversalKey())) {\n+            return new AlertPagedModel<>(0, pageNumber, pageLimit, List.of());\n+        }\n+\n+        PageRequest pageRequest = PageRequest.of(pageNumber, pageLimit);\n+        Page<DistributionJobEntity> pageOfJobsWithDescriptorNames;\n+        if (StringUtils.isBlank(searchTerm)) {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNameIn(descriptorsNamesToInclude, pageRequest);\n+        } else {\n+            pageOfJobsWithDescriptorNames = distributionJobRepository.findByChannelDescriptorNamesAndSearchTerm(descriptorsNamesToInclude, searchTerm, pageRequest);\n+        }\n+\n+        List<DistributionJobModel> configurationJobModels = pageOfJobsWithDescriptorNames.map(this::convertToDistributionJobModel).getContent();\n+        return new AlertPagedModel<>(pageOfJobsWithDescriptorNames.getTotalPages(), pageNumber, pageLimit, configurationJobModels);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobById(UUID jobId) {\n+        return distributionJobRepository.findById(jobId).map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    @Transactional(readOnly = true)\n+    public Optional<DistributionJobModel> getJobByName(String jobName) {\n+        return distributionJobRepository.findByName(jobName)\n+                   .map(this::convertToDistributionJobModel);\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(FrequencyType frequency, Long providerConfigId, NotificationType notificationType) {\n+        // TODO change this to return a page of jobs\n+        return getMatchingEnabledJobs(() -> distributionJobRepository.findMatchingEnabledJob(frequency.name(), providerConfigId, notificationType.name()));\n+    }\n+\n+    @Override\n+    public List<DistributionJobModel> getMatchingEnabledJobs(Long providerConfigId, NotificationType notificationType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "af26b6e582b30ae5c3442b25416bc443efb6ab89"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMzE1NTkxOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobRequestModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowMzozOVrOH5VEYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQyMTowMzozOVrOH5VEYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTg3NjA2Nw==", "bodyText": "I hate to do this, but I forgot to mention it might be nice to have an abstract class that this and DistributionJobModel both extend so we can abstract some of the common fields.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1275#discussion_r529876067", "createdAt": "2020-11-24T21:03:39Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/persistence/model/job/DistributionJobRequestModel.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.persistence.model.job;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.enumeration.ProcessingType;\n+import com.synopsys.integration.alert.common.persistence.model.job.details.DistributionJobDetailsModel;\n+\n+public class DistributionJobRequestModel {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62910dd9053a774c3e5dd80e34eeab2a035c2085"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2217, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}