{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc3MjYwNzc2", "number": 1151, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0NTo0M1rOEfCKJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0NTo0M1rOEfCKJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTc2Njc2OnYy", "diffSide": "LEFT", "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/tasks/BlackDuckAccumulator.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo0NTo0M1rOHLDniQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyNTo0M1rOHLFElA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTY1Nw==", "bodyText": "Wouldn't it be better to fix the getMillisecondsToNextRun() method?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1151#discussion_r481355657", "createdAt": "2020-09-01T18:45:43Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/tasks/BlackDuckAccumulator.java", "diffHunk": "@@ -99,12 +98,6 @@ public void accumulate() {\n             saveNextSearchStart(nextSearchStartString);\n         } catch (AlertDatabaseConstraintException e) {\n             logger.error(\"Error occurred accumulating data! \", e);\n-        } finally {\n-            Optional<Long> nextRun = getMillisecondsToNextRun();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de723f04dd7acb20c3c33a58129791d8215790f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NjU5MA==", "bodyText": "Sounds like this will need to get fixed regardless of us logging the data. The method name now seems to be misleading.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1151#discussion_r481356590", "createdAt": "2020-09-01T18:47:22Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/tasks/BlackDuckAccumulator.java", "diffHunk": "@@ -99,12 +98,6 @@ public void accumulate() {\n             saveNextSearchStart(nextSearchStartString);\n         } catch (AlertDatabaseConstraintException e) {\n             logger.error(\"Error occurred accumulating data! \", e);\n-        } finally {\n-            Optional<Long> nextRun = getMillisecondsToNextRun();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTY1Nw=="}, "originalCommit": {"oid": "de723f04dd7acb20c3c33a58129791d8215790f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1ODc4MA==", "bodyText": "This was a discussion I had with Paulo so hopefully I can recall this correctly... The problem here is that when its run from the accumulator the ScheduledFuture object, inside of ScheduledTask, we are passing around is referring to the running accumulator job. This is a problem because when checking to see when the the job is done it will have already been done at the previous start time. We still want to keep that method in place because it is used in other places such as the taskManager which is working correctly to calculate the next run time.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1151#discussion_r481358780", "createdAt": "2020-09-01T18:51:27Z", "author": {"login": "ChomickiM"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/tasks/BlackDuckAccumulator.java", "diffHunk": "@@ -99,12 +98,6 @@ public void accumulate() {\n             saveNextSearchStart(nextSearchStartString);\n         } catch (AlertDatabaseConstraintException e) {\n             logger.error(\"Error occurred accumulating data! \", e);\n-        } finally {\n-            Optional<Long> nextRun = getMillisecondsToNextRun();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTY1Nw=="}, "originalCommit": {"oid": "de723f04dd7acb20c3c33a58129791d8215790f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTQ3Ng==", "bodyText": "The issue here is that the task has a reference to the future that is a ScheduledFuture.  The ScheduledFuture api has a getDelay  method.  However we are asking the current running task for its delay as to when it will run next.  But the issue is that when we are asking the future for the delay it is returning a negative value because that is the delay when the task was started. It is the current running task so that is no positive delay to return.  For example -923 means this future was started 923 milliseconds ago because it is the current running task. This coincides with the logging message for when the task starts its run.  Negative numbers returned by getDelay means that the task is currently running or has run.  The delay has elapsed which is true.\nThe TaskManager component works because the taskScheduler manages updating the future reference to wait to execute again after some time has passed.  The UI and anyone probing the TaskManager are asking for when a task next runs but it is outside the scope of the task.  Where we are logging is within the scope of the task which is running so getDelay will always be a negative millisecond value.  That is why the logging has been removed.  It doesn't actually provide any value at this point.\nhttps://docs.oracle.com/javase/7/docs/api/java/util/concurrent/Delayed.html#getDelay(java.util.concurrent.TimeUnit)", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1151#discussion_r481379476", "createdAt": "2020-09-01T19:25:43Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/provider/blackduck/tasks/BlackDuckAccumulator.java", "diffHunk": "@@ -99,12 +98,6 @@ public void accumulate() {\n             saveNextSearchStart(nextSearchStartString);\n         } catch (AlertDatabaseConstraintException e) {\n             logger.error(\"Error occurred accumulating data! \", e);\n-        } finally {\n-            Optional<Long> nextRun = getMillisecondsToNextRun();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM1NTY1Nw=="}, "originalCommit": {"oid": "de723f04dd7acb20c3c33a58129791d8215790f6"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1719, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}