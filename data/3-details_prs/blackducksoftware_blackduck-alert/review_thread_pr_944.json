{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxNDg3NzAz", "number": 944, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1Nzo0M1rODwd04w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxMzowNFrODwfgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTQ2OTE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1Nzo0M1rOGDfEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNTo1Nzo0M1rOGDfEzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMwODA0NA==", "bodyText": "This should be combined into one error log message.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406308044", "createdAt": "2020-04-09T15:57:43Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,12 +50,19 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        return authenticationPerformers\n-                   .stream()\n-                   .map(authPerformer -> authPerformer.performAuthentication(authentication))\n-                   .flatMap(Optional::stream)\n-                   .findAny()\n-                   .orElse(authentication);\n+        for (AuthenticationPerformer authenticationPerformer : authenticationPerformers) {\n+            try {\n+                Optional<Authentication> completedAuthentication = authenticationPerformer.performAuthentication(authentication);\n+                if (completedAuthentication.isPresent() && completedAuthentication.get().isAuthenticated()) {\n+                    return completedAuthentication.get();\n+                }\n+            } catch (Exception ex) {\n+                logger.info(\"Error with with authentication type {} - cause: {}\", authenticationPerformer.getAuthenticationType(), ex.getMessage());\n+                logger.error(\"Error details: \", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5fbb5a93a42ce31453463f92448a5548ca868fec"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTYxNDkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/jira/cloud/actions/JiraDistributionTestAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozNjowMVrOGDghMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozNjowMVrOGDghMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMTY5OA==", "bodyText": "The name here is misspelled and may not be accurate", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406331698", "createdAt": "2020-04-09T16:36:01Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/jira/cloud/actions/JiraDistributionTestAction.java", "diffHunk": "@@ -56,11 +57,11 @@ public JiraDistributionTestAction(JiraChannel jiraChannel, Gson gson, JiraMessag\n     }\n \n     @Override\n-    public MessageResult testConfig(String jobId, String destination, FieldAccessor fieldAccessor) throws IntegrationException {\n+    public MessageResult testConfig(String jobId, FieldModel fieldModel, FieldAccessor registeredFieldValuesr) throws IntegrationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTYyMzQwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjozODoxNlrOGDgmXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxODoxNVrOGDiAVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMzAyMw==", "bodyText": "Will we want to say something if both are enabled? Or is that allowed?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406333023", "createdAt": "2020-04-09T16:38:16Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1NjA1Mg==", "bodyText": "It's really only one or the other not both.  That's a validation check that happens.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406356052", "createdAt": "2020-04-09T17:18:15Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzMzAyMw=="}, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTYzMzM4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MDo1NFrOGDgsvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1ODozOFrOGDjayQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDY1NA==", "bodyText": "Should we put something in the errorMap here saying an unexpected error occurred?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406334654", "createdAt": "2020-04-09T16:40:54Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3OTIwOQ==", "bodyText": "To be safe I will just catch the exception and add it to the map.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406379209", "createdAt": "2020-04-09T17:58:38Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDY1NA=="}, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTYzNDY0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo0MToxOVrOGDgtmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowNTo1N1rOGDhlRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDg3Mg==", "bodyText": "Should we put an error here saying an unexpected error occurred?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406334872", "createdAt": "2020-04-09T16:41:19Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);\n+            }\n+        }\n+\n+        if (testMetaDataFile) {\n+            logger.info(\"Testing SAML Metadata File...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createFileProvider();\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata File error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_FILE, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0OTEyNg==", "bodyText": "I think he means in the errorsMap.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406349126", "createdAt": "2020-04-09T17:05:57Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);\n+            if (!authentication.isAuthenticated()) {\n+                errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+            }\n+        }\n+\n+        if (!errorsMap.isEmpty()) {\n+            throw new AlertFieldException(errorsMap);\n+        }\n+    }\n+\n+    private void performSAMLTest(FieldAccessor registeredFieldValues) throws IntegrationException {\n+        Optional<ConfigurationFieldModel> metaDataURLField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_URL);\n+        Optional<ConfigurationFieldModel> metaDataFileField = registeredFieldValues.getField(AuthenticationDescriptor.KEY_SAML_METADATA_FILE);\n+        boolean testMetaDataURL = metaDataURLField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        boolean testMetaDataFile = metaDataFileField.map(ConfigurationFieldModel::isSet).orElse(false);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (testMetaDataURL) {\n+            logger.info(\"Testing SAML Metadata URL...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createHttpProvider(registeredFieldValues.getStringOrEmpty(AuthenticationDescriptor.KEY_SAML_METADATA_URL));\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata URL error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_URL, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);\n+            }\n+        }\n+\n+        if (testMetaDataFile) {\n+            logger.info(\"Testing SAML Metadata File...\");\n+            try {\n+                Optional<ExtendedMetadataDelegate> provider = samlManager.createFileProvider();\n+                if (provider.isPresent()) {\n+                    provider.get().initialize();\n+                }\n+            } catch (MetadataProviderException ex) {\n+                logger.error(\"Testing SAML Metadata File error: \", ex);\n+                errorsMap.put(AuthenticationDescriptor.KEY_SAML_METADATA_FILE, ex.getMessage());\n+            } catch (Exception ex) {\n+                logger.error(\"Unexpected error testing SAML:\", ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjMzNDg3Mg=="}, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTY3ODU3OnYy", "diffSide": "RIGHT", "path": "src/main/js/dynamic/ChannelTestModal.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NDowNFrOGDhKPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzo1Njo1NFrOGDjWtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MjIwNQ==", "bodyText": "Relative path should be absolute", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406342205", "createdAt": "2020-04-09T16:54:04Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/ChannelTestModal.js", "diffHunk": "@@ -1,14 +1,24 @@\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n import { Modal } from 'react-bootstrap';\n-import TextInput from 'field/input/TextInput';\n+import FieldsPanel from 'field/FieldsPanel';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import * as FieldMapping from \"../util/fieldMapping\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM3ODE2Ng==", "bodyText": "I thought I got all of them.  I missed this one. Thanks.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406378166", "createdAt": "2020-04-09T17:56:54Z", "author": {"login": "psantos1113"}, "path": "src/main/js/dynamic/ChannelTestModal.js", "diffHunk": "@@ -1,14 +1,24 @@\n import React, { Component } from 'react';\n import PropTypes from 'prop-types';\n import { Modal } from 'react-bootstrap';\n-import TextInput from 'field/input/TextInput';\n+import FieldsPanel from 'field/FieldsPanel';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import * as FieldMapping from \"../util/fieldMapping\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0MjIwNQ=="}, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTY5MDA3OnYy", "diffSide": "RIGHT", "path": "src/main/js/dynamic/ChannelTestModal.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NzoxMlrOGDhRuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNjo1NzoxMlrOGDhRuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0NDEyMA==", "bodyText": "Should destination still be used/exist?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406344120", "createdAt": "2020-04-09T16:57:12Z", "author": {"login": "bamandel"}, "path": "src/main/js/dynamic/ChannelTestModal.js", "diffHunk": "@@ -24,32 +34,37 @@ class ChannelTestModal extends Component {\n     handleSendTestMessage(event) {\n         event.preventDefault();\n         event.stopPropagation();\n-        const { destination } = this.state;\n+        const { destination, testFieldModel } = this.state;\n         const { fieldModel } = this.props;\n-        this.props.sendTestMessage(fieldModel, destination);\n+        const combinedModel = FieldModelUtilities.combineFieldModels(fieldModel, testFieldModel);\n+        if (fieldModel && fieldModel.id) {\n+            combinedModel.id = fieldModel.id;\n+        }\n+        this.props.sendTestMessage(combinedModel, destination);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTcxODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowNToxN1rOGDhj8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowNToxN1rOGDhj8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM0ODc4Ng==", "bodyText": "Should we clear the authentication after the test?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406348786", "createdAt": "2020-04-09T17:05:17Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/component/authentication/actions/AuthenticationTestAction.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.component.authentication.actions;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.opensaml.saml2.metadata.provider.MetadataProviderException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.ldap.authentication.LdapAuthenticationProvider;\n+import org.springframework.security.saml.metadata.ExtendedMetadataDelegate;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.TestAction;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.alert.common.message.model.MessageResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationDescriptor;\n+import com.synopsys.integration.alert.component.authentication.descriptor.AuthenticationUIConfig;\n+import com.synopsys.integration.alert.web.security.authentication.ldap.LdapManager;\n+import com.synopsys.integration.alert.web.security.authentication.saml.SAMLManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+@Component\n+public class AuthenticationTestAction extends TestAction {\n+    private Logger logger = LoggerFactory.getLogger(AuthenticationTestAction.class);\n+    private LdapManager ldapManager;\n+    private SAMLManager samlManager;\n+\n+    @Autowired\n+    public AuthenticationTestAction(LdapManager ldapManager, SAMLManager samlManager) {\n+        this.ldapManager = ldapManager;\n+        this.samlManager = samlManager;\n+    }\n+\n+    @Override\n+    public MessageResult testConfig(String configId, FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"Testing authentication.\");\n+        boolean ldapEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_LDAP_ENABLED);\n+        boolean samlEnabled = registeredFieldValues.getBooleanOrFalse(AuthenticationDescriptor.KEY_SAML_ENABLED);\n+        if (ldapEnabled) {\n+            performLdapTest(fieldModel, registeredFieldValues);\n+        }\n+\n+        if (samlEnabled) {\n+            performSAMLTest(registeredFieldValues);\n+        }\n+\n+        return new MessageResult(\"Successfully tested authentication configuration.\");\n+    }\n+\n+    private void performLdapTest(FieldModel fieldModel, FieldAccessor registeredFieldValues) throws IntegrationException {\n+        logger.info(\"LDAP enabled testing LDAP authentication.\");\n+        String userName = fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_USERNAME).orElse(\"\");\n+        Optional<LdapAuthenticationProvider> ldapProvider = ldapManager.createAuthProvider(registeredFieldValues);\n+        String errorMessage = String.format(\"Ldap Authentication test failed for the test user %s.  Please check the LDAP configuration.\", userName);\n+        Map<String, String> errorsMap = new HashMap<>();\n+        if (!ldapProvider.isPresent()) {\n+            errorsMap.put(AuthenticationDescriptor.KEY_LDAP_ENABLED, errorMessage);\n+        } else {\n+            Authentication pendingAuthentication = new UsernamePasswordAuthenticationToken(userName,\n+                fieldModel.getFieldValue(AuthenticationUIConfig.TEST_FIELD_KEY_PASSWORD).orElse(\"\"));\n+            Authentication authentication = ldapProvider.get().authenticate(pendingAuthentication);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTczMTU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowOToxOVrOGDhsqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzowOToxOVrOGDhsqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MTAxNg==", "bodyText": "You could add .filter(Authentication::isAuthenticated) to avoid chaining methods after a .get().", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406351016", "createdAt": "2020-04-09T17:09:19Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/AlertAuthenticationProvider.java", "diffHunk": "@@ -47,12 +50,19 @@ public Authentication authenticate(Authentication authentication) throws Authent\n             throw new IllegalArgumentException(\"Only UsernamePasswordAuthenticationToken is supported, \" + authentication.getClass() + \" was attempted\");\n         }\n \n-        return authenticationPerformers\n-                   .stream()\n-                   .map(authPerformer -> authPerformer.performAuthentication(authentication))\n-                   .flatMap(Optional::stream)\n-                   .findAny()\n-                   .orElse(authentication);\n+        for (AuthenticationPerformer authenticationPerformer : authenticationPerformers) {\n+            try {\n+                Optional<Authentication> completedAuthentication = authenticationPerformer.performAuthentication(authentication);\n+                if (completedAuthentication.isPresent() && completedAuthentication.get().isAuthenticated()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTc0NDE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/ldap/LdapManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxMzowNFrOGDh0uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzoxMzowNFrOGDh0uA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM1MzA4MA==", "bodyText": "It doesn't look like there will ever be an IllegalArgumentException because we catch it in the method called.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/944#discussion_r406353080", "createdAt": "2020-04-09T17:13:04Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/security/authentication/ldap/LdapManager.java", "diffHunk": "@@ -82,41 +81,45 @@ public boolean isLdapEnabled() {\n         return false;\n     }\n \n-    public ConfigurationModel getCurrentConfiguration() throws AlertDatabaseConstraintException, AlertConfigurationException {\n-        return configurationAccessor.getConfigurationsByDescriptorKey(authenticationDescriptorKey)\n-                   .stream()\n-                   .findFirst()\n-                   .orElseThrow(() -> new AlertConfigurationException(\"Settings configuration missing\"));\n+    public FieldAccessor getCurrentConfiguration() throws AlertDatabaseConstraintException, AlertConfigurationException {\n+        ConfigurationModel configModel = configurationAccessor.getConfigurationsByDescriptorKey(authenticationDescriptorKey)\n+                                             .stream()\n+                                             .findFirst()\n+                                             .orElseThrow(() -> new AlertConfigurationException(\"Settings configuration missing\"));\n+        return new FieldAccessor(configModel.getCopyOfKeyToFieldMap());\n     }\n \n-    public LdapAuthenticationProvider getAuthenticationProvider() throws AlertConfigurationException {\n-        updateContext();\n-        return authenticationProvider;\n+    public Optional<LdapAuthenticationProvider> getAuthenticationProvider() throws AlertConfigurationException {\n+        try {\n+            FieldAccessor fieldAccessor = getCurrentConfiguration();\n+            return createAuthProvider(fieldAccessor);\n+        } catch (IllegalArgumentException | AlertDatabaseConstraintException ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b61b9e56fa9e10d9fba8c010115d285998f66a5e"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1963, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}