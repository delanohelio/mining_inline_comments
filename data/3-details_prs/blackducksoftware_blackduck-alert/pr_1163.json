{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1MTM0MTQ5", "number": 1163, "title": "User controller refactor", "bodyText": "Refactor of the user actions and controller based on the work and example Gavin made in the certificate controller/actions. I had begun working on moving, improving, and adding to the tests, but if Paulo's changes are adopted I decided to hold off finishing them for now. If his changes are made I will try and revisit the tests and improve them at that point.", "createdAt": "2020-09-11T14:28:48Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163", "merged": true, "mergeCommit": {"oid": "27d9397aa2b7efb9f07a2ac87ab6f6ee9f1b492f"}, "closed": true, "closedAt": "2020-09-15T20:27:46Z", "author": {"login": "ChomickiM"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFAk_yAH2gAyNDg1MTM0MTQ5OjExNjZmNzE1NDVkMWM0ZTY0NTE0YzkwMGFjODU4MjI1ZTQ0NmRmZGI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJNjgTAH2gAyNDg1MTM0MTQ5OmFiYWFkMzI4MmMyYTUyY2Y2ZTFkZWY1MDQ3ZmY5M2RhZTM4Y2NkYjc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1166f71545d1c4e64514c900ac858225e446dfdb", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1166f71545d1c4e64514c900ac858225e446dfdb", "committedDate": "2020-09-02T18:47:16Z", "message": "refactor: Make UserController return explicit return types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19c5e8f9295fc5d6db721d7ac4c37d96488f28c6", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/19c5e8f9295fc5d6db721d7ac4c37d96488f28c6", "committedDate": "2020-09-08T14:58:11Z", "message": "refactor: Update validation in user api to throw exceptions with fieldErrors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10eeea3725664e3913e79ed9e5793ae8abd047ef", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/10eeea3725664e3913e79ed9e5793ae8abd047ef", "committedDate": "2020-09-08T18:39:17Z", "message": "refactor: Update user actions to validate when saving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5d46c652b8100d4f58a406f551d28f98a731976", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e5d46c652b8100d4f58a406f551d28f98a731976", "committedDate": "2020-09-08T18:44:16Z", "message": "Merge branch 'master' into mc_api_user_controller_refactor\n\n# Conflicts:\n#\tsrc/main/js/store/actions/users.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64672bbc376808d62a71bfbd2e34b464bdc5631a", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/64672bbc376808d62a71bfbd2e34b464bdc5631a", "committedDate": "2020-09-09T18:35:44Z", "message": "refactor: Update validateUser to accept a UserConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f", "committedDate": "2020-09-10T20:30:47Z", "message": "refactor: Update users UI component to handle validation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTYzNDIz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-486963423", "createdAt": "2020-09-11T16:45:15Z", "commit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo0NToxNVrOHQmMSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNjo0NToxNVrOHQmMSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE2NTAwMQ==", "bodyText": "Should this return NO_CONTENT here?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487165001", "createdAt": "2020-09-11T16:45:15Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserController.java", "diffHunk": "@@ -51,76 +55,80 @@\n     public static final String USER_BASE_PATH = ConfigController.CONFIGURATION_PATH + \"/user\";\n \n     private final Logger logger = LoggerFactory.getLogger(UserController.class);\n-    private final ContentConverter contentConverter;\n-    private final ResponseFactory responseFactory;\n     private final AuthorizationManager authorizationManager;\n     private final UserActions userActions;\n     private final UserManagementDescriptorKey descriptorKey;\n \n     @Autowired\n-    public UserController(ContentConverter contentConverter, ResponseFactory responseFactory, AuthorizationManager authorizationManager, UserActions userActions,\n+    public UserController(AuthorizationManager authorizationManager, UserActions userActions,\n         UserManagementDescriptorKey descriptorKey) {\n-        this.contentConverter = contentConverter;\n-        this.responseFactory = responseFactory;\n         this.authorizationManager = authorizationManager;\n         this.userActions = userActions;\n         this.descriptorKey = descriptorKey;\n     }\n \n     @GetMapping\n-    public ResponseEntity<String> getAllUsers() {\n+    public List<UserConfig> getAllUsers() {\n+        if (!hasGlobalPermission(authorizationManager::hasReadPermission, descriptorKey)) {\n+            throw ResponseFactory.createForbiddenException();\n+        }\n+        return userActions.getUsers();\n+    }\n+\n+    @PostMapping(\"/validate\")\n+    public ValidationResponseModel validateUserModel(@RequestBody UserConfig userConfig) {\n         if (!hasGlobalPermission(authorizationManager::hasReadPermission, descriptorKey)) {\n-            return responseFactory.createForbiddenResponse();\n+            throw ResponseFactory.createForbiddenException();\n         }\n-        return responseFactory.createOkContentResponse(contentConverter.getJsonString(userActions.getUsers()));\n+        return userActions.validateUser(userConfig);\n     }\n \n     @PostMapping\n-    public ResponseEntity<String> createUser(@RequestBody UserConfig userModel) {\n+    public UserConfig createUser(@RequestBody UserConfig userModel) {\n         if (!hasGlobalPermission(authorizationManager::hasCreatePermission, descriptorKey)) {\n-            return responseFactory.createForbiddenResponse();\n+            throw ResponseFactory.createForbiddenException();\n         }\n         try {\n-            UserConfig newUser = userActions.createUser(userModel);\n-            return responseFactory.createCreatedResponse(newUser.getId(), \"User Created.\");\n+            return userActions.createUser(userModel);\n         } catch (AlertDatabaseConstraintException e) {\n             logger.error(\"There was an issue with the DB: {}\", e.getMessage());\n             logger.debug(\"Cause\", e);\n-            return responseFactory.createInternalServerErrorResponse(\"\", \"There was an issue with the DB\");\n-        } catch (AlertFieldException e) {\n-            return responseFactory.createFieldErrorResponse(ResponseFactory.EMPTY_ID, \"There were errors with the configuration.\", e.getFieldErrors());\n+            throw ResponseFactory.createInternalServerErrorException(\"There was an issue with the DB\");\n+        } catch (AlertFieldException fieldException) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, String.format(\"There were errors with the configuration: %s\", fieldException.getFlattenedErrorMessages()));\n         }\n \n     }\n \n     @PutMapping(value = \"/{userId}\")\n-    public ResponseEntity<String> updateUser(@PathVariable Long userId, @RequestBody UserConfig userModel) {\n+    public UserConfig updateUser(@PathVariable Long userId, @RequestBody UserConfig userModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTc2NzY3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-486976767", "createdAt": "2020-09-11T17:04:54Z", "commit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzowNDo1NFrOHQm1cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzowNDo1NFrOHQm1cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE3NTUzNg==", "bodyText": "This looks wrong. If I am validating a user exists, why is there a list of statuses all saying the same thing being returned? Shouldn't it just be a single item returned?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487175536", "createdAt": "2020-09-11T17:04:54Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserActions.java", "diffHunk": "@@ -187,11 +199,12 @@ private void validateUserExistsByName(List<AlertFieldStatus> fieldErrors, String\n         userModel.ifPresent(user -> fieldErrors.add(AlertFieldStatus.error(FIELD_KEY_USER_MGMT_USERNAME, \"A user with that username already exists.\")));\n     }\n \n-    private void validateUserExistsById(List<AlertFieldStatus> fieldErrors, Long userId, String userName) {\n-        validateRequiredField(FIELD_KEY_USER_MGMT_USERNAME, fieldErrors, userName);\n+    private List<AlertFieldStatus> validateUserExistsById(Long userId, String userName) {\n         Optional<UserModel> userModel = userAccessor.getUser(userName);\n-        userModel.filter(user -> !user.getId().equals(userId))\n-            .ifPresent(user -> fieldErrors.add(AlertFieldStatus.error(FIELD_KEY_USER_MGMT_USERNAME, \"A user with that username already exists.\")));\n+        return userModel.filter(user -> !user.getId().equals(userId))\n+                   .map(user -> AlertFieldStatus.error(FIELD_KEY_USER_MGMT_USERNAME, \"A user with that username already exists.\"))\n+                   .stream()\n+                   .collect(Collectors.toList());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "originalPosition": 116}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTgxNTY3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-486981567", "createdAt": "2020-09-11T17:12:24Z", "commit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2OTk1ODI4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-486995828", "createdAt": "2020-09-11T17:34:19Z", "commit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzozNDoxOVrOHQnvKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxNzozNDoxOVrOHQnvKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzE5MDMxNA==", "bodyText": "Should usage of \"accept\" be quoted like the other headers?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487190314", "createdAt": "2020-09-11T17:34:19Z", "author": {"login": "gkillough"}, "path": "src/main/js/util/configurationRequestBuilder.js", "diffHunk": "@@ -65,6 +65,7 @@ export function createUpdateRequest(apiUrl, csrfToken, configurationId, fieldMod\n         method: 'PUT',\n         body: JSON.stringify(fieldModel),\n         headers: {\n+            accept: 'application/json',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg3MDMyMDk5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-487032099", "createdAt": "2020-09-11T18:30:13Z", "commit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozMDoxM1rOHQpdFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxODozMDoxM1rOHQpdFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzIxODQ1Mw==", "bodyText": "We also need to make sure we update the deleteUser errors.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r487218453", "createdAt": "2020-09-11T18:30:13Z", "author": {"login": "gkillough"}, "path": "src/main/js/store/actions/users.js", "diffHunk": "@@ -95,6 +98,33 @@ function clearFieldErrors() {\n     };\n }\n \n+function validatingUser() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8a7a24bbd7002ec5c2263a119da7cb1d1d0072f"}, "originalPosition": 16}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d404aa0be2eab81f12f9cd8906423029f34da433", "committedDate": "2020-09-14T17:43:04Z", "message": "fix: Update users to correctly handle update and delete cases."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4NzMwODk0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-488730894", "createdAt": "2020-09-15T14:15:32Z", "commit": {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4ODE2MTkx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-488816191", "createdAt": "2020-09-15T15:39:10Z", "commit": {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTI2Mjg2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-488926286", "createdAt": "2020-09-15T17:50:52Z", "commit": {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo1MDo1MlrOHSNaSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNzo1MDo1MlrOHSNaSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODg1NjEzNw==", "bodyText": "Can we wrap this List in an object?\nFor exmaple:\npublic class MultiUserConfigResponseModel {\n    private List<UserConfig> users;\n    .\n    .\n    .\n}", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#discussion_r488856137", "createdAt": "2020-09-15T17:50:52Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/user/UserController.java", "diffHunk": "@@ -51,76 +55,81 @@\n     public static final String USER_BASE_PATH = ConfigController.CONFIGURATION_PATH + \"/user\";\n \n     private final Logger logger = LoggerFactory.getLogger(UserController.class);\n-    private final ContentConverter contentConverter;\n-    private final ResponseFactory responseFactory;\n     private final AuthorizationManager authorizationManager;\n     private final UserActions userActions;\n     private final UserManagementDescriptorKey descriptorKey;\n \n     @Autowired\n-    public UserController(ContentConverter contentConverter, ResponseFactory responseFactory, AuthorizationManager authorizationManager, UserActions userActions,\n+    public UserController(AuthorizationManager authorizationManager, UserActions userActions,\n         UserManagementDescriptorKey descriptorKey) {\n-        this.contentConverter = contentConverter;\n-        this.responseFactory = responseFactory;\n         this.authorizationManager = authorizationManager;\n         this.userActions = userActions;\n         this.descriptorKey = descriptorKey;\n     }\n \n     @GetMapping\n-    public ResponseEntity<String> getAllUsers() {\n+    public List<UserConfig> getAllUsers() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433"}, "originalPosition": 54}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg4OTMzNjA2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1163#pullrequestreview-488933606", "createdAt": "2020-09-15T18:01:01Z", "commit": {"oid": "d404aa0be2eab81f12f9cd8906423029f34da433"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "abaad3282c2a52cf6e1def5047ff93dae38ccdb7", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/abaad3282c2a52cf6e1def5047ff93dae38ccdb7", "committedDate": "2020-09-15T20:10:06Z", "message": "refactor: Update UserController to return a MultiUserConfigResponseModel object"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3463, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}