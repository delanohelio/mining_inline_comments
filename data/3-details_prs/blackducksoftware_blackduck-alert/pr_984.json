{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwNzI3Nzg4", "number": 984, "title": "DefaultConfigurationAccessor tests", "bodyText": "These are the tests tot increase coverage for the DefaultConfigurationAccessor. Please let me know if you have any suggestions or want explanations for some of the decisions I took.", "createdAt": "2020-05-20T12:46:36Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984", "merged": true, "mergeCommit": {"oid": "1c01e7c40ba1cfb14fd4e6d0ea800ad9e934afb7"}, "closed": true, "closedAt": "2020-05-20T20:04:33Z", "author": {"login": "ChomickiM"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchmSCwgH2gAyNDIwNzI3Nzg4OjlkM2RkMTMxNGVmNjU3ZmI5ZDRjODllZTYwOGExNDQxZThlZGQzYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjN9sZgFqTQxNTYzNzAxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9d3dd1314ef657fb9d4c89ee608a1441e8edd3ab", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9d3dd1314ef657fb9d4c89ee608a1441e8edd3ab", "committedDate": "2020-05-15T18:21:41Z", "message": "test: Increasing test coverage for DefaultConfigurationAccessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "431cee4f127151d9bc99d6ef6cc8e8eadb9bf364", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/431cee4f127151d9bc99d6ef6cc8e8eadb9bf364", "committedDate": "2020-05-19T19:28:10Z", "message": "test: Implementing improvements based on feedback"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "125d1bb11e49f4c366b839067ffecea47043dbb9", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/125d1bb11e49f4c366b839067ffecea47043dbb9", "committedDate": "2020-05-19T19:30:18Z", "message": "Merge remote-tracking branch 'origin/master' into mc_alertdb_tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be068c7629cdca6b563be70d56a375380c4cf3d5", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/be068c7629cdca6b563be70d56a375380c4cf3d5", "committedDate": "2020-05-19T19:44:26Z", "message": "test: Replacing instance of Date objects"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MzEwNTYw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984#pullrequestreview-415310560", "createdAt": "2020-05-20T13:04:53Z", "commit": {"oid": "be068c7629cdca6b563be70d56a375380c4cf3d5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1Mzk1MzQ4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984#pullrequestreview-415395348", "createdAt": "2020-05-20T14:28:16Z", "commit": {"oid": "be068c7629cdca6b563be70d56a375380c4cf3d5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoyODoxNlrOGYOmaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoyODoxNlrOGYOmaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA1ODIxOQ==", "bodyText": "Can you add messages in all of the fail() method calls? With a brief explanation?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984#discussion_r428058219", "createdAt": "2020-05-20T14:28:16Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessorTest.java", "diffHunk": "@@ -0,0 +1,701 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.AlertProperties;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.FilePersistenceUtil;\n+import com.synopsys.integration.alert.common.security.EncryptionUtility;\n+import com.synopsys.integration.alert.common.util.DateUtils;\n+import com.synopsys.integration.alert.database.configuration.ConfigContextEntity;\n+import com.synopsys.integration.alert.database.configuration.ConfigGroupEntity;\n+import com.synopsys.integration.alert.database.configuration.DefinedFieldEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorConfigEntity;\n+import com.synopsys.integration.alert.database.configuration.DescriptorTypeEntity;\n+import com.synopsys.integration.alert.database.configuration.FieldValueEntity;\n+import com.synopsys.integration.alert.database.configuration.RegisteredDescriptorEntity;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigContextRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.ConfigGroupRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DefinedFieldRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorConfigRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.DescriptorTypeRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.FieldValueRepository;\n+import com.synopsys.integration.alert.database.configuration.repository.RegisteredDescriptorRepository;\n+\n+public class DefaultConfigurationAccessorTest {\n+    private static final String TEST_PASSWORD = \"testPassword\";\n+    private static final String TEST_SALT = \"testSalt\";\n+    private static final String TEST_DIRECTORY = \"./testDB\";\n+    private static final String TEST_SECRETS_DIRECTORY = \"./testDB/run/secrets\";\n+\n+    private AlertProperties alertProperties;\n+    private FilePersistenceUtil filePersistenceUtil;\n+\n+    private ConfigGroupRepository configGroupRepository;\n+    private DescriptorConfigRepository descriptorConfigRepository;\n+    private ConfigContextRepository configContextRepository;\n+    private FieldValueRepository fieldValueRepository;\n+    private DefinedFieldRepository definedFieldRepository;\n+    private RegisteredDescriptorRepository registeredDescriptorRepository;\n+    private DescriptorTypeRepository descriptorTypeRepository;\n+    private EncryptionUtility encryptionUtility;\n+\n+    private final ConfigContextEnum configContextEnum = ConfigContextEnum.GLOBAL;\n+    private final String fieldValue = \"testFieldValue\";\n+    private final String fieldKey = \"channel.common.name\";\n+\n+    @BeforeEach\n+    public void init() {\n+        configGroupRepository = Mockito.mock(ConfigGroupRepository.class);\n+        descriptorConfigRepository = Mockito.mock(DescriptorConfigRepository.class);\n+        configContextRepository = Mockito.mock(ConfigContextRepository.class);\n+        fieldValueRepository = Mockito.mock(FieldValueRepository.class);\n+        definedFieldRepository = Mockito.mock(DefinedFieldRepository.class);\n+        registeredDescriptorRepository = Mockito.mock(RegisteredDescriptorRepository.class);\n+        descriptorTypeRepository = Mockito.mock(DescriptorTypeRepository.class);\n+        encryptionUtility = createEncryptionUtility();\n+    }\n+\n+    @Test\n+    public void getAllJobsTest() {\n+        UUID uuid = UUID.randomUUID();\n+\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(1L, uuid);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(2L, 2L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(3L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        FieldValueEntity fieldValueEntity = new FieldValueEntity(3L, 4L, fieldValue);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+\n+        Mockito.when(configGroupRepository.findAll()).thenReturn(List.of(configGroupEntity));\n+        setupGetJobMocks(descriptorConfigEntity, configContextEntity, fieldValueEntity, definedFieldEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository, fieldValueRepository,\n+            encryptionUtility);\n+        List<ConfigurationJobModel> configurationJobModelList = configurationAccessor.getAllJobs();\n+\n+        assertEquals(1, configurationJobModelList.size());\n+        ConfigurationJobModel configurationJobModel = configurationJobModelList.get(0);\n+        assertEquals(uuid, configurationJobModel.getJobId());\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void getJobByIdTest() throws Exception {\n+        UUID jobId = UUID.randomUUID();\n+\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(1L, jobId);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(2L, 2L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(3L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        FieldValueEntity fieldValueEntity = new FieldValueEntity(3L, 4L, fieldValue);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+\n+        Mockito.when(configGroupRepository.findByJobId(Mockito.any())).thenReturn(List.of(configGroupEntity));\n+        setupGetJobMocks(descriptorConfigEntity, configContextEntity, fieldValueEntity, definedFieldEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository, fieldValueRepository,\n+            encryptionUtility);\n+        Optional<ConfigurationJobModel> configurationJobModelOptional = configurationAccessor.getJobById(jobId);\n+\n+        assertTrue(configurationJobModelOptional.isPresent());\n+        ConfigurationJobModel configurationJobModel = configurationJobModelOptional.get();\n+        assertEquals(jobId, configurationJobModel.getJobId());\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void getJobsByFrequency() {\n+        FrequencyType frequencyType = FrequencyType.DAILY;\n+        final Long jobId = 1L;\n+        UUID uuid = UUID.randomUUID();\n+        String fieldValueFrequency = frequencyType.name();\n+        final String fieldKeyFrequency = \"channel.common.frequency\";\n+\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(jobId, uuid);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(2L, 2L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(3L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        FieldValueEntity fieldValueEntity = new FieldValueEntity(3L, 4L, fieldValueFrequency);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKeyFrequency, false);\n+        definedFieldEntity.setId(4L);\n+\n+        Mockito.when(configGroupRepository.findAll()).thenReturn(List.of(configGroupEntity));\n+        setupGetJobMocks(descriptorConfigEntity, configContextEntity, fieldValueEntity, definedFieldEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository, fieldValueRepository,\n+            encryptionUtility);\n+        List<ConfigurationJobModel> configurationJobModelList = configurationAccessor.getJobsByFrequency(frequencyType);\n+\n+        assertEquals(1, configurationJobModelList.size());\n+        ConfigurationJobModel configurationJobModel = configurationJobModelList.get(0);\n+        assertEquals(uuid, configurationJobModel.getJobId());\n+        assertEquals(fieldValueFrequency, configurationJobModel.getFrequencyType().name());\n+    }\n+\n+    @Test\n+    public void getJobByIdNullTest() throws Exception {\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, null, null, null, null, null, null);\n+        try {\n+            configurationAccessor.getJobById(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void createJobTest() throws Exception {\n+        List<String> descriptorNames = List.of(\"descriptor-name-test\");\n+\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(\"channel.common.name\");\n+        configurationFieldModel.setFieldValue(fieldValue);\n+        List<ConfigurationFieldModel> configuredFields = List.of(configurationFieldModel);\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(\"name\", 1L);\n+        registeredDescriptorEntity.setId(2L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        configContextEntity.setId(3L);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(5L, 6L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(5L);\n+\n+        setupCreateJobMocks(registeredDescriptorEntity, configContextEntity, definedFieldEntity, descriptorConfigEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(registeredDescriptorRepository, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository,\n+            fieldValueRepository, null);\n+        ConfigurationJobModel configurationJobModel = configurationAccessor.createJob(descriptorNames, configuredFields);\n+\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void updateJobTest() throws Exception {\n+        UUID uuid = UUID.randomUUID();\n+        List<String> descriptorNames = List.of(\"descriptor-name-test\");\n+\n+        ConfigurationFieldModel configurationFieldModel = ConfigurationFieldModel.create(\"channel.common.name\");\n+        configurationFieldModel.setFieldValue(fieldValue);\n+        List<ConfigurationFieldModel> configuredFields = List.of(configurationFieldModel);\n+        RegisteredDescriptorEntity registeredDescriptorEntity = new RegisteredDescriptorEntity(\"name\", 1L);\n+        registeredDescriptorEntity.setId(2L);\n+        ConfigContextEntity configContextEntity = new ConfigContextEntity(configContextEnum.name());\n+        configContextEntity.setId(3L);\n+        DefinedFieldEntity definedFieldEntity = new DefinedFieldEntity(fieldKey, false);\n+        definedFieldEntity.setId(4L);\n+        DescriptorConfigEntity descriptorConfigEntity = new DescriptorConfigEntity(5L, 6L, DateUtils.createCurrentDateTimestamp(), DateUtils.createCurrentDateTimestamp());\n+        descriptorConfigEntity.setId(5L);\n+        ConfigGroupEntity configGroupEntity = new ConfigGroupEntity(6L, uuid);\n+\n+        Mockito.when(configGroupRepository.findByJobId(Mockito.any())).thenReturn(List.of(configGroupEntity));\n+        setupCreateJobMocks(registeredDescriptorEntity, configContextEntity, definedFieldEntity, descriptorConfigEntity);\n+\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(registeredDescriptorRepository, null, definedFieldRepository, descriptorConfigRepository, configGroupRepository, configContextRepository,\n+            fieldValueRepository, null);\n+        ConfigurationJobModel configurationJobModel = configurationAccessor.updateJob(uuid, descriptorNames, configuredFields);\n+\n+        Mockito.verify(descriptorConfigRepository).deleteById(Mockito.any());\n+        assertEquals(uuid, configurationJobModel.getJobId());\n+        assertEquals(fieldValue, configurationJobModel.getName());\n+    }\n+\n+    @Test\n+    public void updateJobNullIdTest() throws Exception {\n+        DefaultConfigurationAccessor configurationAccessor = new DefaultConfigurationAccessor(null, null, null, null, null, null, null, null);\n+        try {\n+            configurationAccessor.updateJob(null, null, null);\n+            fail();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be068c7629cdca6b563be70d56a375380c4cf3d5"}, "originalPosition": 229}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07f803a067e699cb4eca50e8e83343ac9186a352", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/07f803a067e699cb4eca50e8e83343ac9186a352", "committedDate": "2020-05-20T14:57:01Z", "message": "test: Adding messages to assertion fail methods"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjE5Njc0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984#pullrequestreview-415619674", "createdAt": "2020-05-20T18:44:59Z", "commit": {"oid": "07f803a067e699cb4eca50e8e83343ac9186a352"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1NjM3MDEx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/984#pullrequestreview-415637011", "createdAt": "2020-05-20T19:09:35Z", "commit": {"oid": "07f803a067e699cb4eca50e8e83343ac9186a352"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2735, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}