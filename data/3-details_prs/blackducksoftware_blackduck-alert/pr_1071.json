{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzNTI4OTI3", "number": 1071, "title": "Fix Sonar Cloud Issues", "bodyText": "", "createdAt": "2020-07-20T14:51:53Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071", "merged": true, "mergeCommit": {"oid": "bc43331608f9e15d5f56c29d0203ef17975011c5"}, "closed": true, "closedAt": "2020-07-20T17:36:30Z", "author": {"login": "gkillough"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc2x_ozgH2gAyNDUzNTI4OTI3OjhmOGM1ZDMyN2FlMjJlODk0MWMzYzkyZTIzM2Q5N2Q0YjM4ODZjNDA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc2z9GGgH2gAyNDUzNTI4OTI3OmIwMzM1NzczYmE3YzgwNThjN2E1OTE5ZGQ2YjJhYmU0ODdiNDJmMWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "8f8c5d327ae22e8941c3c92e233d97d4b3886c40", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8f8c5d327ae22e8941c3c92e233d97d4b3886c40", "committedDate": "2020-07-20T13:52:51Z", "message": "Fix(Jira): Resolve cognitive complexity sonar cloud issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "618ebb9c6480fb7b151a15826984bfe73cebb3e2", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/618ebb9c6480fb7b151a15826984bfe73cebb3e2", "committedDate": "2020-07-20T14:05:01Z", "message": "Fix(Azure Library): Resolve duplicate String.format in work item type state service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/61a3d34d819f7cd98d37168202b54c9753eaf908", "committedDate": "2020-07-20T14:51:04Z", "message": "Fix(Azure Library): Create constants for duplicate strings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjk1Mzg1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451695385", "createdAt": "2020-07-20T15:05:15Z", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNToxNVrOG0R6Mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNToxNVrOG0R6Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MjU2Mw==", "bodyText": "Moved these methods up.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#discussion_r457472563", "createdAt": "2020-07-20T15:05:15Z", "author": {"login": "gkillough"}, "path": "alert-jira/src/main/java/com/synopsys/integration/alert/jira/common/util/JiraIssueHandler.java", "diffHunk": "@@ -109,6 +109,29 @@ public JiraIssueHandler(Gson gson, JiraTransitionHandler jiraTransitionHandler,\n         return Optional.empty();\n     }\n \n+    @Override\n+    protected void logIssueAction(String issueTrackerProjectName, IssueTrackerRequest request) {\n+        JiraIssueSearchProperties issueProperties = request.getIssueSearchProperties();\n+        String issueTrackerProjectVersion = issueProperties.getSubTopicValue() != null ? issueProperties.getSubTopicValue() : \"unknown\";\n+        String arbitraryItemSubComponent = issueProperties.getSubComponentValue() != null ? issueProperties.getSubTopicValue() : \"unknown\";\n+        logger.debug(\"Attempting the {} action on the project {}. Provider: {}, Provider Url: {}, Provider Project: {}[{}]. Category: {}, Component: {}, SubComponent: {}.\",\n+            request.getOperation().name(), issueTrackerProjectName, issueProperties.getProvider(), issueProperties.getProviderUrl(), issueProperties.getTopicValue(), issueTrackerProjectVersion, issueProperties.getCategory(),\n+            issueProperties.getComponentValue(),\n+            arbitraryItemSubComponent);\n+    }\n+\n+    private void addIssueProperties(String issueKey, JiraIssueSearchProperties issueProperties) throws IntegrationException {\n+        jiraIssuePropertyHelper.addPropertiesToIssue(issueKey, issueProperties);\n+    }\n+\n+    private IssueRequestModelFieldsBuilder createFieldsBuilder(IssueContentModel contentModel) {\n+        IssueRequestModelFieldsBuilder fieldsBuilder = new IssueRequestModelFieldsBuilder();\n+        fieldsBuilder.setSummary(contentModel.getTitle());\n+        fieldsBuilder.setDescription(contentModel.getDescription());\n+\n+        return fieldsBuilder;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjk1OTU4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451695958", "createdAt": "2020-07-20T15:05:52Z", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNTo1MlrOG0R8UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNTo1MlrOG0R8UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3MzEwNQ==", "bodyText": "Deleted lines: 126 to 149\n\nAbstracted this to its own method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#discussion_r457473105", "createdAt": "2020-07-20T15:05:52Z", "author": {"login": "gkillough"}, "path": "alert-jira/src/main/java/com/synopsys/integration/alert/jira/common/util/JiraIssueHandler.java", "diffHunk": "@@ -120,64 +143,53 @@ protected boolean transitionIssue(IssueResponseModel issueModel, IssueConfig iss\n     }\n \n     private AlertException improveRestException(IntegrationRestException restException, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n         JsonObject responseContent = gson.fromJson(restException.getHttpResponseContent(), JsonObject.class);\n-        List<String> responseErrors = new ArrayList<>();\n         if (null != responseContent) {\n-            if (responseContent.has(\"errors\")) {\n-                JsonObject errors = responseContent.get(\"errors\").getAsJsonObject();\n-                if (errors.has(\"reporter\")) {\n-                    JsonElement reporterErrorMessage = errors.get(\"reporter\");\n-                    if (null != reporterErrorMessage) {\n-                        return new AlertFieldException(Map.of(\n-                            getIssueCreatorFieldKey(),\n-                            String.format(\"There was a problem assigning '%s' to the issue. Please ensure that the user is assigned to the project and has permission to transition issues. Error: %s\", issueCreatorEmail, reporterErrorMessage)\n-                        ));\n-                    }\n-                } else {\n-                    Set<Map.Entry<String, JsonElement>> entries = errors.entrySet();\n-                    List<String> fieldErrors = entries.stream()\n-                                                   .map(entry -> String.format(\"Field '%s' has error %s\", entry.getKey(), entry.getValue()))\n-                                                   .collect(Collectors.toList());\n-                    responseErrors.addAll(fieldErrors);\n-                }\n-\n-            }\n-            if (responseContent.has(\"errorMessages\")) {\n-                JsonArray errorMessages = responseContent.get(\"errorMessages\").getAsJsonArray();\n-                for (JsonElement errorMessage : errorMessages) {\n-                    responseErrors.add(errorMessage.getAsString());\n+            try {\n+                List<String> responseErrors = extractErrorsFromResponseContent(responseContent, issueCreatorEmail);\n+                if (!responseErrors.isEmpty()) {\n+                    message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n                 }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjk3Mjk1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451697295", "createdAt": "2020-07-20T15:07:17Z", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNzoxOFrOG0SBaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowNzoxOFrOG0SBaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3NDQxMQ==", "bodyText": "Abstracted this to its own method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#discussion_r457474411", "createdAt": "2020-07-20T15:07:18Z", "author": {"login": "gkillough"}, "path": "alert-jira/src/main/java/com/synopsys/integration/alert/jira/common/util/JiraIssueHandler.java", "diffHunk": "@@ -120,64 +143,53 @@ protected boolean transitionIssue(IssueResponseModel issueModel, IssueConfig iss\n     }\n \n     private AlertException improveRestException(IntegrationRestException restException, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n         JsonObject responseContent = gson.fromJson(restException.getHttpResponseContent(), JsonObject.class);\n-        List<String> responseErrors = new ArrayList<>();\n         if (null != responseContent) {\n-            if (responseContent.has(\"errors\")) {\n-                JsonObject errors = responseContent.get(\"errors\").getAsJsonObject();\n-                if (errors.has(\"reporter\")) {\n-                    JsonElement reporterErrorMessage = errors.get(\"reporter\");\n-                    if (null != reporterErrorMessage) {\n-                        return new AlertFieldException(Map.of(\n-                            getIssueCreatorFieldKey(),\n-                            String.format(\"There was a problem assigning '%s' to the issue. Please ensure that the user is assigned to the project and has permission to transition issues. Error: %s\", issueCreatorEmail, reporterErrorMessage)\n-                        ));\n-                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjk4OTA4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451698908", "createdAt": "2020-07-20T15:09:06Z", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowOTowNlrOG0SHYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNTowOTowNlrOG0SHYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3NTkzNg==", "bodyText": "I think it would be even better if we could somehow use these constante in the template strings themselves", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#discussion_r457475936", "createdAt": "2020-07-20T15:09:06Z", "author": {"login": "bamandel"}, "path": "azure-boards-common/src/main/java/com/synopsys/integration/azure/boards/common/service/state/AzureWorkItemTypeStateService.java", "diffHunk": "@@ -40,6 +40,13 @@\n     public static final AzureSpecTemplate API_SPEC_ORGANIZATION_PROCESS_WORKITEMTYPE_STATES = new AzureSpecTemplate(\"/{organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states\");\n     public static final AzureSpecTemplate API_SPEC_ORGANIZATION_PROCESS_WORKITEMTYPE_STATE_INDIVIDUAL = new AzureSpecTemplate(\"/{organization}/_apis/work/processes/{processId}/workItemTypes/{witRefName}/states/{stateId}\");\n \n+    public static final String PATH_ORGANIZATION_REPLACEMENT = \"{organization}\";\n+    public static final String PATH_PROJECT_REPLACEMENT = \"{project}\";\n+    public static final String PATH_TYPE_REPLACEMENT = \"{type}\";\n+    public static final String PATH_PROCESS_ID_REPLACEMENT = \"{processId}\";\n+    public static final String PATH_WIT_REF_NAME_REPLACEMENT = \"{witRefName}\";\n+    public static final String PATH_STATE_ID_REPLACEMENT = \"{stateId}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "originalPosition": 9}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzAwNzcx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451700771", "createdAt": "2020-07-20T15:11:08Z", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMTowOFrOG0SOXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNToxMTowOFrOG0SOXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ3NzcyNA==", "bodyText": "We could also use Optional's to reduce the cognitive complexity here. Something like this\nOptional<JsonObject> errorsOptional = Optional.ofNullable(responseContent)\n    .filter(json -> json.has(\"errors\"))\n    .map(json -> json.get(\"errors\").getAsJsonObject());\nOptional<JsonElement> errorsReporterOptional = errorsOptional\n    .filter(errorsJson -> errorsJson.has(\"reporter\"))\n    .map(errorsJson -> errorsJson.get(\"reporter\"));\nif (errorsReporterOptional.isPresent()) {\n    throwReporterException(errorsReporterOptional.get(), issueCreatorEmail);\n}\nThe optionals should help reduce the nested if's when dealing with the JsonObjects.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#discussion_r457477724", "createdAt": "2020-07-20T15:11:08Z", "author": {"login": "jamesrichard91"}, "path": "alert-jira/src/main/java/com/synopsys/integration/alert/jira/common/util/JiraIssueHandler.java", "diffHunk": "@@ -120,64 +143,53 @@ protected boolean transitionIssue(IssueResponseModel issueModel, IssueConfig iss\n     }\n \n     private AlertException improveRestException(IntegrationRestException restException, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n         JsonObject responseContent = gson.fromJson(restException.getHttpResponseContent(), JsonObject.class);\n-        List<String> responseErrors = new ArrayList<>();\n         if (null != responseContent) {\n-            if (responseContent.has(\"errors\")) {\n-                JsonObject errors = responseContent.get(\"errors\").getAsJsonObject();\n-                if (errors.has(\"reporter\")) {\n-                    JsonElement reporterErrorMessage = errors.get(\"reporter\");\n-                    if (null != reporterErrorMessage) {\n-                        return new AlertFieldException(Map.of(\n-                            getIssueCreatorFieldKey(),\n-                            String.format(\"There was a problem assigning '%s' to the issue. Please ensure that the user is assigned to the project and has permission to transition issues. Error: %s\", issueCreatorEmail, reporterErrorMessage)\n-                        ));\n-                    }\n-                } else {\n-                    Set<Map.Entry<String, JsonElement>> entries = errors.entrySet();\n-                    List<String> fieldErrors = entries.stream()\n-                                                   .map(entry -> String.format(\"Field '%s' has error %s\", entry.getKey(), entry.getValue()))\n-                                                   .collect(Collectors.toList());\n-                    responseErrors.addAll(fieldErrors);\n-                }\n-\n-            }\n-            if (responseContent.has(\"errorMessages\")) {\n-                JsonArray errorMessages = responseContent.get(\"errorMessages\").getAsJsonArray();\n-                for (JsonElement errorMessage : errorMessages) {\n-                    responseErrors.add(errorMessage.getAsString());\n+            try {\n+                List<String> responseErrors = extractErrorsFromResponseContent(responseContent, issueCreatorEmail);\n+                if (!responseErrors.isEmpty()) {\n+                    message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n                 }\n+            } catch (AlertFieldException reporterException) {\n+                return reporterException;\n             }\n         }\n-\n-        String message = restException.getMessage();\n-        if (!responseErrors.isEmpty()) {\n-            message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n-        }\n-\n         return new AlertException(message, restException);\n     }\n \n-    private void addIssueProperties(String issueKey, JiraIssueSearchProperties issueProperties) throws IntegrationException {\n-        jiraIssuePropertyHelper.addPropertiesToIssue(issueKey, issueProperties);\n-    }\n-\n-    private IssueRequestModelFieldsBuilder createFieldsBuilder(IssueContentModel contentModel) {\n-        IssueRequestModelFieldsBuilder fieldsBuilder = new IssueRequestModelFieldsBuilder();\n-        fieldsBuilder.setSummary(contentModel.getTitle());\n-        fieldsBuilder.setDescription(contentModel.getDescription());\n+    private List<String> extractErrorsFromResponseContent(JsonObject responseContent, String issueCreatorEmail) throws AlertFieldException {\n+        List<String> responseErrors = new ArrayList<>();\n+        if (responseContent.has(\"errors\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzAxNDkz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451701493", "createdAt": "2020-07-20T15:11:49Z", "commit": {"oid": "61a3d34d819f7cd98d37168202b54c9753eaf908"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "03beaea3c21a20d3e0a6c8d54b02371af68f7b32", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/03beaea3c21a20d3e0a6c8d54b02371af68f7b32", "committedDate": "2020-07-20T15:52:27Z", "message": "Fix(Jira): Add further abstraction through optionals to reduce cognitive complexity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNzQ4NTEx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1071#pullrequestreview-451748511", "createdAt": "2020-07-20T16:03:19Z", "commit": {"oid": "03beaea3c21a20d3e0a6c8d54b02371af68f7b32"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0335773ba7c8058c7a5919dd6b2abe487b42f1b", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b0335773ba7c8058c7a5919dd6b2abe487b42f1b", "committedDate": "2020-07-20T16:09:53Z", "message": "Fix(Jira): Remove unnecessary optional usage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2596, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}