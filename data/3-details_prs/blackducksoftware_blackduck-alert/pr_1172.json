{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4MjIzOTE3", "number": 1172, "title": "Feat action response", "bodyText": "Refactor controllers and actions to return a response object.  This is the initial set of changes to support this design change.", "createdAt": "2020-09-16T20:20:41Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172", "merged": true, "mergeCommit": {"oid": "f99d38fad6010822f8d4ea0e5634e14c8e8f1037"}, "closed": true, "closedAt": "2020-09-17T19:51:49Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 83, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdEtHweAH2gAyNDg4MjIzOTE3OmJmNGM2YjVmZjExMTYxYzE2OGJmNzc1NzY1ZWZhYTNhMjVkNzhkNWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ2fIjAFqTQ5MDkzODUwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "bf4c6b5ff11161c168bf775765efaa3a25d78d5e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/bf4c6b5ff11161c168bf775765efaa3a25d78d5e", "committedDate": "2020-09-01T20:07:08Z", "message": "feat: Create the initial object for the results of actions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "814624bdea0ef4760408270189d3add5d552ce2b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/814624bdea0ef4760408270189d3add5d552ce2b", "committedDate": "2020-09-01T20:08:38Z", "message": "feat: Implement action result with custom endpoints."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3def3fc2b284b9dd7e24307533b8627338e606b2", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3def3fc2b284b9dd7e24307533b8627338e606b2", "committedDate": "2020-09-02T13:55:14Z", "message": "refactor: Fix the endpoints to use ActionResult."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507990affe2c28be1136ec9be54c5b4874fe11a8", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/507990affe2c28be1136ec9be54c5b4874fe11a8", "committedDate": "2020-09-02T15:04:27Z", "message": "refactor: Remove unused class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99cd70c8b26341b4fbe7d3be5b702df264cc109b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/99cd70c8b26341b4fbe7d3be5b702df264cc109b", "committedDate": "2020-09-02T15:32:38Z", "message": "refactor: Clean up some code smells."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42590c60b2986c7b2b27caae549671d2290b31e1", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/42590c60b2986c7b2b27caae549671d2290b31e1", "committedDate": "2020-09-02T17:52:00Z", "message": "refactor: Updates based on PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e75881c938cb99f0e9657122d9e6d285c349e476", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e75881c938cb99f0e9657122d9e6d285c349e476", "committedDate": "2020-09-02T17:53:38Z", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f83b1216193684482d7533508e8a409329c4fe10", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f83b1216193684482d7533508e8a409329c4fe10", "committedDate": "2020-09-02T17:55:59Z", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_custom_endpoint_actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5bdddb545c0b2e0f120f5dbd46990b2af9f215d3", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5bdddb545c0b2e0f120f5dbd46990b2af9f215d3", "committedDate": "2020-09-02T18:35:05Z", "message": "refactor: Implement OAuth endpoint changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8420491decbaceda34d315a975f6df1ae5e8eb71", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8420491decbaceda34d315a975f6df1ae5e8eb71", "committedDate": "2020-09-02T18:37:00Z", "message": "Merge pull request #1153 from blackducksoftware/ps_custom_endpoint_actions\n\nPs custom endpoint actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96d05519c92f31b613cfdc30c2cdfc5f31a83aa3", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/96d05519c92f31b613cfdc30c2cdfc5f31a83aa3", "committedDate": "2020-09-02T19:30:11Z", "message": "Refactor: Move the custom endpoints in the action package."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "978367c24ce6fc030077e702c0d40fa6f894a723", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/978367c24ce6fc030077e702c0d40fa6f894a723", "committedDate": "2020-09-03T15:41:34Z", "message": "refactor: Create controllers for each custom endpoint."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b54107fc5a99b54e529beb507e82a2cf9e480126", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b54107fc5a99b54e529beb507e82a2cf9e480126", "committedDate": "2020-09-03T17:11:33Z", "message": "refactor: Remove the CustomEndpointManager class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "261daefafa7df23b217acedf4312dbebb5a81882", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/261daefafa7df23b217acedf4312dbebb5a81882", "committedDate": "2020-09-03T17:12:54Z", "message": "refactor: Remove CustomEndpointManager from common project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f29bd3a7c76318f834fe29657db615b08e5f7054", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f29bd3a7c76318f834fe29657db615b08e5f7054", "committedDate": "2020-09-03T20:00:18Z", "message": "refactor: Only have the CustomEndpoint class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "054516d8f0ac7961b50d6faee9b11b9d26816f85", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/054516d8f0ac7961b50d6faee9b11b9d26816f85", "committedDate": "2020-09-03T20:08:53Z", "message": "refactor: Rename ActionResult to ActionResponse."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2baa7161c8a41872d577115c34493308286385af", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2baa7161c8a41872d577115c34493308286385af", "committedDate": "2020-09-03T20:19:49Z", "message": "Rename CustomEndpoint to CustomFunctionAction and move to action package."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9f50c3c4d9d8a2228bb99b5d544238fe434d09c", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c9f50c3c4d9d8a2228bb99b5d544238fe434d09c", "committedDate": "2020-09-04T11:50:31Z", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4f1b9ce03ecd0175de22e3f938b74a0beba79a0c", "committedDate": "2020-09-04T13:09:06Z", "message": "refactor: Have the ResponseFactory set message default to null."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91b98531b66318957abacfbb6646803ebcfed3c3", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/91b98531b66318957abacfbb6646803ebcfed3c3", "committedDate": "2020-09-04T13:10:17Z", "message": "refactor: Create response objects for the select options."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64cbae0712409eefabb4bac7893b2ef82fd75eb", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/e64cbae0712409eefabb4bac7893b2ef82fd75eb", "committedDate": "2020-09-04T13:45:57Z", "message": "refactor: Change the custom functions using lists to return objects."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/712aceb7cfc0c7e3fea272fad4ca07e0e054b7cb", "committedDate": "2020-09-04T13:47:14Z", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_function_controllers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29bd761870c4240dd20b74d11aadad167ee63c86", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/29bd761870c4240dd20b74d11aadad167ee63c86", "committedDate": "2020-09-04T14:01:44Z", "message": "chore: Add copyright headers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e7b1f3a1d329cee5ca26abf056b836aee59b898", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3e7b1f3a1d329cee5ca26abf056b836aee59b898", "committedDate": "2020-09-04T14:07:14Z", "message": "Merge remote-tracking branch 'origin/ps_function_controllers' into ps_function_select_options"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c7492c2a2a94eb274ba378392306ac03002b8f8", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8c7492c2a2a94eb274ba378392306ac03002b8f8", "committedDate": "2020-09-04T14:22:07Z", "message": "chore: Add copyright headers."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c451757e588fd17ec4daa1d84675533391495779", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c451757e588fd17ec4daa1d84675533391495779", "committedDate": "2020-09-04T15:27:48Z", "message": "refactor: Fix the email address selection and enforce an options field is JSON."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb8e1508985ea56d282a1d2c1ad37fd049bfcbb9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/fb8e1508985ea56d282a1d2c1ad37fd049bfcbb9", "committedDate": "2020-09-04T16:04:53Z", "message": "Merge pull request #1160 from blackducksoftware/ps_function_select_options\n\nUpdate the select options to use an object instead of List<type>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63924b49086b623fa93b2395a4d31da918e82222", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/63924b49086b623fa93b2395a4d31da918e82222", "committedDate": "2020-09-04T17:03:47Z", "message": "Merge pull request #1158 from blackducksoftware/ps_function_controllers\n\nPs function controllers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4d1725df2b0a0d55c38d337e88f11f0aec7eccd", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c4d1725df2b0a0d55c38d337e88f11f0aec7eccd", "committedDate": "2020-09-04T19:55:36Z", "message": "feat: Start implementing abstract actions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f4e01de4a6ffc1b7f1c7b3855faffb4685f3abee", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f4e01de4a6ffc1b7f1c7b3855faffb4685f3abee", "committedDate": "2020-09-08T12:49:25Z", "message": "feat: Initial implementation of abstract action class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04acb3ca495ab8e01e4dfa46b59897671e81abeb", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/04acb3ca495ab8e01e4dfa46b59897671e81abeb", "committedDate": "2020-09-08T20:35:50Z", "message": "refactor: Change the certificates controller to implement new interface."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39bdee6e6897d739cd249e6f274bb61965219968", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/39bdee6e6897d739cd249e6f274bb61965219968", "committedDate": "2020-09-09T15:28:22Z", "message": "feat: Implement Job and Config actions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "523364897938337d95bbf45c9937e32207192e25", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/523364897938337d95bbf45c9937e32207192e25", "committedDate": "2020-09-09T15:48:15Z", "message": "fix: Fix the reset password test."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c1786e339713ce0ddfa6e42c011a7a4712329292", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c1786e339713ce0ddfa6e42c011a7a4712329292", "committedDate": "2020-09-09T19:18:42Z", "message": "refactor: ConfigController and ConfigActions use new abstract classes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "283c521bd308a36c351d62a6d21dcd7411a890c3", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/283c521bd308a36c351d62a6d21dcd7411a890c3", "committedDate": "2020-09-10T13:07:41Z", "message": "refactor: Change Job controller and actions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b95e78e638862ea3c404f3196d1e0ccbcae81d2", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7b95e78e638862ea3c404f3196d1e0ccbcae81d2", "committedDate": "2020-09-10T14:06:39Z", "message": "refactor: Rename some methods to make more sense in the Swagger doc."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eba86dcf72ccb562b6bce196b637d6d54525fef", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/2eba86dcf72ccb562b6bce196b637d6d54525fef", "committedDate": "2020-09-10T14:24:12Z", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "374d1dddcdb270528498838ae5bbd469ce46b21e", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/374d1dddcdb270528498838ae5bbd469ce46b21e", "committedDate": "2020-09-10T14:34:10Z", "message": "Merge remote-tracking branch 'origin/feat_action_response' into ps_abstract_actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ca034814b5fdcd5b0d66f95ceb7870ce8f6c3583", "committedDate": "2020-09-10T15:27:40Z", "message": "fix: Fix parsing the job id to avoid an exception."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b81d6d6bdf34e0c2f392c0b9ceb07e4affd827d1", "committedDate": "2020-09-10T19:08:42Z", "message": "refactor: Remove unused code in certificates and fix tests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79d758c6a9f2d558b2728c4089863a4791796c5", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f79d758c6a9f2d558b2728c4089863a4791796c5", "committedDate": "2020-09-11T12:48:19Z", "message": "fix: Rename FieldValueModel  to  to fix serialization."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c513540ae543cb01250d0bcae9601dce6950e1aa", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c513540ae543cb01250d0bcae9601dce6950e1aa", "committedDate": "2020-09-11T14:50:07Z", "message": "refactor: Implement current PR suggestions."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21256a169e148361ee2907b34c3c351b652ff130", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/21256a169e148361ee2907b34c3c351b652ff130", "committedDate": "2020-09-11T16:41:33Z", "message": "refactor: Implement PR feedback for additional interfaces."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78f99f7ec4c1a733ce88c250aaa8aaae76906aea", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/78f99f7ec4c1a733ce88c250aaa8aaae76906aea", "committedDate": "2020-09-14T11:50:14Z", "message": "refactor: Implement latest PR feedback."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "518a9c5565c17dc45a70539bf0566ce4ad00b8e7", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/518a9c5565c17dc45a70539bf0566ce4ad00b8e7", "committedDate": "2020-09-14T15:47:14Z", "message": "Merge pull request #1162 from blackducksoftware/ps_abstract_actions\n\nCreate a better well defined API for actions and controllers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "26467d924f59866b5d4567a6e3092d5f1e2a2872", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/26467d924f59866b5d4567a6e3092d5f1e2a2872", "committedDate": "2020-09-15T17:30:55Z", "message": "feat: Implement actions and reducers for validating jobs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45e336a3dfe4daa68e0033135ef62dde2689b385", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/45e336a3dfe4daa68e0033135ef62dde2689b385", "committedDate": "2020-09-15T19:13:48Z", "message": "refactor: Initial work for updating actions and reducers for globalConfiguration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df7b3ea98904e6553b1387d77803601d35e506c6", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/df7b3ea98904e6553b1387d77803601d35e506c6", "committedDate": "2020-09-15T20:31:56Z", "message": "refactor: Validate before saving."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c404b87d5e29a6c13d51b9355d56ed48e376e7b", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4c404b87d5e29a6c13d51b9355d56ed48e376e7b", "committedDate": "2020-09-16T13:04:39Z", "message": "fix: Update the distribution jobs to show validation errors."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d423bc1d9f327d96e1d69a11bce5023c932c115d", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d423bc1d9f327d96e1d69a11bce5023c932c115d", "committedDate": "2020-09-16T13:08:23Z", "message": "chore: Update comment for the getValue/setValue methods."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b5c39cf513474e45148c300821acc58cb30aa16", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7b5c39cf513474e45148c300821acc58cb30aa16", "committedDate": "2020-09-16T13:15:56Z", "message": "fix: Update the status for distribution test success."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8db117a41bc6b0cf1d9f29e0709de9aa5a5b592f", "committedDate": "2020-09-16T13:57:13Z", "message": "fix: Remove unused dispatch call."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "114ed463fd6599b6cb7ba1bfbd10f2d191e25bf3", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/114ed463fd6599b6cb7ba1bfbd10f2d191e25bf3", "committedDate": "2020-09-16T16:04:19Z", "message": "Merge pull request #1168 from blackducksoftware/ps_distribution_validation\n\ndistribution validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f178dd5397b302e1b46e0a2f93dfa99aff5d8ebd", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f178dd5397b302e1b46e0a2f93dfa99aff5d8ebd", "committedDate": "2020-09-16T17:51:15Z", "message": "refactor: Update GlobalConfiguration to use new action responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "891616a43d2127a8b4c8c5311b49a22cbff125cb", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/891616a43d2127a8b4c8c5311b49a22cbff125cb", "committedDate": "2020-09-16T17:51:58Z", "message": "Merge branch 'feat_action_response' into mc_action_response_globalConfig"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c7602e3af2eb3bd64a3446df48116b7d12d2bac", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5c7602e3af2eb3bd64a3446df48116b7d12d2bac", "committedDate": "2020-09-16T17:56:12Z", "message": "fix: Make sure forbidden errors propagate to client to prevent access."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d7dddd23be85189742a8c29566d941ec7b56622", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/1d7dddd23be85189742a8c29566d941ec7b56622", "committedDate": "2020-09-16T18:30:52Z", "message": "fix: Fix the delete of distribution jobs."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9faafff51fcc567d9bb1445c7af43b8bfc596fd9", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9faafff51fcc567d9bb1445c7af43b8bfc596fd9", "committedDate": "2020-09-16T18:51:23Z", "message": "style: Fixing multiline method signature mistake"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5d87f64b1a72ec0b5d18a609767eb03fe94ff69", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b5d87f64b1a72ec0b5d18a609767eb03fe94ff69", "committedDate": "2020-09-16T18:54:12Z", "message": "Merge pull request #1170 from blackducksoftware/mc_action_response_globalConfig\n\nglobal config validation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b4dae6d6999fb600d63571fbce60a0bbd28ebf7a", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b4dae6d6999fb600d63571fbce60a0bbd28ebf7a", "committedDate": "2020-09-16T19:33:27Z", "message": "Merge pull request #1171 from blackducksoftware/ps_validation_fix\n\n validation fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a69dfd0e5590f032bff97631d07ffd9a9376c28", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/9a69dfd0e5590f032bff97631d07ffd9a9376c28", "committedDate": "2020-09-16T19:41:09Z", "message": "Merge remote-tracking branch 'origin/master' into feat_action_response"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/35d1071b51a560107ca64341074fafb31f32d032", "committedDate": "2020-09-16T20:18:13Z", "message": "Refactor: Convert to new abstract function for processing type."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDEyMTk4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490012198", "createdAt": "2020-09-16T20:53:13Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1MzoxNFrOHTD0aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMDo1MzoxNFrOHTD0aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc0NzU2MA==", "bodyText": "So the assumption is that every \"function\" requires execute permission?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489747560", "createdAt": "2020-09-16T20:53:14Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/CustomFunctionAction.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public abstract class CustomFunctionAction<T> {\n+    public static final String API_FUNCTION_URL = \"/api/function\";\n+    private AuthorizationManager authorizationManager;\n+\n+    public CustomFunctionAction(AuthorizationManager authorizationManager) {\n+        this.authorizationManager = authorizationManager;\n+    }\n+\n+    public ActionResponse<T> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            if (!authorizationManager.hasExecutePermission(fieldModel.getContext(), fieldModel.getDescriptorName())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDE5MjIz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490019223", "createdAt": "2020-09-16T21:04:03Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowNDowM1rOHTEJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowNDowM1rOHTEJew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1Mjk1NQ==", "bodyText": "Is there a reason we are keeping this around? It seems like we have been changing the endpoints to return their own custom versions of FieldOptions. EX: ProviderProjectOptions.\nIt seems like the code is split between using this class as a general Option vs custom implementations of FieldOptions. Is the plan to use the class to replace those custom classes? or to replace this by creating more custom classes?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489752955", "createdAt": "2020-09-16T21:04:03Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/LabelValueSelectOptions.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field;\n+\n+import java.util.List;\n+\n+public class LabelValueSelectOptions extends FieldOptions<LabelValueSelectOption> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDIyNDEx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490022411", "createdAt": "2020-09-16T21:09:07Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowOTowN1rOHTEThQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMTowOTowN1rOHTEThQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NTUyNQ==", "bodyText": "We may want to discuss not exposing the optOut field, since it currently does not serve a functional purpose.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489755525", "createdAt": "2020-09-16T21:09:07Z", "author": {"login": "jamesrichard91"}, "path": "src/main/java/com/synopsys/integration/alert/channel/email/web/EmailAddressSelectOption.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.email.web;\n+\n+import com.synopsys.integration.alert.common.rest.model.AlertSerializableModel;\n+\n+public class EmailAddressSelectOption extends AlertSerializableModel {\n+    private String emailAddress;\n+    private Boolean optOut;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMDI1MjUw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490025250", "createdAt": "2020-09-16T21:13:45Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToxMzo0NVrOHTEchQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQyMToxMzo0NVrOHTEchQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTc1NzgyOQ==", "bodyText": "This seems odd. Why did this get changed to blackducksoftware?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r489757829", "createdAt": "2020-09-16T21:13:45Z", "author": {"login": "jamesrichard91"}, "path": "src/test/java/com/synopsys/integration/alert/component/settings/PasswordResetServiceTest.java", "diffHunk": "@@ -110,7 +110,7 @@ public void resetPasswordValidTestIT() throws AlertException {\n         addConfigurationFieldToMap(keyToFieldMap, EmailPropertyKeys.JAVAMAIL_PORT_KEY.getPropertyKey(), testProperties.getProperty(TestPropertyKey.TEST_EMAIL_SMTP_PORT));\n \n         String username = \"username\";\n-        UserModel userModel = UserModel.newUser(username, \"\", \"noreply@synopsys.com\", AuthenticationType.DATABASE, Set.of(), true);\n+        UserModel userModel = UserModel.newUser(username, \"\", \"noreply@blackducksoftware.com\", AuthenticationType.DATABASE, Set.of(), true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTU4ODY2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490558866", "createdAt": "2020-09-17T12:52:25Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1MjoyNVrOHTgkHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1MjoyNVrOHTgkHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIxODUyNw==", "bodyText": "There is a space before the colon.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490218527", "createdAt": "2020-09-17T12:52:25Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/ValidationActionResponse.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class ValidationActionResponse extends ActionResponse<ValidationResponseModel> {\n+\n+    public static ValidationActionResponse createResponseFromIntegrationRestException(IntegrationRestException integrationRestException) {\n+        String exceptionMessage = integrationRestException.getMessage();\n+        String message = exceptionMessage;\n+        if (StringUtils.isNotBlank(integrationRestException.getHttpStatusMessage())) {\n+            message += \" : \" + integrationRestException.getHttpStatusMessage();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTYxOTkw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490561990", "createdAt": "2020-09-17T12:55:59Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1NjowMFrOHTgtqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1NjowMFrOHTgtqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMDk3MQ==", "bodyText": "I'm still not in love with the naming here. createAfterChecks sounds like it will perform checks before creating IMO. createWithoutChecks seems like it would be more appropriate.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490220971", "createdAt": "2020-09-17T12:56:00Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createAfterChecks(FieldModel resource);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTYyNTIw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490562520", "createdAt": "2020-09-17T12:56:36Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1NjozNlrOHTgvKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1NjozNlrOHTgvKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMTM1Mw==", "bodyText": "Can this method be final? Is there a reason not to make it final here?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490221353", "createdAt": "2020-09-17T12:56:36Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractConfigResourceActions.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractConfigResourceActions implements LongResourceActions<FieldModel>, TestAction<FieldModel>, ValidateAction<FieldModel> {\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractConfigResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract ActionResponse<FieldModel> createAfterChecks(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> deleteAfterChecks(Long id);\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllAfterChecks();\n+\n+    protected abstract ActionResponse<List<FieldModel>> readAllByContextAndDescriptorAfterChecks(String context, String descriptorName);\n+\n+    protected abstract Optional<FieldModel> findFieldModel(Long id);\n+\n+    protected abstract ValidationActionResponse testAfterChecks(FieldModel resource);\n+\n+    protected abstract ActionResponse<FieldModel> updateAfterChecks(Long id, FieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(FieldModel resource);\n+\n+    public ActionResponse<List<FieldModel>> getAllByContextAndDescriptor(String context, String descriptorName) {\n+        if (!authorizationManager.hasReadPermission(context, descriptorName)) {\n+            return ActionResponse.createForbiddenResponse();\n+        }\n+        return readAllByContextAndDescriptorAfterChecks(context, descriptorName);\n+    }\n+\n+    @Override\n+    public ActionResponse<FieldModel> create(FieldModel resource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTY0ODY5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490564869", "createdAt": "2020-09-17T12:59:11Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1OToxMVrOHTg2Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMjo1OToxMVrOHTg2Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMzE2Mg==", "bodyText": "@bamandel Did you create a ticket to investigate throwing AlertDatabaseConstraintException? I think no-args methods like this are definitely a good candidate to remove the exception.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490223162", "createdAt": "2020-09-17T12:59:11Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+\n+    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+\n+    private Set<String> getDescriptorNames() {\n+        Set<String> descriptorNames = Set.of();\n+        try {\n+            descriptorNames = descriptorAccessor.getRegisteredDescriptors()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTY1ODI3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490565827", "createdAt": "2020-09-17T13:00:15Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMDoxNVrOHTg5FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMDoxNVrOHTg5FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyMzg5Mg==", "bodyText": "Same comment about final as is in the other ResourceActions abstract class.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490223892", "createdAt": "2020-09-17T13:00:15Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/AbstractJobResourceActions.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+import java.util.Collection;\n+import java.util.EnumSet;\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.function.BiFunction;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.http.HttpStatus;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.ValidationActionResponse;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.DescriptorType;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.RegisteredDescriptorModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+\n+public abstract class AbstractJobResourceActions implements JobResourceActions, ValidateAction<JobFieldModel>, TestAction<JobFieldModel> {\n+    private static final EnumSet<DescriptorType> ALLOWED_JOB_DESCRIPTOR_TYPES = EnumSet.of(DescriptorType.PROVIDER, DescriptorType.CHANNEL);\n+    private AuthorizationManager authorizationManager;\n+    private DescriptorAccessor descriptorAccessor;\n+\n+    public AbstractJobResourceActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor) {\n+        this.authorizationManager = authorizationManager;\n+        this.descriptorAccessor = descriptorAccessor;\n+    }\n+\n+    protected abstract Optional<JobFieldModel> findJobFieldModel(UUID id);\n+\n+    protected abstract ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> deleteAfterChecks(UUID id);\n+\n+    protected abstract ActionResponse<List<JobFieldModel>> readAllAfterChecks();\n+\n+    protected abstract ValidationActionResponse testAfterChecks(JobFieldModel resource);\n+\n+    protected abstract ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource);\n+\n+    protected abstract ValidationActionResponse validateAfterChecks(JobFieldModel resource);\n+\n+    private Set<String> getDescriptorNames() {\n+        Set<String> descriptorNames = Set.of();\n+        try {\n+            descriptorNames = descriptorAccessor.getRegisteredDescriptors()\n+                                  .stream()\n+                                  .filter(descriptor -> ALLOWED_JOB_DESCRIPTOR_TYPES.contains(descriptor.getType()))\n+                                  .map(RegisteredDescriptorModel::getName)\n+                                  .collect(Collectors.toSet());\n+        } catch (AlertDatabaseConstraintException ex) {\n+            // ignore or add a logger.\n+        }\n+\n+        return descriptorNames;\n+    }\n+\n+    @Override\n+    public ActionResponse<JobFieldModel> create(JobFieldModel resource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 89}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTY3Mjc1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490567275", "createdAt": "2020-09-17T13:01:45Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMTo0NVrOHTg9Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowMTo0NVrOHTg9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyNDkzNA==", "bodyText": "I feel like LongIdResourceActions might be a better name. Thoughts?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490224934", "createdAt": "2020-09-17T13:01:45Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/action/api/LongResourceActions.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.action.api;\n+\n+public interface LongResourceActions<T> extends ResourceActions<T, Long> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTcxNDA2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490571406", "createdAt": "2020-09-17T13:06:30Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowNjozMFrOHThJZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzowNjozMFrOHThJZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIyODA2OA==", "bodyText": "We have a class called AlertSerializableModel that extends Stringable and implements Serializable so that we don't have to extend both like this.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490228068", "createdAt": "2020-09-17T13:06:30Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthEndpointResponse.java", "diffHunk": "@@ -27,23 +27,16 @@\n import com.synopsys.integration.util.Stringable;\n \n public class OAuthEndpointResponse extends Stringable implements Serializable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 3}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTgyODU4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490582858", "createdAt": "2020-09-17T13:18:45Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoxODo0NVrOHThqhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoxODo0NVrOHThqhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzNjU1MQ==", "bodyText": "Should we do something similar here to abstract the id Type?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490236551", "createdAt": "2020-09-17T13:18:45Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/BaseJobResourceController.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.rest.api;\n+\n+import java.util.UUID;\n+\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.bind.annotation.DeleteMapping;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.PutMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.ResponseStatus;\n+\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+\n+public interface BaseJobResourceController {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNTg2ODE1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490586815", "createdAt": "2020-09-17T13:21:17Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoyMToxN1rOHThyNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzoyMToxN1rOHThyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDIzODUxOQ==", "bodyText": "This is trivial, but why was a different generic character used here rather than <T>?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490238519", "createdAt": "2020-09-17T13:21:17Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/api/ValidateController.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.rest.api;\n+\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestBody;\n+\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+\n+public interface ValidateController<S> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 30}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjAxMjAx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490601201", "createdAt": "2020-09-17T13:35:31Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNTozMVrOHTijSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxMzozNTozMVrOHTijSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI1MTA4MQ==", "bodyText": "I know you didn't make this change, but can we change the wording to be \"Unable to confirm...\" rather than \"Was not able to confirm...\"?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490251081", "createdAt": "2020-09-17T13:35:31Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/jira/cloud/web/JiraCloudCustomEndpoint.java", "diffHunk": "@@ -81,20 +78,20 @@ public JiraCloudCustomEndpoint(JiraCloudChannelKey jiraChannelKey, CustomEndpoin\n             String accessToken = jiraProperties.getAccessToken();\n             Response response = jiraAppService.installMarketplaceCloudApp(JiraConstants.JIRA_APP_KEY, username, accessToken);\n             if (BooleanUtils.isTrue(response.isStatusCodeError())) {\n-                return responseFactory.createBadRequestResponse(\"\", \"The Jira Cloud server responded with error code: \" + response.getStatusCode());\n+                return new ActionResponse<>(HttpStatus.BAD_REQUEST, \"The Jira Cloud server responded with error code: \" + response.getStatusCode());\n             }\n             boolean jiraPluginInstalled = isJiraPluginInstalled(jiraAppService, accessToken, username, JiraConstants.JIRA_APP_KEY);\n             if (!jiraPluginInstalled) {\n-                return responseFactory.createNotFoundResponse(\"Was not able to confirm Jira Cloud successfully installed the Jira Cloud plugin. Please verify the installation on you Jira Cloud server.\");\n+                return new ActionResponse<>(HttpStatus.NOT_FOUND, \"Was not able to confirm Jira Cloud successfully installed the Jira Cloud plugin. Please verify the installation on you Jira Cloud server.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjQwNTc2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490640576", "createdAt": "2020-09-17T14:13:50Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxMzo1MFrOHTkWrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxMzo1MFrOHTkWrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MDYyMg==", "bodyText": "If this is missing, I believe we should return a 404 to conform to the RFC standard.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490280622", "createdAt": "2020-09-17T14:13:50Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -56,150 +62,183 @@\n import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.message.model.MessageResult;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n import com.synopsys.integration.alert.web.common.descriptor.DescriptorProcessor;\n import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @Component\n-public class JobConfigActions {\n+public class JobConfigActions extends AbstractJobResourceActions {\n     private final Logger logger = LoggerFactory.getLogger(JobConfigActions.class);\n     private final ConfigurationAccessor configurationAccessor;\n     private final FieldModelProcessor fieldModelProcessor;\n     private final DescriptorProcessor descriptorProcessor;\n     private final ConfigurationFieldModelConverter modelConverter;\n     private final GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public JobConfigActions(ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter,\n-        GlobalConfigExistsValidator globalConfigExistsValidator) {\n+    public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor, ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor,\n+        ConfigurationFieldModelConverter modelConverter, GlobalConfigExistsValidator globalConfigExistsValidator, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {\n+        super(authorizationManager, descriptorAccessor);\n         this.configurationAccessor = configurationAccessor;\n         this.fieldModelProcessor = fieldModelProcessor;\n         this.descriptorProcessor = descriptorProcessor;\n         this.modelConverter = modelConverter;\n         this.globalConfigExistsValidator = globalConfigExistsValidator;\n+        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n+        this.descriptorMap = descriptorMap;\n     }\n \n-    public boolean doesJobExist(UUID id) throws AlertDatabaseConstraintException {\n-        return null != id && configurationAccessor.getJobById(id).isPresent();\n-    }\n-\n-    public boolean doesJobExist(String id) throws AlertDatabaseConstraintException {\n-        return doesJobExist(UUID.fromString(id));\n-    }\n-\n-    public Optional<JobFieldModel> getJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n-        if (jobConfiguration.isPresent()) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n-            return Optional.of(jobFieldModel);\n+    @Override\n+    protected Optional<JobFieldModel> findJobFieldModel(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n+            if (jobConfiguration.isPresent()) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n+                return Optional.of(jobFieldModel);\n+            }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error finding job configuration id: %s\", id), ex);\n         }\n         return Optional.empty();\n     }\n \n-    public List<JobFieldModel> getAllJobs() throws AlertException {\n-        List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n-        List<JobFieldModel> jobFieldModels = new LinkedList<>();\n-        for (ConfigurationJobModel configurationJobModel : allJobs) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n-            jobFieldModels.add(jobFieldModel);\n+    @Override\n+    protected ActionResponse<List<JobFieldModel>> readAllAfterChecks() {\n+        try {\n+            List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n+            List<JobFieldModel> jobFieldModels = new LinkedList<>();\n+            for (ConfigurationJobModel configurationJobModel : allJobs) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n+                jobFieldModels.add(jobFieldModel);\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, jobFieldModels);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error reading all jobs\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-        return jobFieldModels;\n     }\n \n-    public void deleteJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n-        if (jobs.isPresent()) {\n-            LinkedList<FieldModel> processedFieldModels = new LinkedList<>();\n-            ConfigurationJobModel configurationJobModel = jobs.get();\n-            for (ConfigurationModel configurationModel : configurationJobModel.getCopyOfConfigurations()) {\n-                FieldModel convertedFieldModel = modelConverter.convertToFieldModel(configurationModel);\n-                FieldModel fieldModel = fieldModelProcessor.performBeforeDeleteAction(convertedFieldModel);\n-                processedFieldModels.add(fieldModel);\n-            }\n-            configurationAccessor.deleteJob(configurationJobModel.getJobId());\n-            for (FieldModel fieldModel : processedFieldModels) {\n-                fieldModelProcessor.performAfterDeleteAction(fieldModel);\n+    @Override\n+    protected ActionResponse<JobFieldModel> deleteAfterChecks(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n+            if (jobs.isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 134}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjQzMjU3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490643257", "createdAt": "2020-09-17T14:16:24Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNjoyNFrOHTkexw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDoxNjoyNFrOHTkexw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI4MjY5NQ==", "bodyText": "I think this should actually be a 404 case.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490282695", "createdAt": "2020-09-17T14:16:24Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/api/job/JobConfigActions.java", "diffHunk": "@@ -56,150 +62,183 @@\n import com.synopsys.integration.alert.common.exception.AlertMethodNotAllowedException;\n import com.synopsys.integration.alert.common.message.model.MessageResult;\n import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.DescriptorAccessor;\n import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationJobModel;\n import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.model.PermissionKey;\n import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n import com.synopsys.integration.alert.common.rest.model.JobFieldStatuses;\n+import com.synopsys.integration.alert.common.rest.model.ValidationResponseModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.web.common.PKIXErrorResponseFactory;\n import com.synopsys.integration.alert.web.common.descriptor.DescriptorProcessor;\n import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n \n @Component\n-public class JobConfigActions {\n+public class JobConfigActions extends AbstractJobResourceActions {\n     private final Logger logger = LoggerFactory.getLogger(JobConfigActions.class);\n     private final ConfigurationAccessor configurationAccessor;\n     private final FieldModelProcessor fieldModelProcessor;\n     private final DescriptorProcessor descriptorProcessor;\n     private final ConfigurationFieldModelConverter modelConverter;\n     private final GlobalConfigExistsValidator globalConfigExistsValidator;\n+    private final PKIXErrorResponseFactory pkixErrorResponseFactory;\n+    private final DescriptorMap descriptorMap;\n \n     @Autowired\n-    public JobConfigActions(ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor, ConfigurationFieldModelConverter modelConverter,\n-        GlobalConfigExistsValidator globalConfigExistsValidator) {\n+    public JobConfigActions(AuthorizationManager authorizationManager, DescriptorAccessor descriptorAccessor, ConfigurationAccessor configurationAccessor, FieldModelProcessor fieldModelProcessor, DescriptorProcessor descriptorProcessor,\n+        ConfigurationFieldModelConverter modelConverter, GlobalConfigExistsValidator globalConfigExistsValidator, PKIXErrorResponseFactory pkixErrorResponseFactory, DescriptorMap descriptorMap) {\n+        super(authorizationManager, descriptorAccessor);\n         this.configurationAccessor = configurationAccessor;\n         this.fieldModelProcessor = fieldModelProcessor;\n         this.descriptorProcessor = descriptorProcessor;\n         this.modelConverter = modelConverter;\n         this.globalConfigExistsValidator = globalConfigExistsValidator;\n+        this.pkixErrorResponseFactory = pkixErrorResponseFactory;\n+        this.descriptorMap = descriptorMap;\n     }\n \n-    public boolean doesJobExist(UUID id) throws AlertDatabaseConstraintException {\n-        return null != id && configurationAccessor.getJobById(id).isPresent();\n-    }\n-\n-    public boolean doesJobExist(String id) throws AlertDatabaseConstraintException {\n-        return doesJobExist(UUID.fromString(id));\n-    }\n-\n-    public Optional<JobFieldModel> getJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n-        if (jobConfiguration.isPresent()) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n-            return Optional.of(jobFieldModel);\n+    @Override\n+    protected Optional<JobFieldModel> findJobFieldModel(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobConfiguration = configurationAccessor.getJobById(id);\n+            if (jobConfiguration.isPresent()) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(jobConfiguration.get());\n+                return Optional.of(jobFieldModel);\n+            }\n+        } catch (AlertException ex) {\n+            logger.error(String.format(\"Error finding job configuration id: %s\", id), ex);\n         }\n         return Optional.empty();\n     }\n \n-    public List<JobFieldModel> getAllJobs() throws AlertException {\n-        List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n-        List<JobFieldModel> jobFieldModels = new LinkedList<>();\n-        for (ConfigurationJobModel configurationJobModel : allJobs) {\n-            JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n-            jobFieldModels.add(jobFieldModel);\n+    @Override\n+    protected ActionResponse<List<JobFieldModel>> readAllAfterChecks() {\n+        try {\n+            List<ConfigurationJobModel> allJobs = configurationAccessor.getAllJobs();\n+            List<JobFieldModel> jobFieldModels = new LinkedList<>();\n+            for (ConfigurationJobModel configurationJobModel : allJobs) {\n+                JobFieldModel jobFieldModel = readJobConfiguration(configurationJobModel);\n+                jobFieldModels.add(jobFieldModel);\n+            }\n+            return new ActionResponse<>(HttpStatus.OK, jobFieldModels);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error reading all jobs\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-        return jobFieldModels;\n     }\n \n-    public void deleteJobById(UUID id) throws AlertException {\n-        Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n-        if (jobs.isPresent()) {\n-            LinkedList<FieldModel> processedFieldModels = new LinkedList<>();\n-            ConfigurationJobModel configurationJobModel = jobs.get();\n-            for (ConfigurationModel configurationModel : configurationJobModel.getCopyOfConfigurations()) {\n-                FieldModel convertedFieldModel = modelConverter.convertToFieldModel(configurationModel);\n-                FieldModel fieldModel = fieldModelProcessor.performBeforeDeleteAction(convertedFieldModel);\n-                processedFieldModels.add(fieldModel);\n-            }\n-            configurationAccessor.deleteJob(configurationJobModel.getJobId());\n-            for (FieldModel fieldModel : processedFieldModels) {\n-                fieldModelProcessor.performAfterDeleteAction(fieldModel);\n+    @Override\n+    protected ActionResponse<JobFieldModel> deleteAfterChecks(UUID id) {\n+        try {\n+            Optional<ConfigurationJobModel> jobs = configurationAccessor.getJobById(id);\n+            if (jobs.isPresent()) {\n+                LinkedList<FieldModel> processedFieldModels = new LinkedList<>();\n+                ConfigurationJobModel configurationJobModel = jobs.get();\n+                for (ConfigurationModel configurationModel : configurationJobModel.getCopyOfConfigurations()) {\n+                    FieldModel convertedFieldModel = modelConverter.convertToFieldModel(configurationModel);\n+                    FieldModel fieldModel = fieldModelProcessor.performBeforeDeleteAction(convertedFieldModel);\n+                    processedFieldModels.add(fieldModel);\n+                }\n+                configurationAccessor.deleteJob(configurationJobModel.getJobId());\n+                for (FieldModel fieldModel : processedFieldModels) {\n+                    fieldModelProcessor.performAfterDeleteAction(fieldModel);\n+                }\n+\n             }\n+        } catch (AlertException ex) {\n+            logger.error(\"Error reading all jobs\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-    }\n \n-    public JobFieldModel saveJob(JobFieldModel jobFieldModel) throws AlertException {\n-        MessageResult validationResult = validateJob(jobFieldModel);\n-        validationResult.throwExceptionForFieldStatues();\n-        validateJobNameUnique(null, jobFieldModel);\n+        return new ActionResponse<>(HttpStatus.NO_CONTENT);\n+    }\n \n-        Set<String> descriptorNames = new HashSet<>();\n-        Set<ConfigurationFieldModel> configurationFieldModels = new HashSet<>();\n-        for (FieldModel fieldModel : jobFieldModel.getFieldModels()) {\n-            FieldModel beforeSaveEventFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n-            descriptorNames.add(beforeSaveEventFieldModel.getDescriptorName());\n-            Collection<ConfigurationFieldModel> savedFieldsModels = modelConverter.convertToConfigurationFieldModelMap(beforeSaveEventFieldModel).values();\n-            configurationFieldModels.addAll(savedFieldsModels);\n-        }\n-        ConfigurationJobModel savedJob = configurationAccessor.createJob(descriptorNames, configurationFieldModels);\n-        JobFieldModel savedJobFieldModel = convertToJobFieldModel(savedJob);\n+    @Override\n+    protected ActionResponse<JobFieldModel> createAfterChecks(JobFieldModel resource) {\n+        try {\n+            Set<String> descriptorNames = new HashSet<>();\n+            Set<ConfigurationFieldModel> configurationFieldModels = new HashSet<>();\n+            for (FieldModel fieldModel : resource.getFieldModels()) {\n+                FieldModel beforeSaveEventFieldModel = fieldModelProcessor.performBeforeSaveAction(fieldModel);\n+                descriptorNames.add(beforeSaveEventFieldModel.getDescriptorName());\n+                Collection<ConfigurationFieldModel> savedFieldsModels = modelConverter.convertToConfigurationFieldModelMap(beforeSaveEventFieldModel).values();\n+                configurationFieldModels.addAll(savedFieldsModels);\n+            }\n+            ConfigurationJobModel savedJob = configurationAccessor.createJob(descriptorNames, configurationFieldModels);\n+            JobFieldModel savedJobFieldModel = convertToJobFieldModel(savedJob);\n \n-        Set<FieldModel> updatedFieldModels = new HashSet<>();\n-        for (FieldModel fieldModel : savedJobFieldModel.getFieldModels()) {\n-            FieldModel updatedModel = fieldModelProcessor.performAfterSaveAction(fieldModel);\n-            updatedFieldModels.add(updatedModel);\n+            Set<FieldModel> updatedFieldModels = new HashSet<>();\n+            for (FieldModel fieldModel : savedJobFieldModel.getFieldModels()) {\n+                FieldModel updatedModel = fieldModelProcessor.performAfterSaveAction(fieldModel);\n+                updatedFieldModels.add(updatedModel);\n+            }\n+            savedJobFieldModel.setFieldModels(updatedFieldModels);\n+            return new ActionResponse<>(HttpStatus.OK, savedJobFieldModel);\n+        } catch (AlertException ex) {\n+            logger.error(\"Error creating job\", ex);\n+            return new ActionResponse<>(HttpStatus.INTERNAL_SERVER_ERROR, ex.getMessage());\n         }\n-        savedJobFieldModel.setFieldModels(updatedFieldModels);\n-        return savedJobFieldModel;\n     }\n \n-    public JobFieldModel updateJob(UUID id, JobFieldModel jobFieldModel) throws AlertException {\n-        MessageResult validationResult = validateJob(jobFieldModel);\n-        validationResult.throwExceptionForFieldStatues();\n-        validateJobNameUnique(id, jobFieldModel);\n-\n-        ConfigurationJobModel previousJob = configurationAccessor.getJobById(id)\n-                                                .orElseThrow(() -> new IllegalStateException(\"No previous job present when the only possible valid state for this stage of the method would require it\"));\n-        Map<String, FieldModel> descriptorAndContextToPreviousFieldModel = new HashMap<>();\n-        for (ConfigurationModel previousJobConfiguration : previousJob.getCopyOfConfigurations()) {\n-            FieldModel previousJobFieldModel = modelConverter.convertToFieldModel(previousJobConfiguration);\n-            descriptorAndContextToPreviousFieldModel.put(previousJobFieldModel.getDescriptorName() + previousJobFieldModel.getContext(), previousJobFieldModel);\n-        }\n+    @Override\n+    protected ActionResponse<JobFieldModel> updateAfterChecks(UUID id, JobFieldModel resource) {\n+        try {\n+            ConfigurationJobModel previousJob = configurationAccessor.getJobById(id)\n+                                                    .orElseThrow(() -> new IllegalStateException(\"No previous job present when the only possible valid state for this stage of the method would require it\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 220}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjcxODQ0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490671844", "createdAt": "2020-09-17T14:39:27Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozOToyN1rOHTlpUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDozOToyN1rOHTlpUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDMwMTc3Nw==", "bodyText": "Would this work? Or is the response.json() promise preventing this?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (response.status === 201) {\n          \n          \n            \n                                response.json()\n          \n          \n            \n                                    .then((responseData) => {\n          \n          \n            \n                                        const newId = responseData.id;\n          \n          \n            \n                                        const updatedConfig = FieldModelUtilities.updateFieldModelSingleValue(config, 'id', newId);\n          \n          \n            \n                                        dispatch(configUpdated(updatedConfig));\n          \n          \n            \n                                        dispatch(refreshConfig(newId));\n          \n          \n            \n                                    });\n          \n          \n            \n                            } else {\n          \n          \n            \n                                dispatch(refreshConfig(id));\n          \n          \n            \n                            }\n          \n          \n            \n                            let newId = id;\n          \n          \n            \n                            if (response.status === 201) {\n          \n          \n            \n                                response.json()\n          \n          \n            \n                                    .then((responseData) => {\n          \n          \n            \n                                       newId = responseData.id;\n          \n          \n            \n                                        const updatedConfig = FieldModelUtilities.updateFieldModelSingleValue(config, 'id', newId);\n          \n          \n            \n                                        dispatch(configUpdated(updatedConfig));\n          \n          \n            \n                                    });\n          \n          \n            \n                            }\n          \n          \n            \n                            dispatch(refreshConfig(newId));", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#discussion_r490301777", "createdAt": "2020-09-17T14:39:27Z", "author": {"login": "gkillough"}, "path": "src/main/js/store/actions/globalConfiguration.js", "diffHunk": "@@ -258,17 +303,29 @@ export function updateConfig(config) {\n             request = ConfigRequestBuilder.createNewConfigurationRequest(ConfigRequestBuilder.CONFIG_API_URL, csrfToken, config);\n         }\n         request.then((response) => {\n-            response.json()\n-                .then((responseData) => {\n-                    if (response.ok) {\n-                        const newId = responseData.id;\n-                        const updatedConfig = FieldModelUtilities.updateFieldModelSingleValue(config, 'id', newId);\n-                        dispatch(configUpdated(updatedConfig));\n-                        dispatch(refreshConfig(newId));\n-                    } else {\n-                        handleFailureResponse(dispatch, responseData, response.status);\n-                    }\n-                });\n+            if (response.ok) {\n+                if (response.status === 201) {\n+                    response.json()\n+                        .then((responseData) => {\n+                            const newId = responseData.id;\n+                            const updatedConfig = FieldModelUtilities.updateFieldModelSingleValue(config, 'id', newId);\n+                            dispatch(configUpdated(updatedConfig));\n+                            dispatch(refreshConfig(newId));\n+                        });\n+                } else {\n+                    dispatch(refreshConfig(id));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNjc5OTIx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490679921", "createdAt": "2020-09-17T14:47:07Z", "commit": {"oid": "35d1071b51a560107ca64341074fafb31f32d032"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14d3d64713317b83cf015f1703932b7aa3821d8f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/14d3d64713317b83cf015f1703932b7aa3821d8f", "committedDate": "2020-09-17T19:29:48Z", "message": "refactor: Implement method renaming and enhancements from comments in the PR."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTMzMDE3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490933017", "createdAt": "2020-09-17T19:45:26Z", "commit": {"oid": "14d3d64713317b83cf015f1703932b7aa3821d8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwOTM4NTA5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1172#pullrequestreview-490938509", "createdAt": "2020-09-17T19:51:26Z", "commit": {"oid": "14d3d64713317b83cf015f1703932b7aa3821d8f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3486, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}