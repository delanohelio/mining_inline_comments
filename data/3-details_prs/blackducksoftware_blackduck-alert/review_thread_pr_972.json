{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjYxMTcz", "number": 972, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowMjo0MFrOD5hKCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo1ODoxOVrOD5zbQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjM4NjY3OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowMjo0MFrOGQ1Tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNDozMFrOGQ1vGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwMzc2Mw==", "bodyText": "new Date() will have a different underlying time every time it is called. We should be careful when comparing these.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420303763", "createdAt": "2020-05-05T18:02:40Z", "author": {"login": "gkillough"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMDgwOQ==", "bodyText": "when I was doing my comparisons I wasn't quite sure how to compare the time stamps so I decided to just compare on the alias and content. Instead, I could create a Date object like I did with alias and content and pass it throughout if you think thats a better alternative", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420310809", "createdAt": "2020-05-05T18:14:30Z", "author": {"login": "ChomickiM"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwMzc2Mw=="}, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQyNTQ1OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMzoxOVrOGQ1sUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMzoxOVrOGQ1sUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMDA5OQ==", "bodyText": "If we want to compare the updated times, we should move the Date to its own field. And in the tests we can create a new Date if we want to use a newer time, and use the Date field when they should be the same.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420310099", "createdAt": "2020-05-05T18:13:19Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ0MDYyOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNzoyNlrOGQ12JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNzoyNlrOGQ12JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjYxMg==", "bodyText": "This could be an isEmpty check", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420312612", "createdAt": "2020-05-05T18:17:26Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(alias);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ0NzcxOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxOToxM1rOGQ16jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxOToxM1rOGQ16jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzc0Mg==", "bodyText": "Could be isEmpty check.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420313742", "createdAt": "2020-05-05T18:19:13Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(alias);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasBlankTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            customCertificateAccessor.deleteCertificate(\"\");\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByIdTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(0L);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ1ODAwOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/DefaultMockJPARepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMjowMlrOGQ2BEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMjowMlrOGQ2BEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNTQwOQ==", "bodyText": "These lines may not be necessary if you made the class abstract. Having the keyword there would others realize that the class should be extended.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420315409", "createdAt": "2020-05-05T18:22:02Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/DefaultMockJPARepository.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public class DefaultMockJPARepository<T, ID> implements JpaRepository<T,ID> {\n+    // Empty implementation of a JPA repository to be extended by other mock repositories.\n+    // The child classes that extend this can then override the methods they need to\n+    // provide the correct testing functionality needed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ2NTc5OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDoxMlrOGQ2F6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDoxMlrOGQ2F6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjY1MQ==", "bodyText": "Can you add a comment in the exception block or an assertion that the exception is not null? That way other people can see that we expect that exception and it wasn't a mistake.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420316651", "createdAt": "2020-05-05T18:24:12Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ2NzUyOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDozOVrOGQ2HAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDozOVrOGQ2HAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjkzMA==", "bodyText": "Same as above.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420316930", "createdAt": "2020-05-05T18:24:39Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(alias);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasBlankTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            customCertificateAccessor.deleteCertificate(\"\");\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ2ODMwOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/DefaultMockJPARepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDo1NFrOGQ2HhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDo1NFrOGQ2HhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNzA2MA==", "bodyText": "Generally, this sort of explanation would go above the class declaration.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420317060", "createdAt": "2020-05-05T18:24:54Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/DefaultMockJPARepository.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public class DefaultMockJPARepository<T, ID> implements JpaRepository<T,ID> {\n+    // Empty implementation of a JPA repository to be extended by other mock repositories.\n+    // The child classes that extend this can then override the methods they need to\n+    // provide the correct testing functionality needed.\n+    // To use the class correctly have a child class extend this class and also implement the JPA Repository\n+    // interface to be tested.\n+    //\n+    // For example creating a mock for SystemStatusRepository\n+    // class MockSystemStatusRepository extends DefaultMockJPARepository<SystemStatus, Long> implements SystemStatusRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ3Mjk2OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockCustomCertificateRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNjoxMVrOGQ2KWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNjoxMVrOGQ2KWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNzc4NA==", "bodyText": "You could replace these 3 lines by calling the save method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420317784", "createdAt": "2020-05-05T18:26:11Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockCustomCertificateRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateEntity;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class MockCustomCertificateRepository extends DefaultMockJPARepository<CustomCertificateEntity, Long> implements CustomCertificateRepository {\n+\n+    private Map<Long, CustomCertificateEntity> customCertificateEntityMapById = new HashMap<>();\n+\n+    private long currentId = 0;\n+\n+    public MockCustomCertificateRepository() {\n+\n+    }\n+\n+    public MockCustomCertificateRepository(String alias, String content, Date lastUpdated) {\n+        CustomCertificateEntity customCertificateEntity = new CustomCertificateEntity(alias, content, lastUpdated);\n+        customCertificateEntity.setId(currentId);\n+        customCertificateEntityMapById.put(currentId, customCertificateEntity);\n+        currentId++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ4OTMxOnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderTaskPropertiesAccessorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMDoxMlrOGQ2UXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMDoxMlrOGQ2UXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMDM0OQ==", "bodyText": "Should add something in the exception block.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420320349", "createdAt": "2020-05-05T18:30:12Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderTaskPropertiesAccessorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.database.api.mock.MockProviderTaskPropertiesRepository;\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesEntity;\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesRepository;\n+\n+public class DefaultProviderTaskPropertiesAccessorTest {\n+    private final Long providerConfigId = 1L;\n+    private final String taskName = \"taskName-test\";\n+    private final String propertyName = \"propertyName-test\";\n+    private final String value = \"value-test\";\n+\n+    private ProviderTaskPropertiesRepository providerTaskPropertiesRepository = new MockProviderTaskPropertiesRepository(providerConfigId, taskName, propertyName, value);\n+\n+    @Test\n+    public void getTaskPropertyTest() {\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+        Optional<String> taskPropertyValue = providerTaskPropertiesAccessor.getTaskProperty(taskName, propertyName);\n+\n+        assertTrue(taskPropertyValue.isPresent());\n+        assertEquals(value, taskPropertyValue.get());\n+    }\n+\n+    @Test\n+    public void getTaskPropertyEmptyTest() {\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+        Optional<String> taskPropertyOptionalEmpty = providerTaskPropertiesAccessor.getTaskProperty(\"invalidTaskName\", \"invalidPropertyKey\");\n+        Optional<String> taskPropertyValueEmpty = providerTaskPropertiesAccessor.getTaskProperty(\"\", \"\");\n+\n+        assertFalse(taskPropertyOptionalEmpty.isPresent());\n+        assertFalse(taskPropertyValueEmpty.isPresent());\n+    }\n+\n+    @Test\n+    public void setTaskPropertyTest() throws Exception {\n+        final Long newConfigId = 2L;\n+        final String newTaskName = \"taskName-new\";\n+        final String newPropertyName = \"propertyName-new\";\n+        final String newValue = \"value-new\";\n+\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+        providerTaskPropertiesAccessor.setTaskProperty(newConfigId, newTaskName, newPropertyName, newValue);\n+\n+        Optional<ProviderTaskPropertiesEntity> providerTaskPropertiesEntityOptional = providerTaskPropertiesRepository.findByTaskNameAndPropertyName(newTaskName, newPropertyName);\n+\n+        assertTrue(providerTaskPropertiesEntityOptional.isPresent());\n+        ProviderTaskPropertiesEntity providerTaskPropertiesEntity = providerTaskPropertiesEntityOptional.get();\n+        assertEquals(newConfigId, providerTaskPropertiesEntity.getProviderConfigId());\n+        assertEquals(newTaskName, providerTaskPropertiesEntity.getTaskName());\n+        assertEquals(newPropertyName, providerTaskPropertiesEntity.getPropertyName());\n+        assertEquals(newValue, providerTaskPropertiesEntity.getValue());\n+    }\n+\n+    @Test\n+    public void setTaskPropertyExceptionTest() throws Exception {\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+\n+        try {\n+            providerTaskPropertiesAccessor.setTaskProperty(null, \"\", \"\", \"\");\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjQ5NDU4OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockProviderTaskPropertiesRepository.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMTozOFrOGQ2Xyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMTozOFrOGQ2Xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMTIyNg==", "bodyText": "Should call the save method here, in case we need to add additional behavior for saving entities in this Mock class in the future.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420321226", "createdAt": "2020-05-05T18:31:38Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockProviderTaskPropertiesRepository.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesEntity;\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesRepository;\n+\n+public class MockProviderTaskPropertiesRepository extends DefaultMockJPARepository<ProviderTaskPropertiesEntity, Long> implements ProviderTaskPropertiesRepository {\n+\n+    private Map<Long, ProviderTaskPropertiesEntity> providerTaskPropertiesEntityMap = new HashMap<>();\n+\n+    public MockProviderTaskPropertiesRepository(Long providerConfigId, String taskName, String propertyName, String value) {\n+        ProviderTaskPropertiesEntity providerTaskPropertiesEntity = new ProviderTaskPropertiesEntity(providerConfigId, taskName, propertyName, value);\n+        providerTaskPropertiesEntityMap.put(providerConfigId, providerTaskPropertiesEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTM3OTg1OnYy", "diffSide": "RIGHT", "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo1ODoxOVrOGRRtLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo1ODoxOVrOGRRtLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2OTA3MA==", "bodyText": "Why are we using the DateUtils above and the .toString() method here? We should be more consistent and choose one of these approaches.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420769070", "createdAt": "2020-05-06T12:58:19Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -50,7 +53,7 @@ public void getCertificateTest() {\n \n     @Test\n     public void storeCertificateTest() throws Exception {\n-        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, testDate.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b271f75764f1d4c3ac037474b16d44596d8c2e7"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2004, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}