{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTI1NjA1", "number": 1111, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNDowMlrOEXvcKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTo0ODo1MlrOEXxaHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzI5OTYyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthCustomEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxNDowMlrOG_s7gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoyNzoxMlrOG_tYhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0OTYwMg==", "bodyText": "I think it might be best if we make this extend CustomEndpoint so that we aren't bound to return a String later. We should start moving away from ResponseEntity<String> IMO. If we do that, we can just return a OAuthEndpointResponse rather than wrapping and manually serializing with Gson.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469449602", "createdAt": "2020-08-12T18:14:02Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth;\n+\n+import org.springframework.http.ResponseEntity;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+public abstract class OAuthCustomEndpoint extends ButtonCustomEndpoint {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1NzAyOA==", "bodyText": "We will need to refactor the CustomEndpointManager and CustomEndpoint.  Although CustomEndpoint uses a generic R the method always returns a Response", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469457028", "createdAt": "2020-08-12T18:27:12Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth;\n+\n+import org.springframework.http.ResponseEntity;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+public abstract class OAuthCustomEndpoint extends ButtonCustomEndpoint {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ0OTYwMg=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzMxNjQ1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ProxyManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxODo0N1rOG_tF5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODoxOToyNVrOG_tHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjI2Mw==", "bodyText": "Why not isEmpty()? SonarCloud?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469452263", "createdAt": "2020-08-12T18:18:47Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ProxyManager.java", "diffHunk": "@@ -113,4 +115,16 @@ public ProxyInfo createProxyInfo() throws IllegalArgumentException {\n         return settingsConfiguration.flatMap(configurationModel -> configurationModel.getField(key)).flatMap(ConfigurationFieldModel::getFieldValue);\n     }\n \n+    public Proxy createProxy() {\n+        if (!getProxyHost().isPresent()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjY2Ng==", "bodyText": "Yeah not sure if the SonarCloud issues has been updated yet.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469452666", "createdAt": "2020-08-12T18:19:25Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ProxyManager.java", "diffHunk": "@@ -113,4 +115,16 @@ public ProxyInfo createProxyInfo() throws IllegalArgumentException {\n         return settingsConfiguration.flatMap(configurationModel -> configurationModel.getField(key)).flatMap(ConfigurationFieldModel::getFieldValue);\n     }\n \n+    public Proxy createProxy() {\n+        if (!getProxyHost().isPresent()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1MjI2Mw=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM1OTQ3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMDo1MVrOG_tgtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozMDo1MVrOG_tgtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ1OTEyNw==", "bodyText": "This should probably be logged at DEBUG.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469459127", "createdAt": "2020-08-12T18:30:51Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM4MjM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNzoyMFrOG_tu_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODozNzoyMFrOG_tu_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2Mjc4MQ==", "bodyText": "Could we do something like this?\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n          \n          \n            \n                            configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n          \n          \n            \n                            configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()))\n          \n          \n            \n                            .map(ConfigurationModel::getCopyOfKeyToFieldMap)\n          \n          \n            \n                            .ifPresent(fields::putAll);", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469462781", "createdAt": "2020-08-12T18:37:20Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzM5MzQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0MDoxNlrOG_t1bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1NDo0NFrOG_uVBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NDQzMA==", "bodyText": "Is the 300 here the max length? We should probably throw an exception if we violate that constraint if it's required by Microsoft.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469464430", "createdAt": "2020-08-12T18:40:16Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MjUxOA==", "bodyText": "The 300 isn't a max length.  It's a best guess for initial capacity.  My test URL was 237 characters long. This is so the StringBuilder allocates a string with enough capacity initially instead of resizing more than once with the append calls.  it will resize dynamically like an ArrayList.  So this just makes it perform a little better. The string underneath is backed by a character array. So the character array will be created with a good enough size to avoid resizing during the append calls.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469472518", "createdAt": "2020-08-12T18:54:44Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NDQzMA=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQwMzE2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0Mjo1OVrOG_t7Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MDozMVrOG_uL6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NTkyMw==", "bodyText": "Same thought here. If this is the length requirement, we should be more explicit about it.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469465923", "createdAt": "2020-08-12T18:42:59Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);\n+        authUrlBuilder.append(AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL);\n+        authUrlBuilder.append(createQueryString(clientId, alertServerUrl));\n+        return authUrlBuilder.toString();\n+    }\n+\n+    private String createQueryString(String clientId, String alertServerUrl) {\n+        String authorizationUrl = String.format(\"%s%s\", alertServerUrl, AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH);\n+        StringBuilder queryBuilder = new StringBuilder(250);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MDE4NQ==", "bodyText": "The 250 isn't a max length.  It's a best guess for initial capacity.  My test URL was 237 characters long. This is so the StringBuilder allocates a string with enough capacity initially instead of resizing more than once with the append calls.  it will resize dynamically like an ArrayList.  So this just makes it perform a little better.  The string underneath is backed by a character array.  So the character array will be created with a good enough size to avoid resizing during the append calls.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469470185", "createdAt": "2020-08-12T18:50:31Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);\n+        authUrlBuilder.append(AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL);\n+        authUrlBuilder.append(createQueryString(clientId, alertServerUrl));\n+        return authUrlBuilder.toString();\n+    }\n+\n+    private String createQueryString(String clientId, String alertServerUrl) {\n+        String authorizationUrl = String.format(\"%s%s\", alertServerUrl, AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH);\n+        StringBuilder queryBuilder = new StringBuilder(250);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NTkyMw=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQwNjE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0Mzo1MVrOG_t9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MjoyMlrOG_uP7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NjQwNQ==", "bodyText": "Should this first string start with '?', or is that from a previous constant?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469466405", "createdAt": "2020-08-12T18:43:51Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);\n+        authUrlBuilder.append(AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL);\n+        authUrlBuilder.append(createQueryString(clientId, alertServerUrl));\n+        return authUrlBuilder.toString();\n+    }\n+\n+    private String createQueryString(String clientId, String alertServerUrl) {\n+        String authorizationUrl = String.format(\"%s%s\", alertServerUrl, AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH);\n+        StringBuilder queryBuilder = new StringBuilder(250);\n+        queryBuilder.append(\"&client_id=\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MTIxNQ==", "bodyText": "The URL for authorization appends the assertion query parameter and I had to fix the URL constant to change it from '&' to '?'  See line 116 'AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL'", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469471215", "createdAt": "2020-08-12T18:52:22Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);\n+        authUrlBuilder.append(AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL);\n+        authUrlBuilder.append(createQueryString(clientId, alertServerUrl));\n+        return authUrlBuilder.toString();\n+    }\n+\n+    private String createQueryString(String clientId, String alertServerUrl) {\n+        String authorizationUrl = String.format(\"%s%s\", alertServerUrl, AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH);\n+        StringBuilder queryBuilder = new StringBuilder(250);\n+        queryBuilder.append(\"&client_id=\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2NjQwNQ=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQwODcwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo0NDozMVrOG_t-oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1MzowNVrOG_uReQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2Njc4NQ==", "bodyText": "I believe we need to request more scopes than this. They are listed on the confluence design page.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469466785", "createdAt": "2020-08-12T18:44:31Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);\n+        authUrlBuilder.append(AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL);\n+        authUrlBuilder.append(createQueryString(clientId, alertServerUrl));\n+        return authUrlBuilder.toString();\n+    }\n+\n+    private String createQueryString(String clientId, String alertServerUrl) {\n+        String authorizationUrl = String.format(\"%s%s\", alertServerUrl, AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH);\n+        StringBuilder queryBuilder = new StringBuilder(250);\n+        queryBuilder.append(\"&client_id=\");\n+        queryBuilder.append(clientId);\n+        //TODO have an object that stores the request keys and purges them after some amount of time.\n+        //TODO also store a redirect URL if possible\n+        queryBuilder.append(\"&state=\");\n+        queryBuilder.append(createRequestKey());\n+        queryBuilder.append(\"&scope=vso.work%20vso.code_write\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MTYwOQ==", "bodyText": "yeah it makes sense because the callback is failing to return tokens. the URL returned lists invalid scopes", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469471609", "createdAt": "2020-08-12T18:53:05Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureBoardsCustomEndpoint.java", "diffHunk": "@@ -22,37 +22,118 @@\n  */\n package com.synopsys.integration.alert.channel.azure.boards.web;\n \n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.UUID;\n+\n+import org.apache.commons.lang.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.ResponseEntity;\n+import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n-import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.google.gson.Gson;\n import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.AlertProperties;\n import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n-import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.ButtonCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth.OAuthEndpointResponse;\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationFieldModel;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n import com.synopsys.integration.alert.common.rest.ResponseFactory;\n import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpServiceFactory;\n \n @Component\n-public class AzureBoardsCustomEndpoint extends ButtonCustomEndpoint {\n+public class AzureBoardsCustomEndpoint extends OAuthCustomEndpoint {\n     private final Logger logger = LoggerFactory.getLogger(AzureBoardsCustomEndpoint.class);\n \n-    private final AzureBoardsChannelKey azureBoardsChannelKey;\n-    private final ResponseFactory responseFactory;\n+    private final AlertProperties alertProperties;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter modelConverter;\n \n-    @Autowired\n-    public AzureBoardsCustomEndpoint(AzureBoardsChannelKey azureBoardsChannelKey, CustomEndpointManager customEndpointManager, ResponseFactory responseFactory) throws Exception {\n-        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager);\n-        this.azureBoardsChannelKey = azureBoardsChannelKey;\n-        this.responseFactory = responseFactory;\n+    public AzureBoardsCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, AlertProperties alertProperties, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter modelConverter)\n+        throws AlertException {\n+        super(AzureBoardsDescriptor.KEY_OAUTH, customEndpointManager, responseFactory, gson);\n+        this.alertProperties = alertProperties;\n+        this.configurationAccessor = configurationAccessor;\n+        this.modelConverter = modelConverter;\n     }\n \n     @Override\n-    public ResponseEntity<String> createResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n-        return responseFactory.createOkResponse(\"\", \"Placeholder Message\"); //FIXME this message should fixed once the Oauth is implemented.\n+    protected OAuthEndpointResponse createOAuthResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        try {\n+            FieldAccessor fieldAccessor = createFieldAccessor(fieldModel);\n+            Optional<String> clientId = fieldAccessor.getString(AzureBoardsDescriptor.KEY_CLIENT_ID);\n+            if (!clientId.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"client id not found.\");\n+            }\n+            Optional<String> alertServerUrl = alertProperties.getServerUrl();\n+\n+            if (!alertServerUrl.isPresent()) {\n+                return new OAuthEndpointResponse(HttpStatus.BAD_REQUEST.value(), false, \"\", \"Could not determine the alert server url for the callback.\");\n+            }\n+            String authUrl = createAuthURL(clientId.get(), alertServerUrl.get());\n+            logger.info(\"Authenticating Azure OAuth URL: \" + authUrl);\n+            //TODO add code to check if Alert has already been authorized to set the authenticated flag.\n+\n+            return new OAuthEndpointResponse(HttpStatus.OK.value(), false, authUrl, \"\");\n+\n+        } catch (Exception ex) {\n+            logger.error(\"Error activating Azure Boards\", ex);\n+            return new OAuthEndpointResponse(HttpStatus.INTERNAL_SERVER_ERROR.value(), false, \"\", \"Error activating azure oauth.\");\n+        }\n+    }\n+\n+    private FieldAccessor createFieldAccessor(FieldModel fieldModel) {\n+        Map<String, ConfigurationFieldModel> fields = new HashMap<>();\n+        try {\n+            fields.putAll(modelConverter.convertToConfigurationFieldModelMap(fieldModel));\n+            // check if a configuration exists because the client id is a sensitive field and won't have a value in the field model if updating.\n+            if (StringUtils.isNotBlank(fieldModel.getId())) {\n+                Optional<ConfigurationModel> configurationFieldModel = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+                configurationFieldModel.ifPresent(model -> fields.putAll(model.getCopyOfKeyToFieldMap()));\n+            }\n+        } catch (AlertDatabaseConstraintException ex) {\n+            logger.error(\"Error creating field acessor for Azure authentication\", ex);\n+        }\n+        return new FieldAccessor(fields);\n     }\n \n+    private String createAuthURL(String clientId, String alertServerUrl) {\n+        StringBuilder authUrlBuilder = new StringBuilder(300);\n+        authUrlBuilder.append(AzureHttpServiceFactory.DEFAULT_AUTHORIZATION_URL);\n+        authUrlBuilder.append(createQueryString(clientId, alertServerUrl));\n+        return authUrlBuilder.toString();\n+    }\n+\n+    private String createQueryString(String clientId, String alertServerUrl) {\n+        String authorizationUrl = String.format(\"%s%s\", alertServerUrl, AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH);\n+        StringBuilder queryBuilder = new StringBuilder(250);\n+        queryBuilder.append(\"&client_id=\");\n+        queryBuilder.append(clientId);\n+        //TODO have an object that stores the request keys and purges them after some amount of time.\n+        //TODO also store a redirect URL if possible\n+        queryBuilder.append(\"&state=\");\n+        queryBuilder.append(createRequestKey());\n+        queryBuilder.append(\"&scope=vso.work%20vso.code_write\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ2Njc4NQ=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzQ0ODAyOnYy", "diffSide": "RIGHT", "path": "src/main/js/field/OAuthEndpointButtonField.js", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxODo1NTo0OFrOG_uXZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQyMDoxMzo0OFrOG_w0Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MzEyNQ==", "bodyText": "This is imported with the wrong name", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469473125", "createdAt": "2020-08-12T18:55:48Z", "author": {"login": "bamandel"}, "path": "src/main/js/field/OAuthEndpointButtonField.js", "diffHunk": "@@ -0,0 +1,177 @@\n+import React, { Component } from 'react';\n+import PropTypes from 'prop-types';\n+import GeneralButton from 'field/input/GeneralButton';\n+import FieldsPopUp from 'field/FieldsPopUp';\n+import LabeledField from 'field/LabeledField';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import { createNewConfigurationRequest } from 'util/configurationRequestBuilder';\n+import { connect } from 'react-redux';\n+import StatusMessage from 'field/StatusMessage';\n+import * as HTTErrorUtils from 'util/httpErrorUtilities';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3ODk0NQ==", "bodyText": "The 'as' keyword allows the import of all functions and classes in util/httpErrorUtilities to be references via the name provided after the as keyword.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469478945", "createdAt": "2020-08-12T19:06:30Z", "author": {"login": "psantos1113"}, "path": "src/main/js/field/OAuthEndpointButtonField.js", "diffHunk": "@@ -0,0 +1,177 @@\n+import React, { Component } from 'react';\n+import PropTypes from 'prop-types';\n+import GeneralButton from 'field/input/GeneralButton';\n+import FieldsPopUp from 'field/FieldsPopUp';\n+import LabeledField from 'field/LabeledField';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import { createNewConfigurationRequest } from 'util/configurationRequestBuilder';\n+import { connect } from 'react-redux';\n+import StatusMessage from 'field/StatusMessage';\n+import * as HTTErrorUtils from 'util/httpErrorUtilities';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MzEyNQ=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUxMzI4Mg==", "bodyText": "Oh sorry, just meant it was spelled wrong. It should be HTTPErrorUtils", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469513282", "createdAt": "2020-08-12T20:13:48Z", "author": {"login": "bamandel"}, "path": "src/main/js/field/OAuthEndpointButtonField.js", "diffHunk": "@@ -0,0 +1,177 @@\n+import React, { Component } from 'react';\n+import PropTypes from 'prop-types';\n+import GeneralButton from 'field/input/GeneralButton';\n+import FieldsPopUp from 'field/FieldsPopUp';\n+import LabeledField from 'field/LabeledField';\n+import * as FieldModelUtilities from 'util/fieldModelUtilities';\n+import { createNewConfigurationRequest } from 'util/configurationRequestBuilder';\n+import { connect } from 'react-redux';\n+import StatusMessage from 'field/StatusMessage';\n+import * as HTTErrorUtils from 'util/httpErrorUtilities';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ3MzEyNQ=="}, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzUwMDY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureOauthCallbackController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOToxMTo1MlrOG_u4rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOToxMTo1MlrOG_u4rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQ4MTY0NQ==", "bodyText": "This looks like it was added for testing, we may want to log something similar at DEBUG.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469481645", "createdAt": "2020-08-12T19:11:52Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureOauthCallbackController.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.web;\n+\n+import java.net.Proxy;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.ResponseEntity;\n+import org.springframework.web.bind.annotation.GetMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RestController;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.channel.azure.boards.AzureBoardsChannelKey;\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.channel.azure.boards.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.ProxyManager;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.web.controller.BaseController;\n+import com.synopsys.integration.azure.boards.common.http.AzureHttpService;\n+\n+@RestController\n+@RequestMapping(AzureOauthCallbackController.AZURE_OAUTH_CALLBACK_PATH)\n+public class AzureOauthCallbackController {\n+    public static final String AZURE_OAUTH_CALLBACK_PATH = BaseController.OAUTH_CALLBACK_PATH + \"/azure\";\n+    private Logger logger = LoggerFactory.getLogger(AzureOauthCallbackController.class);\n+    private ResponseFactory responseFactory;\n+    private final Gson gson;\n+    private final AzureBoardsChannelKey azureBoardsChannelKey;\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final ProxyManager proxyManager;\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final ConfigurationFieldModelConverter configFieldModelConverter;\n+\n+    @Autowired\n+    public AzureOauthCallbackController(ResponseFactory responseFactory, Gson gson, AzureBoardsChannelKey azureBoardsChannelKey,\n+        AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, ProxyManager proxyManager, ConfigurationAccessor configurationAccessor,\n+        ConfigurationFieldModelConverter configFieldModelConverter) {\n+        this.responseFactory = responseFactory;\n+        this.gson = gson;\n+        this.azureBoardsChannelKey = azureBoardsChannelKey;\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.proxyManager = proxyManager;\n+        this.configurationAccessor = configurationAccessor;\n+        this.configFieldModelConverter = configFieldModelConverter;\n+    }\n+\n+    @GetMapping\n+    public ResponseEntity<String> oauthCallback() {\n+        try {\n+            logger.info(\"callback method called\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a62b397d8fb5f419dcfc7c1ed74c4112fe654bca"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzYyMjA0OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthCustomEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTo0ODo1MlrOG_wCtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxOTo1MzoxMlrOG_wLhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwMDU5OQ==", "bodyText": "Don't we want this to extend CustomEndpoint<OAuthEndpointResponse>?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469500599", "createdAt": "2020-08-12T19:48:52Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth;\n+\n+import org.springframework.http.ResponseEntity;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.CustomEndpoint;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+public abstract class OAuthCustomEndpoint extends CustomEndpoint<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "617cdbd685c34da45f4c86837203e38fff207542"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwMjg1Mw==", "bodyText": "We would need to refactor CustomEndpoint and CustomEndpointManager which may cause bugs elsewhere.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1111#discussion_r469502853", "createdAt": "2020-08-12T19:53:12Z", "author": {"login": "psantos1113"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/endpoint/oauth/OAuthCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.descriptor.config.field.endpoint.oauth;\n+\n+import org.springframework.http.ResponseEntity;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.CustomEndpoint;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+public abstract class OAuthCustomEndpoint extends CustomEndpoint<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTUwMDU5OQ=="}, "originalCommit": {"oid": "617cdbd685c34da45f4c86837203e38fff207542"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1674, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}