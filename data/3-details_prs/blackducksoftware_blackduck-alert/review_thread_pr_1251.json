{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE4NzM0MzMx", "number": 1251, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyNjoyNFrOE3ZmRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1Njo1M1rOE3ylDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI2NTMzOnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectSyncRunnable.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyNjoyNFrOHwuVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDoyNjoyNFrOHwuVTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1MjgxNA==", "bodyText": "@ekerwin Any current BlackDuck API solution for this?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520852814", "createdAt": "2020-11-10T20:26:24Z", "author": {"login": "gkillough"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectSyncRunnable.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+\n+public class BlackDuckProjectSyncRunnable implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final BlackDuckProperties blackDuckProperties;\n+    private final Collection<String> blackDuckProjectNames;\n+\n+    public BlackDuckProjectSyncRunnable(BlackDuckProperties blackDuckProperties, Collection<String> blackDuckProjectNames) {\n+        this.blackDuckProperties = blackDuckProperties;\n+        this.blackDuckProjectNames = blackDuckProjectNames;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            Slf4jIntLogger intLogger = new Slf4jIntLogger(logger);\n+            BlackDuckHttpClient blackDuckHttpClient = blackDuckProperties.createBlackDuckHttpClient(intLogger);\n+            BlackDuckServicesFactory blackDuckServicesFactory = blackDuckProperties.createBlackDuckServicesFactory(blackDuckHttpClient, intLogger);\n+\n+            BlackDuckService blackDuckService = blackDuckServicesFactory.getBlackDuckService();\n+            ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+            ProjectUsersService projectUsersService = blackDuckServicesFactory.createProjectUsersService();\n+\n+            UserView currentUser = blackDuckService.getResponse(ApiDiscovery.CURRENT_USER_LINK_RESPONSE);\n+            List<ProjectView> projectViews = requestAllProjectsByName(projectService, blackDuckProjectNames);\n+            updateBlackDuckProjectPermissions(projectUsersService, currentUser, projectViews);\n+        } catch (Exception e) {\n+            logger.warn(\"{} failed: {}\", getClass().getSimpleName(), e.getMessage());\n+        }\n+    }\n+\n+    // FIXME improve performance of this call\n+    private List<ProjectView> requestAllProjectsByName(ProjectService projectService, Collection<String> projectNames) throws IntegrationException {\n+        return projectService.getAllProjects()\n+                   .stream()\n+                   .filter(projectView -> projectNames.contains(projectView.getName()))\n+                   .collect(Collectors.toList());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ddd9b9a5aed2206a50dedb9a45f22800cecc5d7"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI4Mjk5OnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectSyncRunnable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDozMTozMFrOHwuf5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDozMTozMFrOHwuf5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NTUyNA==", "bodyText": "This class name is a little confusing to me. Would it be better to call this AddUserToProject?  We know it is for Black Duck based on the package and Im not sure the suffix Runnable provides much value.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520855524", "createdAt": "2020-11-10T20:31:30Z", "author": {"login": "jamesrichard91"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectSyncRunnable.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+\n+public class BlackDuckProjectSyncRunnable implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ddd9b9a5aed2206a50dedb9a45f22800cecc5d7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTI4NzAwOnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectSyncRunnable.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDozMjo0NFrOHwuiNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDozMjo0NFrOHwuiNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg1NjExNw==", "bodyText": "I think we can update blackduck-common and pass in a predicate to filter the projects by name. We should look for other places in Alert (if any) that we do this and update it there as well.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520856117", "createdAt": "2020-11-10T20:32:44Z", "author": {"login": "jamesrichard91"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectSyncRunnable.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.blackduck.api.generated.discovery.ApiDiscovery;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectView;\n+import com.synopsys.integration.blackduck.api.generated.view.UserView;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectUsersService;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+\n+public class BlackDuckProjectSyncRunnable implements Runnable {\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final BlackDuckProperties blackDuckProperties;\n+    private final Collection<String> blackDuckProjectNames;\n+\n+    public BlackDuckProjectSyncRunnable(BlackDuckProperties blackDuckProperties, Collection<String> blackDuckProjectNames) {\n+        this.blackDuckProperties = blackDuckProperties;\n+        this.blackDuckProjectNames = blackDuckProjectNames;\n+    }\n+\n+    @Override\n+    public void run() {\n+        try {\n+            Slf4jIntLogger intLogger = new Slf4jIntLogger(logger);\n+            BlackDuckHttpClient blackDuckHttpClient = blackDuckProperties.createBlackDuckHttpClient(intLogger);\n+            BlackDuckServicesFactory blackDuckServicesFactory = blackDuckProperties.createBlackDuckServicesFactory(blackDuckHttpClient, intLogger);\n+\n+            BlackDuckService blackDuckService = blackDuckServicesFactory.getBlackDuckService();\n+            ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+            ProjectUsersService projectUsersService = blackDuckServicesFactory.createProjectUsersService();\n+\n+            UserView currentUser = blackDuckService.getResponse(ApiDiscovery.CURRENT_USER_LINK_RESPONSE);\n+            List<ProjectView> projectViews = requestAllProjectsByName(projectService, blackDuckProjectNames);\n+            updateBlackDuckProjectPermissions(projectUsersService, currentUser, projectViews);\n+        } catch (Exception e) {\n+            logger.warn(\"{} failed: {}\", getClass().getSimpleName(), e.getMessage());\n+        }\n+    }\n+\n+    // FIXME improve performance of this call\n+    private List<ProjectView> requestAllProjectsByName(ProjectService projectService, Collection<String> projectNames) throws IntegrationException {\n+        return projectService.getAllProjects()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ddd9b9a5aed2206a50dedb9a45f22800cecc5d7"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM0MzkyOnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectUserSyncTaskManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMDo0OTozMVrOHwvEvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMjoxMVrOHwvfBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NDk1Ng==", "bodyText": "Any concern that we will cancel running tasks? What happens if someone uses a script to create 1000+ jobs at once. This would be churning a lot. What is the argument against just queuing them up?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520864956", "createdAt": "2020-11-10T20:49:31Z", "author": {"login": "jamesrichard91"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectUserSyncTaskManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+\n+@Component\n+public class BlackDuckProjectUserSyncTaskManager {\n+    public static final int MAX_TASKS = 10;\n+\n+    private final ExecutorService executorService;\n+    private final Queue<Future<?>> syncTasks;\n+    private final AtomicInteger taskCount;\n+\n+    public BlackDuckProjectUserSyncTaskManager() {\n+        this.executorService = Executors.newCachedThreadPool();\n+        this.syncTasks = new ConcurrentLinkedQueue<>();\n+        this.taskCount = new AtomicInteger(0);\n+    }\n+\n+    public void addAlertGlobalBlackDuckUserToProjects(BlackDuckProperties blackDuckProperties, Collection<String> blackDuckProjectNames) {\n+        if (blackDuckProjectNames.isEmpty()) {\n+            return;\n+        }\n+\n+        Runnable syncTask = new BlackDuckProjectSyncRunnable(blackDuckProperties, blackDuckProjectNames);\n+        Future<?> syncTaskFuture = executorService.submit(syncTask);\n+        scheduleNewSyncTask(syncTaskFuture);\n+    }\n+\n+    public void removeCompletedTasks() {\n+        while (!syncTasks.isEmpty() && syncTasks.peek().isDone()) {\n+            syncTasks.remove();\n+            taskCount.decrementAndGet();\n+        }\n+    }\n+\n+    private void scheduleNewSyncTask(Future<?> syncTaskFuture) {\n+        if (taskCount.get() >= MAX_TASKS) {\n+            Future<?> oldestTask = syncTasks.poll();\n+            if (null != oldestTask) {\n+                oldestTask.cancel(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ddd9b9a5aed2206a50dedb9a45f22800cecc5d7"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MTY4NQ==", "bodyText": "This is designed to cancel running tasks. Queuing them up in memory indefinitely is less performant than the sync task we are trying to move away from with this code. The only difference is that we wouldn't be blocking.\nI think the goal of this feature is to be a nicety for customers who are not \"power users\" of BlackDuck by avoiding accidental notification issues. For customers that are \"power users\", they should already have BlackDuck configured correctly.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520871685", "createdAt": "2020-11-10T21:02:11Z", "author": {"login": "gkillough"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectUserSyncTaskManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+\n+@Component\n+public class BlackDuckProjectUserSyncTaskManager {\n+    public static final int MAX_TASKS = 10;\n+\n+    private final ExecutorService executorService;\n+    private final Queue<Future<?>> syncTasks;\n+    private final AtomicInteger taskCount;\n+\n+    public BlackDuckProjectUserSyncTaskManager() {\n+        this.executorService = Executors.newCachedThreadPool();\n+        this.syncTasks = new ConcurrentLinkedQueue<>();\n+        this.taskCount = new AtomicInteger(0);\n+    }\n+\n+    public void addAlertGlobalBlackDuckUserToProjects(BlackDuckProperties blackDuckProperties, Collection<String> blackDuckProjectNames) {\n+        if (blackDuckProjectNames.isEmpty()) {\n+            return;\n+        }\n+\n+        Runnable syncTask = new BlackDuckProjectSyncRunnable(blackDuckProperties, blackDuckProjectNames);\n+        Future<?> syncTaskFuture = executorService.submit(syncTask);\n+        scheduleNewSyncTask(syncTaskFuture);\n+    }\n+\n+    public void removeCompletedTasks() {\n+        while (!syncTasks.isEmpty() && syncTasks.peek().isDone()) {\n+            syncTasks.remove();\n+            taskCount.decrementAndGet();\n+        }\n+    }\n+\n+    private void scheduleNewSyncTask(Future<?> syncTaskFuture) {\n+        if (taskCount.get() >= MAX_TASKS) {\n+            Future<?> oldestTask = syncTasks.poll();\n+            if (null != oldestTask) {\n+                oldestTask.cancel(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg2NDk1Ng=="}, "originalCommit": {"oid": "6ddd9b9a5aed2206a50dedb9a45f22800cecc5d7"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTM4MzczOnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/web/project/ProjectFilterCustomFunctionAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMTozN1rOHwvdxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMTowMTozN1rOHwvdxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3MTM2Ng==", "bodyText": "The same functionality is in BlackDuckProviderDataAccessor, you might want to use that rather than implementing the same logic again here.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520871366", "createdAt": "2020-11-10T21:01:37Z", "author": {"login": "jamesrichard91"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/web/project/ProjectFilterCustomFunctionAction.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.web.project;\n+\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.springframework.web.server.ResponseStatusException;\n+\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n+import com.synopsys.integration.alert.common.action.CustomFunctionAction;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validation.FieldValidationUtility;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.provider.state.StatefulProvider;\n+import com.synopsys.integration.alert.common.rest.HttpServletContentWrapper;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.security.authorization.AuthorizationManager;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProvider;\n+import com.synopsys.integration.blackduck.http.client.BlackDuckHttpClient;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+\n+@Component\n+public class ProjectFilterCustomFunctionAction extends CustomFunctionAction<BlackDuckProjectOptions> {\n+    private static final String MISSING_PROVIDER_ERROR = \"Provider name is required to retrieve projects.\";\n+    private static final ActionResponse<BlackDuckProjectOptions> NO_PROJECT_OPTIONS = new ActionResponse<>(HttpStatus.OK, new BlackDuckProjectOptions(List.of()));\n+\n+    private final Logger logger = LoggerFactory.getLogger(getClass());\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final BlackDuckProvider blackDuckProvider;\n+\n+    @Autowired\n+    public ProjectFilterCustomFunctionAction(AuthorizationManager authorizationManager, DescriptorMap descriptorMap, FieldValidationUtility fieldValidationUtility,\n+        ConfigurationAccessor configurationAccessor, BlackDuckProvider blackDuckProvider) {\n+        super(ProviderDistributionUIConfig.KEY_CONFIGURED_PROJECT, authorizationManager, descriptorMap, fieldValidationUtility);\n+        this.configurationAccessor = configurationAccessor;\n+        this.blackDuckProvider = blackDuckProvider;\n+    }\n+\n+    @Override\n+    public ActionResponse<BlackDuckProjectOptions> createActionResponse(FieldModel fieldModel, HttpServletContentWrapper servletContentWrapper) {\n+        String providerName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_PROVIDER_NAME).orElse(\"\");\n+        if (StringUtils.isBlank(providerName)) {\n+            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, MISSING_PROVIDER_ERROR);\n+        }\n+\n+        return fieldModel.getFieldValue(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID)\n+                   .map(Long::parseLong)\n+                   .map(this::getBlackDuckProjectsActionResponse)\n+                   .orElse(NO_PROJECT_OPTIONS);\n+    }\n+\n+    private ActionResponse<BlackDuckProjectOptions> getBlackDuckProjectsActionResponse(Long blackDuckGlobalConfigId) {\n+        try {\n+            Optional<ConfigurationModel> optionalBlackDuckGlobalConfig = configurationAccessor.getConfigurationById(blackDuckGlobalConfigId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6ddd9b9a5aed2206a50dedb9a45f22800cecc5d7"}, "originalPosition": 89}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NTQyODk2OnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectUserSyncTaskManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToxNjoxNVrOHwv6BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQyMToyMDozMFrOHwwCgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3ODU5Ng==", "bodyText": "Won't we know the type of generic being passed here?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520878596", "createdAt": "2020-11-10T21:16:15Z", "author": {"login": "bamandel"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectUserSyncTaskManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+\n+@Component\n+public class BlackDuckProjectUserSyncTaskManager {\n+    public static final int MAX_TASKS = 10;\n+\n+    private final ExecutorService executorService;\n+    private final Queue<Future<?>> syncTasks;\n+    private final AtomicInteger taskCount;\n+\n+    public BlackDuckProjectUserSyncTaskManager() {\n+        this.executorService = Executors.newCachedThreadPool();\n+        this.syncTasks = new ConcurrentLinkedQueue<>();\n+        this.taskCount = new AtomicInteger(0);\n+    }\n+\n+    public void addAlertGlobalBlackDuckUserToProjects(BlackDuckProperties blackDuckProperties, Collection<String> blackDuckProjectNames) {\n+        if (blackDuckProjectNames.isEmpty()) {\n+            return;\n+        }\n+\n+        Runnable syncTask = new BlackDuckProjectSyncRunnable(blackDuckProperties, blackDuckProjectNames);\n+        Future<?> syncTaskFuture = executorService.submit(syncTask);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b0bad1e79a1c20a7397d5a9f25d2c96e8fc5d57"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg4MDc2OA==", "bodyText": "The generic represents the return-type. When a Callable is submitted, we know what it is, but when a Runnable is submitted, syncTaskFuture.get(...) will always return null.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r520880768", "createdAt": "2020-11-10T21:20:30Z", "author": {"login": "gkillough"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/task/BlackDuckProjectUserSyncTaskManager.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action.task;\n+\n+import java.util.Collection;\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+\n+@Component\n+public class BlackDuckProjectUserSyncTaskManager {\n+    public static final int MAX_TASKS = 10;\n+\n+    private final ExecutorService executorService;\n+    private final Queue<Future<?>> syncTasks;\n+    private final AtomicInteger taskCount;\n+\n+    public BlackDuckProjectUserSyncTaskManager() {\n+        this.executorService = Executors.newCachedThreadPool();\n+        this.syncTasks = new ConcurrentLinkedQueue<>();\n+        this.taskCount = new AtomicInteger(0);\n+    }\n+\n+    public void addAlertGlobalBlackDuckUserToProjects(BlackDuckProperties blackDuckProperties, Collection<String> blackDuckProjectNames) {\n+        if (blackDuckProjectNames.isEmpty()) {\n+            return;\n+        }\n+\n+        Runnable syncTask = new BlackDuckProjectSyncRunnable(blackDuckProperties, blackDuckProjectNames);\n+        Future<?> syncTaskFuture = executorService.submit(syncTask);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDg3ODU5Ng=="}, "originalCommit": {"oid": "9b0bad1e79a1c20a7397d5a9f25d2c96e8fc5d57"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTM1Mzc5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/thread/SizeConstrainedRunnableQueueManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1NTo0OFrOHxVx9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1NTo0OFrOHxVx9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5OTEyNw==", "bodyText": "Is this used anywhere? Are we keeping this around for something?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r521499127", "createdAt": "2020-11-11T16:55:48Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/thread/SizeConstrainedRunnableQueueManager.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.thread;\n+\n+import java.util.Queue;\n+import java.util.concurrent.ConcurrentLinkedQueue;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+public abstract class SizeConstrainedRunnableQueueManager<R extends Runnable> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9179b39449c1d7eaa3ca744ff5ce206e3474b9c"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2OTM1ODIyOnYy", "diffSide": "RIGHT", "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/BlackDuckDistributionApiAction.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1Njo1M1rOHxV0sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNjo1Njo1M1rOHxV0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTQ5OTgyNA==", "bodyText": "Need to update the variable name", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1251#discussion_r521499824", "createdAt": "2020-11-11T16:56:53Z", "author": {"login": "jamesrichard91"}, "path": "provider/src/main/java/com/synopsys/integration/alert/provider/blackduck/action/BlackDuckDistributionApiAction.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * provider\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.provider.blackduck.action;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.Set;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.action.ApiAction;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.provider.state.StatefulProvider;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProperties;\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProvider;\n+import com.synopsys.integration.alert.provider.blackduck.action.task.AddUserToProjectsRunnable;\n+\n+@Component\n+public class BlackDuckDistributionApiAction extends ApiAction {\n+    private final ConfigurationAccessor configurationAccessor;\n+    private final BlackDuckProvider blackDuckProvider;\n+\n+    @Autowired\n+    public BlackDuckDistributionApiAction(ConfigurationAccessor configurationAccessor, BlackDuckProvider blackDuckProvider) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.blackDuckProvider = blackDuckProvider;\n+    }\n+\n+    @Override\n+    public FieldModel afterSaveAction(FieldModel fieldModel) throws AlertException {\n+        afterWrite(fieldModel);\n+        return super.afterSaveAction(fieldModel);\n+    }\n+\n+    @Override\n+    public FieldModel afterUpdateAction(FieldModel previousFieldModel, FieldModel currentFieldModel) throws AlertException {\n+        afterWrite(currentFieldModel);\n+        return super.afterUpdateAction(previousFieldModel, currentFieldModel);\n+    }\n+\n+    private void afterWrite(FieldModel currentFieldModel) throws AlertException {\n+        Optional<Long> optionalProviderConfigId = currentFieldModel.getFieldValue(ProviderDescriptor.KEY_PROVIDER_CONFIG_ID).map(Long::valueOf);\n+        Collection<String> configuredProjects = extractConfiguredProjects(currentFieldModel);\n+        if (optionalProviderConfigId.isPresent() && !configuredProjects.isEmpty()) {\n+            Optional<ConfigurationModel> optionalBlackDuckGlobalConfig = configurationAccessor.getConfigurationById(optionalProviderConfigId.get());\n+            if (optionalBlackDuckGlobalConfig.isPresent()) {\n+                StatefulProvider statefulProvider = blackDuckProvider.createStatefulProvider(optionalBlackDuckGlobalConfig.get());\n+\n+                AddUserToProjectsRunnable projectUserSync = new AddUserToProjectsRunnable((BlackDuckProperties) statefulProvider.getProperties(), configuredProjects);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c9179b39449c1d7eaa3ca744ff5ce206e3474b9c"}, "originalPosition": 76}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2190, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}