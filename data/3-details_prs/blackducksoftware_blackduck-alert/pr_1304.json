{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwNjI5OTIx", "number": 1304, "title": "Jira Field Value Replacement", "bodyText": "Add utility to replace jira field values\nAbstract error message handling for readability and separation of concerns", "createdAt": "2020-12-15T19:41:17Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304", "merged": true, "mergeCommit": {"oid": "23da1fc8e10fffc55a2caaabc69109aac3fc1ff7"}, "closed": true, "closedAt": "2020-12-16T16:30:32Z", "author": {"login": "gkillough"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdmfMYIAH2gAyNTQwNjI5OTIxOjVhZjRmY2NlMWEwY2MwNDAwNjE5ODlmYjY5NTQ1YzU0N2RmOTFhYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmxFnDAH2gAyNTQwNjI5OTIxOmRlNjZkNTU2NTRjMzVmMzQ0OTViZjRjMzQ1ZTdkZGRkMDcwNDg3ZDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "5af4fcce1a0cc040061989fb69545c547df91aa0", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5af4fcce1a0cc040061989fb69545c547df91aa0", "committedDate": "2020-12-15T19:06:56Z", "message": "Feat(Jira): Add utility for field replacement and error message improvement"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c3f0f84c860adc85469c3b86f5775f0eabb72c2f", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/c3f0f84c860adc85469c3b86f5775f0eabb72c2f", "committedDate": "2020-12-15T19:39:59Z", "message": "Fix(Jira): Update issue handler constructors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff9b034945899a141550402a687ba2cf1a718deb", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/ff9b034945899a141550402a687ba2cf1a718deb", "committedDate": "2020-12-15T19:44:28Z", "message": "Feat(Jira): Use replacement field value if present"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODI2MTg4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#pullrequestreview-552826188", "createdAt": "2020-12-15T20:06:06Z", "commit": {"oid": "ff9b034945899a141550402a687ba2cf1a718deb"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNjowNlrOIGdzdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMDowNjowNlrOIGdzdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzY1MDY3Ng==", "bodyText": "I believe there is a slight spelling mistake here 'may'", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r543650676", "createdAt": "2020-12-15T20:06:06Z", "author": {"login": "bamandel"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for may fields", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff9b034945899a141550402a687ba2cf1a718deb"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODI4MTY3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#pullrequestreview-552828167", "createdAt": "2020-12-15T20:08:47Z", "commit": {"oid": "ff9b034945899a141550402a687ba2cf1a718deb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/06a853604112495c8d5015262afbc8ebde85fa0d", "committedDate": "2020-12-15T20:12:58Z", "message": "Fix(Jira): Correct typo in comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyODQxNzAw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#pullrequestreview-552841700", "createdAt": "2020-12-15T20:28:08Z", "commit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzNzc3ODg4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#pullrequestreview-553777888", "createdAt": "2020-12-16T15:05:59Z", "commit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODA3MzA2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#pullrequestreview-553807306", "createdAt": "2020-12-16T15:34:12Z", "commit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozNDoxMlrOIHLRxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozNDoxMlrOIHLRxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NTcxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotBlank(fieldReplacementValue)) {\n          \n          \n            \n                        this.fieldReplacementValue = fieldReplacementValue;\n          \n          \n            \n                    }\n          \n          \n            \n                    this.fieldReplacementValue = StringUtils.trimToNull(fieldReplacementValue);", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544395719", "createdAt": "2020-12-16T15:34:12Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -22,21 +22,38 @@\n  */\n package com.synopsys.integration.alert.channel.jira.common.model;\n \n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n public class JiraCustomFieldConfig {\n     private final String fieldName;\n-    private final String fieldValue;\n+    private final String fieldOriginalValue;\n+    private @Nullable String fieldReplacementValue;\n \n-    public JiraCustomFieldConfig(String fieldName, String fieldValue) {\n+    public JiraCustomFieldConfig(String fieldName, String fieldOriginalValue) {\n         this.fieldName = fieldName;\n-        this.fieldValue = fieldValue;\n+        this.fieldOriginalValue = fieldOriginalValue;\n     }\n \n     public String getFieldName() {\n         return fieldName;\n     }\n \n-    public String getFieldValue() {\n-        return fieldValue;\n+    public String getFieldOriginalValue() {\n+        return fieldOriginalValue;\n+    }\n+\n+    public Optional<String> getFieldReplacementValue() {\n+        return Optional.ofNullable(fieldReplacementValue);\n+    }\n+\n+    public void setFieldReplacementValue(String fieldReplacementValue) {\n+        // Leave the field null if it would be set to a blank value\n+        if (StringUtils.isNotBlank(fieldReplacementValue)) {\n+            this.fieldReplacementValue = fieldReplacementValue;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUzODA4Mjc4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#pullrequestreview-553808278", "createdAt": "2020-12-16T15:35:10Z", "commit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozNToxMVrOIHLVNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNlQxNTozOTozMVrOIHLjXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NjU5OQ==", "bodyText": "Not sure if this is better since you are re-assigning it every time, but I think it's a little clearer and doesn't need a comment.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544396599", "createdAt": "2020-12-16T15:35:11Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/model/JiraCustomFieldConfig.java", "diffHunk": "@@ -22,21 +22,38 @@\n  */\n package com.synopsys.integration.alert.channel.jira.common.model;\n \n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n public class JiraCustomFieldConfig {\n     private final String fieldName;\n-    private final String fieldValue;\n+    private final String fieldOriginalValue;\n+    private @Nullable String fieldReplacementValue;\n \n-    public JiraCustomFieldConfig(String fieldName, String fieldValue) {\n+    public JiraCustomFieldConfig(String fieldName, String fieldOriginalValue) {\n         this.fieldName = fieldName;\n-        this.fieldValue = fieldValue;\n+        this.fieldOriginalValue = fieldOriginalValue;\n     }\n \n     public String getFieldName() {\n         return fieldName;\n     }\n \n-    public String getFieldValue() {\n-        return fieldValue;\n+    public String getFieldOriginalValue() {\n+        return fieldOriginalValue;\n+    }\n+\n+    public Optional<String> getFieldReplacementValue() {\n+        return Optional.ofNullable(fieldReplacementValue);\n+    }\n+\n+    public void setFieldReplacementValue(String fieldReplacementValue) {\n+        // Leave the field null if it would be set to a blank value\n+        if (StringUtils.isNotBlank(fieldReplacementValue)) {\n+            this.fieldReplacementValue = fieldReplacementValue;\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5NTcxOQ=="}, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDM5OTYyMg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    if (StringUtils.isNotBlank(nullableValue)) {\n          \n          \n            \n                        return Optional.of(nullableValue);\n          \n          \n            \n                    }\n          \n          \n            \n                    return Optional.of(DEFAULT_REPLACEMENT);\n          \n          \n            \n                    return Optional.ofNullable(StringUtils.trimToNull(nullableValue))\n          \n          \n            \n                                                    .or(() -> Optional.of(\"DEFAULT_REPLACEMENT\"));", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544399622", "createdAt": "2020-12-16T15:38:50Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraCustomFieldValueReplacementUtils.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.Optional;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.synopsys.integration.alert.channel.jira.common.JiraIssueSearchProperties;\n+import com.synopsys.integration.alert.channel.jira.common.model.JiraCustomFieldConfig;\n+\n+public final class JiraCustomFieldValueReplacementUtils {\n+    public static final String REPLACEMENT_PROVIDER_NAME = \"{{providerName}}\";\n+    public static final String REPLACEMENT_PROJECT_NAME = \"{{projectName}}\";\n+    public static final String REPLACEMENT_PROJECT_VERSION = \"{{projectVersion}}\";\n+    public static final String REPLACEMENT_COMPONENT_NAME = \"{{componentName}}\";\n+    public static final String REPLACEMENT_COMPONENT_VERSION = \"{{componentVersion}}\";\n+\n+    // \"None\" is a frequently used default String for many fields\n+    public static final String DEFAULT_REPLACEMENT = \"None\";\n+\n+    public static void injectReplacementFieldValue(JiraCustomFieldConfig jiraCustomField, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        String originalValue = jiraCustomField.getFieldOriginalValue();\n+        extractReplacementValue(originalValue, jiraIssueSearchProperties)\n+            .ifPresent(jiraCustomField::setFieldReplacementValue);\n+    }\n+\n+    private static Optional<String> extractReplacementValue(String originalFieldValue, JiraIssueSearchProperties jiraIssueSearchProperties) {\n+        switch (originalFieldValue) {\n+            case REPLACEMENT_PROVIDER_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getProvider());\n+            case REPLACEMENT_PROJECT_NAME:\n+                return Optional.of(jiraIssueSearchProperties.getTopicValue());\n+            case REPLACEMENT_PROJECT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubTopicValue());\n+            case REPLACEMENT_COMPONENT_NAME:\n+                return defaultIfBlank(jiraIssueSearchProperties.getComponentValue());\n+            case REPLACEMENT_COMPONENT_VERSION:\n+                return defaultIfBlank(jiraIssueSearchProperties.getSubComponentValue());\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n+    private static Optional<String> defaultIfBlank(String nullableValue) {\n+        if (StringUtils.isNotBlank(nullableValue)) {\n+            return Optional.of(nullableValue);\n+        }\n+        return Optional.of(DEFAULT_REPLACEMENT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NDQwMDIyMA==", "bodyText": "Do we prefer List.of() over Collections.emptyList()?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1304#discussion_r544400220", "createdAt": "2020-12-16T15:39:31Z", "author": {"login": "JakeMathews"}, "path": "channel/src/main/java/com/synopsys/integration/alert/channel/jira/common/util/JiraErrorMessageUtility.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * channel\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.jira.common.util;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonArray;\n+import com.google.gson.JsonElement;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.exception.AlertFieldException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+\n+public class JiraErrorMessageUtility {\n+    private final Gson gson;\n+\n+    public JiraErrorMessageUtility(Gson gson) {\n+        this.gson = gson;\n+    }\n+\n+    public AlertException improveRestException(IntegrationRestException restException, String issueCreatorFieldKey, String issueCreatorEmail) {\n+        String message = restException.getMessage();\n+        try {\n+            List<String> responseErrors = extractErrorsFromResponseContent(restException.getHttpResponseContent(), issueCreatorFieldKey, issueCreatorEmail);\n+            if (!responseErrors.isEmpty()) {\n+                message += \" | Details: \" + StringUtils.join(responseErrors, \", \");\n+            }\n+        } catch (AlertFieldException reporterException) {\n+            return reporterException;\n+        }\n+        return new AlertException(message, restException);\n+    }\n+\n+    private List<String> extractErrorsFromResponseContent(String httpResponseContent, String issueCreatorFieldKey, String issueCreatorEmail) throws AlertFieldException {\n+        JsonObject responseContentObject = gson.fromJson(httpResponseContent, JsonObject.class);\n+        if (null != responseContentObject && responseContentObject.has(\"errors\")) {\n+            return extractSpecificErrorsFromErrorsObject(responseContentObject.getAsJsonObject(\"errors\"), issueCreatorFieldKey, issueCreatorEmail);\n+        }\n+        return List.of();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06a853604112495c8d5015262afbc8ebde85fa0d"}, "originalPosition": 65}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de66d55654c35f34495bf4c345e7dddd070487d2", "author": {"user": {"login": "gkillough", "name": "Gavin Killough"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/de66d55654c35f34495bf4c345e7dddd070487d2", "committedDate": "2020-12-16T15:57:50Z", "message": "Refactor: Clean up optional string usage"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2966, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}