{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNjYxMTcz", "number": 972, "title": "Mc alertdb tests continued", "bodyText": "Tests for DefaultCustomCertificateAccessor and ProviderTaskProperties. Included in this PR is a new method for Mocking the JPA repository. This was done to simplify the other repositories by only having to implement the required methods and overloading whichever ones are required for the tests to run.\nThese Mock JPA repository changes were also pushed to the previously implemented repositories.", "createdAt": "2020-05-05T17:45:29Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972", "merged": true, "mergeCommit": {"oid": "e585d4f621d39d325829d9a310d333f517ed41f2"}, "closed": true, "closedAt": "2020-05-06T13:27:22Z", "author": {"login": "ChomickiM"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcdFtCKAH2gAyNDEzNjYxMTczOjI5OTg0OTUwZWM0Y2E0NzY1NjM5MTQxNjYwN2YyMjk1NzM1NThiZjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABceoRv-AFqTQwNjU4NjIxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "29984950ec4ca47656391416607f229573558bf0", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/29984950ec4ca47656391416607f229573558bf0", "committedDate": "2020-05-01T18:08:36Z", "message": "test: Adding tests and mock repository for ProviderTaskProperties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "159c0af84930d73d5c1e45cc8f9fb7131dc54fae", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/159c0af84930d73d5c1e45cc8f9fb7131dc54fae", "committedDate": "2020-05-01T18:16:21Z", "message": "tests: Implement a mock JPA repository."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4e448762824573d975f5e2c99fd7bbd738aca30", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/d4e448762824573d975f5e2c99fd7bbd738aca30", "committedDate": "2020-05-01T18:48:38Z", "message": "test: Implement a default repository class to be extended."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d6bbe400149b6d8f5478a36d68fe61db8dfca72", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8d6bbe400149b6d8f5478a36d68fe61db8dfca72", "committedDate": "2020-05-04T15:49:03Z", "message": "test: Increasing test coverage for DefaultProviderTaskPropertiesAccessorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2df55955f9c6f8c83305b96f61391ef870754b3", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f2df55955f9c6f8c83305b96f61391ef870754b3", "committedDate": "2020-05-05T15:44:46Z", "message": "test: Increasing test coverage for DefaultCustomCertificateAccessor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e81e3fcda81b8828582ffc53cc65f3d3c0aaaad", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/8e81e3fcda81b8828582ffc53cc65f3d3c0aaaad", "committedDate": "2020-05-05T17:14:23Z", "message": "test: improve repositories to extend DefaultMockJPARepository"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/f44f186e7408bada21c9569c35cc7ef31c547ca4", "committedDate": "2020-05-05T17:20:09Z", "message": "Merge remote-tracking branch 'origin/master' into MC_alertdb_tests_continued"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDI5OTY0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406029964", "createdAt": "2020-05-05T18:02:39Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowMjo0MFrOGQ1Tkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODowMjo0MFrOGQ1Tkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMwMzc2Mw==", "bodyText": "new Date() will have a different underlying time every time it is called. We should be careful when comparing these.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420303763", "createdAt": "2020-05-05T18:02:40Z", "author": {"login": "gkillough"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDM3NzY0", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406037764", "createdAt": "2020-05-05T18:13:19Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMzoxOVrOGQ1sUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxMzoxOVrOGQ1sUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMDA5OQ==", "bodyText": "If we want to compare the updated times, we should move the Date to its own field. And in the tests we can create a new Date if we want to use a newer time, and use the Date field when they should be the same.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420310099", "createdAt": "2020-05-05T18:13:19Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDM3OTQ1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406037945", "createdAt": "2020-05-05T18:13:33Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQwODI4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406040828", "createdAt": "2020-05-05T18:17:26Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNzoyNlrOGQ12JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxNzoyNlrOGQ12JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMjYxMg==", "bodyText": "This could be an isEmpty check", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420312612", "createdAt": "2020-05-05T18:17:26Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(alias);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 120}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQyMTY2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406042166", "createdAt": "2020-05-05T18:19:13Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxOToxM1rOGQ16jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoxOToxM1rOGQ16jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxMzc0Mg==", "bodyText": "Could be isEmpty check.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420313742", "createdAt": "2020-05-05T18:19:13Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(alias);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasBlankTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            customCertificateAccessor.deleteCertificate(\"\");\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByIdTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(0L);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 148}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ0MTcw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406044170", "createdAt": "2020-05-05T18:22:02Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMjowMlrOGQ2BEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyMjowMlrOGQ2BEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNTQwOQ==", "bodyText": "These lines may not be necessary if you made the class abstract. Having the keyword there would others realize that the class should be extended.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420315409", "createdAt": "2020-05-05T18:22:02Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/DefaultMockJPARepository.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public class DefaultMockJPARepository<T, ID> implements JpaRepository<T,ID> {\n+    // Empty implementation of a JPA repository to be extended by other mock repositories.\n+    // The child classes that extend this can then override the methods they need to\n+    // provide the correct testing functionality needed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ1NjY1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406045665", "createdAt": "2020-05-05T18:24:12Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDoxMlrOGQ2F6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDoxMlrOGQ2F6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjY1MQ==", "bodyText": "Can you add a comment in the exception block or an assertion that the exception is not null? That way other people can see that we expect that exception and it wasn't a mistake.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420316651", "createdAt": "2020-05-05T18:24:12Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ1OTk4", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406045998", "createdAt": "2020-05-05T18:24:39Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDozOVrOGQ2HAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDozOVrOGQ2HAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNjkzMA==", "bodyText": "Same as above.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420316930", "createdAt": "2020-05-05T18:24:39Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -0,0 +1,174 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.common.persistence.model.CustomCertificateModel;\n+import com.synopsys.integration.alert.database.api.mock.MockCustomCertificateRepository;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class DefaultCustomCertificateAccessorTest {\n+    private final String alias = \"alias-test\";\n+    private final String content = \"content-test\";\n+\n+    private CustomCertificateModel expectedCustomCertificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+    @Test\n+    public void getCertificatesTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void getCertificateTest() {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        Optional<CustomCertificateModel> customCertificateModelOptional = customCertificateAccessor.getCertificate(0L);\n+        Optional<CustomCertificateModel> customCertificateModelOptionalEmpty = customCertificateAccessor.getCertificate(9L);\n+\n+        assertTrue(customCertificateModelOptional.isPresent());\n+        assertFalse(customCertificateModelOptionalEmpty.isPresent());\n+        CustomCertificateModel customCertificateModel = customCertificateModelOptional.get();\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateTest() throws Exception {\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        CustomCertificateModel customCertificateModel = customCertificateAccessor.storeCertificate(certificateModel);\n+\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+    }\n+\n+    @Test\n+    public void storeCertificateNullTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        try {\n+            customCertificateAccessor.storeCertificate(null);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateBlankValuesTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(\"\", content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(alias, \"\", new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void storeCertificateIdDoesNotExistTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository();\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            CustomCertificateModel certificateModel = new CustomCertificateModel(9L, alias, content, new Date().toString());\n+            customCertificateAccessor.storeCertificate(certificateModel);\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+        List<CustomCertificateModel> customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(1, customCertificateModelList.size());\n+        CustomCertificateModel customCertificateModel = customCertificateModelList.get(0);\n+        testCustomCertificateModel(expectedCustomCertificateModel, customCertificateModel);\n+\n+        customCertificateAccessor.deleteCertificate(alias);\n+        customCertificateModelList = customCertificateAccessor.getCertificates();\n+\n+        assertEquals(0, customCertificateModelList.size());\n+    }\n+\n+    @Test\n+    public void deleteCertificateByAliasBlankTest() throws Exception {\n+        CustomCertificateRepository customCertificateRepository = new MockCustomCertificateRepository(alias, content, new Date());\n+        DefaultCustomCertificateAccessor customCertificateAccessor = new DefaultCustomCertificateAccessor(customCertificateRepository);\n+\n+        try {\n+            customCertificateAccessor.deleteCertificate(\"\");\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ2MTU5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406046159", "createdAt": "2020-05-05T18:24:54Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDo1NFrOGQ2HhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNDo1NFrOGQ2HhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNzA2MA==", "bodyText": "Generally, this sort of explanation would go above the class declaration.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420317060", "createdAt": "2020-05-05T18:24:54Z", "author": {"login": "bamandel"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/DefaultMockJPARepository.java", "diffHunk": "@@ -0,0 +1,140 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.springframework.data.domain.Example;\n+import org.springframework.data.domain.Page;\n+import org.springframework.data.domain.Pageable;\n+import org.springframework.data.domain.Sort;\n+import org.springframework.data.jpa.repository.JpaRepository;\n+\n+public class DefaultMockJPARepository<T, ID> implements JpaRepository<T,ID> {\n+    // Empty implementation of a JPA repository to be extended by other mock repositories.\n+    // The child classes that extend this can then override the methods they need to\n+    // provide the correct testing functionality needed.\n+    // To use the class correctly have a child class extend this class and also implement the JPA Repository\n+    // interface to be tested.\n+    //\n+    // For example creating a mock for SystemStatusRepository\n+    // class MockSystemStatusRepository extends DefaultMockJPARepository<SystemStatus, Long> implements SystemStatusRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 20}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ3MDIw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406047020", "createdAt": "2020-05-05T18:26:11Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNjoxMVrOGQ2KWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODoyNjoxMVrOGQ2KWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMxNzc4NA==", "bodyText": "You could replace these 3 lines by calling the save method.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420317784", "createdAt": "2020-05-05T18:26:11Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockCustomCertificateRepository.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateEntity;\n+import com.synopsys.integration.alert.database.certificates.CustomCertificateRepository;\n+\n+public class MockCustomCertificateRepository extends DefaultMockJPARepository<CustomCertificateEntity, Long> implements CustomCertificateRepository {\n+\n+    private Map<Long, CustomCertificateEntity> customCertificateEntityMapById = new HashMap<>();\n+\n+    private long currentId = 0;\n+\n+    public MockCustomCertificateRepository() {\n+\n+    }\n+\n+    public MockCustomCertificateRepository(String alias, String content, Date lastUpdated) {\n+        CustomCertificateEntity customCertificateEntity = new CustomCertificateEntity(alias, content, lastUpdated);\n+        customCertificateEntity.setId(currentId);\n+        customCertificateEntityMapById.put(currentId, customCertificateEntity);\n+        currentId++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ4MDgy", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406048082", "createdAt": "2020-05-05T18:27:40Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDQ5OTQ3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406049947", "createdAt": "2020-05-05T18:30:11Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMDoxMlrOGQ2UXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMDoxMlrOGQ2UXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMDM0OQ==", "bodyText": "Should add something in the exception block.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420320349", "createdAt": "2020-05-05T18:30:12Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultProviderTaskPropertiesAccessorTest.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package com.synopsys.integration.alert.database.api;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.alert.common.exception.AlertDatabaseConstraintException;\n+import com.synopsys.integration.alert.database.api.mock.MockProviderTaskPropertiesRepository;\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesEntity;\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesRepository;\n+\n+public class DefaultProviderTaskPropertiesAccessorTest {\n+    private final Long providerConfigId = 1L;\n+    private final String taskName = \"taskName-test\";\n+    private final String propertyName = \"propertyName-test\";\n+    private final String value = \"value-test\";\n+\n+    private ProviderTaskPropertiesRepository providerTaskPropertiesRepository = new MockProviderTaskPropertiesRepository(providerConfigId, taskName, propertyName, value);\n+\n+    @Test\n+    public void getTaskPropertyTest() {\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+        Optional<String> taskPropertyValue = providerTaskPropertiesAccessor.getTaskProperty(taskName, propertyName);\n+\n+        assertTrue(taskPropertyValue.isPresent());\n+        assertEquals(value, taskPropertyValue.get());\n+    }\n+\n+    @Test\n+    public void getTaskPropertyEmptyTest() {\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+        Optional<String> taskPropertyOptionalEmpty = providerTaskPropertiesAccessor.getTaskProperty(\"invalidTaskName\", \"invalidPropertyKey\");\n+        Optional<String> taskPropertyValueEmpty = providerTaskPropertiesAccessor.getTaskProperty(\"\", \"\");\n+\n+        assertFalse(taskPropertyOptionalEmpty.isPresent());\n+        assertFalse(taskPropertyValueEmpty.isPresent());\n+    }\n+\n+    @Test\n+    public void setTaskPropertyTest() throws Exception {\n+        final Long newConfigId = 2L;\n+        final String newTaskName = \"taskName-new\";\n+        final String newPropertyName = \"propertyName-new\";\n+        final String newValue = \"value-new\";\n+\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+        providerTaskPropertiesAccessor.setTaskProperty(newConfigId, newTaskName, newPropertyName, newValue);\n+\n+        Optional<ProviderTaskPropertiesEntity> providerTaskPropertiesEntityOptional = providerTaskPropertiesRepository.findByTaskNameAndPropertyName(newTaskName, newPropertyName);\n+\n+        assertTrue(providerTaskPropertiesEntityOptional.isPresent());\n+        ProviderTaskPropertiesEntity providerTaskPropertiesEntity = providerTaskPropertiesEntityOptional.get();\n+        assertEquals(newConfigId, providerTaskPropertiesEntity.getProviderConfigId());\n+        assertEquals(newTaskName, providerTaskPropertiesEntity.getTaskName());\n+        assertEquals(newPropertyName, providerTaskPropertiesEntity.getPropertyName());\n+        assertEquals(newValue, providerTaskPropertiesEntity.getValue());\n+    }\n+\n+    @Test\n+    public void setTaskPropertyExceptionTest() throws Exception {\n+        DefaultProviderTaskPropertiesAccessor providerTaskPropertiesAccessor = new DefaultProviderTaskPropertiesAccessor(providerTaskPropertiesRepository);\n+\n+        try {\n+            providerTaskPropertiesAccessor.setTaskProperty(null, \"\", \"\", \"\");\n+            fail();\n+        } catch (AlertDatabaseConstraintException e) {\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 72}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDUxMDQ5", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406051049", "createdAt": "2020-05-05T18:31:38Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMTozOFrOGQ2Xyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxODozMTozOFrOGQ2Xyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDMyMTIyNg==", "bodyText": "Should call the save method here, in case we need to add additional behavior for saving entities in this Mock class in the future.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420321226", "createdAt": "2020-05-05T18:31:38Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/mock/MockProviderTaskPropertiesRepository.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package com.synopsys.integration.alert.database.api.mock;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesEntity;\n+import com.synopsys.integration.alert.database.provider.task.ProviderTaskPropertiesRepository;\n+\n+public class MockProviderTaskPropertiesRepository extends DefaultMockJPARepository<ProviderTaskPropertiesEntity, Long> implements ProviderTaskPropertiesRepository {\n+\n+    private Map<Long, ProviderTaskPropertiesEntity> providerTaskPropertiesEntityMap = new HashMap<>();\n+\n+    public MockProviderTaskPropertiesRepository(Long providerConfigId, String taskName, String propertyName, String value) {\n+        ProviderTaskPropertiesEntity providerTaskPropertiesEntity = new ProviderTaskPropertiesEntity(providerConfigId, taskName, propertyName, value);\n+        providerTaskPropertiesEntityMap.put(providerConfigId, providerTaskPropertiesEntity);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "originalPosition": 16}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2MDUxNTY1", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406051565", "createdAt": "2020-05-05T18:32:20Z", "commit": {"oid": "f44f186e7408bada21c9569c35cc7ef31c547ca4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3b271f75764f1d4c3ac037474b16d44596d8c2e7", "author": {"user": {"login": "ChomickiM", "name": "Martin"}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/3b271f75764f1d4c3ac037474b16d44596d8c2e7", "committedDate": "2020-05-05T19:37:39Z", "message": "test: Updating tests based on PR feedback"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTg1MjEw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406585210", "createdAt": "2020-05-06T12:58:19Z", "commit": {"oid": "3b271f75764f1d4c3ac037474b16d44596d8c2e7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo1ODoxOVrOGRRtLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjo1ODoxOVrOGRRtLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc2OTA3MA==", "bodyText": "Why are we using the DateUtils above and the .toString() method here? We should be more consistent and choose one of these approaches.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#discussion_r420769070", "createdAt": "2020-05-06T12:58:19Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/test/java/com/synopsys/integration/alert/database/api/DefaultCustomCertificateAccessorTest.java", "diffHunk": "@@ -50,7 +53,7 @@ public void getCertificateTest() {\n \n     @Test\n     public void storeCertificateTest() throws Exception {\n-        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, new Date().toString());\n+        CustomCertificateModel certificateModel = new CustomCertificateModel(alias, content, testDate.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b271f75764f1d4c3ac037474b16d44596d8c2e7"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NTg2MjEy", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/972#pullrequestreview-406586212", "createdAt": "2020-05-06T12:59:24Z", "commit": {"oid": "3b271f75764f1d4c3ac037474b16d44596d8c2e7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2718, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}