{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNTg0OTkw", "number": 1188, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzoxNlrOEnJP7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzoxNlrOEnJP7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDgxNDUzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/web/actions/SystemActionsTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzoyMzoxNlrOHXlEmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzozMDoxOFrOHXlU5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjY4MQ==", "bodyText": "Are we sure we want to use a parameterized test here? It looks like we just want to create a start and end time list and iterate over it in the test. Parameterized tests will just make it harder to debug the test in my opinion.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#discussion_r494486681", "createdAt": "2020-09-24T17:23:16Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/actions/SystemActionsTest.java", "diffHunk": "@@ -1,157 +1,88 @@\n package com.synopsys.integration.alert.web.actions;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n \n-import com.synopsys.integration.alert.common.descriptor.accessor.SettingsUtility;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.persistence.model.SystemMessageModel;\n-import com.synopsys.integration.alert.common.rest.ProxyManager;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n-import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptorKey;\n import com.synopsys.integration.alert.database.api.DefaultSystemStatusUtility;\n import com.synopsys.integration.alert.database.system.DefaultSystemMessageUtility;\n+import com.synopsys.integration.alert.web.api.system.MultiSystemMessageModel;\n import com.synopsys.integration.alert.web.api.system.SystemActions;\n-import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.rest.RestConstants;\n \n public class SystemActionsTest {\n-    private static final SettingsDescriptorKey SETTINGS_DESCRIPTOR_KEY = new SettingsDescriptorKey();\n-\n     private DefaultSystemStatusUtility defaultSystemStatusUtility;\n     private DefaultSystemMessageUtility defaultSystemMessageUtility;\n-    private FieldModelProcessor fieldModelProcessor;\n-    private SettingsUtility settingsUtility;\n \n     @BeforeEach\n-    public void initiailize() throws AlertException {\n+    public void initiailize() {\n         defaultSystemStatusUtility = Mockito.mock(DefaultSystemStatusUtility.class);\n         defaultSystemMessageUtility = Mockito.mock(DefaultSystemMessageUtility.class);\n-        settingsUtility = Mockito.mock(SettingsUtility.class);\n-        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n         List<SystemMessageModel> messages = createSystemMessageList();\n         Mockito.when(defaultSystemMessageUtility.getSystemMessages()).thenReturn(messages);\n+        Mockito.when(defaultSystemMessageUtility.getSystemMessagesBefore(Mockito.any())).thenReturn(messages);\n         Mockito.when(defaultSystemMessageUtility.getSystemMessagesAfter(Mockito.any())).thenReturn(messages);\n-        Mockito.when(settingsUtility.getKey()).thenReturn(SETTINGS_DESCRIPTOR_KEY);\n-        Mockito.when(settingsUtility.doesConfigurationExist()).thenReturn(true);\n+        Mockito.when(defaultSystemMessageUtility.findBetween(Mockito.any())).thenReturn(messages);\n     }\n \n-    @Test\n-    public void getSystemMessagesSinceStartup() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesSinceStartup();\n-        Mockito.verify(defaultSystemStatusUtility).getStartupTime();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n+    public static List<Pair<String, String>> getStartAndEndTimes() {\n+        return List.of(\n+            Pair.of(null, null),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", null),\n+            Pair.of(null, \"2018-11-13T00:00:00.000Z\"),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\")\n+        );\n     }\n \n-    @Test\n-    public void testGetSystemMessagesAfter() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesAfter(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBefore() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBefore(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesBefore(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBetween() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBetween(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).findBetween(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessages() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessages();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessages();\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4ODk1Nw==", "bodyText": "This is what parameterized tests are meant for. I don't think we should change it", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#discussion_r494488957", "createdAt": "2020-09-24T17:27:03Z", "author": {"login": "jamesrichard91"}, "path": "src/test/java/com/synopsys/integration/alert/web/actions/SystemActionsTest.java", "diffHunk": "@@ -1,157 +1,88 @@\n package com.synopsys.integration.alert.web.actions;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n \n-import com.synopsys.integration.alert.common.descriptor.accessor.SettingsUtility;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.persistence.model.SystemMessageModel;\n-import com.synopsys.integration.alert.common.rest.ProxyManager;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n-import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptorKey;\n import com.synopsys.integration.alert.database.api.DefaultSystemStatusUtility;\n import com.synopsys.integration.alert.database.system.DefaultSystemMessageUtility;\n+import com.synopsys.integration.alert.web.api.system.MultiSystemMessageModel;\n import com.synopsys.integration.alert.web.api.system.SystemActions;\n-import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.rest.RestConstants;\n \n public class SystemActionsTest {\n-    private static final SettingsDescriptorKey SETTINGS_DESCRIPTOR_KEY = new SettingsDescriptorKey();\n-\n     private DefaultSystemStatusUtility defaultSystemStatusUtility;\n     private DefaultSystemMessageUtility defaultSystemMessageUtility;\n-    private FieldModelProcessor fieldModelProcessor;\n-    private SettingsUtility settingsUtility;\n \n     @BeforeEach\n-    public void initiailize() throws AlertException {\n+    public void initiailize() {\n         defaultSystemStatusUtility = Mockito.mock(DefaultSystemStatusUtility.class);\n         defaultSystemMessageUtility = Mockito.mock(DefaultSystemMessageUtility.class);\n-        settingsUtility = Mockito.mock(SettingsUtility.class);\n-        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n         List<SystemMessageModel> messages = createSystemMessageList();\n         Mockito.when(defaultSystemMessageUtility.getSystemMessages()).thenReturn(messages);\n+        Mockito.when(defaultSystemMessageUtility.getSystemMessagesBefore(Mockito.any())).thenReturn(messages);\n         Mockito.when(defaultSystemMessageUtility.getSystemMessagesAfter(Mockito.any())).thenReturn(messages);\n-        Mockito.when(settingsUtility.getKey()).thenReturn(SETTINGS_DESCRIPTOR_KEY);\n-        Mockito.when(settingsUtility.doesConfigurationExist()).thenReturn(true);\n+        Mockito.when(defaultSystemMessageUtility.findBetween(Mockito.any())).thenReturn(messages);\n     }\n \n-    @Test\n-    public void getSystemMessagesSinceStartup() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesSinceStartup();\n-        Mockito.verify(defaultSystemStatusUtility).getStartupTime();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n+    public static List<Pair<String, String>> getStartAndEndTimes() {\n+        return List.of(\n+            Pair.of(null, null),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", null),\n+            Pair.of(null, \"2018-11-13T00:00:00.000Z\"),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\")\n+        );\n     }\n \n-    @Test\n-    public void testGetSystemMessagesAfter() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesAfter(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBefore() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBefore(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesBefore(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBetween() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBetween(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).findBetween(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessages() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessages();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessages();\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjY4MQ=="}, "originalCommit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MDUyNg==", "bodyText": "Parameterized tests are expanded into individual tests where the input is shown as part of the test.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#discussion_r494490526", "createdAt": "2020-09-24T17:29:48Z", "author": {"login": "psantos1113"}, "path": "src/test/java/com/synopsys/integration/alert/web/actions/SystemActionsTest.java", "diffHunk": "@@ -1,157 +1,88 @@\n package com.synopsys.integration.alert.web.actions;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n \n-import com.synopsys.integration.alert.common.descriptor.accessor.SettingsUtility;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.persistence.model.SystemMessageModel;\n-import com.synopsys.integration.alert.common.rest.ProxyManager;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n-import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptorKey;\n import com.synopsys.integration.alert.database.api.DefaultSystemStatusUtility;\n import com.synopsys.integration.alert.database.system.DefaultSystemMessageUtility;\n+import com.synopsys.integration.alert.web.api.system.MultiSystemMessageModel;\n import com.synopsys.integration.alert.web.api.system.SystemActions;\n-import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.rest.RestConstants;\n \n public class SystemActionsTest {\n-    private static final SettingsDescriptorKey SETTINGS_DESCRIPTOR_KEY = new SettingsDescriptorKey();\n-\n     private DefaultSystemStatusUtility defaultSystemStatusUtility;\n     private DefaultSystemMessageUtility defaultSystemMessageUtility;\n-    private FieldModelProcessor fieldModelProcessor;\n-    private SettingsUtility settingsUtility;\n \n     @BeforeEach\n-    public void initiailize() throws AlertException {\n+    public void initiailize() {\n         defaultSystemStatusUtility = Mockito.mock(DefaultSystemStatusUtility.class);\n         defaultSystemMessageUtility = Mockito.mock(DefaultSystemMessageUtility.class);\n-        settingsUtility = Mockito.mock(SettingsUtility.class);\n-        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n         List<SystemMessageModel> messages = createSystemMessageList();\n         Mockito.when(defaultSystemMessageUtility.getSystemMessages()).thenReturn(messages);\n+        Mockito.when(defaultSystemMessageUtility.getSystemMessagesBefore(Mockito.any())).thenReturn(messages);\n         Mockito.when(defaultSystemMessageUtility.getSystemMessagesAfter(Mockito.any())).thenReturn(messages);\n-        Mockito.when(settingsUtility.getKey()).thenReturn(SETTINGS_DESCRIPTOR_KEY);\n-        Mockito.when(settingsUtility.doesConfigurationExist()).thenReturn(true);\n+        Mockito.when(defaultSystemMessageUtility.findBetween(Mockito.any())).thenReturn(messages);\n     }\n \n-    @Test\n-    public void getSystemMessagesSinceStartup() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesSinceStartup();\n-        Mockito.verify(defaultSystemStatusUtility).getStartupTime();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n+    public static List<Pair<String, String>> getStartAndEndTimes() {\n+        return List.of(\n+            Pair.of(null, null),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", null),\n+            Pair.of(null, \"2018-11-13T00:00:00.000Z\"),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\")\n+        );\n     }\n \n-    @Test\n-    public void testGetSystemMessagesAfter() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesAfter(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBefore() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBefore(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesBefore(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBetween() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBetween(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).findBetween(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessages() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessages();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessages();\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjY4MQ=="}, "originalCommit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ5MDg1Mw==", "bodyText": "Parameterized are meant for stuff like this, but ends up making things harder in my opinion. Why use a parameterized test when you can just pass the list yourself?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1188#discussion_r494490853", "createdAt": "2020-09-24T17:30:18Z", "author": {"login": "bamandel"}, "path": "src/test/java/com/synopsys/integration/alert/web/actions/SystemActionsTest.java", "diffHunk": "@@ -1,157 +1,88 @@\n package com.synopsys.integration.alert.web.actions;\n \n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n import java.util.Date;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n \n+import org.apache.commons.lang3.tuple.Pair;\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n import org.mockito.Mockito;\n+import org.springframework.http.HttpStatus;\n \n-import com.synopsys.integration.alert.common.descriptor.accessor.SettingsUtility;\n-import com.synopsys.integration.alert.common.descriptor.config.field.errors.AlertFieldStatus;\n-import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.action.ActionResponse;\n import com.synopsys.integration.alert.common.persistence.model.SystemMessageModel;\n-import com.synopsys.integration.alert.common.rest.ProxyManager;\n-import com.synopsys.integration.alert.common.rest.model.FieldModel;\n-import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n-import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptorKey;\n import com.synopsys.integration.alert.database.api.DefaultSystemStatusUtility;\n import com.synopsys.integration.alert.database.system.DefaultSystemMessageUtility;\n+import com.synopsys.integration.alert.web.api.system.MultiSystemMessageModel;\n import com.synopsys.integration.alert.web.api.system.SystemActions;\n-import com.synopsys.integration.alert.web.common.field.FieldModelProcessor;\n import com.synopsys.integration.rest.RestConstants;\n \n public class SystemActionsTest {\n-    private static final SettingsDescriptorKey SETTINGS_DESCRIPTOR_KEY = new SettingsDescriptorKey();\n-\n     private DefaultSystemStatusUtility defaultSystemStatusUtility;\n     private DefaultSystemMessageUtility defaultSystemMessageUtility;\n-    private FieldModelProcessor fieldModelProcessor;\n-    private SettingsUtility settingsUtility;\n \n     @BeforeEach\n-    public void initiailize() throws AlertException {\n+    public void initiailize() {\n         defaultSystemStatusUtility = Mockito.mock(DefaultSystemStatusUtility.class);\n         defaultSystemMessageUtility = Mockito.mock(DefaultSystemMessageUtility.class);\n-        settingsUtility = Mockito.mock(SettingsUtility.class);\n-        fieldModelProcessor = Mockito.mock(FieldModelProcessor.class);\n         List<SystemMessageModel> messages = createSystemMessageList();\n         Mockito.when(defaultSystemMessageUtility.getSystemMessages()).thenReturn(messages);\n+        Mockito.when(defaultSystemMessageUtility.getSystemMessagesBefore(Mockito.any())).thenReturn(messages);\n         Mockito.when(defaultSystemMessageUtility.getSystemMessagesAfter(Mockito.any())).thenReturn(messages);\n-        Mockito.when(settingsUtility.getKey()).thenReturn(SETTINGS_DESCRIPTOR_KEY);\n-        Mockito.when(settingsUtility.doesConfigurationExist()).thenReturn(true);\n+        Mockito.when(defaultSystemMessageUtility.findBetween(Mockito.any())).thenReturn(messages);\n     }\n \n-    @Test\n-    public void getSystemMessagesSinceStartup() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesSinceStartup();\n-        Mockito.verify(defaultSystemStatusUtility).getStartupTime();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n+    public static List<Pair<String, String>> getStartAndEndTimes() {\n+        return List.of(\n+            Pair.of(null, null),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", null),\n+            Pair.of(null, \"2018-11-13T00:00:00.000Z\"),\n+            Pair.of(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\")\n+        );\n     }\n \n-    @Test\n-    public void testGetSystemMessagesAfter() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesAfter(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesAfter(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBefore() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBefore(\"2018-11-13T00:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessagesBefore(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessagesBetween() throws Exception {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessagesBetween(\"2018-11-13T00:00:00.000Z\", \"2018-11-13T01:00:00.000Z\");\n-        Mockito.verify(defaultSystemMessageUtility).findBetween(Mockito.any());\n-    }\n-\n-    @Test\n-    public void testGetSystemMessages() {\n-        SystemActions systemActions = new SystemActions(defaultSystemStatusUtility, defaultSystemMessageUtility, fieldModelProcessor, settingsUtility);\n-        systemActions.getSystemMessages();\n-        Mockito.verify(defaultSystemMessageUtility).getSystemMessages();\n+    @ParameterizedTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQ4NjY4MQ=="}, "originalCommit": {"oid": "50047b87cda04d282f6d23fe466734a26c083b5b"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1787, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}