{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjYwODUz", "number": 1101, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNDowM1rOEUqiRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxODowMVrOEUtbYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTAzODc5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/exception/AlertFieldException.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNDowNFrOG6_bZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowNDowNFrOG6_bZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUwOTc5OA==", "bodyText": "If this is commented out and not needed, it should just be deleted.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464509798", "createdAt": "2020-08-03T16:04:04Z", "author": {"login": "jamesrichard91"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/exception/AlertFieldException.java", "diffHunk": "@@ -27,43 +27,57 @@\n public class AlertFieldException extends AlertException {\n     private static final long serialVersionUID = 7993564907680483145L;\n \n-    private final Map<String, String> fieldErrors;\n+    private final Map<String, AlertFieldStatus> fieldErrors;\n \n-    public static AlertFieldException singleFieldError(String fieldKey, String fieldError) {\n+    public static AlertFieldException singleFieldError(String fieldKey, AlertFieldStatus fieldError) {\n         return new AlertFieldException(Map.of(fieldKey, fieldError));\n     }\n \n-    public static AlertFieldException singleFieldError(String message, String fieldKey, String fieldError) {\n+    public static AlertFieldException singleFieldError(String message, String fieldKey, AlertFieldStatus fieldError) {\n         return new AlertFieldException(message, Map.of(fieldKey, fieldError));\n     }\n \n-    public AlertFieldException(final Map<String, String> fieldErrors) {\n+    public AlertFieldException(Map<String, AlertFieldStatus> fieldErrors) {\n         super();\n         this.fieldErrors = fieldErrors;\n     }\n \n-    public AlertFieldException(final String message, final Throwable cause, final boolean enableSuppression, final boolean writableStackTrace, final Map<String, String> fieldErrors) {\n+    public AlertFieldException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace, Map<String, AlertFieldStatus> fieldErrors) {\n         super(message, cause, enableSuppression, writableStackTrace);\n         this.fieldErrors = fieldErrors;\n     }\n \n-    public AlertFieldException(final String message, final Throwable cause, final Map<String, String> fieldErrors) {\n+    public AlertFieldException(String message, Throwable cause, Map<String, AlertFieldStatus> fieldErrors) {\n         super(message, cause);\n         this.fieldErrors = fieldErrors;\n     }\n \n-    public AlertFieldException(final String message, final Map<String, String> fieldErrors) {\n+    public AlertFieldException(String message, Map<String, AlertFieldStatus> fieldErrors) {\n         super(message);\n         this.fieldErrors = fieldErrors;\n     }\n \n-    public AlertFieldException(final Throwable cause, final Map<String, String> fieldErrors) {\n+    public AlertFieldException(Throwable cause, Map<String, AlertFieldStatus> fieldErrors) {\n         super(cause);\n         this.fieldErrors = fieldErrors;\n     }\n \n-    public Map<String, String> getFieldErrors() {\n+    public Map<String, AlertFieldStatus> getFieldErrors() {\n         return fieldErrors;\n     }\n \n+    //TODO Remove convertToAlertFieldStatus in the future once AlertFieldException has been refactored\n+    /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4099f3e1e8ab2152b7c011e0f2e993f4c18677f7"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA1NjI5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueCreatorTestAction.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjowODo0NFrOG6_lyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxMjoyN1rOG7DxhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMjQ1Ng==", "bodyText": "I think it would be a good time to stop using a map here and start using an object that handles all this. It would clear up some code and make it easier to understand.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464512456", "createdAt": "2020-08-03T16:08:44Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueCreatorTestAction.java", "diffHunk": "@@ -90,17 +91,17 @@ public IssueTrackerResponse testConfig(IssueTrackerContext issueTrackerContext)\n         String toStatus = \"Resolve\";\n         Optional<String> possibleSecondIssueKey = Optional.empty();\n         try {\n-            Map<String, String> transitionErrors = new HashMap<>();\n+            Map<String, AlertFieldStatus> transitionErrors = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4099f3e1e8ab2152b7c011e0f2e993f4c18677f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0OTIzNg==", "bodyText": "Speaking with Paulo, we think this might be a good change to make as well. Since this is a feature branch we will make these changes in another branch and merge into this one rather than splitting it into two separate PRs.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464549236", "createdAt": "2020-08-03T17:16:04Z", "author": {"login": "ChomickiM"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueCreatorTestAction.java", "diffHunk": "@@ -90,17 +91,17 @@ public IssueTrackerResponse testConfig(IssueTrackerContext issueTrackerContext)\n         String toStatus = \"Resolve\";\n         Optional<String> possibleSecondIssueKey = Optional.empty();\n         try {\n-            Map<String, String> transitionErrors = new HashMap<>();\n+            Map<String, AlertFieldStatus> transitionErrors = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMjQ1Ng=="}, "originalCommit": {"oid": "4099f3e1e8ab2152b7c011e0f2e993f4c18677f7"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MDk5Ng==", "bodyText": "Should AlertFieldStatus just have a field for fieldName? Then we deal with a list everywhere?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464580996", "createdAt": "2020-08-03T18:12:27Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/channel/issuetracker/service/IssueCreatorTestAction.java", "diffHunk": "@@ -90,17 +91,17 @@ public IssueTrackerResponse testConfig(IssueTrackerContext issueTrackerContext)\n         String toStatus = \"Resolve\";\n         Optional<String> possibleSecondIssueKey = Optional.empty();\n         try {\n-            Map<String, String> transitionErrors = new HashMap<>();\n+            Map<String, AlertFieldStatus> transitionErrors = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxMjQ1Ng=="}, "originalCommit": {"oid": "4099f3e1e8ab2152b7c011e0f2e993f4c18677f7"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA4MDgwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNTowOFrOG6_0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNTowOFrOG6_0TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNjE3Mw==", "bodyText": "You can abstract this further by creating a private method that is passed a function. The function will either do getErrors or getWarnings. You'd then call the method twice here with different functions passed.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464516173", "createdAt": "2020-08-03T16:15:08Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/field/validators/ValidationResult.java", "diffHunk": "@@ -31,45 +31,76 @@\n \n public class ValidationResult {\n \n-    private Collection<String> errors;\n+    private final Collection<String> errors;\n+    private final Collection<String> warnings;\n \n     public static ValidationResult success() {\n         return new ValidationResult();\n     }\n \n     public static ValidationResult errors(Collection<String> errors) {\n-        return new ValidationResult(errors);\n+        return new ValidationResult(errors, List.of());\n     }\n \n     public static ValidationResult errors(String... errors) {\n-        return new ValidationResult(Arrays.asList(errors));\n+        return new ValidationResult(Arrays.asList(errors), List.of());\n+    }\n+\n+    public static ValidationResult warnings(Collection<String> warnings) {\n+        return new ValidationResult(List.of(), warnings);\n+    }\n+\n+    public static ValidationResult warnings(String... warnings) {\n+        return new ValidationResult(List.of(), Arrays.asList(warnings));\n     }\n \n     public static ValidationResult of(ValidationResult... validationResults) {\n         Collection<String> validationErrors = Arrays.stream(validationResults)\n                                                   .map(ValidationResult::getErrors)\n                                                   .flatMap(Collection::stream)\n                                                   .collect(Collectors.toList());\n-        return new ValidationResult(validationErrors);\n+        Collection<String> validationWarnings = Arrays.stream(validationResults)\n+                                                    .map(ValidationResult::getWarnings)\n+                                                    .flatMap(Collection::stream)\n+                                                    .collect(Collectors.toList());\n+        return new ValidationResult(validationErrors, validationWarnings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4099f3e1e8ab2152b7c011e0f2e993f4c18677f7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTEwOTU5OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseBodyBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoyMzoyMFrOG7AGOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoyMzoyMFrOG7AGOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDc2Mw==", "bodyText": "You can add a method to AlertFieldsStatus called getSeverityName that does this\nalertFieldStatus.getSeverity().name()", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464520763", "createdAt": "2020-08-03T16:23:20Z", "author": {"login": "bamandel"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/rest/ResponseBodyBuilder.java", "diffHunk": "@@ -61,12 +68,16 @@ public ResponseBodyBuilder put(String key, String value) {\n         return this;\n     }\n \n-    public ResponseBodyBuilder putErrors(Map<String, String> errors) {\n+    public ResponseBodyBuilder putErrors(Map<String, AlertFieldStatus> errors) {\n         JsonObject element = new JsonObject();\n-        for (Entry<String, String> entry : errors.entrySet()) {\n-            element.addProperty(entry.getKey(), entry.getValue());\n+        for (Entry<String, AlertFieldStatus> entry : errors.entrySet()) {\n+            AlertFieldStatus alertFieldStatus = entry.getValue();\n+            JsonObject statusObject = new JsonObject();\n+            statusObject.addProperty(PROPERTY_KEY_SEVERITY, alertFieldStatus.getSeverity().name());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7757e82596559cebd7a29d3dd64bd02c32f0aac2"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTE1MTA5OnYy", "diffSide": "RIGHT", "path": "src/main/js/field/LabeledField.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozNDo1NlrOG7AfPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjozNDo1NlrOG7AfPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyNzE2NA==", "bodyText": "These can be converted into const if you use a ternary operator like you did on line 30 and 31", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464527164", "createdAt": "2020-08-03T16:34:56Z", "author": {"login": "bamandel"}, "path": "src/main/js/field/LabeledField.js", "diffHunk": "@@ -21,7 +21,14 @@ class LabeledField extends Component {\n \n         const baseClasses = `${labelClass} text-right`;\n         const labelClasses = (required) ? `${baseClasses} required` : baseClasses;\n-\n+        let severity = 'ERROR';\n+        let fieldMessage = '';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7757e82596559cebd7a29d3dd64bd02c32f0aac2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTUxMjY3OnYy", "diffSide": "RIGHT", "path": "src/main/js/field/LabeledField.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODoxODowMVrOG7D8Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxODo0MzoxMVrOG7Eryw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mzc3OQ==", "bodyText": "{ severity, fieldMessage } = errorValue;", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464583779", "createdAt": "2020-08-03T18:18:01Z", "author": {"login": "gkillough"}, "path": "src/main/js/field/LabeledField.js", "diffHunk": "@@ -21,7 +21,14 @@ class LabeledField extends Component {\n \n         const baseClasses = `${labelClass} text-right`;\n         const labelClasses = (required) ? `${baseClasses} required` : baseClasses;\n-\n+        let severity = 'ERROR';\n+        let fieldMessage = '';\n+        if (errorValue) {\n+            severity = errorValue.severity;\n+            fieldMessage = errorValue.fieldMessage;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7757e82596559cebd7a29d3dd64bd02c32f0aac2"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU5NTkxNQ==", "bodyText": "That was the original code I had.  However errorValue can be null because there are no errors.  When errorValue is null object destructuring fails.  So that's why we have the code that is there.  If we change errorValue to {} then the check for errorValue will always be true.  We would have to test that", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1101#discussion_r464595915", "createdAt": "2020-08-03T18:43:11Z", "author": {"login": "psantos1113"}, "path": "src/main/js/field/LabeledField.js", "diffHunk": "@@ -21,7 +21,14 @@ class LabeledField extends Component {\n \n         const baseClasses = `${labelClass} text-right`;\n         const labelClasses = (required) ? `${baseClasses} required` : baseClasses;\n-\n+        let severity = 'ERROR';\n+        let fieldMessage = '';\n+        if (errorValue) {\n+            severity = errorValue.severity;\n+            fieldMessage = errorValue.fieldMessage;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4Mzc3OQ=="}, "originalCommit": {"oid": "7757e82596559cebd7a29d3dd64bd02c32f0aac2"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1922, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}