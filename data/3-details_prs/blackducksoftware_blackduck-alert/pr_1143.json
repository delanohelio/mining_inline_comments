{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc1NDk5NTU4", "number": 1143, "title": "Ps authenticate save fix", "bodyText": "Fix issues with clicking save and test while authentication is happening.  Also fixed an issue where test fails after clicking save.\nTest would fail because none of the token fields that are saved in the controller are preserved in the new configuration that is saved.  Read those existing fields and save them.\nFixed an issue with JPA batch update errors.  Needed to flush repositories.\nAdded a validator to see if authentication was in process.", "createdAt": "2020-08-28T16:14:48Z", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143", "merged": true, "mergeCommit": {"oid": "25603297107c9a7b5c6b5fd857db246e3478ab53"}, "closed": true, "closedAt": "2020-08-28T18:22:53Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdDDnxhAH2gAyNDc1NDk5NTU4OjdjY2I5OTgyYWUwYWI2MTcxMWVlMjRlNTFlYjM5YmU1Y2ZlYjFmYTA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDZNhKAH2gAyNDc1NDk5NTU4Ojc3YzM1NDFiOTYxZmM2NmRlMDUyZmQ3MDE5NGE4NTM2OWNmZmNiMTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "7ccb9982ae0ab61711ee24e51eb39be5cfeb1fa0", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/7ccb9982ae0ab61711ee24e51eb39be5cfeb1fa0", "committedDate": "2020-08-27T17:12:10Z", "message": "fix: Provide UI feedback that progress is happening."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f96b02ab8740815b1000a10e12ac1939e47f405", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/5f96b02ab8740815b1000a10e12ac1939e47f405", "committedDate": "2020-08-27T18:11:49Z", "message": "Merge remote-tracking branch 'origin/6.2.0' into ps_authenticate_save_fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4923b33bf3869e933871e602b4e9a7c77b9f32d9", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/4923b33bf3869e933871e602b4e9a7c77b9f32d9", "committedDate": "2020-08-27T19:34:11Z", "message": "fix: Add a validator to see if there are pending authentication requests."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a86a4da0a68c9371ddf43db6a1fa831db439559f", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/a86a4da0a68c9371ddf43db6a1fa831db439559f", "committedDate": "2020-08-28T15:57:19Z", "message": "fix: Save the existing tokens and email on save/update."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/b6ea82fbb9bc96c4880b900a001b342b6dbe543c", "committedDate": "2020-08-28T16:12:15Z", "message": "refactor: Encapsulate error messages and add a comment."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODc0Mzcw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477874370", "createdAt": "2020-08-28T16:38:41Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozODo0MVrOHJNQmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjozODo0MVrOHJNQmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQxNjQ3NA==", "bodyText": "It seems odd that we need to add these flushes throughout our code.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#discussion_r479416474", "createdAt": "2020-08-28T16:38:41Z", "author": {"login": "jamesrichard91"}, "path": "alert-database/src/main/java/com/synopsys/integration/alert/database/api/DefaultConfigurationAccessor.java", "diffHunk": "@@ -325,6 +325,7 @@ public ConfigurationModel updateConfiguration(Long descriptorConfigId, Collectio\n \n         List<FieldValueEntity> oldValues = fieldValueRepository.findByConfigId(descriptorConfigId);\n         fieldValueRepository.deleteAll(oldValues);\n+        fieldValueRepository.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODc4MDkx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477878091", "createdAt": "2020-08-28T16:44:22Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODgxODQz", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477881843", "createdAt": "2020-08-28T16:50:29Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1MDozMFrOHJNn6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNjo1MDozMFrOHJNn6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQyMjQ0MA==", "bodyText": "I think this method should take in only a ConfigurationModel and return a Map<String, FieldValueModel> object. Then wherever we generate the Optional, we instead call map and pass this method as a method reference. Then just return the new object like we do on line 93. Does that make sense?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#discussion_r479422440", "createdAt": "2020-08-28T16:50:30Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/actions/AzureBoardsGlobalApiAction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.actions;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.action.ApiAction;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+\n+@Component\n+public class AzureBoardsGlobalApiAction extends ApiAction {\n+    private ConfigurationAccessor configurationAccessor;\n+    private DescriptorMap descriptorMap;\n+    private ConfigurationFieldModelConverter fieldModelConverter;\n+\n+    @Autowired\n+    public AzureBoardsGlobalApiAction(ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap, ConfigurationFieldModelConverter configurationFieldModelConverter) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.descriptorMap = descriptorMap;\n+        this.fieldModelConverter = configurationFieldModelConverter;\n+    }\n+\n+    @Override\n+    public FieldModel beforeSaveAction(FieldModel fieldModel) throws AlertException {\n+        FieldModel updatedFieldModel = super.beforeSaveAction(fieldModel);\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(fieldModel.getDescriptorName());\n+\n+        if (descriptorKey.isPresent()) {\n+            ConfigContextEnum context = ConfigContextEnum.valueOf(fieldModel.getContext());\n+            List<ConfigurationModel> existingConfig = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), context);\n+            Optional<ConfigurationModel> configurationModel = existingConfig.stream()\n+                                                                  .findFirst();\n+            updatedFieldModel = updateTokenFields(updatedFieldModel, configurationModel);\n+        }\n+        return updatedFieldModel;\n+    }\n+\n+    @Override\n+    public FieldModel beforeUpdateAction(FieldModel fieldModel) throws AlertException {\n+        FieldModel updatedFieldModel = super.beforeUpdateAction(fieldModel);\n+        Optional<ConfigurationModel> existingConfig = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+        return updateTokenFields(updatedFieldModel, existingConfig);\n+    }\n+\n+    private FieldModel updateTokenFields(FieldModel fieldModel, Optional<ConfigurationModel> existingConfig) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODg5MTYw", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477889160", "createdAt": "2020-08-28T17:01:23Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODkzNTI3", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477893527", "createdAt": "2020-08-28T17:08:02Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowODowMlrOHJOLFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yOFQxNzowODowMlrOHJOLFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTQzMTQ0NA==", "bodyText": "Do we always want to prefer what's in the DB? Or should we use the value of the FieldValueModel if it has one?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#discussion_r479431444", "createdAt": "2020-08-28T17:08:02Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/actions/AzureBoardsGlobalApiAction.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.actions;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.descriptor.AzureBoardsDescriptor;\n+import com.synopsys.integration.alert.common.action.ApiAction;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorKey;\n+import com.synopsys.integration.alert.common.descriptor.DescriptorMap;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.persistence.accessor.ConfigurationAccessor;\n+import com.synopsys.integration.alert.common.persistence.model.ConfigurationModel;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+\n+@Component\n+public class AzureBoardsGlobalApiAction extends ApiAction {\n+    private ConfigurationAccessor configurationAccessor;\n+    private DescriptorMap descriptorMap;\n+    private ConfigurationFieldModelConverter fieldModelConverter;\n+\n+    @Autowired\n+    public AzureBoardsGlobalApiAction(ConfigurationAccessor configurationAccessor, DescriptorMap descriptorMap, ConfigurationFieldModelConverter configurationFieldModelConverter) {\n+        this.configurationAccessor = configurationAccessor;\n+        this.descriptorMap = descriptorMap;\n+        this.fieldModelConverter = configurationFieldModelConverter;\n+    }\n+\n+    @Override\n+    public FieldModel beforeSaveAction(FieldModel fieldModel) throws AlertException {\n+        FieldModel updatedFieldModel = super.beforeSaveAction(fieldModel);\n+        Optional<DescriptorKey> descriptorKey = descriptorMap.getDescriptorKey(fieldModel.getDescriptorName());\n+\n+        if (descriptorKey.isPresent()) {\n+            ConfigContextEnum context = ConfigContextEnum.valueOf(fieldModel.getContext());\n+            List<ConfigurationModel> existingConfig = configurationAccessor.getConfigurationsByDescriptorKeyAndContext(descriptorKey.get(), context);\n+            Optional<ConfigurationModel> configurationModel = existingConfig.stream()\n+                                                                  .findFirst();\n+            updatedFieldModel = updateTokenFields(updatedFieldModel, configurationModel);\n+        }\n+        return updatedFieldModel;\n+    }\n+\n+    @Override\n+    public FieldModel beforeUpdateAction(FieldModel fieldModel) throws AlertException {\n+        FieldModel updatedFieldModel = super.beforeUpdateAction(fieldModel);\n+        Optional<ConfigurationModel> existingConfig = configurationAccessor.getConfigurationById(Long.valueOf(fieldModel.getId()));\n+        return updateTokenFields(updatedFieldModel, existingConfig);\n+    }\n+\n+    private FieldModel updateTokenFields(FieldModel fieldModel, Optional<ConfigurationModel> existingConfig) {\n+        Map<String, FieldValueModel> keyToValues = new HashMap<>(fieldModel.getKeyToValues());\n+        if (existingConfig.isPresent()) {\n+            ConfigurationModel configurationModel = existingConfig.get();\n+            Map<String, FieldValueModel> existingFields = fieldModelConverter.convertToFieldValuesMap(configurationModel.getCopyOfFieldList());\n+\n+            // These fields are saved in the OAuth callback controller so we need to preserve their values on a save or an update.\n+            updateMapWithMissingField(AzureBoardsDescriptor.KEY_ACCESS_TOKEN, existingFields, keyToValues);\n+            updateMapWithMissingField(AzureBoardsDescriptor.KEY_REFRESH_TOKEN, existingFields, keyToValues);\n+            updateMapWithMissingField(AzureBoardsDescriptor.KEY_TOKEN_EXPIRATION_MILLIS, existingFields, keyToValues);\n+            updateMapWithMissingField(AzureBoardsDescriptor.KEY_OAUTH_USER_EMAIL, existingFields, keyToValues);\n+        }\n+\n+        return new FieldModel(fieldModel.getDescriptorName(), fieldModel.getContext(), fieldModel.getCreatedAt(), fieldModel.getLastUpdated(), keyToValues);\n+    }\n+\n+    private void updateMapWithMissingField(String key, Map<String, FieldValueModel> databaseFields, Map<String, FieldValueModel> fieldModelFields) {\n+        if (databaseFields.containsKey(key)) {\n+            fieldModelFields.put(key, databaseFields.get(key));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "originalPosition": 99}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3ODk0MjU2", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477894256", "createdAt": "2020-08-28T17:09:07Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc3OTA1NTUx", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1143#pullrequestreview-477905551", "createdAt": "2020-08-28T17:27:15Z", "commit": {"oid": "b6ea82fbb9bc96c4880b900a001b342b6dbe543c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77c3541b961fc66de052fd70194a85369cffcb18", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/blackduck-alert/commit/77c3541b961fc66de052fd70194a85369cffcb18", "committedDate": "2020-08-28T18:21:24Z", "message": "refactor: Use map function of optionals based on PR feedback."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3435, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}