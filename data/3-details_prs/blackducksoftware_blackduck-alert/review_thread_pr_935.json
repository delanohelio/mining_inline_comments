{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODI5MTk4", "number": 935, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo0Mzo1M1rODrprWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMjo1NVrODrqg1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MDk4MjAwOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/security/EncryptionUtility.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo0Mzo1M1rOF8Hf8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxMzo0Mzo1M1rOF8Hf8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODU4MTc0Nw==", "bodyText": "This is a good change, but we should double check that we are clear about blank values not being allowed for these settings in the doc.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/935#discussion_r398581747", "createdAt": "2020-03-26T13:43:53Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/security/EncryptionUtility.java", "diffHunk": "@@ -113,7 +113,11 @@ private String getEncodedSalt() {\n     }\n \n     public boolean isPasswordSet() {\n-        return null != getPassword();\n+        return StringUtils.isNotBlank(getPassword());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3ab66f8c112c4dcb98df554d8783bf0a7fdbbe"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTExMjU1OnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/system/BaseSystemValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMTozM1rOF8IyoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMTozM1rOF8IyoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMjkxMw==", "bodyText": "I know this method name was my suggestion, but ForError might be less clunky than IfHasError.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/935#discussion_r398602913", "createdAt": "2020-03-26T14:11:33Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/system/BaseSystemValidator.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/**\n+ * alert-common\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.common.system;\n+\n+import com.synopsys.integration.alert.common.enumeration.SystemMessageSeverity;\n+import com.synopsys.integration.alert.common.enumeration.SystemMessageType;\n+import com.synopsys.integration.alert.common.persistence.accessor.SystemMessageUtility;\n+\n+public class BaseSystemValidator {\n+    private SystemMessageUtility systemMessageUtility;\n+\n+    public BaseSystemValidator(SystemMessageUtility systemMessageUtility) {\n+        this.systemMessageUtility = systemMessageUtility;\n+    }\n+\n+    public boolean addSystemMessageIfHasError(String errorMessage, SystemMessageSeverity systemMessageSeverity, SystemMessageType messageType, boolean hasError) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3ab66f8c112c4dcb98df554d8783bf0a7fdbbe"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MTExODk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/component/settings/SettingsValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDoxMjo1NVrOF8I2zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQxNDozNDoxMlrOF8J4Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMzk4Mw==", "bodyText": "We do this a few times. Should we add an overloaded version of the method with a logError flag?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/935#discussion_r398603983", "createdAt": "2020-03-26T14:12:55Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/component/settings/SettingsValidator.java", "diffHunk": "@@ -35,45 +31,43 @@\n import com.synopsys.integration.alert.common.enumeration.SystemMessageType;\n import com.synopsys.integration.alert.common.persistence.accessor.SystemMessageUtility;\n import com.synopsys.integration.alert.common.security.EncryptionUtility;\n+import com.synopsys.integration.alert.common.system.BaseSystemValidator;\n import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n \n @Component\n-public class SettingsValidator {\n+public class SettingsValidator extends BaseSystemValidator {\n     private static final Logger logger = LoggerFactory.getLogger(SettingsValidator.class);\n     private EncryptionUtility encryptionUtility;\n-    private SystemMessageUtility systemMessageUtility;\n \n     @Autowired\n     public SettingsValidator(EncryptionUtility encryptionUtility, SystemMessageUtility systemMessageUtility) {\n+        super(systemMessageUtility);\n         this.encryptionUtility = encryptionUtility;\n-        this.systemMessageUtility = systemMessageUtility;\n     }\n \n-    public Map<String, String> validateEncryption() {\n-        systemMessageUtility.removeSystemMessagesByType(SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR);\n-\n-        Map<String, String> fieldErrors = new HashMap<>();\n+    public boolean validateEncryption() {\n+        getSystemMessageUtility().removeSystemMessagesByType(SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR);\n+        boolean valid = true;\n         if (!encryptionUtility.isInitialized()) {\n             logger.error(\"Encryption utilities: Not Initialized\");\n \n-            validationCheck(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_PWD, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR, !encryptionUtility.isPasswordSet())\n-                .ifPresent(error -> fieldErrors.put(SettingsDescriptor.KEY_ENCRYPTION_PWD, error));\n-            validationCheck(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_GLOBAL_SALT, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR, !encryptionUtility.isGlobalSaltSet())\n-                .ifPresent(error -> fieldErrors.put(SettingsDescriptor.KEY_ENCRYPTION_GLOBAL_SALT, error));\n-            return fieldErrors;\n+            boolean encryptionError = addSystemMessageIfHasError(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_PWD, SystemMessageSeverity.ERROR, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR,\n+                encryptionUtility.isPasswordMissing());\n+            if (encryptionError) {\n+                valid = false;\n+                logger.error(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_PWD);\n+            }\n+            boolean saltError = addSystemMessageIfHasError(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_GLOBAL_SALT, SystemMessageSeverity.ERROR, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR,\n+                encryptionUtility.isGlobalSaltMissing());\n+            if (saltError) {\n+                valid = false;\n+                logger.error(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_GLOBAL_SALT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a3ab66f8c112c4dcb98df554d8783bf0a7fdbbe"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYyMDcxNA==", "bodyText": "The problem is we are not always logging at error level, some of them are warnings which makes it more complicated.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/935#discussion_r398620714", "createdAt": "2020-03-26T14:34:12Z", "author": {"login": "jamesrichard91"}, "path": "src/main/java/com/synopsys/integration/alert/component/settings/SettingsValidator.java", "diffHunk": "@@ -35,45 +31,43 @@\n import com.synopsys.integration.alert.common.enumeration.SystemMessageType;\n import com.synopsys.integration.alert.common.persistence.accessor.SystemMessageUtility;\n import com.synopsys.integration.alert.common.security.EncryptionUtility;\n+import com.synopsys.integration.alert.common.system.BaseSystemValidator;\n import com.synopsys.integration.alert.component.settings.descriptor.SettingsDescriptor;\n \n @Component\n-public class SettingsValidator {\n+public class SettingsValidator extends BaseSystemValidator {\n     private static final Logger logger = LoggerFactory.getLogger(SettingsValidator.class);\n     private EncryptionUtility encryptionUtility;\n-    private SystemMessageUtility systemMessageUtility;\n \n     @Autowired\n     public SettingsValidator(EncryptionUtility encryptionUtility, SystemMessageUtility systemMessageUtility) {\n+        super(systemMessageUtility);\n         this.encryptionUtility = encryptionUtility;\n-        this.systemMessageUtility = systemMessageUtility;\n     }\n \n-    public Map<String, String> validateEncryption() {\n-        systemMessageUtility.removeSystemMessagesByType(SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR);\n-\n-        Map<String, String> fieldErrors = new HashMap<>();\n+    public boolean validateEncryption() {\n+        getSystemMessageUtility().removeSystemMessagesByType(SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR);\n+        boolean valid = true;\n         if (!encryptionUtility.isInitialized()) {\n             logger.error(\"Encryption utilities: Not Initialized\");\n \n-            validationCheck(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_PWD, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR, !encryptionUtility.isPasswordSet())\n-                .ifPresent(error -> fieldErrors.put(SettingsDescriptor.KEY_ENCRYPTION_PWD, error));\n-            validationCheck(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_GLOBAL_SALT, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR, !encryptionUtility.isGlobalSaltSet())\n-                .ifPresent(error -> fieldErrors.put(SettingsDescriptor.KEY_ENCRYPTION_GLOBAL_SALT, error));\n-            return fieldErrors;\n+            boolean encryptionError = addSystemMessageIfHasError(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_PWD, SystemMessageSeverity.ERROR, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR,\n+                encryptionUtility.isPasswordMissing());\n+            if (encryptionError) {\n+                valid = false;\n+                logger.error(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_PWD);\n+            }\n+            boolean saltError = addSystemMessageIfHasError(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_GLOBAL_SALT, SystemMessageSeverity.ERROR, SystemMessageType.ENCRYPTION_CONFIGURATION_ERROR,\n+                encryptionUtility.isGlobalSaltMissing());\n+            if (saltError) {\n+                valid = false;\n+                logger.error(SettingsDescriptor.FIELD_ERROR_ENCRYPTION_GLOBAL_SALT);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODYwMzk4Mw=="}, "originalCommit": {"oid": "1a3ab66f8c112c4dcb98df554d8783bf0a7fdbbe"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1947, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}