{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzNDczOTA4", "number": 1224, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjo1MDo0MVrOEt-oJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo0MDoxN1rOEv7Qyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjQ3NDYzOnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjo1MDo0MVrOHiGKLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNDowNDoyM1rOHi_56g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNDU0MQ==", "bodyText": "What benefit does this container have over the original?   There isn't anything wrong with using this new container I just would like some more context for switching.  Is the fact that it's an embedded container more appropriate for Spring Boot applications?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r505514541", "createdAt": "2020-10-15T12:50:41Z", "author": {"login": "psantos1113"}, "path": "build.gradle", "diffHunk": "@@ -104,7 +104,9 @@ dependencies {\n     // =============\n     testImplementation 'org.testcontainers:postgresql:1.12.5'\n     if (getGradle().getStartParameter().taskNames.contains('runServer')) {\n-        runtimeClasspath 'org.testcontainers:postgresql:1.12.5'\n+        runtimeClasspath 'org.springframework.cloud:spring-cloud-starter:2.2.3.RELEASE'\n+        runtimeClasspath \"com.playtika.testcontainers:embedded-postgresql:1.78\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7cc909334db82c3276f9560d54f91198748513a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjQ2MDY1MA==", "bodyText": "This dependency is linked to from the official Test Containers GitHub as being the appropriate choice for Spring Boot applications. It gives us benefits like bootstrap properties for configuration rather than query parameters on the JDBC URL.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r506460650", "createdAt": "2020-10-16T14:04:23Z", "author": {"login": "gkillough"}, "path": "build.gradle", "diffHunk": "@@ -104,7 +104,9 @@ dependencies {\n     // =============\n     testImplementation 'org.testcontainers:postgresql:1.12.5'\n     if (getGradle().getStartParameter().taskNames.contains('runServer')) {\n-        runtimeClasspath 'org.testcontainers:postgresql:1.12.5'\n+        runtimeClasspath 'org.springframework.cloud:spring-cloud-starter:2.2.3.RELEASE'\n+        runtimeClasspath \"com.playtika.testcontainers:embedded-postgresql:1.78\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUxNDU0MQ=="}, "originalCommit": {"oid": "f7cc909334db82c3276f9560d54f91198748513a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjUyMzIwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/utility/ExternalAlertRequestUtility.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzowMTo1NFrOHiGomw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzowMTo1NFrOHiGomw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyMjMzMQ==", "bodyText": "If you don't envision running these performance tests against older versions then can we remove this comment?\nOtherwise if you want to support older and newer versions of Alert, can you create a request to get the alert version from the about info?  Based on the alert version create the corresponding login JSON payload.  I would consider that an enhancement to be able to create the login payload based on the version.  Not something to hold up this PR right now.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r505522331", "createdAt": "2020-10-15T13:01:54Z", "author": {"login": "psantos1113"}, "path": "src/test/java/com/synopsys/integration/alert/performance/utility/ExternalAlertRequestUtility.java", "diffHunk": "@@ -0,0 +1,82 @@\n+package com.synopsys.integration.alert.performance.utility;\n+\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.rest.HttpMethod;\n+import com.synopsys.integration.rest.HttpUrl;\n+import com.synopsys.integration.rest.body.BodyContent;\n+import com.synopsys.integration.rest.body.StringBodyContent;\n+import com.synopsys.integration.rest.client.IntHttpClient;\n+import com.synopsys.integration.rest.request.Request;\n+import com.synopsys.integration.rest.response.Response;\n+\n+public class ExternalAlertRequestUtility implements AlertRequestUtility {\n+    private final IntLogger intLogger;\n+    private final IntHttpClient client;\n+    private final String alertURL;\n+\n+    public ExternalAlertRequestUtility(IntLogger intLogger, IntHttpClient client, String alertURL) {\n+        this.intLogger = intLogger;\n+        this.client = client;\n+        this.alertURL = alertURL;\n+    }\n+\n+    public void loginToExternalAlert() throws IntegrationException {\n+        //String loginBody = \"{\\\"blackDuckUsername\\\":\\\"sysadmin\\\",\\\"blackDuckPassword\\\":\\\"blackduck\\\"}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7cc909334db82c3276f9560d54f91198748513a"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjU1MDM3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/SlackPerformanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzowODoxNlrOHiG5jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMzowODoxNlrOHiG5jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTUyNjY2OQ==", "bodyText": "Use the constants for the names of the fields that are put into the map from these classes:\n\nProviderDescriptor\nProviderDistributionUIConfig\nChannelDistributionUIConfig\nSlackDescriptor", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r505526669", "createdAt": "2020-10-15T13:08:16Z", "author": {"login": "psantos1113"}, "path": "src/test/java/com/synopsys/integration/alert/performance/SlackPerformanceTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.synopsys.integration.alert.performance;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.time.LocalDateTime;\n+import java.time.ZoneId;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.enumeration.ProcessingType;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.performance.model.SlackPerformanceProperties;\n+import com.synopsys.integration.alert.performance.utility.NotificationWaitJobTask;\n+import com.synopsys.integration.wait.WaitJob;\n+\n+public class SlackPerformanceTest extends IntegrationPerformanceTest {\n+    private final static String SLACK_PERFORMANCE_JOB_NAME = \"Slack Performance Job\";\n+    private final SlackPerformanceProperties slackProperties = new SlackPerformanceProperties();\n+\n+    private String blackDuckProviderID = \"-1\";\n+\n+    @Test\n+    @Ignore\n+    public void testAlertPerformance() throws Exception {\n+        LocalDateTime startingTime = LocalDateTime.now();\n+        intLogger.info(String.format(\"Starting time %s\", getDateTimeFormatter().format(startingTime)));\n+\n+        logTimeElapsedWithMessage(\"Logging in took %s\", startingTime, LocalDateTime.now());\n+        startingTime = LocalDateTime.now();\n+\n+        // Create the Black Duck Global provider configuration\n+        blackDuckProviderID = setupBlackDuck();\n+        \n+        logTimeElapsedWithMessage(\"Configuring the Black Duck provider took %s\", startingTime, LocalDateTime.now());\n+        startingTime = LocalDateTime.now();\n+\n+        String jobId = createSlackJob();\n+        String message = String.format(\"Creating the Job %s jobs took\", SLACK_PERFORMANCE_JOB_NAME);\n+        logTimeElapsedWithMessage(message + \" %s\", startingTime, LocalDateTime.now());\n+\n+        LocalDateTime startingSearchDateTime = LocalDateTime.now();\n+        // trigger BD notification\n+        triggerBlackDuckNotification();\n+\n+        NotificationWaitJobTask notificationWaitJobTask = new NotificationWaitJobTask(intLogger, getDateTimeFormatter(), getGson(), getAlertRequestUtility(), startingSearchDateTime, jobId);\n+        WaitJob waitForNotificationToBeProcessed = WaitJob.create(intLogger, 600, startingSearchDateTime.atZone(ZoneId.systemDefault()).toInstant().toEpochMilli(), 20, notificationWaitJobTask);\n+        boolean isComplete = waitForNotificationToBeProcessed.waitFor();\n+        intLogger.info(\"Finished waiting for the notification to be processed: \" + isComplete);\n+        assertTrue(isComplete);\n+    }\n+\n+    private String createSlackJob() throws Exception {\n+        Map<String, FieldValueModel> providerKeyToValues = new HashMap<>();\n+        providerKeyToValues.put(\"provider.common.config.id\", new FieldValueModel(List.of(blackDuckProviderID), true));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7cc909334db82c3276f9560d54f91198748513a"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjAwMzA5OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/BasePerformanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToyOTowMlrOHlDJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToyOTowMlrOHlDJsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMDk5Mw==", "bodyText": "Don't you think this would be better suited for a test utility as well rather than a superclass?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r508610993", "createdAt": "2020-10-20T15:29:02Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/performance/BasePerformanceTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.synopsys.integration.alert.performance;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.MultiFieldModel;\n+import com.synopsys.integration.alert.performance.model.BlackDuckPerformanceProperties;\n+import com.synopsys.integration.alert.performance.utility.AlertRequestUtility;\n+import com.synopsys.integration.alert.util.TestTags;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentView;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionView;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfig;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectBomService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.model.ProjectVersionWrapper;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+\n+@Tag(TestTags.DEFAULT_PERFORMANCE)\n+public abstract class BasePerformanceTest {\n+    public static final String ROLE_ALERT_ADMIN = \"ALERT_ADMIN\";\n+    protected final IntLogger intLogger = new Slf4jIntLogger(LoggerFactory.getLogger(this.getClass()));\n+\n+    private final BlackDuckPerformanceProperties blackDuckProperties = new BlackDuckPerformanceProperties();\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+    private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\n+\n+    private final String localAlertURL = \"http://localhost/\";\n+\n+    private AlertRequestUtility alertRequestUtility;\n+    private BlackDuckServicesFactory blackDuckServicesFactory = null;\n+\n+    public abstract AlertRequestUtility createAlertRequestUtility();\n+\n+    @BeforeEach\n+    public void setupTests() {\n+        alertRequestUtility = createAlertRequestUtility();\n+    }\n+\n+    public void triggerBlackDuckNotification() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d18d89b860d71bb6a041702c9e203c4b7857ef8"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjAwNzYxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/BasePerformanceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToyOTozOVrOHlDMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNToyOTozOVrOHlDMmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxMTczOQ==", "bodyText": "Don't forget about this TODO.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r508611739", "createdAt": "2020-10-20T15:29:39Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/performance/BasePerformanceTest.java", "diffHunk": "@@ -0,0 +1,183 @@\n+package com.synopsys.integration.alert.performance;\n+\n+import java.time.Duration;\n+import java.time.LocalDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Tag;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.MultiFieldModel;\n+import com.synopsys.integration.alert.performance.model.BlackDuckPerformanceProperties;\n+import com.synopsys.integration.alert.performance.utility.AlertRequestUtility;\n+import com.synopsys.integration.alert.util.TestTags;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionComponentView;\n+import com.synopsys.integration.blackduck.api.generated.view.ProjectVersionView;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfig;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectBomService;\n+import com.synopsys.integration.blackduck.service.dataservice.ProjectService;\n+import com.synopsys.integration.blackduck.service.model.ProjectVersionWrapper;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.log.IntLogger;\n+import com.synopsys.integration.log.Slf4jIntLogger;\n+\n+@Tag(TestTags.DEFAULT_PERFORMANCE)\n+public abstract class BasePerformanceTest {\n+    public static final String ROLE_ALERT_ADMIN = \"ALERT_ADMIN\";\n+    protected final IntLogger intLogger = new Slf4jIntLogger(LoggerFactory.getLogger(this.getClass()));\n+\n+    private final BlackDuckPerformanceProperties blackDuckProperties = new BlackDuckPerformanceProperties();\n+    private final Gson gson = new GsonBuilder().setPrettyPrinting().create();\n+    private final DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(\"yyyy/MM/dd HH:mm:ss\");\n+\n+    private final String localAlertURL = \"http://localhost/\";\n+\n+    private AlertRequestUtility alertRequestUtility;\n+    private BlackDuckServicesFactory blackDuckServicesFactory = null;\n+\n+    public abstract AlertRequestUtility createAlertRequestUtility();\n+\n+    @BeforeEach\n+    public void setupTests() {\n+        alertRequestUtility = createAlertRequestUtility();\n+    }\n+\n+    public void triggerBlackDuckNotification() throws Exception {\n+        setupBlackDuckServicesFactory();\n+        BlackDuckService blackDuckService = blackDuckServicesFactory.getBlackDuckService();\n+        ProjectService projectService = blackDuckServicesFactory.createProjectService();\n+        String blackDuckProjectName = blackDuckProperties.getBlackDuckProjectName();\n+        String blackDuckProjectVersion = blackDuckProperties.getBlackDuckProjectVersion();\n+        ProjectVersionWrapper projectVersion = projectService.getProjectVersion(blackDuckProjectName, blackDuckProjectVersion)\n+                                                   .orElseThrow(() -> new IntegrationException(String.format(\"Could not find the Black Duck project '%s' version '%s'\", blackDuckProjectName, blackDuckProjectVersion)));\n+\n+        ProjectVersionView projectVersionView = projectVersion.getProjectVersionView();\n+        List<ProjectVersionComponentView> bomComponents = blackDuckService.getAllResponses(projectVersionView, ProjectVersionView.COMPONENTS_LINK_RESPONSE);\n+        Optional<ProjectVersionComponentView> apacheCommonsFileUpload = bomComponents.stream()\n+                                                                            .filter(component -> component.getComponentName().equals(\"Apache Commons FileUpload\"))\n+                                                                            .filter(component -> component.getComponentVersionName().equals(\"1.2.1\"))\n+                                                                            .findFirst();\n+        if (apacheCommonsFileUpload.isPresent()) {\n+            blackDuckService.delete(apacheCommonsFileUpload.get());\n+            //Thread.currentThread().wait(1000);\n+        }\n+\n+        ExternalId commonsFileUploadExternalId = new ExternalId(Forge.MAVEN);\n+        commonsFileUploadExternalId.setGroup(\"commons-fileupload\");\n+        commonsFileUploadExternalId.setName(\"commons-fileupload\");\n+        commonsFileUploadExternalId.setVersion(\"1.2.1\");\n+\n+        ProjectBomService projectBomService = blackDuckServicesFactory.createProjectBomService();\n+        projectBomService.addComponentToProjectVersion(commonsFileUploadExternalId, projectVersionView);\n+    }\n+\n+    private void setupBlackDuckServicesFactory() {\n+        if (null == blackDuckServicesFactory) {\n+            BlackDuckServerConfigBuilder blackDuckServerConfigBuilder = new BlackDuckServerConfigBuilder();\n+            blackDuckServerConfigBuilder.setUrl(blackDuckProperties.getBlackDuckProviderUrl())\n+                .setApiToken(blackDuckProperties.getBlackDuckApiToken())\n+                .setTimeoutInSeconds(blackDuckProperties.getBlackDuckTimeout())\n+                .setTrustCert(true);\n+            BlackDuckServerConfig blackDuckServerConfig = blackDuckServerConfigBuilder.build();\n+            blackDuckServicesFactory = blackDuckServerConfig.createBlackDuckServicesFactory(intLogger);\n+        }\n+    }\n+\n+    public String setupBlackDuck() throws Exception {\n+        try {\n+            return findBlackDuckProvider();\n+        } catch (IntegrationException exception) {\n+            intLogger.error(exception.getMessage());\n+            return createBlackDuckProvider();\n+        }\n+    }\n+\n+    public String findBlackDuckProvider() throws Exception {\n+        String blackDuckProviderSearch = String.format(\"api/configuration?context=%s&descriptorName=%s\", ConfigContextEnum.GLOBAL, blackDuckProperties.getBlackDuckProviderKey());\n+        String response = alertRequestUtility.executeGetRequest(blackDuckProviderSearch, \"Could not find the Black Duck provider.\");\n+\n+        MultiFieldModel blackDuckConfigurations = gson.fromJson(response, MultiFieldModel.class);\n+        FieldModel blackDuckProviderConfiguration = blackDuckConfigurations.getFieldModels().stream()\n+                                                        .filter(blackDuckConfiguration -> blackDuckConfiguration.getFieldValue(\"blackduck.url\").isPresent())\n+                                                        .filter(blackDuckConfiguration -> blackDuckConfiguration.getFieldValue(\"blackduck.url\").get().equals(blackDuckProperties.getBlackDuckProviderUrl()))\n+                                                        .findFirst()\n+                                                        .orElseThrow(() -> new IntegrationException(\"Could not find the BlackDuck provider configuration.\"));\n+\n+        String blackDuckProviderID = blackDuckProviderConfiguration.getId();\n+        String blackDuckConfigBody = gson.toJson(blackDuckProviderConfiguration);\n+        alertRequestUtility.executePutRequest(\"/api/configuration/\" + blackDuckProviderID, blackDuckConfigBody, \"Could not save the Black Duck provider.\");\n+        intLogger.info(String.format(\"Retrieved the Black Duck provider, ID %s.\", blackDuckProviderID));\n+\n+        return blackDuckProviderID;\n+    }\n+\n+    private String createBlackDuckProvider() throws Exception {\n+        Map<String, FieldValueModel> keyToValues = new HashMap<>();\n+        keyToValues.put(\"provider.common.config.enabled\", new FieldValueModel(List.of(\"true\"), true));\n+        keyToValues.put(\"provider.common.config.name\", new FieldValueModel(List.of(blackDuckProperties.getBlackDuckProviderUniqueName()), true));\n+        keyToValues.put(\"blackduck.url\", new FieldValueModel(List.of(blackDuckProperties.getBlackDuckProviderUrl()), true));\n+        keyToValues.put(\"blackduck.api.key\", new FieldValueModel(List.of(blackDuckProperties.getBlackDuckApiToken()), true));\n+        keyToValues.put(\"blackduck.timeout\", new FieldValueModel(List.of(blackDuckProperties.getBlackDuckTimeout()), true));\n+        FieldModel blackDuckProviderConfiguration = new FieldModel(blackDuckProperties.getBlackDuckProviderKey(), ConfigContextEnum.GLOBAL.name(), keyToValues);\n+\n+        String blackDuckConfigBody = gson.toJson(blackDuckProviderConfiguration);\n+\n+        alertRequestUtility.executePostRequest(\"/api/configuration/validate\", blackDuckConfigBody, \"Validating the Black Duck provider failed.\");\n+        alertRequestUtility.executePostRequest(\"/api/configuration/test\", blackDuckConfigBody, \"Testing the Black Duck provider failed.\");\n+        String creationResponse = alertRequestUtility.executePostRequest(\"/api/configuration\", blackDuckConfigBody, \"Could not create the Black Duck provider.\");\n+\n+        JsonObject jsonObject = gson.fromJson(creationResponse, JsonObject.class);\n+        String blackDuckProviderID = jsonObject.get(\"id\").getAsString();\n+        intLogger.info(String.format(\"Configured the Black Duck provider, ID %s.\", blackDuckProviderID));\n+        return blackDuckProviderID;\n+    }\n+\n+    public void logTimeElapsedWithMessage(String messageFormat, LocalDateTime start, LocalDateTime end) {\n+        //TODO log timing to a file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d18d89b860d71bb6a041702c9e203c4b7857ef8"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NjAzODY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/MsTeamsPerformanceTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozMzo1N1rOHlDg0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozMzo1N1rOHlDg0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxNjkxMg==", "bodyText": "Once again, I'm wondering if it would be better to have a class PerformanceTestJobCreator that handled this per channel. I think we should try to move away from test inheritance.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r508616912", "createdAt": "2020-10-20T15:33:57Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/performance/MsTeamsPerformanceTest.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package com.synopsys.integration.alert.performance;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.junit.Ignore;\n+import org.junit.jupiter.api.Test;\n+\n+import com.google.gson.JsonObject;\n+import com.synopsys.integration.alert.channel.msteams.descriptor.MsTeamsDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.ProviderDescriptor;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ConfigContextEnum;\n+import com.synopsys.integration.alert.common.enumeration.FrequencyType;\n+import com.synopsys.integration.alert.common.enumeration.ProcessingType;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+import com.synopsys.integration.alert.common.rest.model.JobFieldModel;\n+import com.synopsys.integration.alert.performance.model.MsTeamsPerformanceProperties;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public class MsTeamsPerformanceTest extends IntegrationPerformanceTest {\n+    private final static String MS_TEAMS_PERFORMANCE_JOB_NAME = \"MsTeams Performance Job\";\n+    private final MsTeamsPerformanceProperties msTeamsProperties = new MsTeamsPerformanceProperties();\n+\n+    @Test\n+    @Ignore\n+    public void testMsTeamsJob() throws Exception {\n+        runTest();\n+    }\n+\n+    @Override\n+    public String createJob() throws IntegrationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d18d89b860d71bb6a041702c9e203c4b7857ef8"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njg5MDM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/model/SlackPerformanceProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODozOToyOVrOHlL6pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODozOToyOVrOHlL6pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NDU5OQ==", "bodyText": "Another instance where I'm not convinced inheritance is the right approach. Is this class adding new functionality to TestProperties or is it wrapping functionality of TestProperties?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r508754599", "createdAt": "2020-10-20T18:39:29Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/performance/model/SlackPerformanceProperties.java", "diffHunk": "@@ -0,0 +1,37 @@\n+package com.synopsys.integration.alert.performance.model;\n+\n+import com.synopsys.integration.alert.channel.slack.SlackChannelKey;\n+import com.synopsys.integration.alert.util.TestProperties;\n+import com.synopsys.integration.alert.util.TestPropertyKey;\n+\n+public class SlackPerformanceProperties extends TestProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d18d89b860d71bb6a041702c9e203c4b7857ef8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njg5MjUyOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/model/MsTeamsPerformanceProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODozOTo1NVrOHlL79g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODozOTo1NVrOHlL79g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NDkzNA==", "bodyText": "See comment about SlackPerformanceTestProperties.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r508754934", "createdAt": "2020-10-20T18:39:55Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/performance/model/MsTeamsPerformanceProperties.java", "diffHunk": "@@ -0,0 +1,24 @@\n+package com.synopsys.integration.alert.performance.model;\n+\n+import com.synopsys.integration.alert.channel.msteams.MsTeamsKey;\n+import com.synopsys.integration.alert.util.TestProperties;\n+import com.synopsys.integration.alert.util.TestPropertyKey;\n+\n+public class MsTeamsPerformanceProperties extends TestProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d18d89b860d71bb6a041702c9e203c4b7857ef8"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njg5NDgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/alert/performance/model/BlackDuckPerformanceProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo0MDoxN1rOHlL9RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODo0MDoxN1rOHlL9RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc1NTI2OA==", "bodyText": "See comment about SlackPerformanceTestProperties.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1224#discussion_r508755268", "createdAt": "2020-10-20T18:40:17Z", "author": {"login": "gkillough"}, "path": "src/test/java/com/synopsys/integration/alert/performance/model/BlackDuckPerformanceProperties.java", "diffHunk": "@@ -0,0 +1,57 @@\n+package com.synopsys.integration.alert.performance.model;\n+\n+import java.util.UUID;\n+\n+import com.synopsys.integration.alert.provider.blackduck.BlackDuckProviderKey;\n+import com.synopsys.integration.alert.util.TestProperties;\n+import com.synopsys.integration.alert.util.TestPropertyKey;\n+\n+public class BlackDuckPerformanceProperties extends TestProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d18d89b860d71bb6a041702c9e203c4b7857ef8"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2310, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}