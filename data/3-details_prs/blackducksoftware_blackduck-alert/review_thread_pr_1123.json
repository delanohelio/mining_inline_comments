{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxMDQ5MDg3", "number": 1123, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozODozOFrOEareAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMDowNVrOEa8KYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDEwNjI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureRedirectUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTozODozOFrOHEQiQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowMjowMFrOHERXEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNzI2Ng==", "bodyText": "Incomplete sentence?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1123#discussion_r474227266", "createdAt": "2020-08-20T19:38:38Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureRedirectUtil.java", "diffHunk": "@@ -38,6 +38,10 @@ public AzureRedirectUtil(AlertProperties alertProperties) {\n         this.alertProperties = alertProperties;\n     }\n \n+    /**\n+     * The OAuth callback controller will redirect back to the Alert UI and is the only place where this method.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "096db4b18ed6ccdf4c646ee0d14f1e05d83df18c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDc4Ng==", "bodyText": "Thanks I will add that in.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1123#discussion_r474240786", "createdAt": "2020-08-20T20:02:00Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/AzureRedirectUtil.java", "diffHunk": "@@ -38,6 +38,10 @@ public AzureRedirectUtil(AlertProperties alertProperties) {\n         this.alertProperties = alertProperties;\n     }\n \n+    /**\n+     * The OAuth callback controller will redirect back to the Alert UI and is the only place where this method.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIyNzI2Ng=="}, "originalCommit": {"oid": "096db4b18ed6ccdf4c646ee0d14f1e05d83df18c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2NDEzODE3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/AzureOAuthTokenValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxOTo0NjowMFrOHEQ3YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDowMToyMlrOHERVwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMjY3Mg==", "bodyText": "is/will this method be used? I'm not really sure what the point of it is.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1123#discussion_r474232672", "createdAt": "2020-08-20T19:46:00Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/AzureOAuthTokenValidator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.net.Proxy;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.AzureRedirectUtil;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ConfigValidationFunction;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ValidationResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.ProxyManager;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+\n+@Component\n+public class AzureOAuthTokenValidator implements ConfigValidationFunction {\n+    private final AzureRedirectUtil azureRedirectUtil;\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private final ProxyManager proxyManager;\n+\n+    @Autowired\n+    public AzureOAuthTokenValidator(AzureRedirectUtil azureRedirectUtil, AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory,\n+        ConfigurationFieldModelConverter configurationFieldModelConverter, ProxyManager proxyManager) {\n+        this.azureRedirectUtil = azureRedirectUtil;\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.configurationFieldModelConverter = configurationFieldModelConverter;\n+        this.proxyManager = proxyManager;\n+    }\n+\n+    public ValidationResult validate(FieldValueModel fieldValueModel, FieldModel fieldModel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "096db4b18ed6ccdf4c646ee0d14f1e05d83df18c"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI0MDQ0OA==", "bodyText": "I can remove it now that I've figured out the circular dependency issue.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1123#discussion_r474240448", "createdAt": "2020-08-20T20:01:22Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/AzureOAuthTokenValidator.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.net.Proxy;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.AzureRedirectUtil;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ConfigValidationFunction;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ValidationResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.ProxyManager;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+\n+@Component\n+public class AzureOAuthTokenValidator implements ConfigValidationFunction {\n+    private final AzureRedirectUtil azureRedirectUtil;\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private final ProxyManager proxyManager;\n+\n+    @Autowired\n+    public AzureOAuthTokenValidator(AzureRedirectUtil azureRedirectUtil, AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory,\n+        ConfigurationFieldModelConverter configurationFieldModelConverter, ProxyManager proxyManager) {\n+        this.azureRedirectUtil = azureRedirectUtil;\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.configurationFieldModelConverter = configurationFieldModelConverter;\n+        this.proxyManager = proxyManager;\n+    }\n+\n+    public ValidationResult validate(FieldValueModel fieldValueModel, FieldModel fieldModel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDIzMjY3Mg=="}, "originalCommit": {"oid": "096db4b18ed6ccdf4c646ee0d14f1e05d83df18c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Njg0MTMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/AzureOAuthTokenValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxMjowMDowNVrOHEqeww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNzowODoyMlrOHE00pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MjM1NQ==", "bodyText": "What are your thoughts on automatically saving whatever is in the config fields before redirecting to the Microsoft OAuth Login? When the button is pressed, if the current config is valid and no OAuth config already exists, we save.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1123#discussion_r474652355", "createdAt": "2020-08-21T12:00:05Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/AzureOAuthTokenValidator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.net.Proxy;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.AzureRedirectUtil;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ConfigValidationFunction;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ValidationResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.ProxyManager;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+\n+@Component\n+public class AzureOAuthTokenValidator implements ConfigValidationFunction {\n+    private final AzureRedirectUtil azureRedirectUtil;\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private final ProxyManager proxyManager;\n+\n+    @Autowired\n+    public AzureOAuthTokenValidator(AzureRedirectUtil azureRedirectUtil, AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory,\n+        ConfigurationFieldModelConverter configurationFieldModelConverter, ProxyManager proxyManager) {\n+        this.azureRedirectUtil = azureRedirectUtil;\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.configurationFieldModelConverter = configurationFieldModelConverter;\n+        this.proxyManager = proxyManager;\n+    }\n+\n+    @Override\n+    public ValidationResult apply(FieldValueModel fieldValueModel, FieldModel fieldModel) {\n+        ValidationResult result = ValidationResult.success();\n+        try {\n+            Proxy proxy = proxyManager.createProxy();\n+            FieldAccessor fieldAccessor = configurationFieldModelConverter.convertToFieldAccessor(fieldModel);\n+            String oAuthRedirectUri = azureRedirectUtil.createOAuthRedirectUri();\n+            AzureBoardsProperties properties = AzureBoardsProperties.fromFieldAccessor(azureBoardsCredentialDataStoreFactory, oAuthRedirectUri, fieldAccessor);\n+            if (!properties.hasOAuthCredentials(proxy)) {\n+                result = ValidationResult.warnings(\"OAuth token credentials missing. Please save then authenticate.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21178530880d3abcc751afd429caa915e522a231"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgyMTc5OA==", "bodyText": "I'll add this to the 6.2.0 branch to save when authenticate is pushed.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1123#discussion_r474821798", "createdAt": "2020-08-21T17:08:22Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/AzureOAuthTokenValidator.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.net.Proxy;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.channel.azure.boards.AzureRedirectUtil;\n+import com.synopsys.integration.alert.channel.azure.boards.oauth.storage.AzureBoardsCredentialDataStoreFactory;\n+import com.synopsys.integration.alert.channel.azure.boards.service.AzureBoardsProperties;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ConfigValidationFunction;\n+import com.synopsys.integration.alert.common.descriptor.config.field.validators.ValidationResult;\n+import com.synopsys.integration.alert.common.persistence.accessor.FieldAccessor;\n+import com.synopsys.integration.alert.common.persistence.util.ConfigurationFieldModelConverter;\n+import com.synopsys.integration.alert.common.rest.ProxyManager;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+import com.synopsys.integration.alert.common.rest.model.FieldValueModel;\n+\n+@Component\n+public class AzureOAuthTokenValidator implements ConfigValidationFunction {\n+    private final AzureRedirectUtil azureRedirectUtil;\n+    private final AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory;\n+    private final ConfigurationFieldModelConverter configurationFieldModelConverter;\n+    private final ProxyManager proxyManager;\n+\n+    @Autowired\n+    public AzureOAuthTokenValidator(AzureRedirectUtil azureRedirectUtil, AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory,\n+        ConfigurationFieldModelConverter configurationFieldModelConverter, ProxyManager proxyManager) {\n+        this.azureRedirectUtil = azureRedirectUtil;\n+        this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n+        this.configurationFieldModelConverter = configurationFieldModelConverter;\n+        this.proxyManager = proxyManager;\n+    }\n+\n+    @Override\n+    public ValidationResult apply(FieldValueModel fieldValueModel, FieldModel fieldModel) {\n+        ValidationResult result = ValidationResult.success();\n+        try {\n+            Proxy proxy = proxyManager.createProxy();\n+            FieldAccessor fieldAccessor = configurationFieldModelConverter.convertToFieldAccessor(fieldModel);\n+            String oAuthRedirectUri = azureRedirectUtil.createOAuthRedirectUri();\n+            AzureBoardsProperties properties = AzureBoardsProperties.fromFieldAccessor(azureBoardsCredentialDataStoreFactory, oAuthRedirectUri, fieldAccessor);\n+            if (!properties.hasOAuthCredentials(proxy)) {\n+                result = ValidationResult.warnings(\"OAuth token credentials missing. Please save then authenticate.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDY1MjM1NQ=="}, "originalCommit": {"oid": "21178530880d3abcc751afd429caa915e522a231"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1691, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}