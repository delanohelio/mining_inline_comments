{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDE4NTk5", "number": 1120, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MjowMlrOEaJSwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMzo0MVrOEahXCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODUwNjg4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureOAuthCallbackController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1MjowMlrOHDYojw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMjowODo1MlrOHD92Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMTM3NQ==", "bodyText": "Could this be improved to an actual response? Or do we want to continue processing?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473311375", "createdAt": "2020-08-19T20:52:02Z", "author": {"login": "bamandel"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureOAuthCallbackController.java", "diffHunk": "@@ -72,73 +74,94 @@\n     private final ProxyManager proxyManager;\n     private final ConfigurationAccessor configurationAccessor;\n     private final AzureRedirectUtil azureRedirectUtil;\n+    private final OAuthRequestValidator oAuthRequestValidator;\n+    private final AuthorizationManager authorizationManager;\n \n     @Autowired\n     public AzureOAuthCallbackController(ResponseFactory responseFactory, Gson gson, AzureBoardsChannelKey azureBoardsChannelKey,\n         AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, ProxyManager proxyManager, ConfigurationAccessor configurationAccessor,\n-        AzureRedirectUtil azureRedirectUtil) {\n+        AzureRedirectUtil azureRedirectUtil, OAuthRequestValidator oAuthRequestValidator, AuthorizationManager authorizationManager) {\n         this.responseFactory = responseFactory;\n         this.gson = gson;\n         this.azureBoardsChannelKey = azureBoardsChannelKey;\n         this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n         this.proxyManager = proxyManager;\n         this.configurationAccessor = configurationAccessor;\n         this.azureRedirectUtil = azureRedirectUtil;\n+        this.oAuthRequestValidator = oAuthRequestValidator;\n+        this.authorizationManager = authorizationManager;\n     }\n \n     @GetMapping\n     public ResponseEntity<String> oauthCallback(HttpServletRequest request) {\n         logger.debug(\"Azure OAuth callback method called\");\n+        if (!authorizationManager.hasExecutePermission(ConfigContextEnum.GLOBAL.name(), azureBoardsChannelKey.getUniversalKey())) {\n+            logger.debug(\"Azure OAuth callback user does not have permission to call the controller.\");\n+            return responseFactory.createForbiddenResponse();\n+        }\n+\n+        String state = request.getParameter(\"state\");\n         try {\n             String requestURI = request.getRequestURI();\n             String requestQueryString = request.getQueryString();\n             logger.debug(\"Request URI {}?{}\", requestURI, requestQueryString);\n             String authorizationCode = request.getParameter(\"code\");\n-            String state = request.getParameter(\"state\");\n-            FieldAccessor fieldAccessor = createFieldAccessor();\n-            if (fieldAccessor.getFields().isEmpty()) {\n-                logger.error(\"Azure oauth callback: Channel global configuration missing\");\n+            if (!oAuthRequestValidator.hasRequestKey(state)) {\n+                logger.info(\"OAuth request {} not found.\", state);\n             } else {\n-                if (StringUtils.isBlank(authorizationCode)) {\n-                    logger.error(\"Azure oauth callback: Authorization code isn't valid. Stop processing\");\n+                logger.info(createOAuthRequestLoggerMessage(state, \"Processing...\"));\n+                oAuthRequestValidator.removeAuthorizationRequest(state);\n+                FieldAccessor fieldAccessor = createFieldAccessor();\n+                if (fieldAccessor.getFields().isEmpty()) {\n+                    logger.error(createOAuthRequestLoggerMessage(state, \"Azure oauth callback: Channel global configuration missing\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkyMTAyNw==", "bodyText": "Azure will be calling this controller since this is the callback URL.  So to send a response here would send it to the Azure server which would not update the Alert UI for the user.  We redirect back to the Alert UI at the end.  We could put query parameters with some details however we don't have a mechanism now to parse the query parameters in the URL to update the UI state at all.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473921027", "createdAt": "2020-08-20T12:08:52Z", "author": {"login": "psantos1113"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/web/AzureOAuthCallbackController.java", "diffHunk": "@@ -72,73 +74,94 @@\n     private final ProxyManager proxyManager;\n     private final ConfigurationAccessor configurationAccessor;\n     private final AzureRedirectUtil azureRedirectUtil;\n+    private final OAuthRequestValidator oAuthRequestValidator;\n+    private final AuthorizationManager authorizationManager;\n \n     @Autowired\n     public AzureOAuthCallbackController(ResponseFactory responseFactory, Gson gson, AzureBoardsChannelKey azureBoardsChannelKey,\n         AzureBoardsCredentialDataStoreFactory azureBoardsCredentialDataStoreFactory, ProxyManager proxyManager, ConfigurationAccessor configurationAccessor,\n-        AzureRedirectUtil azureRedirectUtil) {\n+        AzureRedirectUtil azureRedirectUtil, OAuthRequestValidator oAuthRequestValidator, AuthorizationManager authorizationManager) {\n         this.responseFactory = responseFactory;\n         this.gson = gson;\n         this.azureBoardsChannelKey = azureBoardsChannelKey;\n         this.azureBoardsCredentialDataStoreFactory = azureBoardsCredentialDataStoreFactory;\n         this.proxyManager = proxyManager;\n         this.configurationAccessor = configurationAccessor;\n         this.azureRedirectUtil = azureRedirectUtil;\n+        this.oAuthRequestValidator = oAuthRequestValidator;\n+        this.authorizationManager = authorizationManager;\n     }\n \n     @GetMapping\n     public ResponseEntity<String> oauthCallback(HttpServletRequest request) {\n         logger.debug(\"Azure OAuth callback method called\");\n+        if (!authorizationManager.hasExecutePermission(ConfigContextEnum.GLOBAL.name(), azureBoardsChannelKey.getUniversalKey())) {\n+            logger.debug(\"Azure OAuth callback user does not have permission to call the controller.\");\n+            return responseFactory.createForbiddenResponse();\n+        }\n+\n+        String state = request.getParameter(\"state\");\n         try {\n             String requestURI = request.getRequestURI();\n             String requestQueryString = request.getQueryString();\n             logger.debug(\"Request URI {}?{}\", requestURI, requestQueryString);\n             String authorizationCode = request.getParameter(\"code\");\n-            String state = request.getParameter(\"state\");\n-            FieldAccessor fieldAccessor = createFieldAccessor();\n-            if (fieldAccessor.getFields().isEmpty()) {\n-                logger.error(\"Azure oauth callback: Channel global configuration missing\");\n+            if (!oAuthRequestValidator.hasRequestKey(state)) {\n+                logger.info(\"OAuth request {} not found.\", state);\n             } else {\n-                if (StringUtils.isBlank(authorizationCode)) {\n-                    logger.error(\"Azure oauth callback: Authorization code isn't valid. Stop processing\");\n+                logger.info(createOAuthRequestLoggerMessage(state, \"Processing...\"));\n+                oAuthRequestValidator.removeAuthorizationRequest(state);\n+                FieldAccessor fieldAccessor = createFieldAccessor();\n+                if (fieldAccessor.getFields().isEmpty()) {\n+                    logger.error(createOAuthRequestLoggerMessage(state, \"Azure oauth callback: Channel global configuration missing\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxMTM3NQ=="}, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjQ0MTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestPurgeTask.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMTozMFrOHEADlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMTozMFrOHEADlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1NzI2OQ==", "bodyText": "Why not make the variable more self-revealing? CRON_EXPRESSION_EVERY_5_MINUTES?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473957269", "createdAt": "2020-08-20T13:11:30Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestPurgeTask.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.time.Instant;\n+import java.time.temporal.ChronoUnit;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.TaskScheduler;\n+import org.springframework.stereotype.Component;\n+\n+import com.synopsys.integration.alert.common.workflow.task.StartupScheduledTask;\n+import com.synopsys.integration.alert.common.workflow.task.TaskManager;\n+\n+@Component\n+public class OAuthRequestPurgeTask extends StartupScheduledTask {\n+    // every 5 minutes.\n+    public static final String CRON_EXPRESSION = \"0 0/5 * 1/1 * ?\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjQ1MDAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxMzo0MVrOHEAIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzoxNDo1MFrOHEALmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1ODU0OQ==", "bodyText": "Why not do this in one stream and just check isAfter instead?", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473958549", "createdAt": "2020-08-20T13:13:41Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestValidator.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OAuthRequestValidator {\n+    private final Logger logger = LoggerFactory.getLogger(OAuthRequestValidator.class);\n+    private final Map<String, Instant> requestMap = new ConcurrentHashMap<>();\n+\n+    public void addAuthorizationRequest(String requestKey) {\n+        logger.debug(\"Adding OAuth authorization key {}\", requestKey);\n+        requestMap.put(requestKey, Instant.now());\n+    }\n+\n+    public void removeAuthorizationRequest(String requestKey) {\n+        requestMap.remove(requestKey);\n+        logger.debug(\"Removed OAuth authorization key {}\", requestKey);\n+    }\n+\n+    public boolean hasRequestKey(String requestKey) {\n+        return requestMap.containsKey(requestKey);\n+    }\n+\n+    public void removeRequestsOlderThanInstant(Instant instant) {\n+        Set<Map.Entry<String, Instant>> entriesToRemove = requestMap.entrySet().stream()\n+                                                              .filter(entry -> entry.getValue().isBefore(instant))\n+                                                              .collect(Collectors.toSet());\n+        entriesToRemove.stream()\n+            .map(Map.Entry::getKey)\n+            .forEach(this::removeAuthorizationRequest);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1OTMyMg==", "bodyText": "You can use .distinct() on the stream if you want to avoid duplicates.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1120#discussion_r473959322", "createdAt": "2020-08-20T13:14:50Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/channel/azure/boards/oauth/OAuthRequestValidator.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.channel.azure.boards.oauth;\n+\n+import java.time.Instant;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OAuthRequestValidator {\n+    private final Logger logger = LoggerFactory.getLogger(OAuthRequestValidator.class);\n+    private final Map<String, Instant> requestMap = new ConcurrentHashMap<>();\n+\n+    public void addAuthorizationRequest(String requestKey) {\n+        logger.debug(\"Adding OAuth authorization key {}\", requestKey);\n+        requestMap.put(requestKey, Instant.now());\n+    }\n+\n+    public void removeAuthorizationRequest(String requestKey) {\n+        requestMap.remove(requestKey);\n+        logger.debug(\"Removed OAuth authorization key {}\", requestKey);\n+    }\n+\n+    public boolean hasRequestKey(String requestKey) {\n+        return requestMap.containsKey(requestKey);\n+    }\n+\n+    public void removeRequestsOlderThanInstant(Instant instant) {\n+        Set<Map.Entry<String, Instant>> entriesToRemove = requestMap.entrySet().stream()\n+                                                              .filter(entry -> entry.getValue().isBefore(instant))\n+                                                              .collect(Collectors.toSet());\n+        entriesToRemove.stream()\n+            .map(Map.Entry::getKey)\n+            .forEach(this::removeAuthorizationRequest);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk1ODU0OQ=="}, "originalCommit": {"oid": "111d302d02cc1757c337fafbe1bc8912b6f2d499"}, "originalPosition": 60}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1687, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}