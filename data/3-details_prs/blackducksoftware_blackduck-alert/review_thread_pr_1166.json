{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODQ4MzA4", "number": 1166, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDowNDoxOFrOEjS1sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDowNDoxOFrOEjS1sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDQ0Mjc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/alert/web/custom/ProcessingSelectCustomEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDowNDoxOFrOHRkqmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1OTo1NVrOHSLR3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4ODU3MA==", "bodyText": "Why not just make this condition the return statement?\nDIGEST doesn't really belong either IMO.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1166#discussion_r488188570", "createdAt": "2020-09-14T20:04:18Z", "author": {"login": "gkillough"}, "path": "src/main/java/com/synopsys/integration/alert/web/custom/ProcessingSelectCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.custom;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.channel.issuetracker.IssueTrackerChannelKey;\n+import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ProcessingType;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+@Component\n+public class ProcessingSelectCustomEndpoint extends SelectCustomEndpoint {\n+    private final List<String> issueTrackerChannelKeys;\n+\n+    @Autowired\n+    public ProcessingSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, List<IssueTrackerChannelKey> issueTrackerChannelKeys) throws AlertException {\n+        super(ProviderDistributionUIConfig.KEY_PROCESSING_TYPE, customEndpointManager, responseFactory, gson);\n+        this.issueTrackerChannelKeys = issueTrackerChannelKeys.stream()\n+                                           .map(IssueTrackerChannelKey::getUniversalKey)\n+                                           .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+        String channelName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_CHANNEL_NAME).orElse(\"\");\n+        return Arrays.stream(ProcessingType.values())\n+                   .filter(processingType -> this.shouldInclude(processingType, channelName))\n+                   .map(processingType -> new LabelValueSelectOption(processingType.getLabel(), processingType.name()))\n+                   .collect(Collectors.toList());\n+    }\n+\n+    private boolean shouldInclude(ProcessingType processingType, String channelName) {\n+        if (issueTrackerChannelKeys.contains(channelName) && processingType == ProcessingType.SUMMARY) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b37eacf8ea3bd14df30f004b4317b4a464618ad7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgyMTIxNQ==", "bodyText": "I can change it to make the condition the return. I think DIGEST still fits. DEFAULT would let users have a full audit trail of the components reflected in Jira, while DIGEST would be the current items of concern (without opening issues and potentially closing them in the same batch)", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/1166#discussion_r488821215", "createdAt": "2020-09-15T16:59:55Z", "author": {"login": "jamesrichard91"}, "path": "src/main/java/com/synopsys/integration/alert/web/custom/ProcessingSelectCustomEndpoint.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * blackduck-alert\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.alert.web.custom;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.alert.common.action.CustomEndpointManager;\n+import com.synopsys.integration.alert.common.channel.issuetracker.IssueTrackerChannelKey;\n+import com.synopsys.integration.alert.common.descriptor.config.field.LabelValueSelectOption;\n+import com.synopsys.integration.alert.common.descriptor.config.field.endpoint.SelectCustomEndpoint;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ChannelDistributionUIConfig;\n+import com.synopsys.integration.alert.common.descriptor.config.ui.ProviderDistributionUIConfig;\n+import com.synopsys.integration.alert.common.enumeration.ProcessingType;\n+import com.synopsys.integration.alert.common.exception.AlertException;\n+import com.synopsys.integration.alert.common.rest.ResponseFactory;\n+import com.synopsys.integration.alert.common.rest.model.FieldModel;\n+\n+@Component\n+public class ProcessingSelectCustomEndpoint extends SelectCustomEndpoint {\n+    private final List<String> issueTrackerChannelKeys;\n+\n+    @Autowired\n+    public ProcessingSelectCustomEndpoint(CustomEndpointManager customEndpointManager, ResponseFactory responseFactory, Gson gson, List<IssueTrackerChannelKey> issueTrackerChannelKeys) throws AlertException {\n+        super(ProviderDistributionUIConfig.KEY_PROCESSING_TYPE, customEndpointManager, responseFactory, gson);\n+        this.issueTrackerChannelKeys = issueTrackerChannelKeys.stream()\n+                                           .map(IssueTrackerChannelKey::getUniversalKey)\n+                                           .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    protected List<LabelValueSelectOption> createData(FieldModel fieldModel) throws AlertException {\n+        String channelName = fieldModel.getFieldValue(ChannelDistributionUIConfig.KEY_CHANNEL_NAME).orElse(\"\");\n+        return Arrays.stream(ProcessingType.values())\n+                   .filter(processingType -> this.shouldInclude(processingType, channelName))\n+                   .map(processingType -> new LabelValueSelectOption(processingType.getLabel(), processingType.name()))\n+                   .collect(Collectors.toList());\n+    }\n+\n+    private boolean shouldInclude(ProcessingType processingType, String channelName) {\n+        if (issueTrackerChannelKeys.contains(channelName) && processingType == ProcessingType.SUMMARY) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4ODU3MA=="}, "originalCommit": {"oid": "b37eacf8ea3bd14df30f004b4317b4a464618ad7"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1745, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}