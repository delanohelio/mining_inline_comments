{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczMjg3NjM1", "number": 848, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0NDoxN1rODelSGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0NDoxN1rODelSGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMzk0NzEyOnYy", "diffSide": "RIGHT", "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/GlobalConfigExistsValidator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0NDoxN1rOFnzKag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxOTo0NDoxN1rOFnzKag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzI3NzAzNA==", "bodyText": "Validating global configs is more expensive than comparing the descriptorName which is why the map happens later.", "url": "https://github.com/blackducksoftware/blackduck-alert/pull/848#discussion_r377277034", "createdAt": "2020-02-10T19:44:17Z", "author": {"login": "gkillough"}, "path": "alert-common/src/main/java/com/synopsys/integration/alert/common/descriptor/config/GlobalConfigExistsValidator.java", "diffHunk": "@@ -42,23 +44,33 @@\n     public static final String GLOBAL_CONFIG_MISSING = \"%s global configuration missing.\";\n     private static final Logger logger = LoggerFactory.getLogger(GlobalConfigExistsValidator.class);\n     private ConfigurationAccessor configurationAccessor;\n-    private List<DescriptorKey> descriptorKeys;\n+    private List<Descriptor> descriptors;\n \n     @Autowired\n-    public GlobalConfigExistsValidator(ConfigurationAccessor configurationAccessor, List<DescriptorKey> descriptorKeys) {\n+    public GlobalConfigExistsValidator(ConfigurationAccessor configurationAccessor, List<Descriptor> descriptors) {\n         this.configurationAccessor = configurationAccessor;\n-        this.descriptorKeys = descriptorKeys;\n+        this.descriptors = descriptors;\n     }\n \n+    /**\n+     * @return An Optional<String> containing the error message.\n+     */\n     public Optional<String> validate(String descriptorName) {\n         if (StringUtils.isBlank(descriptorName)) {\n             return Optional.empty();\n         }\n-        String descriptorDisplayName = descriptorKeys.stream()\n-                                           .filter(descriptorKey -> descriptorKey.getUniversalKey().equals(descriptorName))\n-                                           .map(descriptorKey -> descriptorKey.getDisplayName())\n-                                           .findFirst()\n-                                           .orElse(descriptorName);\n+\n+        Optional<DescriptorKey> optionalDescriptorKey = descriptors\n+                                                            .stream()\n+                                                            .filter(desc -> desc.getDescriptorKey().getUniversalKey().equals(descriptorName))\n+                                                            .filter(this::hasGlobalConfig)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f86fa3d70c79b011c6bf431ceb3ee9607ba25a"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2088, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}