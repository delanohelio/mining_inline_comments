{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NzQxNzg3", "number": 2548, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxNzo0MFrODabJlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDoyMDo1NFrODbGOyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDM0Mzg5OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxNzo0MFrOFhXp2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo0NjoyMVrOFh7GmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNDg3Mw==", "bodyText": "why this is in else statement? We should add to cache just after getting from DB.", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r370534873", "createdAt": "2020-01-24T09:17:40Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -11702,21 +11708,36 @@ protected boolean isUserIdGeneratedByUserStore(String userName, Map<String, Stri\n      */\n     public String getUserIDFromUserName(String userName) throws UserStoreException {\n \n+        String userID;\n         UserStore userStore = getUserStore(userName);\n         if (userStore.isRecurssive()) {\n             return ((AbstractUserStoreManager) userStore.getUserStoreManager())\n                     .getUserIDFromUserName(userStore.getDomainFreeName());\n         }\n \n         if (isUniqueUserIdEnabledInUserStore(userStore)) {\n-            return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            userID = AbstractUserStoreManagerCache.getInstance().getValueFromCache(userName,\n+                    RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME);\n+            if (StringUtils.isEmpty(userID)){\n+                return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            } else {\n+                AbstractUserStoreManagerCache.getInstance().addToCache(userName, userID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNTY3Mg==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371115672", "createdAt": "2020-01-27T08:46:21Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -11702,21 +11708,36 @@ protected boolean isUserIdGeneratedByUserStore(String userName, Map<String, Stri\n      */\n     public String getUserIDFromUserName(String userName) throws UserStoreException {\n \n+        String userID;\n         UserStore userStore = getUserStore(userName);\n         if (userStore.isRecurssive()) {\n             return ((AbstractUserStoreManager) userStore.getUserStoreManager())\n                     .getUserIDFromUserName(userStore.getDomainFreeName());\n         }\n \n         if (isUniqueUserIdEnabledInUserStore(userStore)) {\n-            return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            userID = AbstractUserStoreManagerCache.getInstance().getValueFromCache(userName,\n+                    RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME);\n+            if (StringUtils.isEmpty(userID)){\n+                return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            } else {\n+                AbstractUserStoreManagerCache.getInstance().addToCache(userName, userID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNDg3Mw=="}, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDM0NTc1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToxODoyMlrOFhXq6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo0NjoxN1rOFh7Ghw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNTE0NA==", "bodyText": "Why in else statement?", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r370535144", "createdAt": "2020-01-24T09:18:22Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -11702,21 +11708,36 @@ protected boolean isUserIdGeneratedByUserStore(String userName, Map<String, Stri\n      */\n     public String getUserIDFromUserName(String userName) throws UserStoreException {\n \n+        String userID;\n         UserStore userStore = getUserStore(userName);\n         if (userStore.isRecurssive()) {\n             return ((AbstractUserStoreManager) userStore.getUserStoreManager())\n                     .getUserIDFromUserName(userStore.getDomainFreeName());\n         }\n \n         if (isUniqueUserIdEnabledInUserStore(userStore)) {\n-            return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            userID = AbstractUserStoreManagerCache.getInstance().getValueFromCache(userName,\n+                    RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME);\n+            if (StringUtils.isEmpty(userID)){\n+                return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            } else {\n+                AbstractUserStoreManagerCache.getInstance().addToCache(userName, userID,\n+                        RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME);\n+            }\n         }\n \n         Map<String, String> claims = doGetUserClaimValues(userName,\n                 new String[]{UserCoreClaimConstants.USER_ID_CLAIM_URI},\n                 userStore.getDomainName(), null);\n         if (claims != null && claims.size() == 1) {\n-            return claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);\n+            userID = AbstractUserStoreManagerCache.getInstance().getValueFromCache(userName,\n+                    RESOLVE_USER_NAME_FROM_USER_ID_CACHE_NAME);\n+            if (StringUtils.isEmpty(userID)) {\n+                return claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);\n+            } else {\n+                AbstractUserStoreManagerCache.getInstance().addToCache(userName, userID,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNTY1NQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371115655", "createdAt": "2020-01-27T08:46:17Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -11702,21 +11708,36 @@ protected boolean isUserIdGeneratedByUserStore(String userName, Map<String, Stri\n      */\n     public String getUserIDFromUserName(String userName) throws UserStoreException {\n \n+        String userID;\n         UserStore userStore = getUserStore(userName);\n         if (userStore.isRecurssive()) {\n             return ((AbstractUserStoreManager) userStore.getUserStoreManager())\n                     .getUserIDFromUserName(userStore.getDomainFreeName());\n         }\n \n         if (isUniqueUserIdEnabledInUserStore(userStore)) {\n-            return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            userID = AbstractUserStoreManagerCache.getInstance().getValueFromCache(userName,\n+                    RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME);\n+            if (StringUtils.isEmpty(userID)){\n+                return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            } else {\n+                AbstractUserStoreManagerCache.getInstance().addToCache(userName, userID,\n+                        RESOLVE_USER_ID_FROM_USER_NAME_CACHE_NAME);\n+            }\n         }\n \n         Map<String, String> claims = doGetUserClaimValues(userName,\n                 new String[]{UserCoreClaimConstants.USER_ID_CLAIM_URI},\n                 userStore.getDomainName(), null);\n         if (claims != null && claims.size() == 1) {\n-            return claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);\n+            userID = AbstractUserStoreManagerCache.getInstance().getValueFromCache(userName,\n+                    RESOLVE_USER_NAME_FROM_USER_ID_CACHE_NAME);\n+            if (StringUtils.isEmpty(userID)) {\n+                return claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);\n+            } else {\n+                AbstractUserStoreManagerCache.getInstance().addToCache(userName, userID,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNTE0NA=="}, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDM1NzM5OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManagerCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyMjoyNVrOFhXxkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo0NjoxNFrOFh7Gbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjg1MA==", "bodyText": "why AbstractUserStoreManagerCache?", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r370536850", "createdAt": "2020-01-24T09:22:25Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManagerCache.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.user.core.common;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Handle Cache in Abstract User Store Manager.\n+ */\n+public class AbstractUserStoreManagerCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNTYzMA==", "bodyText": "changed the name", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371115630", "createdAt": "2020-01-27T08:46:14Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManagerCache.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.user.core.common;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Handle Cache in Abstract User Store Manager.\n+ */\n+public class AbstractUserStoreManagerCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjg1MA=="}, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5MDM1ODEzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManagerCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOToyMjo0MlrOFhXyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODo0NjowNFrOFh7GHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjk2Mw==", "bodyText": "UserIdResolverCache", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r370536963", "createdAt": "2020-01-24T09:22:42Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManagerCache.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.user.core.common;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Handle Cache in Abstract User Store Manager.\n+ */\n+public class AbstractUserStoreManagerCache {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTExNTU1MA==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371115550", "createdAt": "2020-01-27T08:46:04Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManagerCache.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.user.core.common;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Handle Cache in Abstract User Store Manager.\n+ */\n+public class AbstractUserStoreManagerCache {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUzNjk2Mw=="}, "originalCommit": {"oid": "c952d3e331de78e54b11a1bb2d450bf215101d92"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzM4NTUzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDowNDowOVrOFiYtRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNToxMjoxOVrOFiZcqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDcwOQ==", "bodyText": "Better to move doGetUserClaimValues only if the cache is empty. Otherwise, that execution is redundant.", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371600709", "createdAt": "2020-01-28T04:04:09Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -11702,21 +11709,34 @@ protected boolean isUserIdGeneratedByUserStore(String userName, Map<String, Stri\n      */\n     public String getUserIDFromUserName(String userName) throws UserStoreException {\n \n+        String userID;\n         UserStore userStore = getUserStore(userName);\n         if (userStore.isRecurssive()) {\n             return ((AbstractUserStoreManager) userStore.getUserStoreManager())\n                     .getUserIDFromUserName(userStore.getDomainFreeName());\n         }\n \n         if (isUniqueUserIdEnabledInUserStore(userStore)) {\n-            return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            userID = getFromUserIDCache(userName, userStore);\n+            if (StringUtils.isEmpty(userID)) {\n+                userID = doGetUserIDFromUserNameWithID(userName);\n+                addToUserIDCache(userID, userName, userStore);\n+            }\n+            addToUserNameCache(userID, userName, userStore);\n+            return userID;\n         }\n \n         Map<String, String> claims = doGetUserClaimValues(userName,\n                 new String[]{UserCoreClaimConstants.USER_ID_CLAIM_URI},\n                 userStore.getDomainName(), null);\n         if (claims != null && claims.size() == 1) {\n-            return claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);\n+            userID = getFromUserIDCache(userName, userStore);\n+            if (StringUtils.isEmpty(userID)) {\n+                userID = claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73cd8954d8f11a513953e086c18324ef2a2dfd2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjg0Mw==", "bodyText": "Fixed by getting from the cache at the start", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371612843", "createdAt": "2020-01-28T05:12:19Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -11702,21 +11709,34 @@ protected boolean isUserIdGeneratedByUserStore(String userName, Map<String, Stri\n      */\n     public String getUserIDFromUserName(String userName) throws UserStoreException {\n \n+        String userID;\n         UserStore userStore = getUserStore(userName);\n         if (userStore.isRecurssive()) {\n             return ((AbstractUserStoreManager) userStore.getUserStoreManager())\n                     .getUserIDFromUserName(userStore.getDomainFreeName());\n         }\n \n         if (isUniqueUserIdEnabledInUserStore(userStore)) {\n-            return doGetUserIDFromUserNameWithID(userStore.getDomainFreeName());\n+            userID = getFromUserIDCache(userName, userStore);\n+            if (StringUtils.isEmpty(userID)) {\n+                userID = doGetUserIDFromUserNameWithID(userName);\n+                addToUserIDCache(userID, userName, userStore);\n+            }\n+            addToUserNameCache(userID, userName, userStore);\n+            return userID;\n         }\n \n         Map<String, String> claims = doGetUserClaimValues(userName,\n                 new String[]{UserCoreClaimConstants.USER_ID_CLAIM_URI},\n                 userStore.getDomainName(), null);\n         if (claims != null && claims.size() == 1) {\n-            return claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);\n+            userID = getFromUserIDCache(userName, userStore);\n+            if (StringUtils.isEmpty(userID)) {\n+                userID = claims.get(UserCoreClaimConstants.USER_ID_CLAIM_URI);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMDcwOQ=="}, "originalCommit": {"oid": "e73cd8954d8f11a513953e086c18324ef2a2dfd2"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzM4NzkzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/UserIdResolverCache.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDowNjo1MFrOFiYuwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNToxMjoyNFrOFiZcvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMTA5MA==", "bodyText": "Move this inside try block and extract a private method named. startSuperTenantFlow", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371601090", "createdAt": "2020-01-28T04:06:50Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/UserIdResolverCache.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.user.core.common;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.carbon.utils.xml.StringUtils;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Handle Cache in User ID resolving flow.\n+ */\n+public class UserIdResolverCache {\n+\n+    private static Log log = LogFactory.getLog(UserIdResolverCache.class);\n+    private static UserIdResolverCache userIdResolverCache = new UserIdResolverCache();\n+    private static final String USER_ID_RESOLVER_CACHE_MANAGER = \"USER_ID_RESOLVER_CACHE_MANAGER\";\n+\n+    private UserIdResolverCache() {\n+    }\n+\n+    /**\n+     * Gets a new instance of UserIdResolverCache.\n+     *\n+     * @return A new instance of UserIdResolverCache.\n+     */\n+    public synchronized static UserIdResolverCache getInstance() {\n+\n+        return userIdResolverCache;\n+    }\n+\n+    private Cache<String, String> UserIdResolverCache(String cacheName) {\n+\n+        Cache<String, String> cache;\n+        CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(USER_ID_RESOLVER_CACHE_MANAGER);\n+        cache = cacheManager.getCache(cacheName);\n+        return cache;\n+    }\n+\n+    /**\n+     * Add a cache entry.\n+     *\n+     * @param key       Key which cache entry is indexed.\n+     * @param entry     Actual object where cache entry is placed.\n+     * @param cacheName Name of the cache.\n+     */\n+    public void addToCache(String key, String entry, String cacheName) {\n+\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(entry) || StringUtils.isEmpty(cacheName)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invalid input parameters in add to cache request. Cache key: \" + key + \" ,Cache entry: \" +\n+                        entry + \" ,Cache name: \" + cacheName);\n+            }\n+            return;\n+        }\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        try {\n+            PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n+            carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n+            carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+\n+            Cache<String, String> cache = UserIdResolverCache(cacheName);\n+            if (cache != null && !cache.containsKey(key)) {\n+                cache.put(key, entry);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            cacheName + \" which is under \" + USER_ID_RESOLVER_CACHE_MANAGER + \", added the entry: \"\n+                                    + entry + \" for the key: \" + key + \" successfully\");\n+                }\n+            }\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Retrieves a cache entry.\n+     *\n+     * @param key       CacheKey.\n+     * @param cacheName Name of the cache.\n+     * @return Cached entry if the key presents, else returns null.\n+     */\n+    public String getValueFromCache(String key, String cacheName) {\n+\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(cacheName)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invalid input parameters in get value from cache request. Cache key: \" + key +\n+                        \" ,Cache name: \" + cacheName);\n+            }\n+            return null;\n+        }\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n+            carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n+            carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+\n+            Cache<String, String> cache = UserIdResolverCache(cacheName);\n+            if (cache != null) {\n+                if (cache.containsKey(key)) {\n+                    String entry = cache.get(key);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(cacheName + \" which is under \" + USER_ID_RESOLVER_CACHE_MANAGER +\n+                                \", found the entry: \" + entry + \" for the key: \" + key + \" successfully.\");\n+                    }\n+                    return entry;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(cacheName + \" which is under \" + USER_ID_RESOLVER_CACHE_MANAGER +\n+                            \", doesn't contain the key: \" + key);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + cacheName + \" which is under \"\n+                            + USER_ID_RESOLVER_CACHE_MANAGER);\n+                }\n+            }\n+            return null;\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Clears a cache entry.\n+     *\n+     * @param key       Key to clear cache.\n+     * @param cacheName Name of the cache.\n+     */\n+    public void clearCacheEntry(String key, String cacheName) {\n+\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(cacheName)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invalid input parameters in clear from cache request. Cache key: \" + key +\n+                        \" ,Cache name: \" + cacheName);\n+            }\n+            return;\n+        }\n+\n+        PrivilegedCarbonContext.startTenantFlow();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73cd8954d8f11a513953e086c18324ef2a2dfd2"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjg2MQ==", "bodyText": "fixed", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371612861", "createdAt": "2020-01-28T05:12:24Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/UserIdResolverCache.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/*\n+ * Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.wso2.carbon.user.core.common;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+import org.wso2.carbon.utils.xml.StringUtils;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Handle Cache in User ID resolving flow.\n+ */\n+public class UserIdResolverCache {\n+\n+    private static Log log = LogFactory.getLog(UserIdResolverCache.class);\n+    private static UserIdResolverCache userIdResolverCache = new UserIdResolverCache();\n+    private static final String USER_ID_RESOLVER_CACHE_MANAGER = \"USER_ID_RESOLVER_CACHE_MANAGER\";\n+\n+    private UserIdResolverCache() {\n+    }\n+\n+    /**\n+     * Gets a new instance of UserIdResolverCache.\n+     *\n+     * @return A new instance of UserIdResolverCache.\n+     */\n+    public synchronized static UserIdResolverCache getInstance() {\n+\n+        return userIdResolverCache;\n+    }\n+\n+    private Cache<String, String> UserIdResolverCache(String cacheName) {\n+\n+        Cache<String, String> cache;\n+        CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(USER_ID_RESOLVER_CACHE_MANAGER);\n+        cache = cacheManager.getCache(cacheName);\n+        return cache;\n+    }\n+\n+    /**\n+     * Add a cache entry.\n+     *\n+     * @param key       Key which cache entry is indexed.\n+     * @param entry     Actual object where cache entry is placed.\n+     * @param cacheName Name of the cache.\n+     */\n+    public void addToCache(String key, String entry, String cacheName) {\n+\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(entry) || StringUtils.isEmpty(cacheName)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invalid input parameters in add to cache request. Cache key: \" + key + \" ,Cache entry: \" +\n+                        entry + \" ,Cache name: \" + cacheName);\n+            }\n+            return;\n+        }\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+        try {\n+            PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n+            carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n+            carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+\n+            Cache<String, String> cache = UserIdResolverCache(cacheName);\n+            if (cache != null && !cache.containsKey(key)) {\n+                cache.put(key, entry);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            cacheName + \" which is under \" + USER_ID_RESOLVER_CACHE_MANAGER + \", added the entry: \"\n+                                    + entry + \" for the key: \" + key + \" successfully\");\n+                }\n+            }\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Retrieves a cache entry.\n+     *\n+     * @param key       CacheKey.\n+     * @param cacheName Name of the cache.\n+     * @return Cached entry if the key presents, else returns null.\n+     */\n+    public String getValueFromCache(String key, String cacheName) {\n+\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(cacheName)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invalid input parameters in get value from cache request. Cache key: \" + key +\n+                        \" ,Cache name: \" + cacheName);\n+            }\n+            return null;\n+        }\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n+            carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n+            carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+\n+            Cache<String, String> cache = UserIdResolverCache(cacheName);\n+            if (cache != null) {\n+                if (cache.containsKey(key)) {\n+                    String entry = cache.get(key);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(cacheName + \" which is under \" + USER_ID_RESOLVER_CACHE_MANAGER +\n+                                \", found the entry: \" + entry + \" for the key: \" + key + \" successfully.\");\n+                    }\n+                    return entry;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(cacheName + \" which is under \" + USER_ID_RESOLVER_CACHE_MANAGER +\n+                            \", doesn't contain the key: \" + key);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + cacheName + \" which is under \"\n+                            + USER_ID_RESOLVER_CACHE_MANAGER);\n+                }\n+            }\n+            return null;\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Clears a cache entry.\n+     *\n+     * @param key       Key to clear cache.\n+     * @param cacheName Name of the cache.\n+     */\n+    public void clearCacheEntry(String key, String cacheName) {\n+\n+        if (StringUtils.isEmpty(key) || StringUtils.isEmpty(cacheName)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Invalid input parameters in clear from cache request. Cache key: \" + key +\n+                        \" ,Cache name: \" + cacheName);\n+            }\n+            return;\n+        }\n+\n+        PrivilegedCarbonContext.startTenantFlow();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMTA5MA=="}, "originalCommit": {"oid": "e73cd8954d8f11a513953e086c18324ef2a2dfd2"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5NzQwMjM0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDoyMDo1NFrOFiY3hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNToxMjozMlrOFiZc0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMzMzNQ==", "bodyText": "Extract to a private method", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371603335", "createdAt": "2020-01-28T04:20:54Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -3693,6 +3695,11 @@ public final void deleteUser(String userName) throws UserStoreException {\n         if (isUniqueUserIdEnabled) {\n             userID = getUserIDFromUserName(userName);\n             isUserExists = userID != null;\n+            UserIdResolverCache.getInstance()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e73cd8954d8f11a513953e086c18324ef2a2dfd2"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYxMjg4Mw==", "bodyText": "Fixed", "url": "https://github.com/wso2/carbon-kernel/pull/2548#discussion_r371612883", "createdAt": "2020-01-28T05:12:32Z", "author": {"login": "Buddhimah"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -3693,6 +3695,11 @@ public final void deleteUser(String userName) throws UserStoreException {\n         if (isUniqueUserIdEnabled) {\n             userID = getUserIDFromUserName(userName);\n             isUserExists = userID != null;\n+            UserIdResolverCache.getInstance()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwMzMzNQ=="}, "originalCommit": {"oid": "e73cd8954d8f11a513953e086c18324ef2a2dfd2"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2231, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}