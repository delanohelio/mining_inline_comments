{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjMyMzIw", "number": 2639, "title": "Add support for secondary userstore password decryption-symmetric encryption", "bodyText": "Purpose\nResolves wso2/product-is#7905\nGoals\n\nDescribe the solutions that this feature/fix will introduce to resolve the problems described above\n\nApproach\n\nDescribe how you are implementing the solutions. Include an animated GIF or screenshot if the change affects the UI (email documentation@wso2.com to review all UI text). Include a link to a Markdown file or Google doc if the feature write-up is too long to paste here.\n\nUser stories\n\nSummary of user stories addressed by this change>\n\nRelease note\n\nBrief description of the new feature or bug fix as it will appear in the release notes\n\nDocumentation\n\nLink(s) to product documentation that addresses the changes of this PR. If no doc impact, enter \u201cN/A\u201d plus brief explanation of why there\u2019s no doc impact\n\nTraining\n\nLink to the PR for changes to the training content in https://github.com/wso2/WSO2-Training, if applicable\n\nCertification\n\nType \u201cSent\u201d when you have provided new/updated certification questions, plus four answers for each question (correct answer highlighted in bold), based on this change. Certification questions/answers should be sent to certification@wso2.com and NOT pasted in this PR. If there is no impact on certification exams, type \u201cN/A\u201d and explain why.\n\nMarketing\n\nLink to drafts of marketing content that will describe and promote this feature, including product page changes, technical articles, blog posts, videos, etc., if applicable\n\nAutomation tests\n\nUnit tests\n\nCode coverage information\n\n\nIntegration tests\n\nDetails about the test cases and coverage\n\n\n\nSecurity checks\n\nFollowed secure coding standards in http://wso2.com/technical-reports/wso2-secure-engineering-guidelines? yes/no\nRan FindSecurityBugs plugin and verified report? yes/no\nConfirmed that this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets? yes/no\n\nSamples\n\nProvide high-level details about the samples related to this feature\n\nRelated PRs\n\nList any other related PRs\n\nMigrations (if applicable)\n\nDescribe migration steps and platforms on which migration has been tested\n\nTest environment\n\nList all JDK versions, operating systems, databases, and browser/versions on which this feature/fix was tested\n\nLearning\n\nDescribe the research phase and any blog posts, patterns, libraries, or add-ons you used to solve the problem.", "createdAt": "2020-03-20T16:39:22Z", "url": "https://github.com/wso2/carbon-kernel/pull/2639", "merged": true, "mergeCommit": {"oid": "02b694047b23198c21b39541b8a1e8b7ba706ecc"}, "closed": true, "closedAt": "2020-03-24T11:53:52Z", "author": {"login": "denuwanthi"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcPjL1agH2gAyMzkxNjMyMzIwOjJkMzljMzRhNTdlNzk1ZGE5OGViMGU3ZjNiNTJhNWYxOWQzZmI5NzM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQxkKVgFqTM4MDIzNjIxNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/2d39c34a57e795da98eb0e7f3b52a5f19d3fb973", "committedDate": "2020-03-20T16:34:33Z", "message": "Add support for symmetric decryption for secondary userstore password"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTA4NzA2", "url": "https://github.com/wso2/carbon-kernel/pull/2639#pullrequestreview-379108706", "createdAt": "2020-03-23T03:08:02Z", "commit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowODowMlrOF51tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowODowMlrOF51tww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MzIxOQ==", "bodyText": "what will happen if cipherTransformation is null. Algorithm will be null and default on will be resolved from crypto service ?", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396193219", "createdAt": "2020-03-23T03:08:02Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,56 +434,53 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n-        }\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n \n-        if(cipherTransformation != null) {\n+        if (cipherTransformation != null) {\n             // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+            CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n             if (cipherHolder != null) {\n                 // cipher with meta data.\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n                 }\n-                keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n+                algorithm = cipherHolder.getTransformation();\n                 cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n             } else {\n                 // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n                 // carbon.properties file\n-                keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n+                algorithm = cipherTransformation;\n+            }\n+        }\n+        if (cipherTextBytes.length == 0) {\n+            decryptedValue = StringUtils.EMPTY.getBytes();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n             }\n         } else {\n-            // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n-            // hence RSA is considered as default transformation\n-            keyStoreCipher = Cipher.getInstance(\"RSA\", \"BC\");\n+            decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MTA4OTYx", "url": "https://github.com/wso2/carbon-kernel/pull/2639#pullrequestreview-379108961", "createdAt": "2020-03-23T03:09:01Z", "commit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowOTowMVrOF51uhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowOTowMVrOF51uhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MzQxNA==", "bodyText": "Why we needed another meta data holder defined here.", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396193414", "createdAt": "2020-03-23T03:09:01Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -494,7 +495,7 @@ private CipherHolder cipherTextToCipherHolder(byte[] cipherText) {\n      * IMPORTANT: this is copy of org.wso2.carbon.core.util.CipherHolder, what ever changes applied here need to update\n      *              on above\n      */\n-    private class CipherHolder {\n+    private class CipherMetaDataHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "originalPosition": 113}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39950c6a8d10d5c5723a817db9e0a05d0662761b", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/39950c6a8d10d5c5723a817db9e0a05d0662761b", "committedDate": "2020-03-23T05:57:41Z", "message": "Use CipherMetaDataHoldder from crypto service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c552f4e0a8e6592ffdb60fce6d4e805ab34291c3", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/c552f4e0a8e6592ffdb60fce6d4e805ab34291c3", "committedDate": "2020-03-23T05:59:24Z", "message": "Add new data holder class to store crypto service from osgi startup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7a63b1e6a18fdce656857af50c7c63d0ee913c87", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/7a63b1e6a18fdce656857af50c7c63d0ee913c87", "committedDate": "2020-03-23T16:07:04Z", "message": "Refactor code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/d1672ec3ada1d4584d021a17d16d8e76bfa01f9a", "committedDate": "2020-03-23T16:17:31Z", "message": "Remove commented out code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDM5MTYx", "url": "https://github.com/wso2/carbon-kernel/pull/2639#pullrequestreview-380039161", "createdAt": "2020-03-24T06:57:51Z", "commit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjo1Nzo1MlrOF6i_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzowMToxOVrOF6jEgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzNTExOQ==", "bodyText": "Shall we remove the unnecessary new lines here?", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396935119", "createdAt": "2020-03-24T06:57:52Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/internal/UserStoreMgtDSComponent.java", "diffHunk": "@@ -171,6 +173,18 @@ protected void setClaimManagerFactory(ClaimManagerFactory claimManagerFactory) {\n \n     }\n \n+    @Reference(name = \"carbonCryptoService\", cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC, unbind = \"unsetCarbonCryptoService\")\n+    protected void setCarbonCryptoService(CryptoService cryptoService){\n+        userStoreMgtDataHolder.setCryptoService(cryptoService);\n+    }\n+\n+    protected void unsetCarbonCryptoService(CryptoService cryptoService){\n+        userStoreMgtDataHolder.setCryptoService(null);\n+    }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzNjMyMw==", "bodyText": "Shall we provide a debug log as well with this information?", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396936323", "createdAt": "2020-03-24T07:01:19Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,139 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }\n+            if (cipherTextBytes.length == 0) {\n+                decryptedValue = StringUtils.EMPTY.getBytes();\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n                 }\n-                keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n-                cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n             } else {\n-                // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n-                // carbon.properties file\n-                keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n+                decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);\n             }\n-        } else {\n-            // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n-            // hence RSA is considered as default transformation\n-            keyStoreCipher = Cipher.getInstance(\"RSA\", \"BC\");\n-        }\n-        keyStoreCipher.init(Cipher.DECRYPT_MODE, privateKey);\n-        return new String(keyStoreCipher.doFinal(cipherTextBytes), Charset.defaultCharset());\n-    }\n+            return new String(decryptedValue);\n \n-    /**\n-     * Function to convert cipher byte array to {@link CipherHolder}.\n-     *\n-     * @param cipherText cipher text as a byte array\n-     * @return if cipher text is not a cipher with meta data\n-     */\n-    private CipherHolder cipherTextToCipherHolder(byte[] cipherText) {\n+        } else {\n+            return decryptWithPrimaryKeyStore(propValue);\n \n-        String cipherStr = new String(cipherText, Charset.defaultCharset());\n-        try {\n-            return gson.fromJson(cipherStr, CipherHolder.class);\n-        } catch (JsonSyntaxException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Deserialization failed since cipher string is not representing cipher with metadata\");\n-            }\n-            return null;\n         }\n-    }\n \n-    /**\n-     * Holds encrypted cipher with related metadata.\n-     *\n-     * IMPORTANT: this is copy of org.wso2.carbon.core.util.CipherHolder, what ever changes applied here need to update\n-     *              on above\n-     */\n-    private class CipherHolder {\n-\n-        // Base64 encoded ciphertext.\n-        private String c;\n+    }\n \n-        // Transformation used for encryption, default is \"RSA\".\n-        private String t = \"RSA\";\n+    private String decryptWithPrimaryKeyStore(String propValue) throws CryptoException {\n \n-        // Thumbprint of the certificate.\n-        private String tp;\n+        Cipher keyStoreCipher = null;\n+        String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n+        byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        byte[] plainTextBytes = new byte[0];\n \n-        // Digest used to generate certificate thumbprint.\n-        private String tpd;\n+        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n+        if (privateKey == null) {\n+            throw new CryptoException(\n+                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+        }\n \n+        try {\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n \n-        public String getTransformation() {\n-            return t;\n-        }\n+                    keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n \n-        public void setTransformation(String transformation) {\n-            this.t = transformation;\n-        }\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n \n-        public String getCipherText() {\n-            return c;\n-        }\n+                    keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n \n-        public byte[] getCipherBase64Decoded() {\n-            return Base64.decode(c);\n-        }\n+                }\n+            } else {\n+                // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n+                // hence RSA is considered as default transformation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "originalPosition": 240}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8d1a059d01c4d955897f1834cc148dff8df0c730", "committedDate": "2020-03-24T07:48:22Z", "message": "Fix PR comments to add debug logs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDg4OTg4", "url": "https://github.com/wso2/carbon-kernel/pull/2639#pullrequestreview-380088988", "createdAt": "2020-03-24T08:30:35Z", "commit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMDozNVrOF6lgCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMDozNVrOF6lgCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NjEzOA==", "bodyText": "If caron.properties is not present can 'cipherTransformation' be null\nAnd if so what happens.", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396976138", "createdAt": "2020-03-24T08:30:35Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 129}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMDkwOTc3", "url": "https://github.com/wso2/carbon-kernel/pull/2639#pullrequestreview-380090977", "createdAt": "2020-03-24T08:33:27Z", "commit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMzoyOFrOF6lmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMzoyOFrOF6lmOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NzcyMg==", "bodyText": "Doesn't this skip the case where internal key store is not configured and symmetric is not enabled, which should switch to primary key store", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396977722", "createdAt": "2020-03-24T08:33:28Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 112}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjM2MjE3", "url": "https://github.com/wso2/carbon-kernel/pull/2639#pullrequestreview-380236217", "createdAt": "2020-03-24T11:53:43Z", "commit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2096, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}