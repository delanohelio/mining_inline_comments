{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDkwOTYz", "number": 2705, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozMToyNVrOEHCa1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozMjozN1rOEqzObg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODE1MTI2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/jdbc/JDBCUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwODozMToyNVrOGmMyAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDowNzozNVrOGvKk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwODQ4Mw==", "bodyText": "Can you create an issue to track this requirement?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r442708483", "createdAt": "2020-06-19T08:31:25Z", "author": {"login": "madurangasiriwardena"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/jdbc/JDBCUserStoreManager.java", "diffHunk": "@@ -2229,6 +2230,15 @@ public void doSetUserClaimValues(String userName, Map<String, String> claims, St\n         super.doSetUserClaimValues(userName, claims, profileName);\n     }\n \n+    @Override\n+    public void doSetUserClaimValues(String userName, Map<String, List<String>> multiValuedClaimsToAdd,\n+                                           Map<String, List<String>> multiValuedClaimsToDelete,\n+                                           Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                           String profileName) throws UserStoreException, NotImplementedException {\n+\n+        throw new NotImplementedException(\"This functionality is not yet implemented for JDBC userstores.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEwOTU1OQ==", "bodyText": "created the git issue : wso2/product-is#8659", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r452109559", "createdAt": "2020-07-09T10:07:35Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/jdbc/JDBCUserStoreManager.java", "diffHunk": "@@ -2229,6 +2230,15 @@ public void doSetUserClaimValues(String userName, Map<String, String> claims, St\n         super.doSetUserClaimValues(userName, claims, profileName);\n     }\n \n+    @Override\n+    public void doSetUserClaimValues(String userName, Map<String, List<String>> multiValuedClaimsToAdd,\n+                                           Map<String, List<String>> multiValuedClaimsToDelete,\n+                                           Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                           String profileName) throws UserStoreException, NotImplementedException {\n+\n+        throw new NotImplementedException(\"This functionality is not yet implemented for JDBC userstores.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjcwODQ4Mw=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjYzMjA0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMTo1ODozOFrOG6amdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0OTowNlrOHclgkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjQyMA==", "bodyText": "Shall we add this as a default method?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463906420", "createdAt": "2020-08-01T01:58:38Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -236,6 +236,23 @@ void setUserClaimValueWithID(String userID, String claimURI, String claimValue,\n     void setUserClaimValuesWithID(String userID, Map<String, String> claims, String profileName)\n             throws UserStoreException;\n \n+    /**\n+     * Set user claim values.\n+     *\n+     * @param userID                           UserID of the user.\n+     * @param oldClaimMap                      A map of existing claim URIs of the user against values.\n+     * @param multiValuedClaimsToAdd           A map of multi-valued claim URIs against values to add.\n+     * @param multiValuedClaimsToDelete        A map of multi-valued claim URIs against values to delete.\n+     * @param claimsExcludingMultiValuedClaims A map of non-multi-valued claim URIs against values to replace.\n+     * @param profileName                      The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException Thrown if an error occurred in userstore operation.\n+     */\n+    void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNjcyMQ==", "bodyText": "addressed in fb430db", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499736721", "createdAt": "2020-10-05T16:49:06Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -236,6 +236,23 @@ void setUserClaimValueWithID(String userID, String claimURI, String claimValue,\n     void setUserClaimValuesWithID(String userID, Map<String, String> claims, String profileName)\n             throws UserStoreException;\n \n+    /**\n+     * Set user claim values.\n+     *\n+     * @param userID                           UserID of the user.\n+     * @param oldClaimMap                      A map of existing claim URIs of the user against values.\n+     * @param multiValuedClaimsToAdd           A map of multi-valued claim URIs against values to add.\n+     * @param multiValuedClaimsToDelete        A map of multi-valued claim URIs against values to delete.\n+     * @param claimsExcludingMultiValuedClaims A map of non-multi-valued claim URIs against values to replace.\n+     * @param profileName                      The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException Thrown if an error occurred in userstore operation.\n+     */\n+    void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjQyMA=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjYzNDMwOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjowMTowN1rOG6anfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzoxMVrOHdRouQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjY4Ng==", "bodyText": "In my opinion, we do not need this log. WDYT?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463906686", "createdAt": "2020-08-01T02:01:07Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -595,6 +595,29 @@ protected void doSetUserAttributes(String userName, Map<String, String> processe\n         throw new NotImplementedException(\"doSetUserAttributes operation is not implemented in: \" + this.getClass());\n     }\n \n+    /**\n+     * Set the user attributes of a user.\n+     *\n+     * @param userName                 UserName of the user.\n+     * @param claimAttributesToAdd     A processed map of userstore attribute values to add.\n+     * @param claimAttributesToDelete  A processed map of userstore attribute values to delte.\n+     * @param claimAttributesToReplace A processed map of userstore attribute values to replace.\n+     * @param profileName              The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException      Thrown if the userstore operation fails.\n+     * @throws NotImplementedException Thrown if the operation is not implemented in the underlying userstore.\n+     */\n+    protected void doSetUserAttributes(String userName, Map<String, List<String>> claimAttributesToAdd,\n+                                             Map<String, List<String>> claimAttributesToDelete,\n+                                             Map<String, List<String>> claimAttributesToReplace, String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTcwNQ==", "bodyText": "fixed in 0b9e061", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r500459705", "createdAt": "2020-10-06T17:07:11Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -595,6 +595,29 @@ protected void doSetUserAttributes(String userName, Map<String, String> processe\n         throw new NotImplementedException(\"doSetUserAttributes operation is not implemented in: \" + this.getClass());\n     }\n \n+    /**\n+     * Set the user attributes of a user.\n+     *\n+     * @param userName                 UserName of the user.\n+     * @param claimAttributesToAdd     A processed map of userstore attribute values to add.\n+     * @param claimAttributesToDelete  A processed map of userstore attribute values to delte.\n+     * @param claimAttributesToReplace A processed map of userstore attribute values to replace.\n+     * @param profileName              The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException      Thrown if the userstore operation fails.\n+     * @throws NotImplementedException Thrown if the operation is not implemented in the underlying userstore.\n+     */\n+    protected void doSetUserAttributes(String userName, Map<String, List<String>> claimAttributesToAdd,\n+                                             Map<String, List<String>> claimAttributesToDelete,\n+                                             Map<String, List<String>> claimAttributesToReplace, String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjY4Ng=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjYzNDg1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjowMTo0OFrOG6anvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNzowNlrOHdRofA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjc1MQ==", "bodyText": "In my opinion, we do not need this log. WDYT?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463906751", "createdAt": "2020-08-01T02:01:48Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -615,6 +638,29 @@ protected void doSetUserAttributesWithID(String userID,\n                 + this.getClass());\n     }\n \n+    /**\n+     * Set the user attributes of a user.\n+     *\n+     * @param userID                   UserID of the user.\n+     * @param claimAttributesToAdd     A processed map of userstore attribute values to add.\n+     * @param claimAttributesToDelete  A processed map of userstore attribute values to delete.\n+     * @param claimAttributesToReplace A processed map of userstore attribute values to replace.\n+     * @param profileName              The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException      Thrown if the userstore operation fails.\n+     * @throws NotImplementedException Thrown if the operation is not implemented in the underlying userstore.\n+     */\n+    protected void doSetUserAttributesWithID(String userID, Map<String, List<String>> claimAttributesToAdd,\n+                                             Map<String, List<String>> claimAttributesToDelete,\n+                                             Map<String, List<String>> claimAttributesToReplace, String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTY0NA==", "bodyText": "fixed in 0b9e061", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r500459644", "createdAt": "2020-10-06T17:07:06Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -615,6 +638,29 @@ protected void doSetUserAttributesWithID(String userID,\n                 + this.getClass());\n     }\n \n+    /**\n+     * Set the user attributes of a user.\n+     *\n+     * @param userID                   UserID of the user.\n+     * @param claimAttributesToAdd     A processed map of userstore attribute values to add.\n+     * @param claimAttributesToDelete  A processed map of userstore attribute values to delete.\n+     * @param claimAttributesToReplace A processed map of userstore attribute values to replace.\n+     * @param profileName              The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException      Thrown if the userstore operation fails.\n+     * @throws NotImplementedException Thrown if the operation is not implemented in the underlying userstore.\n+     */\n+    protected void doSetUserAttributesWithID(String userID, Map<String, List<String>> claimAttributesToAdd,\n+                                             Map<String, List<String>> claimAttributesToDelete,\n+                                             Map<String, List<String>> claimAttributesToReplace, String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        if (log.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjc1MQ=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjYzNTM2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjowMjozNVrOG6an_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0ODo1OFrOHclgRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjgxMg==", "bodyText": "Can we check for StringUtils.isBlank?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463906812", "createdAt": "2020-08-01T02:02:35Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -667,6 +713,45 @@ public void doSetUserClaimValues(String userName, Map<String, String> claims,\n         doSetUserAttributes(userName, claimAttributeValueMapForPersist, profileName);\n     }\n \n+    /**\n+     * Set many user claim values by treating multi-valued claims independently from simple claims.\n+     *\n+     * @param userName                         User's username.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values to be added.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values to be deleted.\n+     * @param claimsExcludingMultiValuedClaims Map of claim URIs excluding multi-valued claims against values\n+     *                                         to be modified.\n+     * @param profileName                      The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException      An unexpected exception has occurred.\n+     * @throws NotImplementedException Functionality is not implemented exception.\n+     */\n+    protected void doSetUserClaimValues(String userName, Map<String, List<String>> multiValuedClaimsToAdd,\n+                                        Map<String, List<String>> multiValuedClaimsToDelete,\n+                                        Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                        String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        if (profileName == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNjY0Nw==", "bodyText": "addressed in fb430db", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499736647", "createdAt": "2020-10-05T16:48:58Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -667,6 +713,45 @@ public void doSetUserClaimValues(String userName, Map<String, String> claims,\n         doSetUserAttributes(userName, claimAttributeValueMapForPersist, profileName);\n     }\n \n+    /**\n+     * Set many user claim values by treating multi-valued claims independently from simple claims.\n+     *\n+     * @param userName                         User's username.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values to be added.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values to be deleted.\n+     * @param claimsExcludingMultiValuedClaims Map of claim URIs excluding multi-valued claims against values\n+     *                                         to be modified.\n+     * @param profileName                      The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException      An unexpected exception has occurred.\n+     * @throws NotImplementedException Functionality is not implemented exception.\n+     */\n+    protected void doSetUserClaimValues(String userName, Map<String, List<String>> multiValuedClaimsToAdd,\n+                                        Map<String, List<String>> multiValuedClaimsToDelete,\n+                                        Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                        String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        if (profileName == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNjgxMg=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjYzNzUxOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjowNToxOVrOG6apAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0ODo1MlrOHclgCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzA3Mg==", "bodyText": "Shall we remove these extra new lines?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463907072", "createdAt": "2020-08-01T02:05:19Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -698,6 +783,30 @@ public void doSetUserClaimValues(String userName, Map<String, String> claims,\n         return userStoreAttributeValueMap;\n     }\n \n+    private Map<String, List<String>> resolveUserStoreAttributeValueMaps(String userIdentifier,\n+                                                                         Map<String, List<String>> claims)\n+            throws UserStoreException {\n+\n+        Map<String, List<String>> userStoreAttributeValueMap = new HashMap<>();\n+\n+        try {\n+            for (Map.Entry<String, List<String>> claimEntry : claims.entrySet()) {\n+                String claimURI = claimEntry.getKey();\n+                String attributeName = getClaimAtrribute(claimURI, userIdentifier, null);\n+                userStoreAttributeValueMap.put(attributeName, claimEntry.getValue());\n+            }\n+        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            String errorMessage = \"Error occurred while getting claim attribute for user : \" + userIdentifier;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNjU4NA==", "bodyText": "addressed in fb430db", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499736584", "createdAt": "2020-10-05T16:48:52Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -698,6 +783,30 @@ public void doSetUserClaimValues(String userName, Map<String, String> claims,\n         return userStoreAttributeValueMap;\n     }\n \n+    private Map<String, List<String>> resolveUserStoreAttributeValueMaps(String userIdentifier,\n+                                                                         Map<String, List<String>> claims)\n+            throws UserStoreException {\n+\n+        Map<String, List<String>> userStoreAttributeValueMap = new HashMap<>();\n+\n+        try {\n+            for (Map.Entry<String, List<String>> claimEntry : claims.entrySet()) {\n+                String claimURI = claimEntry.getKey();\n+                String attributeName = getClaimAtrribute(claimURI, userIdentifier, null);\n+                userStoreAttributeValueMap.put(attributeName, claimEntry.getValue());\n+            }\n+        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            String errorMessage = \"Error occurred while getting claim attribute for user : \" + userIdentifier;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzA3Mg=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjY0MDI3OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjowOToyOFrOG6aqRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0ODo0OFrOHclf2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzM5OQ==", "bodyText": "Shall we remove this new line since its related to the of condition?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463907399", "createdAt": "2020-08-01T02:09:28Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -12417,6 +12561,101 @@ public final void setUserClaimValuesWithID(String userID, Map<String, String> cl\n \n     }\n \n+    @Override\n+    public final void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,\n+                                               Map<String, List<String>> multiValuedClaimsToAdd,\n+                                               Map<String, List<String>> multiValuedClaimsToDelete,\n+                                               Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                               String profileName) throws UserStoreException {\n+\n+        UserStore userStore = getUserStoreWithID(userID);\n+        if (userStore.isRecurssive()) {\n+            ((AbstractUserStoreManager) userStore.getUserStoreManager())\n+                    .setUserClaimValuesWithID(userStore.getDomainFreeUserId(), oldClaimMap, multiValuedClaimsToAdd,\n+                            multiValuedClaimsToDelete, claimsExcludingMultiValuedClaims, profileName);\n+            return;\n+        }\n+        Map<String, String> claims =\n+                getModifiedClaims(oldClaimMap, multiValuedClaimsToAdd, multiValuedClaimsToDelete,\n+                        claimsExcludingMultiValuedClaims);\n+\n+        // #################### Domain Name Free Zone Starts Here ################################\n+\n+        boolean isUniqueIdEnabled = isUniqueUserIdEnabledInUserStore(userStore);\n+        boolean isUserExists;\n+        if (isUniqueIdEnabled) {\n+            isUserExists = doCheckExistingUserWithID(userID);\n+        } else {\n+            String userNameFromUserID = doGetUserNameFromUserID(userID);\n+            isUserExists = userNameFromUserID != null;\n+        }\n+\n+        if (!isUserExists) {\n+            String errorMessage = String.format(ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), userID,\n+                    realmConfig.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n+            String errorCode = ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();\n+            handleSetUserClaimValuesFailureWithID(errorCode, errorMessage, userID, claims, profileName);\n+            throw new UserStoreException(errorCode + \" - \" + errorMessage);\n+        }\n+\n+        // #################### <Pre Listeners> #####################################################\n+        invokeDoPreSetUserClaimsWithIDListeners(userID, claims, profileName);\n+        // #################### </Pre Listeners> #####################################################\n+\n+        // If user store is readonly this method should not get invoked with non empty claim set.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 243}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNjUzOQ==", "bodyText": "addressed in fb430db", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499736539", "createdAt": "2020-10-05T16:48:48Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -12417,6 +12561,101 @@ public final void setUserClaimValuesWithID(String userID, Map<String, String> cl\n \n     }\n \n+    @Override\n+    public final void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,\n+                                               Map<String, List<String>> multiValuedClaimsToAdd,\n+                                               Map<String, List<String>> multiValuedClaimsToDelete,\n+                                               Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                               String profileName) throws UserStoreException {\n+\n+        UserStore userStore = getUserStoreWithID(userID);\n+        if (userStore.isRecurssive()) {\n+            ((AbstractUserStoreManager) userStore.getUserStoreManager())\n+                    .setUserClaimValuesWithID(userStore.getDomainFreeUserId(), oldClaimMap, multiValuedClaimsToAdd,\n+                            multiValuedClaimsToDelete, claimsExcludingMultiValuedClaims, profileName);\n+            return;\n+        }\n+        Map<String, String> claims =\n+                getModifiedClaims(oldClaimMap, multiValuedClaimsToAdd, multiValuedClaimsToDelete,\n+                        claimsExcludingMultiValuedClaims);\n+\n+        // #################### Domain Name Free Zone Starts Here ################################\n+\n+        boolean isUniqueIdEnabled = isUniqueUserIdEnabledInUserStore(userStore);\n+        boolean isUserExists;\n+        if (isUniqueIdEnabled) {\n+            isUserExists = doCheckExistingUserWithID(userID);\n+        } else {\n+            String userNameFromUserID = doGetUserNameFromUserID(userID);\n+            isUserExists = userNameFromUserID != null;\n+        }\n+\n+        if (!isUserExists) {\n+            String errorMessage = String.format(ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), userID,\n+                    realmConfig.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n+            String errorCode = ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();\n+            handleSetUserClaimValuesFailureWithID(errorCode, errorMessage, userID, claims, profileName);\n+            throw new UserStoreException(errorCode + \" - \" + errorMessage);\n+        }\n+\n+        // #################### <Pre Listeners> #####################################################\n+        invokeDoPreSetUserClaimsWithIDListeners(userID, claims, profileName);\n+        // #################### </Pre Listeners> #####################################################\n+\n+        // If user store is readonly this method should not get invoked with non empty claim set.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzM5OQ=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 243}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjY0MjQ3OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjoxMTo0NlrOG6arUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozMDo1NFrOHck3qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzY2NQ==", "bodyText": "Is this our existing logic? dont we have to check the userstore before we invoke the pre listeners?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463907665", "createdAt": "2020-08-01T02:11:46Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -12417,6 +12561,101 @@ public final void setUserClaimValuesWithID(String userID, Map<String, String> cl\n \n     }\n \n+    @Override\n+    public final void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,\n+                                               Map<String, List<String>> multiValuedClaimsToAdd,\n+                                               Map<String, List<String>> multiValuedClaimsToDelete,\n+                                               Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                               String profileName) throws UserStoreException {\n+\n+        UserStore userStore = getUserStoreWithID(userID);\n+        if (userStore.isRecurssive()) {\n+            ((AbstractUserStoreManager) userStore.getUserStoreManager())\n+                    .setUserClaimValuesWithID(userStore.getDomainFreeUserId(), oldClaimMap, multiValuedClaimsToAdd,\n+                            multiValuedClaimsToDelete, claimsExcludingMultiValuedClaims, profileName);\n+            return;\n+        }\n+        Map<String, String> claims =\n+                getModifiedClaims(oldClaimMap, multiValuedClaimsToAdd, multiValuedClaimsToDelete,\n+                        claimsExcludingMultiValuedClaims);\n+\n+        // #################### Domain Name Free Zone Starts Here ################################\n+\n+        boolean isUniqueIdEnabled = isUniqueUserIdEnabledInUserStore(userStore);\n+        boolean isUserExists;\n+        if (isUniqueIdEnabled) {\n+            isUserExists = doCheckExistingUserWithID(userID);\n+        } else {\n+            String userNameFromUserID = doGetUserNameFromUserID(userID);\n+            isUserExists = userNameFromUserID != null;\n+        }\n+\n+        if (!isUserExists) {\n+            String errorMessage = String.format(ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), userID,\n+                    realmConfig.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n+            String errorCode = ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();\n+            handleSetUserClaimValuesFailureWithID(errorCode, errorMessage, userID, claims, profileName);\n+            throw new UserStoreException(errorCode + \" - \" + errorMessage);\n+        }\n+\n+        // #################### <Pre Listeners> #####################################################\n+        invokeDoPreSetUserClaimsWithIDListeners(userID, claims, profileName);\n+        // #################### </Pre Listeners> #####################################################\n+\n+        // If user store is readonly this method should not get invoked with non empty claim set.\n+\n+        if (isReadOnly() && !claims.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 244}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyNjI1MA==", "bodyText": "yes, this is an existing logic.", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499726250", "createdAt": "2020-10-05T16:30:54Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -12417,6 +12561,101 @@ public final void setUserClaimValuesWithID(String userID, Map<String, String> cl\n \n     }\n \n+    @Override\n+    public final void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,\n+                                               Map<String, List<String>> multiValuedClaimsToAdd,\n+                                               Map<String, List<String>> multiValuedClaimsToDelete,\n+                                               Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                               String profileName) throws UserStoreException {\n+\n+        UserStore userStore = getUserStoreWithID(userID);\n+        if (userStore.isRecurssive()) {\n+            ((AbstractUserStoreManager) userStore.getUserStoreManager())\n+                    .setUserClaimValuesWithID(userStore.getDomainFreeUserId(), oldClaimMap, multiValuedClaimsToAdd,\n+                            multiValuedClaimsToDelete, claimsExcludingMultiValuedClaims, profileName);\n+            return;\n+        }\n+        Map<String, String> claims =\n+                getModifiedClaims(oldClaimMap, multiValuedClaimsToAdd, multiValuedClaimsToDelete,\n+                        claimsExcludingMultiValuedClaims);\n+\n+        // #################### Domain Name Free Zone Starts Here ################################\n+\n+        boolean isUniqueIdEnabled = isUniqueUserIdEnabledInUserStore(userStore);\n+        boolean isUserExists;\n+        if (isUniqueIdEnabled) {\n+            isUserExists = doCheckExistingUserWithID(userID);\n+        } else {\n+            String userNameFromUserID = doGetUserNameFromUserID(userID);\n+            isUserExists = userNameFromUserID != null;\n+        }\n+\n+        if (!isUserExists) {\n+            String errorMessage = String.format(ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), userID,\n+                    realmConfig.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n+            String errorCode = ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();\n+            handleSetUserClaimValuesFailureWithID(errorCode, errorMessage, userID, claims, profileName);\n+            throw new UserStoreException(errorCode + \" - \" + errorMessage);\n+        }\n+\n+        // #################### <Pre Listeners> #####################################################\n+        invokeDoPreSetUserClaimsWithIDListeners(userID, claims, profileName);\n+        // #################### </Pre Listeners> #####################################################\n+\n+        // If user store is readonly this method should not get invoked with non empty claim set.\n+\n+        if (isReadOnly() && !claims.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzY2NQ=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 244}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NjY0MzI2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQwMjoxMzoxOFrOG6artg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozNjowNFrOHclDJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzc2Ng==", "bodyText": "Can we use MapUtils here?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463907766", "createdAt": "2020-08-01T02:13:18Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -12417,6 +12561,101 @@ public final void setUserClaimValuesWithID(String userID, Map<String, String> cl\n \n     }\n \n+    @Override\n+    public final void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,\n+                                               Map<String, List<String>> multiValuedClaimsToAdd,\n+                                               Map<String, List<String>> multiValuedClaimsToDelete,\n+                                               Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                               String profileName) throws UserStoreException {\n+\n+        UserStore userStore = getUserStoreWithID(userID);\n+        if (userStore.isRecurssive()) {\n+            ((AbstractUserStoreManager) userStore.getUserStoreManager())\n+                    .setUserClaimValuesWithID(userStore.getDomainFreeUserId(), oldClaimMap, multiValuedClaimsToAdd,\n+                            multiValuedClaimsToDelete, claimsExcludingMultiValuedClaims, profileName);\n+            return;\n+        }\n+        Map<String, String> claims =\n+                getModifiedClaims(oldClaimMap, multiValuedClaimsToAdd, multiValuedClaimsToDelete,\n+                        claimsExcludingMultiValuedClaims);\n+\n+        // #################### Domain Name Free Zone Starts Here ################################\n+\n+        boolean isUniqueIdEnabled = isUniqueUserIdEnabledInUserStore(userStore);\n+        boolean isUserExists;\n+        if (isUniqueIdEnabled) {\n+            isUserExists = doCheckExistingUserWithID(userID);\n+        } else {\n+            String userNameFromUserID = doGetUserNameFromUserID(userID);\n+            isUserExists = userNameFromUserID != null;\n+        }\n+\n+        if (!isUserExists) {\n+            String errorMessage = String.format(ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), userID,\n+                    realmConfig.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n+            String errorCode = ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();\n+            handleSetUserClaimValuesFailureWithID(errorCode, errorMessage, userID, claims, profileName);\n+            throw new UserStoreException(errorCode + \" - \" + errorMessage);\n+        }\n+\n+        // #################### <Pre Listeners> #####################################################\n+        invokeDoPreSetUserClaimsWithIDListeners(userID, claims, profileName);\n+        // #################### </Pre Listeners> #####################################################\n+\n+        // If user store is readonly this method should not get invoked with non empty claim set.\n+\n+        if (isReadOnly() && !claims.isEmpty()) {\n+            handleSetUserClaimValuesFailureWithID(ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(),\n+                    ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), userID, claims, profileName);\n+            throw new UserStoreException(ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());\n+        }\n+\n+        // Any additional simple claim modified due to pre listeners are taken into claimsExcludingMultiValuedClaims map.\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 255}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTcyOTE5MA==", "bodyText": "A null check is sufficient here due to the following for loop.\nwso2-support/carbon-kernel#984 (comment)", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499729190", "createdAt": "2020-10-05T16:36:04Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -12417,6 +12561,101 @@ public final void setUserClaimValuesWithID(String userID, Map<String, String> cl\n \n     }\n \n+    @Override\n+    public final void setUserClaimValuesWithID(String userID, Map<String, List<String>> oldClaimMap,\n+                                               Map<String, List<String>> multiValuedClaimsToAdd,\n+                                               Map<String, List<String>> multiValuedClaimsToDelete,\n+                                               Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                               String profileName) throws UserStoreException {\n+\n+        UserStore userStore = getUserStoreWithID(userID);\n+        if (userStore.isRecurssive()) {\n+            ((AbstractUserStoreManager) userStore.getUserStoreManager())\n+                    .setUserClaimValuesWithID(userStore.getDomainFreeUserId(), oldClaimMap, multiValuedClaimsToAdd,\n+                            multiValuedClaimsToDelete, claimsExcludingMultiValuedClaims, profileName);\n+            return;\n+        }\n+        Map<String, String> claims =\n+                getModifiedClaims(oldClaimMap, multiValuedClaimsToAdd, multiValuedClaimsToDelete,\n+                        claimsExcludingMultiValuedClaims);\n+\n+        // #################### Domain Name Free Zone Starts Here ################################\n+\n+        boolean isUniqueIdEnabled = isUniqueUserIdEnabledInUserStore(userStore);\n+        boolean isUserExists;\n+        if (isUniqueIdEnabled) {\n+            isUserExists = doCheckExistingUserWithID(userID);\n+        } else {\n+            String userNameFromUserID = doGetUserNameFromUserID(userID);\n+            isUserExists = userNameFromUserID != null;\n+        }\n+\n+        if (!isUserExists) {\n+            String errorMessage = String.format(ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getMessage(), userID,\n+                    realmConfig.getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME));\n+            String errorCode = ErrorMessages.ERROR_CODE_NON_EXISTING_USER.getCode();\n+            handleSetUserClaimValuesFailureWithID(errorCode, errorMessage, userID, claims, profileName);\n+            throw new UserStoreException(errorCode + \" - \" + errorMessage);\n+        }\n+\n+        // #################### <Pre Listeners> #####################################################\n+        invokeDoPreSetUserClaimsWithIDListeners(userID, claims, profileName);\n+        // #################### </Pre Listeners> #####################################################\n+\n+        // If user store is readonly this method should not get invoked with non empty claim set.\n+\n+        if (isReadOnly() && !claims.isEmpty()) {\n+            handleSetUserClaimValuesFailureWithID(ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getCode(),\n+                    ErrorMessages.ERROR_CODE_READONLY_USER_STORE.getMessage(), userID, claims, profileName);\n+            throw new UserStoreException(ErrorMessages.ERROR_CODE_READONLY_USER_STORE.toString());\n+        }\n+\n+        // Any additional simple claim modified due to pre listeners are taken into claimsExcludingMultiValuedClaims map.\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzkwNzc2Ng=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 255}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzAxNTM0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMTowNzozM1rOG6dWXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozNzozOVrOHclGnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MTQ1Mw==", "bodyText": "Can we use mapUtils?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463951453", "createdAt": "2020-08-01T11:07:33Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -14817,4 +15056,114 @@ private String getUserStoreDomainName(UserStoreManager userStoreManager) {\n         }\n         return domainNameProperty;\n     }\n+\n+    /**\n+     * Process and return the modifed claim values against claim URI. Add or remove specific claim values\n+     * against old claim values of multi-valued claims. Replace old claim values from modified values for\n+     * non multi-valued claims.\n+     *\n+     * @param oldClaimMap                      Map of claim URIs against old claim values of user.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values need to be added to\n+     *                                         old claim value.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values need to be removed from\n+     *                                         old claim value.\n+     * @param claimsExcludingMultiValuedClaims Map of non multi-valued claim URIs against modified values to be stred.\n+     * @return Map of claim URIs against the modified claim values.\n+     */\n+    private Map<String, String> getModifiedClaims(Map<String, List<String>> oldClaimMap,\n+                                                  Map<String, List<String>> multiValuedClaimsToAdd,\n+                                                  Map<String, List<String>> multiValuedClaimsToDelete,\n+                                                  Map<String, List<String>> claimsExcludingMultiValuedClaims) {\n+\n+        Map<String, String> claims = new HashMap<>();\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {\n+            for (String claimURI : claimsExcludingMultiValuedClaims.keySet()) {\n+                claims.put(claimURI,\n+                        StringUtils.join(claimsExcludingMultiValuedClaims.get(claimURI).iterator(), separator));\n+            }\n+        }\n+\n+        // Get modified claim values for multi-valued claims.\n+        if (multiValuedClaimsToAdd != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 335}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDA3Nw==", "bodyText": "A null check is sufficient here due to the following for loop.\nwso2-support/carbon-kernel#984 (comment)", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499730077", "createdAt": "2020-10-05T16:37:39Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -14817,4 +15056,114 @@ private String getUserStoreDomainName(UserStoreManager userStoreManager) {\n         }\n         return domainNameProperty;\n     }\n+\n+    /**\n+     * Process and return the modifed claim values against claim URI. Add or remove specific claim values\n+     * against old claim values of multi-valued claims. Replace old claim values from modified values for\n+     * non multi-valued claims.\n+     *\n+     * @param oldClaimMap                      Map of claim URIs against old claim values of user.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values need to be added to\n+     *                                         old claim value.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values need to be removed from\n+     *                                         old claim value.\n+     * @param claimsExcludingMultiValuedClaims Map of non multi-valued claim URIs against modified values to be stred.\n+     * @return Map of claim URIs against the modified claim values.\n+     */\n+    private Map<String, String> getModifiedClaims(Map<String, List<String>> oldClaimMap,\n+                                                  Map<String, List<String>> multiValuedClaimsToAdd,\n+                                                  Map<String, List<String>> multiValuedClaimsToDelete,\n+                                                  Map<String, List<String>> claimsExcludingMultiValuedClaims) {\n+\n+        Map<String, String> claims = new HashMap<>();\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {\n+            for (String claimURI : claimsExcludingMultiValuedClaims.keySet()) {\n+                claims.put(claimURI,\n+                        StringUtils.join(claimsExcludingMultiValuedClaims.get(claimURI).iterator(), separator));\n+            }\n+        }\n+\n+        // Get modified claim values for multi-valued claims.\n+        if (multiValuedClaimsToAdd != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MTQ1Mw=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 335}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzAxNTU4OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMTowNzo1OVrOG6dWew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjozNzozM1rOHclGYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MTQ4Mw==", "bodyText": "Can we use MapUtils?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463951483", "createdAt": "2020-08-01T11:07:59Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -14817,4 +15056,114 @@ private String getUserStoreDomainName(UserStoreManager userStoreManager) {\n         }\n         return domainNameProperty;\n     }\n+\n+    /**\n+     * Process and return the modifed claim values against claim URI. Add or remove specific claim values\n+     * against old claim values of multi-valued claims. Replace old claim values from modified values for\n+     * non multi-valued claims.\n+     *\n+     * @param oldClaimMap                      Map of claim URIs against old claim values of user.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values need to be added to\n+     *                                         old claim value.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values need to be removed from\n+     *                                         old claim value.\n+     * @param claimsExcludingMultiValuedClaims Map of non multi-valued claim URIs against modified values to be stred.\n+     * @return Map of claim URIs against the modified claim values.\n+     */\n+    private Map<String, String> getModifiedClaims(Map<String, List<String>> oldClaimMap,\n+                                                  Map<String, List<String>> multiValuedClaimsToAdd,\n+                                                  Map<String, List<String>> multiValuedClaimsToDelete,\n+                                                  Map<String, List<String>> claimsExcludingMultiValuedClaims) {\n+\n+        Map<String, String> claims = new HashMap<>();\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {\n+            for (String claimURI : claimsExcludingMultiValuedClaims.keySet()) {\n+                claims.put(claimURI,\n+                        StringUtils.join(claimsExcludingMultiValuedClaims.get(claimURI).iterator(), separator));\n+            }\n+        }\n+\n+        // Get modified claim values for multi-valued claims.\n+        if (multiValuedClaimsToAdd != null) {\n+            for (String claimURI : multiValuedClaimsToAdd.keySet()) {\n+                List<String> modifiedValue = new ArrayList<>();\n+                if (oldClaimMap.containsKey(claimURI)) {\n+                    modifiedValue.addAll(oldClaimMap.get(claimURI));\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                } else {\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                }\n+                claims.put(claimURI, StringUtils.join(modifiedValue.iterator(), separator));\n+            }\n+        }\n+        if (multiValuedClaimsToDelete != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 347}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczMDAxOQ==", "bodyText": "A null check is sufficient here due to the following for loop.\nwso2-support/carbon-kernel#984 (comment)", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499730019", "createdAt": "2020-10-05T16:37:33Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -14817,4 +15056,114 @@ private String getUserStoreDomainName(UserStoreManager userStoreManager) {\n         }\n         return domainNameProperty;\n     }\n+\n+    /**\n+     * Process and return the modifed claim values against claim URI. Add or remove specific claim values\n+     * against old claim values of multi-valued claims. Replace old claim values from modified values for\n+     * non multi-valued claims.\n+     *\n+     * @param oldClaimMap                      Map of claim URIs against old claim values of user.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values need to be added to\n+     *                                         old claim value.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values need to be removed from\n+     *                                         old claim value.\n+     * @param claimsExcludingMultiValuedClaims Map of non multi-valued claim URIs against modified values to be stred.\n+     * @return Map of claim URIs against the modified claim values.\n+     */\n+    private Map<String, String> getModifiedClaims(Map<String, List<String>> oldClaimMap,\n+                                                  Map<String, List<String>> multiValuedClaimsToAdd,\n+                                                  Map<String, List<String>> multiValuedClaimsToDelete,\n+                                                  Map<String, List<String>> claimsExcludingMultiValuedClaims) {\n+\n+        Map<String, String> claims = new HashMap<>();\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {\n+            for (String claimURI : claimsExcludingMultiValuedClaims.keySet()) {\n+                claims.put(claimURI,\n+                        StringUtils.join(claimsExcludingMultiValuedClaims.get(claimURI).iterator(), separator));\n+            }\n+        }\n+\n+        // Get modified claim values for multi-valued claims.\n+        if (multiValuedClaimsToAdd != null) {\n+            for (String claimURI : multiValuedClaimsToAdd.keySet()) {\n+                List<String> modifiedValue = new ArrayList<>();\n+                if (oldClaimMap.containsKey(claimURI)) {\n+                    modifiedValue.addAll(oldClaimMap.get(claimURI));\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                } else {\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                }\n+                claims.put(claimURI, StringUtils.join(modifiedValue.iterator(), separator));\n+            }\n+        }\n+        if (multiValuedClaimsToDelete != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MTQ4Mw=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NzAxNzcxOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadWriteLDAPUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMToxMToyNVrOG6dXdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNjo0ODozMFrOHclfQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MTczNQ==", "bodyText": "Shall we remove extra newlines?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r463951735", "createdAt": "2020-08-01T11:11:25Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadWriteLDAPUserStoreManager.java", "diffHunk": "@@ -917,6 +918,80 @@ protected void doSetUserAttributes(String userName, Map<String, String> processe\n         }\n     }\n \n+    protected void doSetUserAttributes(String userName, Map<String, List<String>> claimAttributesToAdd,\n+                                       Map<String, List<String>> claimAttributesToDelete,\n+                                       Map<String, List<String>> claimAttributesToReplace, String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        // Get the LDAP Directory context.\n+        DirContext dirContext = this.connectionSource.getContext();\n+        DirContext subDirContext = null;\n+        // Search the relevant user entry by user name.\n+        String userSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.USER_SEARCH_BASE);\n+        String userSearchFilter = realmConfig\n+                .getUserStoreProperty(LDAPConstants.USER_NAME_SEARCH_FILTER);\n+        // If user name contains domain name, remove domain name.\n+        userName = UserCoreUtil.removeDomainFromName(userName);\n+        userSearchFilter = userSearchFilter.replace(\"?\", escapeSpecialCharactersForFilter(userName));\n+\n+        SearchControls searchControls = new SearchControls();\n+        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+        searchControls.setReturningAttributes(null);\n+\n+        NamingEnumeration<SearchResult> returnedResultList = null;\n+        String returnedUserEntry = StringUtils.EMPTY;\n+\n+        try {\n+            subDirContext = (DirContext) dirContext.lookup(escapeDNForSearch(userSearchBase));\n+            returnedResultList = dirContext.search(escapeDNForSearch(userSearchBase), userSearchFilter, searchControls);\n+\n+            // Assume only one user is returned from the search.\n+            if (returnedResultList.hasMore()) {\n+                returnedUserEntry = returnedResultList.next().getName();\n+                handleLdapUserNameAttributeChanges(claimAttributesToReplace, subDirContext, returnedUserEntry);\n+            }\n+\n+        } catch (NamingException e) {\n+            String errorMessage = \"Results could not be retrieved from the directory context for user : \" + userName;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTczNjM4NA==", "bodyText": "addressed in fb430db", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r499736384", "createdAt": "2020-10-05T16:48:30Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadWriteLDAPUserStoreManager.java", "diffHunk": "@@ -917,6 +918,80 @@ protected void doSetUserAttributes(String userName, Map<String, String> processe\n         }\n     }\n \n+    protected void doSetUserAttributes(String userName, Map<String, List<String>> claimAttributesToAdd,\n+                                       Map<String, List<String>> claimAttributesToDelete,\n+                                       Map<String, List<String>> claimAttributesToReplace, String profileName)\n+            throws UserStoreException, NotImplementedException {\n+\n+        // Get the LDAP Directory context.\n+        DirContext dirContext = this.connectionSource.getContext();\n+        DirContext subDirContext = null;\n+        // Search the relevant user entry by user name.\n+        String userSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.USER_SEARCH_BASE);\n+        String userSearchFilter = realmConfig\n+                .getUserStoreProperty(LDAPConstants.USER_NAME_SEARCH_FILTER);\n+        // If user name contains domain name, remove domain name.\n+        userName = UserCoreUtil.removeDomainFromName(userName);\n+        userSearchFilter = userSearchFilter.replace(\"?\", escapeSpecialCharactersForFilter(userName));\n+\n+        SearchControls searchControls = new SearchControls();\n+        searchControls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+        searchControls.setReturningAttributes(null);\n+\n+        NamingEnumeration<SearchResult> returnedResultList = null;\n+        String returnedUserEntry = StringUtils.EMPTY;\n+\n+        try {\n+            subDirContext = (DirContext) dirContext.lookup(escapeDNForSearch(userSearchBase));\n+            returnedResultList = dirContext.search(escapeDNForSearch(userSearchBase), userSearchFilter, searchControls);\n+\n+            // Assume only one user is returned from the search.\n+            if (returnedResultList.hasMore()) {\n+                returnedUserEntry = returnedResultList.next().getName();\n+                handleLdapUserNameAttributeChanges(claimAttributesToReplace, subDirContext, returnedUserEntry);\n+            }\n+\n+        } catch (NamingException e) {\n+            String errorMessage = \"Results could not be retrieved from the directory context for user : \" + userName;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk1MTczNQ=="}, "originalCommit": {"oid": "852a23c9f3930e0b32df4c52255506f00e428c7e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzE0MjQ2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozMToyNlrOHdNlag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNjo1M1rOHdRoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MzMyMg==", "bodyText": "Shall we remove the additional newline here?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r500393322", "createdAt": "2020-10-06T15:31:26Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -15123,4 +15358,114 @@ private String getUserStoreDomainName(UserStoreManager userStoreManager) {\n         }\n         return domainNameProperty;\n     }\n+\n+    /**\n+     * Process and return the modifed claim values against claim URI. Add or remove specific claim values\n+     * against old claim values of multi-valued claims. Replace old claim values from modified values for\n+     * non multi-valued claims.\n+     *\n+     * @param oldClaimMap                      Map of claim URIs against old claim values of user.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values need to be added to\n+     *                                         old claim value.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values need to be removed from\n+     *                                         old claim value.\n+     * @param claimsExcludingMultiValuedClaims Map of non multi-valued claim URIs against modified values to be stred.\n+     * @return Map of claim URIs against the modified claim values.\n+     */\n+    private Map<String, String> getModifiedClaims(Map<String, List<String>> oldClaimMap,\n+                                                  Map<String, List<String>> multiValuedClaimsToAdd,\n+                                                  Map<String, List<String>> multiValuedClaimsToDelete,\n+                                                  Map<String, List<String>> claimsExcludingMultiValuedClaims) {\n+\n+        Map<String, String> claims = new HashMap<>();\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {\n+            for (String claimURI : claimsExcludingMultiValuedClaims.keySet()) {\n+                claims.put(claimURI,\n+                        StringUtils.join(claimsExcludingMultiValuedClaims.get(claimURI).iterator(), separator));\n+            }\n+        }\n+\n+        // Get modified claim values for multi-valued claims.\n+        if (multiValuedClaimsToAdd != null) {\n+            for (String claimURI : multiValuedClaimsToAdd.keySet()) {\n+                List<String> modifiedValue = new ArrayList<>();\n+                if (oldClaimMap.containsKey(claimURI)) {\n+                    modifiedValue.addAll(oldClaimMap.get(claimURI));\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                } else {\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                }\n+                claims.put(claimURI, StringUtils.join(modifiedValue.iterator(), separator));\n+            }\n+        }\n+        if (multiValuedClaimsToDelete != null) {\n+            for (String claimURI : multiValuedClaimsToDelete.keySet()) {\n+                List<String> values = null;\n+                if (claims.containsKey(claimURI)) {\n+                    values = Arrays.asList(claims.get(claimURI).split(separator));\n+                } else if (oldClaimMap.containsKey(claimURI)) {\n+                    values = oldClaimMap.get(claimURI);\n+                }\n+                if (!CollectionUtils.isEmpty(values)) {\n+                    List<String> modifiedValue =\n+                            (List<String>) CollectionUtils.subtract(values, multiValuedClaimsToDelete.get(claimURI));\n+                    claims.put(claimURI, StringUtils.join(modifiedValue.iterator(), separator));\n+                }\n+            }\n+        }\n+        return claims;\n+    }\n+\n+    private void invokeDoPreSetUserClaimsWithIDListeners(String userID, Map<String, String> claims, String profileName)\n+            throws UserStoreException {\n+\n+        try {\n+            for (UserOperationEventListener listener : UMListenerServiceComponent.getUserOperationEventListeners()) {\n+                if (!((AbstractUserOperationEventListener) listener)\n+                        .doPreSetUserClaimValuesWithID(userID, claims, profileName, this)) {\n+                    handleSetUserClaimValuesFailureWithID(\n+                            ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(),\n+                            String.format(ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(),\n+                                    UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), userID, claims,\n+                            profileName);\n+                    return;\n+                }\n+            }\n+        } catch (UserStoreException e) {\n+            handleSetUserClaimValuesFailureWithID(\n+                    ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(),\n+                    String.format(ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(),\n+                            e.getMessage()), userID, claims, profileName);\n+            throw e;\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2294363dedc5b782da00e295e7e75f500b9646"}, "originalPosition": 383}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTUzNw==", "bodyText": "fixed in 0b9e061", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r500459537", "createdAt": "2020-10-06T17:06:53Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -15123,4 +15358,114 @@ private String getUserStoreDomainName(UserStoreManager userStoreManager) {\n         }\n         return domainNameProperty;\n     }\n+\n+    /**\n+     * Process and return the modifed claim values against claim URI. Add or remove specific claim values\n+     * against old claim values of multi-valued claims. Replace old claim values from modified values for\n+     * non multi-valued claims.\n+     *\n+     * @param oldClaimMap                      Map of claim URIs against old claim values of user.\n+     * @param multiValuedClaimsToAdd           Map of multi-valued claim URIs against values need to be added to\n+     *                                         old claim value.\n+     * @param multiValuedClaimsToDelete        Map of multi-valued claim URIs against values need to be removed from\n+     *                                         old claim value.\n+     * @param claimsExcludingMultiValuedClaims Map of non multi-valued claim URIs against modified values to be stred.\n+     * @return Map of claim URIs against the modified claim values.\n+     */\n+    private Map<String, String> getModifiedClaims(Map<String, List<String>> oldClaimMap,\n+                                                  Map<String, List<String>> multiValuedClaimsToAdd,\n+                                                  Map<String, List<String>> multiValuedClaimsToDelete,\n+                                                  Map<String, List<String>> claimsExcludingMultiValuedClaims) {\n+\n+        Map<String, String> claims = new HashMap<>();\n+        String separator = \",\";\n+        if (StringUtils.isNotEmpty(realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR))) {\n+            separator = realmConfig.getUserStoreProperty(MULTI_ATTRIBUTE_SEPARATOR);\n+        }\n+        if (claimsExcludingMultiValuedClaims != null) {\n+            for (String claimURI : claimsExcludingMultiValuedClaims.keySet()) {\n+                claims.put(claimURI,\n+                        StringUtils.join(claimsExcludingMultiValuedClaims.get(claimURI).iterator(), separator));\n+            }\n+        }\n+\n+        // Get modified claim values for multi-valued claims.\n+        if (multiValuedClaimsToAdd != null) {\n+            for (String claimURI : multiValuedClaimsToAdd.keySet()) {\n+                List<String> modifiedValue = new ArrayList<>();\n+                if (oldClaimMap.containsKey(claimURI)) {\n+                    modifiedValue.addAll(oldClaimMap.get(claimURI));\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                } else {\n+                    modifiedValue.addAll(multiValuedClaimsToAdd.get(claimURI));\n+                }\n+                claims.put(claimURI, StringUtils.join(modifiedValue.iterator(), separator));\n+            }\n+        }\n+        if (multiValuedClaimsToDelete != null) {\n+            for (String claimURI : multiValuedClaimsToDelete.keySet()) {\n+                List<String> values = null;\n+                if (claims.containsKey(claimURI)) {\n+                    values = Arrays.asList(claims.get(claimURI).split(separator));\n+                } else if (oldClaimMap.containsKey(claimURI)) {\n+                    values = oldClaimMap.get(claimURI);\n+                }\n+                if (!CollectionUtils.isEmpty(values)) {\n+                    List<String> modifiedValue =\n+                            (List<String>) CollectionUtils.subtract(values, multiValuedClaimsToDelete.get(claimURI));\n+                    claims.put(claimURI, StringUtils.join(modifiedValue.iterator(), separator));\n+                }\n+            }\n+        }\n+        return claims;\n+    }\n+\n+    private void invokeDoPreSetUserClaimsWithIDListeners(String userID, Map<String, String> claims, String profileName)\n+            throws UserStoreException {\n+\n+        try {\n+            for (UserOperationEventListener listener : UMListenerServiceComponent.getUserOperationEventListeners()) {\n+                if (!((AbstractUserOperationEventListener) listener)\n+                        .doPreSetUserClaimValuesWithID(userID, claims, profileName, this)) {\n+                    handleSetUserClaimValuesFailureWithID(\n+                            ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(),\n+                            String.format(ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(),\n+                                    UserCoreErrorConstants.PRE_LISTENER_TASKS_FAILED_MESSAGE), userID, claims,\n+                            profileName);\n+                    return;\n+                }\n+            }\n+        } catch (UserStoreException e) {\n+            handleSetUserClaimValuesFailureWithID(\n+                    ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getCode(),\n+                    String.format(ErrorMessages.ERROR_CODE_ERROR_DURING_PRE_SET_USER_CLAIM_VALUES.getMessage(),\n+                            e.getMessage()), userID, claims, profileName);\n+            throw e;\n+        }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5MzMyMg=="}, "originalCommit": {"oid": "3f2294363dedc5b782da00e295e7e75f500b9646"}, "originalPosition": 383}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzE0OTI2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/jdbc/UniqueIDJDBCUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNTozMjozN1rOHdNpxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNzowNjo0M1rOHdRniA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NDQzNg==", "bodyText": "Don't we have to say that this is uniqueId JDBC?", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r500394436", "createdAt": "2020-10-06T15:32:37Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/jdbc/UniqueIDJDBCUserStoreManager.java", "diffHunk": "@@ -1816,6 +1826,15 @@ public void doSetUserClaimValuesWithID(String userID, Map<String, String> claims\n         super.doSetUserClaimValuesWithID(userID, claims, profileName);\n     }\n \n+    @Override\n+    public void doSetUserClaimValuesWithID(String userID, Map<String, List<String>> multiValuedClaimsToAdd,\n+                                           Map<String, List<String>> multiValuedClaimsToDelete,\n+                                           Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                           String profileName) throws NotImplementedException {\n+\n+        throw new NotImplementedException(\"This functionality is not yet implemented for JDBC userstores.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f2294363dedc5b782da00e295e7e75f500b9646"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDQ1OTQwMA==", "bodyText": "fixed in 0b9e061", "url": "https://github.com/wso2/carbon-kernel/pull/2705#discussion_r500459400", "createdAt": "2020-10-06T17:06:43Z", "author": {"login": "AnuradhaSK"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/jdbc/UniqueIDJDBCUserStoreManager.java", "diffHunk": "@@ -1816,6 +1826,15 @@ public void doSetUserClaimValuesWithID(String userID, Map<String, String> claims\n         super.doSetUserClaimValuesWithID(userID, claims, profileName);\n     }\n \n+    @Override\n+    public void doSetUserClaimValuesWithID(String userID, Map<String, List<String>> multiValuedClaimsToAdd,\n+                                           Map<String, List<String>> multiValuedClaimsToDelete,\n+                                           Map<String, List<String>> claimsExcludingMultiValuedClaims,\n+                                           String profileName) throws NotImplementedException {\n+\n+        throw new NotImplementedException(\"This functionality is not yet implemented for JDBC userstores.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM5NDQzNg=="}, "originalCommit": {"oid": "3f2294363dedc5b782da00e295e7e75f500b9646"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2129, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}