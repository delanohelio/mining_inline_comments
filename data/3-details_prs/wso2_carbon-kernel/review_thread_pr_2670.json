{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzY3NjM0", "number": 2670, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToyMVrOD2hHGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToxODozOFrOD2oIMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkyMTg1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToyMVrOGMTkrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozNTo0MVrOGMU9iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Njc4MA==", "bodyText": "Can't we catch the specific exception here?", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415556780", "createdAt": "2020-04-27T06:55:21Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -307,6 +377,56 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n         }\n     }\n \n+    /**\n+     * Decrypt the cipher text using the given algorithm and internal crypto provider type.\n+     *\n+     * @param cipherTextBytes            The cipher text to be decrypted.\n+     * @param algorithm                  The algorithm used for decryption.\n+     * @param internalCryptoProviderType The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return Decrypted bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] decrypt(byte[] cipherTextBytes, String algorithm, String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(cipherTextBytes,algorithm,internalCryptoProviderType);\n+\n+        byte[] decryptedValue;\n+\n+        try {\n+            CryptoService cryptoService = CarbonCoreDataHolder.getInstance().getCryptoService();\n+\n+            if (cryptoService == null) {\n+                throw new CryptoException(\"A crypto service implementation has not been registered.\");\n+            }\n+\n+            CipherMetaDataHolder\n+                    cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+            if (cipherMetaDataHolder != null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            String.format(\"Cipher text is in self contained format. Retrieve the actual cipher from \" +\n+                                    \"the self contained cipher text.\"));\n+                }\n+                cipherTextBytes = cipherMetaDataHolder.getCipherBase64Decoded();\n+            }\n+\n+            if (cipherTextBytes.length == 0) {\n+                decryptedValue = StringUtils.EMPTY.getBytes();\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n+                }\n+            } else {\n+                decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC,\n+                        internalCryptoProviderType);\n+            }\n+            return decryptedValue;\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3OTUyOA==", "bodyText": "Fixed with 7157b37", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415579528", "createdAt": "2020-04-27T07:35:41Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -307,6 +377,56 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n         }\n     }\n \n+    /**\n+     * Decrypt the cipher text using the given algorithm and internal crypto provider type.\n+     *\n+     * @param cipherTextBytes            The cipher text to be decrypted.\n+     * @param algorithm                  The algorithm used for decryption.\n+     * @param internalCryptoProviderType The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return Decrypted bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] decrypt(byte[] cipherTextBytes, String algorithm, String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(cipherTextBytes,algorithm,internalCryptoProviderType);\n+\n+        byte[] decryptedValue;\n+\n+        try {\n+            CryptoService cryptoService = CarbonCoreDataHolder.getInstance().getCryptoService();\n+\n+            if (cryptoService == null) {\n+                throw new CryptoException(\"A crypto service implementation has not been registered.\");\n+            }\n+\n+            CipherMetaDataHolder\n+                    cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+            if (cipherMetaDataHolder != null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            String.format(\"Cipher text is in self contained format. Retrieve the actual cipher from \" +\n+                                    \"the self contained cipher text.\"));\n+                }\n+                cipherTextBytes = cipherMetaDataHolder.getCipherBase64Decoded();\n+            }\n+\n+            if (cipherTextBytes.length == 0) {\n+                decryptedValue = StringUtils.EMPTY.getBytes();\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n+                }\n+            } else {\n+                decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC,\n+                        internalCryptoProviderType);\n+            }\n+            return decryptedValue;\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Njc4MA=="}, "originalCommit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDkyNzI3OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NjozNFrOGMTnqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNzozNTo0OVrOGMU95A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NzU0Nw==", "bodyText": "Can't we catch the specific exception here?", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415557547", "createdAt": "2020-04-27T06:56:34Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -170,6 +170,58 @@ public RegistryService getRegistryService() {\n         return encrypt(plainTextBytes, System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY), true);\n     }\n \n+    /**\n+     * Encrypt a given plain text with the provided algorithm and internal crypto provider type.\n+     *\n+     * @param plainTextBytes                plain text bytes that need to be encrypted.\n+     * @param algorithm                     The encryption algorithm.\n+     * @param returnSelfContainedCipherText Create self-contained cipher text if true, return simple encrypted ciphertext otherwise.\n+     * @param internalCryptoProviderType    The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return The cipher text bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] encrypt(byte[] plainTextBytes, String algorithm, boolean returnSelfContainedCipherText,\n+                          String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(plainTextBytes, algorithm, internalCryptoProviderType);\n+\n+        byte[] encryptedKey;\n+        try {\n+\n+            CryptoService cryptoService = CarbonCoreDataHolder.getInstance().getCryptoService();\n+\n+            if (cryptoService == null) {\n+                throw new CryptoException(\"A crypto service implementation has not been registered.\");\n+            }\n+            if (plainTextBytes.length == 0) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Plaintext is empty. An empty array will be used as the ciphertext bytes.\");\n+                }\n+                encryptedKey = StringUtils.EMPTY.getBytes();\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    if (returnSelfContainedCipherText) {\n+                        log.debug(String.format(\n+                                \"Encrypting data in self contained format, with algorithm: '%s' and internal crypto \" +\n+                                        \"provider: '%s'\", algorithm, internalCryptoProviderType));\n+                    } else {\n+                        log.debug(String.format(\n+                                \"Encrypting data with algorithm: '%s' and internal crypto \" +\n+                                        \"provider: '%s'\", algorithm, internalCryptoProviderType));\n+                    }\n+                }\n+                encryptedKey = cryptoService\n+                        .encrypt(plainTextBytes, algorithm, CRYPTO_API_PROVIDER_BC, returnSelfContainedCipherText,\n+                                internalCryptoProviderType);\n+            }\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU3OTYyMA==", "bodyText": "Fixed with 7157b37", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415579620", "createdAt": "2020-04-27T07:35:49Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -170,6 +170,58 @@ public RegistryService getRegistryService() {\n         return encrypt(plainTextBytes, System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY), true);\n     }\n \n+    /**\n+     * Encrypt a given plain text with the provided algorithm and internal crypto provider type.\n+     *\n+     * @param plainTextBytes                plain text bytes that need to be encrypted.\n+     * @param algorithm                     The encryption algorithm.\n+     * @param returnSelfContainedCipherText Create self-contained cipher text if true, return simple encrypted ciphertext otherwise.\n+     * @param internalCryptoProviderType    The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return The cipher text bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] encrypt(byte[] plainTextBytes, String algorithm, boolean returnSelfContainedCipherText,\n+                          String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(plainTextBytes, algorithm, internalCryptoProviderType);\n+\n+        byte[] encryptedKey;\n+        try {\n+\n+            CryptoService cryptoService = CarbonCoreDataHolder.getInstance().getCryptoService();\n+\n+            if (cryptoService == null) {\n+                throw new CryptoException(\"A crypto service implementation has not been registered.\");\n+            }\n+            if (plainTextBytes.length == 0) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Plaintext is empty. An empty array will be used as the ciphertext bytes.\");\n+                }\n+                encryptedKey = StringUtils.EMPTY.getBytes();\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    if (returnSelfContainedCipherText) {\n+                        log.debug(String.format(\n+                                \"Encrypting data in self contained format, with algorithm: '%s' and internal crypto \" +\n+                                        \"provider: '%s'\", algorithm, internalCryptoProviderType));\n+                    } else {\n+                        log.debug(String.format(\n+                                \"Encrypting data with algorithm: '%s' and internal crypto \" +\n+                                        \"provider: '%s'\", algorithm, internalCryptoProviderType));\n+                    }\n+                }\n+                encryptedKey = cryptoService\n+                        .encrypt(plainTextBytes, algorithm, CRYPTO_API_PROVIDER_BC, returnSelfContainedCipherText,\n+                                internalCryptoProviderType);\n+            }\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NzU0Nw=="}, "originalCommit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NjA3MTU1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToxODozOFrOGMd7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOFQwMjo1ODozNFrOGNAUdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNjUwOQ==", "bodyText": "formatting", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415726509", "createdAt": "2020-04-27T11:18:38Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -307,6 +378,56 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n         }\n     }\n \n+    /**\n+     * Decrypt the cipher text using the given algorithm and internal crypto provider type.\n+     *\n+     * @param cipherTextBytes            The cipher text to be decrypted.\n+     * @param algorithm                  The algorithm used for decryption.\n+     * @param internalCryptoProviderType The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return Decrypted bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] decrypt(byte[] cipherTextBytes, String algorithm, String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(cipherTextBytes,algorithm,internalCryptoProviderType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7157b37d5c65be094165fc2ee48137ca915b81c3"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNjI4OTkxMA==", "bodyText": "fixed with fe82da8", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r416289910", "createdAt": "2020-04-28T02:58:34Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -307,6 +378,56 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n         }\n     }\n \n+    /**\n+     * Decrypt the cipher text using the given algorithm and internal crypto provider type.\n+     *\n+     * @param cipherTextBytes            The cipher text to be decrypted.\n+     * @param algorithm                  The algorithm used for decryption.\n+     * @param internalCryptoProviderType The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return Decrypted bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] decrypt(byte[] cipherTextBytes, String algorithm, String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(cipherTextBytes,algorithm,internalCryptoProviderType);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNjUwOQ=="}, "originalCommit": {"oid": "7157b37d5c65be094165fc2ee48137ca915b81c3"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2214, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}