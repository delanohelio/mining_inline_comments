{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNjMyMzIw", "number": 2639, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowODowMlrODqOQzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMzoyOFrODqsD8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjAwNDYyOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowODowMlrOF51tww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNToxODoyNVrOF53Nqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MzIxOQ==", "bodyText": "what will happen if cipherTransformation is null. Algorithm will be null and default on will be resolved from crypto service ?", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396193219", "createdAt": "2020-03-23T03:08:02Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,56 +434,53 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n-        }\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n \n-        if(cipherTransformation != null) {\n+        if (cipherTransformation != null) {\n             // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+            CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n             if (cipherHolder != null) {\n                 // cipher with meta data.\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n                 }\n-                keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n+                algorithm = cipherHolder.getTransformation();\n                 cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n             } else {\n                 // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n                 // carbon.properties file\n-                keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n+                algorithm = cipherTransformation;\n+            }\n+        }\n+        if (cipherTextBytes.length == 0) {\n+            decryptedValue = StringUtils.EMPTY.getBytes();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n             }\n         } else {\n-            // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n-            // hence RSA is considered as default transformation\n-            keyStoreCipher = Cipher.getInstance(\"RSA\", \"BC\");\n+            decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIxNzc3MA==", "bodyText": "Yes, default one will be resolved from the respective internal crypto provider in the crypto service", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396217770", "createdAt": "2020-03-23T05:18:25Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,56 +434,53 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n-        }\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n \n-        if(cipherTransformation != null) {\n+        if (cipherTransformation != null) {\n             // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+            CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n             if (cipherHolder != null) {\n                 // cipher with meta data.\n                 if (log.isDebugEnabled()) {\n                     log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n                 }\n-                keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n+                algorithm = cipherHolder.getTransformation();\n                 cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n             } else {\n                 // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n                 // carbon.properties file\n-                keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n+                algorithm = cipherTransformation;\n+            }\n+        }\n+        if (cipherTextBytes.length == 0) {\n+            decryptedValue = StringUtils.EMPTY.getBytes();\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n             }\n         } else {\n-            // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n-            // hence RSA is considered as default transformation\n-            keyStoreCipher = Cipher.getInstance(\"RSA\", \"BC\");\n+            decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MzIxOQ=="}, "originalCommit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1NjAwNTg1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwMzowOTowMVrOF51uhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QwNjowMTo0N1rOF53zlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MzQxNA==", "bodyText": "Why we needed another meta data holder defined here.", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396193414", "createdAt": "2020-03-23T03:09:01Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -494,7 +495,7 @@ private CipherHolder cipherTextToCipherHolder(byte[] cipherText) {\n      * IMPORTANT: this is copy of org.wso2.carbon.core.util.CipherHolder, what ever changes applied here need to update\n      *              on above\n      */\n-    private class CipherHolder {\n+    private class CipherMetaDataHolder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjIyNzQ3OQ==", "bodyText": "Fixed with 39950c6", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396227479", "createdAt": "2020-03-23T06:01:47Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -494,7 +495,7 @@ private CipherHolder cipherTextToCipherHolder(byte[] cipherText) {\n      * IMPORTANT: this is copy of org.wso2.carbon.core.util.CipherHolder, what ever changes applied here need to update\n      *              on above\n      */\n-    private class CipherHolder {\n+    private class CipherMetaDataHolder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE5MzQxNA=="}, "originalCommit": {"oid": "2d39c34a57e795da98eb0e7f3b52a5f19d3fb973"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDYyMTY1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/internal/UserStoreMgtDSComponent.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNjo1Nzo1MlrOF6i_zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo0OToyNFrOF6kPbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzNTExOQ==", "bodyText": "Shall we remove the unnecessary new lines here?", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396935119", "createdAt": "2020-03-24T06:57:52Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/internal/UserStoreMgtDSComponent.java", "diffHunk": "@@ -171,6 +173,18 @@ protected void setClaimManagerFactory(ClaimManagerFactory claimManagerFactory) {\n \n     }\n \n+    @Reference(name = \"carbonCryptoService\", cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC, unbind = \"unsetCarbonCryptoService\")\n+    protected void setCarbonCryptoService(CryptoService cryptoService){\n+        userStoreMgtDataHolder.setCryptoService(cryptoService);\n+    }\n+\n+    protected void unsetCarbonCryptoService(CryptoService cryptoService){\n+        userStoreMgtDataHolder.setCryptoService(null);\n+    }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1NTUwMQ==", "bodyText": "fixed with 8d1a059", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396955501", "createdAt": "2020-03-24T07:49:24Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/internal/UserStoreMgtDSComponent.java", "diffHunk": "@@ -171,6 +173,18 @@ protected void setClaimManagerFactory(ClaimManagerFactory claimManagerFactory) {\n \n     }\n \n+    @Reference(name = \"carbonCryptoService\", cardinality = ReferenceCardinality.OPTIONAL,\n+            policy = ReferencePolicy.DYNAMIC, unbind = \"unsetCarbonCryptoService\")\n+    protected void setCarbonCryptoService(CryptoService cryptoService){\n+        userStoreMgtDataHolder.setCryptoService(cryptoService);\n+    }\n+\n+    protected void unsetCarbonCryptoService(CryptoService cryptoService){\n+        userStoreMgtDataHolder.setCryptoService(null);\n+    }\n+\n+\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzNTExOQ=="}, "originalCommit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDYyOTI0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzowMToxOVrOF6jEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwNzo0OTozNVrOF6kPsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzNjMyMw==", "bodyText": "Shall we provide a debug log as well with this information?", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396936323", "createdAt": "2020-03-24T07:01:19Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,139 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }\n+            if (cipherTextBytes.length == 0) {\n+                decryptedValue = StringUtils.EMPTY.getBytes();\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n                 }\n-                keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n-                cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n             } else {\n-                // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n-                // carbon.properties file\n-                keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n+                decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);\n             }\n-        } else {\n-            // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n-            // hence RSA is considered as default transformation\n-            keyStoreCipher = Cipher.getInstance(\"RSA\", \"BC\");\n-        }\n-        keyStoreCipher.init(Cipher.DECRYPT_MODE, privateKey);\n-        return new String(keyStoreCipher.doFinal(cipherTextBytes), Charset.defaultCharset());\n-    }\n+            return new String(decryptedValue);\n \n-    /**\n-     * Function to convert cipher byte array to {@link CipherHolder}.\n-     *\n-     * @param cipherText cipher text as a byte array\n-     * @return if cipher text is not a cipher with meta data\n-     */\n-    private CipherHolder cipherTextToCipherHolder(byte[] cipherText) {\n+        } else {\n+            return decryptWithPrimaryKeyStore(propValue);\n \n-        String cipherStr = new String(cipherText, Charset.defaultCharset());\n-        try {\n-            return gson.fromJson(cipherStr, CipherHolder.class);\n-        } catch (JsonSyntaxException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Deserialization failed since cipher string is not representing cipher with metadata\");\n-            }\n-            return null;\n         }\n-    }\n \n-    /**\n-     * Holds encrypted cipher with related metadata.\n-     *\n-     * IMPORTANT: this is copy of org.wso2.carbon.core.util.CipherHolder, what ever changes applied here need to update\n-     *              on above\n-     */\n-    private class CipherHolder {\n-\n-        // Base64 encoded ciphertext.\n-        private String c;\n+    }\n \n-        // Transformation used for encryption, default is \"RSA\".\n-        private String t = \"RSA\";\n+    private String decryptWithPrimaryKeyStore(String propValue) throws CryptoException {\n \n-        // Thumbprint of the certificate.\n-        private String tp;\n+        Cipher keyStoreCipher = null;\n+        String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n+        byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        byte[] plainTextBytes = new byte[0];\n \n-        // Digest used to generate certificate thumbprint.\n-        private String tpd;\n+        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n+        if (privateKey == null) {\n+            throw new CryptoException(\n+                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+        }\n \n+        try {\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n \n-        public String getTransformation() {\n-            return t;\n-        }\n+                    keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n \n-        public void setTransformation(String transformation) {\n-            this.t = transformation;\n-        }\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n \n-        public String getCipherText() {\n-            return c;\n-        }\n+                    keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n \n-        public byte[] getCipherBase64Decoded() {\n-            return Base64.decode(c);\n-        }\n+                }\n+            } else {\n+                // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n+                // hence RSA is considered as default transformation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "originalPosition": 240}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk1NTU2OQ==", "bodyText": "fixed with 8d1a059", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396955569", "createdAt": "2020-03-24T07:49:35Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,139 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }\n+            if (cipherTextBytes.length == 0) {\n+                decryptedValue = StringUtils.EMPTY.getBytes();\n                 if (log.isDebugEnabled()) {\n-                    log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n                 }\n-                keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n-                cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n             } else {\n-                // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n-                // carbon.properties file\n-                keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n+                decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);\n             }\n-        } else {\n-            // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n-            // hence RSA is considered as default transformation\n-            keyStoreCipher = Cipher.getInstance(\"RSA\", \"BC\");\n-        }\n-        keyStoreCipher.init(Cipher.DECRYPT_MODE, privateKey);\n-        return new String(keyStoreCipher.doFinal(cipherTextBytes), Charset.defaultCharset());\n-    }\n+            return new String(decryptedValue);\n \n-    /**\n-     * Function to convert cipher byte array to {@link CipherHolder}.\n-     *\n-     * @param cipherText cipher text as a byte array\n-     * @return if cipher text is not a cipher with meta data\n-     */\n-    private CipherHolder cipherTextToCipherHolder(byte[] cipherText) {\n+        } else {\n+            return decryptWithPrimaryKeyStore(propValue);\n \n-        String cipherStr = new String(cipherText, Charset.defaultCharset());\n-        try {\n-            return gson.fromJson(cipherStr, CipherHolder.class);\n-        } catch (JsonSyntaxException e) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"Deserialization failed since cipher string is not representing cipher with metadata\");\n-            }\n-            return null;\n         }\n-    }\n \n-    /**\n-     * Holds encrypted cipher with related metadata.\n-     *\n-     * IMPORTANT: this is copy of org.wso2.carbon.core.util.CipherHolder, what ever changes applied here need to update\n-     *              on above\n-     */\n-    private class CipherHolder {\n-\n-        // Base64 encoded ciphertext.\n-        private String c;\n+    }\n \n-        // Transformation used for encryption, default is \"RSA\".\n-        private String t = \"RSA\";\n+    private String decryptWithPrimaryKeyStore(String propValue) throws CryptoException {\n \n-        // Thumbprint of the certificate.\n-        private String tp;\n+        Cipher keyStoreCipher = null;\n+        String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n+        byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        byte[] plainTextBytes = new byte[0];\n \n-        // Digest used to generate certificate thumbprint.\n-        private String tpd;\n+        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n+        if (privateKey == null) {\n+            throw new CryptoException(\n+                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+        }\n \n+        try {\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n \n-        public String getTransformation() {\n-            return t;\n-        }\n+                    keyStoreCipher = Cipher.getInstance(cipherHolder.getTransformation(), \"BC\");\n \n-        public void setTransformation(String transformation) {\n-            this.t = transformation;\n-        }\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n \n-        public String getCipherText() {\n-            return c;\n-        }\n+                    keyStoreCipher = Cipher.getInstance(cipherTransformation, \"BC\");\n \n-        public byte[] getCipherBase64Decoded() {\n-            return Base64.decode(c);\n-        }\n+                }\n+            } else {\n+                // If reach here, user have removed org.wso2.CipherTransformation property or carbon.properties file\n+                // hence RSA is considered as default transformation", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjkzNjMyMw=="}, "originalCommit": {"oid": "d1672ec3ada1d4584d021a17d16d8e76bfa01f9a"}, "originalPosition": 240}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDg3NzI4OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMDozNVrOF6lgCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMTo1MzowOVrOF6swSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NjEzOA==", "bodyText": "If caron.properties is not present can 'cipherTransformation' be null\nAnd if so what happens.", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396976138", "createdAt": "2020-03-24T08:30:35Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAzNTQ5Ng==", "bodyText": "yes, cipherTransformation becomes null.\nThen the algorithm becomes null.\nIt will call the cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC); (line 482)with the null algorithm. But in cryptoservice it will assign the default algorithm if the incoming algorithm is null.", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r397035496", "createdAt": "2020-03-24T10:07:47Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NjEzOA=="}, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzA5NDk4NQ==", "bodyText": "+1", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r397094985", "createdAt": "2020-03-24T11:53:09Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {\n+\n+            if (cipherTransformation != null) {\n+                // extract the original cipher if custom transformation is used configured in carbon.properties.\n+                CipherMetaDataHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n+                if (cipherHolder != null) {\n+                    // cipher with meta data.\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Cipher transformation for decryption : \" + cipherHolder.getTransformation());\n+                    }\n+                    algorithm = cipherHolder.getTransformation();\n+                    cipherTextBytes = cipherHolder.getCipherBase64Decoded();\n+                } else {\n+                    // If the ciphertext is not a self-contained, directly decrypt using transformation configured in\n+                    // carbon.properties file\n+                    algorithm = cipherTransformation;\n+                }\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NjEzOA=="}, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MDg4NjkxOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwODozMzoyOFrOF6lmOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQwOTo0MzowMlrOF6oLNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NzcyMg==", "bodyText": "Doesn't this skip the case where internal key store is not configured and symmetric is not enabled, which should switch to primary key store", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396977722", "createdAt": "2020-03-24T08:33:28Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk5MDQ3Ng==", "bodyText": "There is another else statement after this else if. It's handled there.\nelse {\nreturn decryptWithPrimaryKeyStore(propValue);\n}\nhttps://github.com/wso2/carbon-kernel/pull/2639/files#diff-889aa9c6d5d53b652ccbcfdb23b953a7R486", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r396990476", "createdAt": "2020-03-24T08:56:10Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NzcyMg=="}, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzAxOTk1OQ==", "bodyText": "noted the condition is handled", "url": "https://github.com/wso2/carbon-kernel/pull/2639#discussion_r397019959", "createdAt": "2020-03-24T09:43:02Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/config/UserStoreConfigXMLProcessor.java", "diffHunk": "@@ -430,143 +427,142 @@ private static PrivateKey getPrivateKey() {\n      * @throws BadPaddingException\n      * @throws IllegalBlockSizeException\n      */\n-    private String decryptProperty(String propValue)\n-            throws NoSuchPaddingException, NoSuchAlgorithmException, NoSuchProviderException,\n-            org.wso2.carbon.user.api.UserStoreException, InvalidKeyException, BadPaddingException,\n-            IllegalBlockSizeException {\n+    private String decryptProperty(String propValue) throws CryptoException {\n \n-        Cipher keyStoreCipher;\n+        CryptoService cryptoService = UserStoreMgtDataHolder.getInstance().getCryptoService();\n         String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n         byte[] cipherTextBytes = Base64.decode(propValue.trim());\n+        String algorithm = null;\n+        byte[] decryptedValue;\n+        boolean isInternalKeyStoreEncryptionEnabled = false;\n+        boolean isSymmetricKeyEncryptionEnabled = false;\n+        ServerConfigurationService config =\n+                UserStoreMgtDSComponent.getServerConfigurationService();\n+        if (config != null) {\n+            String encryptionKeyStore = config.getFirstProperty(ENCRYPTION_KEYSTORE);\n \n-        privateKey = (privateKey == null) ? getPrivateKey() : privateKey;\n-        if (privateKey == null) {\n-            throw new org.wso2.carbon.user.api.UserStoreException(\n-                    \"Private key initialization failed. Cannot decrypt the userstore password.\");\n+            if (INTERNAL_KEYSTORE.equalsIgnoreCase(encryptionKeyStore)) {\n+                isInternalKeyStoreEncryptionEnabled = true;\n+            }\n+            String cryptoProvider = config.getFirstProperty(CRYPTO_PROVIDER);\n+            if (SYMMETRIC_KEY_CRYPTO_PROVIDER.equalsIgnoreCase(cryptoProvider)) {\n+                isSymmetricKeyEncryptionEnabled = true;\n+            }\n         }\n \n-        if(cipherTransformation != null) {\n-            // extract the original cipher if custom transformation is used configured in carbon.properties.\n-            CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-            if (cipherHolder != null) {\n-                // cipher with meta data.\n+        if (isInternalKeyStoreEncryptionEnabled && isSymmetricKeyEncryptionEnabled) {\n+\n+            throw new CryptoException(String.format(\"Userstore encryption can not be supported due to \" +\n+                    \"conflicting configurations: '%s' and '%s'. When using internal keystore, assymetric crypto \" +\n+                    \"provider should be used.\", INTERNAL_KEYSTORE, SYMMETRIC_KEY_CRYPTO_PROVIDER));\n+        } else if (isInternalKeyStoreEncryptionEnabled || isSymmetricKeyEncryptionEnabled) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njk3NzcyMg=="}, "originalCommit": {"oid": "8d1a059d01c4d955897f1834cc148dff8df0c730"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2199, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}