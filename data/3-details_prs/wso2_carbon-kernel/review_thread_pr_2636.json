{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjIyOTk4", "number": 2636, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1NDozNlrODocRpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzozNTowN1rODpnAWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzMyOTAwOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxNzo1NDozNlrOF2_kgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoyNzozOVrOF3Nlwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwODk2MQ==", "bodyText": "Avoid unnecessary concatenation", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393208961", "createdAt": "2020-03-16T17:54:36Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -52,6 +52,10 @@\n     private static final String DEFAULT_CRYPTO_ALGORITHM = \"RSA\";\n \n     private static final String CRYPTO_API_PROVIDER_BC = \"BC\";\n+    private static final String INTERNAL_CRYPTO_PROVIDER = \"CryptoService.InternalCryptoProviderClassName\";\n+    private static final String SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME =\n+            \"org.wso2.carbon.crypto.provider\" + \".SymmetricKeyInternalCryptoProvider\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4845ed143657a426d6daa9190b963f657f72e73"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzODY1OA==", "bodyText": "Fixed with 004c781", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393438658", "createdAt": "2020-03-17T04:27:39Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -52,6 +52,10 @@\n     private static final String DEFAULT_CRYPTO_ALGORITHM = \"RSA\";\n \n     private static final String CRYPTO_API_PROVIDER_BC = \"BC\";\n+    private static final String INTERNAL_CRYPTO_PROVIDER = \"CryptoService.InternalCryptoProviderClassName\";\n+    private static final String SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME =\n+            \"org.wso2.carbon.crypto.provider\" + \".SymmetricKeyInternalCryptoProvider\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIwODk2MQ=="}, "originalCommit": {"oid": "e4845ed143657a426d6daa9190b963f657f72e73"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM1MDQxOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowMDoyOFrOF2_yDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDoyODo1NFrOF3Nmtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMjQyOQ==", "bodyText": "Same code got refactored ?", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393212429", "createdAt": "2020-03-16T18:00:28Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -149,14 +153,16 @@ public RegistryService getRegistryService() {\n                     log.debug(\"Plaintext is empty. An empty array will be used as the ciphertext bytes.\");\n                 }\n                 encryptedKey = StringUtils.EMPTY.getBytes();\n-            }else{\n+            } else {\n                 encryptedKey = cryptoService.encrypt(plainTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);\n             }\n \n-            if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText) {\n+            if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText\n+                    && !isSymmetricKeyEncryptionEnabled) {\n \n-                Certificate certificate = cryptoService.getCertificate(CryptoContext.buildEmptyContext(\n-                        MultitenantConstants.SUPER_TENANT_ID, MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+                Certificate certificate = cryptoService.getCertificate(CryptoContext\n+                        .buildEmptyContext(MultitenantConstants.SUPER_TENANT_ID,\n+                                MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4845ed143657a426d6daa9190b963f657f72e73"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzODkwMg==", "bodyText": "This was due to using old wso2 check style. Fixed with 004c781.", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393438902", "createdAt": "2020-03-17T04:28:54Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -149,14 +153,16 @@ public RegistryService getRegistryService() {\n                     log.debug(\"Plaintext is empty. An empty array will be used as the ciphertext bytes.\");\n                 }\n                 encryptedKey = StringUtils.EMPTY.getBytes();\n-            }else{\n+            } else {\n                 encryptedKey = cryptoService.encrypt(plainTextBytes, algorithm, CRYPTO_API_PROVIDER_BC);\n             }\n \n-            if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText) {\n+            if (StringUtils.isNotBlank(cipherTransformation) && returnSelfContainedCipherText\n+                    && !isSymmetricKeyEncryptionEnabled) {\n \n-                Certificate certificate = cryptoService.getCertificate(CryptoContext.buildEmptyContext(\n-                        MultitenantConstants.SUPER_TENANT_ID, MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));\n+                Certificate certificate = cryptoService.getCertificate(CryptoContext\n+                        .buildEmptyContext(MultitenantConstants.SUPER_TENANT_ID,\n+                                MultitenantConstants.SUPER_TENANT_DOMAIN_NAME));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxMjQyOQ=="}, "originalCommit": {"oid": "e4845ed143657a426d6daa9190b963f657f72e73"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzM3OTM1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODowNjoyOFrOF3AELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwNDowMTozMlrOF3NPzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzA2OA==", "bodyText": "What if this method is utilized in 'getDefaultEncryptionAlgorithm' rather than passing an additional boolean", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393217068", "createdAt": "2020-03-16T18:06:28Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -441,5 +445,21 @@ private String calculateThumbprint(Certificate certificate, String digest)\n \n         return strBuffer.toString();\n     }\n+\n+    private String getDefaultEncryptionAlgorithm(boolean isSymmetricKeyEncryptionEnabled) {\n+\n+        if (isSymmetricKeyEncryptionEnabled) {\n+            return DEFAULT_SYMMETRIC_CRYPTO_ALGORITHM;\n+        } else {\n+            // Set the default crypto algorithm.\n+            return DEFAULT_CRYPTO_ALGORITHM;\n+        }\n+    }\n+\n+    private boolean isSymmetricKeyEncryptionEnabled() {\n+\n+        return SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME\n+                .equals(serverConfigService.getFirstProperty(INTERNAL_CRYPTO_PROVIDER));\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e4845ed143657a426d6daa9190b963f657f72e73"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQzMzAzOA==", "bodyText": "Since we use this variable at https://github.com/wso2/carbon-kernel/pull/2636/files#diff-8b0422c9fd8f481b4c8261829499efe4R161 also, I defined it seperately. If use this inside the getDefaultEncryptionAlgorithm method, it is not accessible in https://github.com/wso2/carbon-kernel/pull/2636/files#diff-8b0422c9fd8f481b4c8261829499efe4R161.\nWe can declare an instance variable and assign to it in getDefaultEncryptionAlgorithm also. Instead I went with this approach.", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393433038", "createdAt": "2020-03-17T04:01:32Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -441,5 +445,21 @@ private String calculateThumbprint(Certificate certificate, String digest)\n \n         return strBuffer.toString();\n     }\n+\n+    private String getDefaultEncryptionAlgorithm(boolean isSymmetricKeyEncryptionEnabled) {\n+\n+        if (isSymmetricKeyEncryptionEnabled) {\n+            return DEFAULT_SYMMETRIC_CRYPTO_ALGORITHM;\n+        } else {\n+            // Set the default crypto algorithm.\n+            return DEFAULT_CRYPTO_ALGORITHM;\n+        }\n+    }\n+\n+    private boolean isSymmetricKeyEncryptionEnabled() {\n+\n+        return SYMMETRIC_INTERNAL_CRYPTO_PROVIDER_CLASS_NAME\n+                .equals(serverConfigService.getFirstProperty(INTERNAL_CRYPTO_PROVIDER));\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIxNzA2OA=="}, "originalCommit": {"oid": "e4845ed143657a426d6daa9190b963f657f72e73"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MTQxNDY2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxODowNTo0NlrOF3oESg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMToyMDozNFrOF4AjPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjQ1OA==", "bodyText": "Did we verify this will not have an impact on previously encrypted data for asymmetric flow", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r393872458", "createdAt": "2020-03-17T18:05:46Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -231,20 +222,20 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n                 throw new CryptoException(\"A crypto service implementation has not been registered.\");\n             }\n \n-            // Set the default crypto algorithm to be used when a cipher transformation is not found.\n-            String algorithm = DEFAULT_CRYPTO_ALGORITHM;\n+            String algorithm = null;\n \n             String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n \n             if (cipherTransformation != null) {\n-                CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-                if (cipherHolder != null) {\n+                CipherMetaDataHolder\n+                        cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+                if (cipherMetaDataHolder != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2344fd6aafaab24887fb7b351027c4630c29eb1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDExMDM4Ng==", "bodyText": "I think, during migration effort we can handle this. When there are previously encrypted data on asymmetric , we will have to do a migration anyway. This can also be handled from there i think.", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394110386", "createdAt": "2020-03-18T05:13:32Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -231,20 +222,20 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n                 throw new CryptoException(\"A crypto service implementation has not been registered.\");\n             }\n \n-            // Set the default crypto algorithm to be used when a cipher transformation is not found.\n-            String algorithm = DEFAULT_CRYPTO_ALGORITHM;\n+            String algorithm = null;\n \n             String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n \n             if (cipherTransformation != null) {\n-                CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-                if (cipherHolder != null) {\n+                CipherMetaDataHolder\n+                        cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+                if (cipherMetaDataHolder != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjQ1OA=="}, "originalCommit": {"oid": "f2344fd6aafaab24887fb7b351027c4630c29eb1"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI3MzU5Ng==", "bodyText": "Verified this. No issues observed.", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394273596", "createdAt": "2020-03-18T11:20:34Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -231,20 +222,20 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n                 throw new CryptoException(\"A crypto service implementation has not been registered.\");\n             }\n \n-            // Set the default crypto algorithm to be used when a cipher transformation is not found.\n-            String algorithm = DEFAULT_CRYPTO_ALGORITHM;\n+            String algorithm = null;\n \n             String cipherTransformation = System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY);\n \n             if (cipherTransformation != null) {\n-                CipherHolder cipherHolder = cipherTextToCipherHolder(cipherTextBytes);\n-                if (cipherHolder != null) {\n+                CipherMetaDataHolder\n+                        cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+                if (cipherMetaDataHolder != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzg3MjQ1OA=="}, "originalCommit": {"oid": "f2344fd6aafaab24887fb7b351027c4630c29eb1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0Njg2OTYzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwMjo1MDo0MFrOF4eYKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwNToyMzowN1rOF4gfeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2MjI4MQ==", "bodyText": "Let's deprecate CipherHolder class as well", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394762281", "createdAt": "2020-03-19T02:50:40Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -406,10 +398,12 @@ public boolean base64DecodeAndIsSelfContainedCipherText(String base64CipherText)\n \n     /**\n      * Function to convert cipher byte array to {@link CipherHolder}\n+     * @deprecated  use {@link #cipherTextToCipherMetaDataHolder(byte[])} instead.\n      *\n      * @param cipherText cipher text as a byte array\n      * @return if cipher text is not a cipher with meta data\n      */\n+    @Deprecated\n     public CipherHolder cipherTextToCipherHolder(byte[] cipherText) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2202aa4c92fe3c9407232b4e85ce608a78bc18b1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc5NjkyMQ==", "bodyText": "Fixed with 99475c9", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r394796921", "createdAt": "2020-03-19T05:23:07Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -406,10 +398,12 @@ public boolean base64DecodeAndIsSelfContainedCipherText(String base64CipherText)\n \n     /**\n      * Function to convert cipher byte array to {@link CipherHolder}\n+     * @deprecated  use {@link #cipherTextToCipherMetaDataHolder(byte[])} instead.\n      *\n      * @param cipherText cipher text as a byte array\n      * @return if cipher text is not a cipher with meta data\n      */\n+    @Deprecated\n     public CipherHolder cipherTextToCipherHolder(byte[] cipherText) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDc2MjI4MQ=="}, "originalCommit": {"oid": "2202aa4c92fe3c9407232b4e85ce608a78bc18b1"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0OTU3Mjc0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CipherHolder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxNzozNTowN1rOF45RHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMFQwODo0OToyOVrOF5LfVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwMjg0Ng==", "bodyText": "I guess this will not apply as we will now have it in crypto service layer.\nStill keep a note and verify", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r395202846", "createdAt": "2020-03-19T17:35:07Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CipherHolder.java", "diffHunk": "@@ -24,9 +24,14 @@\n /**\n  * Holds ciphertext with related metadata.\n  *\n+ * @deprecated This is deprecated since version 4.6.1.\n+ * This is replaced with org.wso2.carbon.crypto.api.CipherMetaDataHolder.\n+ * This is deprecated due to moving self contained cipher text creation logic to crypto-service project.\n+ *\n  * IMPORTANT: this is replicated at org.wso2.carbon.user.core.config.UserStoreConfigXMLProcessor.CipherHolder,\n- *              what ever changes applied here need to update on above. This is done to avoid cyclic dependency.\n+ * what ever changes applied here need to update on above. This is done to avoid cyclic dependency.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bc0e213f19071ff78206e57b97b153f5acda16c"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTUwMTM5OA==", "bodyText": "Since the class deprecated, I think this will not matter. Yes, there is a cyclic dependecy between carbon.core and carbon.user.core. Therefore in user.core we have to add a new CipherMetaDataHolder instead of this deprecated one.", "url": "https://github.com/wso2/carbon-kernel/pull/2636#discussion_r395501398", "createdAt": "2020-03-20T08:49:29Z", "author": {"login": "denuwanthi"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CipherHolder.java", "diffHunk": "@@ -24,9 +24,14 @@\n /**\n  * Holds ciphertext with related metadata.\n  *\n+ * @deprecated This is deprecated since version 4.6.1.\n+ * This is replaced with org.wso2.carbon.crypto.api.CipherMetaDataHolder.\n+ * This is deprecated due to moving self contained cipher text creation logic to crypto-service project.\n+ *\n  * IMPORTANT: this is replicated at org.wso2.carbon.user.core.config.UserStoreConfigXMLProcessor.CipherHolder,\n- *              what ever changes applied here need to update on above. This is done to avoid cyclic dependency.\n+ * what ever changes applied here need to update on above. This is done to avoid cyclic dependency.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NTIwMjg0Ng=="}, "originalCommit": {"oid": "2bc0e213f19071ff78206e57b97b153f5acda16c"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2194, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}