{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1NDA2NzAx", "number": 2647, "title": "Add changes to introduce rest endpoint for tenant management", "bodyText": "Purpose\nRelated to wso2/product-is#8047\nMerging order should be\n#2647\nwso2/carbon-commons#408\nwso2/carbon-multitenancy#188\nwso2/identity-api-server#137\nwso2/identity-rest-dispatcher#152", "createdAt": "2020-03-30T05:02:46Z", "url": "https://github.com/wso2/carbon-kernel/pull/2647", "merged": true, "mergeCommit": {"oid": "c5076a9b923ca6494ee316ba2f9a70b1f1f1f0d4"}, "closed": true, "closedAt": "2020-04-10T10:44:01Z", "author": {"login": "nilasini"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcS_Yq0gH2gAyMzk1NDA2NzAxOmRhOGE4NjhkOGNkY2VkNDk3Yjc4Nzc3Y2FiNGEyYzhhZTMyNmUwN2M=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcWOtd8gFqTM5MTM4MTEwNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "da8a868d8cdced497b78777cab4a2c8ae326e07c", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/da8a868d8cdced497b78777cab4a2c8ae326e07c", "committedDate": "2020-03-31T09:07:41Z", "message": "Add chages to introduce rest endpoint"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a26b7d7c04290c04968c58859400eed4238018d5", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/a26b7d7c04290c04968c58859400eed4238018d5", "committedDate": "2020-03-30T04:58:50Z", "message": "Add chages to introduce rest endpoint"}, "afterCommit": {"oid": "da8a868d8cdced497b78777cab4a2c8ae326e07c", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/da8a868d8cdced497b78777cab4a2c8ae326e07c", "committedDate": "2020-03-31T09:07:41Z", "message": "Add chages to introduce rest endpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjI1MzY5", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-384625369", "createdAt": "2020-03-31T11:05:06Z", "commit": {"oid": "da8a868d8cdced497b78777cab4a2c8ae326e07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowNTowNlrOF-QeiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowNTowNlrOF-QeiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyNTk5Mw==", "bodyText": "Change the name to uuid", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r400825993", "createdAt": "2020-03-31T11:05:06Z", "author": {"login": "nilasini"}, "path": "core/org.wso2.carbon.user.api/src/main/java/org/wso2/carbon/user/api/Tenant.java", "diffHunk": "@@ -82,6 +83,26 @@\n      */\n     private String adminPassword;\n \n+    /**\n+     * Unique id of the tenant.\n+     */\n+    private String resourceId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8a868d8cdced497b78777cab4a2c8ae326e07c"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg0NjM1NjA4", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-384635608", "createdAt": "2020-03-31T11:21:03Z", "commit": {"oid": "da8a868d8cdced497b78777cab4a2c8ae326e07c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMTowM1rOF-Q_Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMToyMTowM1rOF-Q_Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzNDMxMQ==", "bodyText": "Remove it", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r400834311", "createdAt": "2020-03-31T11:21:03Z", "author": {"login": "nilasini"}, "path": "core/org.wso2.carbon.user.api/src/main/java/org/wso2/carbon/user/api/Tenant.java", "diffHunk": "@@ -82,6 +83,26 @@\n      */\n     private String adminPassword;\n \n+    /**\n+     * Unique id of the tenant.\n+     */\n+    private String resourceId;\n+\n+    /**\n+     * The admin user name of the tenant\n+     */\n+    private String adminUserId;\n+\n+    /**\n+     * region of the tenant admin.\n+     */\n+    private String region;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da8a868d8cdced497b78777cab4a2c8ae326e07c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a8cecbad35cfd4a9b5e086f086c35dbfa32b43d", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8a8cecbad35cfd4a9b5e086f086c35dbfa32b43d", "committedDate": "2020-03-31T13:11:53Z", "message": "Fix PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aff40c9609bf46538689aae7555f6fbbf64dedb2", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/aff40c9609bf46538689aae7555f6fbbf64dedb2", "committedDate": "2020-04-02T12:44:36Z", "message": "Add pagination support for list tenants"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e5d4f62f62f1246c4dfab629b1d041462db44dc", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/7e5d4f62f62f1246c4dfab629b1d041462db44dc", "committedDate": "2020-04-08T06:38:59Z", "message": "Add pagination for list tenant and caching support for tenant uuid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/c0d166fd0a2550a06fe1a49996846ef2549f7537", "committedDate": "2020-04-08T09:58:01Z", "message": "Change the pagination param order"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "050794ba51797ffe56ef8fdf265558dca3e180c1", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/050794ba51797ffe56ef8fdf265558dca3e180c1", "committedDate": "2020-04-09T05:18:50Z", "message": "Merge branch '4.6.x' of github.com:wso2/carbon-kernel into tenantRestEndpoint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTA3NzAw", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-390507700", "createdAt": "2020-04-09T05:53:57Z", "commit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1Mzo1N1rOGDKhCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNTo1Mzo1N1rOGDKhCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MTIwOQ==", "bodyText": "modify the comment. why </p?", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r405971209", "createdAt": "2020-04-09T05:53:57Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/JDBCTenantManager.java", "diffHunk": "@@ -56,12 +56,22 @@\n     protected BundleContext bundleContext;\n     protected TenantCache tenantCacheManager = TenantCache.getInstance();\n     DataSource dataSource;\n+    private static final String DB2 = \"db2\";\n+    private static final String ORACLE = \"oracle\";\n     /**\n      * Map which maps tenant domains to tenant IDs\n      * <p/>\n      * Key - tenant domain, value - tenantId\n      */\n     private TenantIdCache tenantIdCache = TenantIdCache.getInstance();\n+\n+    /**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTA5ODcy", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-390509872", "createdAt": "2020-04-09T06:00:12Z", "commit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjowMDoxMlrOGDKoEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjowMDoxMlrOGDKoEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3MzAwOQ==", "bodyText": "clearTenantCaches", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r405973009", "createdAt": "2020-04-09T06:00:12Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/JDBCTenantManager.java", "diffHunk": "@@ -722,6 +883,16 @@ private void clearTenantCache(int tenantId) throws UserStoreException {\n         tenantCacheManager.clearCacheEntry(new TenantIdKey(tenantId));\n     }\n \n+    private void clearTenantUniqueIDCache(String tenantUniqueID) throws UserStoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537"}, "originalPosition": 229}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNTEzODA3", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-390513807", "createdAt": "2020-04-09T06:11:10Z", "commit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoxMToxMVrOGDK1GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQwNjoxMToxMVrOGDK1GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTk3NjM0NQ==", "bodyText": "e is missing", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r405976345", "createdAt": "2020-04-09T06:11:11Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/JDBCTenantManager.java", "diffHunk": "@@ -825,4 +996,116 @@ private StringBuilder printCurrentStackTrace() {\n         }\n         return currentStackTraceBuilder;\n     }\n+\n+    /**\n+     * Get total number of tenant existing in the system.\n+     *\n+     * @return number of tenant count.\n+     * @throws UserStoreException Error when getting count of tenants.\n+     */\n+    private int getCountOfTenants() throws UserStoreException {\n+\n+        String sqlStmt = TenantConstants.LIST_TENANTS_COUNT_SQL;\n+        int tenantCount = 0;\n+        try (Connection dbConnection = getDBConnection();\n+             PreparedStatement prepStmt = dbConnection.prepareStatement(sqlStmt)) {\n+            try (ResultSet rs = prepStmt.executeQuery()) {\n+                if (rs.next()) {\n+                    tenantCount = Integer.parseInt(rs.getString(1));\n+                }\n+            }\n+        } catch (SQLException e) {\n+            throw new UserStoreException(\"Error occurred while retrieving tenant count\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0d166fd0a2550a06fe1a49996846ef2549f7537"}, "originalPosition": 265}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "91174a9c7f5b7fd1e2ec7001b43ff77240520df9", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/91174a9c7f5b7fd1e2ec7001b43ff77240520df9", "committedDate": "2020-04-09T08:42:00Z", "message": "Fix db2 issue"}, "afterCommit": {"oid": "a26155b8b1bc1b7d13e12d6b640b443f1d5d0022", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/a26155b8b1bc1b7d13e12d6b640b443f1d5d0022", "committedDate": "2020-04-09T08:44:51Z", "message": "Fix PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a26155b8b1bc1b7d13e12d6b640b443f1d5d0022", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/a26155b8b1bc1b7d13e12d6b640b443f1d5d0022", "committedDate": "2020-04-09T08:44:51Z", "message": "Fix PR comments"}, "afterCommit": {"oid": "8f5f394bf9a7d3f2eeef913c06e5000d55eeeb59", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8f5f394bf9a7d3f2eeef913c06e5000d55eeeb59", "committedDate": "2020-04-09T11:44:21Z", "message": "Fix PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f714409c53e7f67ddf0831833ce112aa26dd8cfc", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/f714409c53e7f67ddf0831833ce112aa26dd8cfc", "committedDate": "2020-04-09T14:16:58Z", "message": "Fix PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f5f394bf9a7d3f2eeef913c06e5000d55eeeb59", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8f5f394bf9a7d3f2eeef913c06e5000d55eeeb59", "committedDate": "2020-04-09T11:44:21Z", "message": "Fix PR comments"}, "afterCommit": {"oid": "f714409c53e7f67ddf0831833ce112aa26dd8cfc", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/f714409c53e7f67ddf0831833ce112aa26dd8cfc", "committedDate": "2020-04-09T14:16:58Z", "message": "Fix PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2236da30e88be3efb8383d70ca34131e456086e0", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/2236da30e88be3efb8383d70ca34131e456086e0", "committedDate": "2020-04-09T14:36:54Z", "message": "Add sql query to add tenant uuid"}, "afterCommit": {"oid": "4c8a0d6cfa5a24dabcf57e797b683300306d626f", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/4c8a0d6cfa5a24dabcf57e797b683300306d626f", "committedDate": "2020-04-09T14:47:24Z", "message": "Add new column tenant uuid and config for maxlimit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/ccde77fa944eea1b9fa092281a16de200dfd4751", "committedDate": "2020-04-09T14:58:46Z", "message": "Add new column tenant uuid and config for maxlimit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c8a0d6cfa5a24dabcf57e797b683300306d626f", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/4c8a0d6cfa5a24dabcf57e797b683300306d626f", "committedDate": "2020-04-09T14:47:24Z", "message": "Add new column tenant uuid and config for maxlimit"}, "afterCommit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/ccde77fa944eea1b9fa092281a16de200dfd4751", "committedDate": "2020-04-09T14:58:46Z", "message": "Add new column tenant uuid and config for maxlimit"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjQ1NTg0", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391245584", "createdAt": "2020-04-10T03:04:57Z", "commit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNDo1N1rOGDvypA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNDo1N1rOGDvypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MTkyNA==", "bodyText": "Need to make UM_TENANT_UUID as unique.", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r406581924", "createdAt": "2020-04-10T03:04:57Z", "author": {"login": "IsuraD"}, "path": "distribution/kernel/carbon-home/dbscripts/db2.sql", "diffHunk": "@@ -370,6 +370,7 @@ BEGIN ATOMIC\n \n CREATE TABLE UM_TENANT(\n     UM_ID DECIMAL(31,0) NOT NULL,\n+    UM_TENANT_UUID VARCHAR(36) NOT NULL,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjQ1NjYx", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391245661", "createdAt": "2020-04-10T03:05:23Z", "commit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNToyM1rOGDvy6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNToyM1rOGDvy6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MTk5NA==", "bodyText": "unncessary new line", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r406581994", "createdAt": "2020-04-10T03:05:23Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/TenantUniqueIdCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.wso2.carbon.user.core.tenant;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Tenant unique id cache which holds tenant unique id as the key and tenant as the entry.\n+ */\n+public class TenantUniqueIdCache {\n+\n+    private static final String TENANT_UNIQUE_ID_CACHE_MANAGER = \"TENANT_UNIQUE_ID_CACHE_MANAGER\";\n+    private static final String TENANT_UNIQUE_ID_CACHE = \"TENANT_UNIQUE_ID_CACHE\";\n+    private static Log log = LogFactory.getLog(TenantUniqueIdCache.class);\n+    private static TenantUniqueIdCache tenantUniqueIdCache = new TenantUniqueIdCache();\n+\n+    private TenantUniqueIdCache() {\n+\n+    }\n+\n+    /**\n+     * Gets a new instance of TenantUniqueIdCache.\n+     *\n+     * @return A new instance of TenantUniqueIdCache.\n+     */\n+    public synchronized static TenantUniqueIdCache getInstance() {\n+\n+        return tenantUniqueIdCache;\n+    }\n+\n+    /**\n+     * Getting existing cache if the cache available, else returns a newly created cache.\n+     * This logic handles by javax.cache implementation\n+     */\n+    private <T> Cache<TenantUniqueIDKey, T> getTenantUUIDCache() {\n+\n+        Cache<TenantUniqueIDKey, T> cache;\n+        CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(TENANT_UNIQUE_ID_CACHE_MANAGER);\n+        cache = cacheManager.getCache(TENANT_UNIQUE_ID_CACHE);\n+        return cache;\n+    }\n+\n+    /**\n+     * Add a cache entry.\n+     * Tenant\n+     *\n+     * @param key   Key which cache entry is indexed.\n+     * @param entry Actual object where cache entry is placed.\n+     */\n+    public <T> void addToCache(TenantUniqueIDKey key, T entry) {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+            // Element already in the cache. Remove it first.\n+            clearCacheEntry(key);\n+            Cache<TenantUniqueIDKey, T> cache = getTenantUUIDCache();\n+            if (cache != null) {\n+                cache.put(key, entry);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"added the entry : \" + entry + \" for the key : \" + key + \" successfully\");\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Retrieves a cache entry.\n+     *\n+     * @param key CacheKey\n+     * @return Cached entry if the key presents, else returns null.\n+     */\n+    public <T> T getValueFromCache(TenantUniqueIDKey key) {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+\n+            Cache<TenantUniqueIDKey, T> cache = getTenantUUIDCache();\n+            if (cache != null) {\n+                if (cache.containsKey(key)) {\n+                    T entry = cache.get(key);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER +\n+                                \", found the entry : \" + entry + \" for the key : \" + key + \" successfully\");\n+                    }\n+                    return entry;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"doesn't contain the key : \" + key);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+            return null;\n+\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Clears a cache entry.\n+     *\n+     * @param key Key to clear cache.\n+     */\n+    public void clearCacheEntry(TenantUniqueIDKey key) {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+\n+            Cache<TenantUniqueIDKey, Object> cache = getTenantUUIDCache();\n+            if (cache != null) {\n+                if (cache.containsKey(key)) {\n+                    cache.remove(key);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", is \"\n+                                + \"removed entry for the key : \" + key + \" successfully\");\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"doesn't contain the key : \" + key);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    private void startSuperTenantFlow() {\n+\n+        PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n+        carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n+        carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+    }\n+\n+    /**\n+     * Remove everything in the cache.\n+     */\n+    public void clear() {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+            Cache<TenantUniqueIDKey, Object> tenantUniqueIDCache = getTenantUUIDCache();\n+            if (tenantUniqueIDCache != null) {\n+                tenantUniqueIDCache.removeAll();\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"is cleared successfully\");\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "originalPosition": 192}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjQ1NzA1", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391245705", "createdAt": "2020-04-10T03:05:35Z", "commit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNTozNlrOGDvzGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNTozNlrOGDvzGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MjA0MA==", "bodyText": "unncessary new line", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r406582040", "createdAt": "2020-04-10T03:05:36Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/TenantUniqueIdCache.java", "diffHunk": "@@ -0,0 +1,193 @@\n+package org.wso2.carbon.user.core.tenant;\n+\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n+import org.wso2.carbon.context.PrivilegedCarbonContext;\n+import org.wso2.carbon.utils.multitenancy.MultitenantConstants;\n+\n+import javax.cache.Cache;\n+import javax.cache.CacheManager;\n+import javax.cache.Caching;\n+\n+/**\n+ * Tenant unique id cache which holds tenant unique id as the key and tenant as the entry.\n+ */\n+public class TenantUniqueIdCache {\n+\n+    private static final String TENANT_UNIQUE_ID_CACHE_MANAGER = \"TENANT_UNIQUE_ID_CACHE_MANAGER\";\n+    private static final String TENANT_UNIQUE_ID_CACHE = \"TENANT_UNIQUE_ID_CACHE\";\n+    private static Log log = LogFactory.getLog(TenantUniqueIdCache.class);\n+    private static TenantUniqueIdCache tenantUniqueIdCache = new TenantUniqueIdCache();\n+\n+    private TenantUniqueIdCache() {\n+\n+    }\n+\n+    /**\n+     * Gets a new instance of TenantUniqueIdCache.\n+     *\n+     * @return A new instance of TenantUniqueIdCache.\n+     */\n+    public synchronized static TenantUniqueIdCache getInstance() {\n+\n+        return tenantUniqueIdCache;\n+    }\n+\n+    /**\n+     * Getting existing cache if the cache available, else returns a newly created cache.\n+     * This logic handles by javax.cache implementation\n+     */\n+    private <T> Cache<TenantUniqueIDKey, T> getTenantUUIDCache() {\n+\n+        Cache<TenantUniqueIDKey, T> cache;\n+        CacheManager cacheManager = Caching.getCacheManagerFactory().getCacheManager(TENANT_UNIQUE_ID_CACHE_MANAGER);\n+        cache = cacheManager.getCache(TENANT_UNIQUE_ID_CACHE);\n+        return cache;\n+    }\n+\n+    /**\n+     * Add a cache entry.\n+     * Tenant\n+     *\n+     * @param key   Key which cache entry is indexed.\n+     * @param entry Actual object where cache entry is placed.\n+     */\n+    public <T> void addToCache(TenantUniqueIDKey key, T entry) {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+            // Element already in the cache. Remove it first.\n+            clearCacheEntry(key);\n+            Cache<TenantUniqueIDKey, T> cache = getTenantUUIDCache();\n+            if (cache != null) {\n+                cache.put(key, entry);\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"added the entry : \" + entry + \" for the key : \" + key + \" successfully\");\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Retrieves a cache entry.\n+     *\n+     * @param key CacheKey\n+     * @return Cached entry if the key presents, else returns null.\n+     */\n+    public <T> T getValueFromCache(TenantUniqueIDKey key) {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+\n+            Cache<TenantUniqueIDKey, T> cache = getTenantUUIDCache();\n+            if (cache != null) {\n+                if (cache.containsKey(key)) {\n+                    T entry = cache.get(key);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER +\n+                                \", found the entry : \" + entry + \" for the key : \" + key + \" successfully\");\n+                    }\n+                    return entry;\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"doesn't contain the key : \" + key);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+            return null;\n+\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    /**\n+     * Clears a cache entry.\n+     *\n+     * @param key Key to clear cache.\n+     */\n+    public void clearCacheEntry(TenantUniqueIDKey key) {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+\n+            Cache<TenantUniqueIDKey, Object> cache = getTenantUUIDCache();\n+            if (cache != null) {\n+                if (cache.containsKey(key)) {\n+                    cache.remove(key);\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", is \"\n+                                + \"removed entry for the key : \" + key + \" successfully\");\n+                    }\n+                }\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"doesn't contain the key : \" + key);\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+\n+        } finally {\n+            PrivilegedCarbonContext.endTenantFlow();\n+        }\n+    }\n+\n+    private void startSuperTenantFlow() {\n+\n+        PrivilegedCarbonContext carbonContext = PrivilegedCarbonContext.getThreadLocalCarbonContext();\n+        carbonContext.setTenantId(MultitenantConstants.SUPER_TENANT_ID);\n+        carbonContext.setTenantDomain(MultitenantConstants.SUPER_TENANT_DOMAIN_NAME);\n+    }\n+\n+    /**\n+     * Remove everything in the cache.\n+     */\n+    public void clear() {\n+\n+        PrivilegedCarbonContext.startTenantFlow();\n+\n+        try {\n+            startSuperTenantFlow();\n+            Cache<TenantUniqueIDKey, Object> tenantUniqueIDCache = getTenantUUIDCache();\n+            if (tenantUniqueIDCache != null) {\n+                tenantUniqueIDCache.removeAll();\n+                if (log.isDebugEnabled()) {\n+                    log.debug(TENANT_UNIQUE_ID_CACHE + \" which is under \" + TENANT_UNIQUE_ID_CACHE_MANAGER + \", \" +\n+                            \"is cleared successfully\");\n+                }\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Error while getting the cache : \" + TENANT_UNIQUE_ID_CACHE + \" which is under \" +\n+                            TENANT_UNIQUE_ID_CACHE_MANAGER);\n+                }\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "originalPosition": 187}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjQ2MTE3", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391246117", "createdAt": "2020-04-10T03:07:47Z", "commit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNzo0N1rOGDv0hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwMzowNzo0N1rOGDv0hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjU4MjQwNg==", "bodyText": "We need to add tenantUUID cache as well", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r406582406", "createdAt": "2020-04-10T03:07:47Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/JDBCTenantManager.java", "diffHunk": "@@ -114,6 +132,9 @@ public int addTenant(org.wso2.carbon.user.api.Tenant tenant) throws UserStoreExc\n             InputStream is = new ByteArrayInputStream(realmConfigString.getBytes());\n             prepStmt.setBinaryStream(4, is, is.available());\n \n+            if (tenant.getTenantUniqueID() != null) {\n+                prepStmt.setString(5, tenant.getTenantUniqueID());\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ccde77fa944eea1b9fa092281a16de200dfd4751"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e305a859c9959d457789b0e24aae5600c2264652", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/e305a859c9959d457789b0e24aae5600c2264652", "committedDate": "2020-04-10T04:03:46Z", "message": "Fix PR comments"}, "afterCommit": {"oid": "894d81dbd3d97f340d577e4e8299ef1a931a96b7", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/894d81dbd3d97f340d577e4e8299ef1a931a96b7", "committedDate": "2020-04-10T04:05:31Z", "message": "Fix PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "894d81dbd3d97f340d577e4e8299ef1a931a96b7", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/894d81dbd3d97f340d577e4e8299ef1a931a96b7", "committedDate": "2020-04-10T04:05:31Z", "message": "Fix PR comments"}, "afterCommit": {"oid": "382f6f79445ea7b653b60d3385918b9e4d676e2d", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/382f6f79445ea7b653b60d3385918b9e4d676e2d", "committedDate": "2020-04-10T04:46:57Z", "message": "Fix PR comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "024366877d534667c50f9b8eea9139dd6907dde9", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/024366877d534667c50f9b8eea9139dd6907dde9", "committedDate": "2020-04-10T04:50:07Z", "message": "Fix PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "382f6f79445ea7b653b60d3385918b9e4d676e2d", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/382f6f79445ea7b653b60d3385918b9e4d676e2d", "committedDate": "2020-04-10T04:46:57Z", "message": "Fix PR comments"}, "afterCommit": {"oid": "024366877d534667c50f9b8eea9139dd6907dde9", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/024366877d534667c50f9b8eea9139dd6907dde9", "committedDate": "2020-04-10T04:50:07Z", "message": "Fix PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMjY4ODQ4", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391268848", "createdAt": "2020-04-10T05:11:03Z", "commit": {"oid": "024366877d534667c50f9b8eea9139dd6907dde9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNToxMTowNFrOGDxMGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQwNToxMTowNFrOGDxMGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjYwNDgyNA==", "bodyText": "both should unique separately.", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r406604824", "createdAt": "2020-04-10T05:11:04Z", "author": {"login": "IsuraD"}, "path": "distribution/kernel/carbon-home/dbscripts/mysql_cluster.sql", "diffHunk": "@@ -191,13 +191,14 @@ CREATE TABLE IF NOT EXISTS REG_SNAPSHOT (\n \n CREATE TABLE UM_TENANT (\n \t\t\tUM_ID INTEGER NOT NULL AUTO_INCREMENT,\n+\t\t\tUM_TENANT_UUID VARCHAR(36) NOT NULL,\n \t        UM_DOMAIN_NAME VARCHAR(255) NOT NULL,\n             UM_EMAIL VARCHAR(255),\n             UM_ACTIVE BOOLEAN DEFAULT FALSE,\n \t        UM_CREATED_DATE TIMESTAMP NOT NULL,\n \t        UM_USER_CONFIG LONGBLOB,\n \t\t\tPRIMARY KEY (UM_ID),\n-\t\t\tUNIQUE(UM_DOMAIN_NAME)\n+\t\t\tUNIQUE(UM_DOMAIN_NAME,UM_TENANT_UUID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024366877d534667c50f9b8eea9139dd6907dde9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3110b0c0c793ab923d3bf040bd14a6255e2b7148", "author": {"user": {"login": "nilasini", "name": "nilasini"}}, "url": "https://github.com/wso2/carbon-kernel/commit/3110b0c0c793ab923d3bf040bd14a6255e2b7148", "committedDate": "2020-04-10T09:30:07Z", "message": "Add column existing logic"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzc2MjU3", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391376257", "createdAt": "2020-04-10T10:26:03Z", "commit": {"oid": "3110b0c0c793ab923d3bf040bd14a6255e2b7148"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNjowM1rOGD2_9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMFQxMDoyNjowM1rOGD2_9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjcwMDAyMg==", "bodyText": "This should execute only in server startup?", "url": "https://github.com/wso2/carbon-kernel/pull/2647#discussion_r406700022", "createdAt": "2020-04-10T10:26:03Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/tenant/JDBCTenantManager.java", "diffHunk": "@@ -825,4 +1030,177 @@ private StringBuilder printCurrentStackTrace() {\n         }\n         return currentStackTraceBuilder;\n     }\n+\n+    /**\n+     * Get total number of tenant existing in the system.\n+     *\n+     * @return number of tenant count.\n+     * @throws UserStoreException Error when getting count of tenants.\n+     */\n+    private int getCountOfTenants() throws UserStoreException {\n+\n+        String sqlStmt = TenantConstants.LIST_TENANTS_COUNT_SQL;\n+        int tenantCount = 0;\n+        try (Connection dbConnection = getDBConnection();\n+             PreparedStatement prepStmt = dbConnection.prepareStatement(sqlStmt)) {\n+            try (ResultSet rs = prepStmt.executeQuery()) {\n+                if (rs.next()) {\n+                    tenantCount = Integer.parseInt(rs.getString(1));\n+                }\n+            }\n+        } catch (SQLException e) {\n+            throw new UserStoreException(\"Error occurred while retrieving tenant count.\", e);\n+        }\n+        return tenantCount;\n+    }\n+\n+    private ResultSet getTenantQueryResultSet(Connection dbConnection, String sortedOrder, Integer offset,\n+                                              Integer limit) throws SQLException, UserStoreException {\n+\n+        String dbType = dbConnection.getMetaData().getDatabaseProductName();\n+        PreparedStatement prepStmt;\n+        String sqlQuery;\n+        String sqlTail;\n+        sqlQuery = TenantConstants.LIST_TENANTS_PAGINATED_SQL;\n+\n+        if (dbType.contains(\"MySQL\") || dbType.contains(\"H2\")) {\n+            sqlTail = String.format(TenantConstants.LIST_TENANTS_MYSQL_TAIL, sortedOrder);\n+            sqlQuery = sqlQuery + sqlTail;\n+            prepStmt = dbConnection.prepareStatement(sqlQuery);\n+            prepStmt.setInt(1, offset);\n+            prepStmt.setInt(2, limit);\n+        } else if (dbType.contains(\"oracle\")) {\n+            sqlQuery = TenantConstants.LIST_TENANTS_PAGINATED_ORACLE;\n+            sqlTail = String.format(TenantConstants.LIST_TENANTS_ORACLE_TAIL, sortedOrder);\n+            sqlQuery = sqlQuery + sqlTail;\n+            prepStmt = dbConnection.prepareStatement(sqlQuery);\n+            prepStmt.setInt(1, offset + limit);\n+            prepStmt.setInt(2, offset);\n+        } else if (dbType.contains(\"Microsoft\")) {\n+            sqlTail = String.format(TenantConstants.LIST_TENANTS_MSSQL_TAIL, sortedOrder);\n+            sqlQuery = sqlQuery + sqlTail;\n+            prepStmt = dbConnection.prepareStatement(sqlQuery);\n+            prepStmt.setInt(1, offset);\n+            prepStmt.setInt(2, limit);\n+        } else if (dbType.contains(\"db2\") || dbType.contains(\"DB2\")) {\n+            sqlQuery = TenantConstants.LIST_TENANTS_PAGINATED_DB2;\n+            sqlTail = String.format(TenantConstants.LIST_TENANTS_DB2_TAIL, sortedOrder);\n+            sqlQuery = sqlQuery + sqlTail;\n+            prepStmt = dbConnection.prepareStatement(sqlQuery);\n+            prepStmt.setInt(1, offset + 1);\n+            prepStmt.setInt(2, offset + limit);\n+        } else if (dbType.contains(\"PostgreSQL\")) {\n+            sqlTail = String.format(TenantConstants.LIST_TENANTS_POSTGRESQL_TAIL, sortedOrder);\n+            sqlQuery = sqlQuery + sqlTail;\n+            prepStmt = dbConnection.prepareStatement(sqlQuery);\n+            prepStmt.setInt(1, limit);\n+            prepStmt.setInt(2, offset);\n+        } else {\n+            String message = \"Error while loading tenant from DB: Database driver could not be identified\" +\n+                    \" or not supported.\";\n+            log.error(message);\n+            throw new UserStoreException(message);\n+        }\n+        return prepStmt.executeQuery();\n+    }\n+\n+    private List<Tenant> populateTenantList(ResultSet resultSet)\n+            throws SQLException, UserStoreException {\n+\n+        List<Tenant> tenantList = new ArrayList<Tenant>();\n+        while (resultSet.next()) {\n+            int id = resultSet.getInt(COLUMN_NAME_UM_ID);\n+            String domain = resultSet.getString(COLUMN_NAME_UM_DOMAIN_NAME);\n+            String email = resultSet.getString(COLUMN_NAME_UM_EMAIL);\n+            boolean active = resultSet.getBoolean(COLUMN_NAME_UM_ACTIVE);\n+            Date createdDate = new Date(resultSet.getTimestamp(\n+                    COLUMN_NAME_UM_CREATED_DATE).getTime());\n+            String tenantUniqueId = resultSet.getString(COLUMN_NAME_UM_TENANT_UUID);\n+\n+            InputStream is = resultSet.getBinaryStream(COLUMN_NAME_UM_USER_CONFIG);\n+\n+            RealmConfigXMLProcessor processor = new RealmConfigXMLProcessor();\n+            RealmConfiguration realmConfig = processor.buildTenantRealmConfiguration(is);\n+\n+            Tenant tenant = new Tenant();\n+            tenant.setId(id);\n+            tenant.setDomain(domain);\n+            tenant.setEmail(email);\n+            tenant.setActive(active);\n+            tenant.setTenantUniqueID(tenantUniqueId);\n+            tenant.setCreatedDate(createdDate);\n+            String adminUserName = realmConfig.getAdminUserName();\n+            tenant.setAdminName(adminUserName);\n+            tenant.setAdminUserId(getUserId(adminUserName, id));\n+            tenantList.add(tenant);\n+        }\n+        return tenantList;\n+    }\n+\n+    private String getUserId(String userName, int tenantId) throws UserStoreException {\n+\n+        String claimValue = null;\n+        RealmService realmService = UserStoreMgtDSComponent.getRealmService();\n+        try {\n+            UserRealm tenantUserRealm = realmService.getTenantUserRealm(tenantId);\n+            if (tenantUserRealm != null) {\n+                UserStoreManager userStoreManager = (UserStoreManager) tenantUserRealm.getUserStoreManager();\n+                if (userStoreManager != null) {\n+                    claimValue = userStoreManager.getUserClaimValue(userName, UserCoreClaimConstants.USER_ID_CLAIM_URI,\n+                            UserCoreConstants.DEFAULT_PROFILE);\n+                }\n+            }\n+        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            throw new UserStoreException(\"Error while getting claim value for the claim: \" +\n+                    UserCoreClaimConstants.USER_ID_CLAIM_URI, e);\n+        }\n+        return claimValue;\n+    }\n+\n+    private boolean isTenantUniqueIdColumnAvailable() throws UserStoreException {\n+\n+        if (tenantUniqueIdColumnAvailable == null) {\n+            tenantUniqueIdColumnAvailable =  checkUniqueIdColumnInTable();\n+        }\n+        return tenantUniqueIdColumnAvailable;\n+    }\n+\n+    private boolean checkUniqueIdColumnInTable() throws UserStoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3110b0c0c793ab923d3bf040bd14a6255e2b7148"}, "originalPosition": 587}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxMzgxMTA3", "url": "https://github.com/wso2/carbon-kernel/pull/2647#pullrequestreview-391381107", "createdAt": "2020-04-10T10:40:45Z", "commit": {"oid": "3110b0c0c793ab923d3bf040bd14a6255e2b7148"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2103, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}