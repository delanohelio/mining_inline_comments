{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2Njc1NzY3", "number": 2544, "title": "Added interface methods needed for group-id implementation", "bodyText": "This PR includes the interface methods that are used for the main operations of unique id support for groups.\n\n\nGroup and User  Class will be extended from an Entity class and in the future, we can extend User Class too through this AbstractEntity.\n\n\nResolves wso2/product-is#7365", "createdAt": "2020-01-24T04:38:36Z", "url": "https://github.com/wso2/carbon-kernel/pull/2544", "merged": true, "mergeCommit": {"oid": "08453af750f2fe2e165714573075fc902adfed99"}, "closed": true, "closedAt": "2020-01-29T07:18:09Z", "author": {"login": "GDRDABARERA"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb9bS8JAFqTM0NzgxMzY1NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAqCWsAFqTM1MjEzODY4MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODEzNjU1", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-347813655", "createdAt": "2020-01-24T08:52:08Z", "commit": {"oid": "0bf567e574f8cfa17e4a93b037fd438fd3ba3041"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwODo1MjowOFrOFhXEkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQwOTowMDoyOVrOFhXQ1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyNTMyOQ==", "bodyText": "Let's not return null. better we return java 8 optional. as this is 4.6.x kernel or we can return empty list even", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370525329", "createdAt": "2020-01-24T08:52:08Z", "author": {"login": "senthalan"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,174 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param UserID    User ID.\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)\n+            throws UserStoreException {\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default List<User> getUserListOfGroup(String groupID, Condition condition, int limit, int offset)\n+            throws UserStoreException {\n+\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf567e574f8cfa17e4a93b037fd438fd3ba3041"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDUyODQ2OA==", "bodyText": "The permission is also an attribute of the Group", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370528468", "createdAt": "2020-01-24T09:00:29Z", "author": {"login": "senthalan"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ *\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Group.\n+ */\n+public class Group extends AbstractEntity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0bf567e574f8cfa17e4a93b037fd438fd3ba3041"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bf567e574f8cfa17e4a93b037fd438fd3ba3041", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/0bf567e574f8cfa17e4a93b037fd438fd3ba3041", "committedDate": "2020-01-24T04:33:36Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "8ffa5fad6d43fe0963e82100b1882bd476121d2d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8ffa5fad6d43fe0963e82100b1882bd476121d2d", "committedDate": "2020-01-24T10:06:30Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ffa5fad6d43fe0963e82100b1882bd476121d2d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8ffa5fad6d43fe0963e82100b1882bd476121d2d", "committedDate": "2020-01-24T10:06:30Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "f5d1780a546656886ff3425504ba6eff5bd8c5a7", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/f5d1780a546656886ff3425504ba6eff5bd8c5a7", "committedDate": "2020-01-24T10:15:56Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5d1780a546656886ff3425504ba6eff5bd8c5a7", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/f5d1780a546656886ff3425504ba6eff5bd8c5a7", "committedDate": "2020-01-24T10:15:56Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "committedDate": "2020-01-24T11:08:02Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ3ODg4ODQy", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-347888842", "createdAt": "2020-01-24T11:14:33Z", "commit": {"oid": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDozM1rOFhaqKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yNFQxMToxNDozM1rOFhaqKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDU4NDEwNQ==", "bodyText": "sortBy, sortOrder", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r370584105", "createdAt": "2020-01-24T11:14:33Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,143 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param UserID    User ID.\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String UserID, Condition condition, int limit, int offset)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/8d3705ec0b8eaa68c85ecd1ea10047dbd15a246d", "committedDate": "2020-01-24T11:08:02Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "committedDate": "2020-01-24T12:03:02Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/46ee19f4dcef89e35a1c59edbda7e31e03bbceff", "committedDate": "2020-01-24T12:03:02Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "1bb8dfd1578c43d788767b91be6fcfc698e5c8c9", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/1bb8dfd1578c43d788767b91be6fcfc698e5c8c9", "committedDate": "2020-01-27T03:47:11Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bb8dfd1578c43d788767b91be6fcfc698e5c8c9", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/1bb8dfd1578c43d788767b91be6fcfc698e5c8c9", "committedDate": "2020-01-27T03:47:11Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "a6e23eb60bd3c4e7470d9abd743f19f1c70d03d8", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/a6e23eb60bd3c4e7470d9abd743f19f1c70d03d8", "committedDate": "2020-01-27T04:01:26Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a6e23eb60bd3c4e7470d9abd743f19f1c70d03d8", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/a6e23eb60bd3c4e7470d9abd743f19f1c70d03d8", "committedDate": "2020-01-27T04:01:26Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "b3a05698adfb9736b469a84729817155cf8901fc", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/b3a05698adfb9736b469a84729817155cf8901fc", "committedDate": "2020-01-27T05:08:30Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/9898f884800b1fb7ecb03ca679a7062684b45cb8", "committedDate": "2020-01-27T05:25:41Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3a05698adfb9736b469a84729817155cf8901fc", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/b3a05698adfb9736b469a84729817155cf8901fc", "committedDate": "2020-01-27T05:08:30Z", "message": "Added interface methods needed for group-id implementation"}, "afterCommit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/9898f884800b1fb7ecb03ca679a7062684b45cb8", "committedDate": "2020-01-27T05:25:41Z", "message": "Added interface methods needed for group-id implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f92f9decdb42c5461c858b13ca42eb0b631d51a3", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/f92f9decdb42c5461c858b13ca42eb0b631d51a3", "committedDate": "2020-01-27T09:09:39Z", "message": "Merge branch '4.6.x' of https://github.com/wso2/carbon-kernel into group-id-feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTE3NzU2", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-349117756", "createdAt": "2020-01-28T03:55:25Z", "commit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzo1NToyNlrOFiYnkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMzo1NToyNlrOFiYnkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU5OTI1MQ==", "bodyText": "Is this differ from getGroupList?", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371599251", "createdAt": "2020-01-28T03:55:26Z", "author": {"login": "IsuraD"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException {\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Check whether a group exists or not.\n+     *\n+     * @param groupID Group ID.\n+     * @return Return true if group exists in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isGroupExist(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroups(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroups(Condition condition, int limit, int offset, String sortBy, String sortOrder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "originalPosition": 162}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MTI2MDMx", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-349126031", "createdAt": "2020-01-28T04:33:23Z", "commit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDozMzoyM1rOFiZEJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwNDozOTo0MFrOFiZICA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNjU2Ng==", "bodyText": "Complete the method comment.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371606566", "createdAt": "2020-01-28T04:33:23Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNjcwMA==", "bodyText": "This method is returning the list of groups I assume. Not only the group IDs?", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371606700", "createdAt": "2020-01-28T04:34:16Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzI3MQ==", "bodyText": "A similar method is already there in the interface. Check whether this is really needed.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371607271", "createdAt": "2020-01-28T04:37:42Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTYwNzU2MA==", "bodyText": "Shall we remove this default method as well.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r371607560", "createdAt": "2020-01-28T04:39:40Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,186 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of group IDs of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of group IDs evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users by evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    default Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9898f884800b1fb7ecb03ca679a7062684b45cb8"}, "originalPosition": 122}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e1d4ceb412f9497a93b8148c1dfeedcabaf86d3d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/e1d4ceb412f9497a93b8148c1dfeedcabaf86d3d", "committedDate": "2020-01-28T05:24:02Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "b853468833f3a2b064a7e4069982ba0eab3e0301", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/b853468833f3a2b064a7e4069982ba0eab3e0301", "committedDate": "2020-01-28T05:27:19Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b853468833f3a2b064a7e4069982ba0eab3e0301", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/b853468833f3a2b064a7e4069982ba0eab3e0301", "committedDate": "2020-01-28T05:27:19Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "e0b593ef6563c5c398162ea1b18497f8d239b617", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/e0b593ef6563c5c398162ea1b18497f8d239b617", "committedDate": "2020-01-28T09:39:44Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0b593ef6563c5c398162ea1b18497f8d239b617", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/e0b593ef6563c5c398162ea1b18497f8d239b617", "committedDate": "2020-01-28T09:39:44Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "cec0df3ee622ee4f11eedd0d0f7c24680ca988fb", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/cec0df3ee622ee4f11eedd0d0f7c24680ca988fb", "committedDate": "2020-01-28T10:14:04Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cec0df3ee622ee4f11eedd0d0f7c24680ca988fb", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/cec0df3ee622ee4f11eedd0d0f7c24680ca988fb", "committedDate": "2020-01-28T10:14:04Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "29800dadd82d537c654010daf9642145105b46e5", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/29800dadd82d537c654010daf9642145105b46e5", "committedDate": "2020-01-28T12:42:31Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29800dadd82d537c654010daf9642145105b46e5", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/29800dadd82d537c654010daf9642145105b46e5", "committedDate": "2020-01-28T12:42:31Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "committedDate": "2020-01-29T05:18:08Z", "message": "Resolve PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODczMzM5", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-349873339", "createdAt": "2020-01-29T05:44:34Z", "commit": {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0NDozNVrOFi9Ndg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNTo0NjoxOFrOFi9OwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODc3NA==", "bodyText": "The class comment seems not correct.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372198774", "createdAt": "2020-01-29T05:44:35Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * Abstract implementation of Groups and Users.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5ODg3NQ==", "bodyText": "Add a new line.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372198875", "createdAt": "2020-01-29T05:45:08Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import org.wso2.carbon.user.core.Permission;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Group.\n+ */\n+public class Group extends Entity {\n+\n+    private static final long serialVersionUID = -6157030956831929121L;\n+    private String groupID;\n+    private String groupName;\n+    private Permission[] permissions;\n+\n+    public Group() {\n+       super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjE5OTEwNQ==", "bodyText": "Better to keep the same order.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372199105", "createdAt": "2020-01-29T05:46:18Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/User.java", "diffHunk": "@@ -20,24 +20,19 @@\n \n import org.wso2.carbon.user.core.util.UserCoreUtil;\n \n-import java.io.Serializable;\n import java.util.Map;\n \n /**\n  * Represents the user.\n  *\n  * @since 4.6.0\n  */\n-public class User implements Serializable {\n+public class User extends Entity {\n \n     private static final long serialVersionUID = -8811345359211553015L;\n+    private String preferredUsername;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6"}, "originalPosition": 16}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/93059048cfe9c377a46cedba8cc6f6e270fdf8d6", "committedDate": "2020-01-29T05:18:08Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/060a72f804e4757f48714bb35ef00c0240dac13d", "committedDate": "2020-01-29T06:09:00Z", "message": "Resolve PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5ODgxMTYw", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-349881160", "createdAt": "2020-01-29T06:15:36Z", "commit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjoxNTozNlrOFi9mKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNjozMTowNVrOFi904A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTA5OA==", "bodyText": "Let's return the User object as we have done in the other addUser APIs.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372205098", "createdAt": "2020-01-29T06:15:36Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException;\n+\n+    /**\n+     * Check whether a group exists or not.\n+     *\n+     * @param groupID Group ID.\n+     * @return Return true if group exists in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isGroupExist(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Delete a group.\n+     *\n+     * @param groupID Group ID.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void deleteGroup(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Rename an existing group.\n+     *\n+     * @param groupID      Group ID.\n+     * @param newGroupName New group name.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void renameGroup(String groupID, String newGroupName) throws UserStoreException;\n+\n+    /**\n+     * Add a user.\n+     *\n+     * @param userName    User Name.\n+     * @param credential  Credentials.\n+     * @param claims      Maps of user claim values.\n+     * @param groupIDs    Array of group IDs.\n+     * @param profileName Profile name.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addUser(String userName, Object credential, Map<String, String> claims, String[] groupIDs,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNTI2MQ==", "bodyText": "Better to return the new Group object here.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372205261", "createdAt": "2020-01-29T06:16:16Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException;\n+\n+    /**\n+     * Check whether a group exists or not.\n+     *\n+     * @param groupID Group ID.\n+     * @return Return true if group exists in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isGroupExist(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Delete a group.\n+     *\n+     * @param groupID Group ID.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void deleteGroup(String groupID) throws UserStoreException;\n+\n+    /**\n+     * Rename an existing group.\n+     *\n+     * @param groupID      Group ID.\n+     * @param newGroupName New group name.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void renameGroup(String groupID, String newGroupName) throws UserStoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwNzk1MA==", "bodyText": "This should return a Map with Groups list.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372207950", "createdAt": "2020-01-29T06:27:15Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                  boolean isSharedGroup) throws UserStoreException;\n+\n+    /**\n+     * Update users that belongs to a group.\n+     *\n+     * @param groupID        Group ID.\n+     * @param deletedUserIDs Array of user IDs that deleted.\n+     * @param newUserIDs     Array of user IDs that added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateUserListOfGroup(String groupID, String[] deletedUserIDs, String[] newUserIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Update groups that a user belongs to.\n+     *\n+     * @param userID          User ID.\n+     * @param deletedGroupIDs Arrays of groups IDs that need to be deleted.\n+     * @param newGroupIDs     Array of group IDs that need to be added.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void updateGroupListOfUser(String userID, String[] deletedGroupIDs, String[] newGroupIDs)\n+            throws UserStoreException;\n+\n+    /**\n+     * Checks whether a user is in a given group.\n+     *\n+     * @param userID  User ID.\n+     * @param groupID Group ID.\n+     * @return true if user exists in the group.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    boolean isUserInGroup(String userID, String groupID) throws UserStoreException;\n+\n+    /**\n+     * Get groups of users.\n+     *\n+     * @param userIDs User IDs.\n+     * @return A map which contains group list with each user belongs.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    Map<String, List<String>> getGroupListOfUsers(List<String> userIDs) throws UserStoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIwODg2NA==", "bodyText": "Let's return the Group object here.", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r372208864", "createdAt": "2020-01-29T06:31:05Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,156 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    void addGroup(String groupName, String[] userIDList, Permission[] permissions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d"}, "originalPosition": 82}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/2e1256ea9acbfaedd1b33654557649a2152b2b5d", "committedDate": "2020-01-29T07:08:10Z", "message": "Resolve PR comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "060a72f804e4757f48714bb35ef00c0240dac13d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/060a72f804e4757f48714bb35ef00c0240dac13d", "committedDate": "2020-01-29T06:09:00Z", "message": "Resolve PR comments"}, "afterCommit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d", "author": {"user": {"login": "GDRDABARERA", "name": "Dinali Dabarera"}}, "url": "https://github.com/wso2/carbon-kernel/commit/2e1256ea9acbfaedd1b33654557649a2152b2b5d", "committedDate": "2020-01-29T07:08:10Z", "message": "Resolve PR comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5OTAwNTky", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-349900592", "createdAt": "2020-01-29T07:14:56Z", "commit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTM0NjEy", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-352134612", "createdAt": "2020-02-03T09:58:11Z", "commit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1ODoxMVrOFkrz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1ODoxMVrOFkrz7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMDg2MQ==", "bodyText": "Add id and name", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374010861", "createdAt": "2020-02-03T09:58:11Z", "author": {"login": "GDRDABARERA"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Entity.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import java.io.Serializable;\n+import java.util.Map;\n+\n+/**\n+ * Represents Entity class, which is the super class of Group and User.\n+ */\n+public class Entity implements Serializable {\n+\n+    private static final long serialVersionUID = -9038468040609754623L;\n+    protected String displayName;\n+    protected String tenantDomain;\n+    protected String userStoreDomain;\n+    protected Map<String, String> attributes;\n+\n+    public Entity() {\n+\n+    }\n+\n+    public Entity(String displayName, String tenantDomain,\n+                  String userStoreDomain, Map<String, String> attributes) {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTM1MjIw", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-352135220", "createdAt": "2020-02-03T09:59:07Z", "commit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1OTowN1rOFkr1wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QwOTo1OTowN1rOFkr1wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMTMzMA==", "bodyText": "Use a List", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374011330", "createdAt": "2020-02-03T09:59:07Z", "author": {"login": "GDRDABARERA"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/Group.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ *  Copyright (c) 2020, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.\n+ *\n+ *  WSO2 Inc. licenses this file to you under the Apache License,\n+ *  Version 2.0 (the \"License\"); you may not use this file except\n+ *  in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied. See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License.\n+ */\n+\n+package org.wso2.carbon.user.core.common;\n+\n+import org.wso2.carbon.user.core.Permission;\n+\n+import java.util.Map;\n+\n+/**\n+ * Represents a Group.\n+ */\n+public class Group extends Entity {\n+\n+    private static final long serialVersionUID = -6157030956831929121L;\n+    private String groupID;\n+    private String groupName;\n+    private Permission[] permissions;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTM3Njkx", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-352137691", "createdAt": "2020-02-03T10:03:00Z", "commit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDowMzowMVrOFkr9UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDowMzowMVrOFkr9UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxMzI2NQ==", "bodyText": "use List instead of all arrays", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374013265", "createdAt": "2020-02-03T10:03:01Z", "author": {"login": "GDRDABARERA"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,159 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n+     */\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTM4Njgx", "url": "https://github.com/wso2/carbon-kernel/pull/2544#pullrequestreview-352138681", "createdAt": "2020-02-03T10:04:40Z", "commit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDowNDo0MFrOFksAdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMDowNDo0MFrOFksAdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDAxNDA3MA==", "bodyText": "Remove sharedGroups", "url": "https://github.com/wso2/carbon-kernel/pull/2544#discussion_r374014070", "createdAt": "2020-02-03T10:04:40Z", "author": {"login": "GDRDABARERA"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/UniqueIDUserStoreManager.java", "diffHunk": "@@ -390,4 +391,159 @@ void updateUserListOfRoleWithID(String roleName, String[] deletedUserIDs, String\n      */\n     Map<String, List<String>> getRoleListOfUsersWithID(List<String> userIDs) throws UserStoreException;\n \n+    /**\n+     * Retrieves list of groups of a given user ID.\n+     *\n+     * @param userId    User ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupListOfUser(String userId, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of groups evaluating the condition.\n+     *\n+     * @param condition Conditional filter.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sorted by.\n+     * @param sortOrder Sorted order.\n+     * @return List of Group objects.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(Condition condition, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Get list of groups.\n+     *\n+     * @param noHybridGroups Whether hybrid groups exists.\n+     * @param noSystemGroups Whether system groups exists.\n+     * @param limit          No of search results. If the given value is greater than the system configured max limit\n+     *                       it will be reset to the system configured max limit.\n+     * @param offset         Start index of the user search.\n+     * @param sortBy         Sort by.\n+     * @param sortOrder      Sort order.\n+     * @return List of groups available in the system.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<Group> getGroupList(boolean noHybridGroups, boolean noSystemGroups, int limit, int offset,\n+                          String sortBy, String sortOrder) throws UserStoreException;\n+\n+    /**\n+     * Retrieves list of Users that belongs to a given group ID.\n+     *\n+     * @param groupID   Group ID.\n+     * @param limit     No of search results. If the given value is greater than the system configured max limit\n+     *                  it will be reset to the system configured max limit.\n+     * @param offset    Start index of the user search.\n+     * @param sortBy    Sort by.\n+     * @param sortOrder Sort order.\n+     * @return List of Users.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     */\n+    List<User> getUserListOfGroup(String groupID, int limit, int offset, String sortBy, String sortOrder)\n+            throws UserStoreException;\n+\n+    /**\n+     * Add a group to the system.\n+     *\n+     * @param groupName     Group's display name.\n+     * @param userIDList    Array of User IDs belongs to the group.\n+     * @param permissions   Array of permissions of the group.\n+     * @param isSharedGroup Whether the added group is a shared or not.\n+     * @throws UserStoreException thrown by the underlying UserStoreManager.\n+     * @return created Group object.\n+     */\n+    Group addGroup(String groupName, String[] userIDList, Permission[] permissions,\n+                   boolean isSharedGroup) throws UserStoreException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2e1256ea9acbfaedd1b33654557649a2152b2b5d"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2115, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}