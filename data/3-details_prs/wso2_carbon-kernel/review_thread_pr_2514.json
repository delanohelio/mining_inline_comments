{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NTE0MTM5", "number": 2514, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOTozNjozNFrODWMgYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNzowOVrODYYrWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI0NjAwMTYzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QwOTozNjozNFrOFa0M2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyNDo1M1rOFc-gKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY2MjU1Mg==", "bodyText": "Let's re-order the parameters as username,  attribute map (name ->value), profile. It should be consistent with doSetUserClaimValues()", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r363662552", "createdAt": "2020-01-07T09:36:34Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -557,8 +557,52 @@ protected void doSetUserClaimValueWithID(String userID, String claimURI, String\n      * @param profileName The profile name, can be null. If null the default profile is considered.\n      * @throws UserStoreException An unexpected exception has occurred\n      */\n-    protected abstract void doSetUserClaimValues(String userName, Map<String, String> claims,\n-                                                 String profileName) throws UserStoreException;\n+    protected void doSetUserClaimValues(String userName, Map<String, String> claims,\n+                                                 String profileName) throws UserStoreException {\n+        if (profileName == null) {\n+            profileName = UserCoreConstants.DEFAULT_PROFILE;\n+        }\n+\n+        // resolving claims to user store attributes\n+        Map<String, String> claimAttributeValueMapForPersist = resolveClaimAttributeMap(userName, claims);\n+\n+        processAttributesBeforeUpdate(claimAttributeValueMapForPersist);\n+\n+        // persist the attribute values map\n+        persistUserStoreAttributeValues(claimAttributeValueMapForPersist, userName, profileName);\n+    }\n+\n+    private Map<String, String> resolveClaimAttributeMap(String userName, Map<String, String> claims) throws UserStoreException {\n+\n+        Map<String, String> claimAttributeValueMap = new HashMap<>();\n+        try {\n+            for (Map.Entry<String, String> claimEntry : claims.entrySet()) {\n+                String claimURI = claimEntry.getKey();\n+                String attributeName = getClaimAtrribute(claimURI, userName, null);\n+                claimAttributeValueMap.put(attributeName, claimEntry.getValue());\n+            }\n+        }  catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            String errorMessage = \"Error occurred while getting claim attribute for user : \" + userName;\n+            if (log.isDebugEnabled()) {\n+                log.debug(errorMessage, e);\n+            }\n+            throw new UserStoreException(errorMessage, e);\n+        }\n+        return claimAttributeValueMap;\n+    }\n+\n+    /**\n+     * Persist a processed map of claim attribute values.\n+     *\n+     * @param processedClaimAttributeValueMapForPersist a processed map of user store attribute valeus\n+     * @param userName userName of the user\n+     * @param profileName The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException An unexpected exception has occurred\n+     */\n+    protected void persistUserStoreAttributeValues(Map<String, String> processedClaimAttributeValueMapForPersist,\n+                                                   String userName, String profileName) throws UserStoreException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e83fcec8f9dbf31f770dce5da758d9dee3efb990"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODQ4OA==", "bodyText": "This is already resolved.\nMethod name was changed to doSetUserAttributes() as well in order to make it consistent with doSetUserAttribute() method.", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365928488", "createdAt": "2020-01-13T17:24:53Z", "author": {"login": "gayashanbc"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -557,8 +557,52 @@ protected void doSetUserClaimValueWithID(String userID, String claimURI, String\n      * @param profileName The profile name, can be null. If null the default profile is considered.\n      * @throws UserStoreException An unexpected exception has occurred\n      */\n-    protected abstract void doSetUserClaimValues(String userName, Map<String, String> claims,\n-                                                 String profileName) throws UserStoreException;\n+    protected void doSetUserClaimValues(String userName, Map<String, String> claims,\n+                                                 String profileName) throws UserStoreException {\n+        if (profileName == null) {\n+            profileName = UserCoreConstants.DEFAULT_PROFILE;\n+        }\n+\n+        // resolving claims to user store attributes\n+        Map<String, String> claimAttributeValueMapForPersist = resolveClaimAttributeMap(userName, claims);\n+\n+        processAttributesBeforeUpdate(claimAttributeValueMapForPersist);\n+\n+        // persist the attribute values map\n+        persistUserStoreAttributeValues(claimAttributeValueMapForPersist, userName, profileName);\n+    }\n+\n+    private Map<String, String> resolveClaimAttributeMap(String userName, Map<String, String> claims) throws UserStoreException {\n+\n+        Map<String, String> claimAttributeValueMap = new HashMap<>();\n+        try {\n+            for (Map.Entry<String, String> claimEntry : claims.entrySet()) {\n+                String claimURI = claimEntry.getKey();\n+                String attributeName = getClaimAtrribute(claimURI, userName, null);\n+                claimAttributeValueMap.put(attributeName, claimEntry.getValue());\n+            }\n+        }  catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            String errorMessage = \"Error occurred while getting claim attribute for user : \" + userName;\n+            if (log.isDebugEnabled()) {\n+                log.debug(errorMessage, e);\n+            }\n+            throw new UserStoreException(errorMessage, e);\n+        }\n+        return claimAttributeValueMap;\n+    }\n+\n+    /**\n+     * Persist a processed map of claim attribute values.\n+     *\n+     * @param processedClaimAttributeValueMapForPersist a processed map of user store attribute valeus\n+     * @param userName userName of the user\n+     * @param profileName The profile name, can be null. If null the default profile is considered.\n+     * @throws UserStoreException An unexpected exception has occurred\n+     */\n+    protected void persistUserStoreAttributeValues(Map<String, String> processedClaimAttributeValueMapForPersist,\n+                                                   String userName, String profileName) throws UserStoreException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2MzY2MjU1Mg=="}, "originalCommit": {"oid": "e83fcec8f9dbf31f770dce5da758d9dee3efb990"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDU0MjU0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjozODoxNVrOFc9C4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjozODoxNVrOFc9C4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNDYwOA==", "bodyText": "include 'e' in the wrapped exception", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365904608", "createdAt": "2020-01-13T16:38:15Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -542,23 +619,76 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n     protected void doSetUserClaimValueWithID(String userID, String claimURI, String claimValue, String profileName)\n             throws UserStoreException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"doSetUserClaimValueWithID operation is not implemented in: \" + this.getClass());\n+        try {\n+            String attributeName = getClaimAtrribute(claimURI, userID, null);\n+            Map<String, String> userStoreAttributeValueMap = new HashMap<>();\n+            userStoreAttributeValueMap.put(attributeName, claimValue);\n+            processAttributesBeforeUpdate(userStoreAttributeValueMap);\n+\n+            for (Map.Entry<String, String> entry : userStoreAttributeValueMap.entrySet()) {\n+                doSetUserAttributeWithID(userID, entry.getKey(), entry.getValue(), profileName);\n+            }\n+        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            throw new UserStoreException(\n+                    \"Error occurred while getting the claim attribute for claimURI: \" + claimURI + \" of the user: \"\n+                            + userID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDU0NDM5OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjozODo0N1rOFc9ECg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjozODo0N1rOFc9ECg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkwNDkwNg==", "bodyText": "include 'e' in the wrapped exception", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365904906", "createdAt": "2020-01-13T16:38:47Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -503,21 +503,38 @@ protected void doDeleteUserWithID(String userID) throws UserStoreException {\n     }\n \n     /**\n-     * Set a single user claim value\n+     * Set a single user claim value.\n      *\n-     * @param userName    The user name\n-     * @param claimURI    The claim URI\n-     * @param claimValue  The value\n+     * @param userName    The user name.\n+     * @param claimURI    The claim URI.\n+     * @param claimValue  The value.\n      * @param profileName The profile name, can be null. If null the default profile is considered.\n-     * @throws UserStoreException An unexpected exception has occurred\n+     * @throws UserStoreException An unexpected exception has occurred.\n      */\n-    protected abstract void doSetUserClaimValue(String userName, String claimURI,\n-                                                String claimValue, String profileName) throws UserStoreException;\n+    protected void doSetUserClaimValue(String userName, String claimURI,\n+                                       String claimValue, String profileName) throws UserStoreException {\n+\n+        try {\n+            String attributeName = getClaimAtrribute(claimURI, userName, null);\n+            Map<String, String> userStoreAttributeValueMap = new HashMap<>();\n+\n+            userStoreAttributeValueMap.put(attributeName, claimValue);\n+            processAttributesBeforeUpdate(userStoreAttributeValueMap);\n+\n+            for (Map.Entry<String, String> entry : userStoreAttributeValueMap.entrySet()) {\n+                doSetUserAttribute(userName, entry.getKey(), entry.getValue(), profileName);\n+            }\n+        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            throw new UserStoreException(\n+                    \"Error occurred while getting the claim attribute for claimURI: \" + claimURI + \" of the user: \"\n+                            + userName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDU3ODM2OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo0ODoyOVrOFc9YoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo0ODoyOVrOFc9YoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxMDE3Ng==", "bodyText": "Let's have this like 'Not implemented for AbstractUserStoreManager, may have implementations at subclasses'", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365910176", "createdAt": "2020-01-13T16:48:29Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -7346,6 +7484,28 @@ private void handleRoleAlreadyExistExceptionWithID(String roleName, String[] use\n         return finalValues;\n     }\n \n+    /**\n+     * Handles the processing of any special user store attribute values after retrieval.\n+     *\n+     * @param userAttributes un-processed map (user store attribute name -> attribute value) of user store\n+     *                       attribute values\n+     */\n+    protected void processAttributesAfterRetrieval(Map<String, String> userAttributes) {\n+\n+        // Not implemented.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 268}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDYxNjk0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/LDAPConstants.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjo1OTozOFrOFc9wjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzoyNjoyNFrOFc-i7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNjMwMw==", "bodyText": "Why was this required?", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365916303", "createdAt": "2020-01-13T16:59:38Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/LDAPConstants.java", "diffHunk": "@@ -34,12 +34,16 @@\n     public static final String LDAP_INITIAL_CONTEXT_FACTORY = \"LDAPInitialContextFactory\";\n     //Property that defines the status of the referral to be used:\n     public static final String PROPERTY_REFERRAL = \"Referral\";\n+    public static final String UID = \"uid\";\n+    public static final String CN = \"cn\";\n+    public static final String CN_CAPITALIZED = \"CN\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyODkyOA==", "bodyText": "In the code review, it was suggested using the above constants as they have multiple usages.", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365928928", "createdAt": "2020-01-13T17:25:52Z", "author": {"login": "gayashanbc"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/LDAPConstants.java", "diffHunk": "@@ -34,12 +34,16 @@\n     public static final String LDAP_INITIAL_CONTEXT_FACTORY = \"LDAPInitialContextFactory\";\n     //Property that defines the status of the referral to be used:\n     public static final String PROPERTY_REFERRAL = \"Referral\";\n+    public static final String UID = \"uid\";\n+    public static final String CN = \"cn\";\n+    public static final String CN_CAPITALIZED = \"CN\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNjMwMw=="}, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkyOTE5OQ==", "bodyText": "eg. Read Write LDAP, and Active Directory", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365929199", "createdAt": "2020-01-13T17:26:24Z", "author": {"login": "gayashanbc"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/LDAPConstants.java", "diffHunk": "@@ -34,12 +34,16 @@\n     public static final String LDAP_INITIAL_CONTEXT_FACTORY = \"LDAPInitialContextFactory\";\n     //Property that defines the status of the referral to be used:\n     public static final String PROPERTY_REFERRAL = \"Referral\";\n+    public static final String UID = \"uid\";\n+    public static final String CN = \"cn\";\n+    public static final String CN_CAPITALIZED = \"CN\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNjMwMw=="}, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MDYyMDEzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadOnlyLDAPUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzowMDozMVrOFc9ybw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNzowMDozMVrOFc9ybw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTkxNjc4Mw==", "bodyText": "remove unnecessary new lines", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r365916783", "createdAt": "2020-01-13T17:00:31Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadOnlyLDAPUserStoreManager.java", "diffHunk": "@@ -4555,4 +4555,28 @@ public boolean isUniqueUserIdEnabled() {\n         return false;\n     }\n \n+    /**\n+     * Check whether the given attribute is configured as a binary attribute in the respective user store.\n+     *\n+     * @param attributeName Name of the attribute.\n+     * @return True for a binary attribute, else false.\n+     */\n+    protected boolean isBinaryUserAttribute(String attributeName) {\n+\n+        String ldapBinaryAttributesProperty = Optional.ofNullable(realmConfig\n+                .getUserStoreProperty(LDAPConstants.LDAP_ATTRIBUTES_BINARY)).orElse(\"\");\n+\n+        String[] ldapBinaryAttributes = StringUtils.split(ldapBinaryAttributesProperty, \",\");\n+\n+        if (ArrayUtils.isNotEmpty(ldapBinaryAttributes)) {\n+            if (log.isDebugEnabled()) {\n+                log.debug(\"LDAP binary attributes: \" + Arrays.toString(ldapBinaryAttributes));\n+            }\n+\n+            return ArrayUtils.contains(ldapBinaryAttributes, attributeName);\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d502ea69ab9abfa48eece2c6a0001d936a961d61"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjc2OTE0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxNDowN1rOFdSSSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxNDowN1rOFdSSSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1MjYxOA==", "bodyText": "Use the constant in stringutils", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r366252618", "createdAt": "2020-01-14T10:14:07Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -848,7 +847,8 @@ private static void setAdvancedProperty(String name, String displayName, String\n     }\n \n     @Override\n-    protected void processAttributesBeforeUpdate(Map<String, String> userStorePropertyValues) {\n+    protected void processAttributesBeforeUpdate(String userName, Map<String, String> userStorePropertyValues,\n+                                                 String profileName) {\n \n         String immutableAttributesProperty = Optional.ofNullable(realmConfig\n                 .getUserStoreProperty(UserStoreConfigConstants.immutableAttributes)).orElse(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cbeadbee1ae14541d91728114398e7a3838f57"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjc3MTA1OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxNDo0NVrOFdSTkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxNDo0NVrOFdSTkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1Mjk0Nw==", "bodyText": "Use the constant in stringutils", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r366252947", "createdAt": "2020-01-14T10:14:45Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -861,15 +861,16 @@ protected void processAttributesBeforeUpdate(Map<String, String> userStoreProper\n \n         if (ArrayUtils.isNotEmpty(immutableAttributes)) {\n             if (logger.isDebugEnabled()) {\n-                logger.debug(\"Active Directory maintained default attributes: \" + Arrays.toString(immutableAttributes));\n+                logger.debug(\"Skipping Active Directory maintained default attributes: \" + Arrays.toString(immutableAttributes));\n             }\n \n             Arrays.stream(immutableAttributes).map(StringUtils::trim).forEach(userStorePropertyValues::remove);\n         }\n     }\n \n     @Override\n-    protected void processAttributesAfterRetrieval(Map<String, String> userStorePropertyValues) {\n+    protected void processAttributesAfterRetrieval(String userName, Map<String, String> userStorePropertyValues,\n+                                                   String profileName) {\n \n         String timestampAttributesProperty = Optional.ofNullable(realmConfig\n                 .getUserStoreProperty(UserStoreConfigConstants.timestampAttributes)).orElse(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cbeadbee1ae14541d91728114398e7a3838f57"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjc3NTkzOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadOnlyLDAPUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxNjoxOFrOFdSWcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxNjoxOFrOFdSWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1MzY4MQ==", "bodyText": "Use a constant to UID", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r366253681", "createdAt": "2020-01-14T10:16:18Z", "author": {"login": "pulasthi7"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ReadOnlyLDAPUserStoreManager.java", "diffHunk": "@@ -677,11 +678,11 @@ public boolean doAuthenticate(String userName, Object credential) throws UserSto\n                             // Active Directory attribute: objectGUID\n                             // RFC 4530 attribute: entryUUID\n                             final byte[] bytes = (byte[]) attObject;\n-                            if (bytes.length == 16 && name.endsWith(\"UID\")) {\n+                            if (bytes.length == 16 && name.toUpperCase().endsWith(\"UID\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b0cbeadbee1ae14541d91728114398e7a3838f57"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk2NTM4OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNTo1MlrOFeNw-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNTo1MlrOFeNw-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNzEzMQ==", "bodyText": "shall we refactor this?  should start with a capital and end with \".\"? check-in other places as well", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r367227131", "createdAt": "2020-01-16T04:35:52Z", "author": {"login": "sarubi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -542,23 +619,76 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n     protected void doSetUserClaimValueWithID(String userID, String claimURI, String claimValue, String profileName)\n             throws UserStoreException {\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"doSetUserClaimValueWithID operation is not implemented in: \" + this.getClass());\n+        try {\n+            String attributeName = getClaimAtrribute(claimURI, userID, null);\n+            Map<String, String> userStoreAttributeValueMap = new HashMap<>();\n+            userStoreAttributeValueMap.put(attributeName, claimValue);\n+            processAttributesBeforeUpdateWithID(userID, userStoreAttributeValueMap, profileName);\n+\n+            for (Map.Entry<String, String> entry : userStoreAttributeValueMap.entrySet()) {\n+                doSetUserAttributeWithID(userID, entry.getKey(), entry.getValue(), profileName);\n+            }\n+        } catch (org.wso2.carbon.user.api.UserStoreException e) {\n+            throw new UserStoreException(\n+                    \"Error occurred while getting the claim attribute for claimURI: \" + claimURI + \" of the user: \"\n+                            + userID, e);\n         }\n-        throw new NotImplementedException(\n-                \"doSetUserClaimValueWithID operation is not implemented in: \" + this.getClass());\n     }\n \n     /**\n-     * Set many user claim values\n+     * Set many user claim values.\n      *\n-     * @param userName    The user name\n-     * @param claims      Map of claim URIs against values\n+     * @param userName    The user name.\n+     * @param claims      Map of claim URIs against values.\n      * @param profileName The profile name, can be null. If null the default profile is considered.\n-     * @throws UserStoreException An unexpected exception has occurred\n+     * @throws UserStoreException An unexpected exception has occurred.\n      */\n-    protected abstract void doSetUserClaimValues(String userName, Map<String, String> claims,\n-                                                 String profileName) throws UserStoreException;\n+    protected void doSetUserClaimValues(String userName, Map<String, String> claims,\n+                                        String profileName) throws UserStoreException {\n+\n+        if (profileName == null) {\n+            profileName = UserCoreConstants.DEFAULT_PROFILE;\n+        }\n+\n+        // resolving claims to user store attributes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb337ec79e67b99256f44d340beac76523e33ad7"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2ODk2NzI5OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNzowOVrOFeNyCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNlQwNDozNzowOVrOFeNyCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzIyNzQwMQ==", "bodyText": "start with a capital and end with \".\", refactor in the following methods as well", "url": "https://github.com/wso2/carbon-kernel/pull/2514#discussion_r367227401", "createdAt": "2020-01-16T04:37:09Z", "author": {"login": "sarubi"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/common/AbstractUserStoreManager.java", "diffHunk": "@@ -7346,6 +7484,54 @@ private void handleRoleAlreadyExistExceptionWithID(String roleName, String[] use\n         return finalValues;\n     }\n \n+    /**\n+     * Handles the processing of any special user store attribute values after retrieval.\n+     *\n+     * @param userName       Username of the user.\n+     * @param userAttributes un-processed map (user store attribute name -> attribute value) of user store\n+     * @param profileName    Profile name of the user.\n+     */\n+    protected void processAttributesAfterRetrieval(String userName, Map<String, String> userAttributes,\n+                                                   String profileName) {\n+        // Not implemented for AbstractUserStoreManager, may have implementations at subclasses.\n+    }\n+\n+    /**\n+     * Handles the processing of any special user store attribute values before update.\n+     *\n+     * @param userName       Username of the user.\n+     * @param userAttributes un-processed map (user store attribute name -> attribute value) of user store", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb337ec79e67b99256f44d340beac76523e33ad7"}, "originalPosition": 276}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2223, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}