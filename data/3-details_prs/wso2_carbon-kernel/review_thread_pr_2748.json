{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDY1Njky", "number": 2748, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNzowMlrOE0tABg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODo0NDoxMVrOE0tJtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk4Njk0OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNzowMlrOHskdTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTowNTo0MVrOHslb4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjcxNg==", "bodyText": "Check the comment alignment.", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516496716", "createdAt": "2020-11-03T08:37:02Z", "author": {"login": "ShanChathusanda93"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);\n+        }\n+\n+        List<String> userList = new ArrayList<String>();\n+        String[] names = new String[0];\n+        int givenMax, searchTime;\n+\n+        try {\n+            givenMax = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST + \" : \" + e);\n+            }\n+            givenMax = UserCoreConstants.MAX_USER_ROLE_LIST;\n+        }\n+\n+        try {\n+            searchTime = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME + \" : \" + e);\n+            }\n+            searchTime = UserCoreConstants.MAX_SEARCH_TIME;\n+        }\n+\n+        DirContext dirContext = null;\n+        NamingEnumeration<SearchResult> answer = null;\n+\n+        try {\n+            SearchControls searchCtls = new SearchControls();\n+            searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+            searchCtls.setTimeLimit(searchTime);\n+            searchCtls.setCountLimit(givenMax);\n+\n+            String groupSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_SEARCH_BASE);\n+            String userListFilter = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_LIST_FILTER);\n+            String memberOFAttribute = realmConfig.getUserStoreProperty(LDAPConstants.MEMBEROF_ATTRIBUTE);\n+            String groupNameAttribute = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_NAME_ATTRIBUTE);\n+            userSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.USER_SEARCH_BASE);\n+            String searchFilter = \"(&\" + userListFilter + \"(\" + memberOFAttribute + \"=\" + groupNameAttribute + \"=\"\n+                    + escapeSpecialCharactersForFilter(context.getRoleName()) + \",\" + groupSearchBase + \"))\";\n+            String userNameProperty = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_ATTRIBUTE);\n+            String displayNameAttribute = realmConfig\n+                    .getUserStoreProperty(LDAPConstants.DISPLAY_NAME_ATTRIBUTE);\n+            String returnedAtts[] = {userNameProperty, displayNameAttribute};\n+            searchCtls.setReturningAttributes(returnedAtts);\n+\n+            SearchResult sr = null;\n+            dirContext = connectionSource.getContext();\n+\n+            answer = dirContext.search(escapeDNForSearch(userSearchBase), searchFilter, searchCtls);\n+\n+            for (int index = 0; index < givenMax && answer.hasMore(); index++) {\n+                String displayName = null;\n+                String userName = null;\n+                sr = answer.next();\n+                Attributes userAttributes = sr.getAttributes();\n+                if (userAttributes != null) {\n+                    Attribute userNameAttribute = userAttributes.get(userNameProperty);\n+                    if (userNameAttribute != null) {\n+                        userName = (String) userNameAttribute.get();\n+                        if (debug) {\n+                            logger.debug(\"UserName: \" + userName);\n+                        }\n+                    }\n+                    if (StringUtils.isNotEmpty(displayNameAttribute)) {\n+                        Attribute displayAttribute = userAttributes.get(displayNameAttribute);\n+                        if (displayAttribute != null) {\n+                            displayName = (String) displayAttribute.get();\n+                        }\n+                        if (debug) {\n+                            logger.debug(\"DisplayName: \" + displayName);\n+                        }\n+                    }\n+\n+                    String domainName = realmConfig.getUserStoreProperty(\n+                            UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);\n+\n+                         /*\n+                         Username will be null in the special case where the\n+                         username attribute has changed to another", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMjczNw==", "bodyText": "Resolved in fac7931", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516512737", "createdAt": "2020-11-03T09:05:41Z", "author": {"login": "gayashanbc"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);\n+        }\n+\n+        List<String> userList = new ArrayList<String>();\n+        String[] names = new String[0];\n+        int givenMax, searchTime;\n+\n+        try {\n+            givenMax = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST + \" : \" + e);\n+            }\n+            givenMax = UserCoreConstants.MAX_USER_ROLE_LIST;\n+        }\n+\n+        try {\n+            searchTime = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME + \" : \" + e);\n+            }\n+            searchTime = UserCoreConstants.MAX_SEARCH_TIME;\n+        }\n+\n+        DirContext dirContext = null;\n+        NamingEnumeration<SearchResult> answer = null;\n+\n+        try {\n+            SearchControls searchCtls = new SearchControls();\n+            searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+            searchCtls.setTimeLimit(searchTime);\n+            searchCtls.setCountLimit(givenMax);\n+\n+            String groupSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_SEARCH_BASE);\n+            String userListFilter = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_LIST_FILTER);\n+            String memberOFAttribute = realmConfig.getUserStoreProperty(LDAPConstants.MEMBEROF_ATTRIBUTE);\n+            String groupNameAttribute = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_NAME_ATTRIBUTE);\n+            userSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.USER_SEARCH_BASE);\n+            String searchFilter = \"(&\" + userListFilter + \"(\" + memberOFAttribute + \"=\" + groupNameAttribute + \"=\"\n+                    + escapeSpecialCharactersForFilter(context.getRoleName()) + \",\" + groupSearchBase + \"))\";\n+            String userNameProperty = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_ATTRIBUTE);\n+            String displayNameAttribute = realmConfig\n+                    .getUserStoreProperty(LDAPConstants.DISPLAY_NAME_ATTRIBUTE);\n+            String returnedAtts[] = {userNameProperty, displayNameAttribute};\n+            searchCtls.setReturningAttributes(returnedAtts);\n+\n+            SearchResult sr = null;\n+            dirContext = connectionSource.getContext();\n+\n+            answer = dirContext.search(escapeDNForSearch(userSearchBase), searchFilter, searchCtls);\n+\n+            for (int index = 0; index < givenMax && answer.hasMore(); index++) {\n+                String displayName = null;\n+                String userName = null;\n+                sr = answer.next();\n+                Attributes userAttributes = sr.getAttributes();\n+                if (userAttributes != null) {\n+                    Attribute userNameAttribute = userAttributes.get(userNameProperty);\n+                    if (userNameAttribute != null) {\n+                        userName = (String) userNameAttribute.get();\n+                        if (debug) {\n+                            logger.debug(\"UserName: \" + userName);\n+                        }\n+                    }\n+                    if (StringUtils.isNotEmpty(displayNameAttribute)) {\n+                        Attribute displayAttribute = userAttributes.get(displayNameAttribute);\n+                        if (displayAttribute != null) {\n+                            displayName = (String) displayAttribute.get();\n+                        }\n+                        if (debug) {\n+                            logger.debug(\"DisplayName: \" + displayName);\n+                        }\n+                    }\n+\n+                    String domainName = realmConfig.getUserStoreProperty(\n+                            UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);\n+\n+                         /*\n+                         Username will be null in the special case where the\n+                         username attribute has changed to another", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NjcxNg=="}, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzAwNjg3OnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODo0Mjo0NlrOHskpLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOToxMTo1MFrOHslp1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTc1Nw==", "bodyText": "If we are to append more than one variable to a String, better to use String.format. WDYT?", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516499757", "createdAt": "2020-11-03T08:42:46Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTk2Ng==", "bodyText": "Shall we fix this in other places as well?", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516499966", "createdAt": "2020-11-03T08:43:12Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTc1Nw=="}, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxNjMwOA==", "bodyText": "Not necessary as String.format does not have a performance benefit over concatenation. Refer the second answer in [1].\nAlso single line concatenations are optimised [2] and converted to StringBuilder under the hood. Memory wise it has the same impact and to stick with consistency, I'm avoiding the use of StringBuilder.\n[1] https://stackoverflow.com/questions/925423/is-it-better-practice-to-use-string-format-over-string-concatenation-in-java\n[2] https://stackoverflow.com/questions/18453458/string-builder-vs-string-concatenation", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516516308", "createdAt": "2020-11-03T09:11:50Z", "author": {"login": "gayashanbc"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5OTc1Nw=="}, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNzAxMTczOnYy", "diffSide": "RIGHT", "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODo0NDoxMVrOHsksEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwOTowNTozNlrOHslbuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMDQ5OA==", "bodyText": "Formatting error. Shall we fix it?", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516500498", "createdAt": "2020-11-03T08:44:11Z", "author": {"login": "somindatommy"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);\n+        }\n+\n+        List<String> userList = new ArrayList<String>();\n+        String[] names = new String[0];\n+        int givenMax, searchTime;\n+\n+        try {\n+            givenMax = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST + \" : \" + e);\n+            }\n+            givenMax = UserCoreConstants.MAX_USER_ROLE_LIST;\n+        }\n+\n+        try {\n+            searchTime = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME + \" : \" + e);\n+            }\n+            searchTime = UserCoreConstants.MAX_SEARCH_TIME;\n+        }\n+\n+        DirContext dirContext = null;\n+        NamingEnumeration<SearchResult> answer = null;\n+\n+        try {\n+            SearchControls searchCtls = new SearchControls();\n+            searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+            searchCtls.setTimeLimit(searchTime);\n+            searchCtls.setCountLimit(givenMax);\n+\n+            String groupSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_SEARCH_BASE);\n+            String userListFilter = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_LIST_FILTER);\n+            String memberOFAttribute = realmConfig.getUserStoreProperty(LDAPConstants.MEMBEROF_ATTRIBUTE);\n+            String groupNameAttribute = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_NAME_ATTRIBUTE);\n+            userSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.USER_SEARCH_BASE);\n+            String searchFilter = \"(&\" + userListFilter + \"(\" + memberOFAttribute + \"=\" + groupNameAttribute + \"=\"\n+                    + escapeSpecialCharactersForFilter(context.getRoleName()) + \",\" + groupSearchBase + \"))\";\n+            String userNameProperty = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_ATTRIBUTE);\n+            String displayNameAttribute = realmConfig\n+                    .getUserStoreProperty(LDAPConstants.DISPLAY_NAME_ATTRIBUTE);\n+            String returnedAtts[] = {userNameProperty, displayNameAttribute};\n+            searchCtls.setReturningAttributes(returnedAtts);\n+\n+            SearchResult sr = null;\n+            dirContext = connectionSource.getContext();\n+\n+            answer = dirContext.search(escapeDNForSearch(userSearchBase), searchFilter, searchCtls);\n+\n+            for (int index = 0; index < givenMax && answer.hasMore(); index++) {\n+                String displayName = null;\n+                String userName = null;\n+                sr = answer.next();\n+                Attributes userAttributes = sr.getAttributes();\n+                if (userAttributes != null) {\n+                    Attribute userNameAttribute = userAttributes.get(userNameProperty);\n+                    if (userNameAttribute != null) {\n+                        userName = (String) userNameAttribute.get();\n+                        if (debug) {\n+                            logger.debug(\"UserName: \" + userName);\n+                        }\n+                    }\n+                    if (StringUtils.isNotEmpty(displayNameAttribute)) {\n+                        Attribute displayAttribute = userAttributes.get(displayNameAttribute);\n+                        if (displayAttribute != null) {\n+                            displayName = (String) displayAttribute.get();\n+                        }\n+                        if (debug) {\n+                            logger.debug(\"DisplayName: \" + displayName);\n+                        }\n+                    }\n+\n+                    String domainName = realmConfig.getUserStoreProperty(\n+                            UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);\n+\n+                         /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUxMjY5Ng==", "bodyText": "Resolved in fac7931", "url": "https://github.com/wso2/carbon-kernel/pull/2748#discussion_r516512696", "createdAt": "2020-11-03T09:05:36Z", "author": {"login": "gayashanbc"}, "path": "core/org.wso2.carbon.user.core/src/main/java/org/wso2/carbon/user/core/ldap/ActiveDirectoryUserStoreManager.java", "diffHunk": "@@ -625,6 +628,142 @@ protected void doSetUserAttribute(String userName, String attributeName, String\n         }\n     }\n \n+    @Override\n+    public String[] getUserListOfLDAPRole(RoleContext context, String filter) throws UserStoreException {\n+\n+        boolean debug = logger.isDebugEnabled();\n+\n+        if (debug) {\n+            logger.debug(\"Getting user list of role: \" + context.getRoleName() + \" with filter: \" + filter);\n+        }\n+\n+        List<String> userList = new ArrayList<String>();\n+        String[] names = new String[0];\n+        int givenMax, searchTime;\n+\n+        try {\n+            givenMax = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_USER_LIST + \" : \" + e);\n+            }\n+            givenMax = UserCoreConstants.MAX_USER_ROLE_LIST;\n+        }\n+\n+        try {\n+            searchTime = Integer.parseInt(realmConfig\n+                    .getUserStoreProperty(UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME));\n+        } catch (NumberFormatException e) {\n+            if (debug) {\n+                logger.debug(\"Error occurred while reading user store property: \"\n+                        + UserCoreConstants.RealmConfig.PROPERTY_MAX_SEARCH_TIME + \" : \" + e);\n+            }\n+            searchTime = UserCoreConstants.MAX_SEARCH_TIME;\n+        }\n+\n+        DirContext dirContext = null;\n+        NamingEnumeration<SearchResult> answer = null;\n+\n+        try {\n+            SearchControls searchCtls = new SearchControls();\n+            searchCtls.setSearchScope(SearchControls.SUBTREE_SCOPE);\n+            searchCtls.setTimeLimit(searchTime);\n+            searchCtls.setCountLimit(givenMax);\n+\n+            String groupSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_SEARCH_BASE);\n+            String userListFilter = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_LIST_FILTER);\n+            String memberOFAttribute = realmConfig.getUserStoreProperty(LDAPConstants.MEMBEROF_ATTRIBUTE);\n+            String groupNameAttribute = realmConfig.getUserStoreProperty(LDAPConstants.GROUP_NAME_ATTRIBUTE);\n+            userSearchBase = realmConfig.getUserStoreProperty(LDAPConstants.USER_SEARCH_BASE);\n+            String searchFilter = \"(&\" + userListFilter + \"(\" + memberOFAttribute + \"=\" + groupNameAttribute + \"=\"\n+                    + escapeSpecialCharactersForFilter(context.getRoleName()) + \",\" + groupSearchBase + \"))\";\n+            String userNameProperty = realmConfig.getUserStoreProperty(LDAPConstants.USER_NAME_ATTRIBUTE);\n+            String displayNameAttribute = realmConfig\n+                    .getUserStoreProperty(LDAPConstants.DISPLAY_NAME_ATTRIBUTE);\n+            String returnedAtts[] = {userNameProperty, displayNameAttribute};\n+            searchCtls.setReturningAttributes(returnedAtts);\n+\n+            SearchResult sr = null;\n+            dirContext = connectionSource.getContext();\n+\n+            answer = dirContext.search(escapeDNForSearch(userSearchBase), searchFilter, searchCtls);\n+\n+            for (int index = 0; index < givenMax && answer.hasMore(); index++) {\n+                String displayName = null;\n+                String userName = null;\n+                sr = answer.next();\n+                Attributes userAttributes = sr.getAttributes();\n+                if (userAttributes != null) {\n+                    Attribute userNameAttribute = userAttributes.get(userNameProperty);\n+                    if (userNameAttribute != null) {\n+                        userName = (String) userNameAttribute.get();\n+                        if (debug) {\n+                            logger.debug(\"UserName: \" + userName);\n+                        }\n+                    }\n+                    if (StringUtils.isNotEmpty(displayNameAttribute)) {\n+                        Attribute displayAttribute = userAttributes.get(displayNameAttribute);\n+                        if (displayAttribute != null) {\n+                            displayName = (String) displayAttribute.get();\n+                        }\n+                        if (debug) {\n+                            logger.debug(\"DisplayName: \" + displayName);\n+                        }\n+                    }\n+\n+                    String domainName = realmConfig.getUserStoreProperty(\n+                            UserCoreConstants.RealmConfig.PROPERTY_DOMAIN_NAME);\n+\n+                         /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjUwMDQ5OA=="}, "originalCommit": {"oid": "07fe1053fbea713fa52071d0582a97cdda0a6c4e"}, "originalPosition": 111}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2148, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}