{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MzY3NjM0", "number": 2670, "title": "Add new API in crypto util to pass the internal crypto provider type", "bodyText": "Purpose\nResolves wso2/product-is#8148\nGoals\n\nDescribe the solutions that this feature/fix will introduce to resolve the problems described above\n\nApproach\n\nDescribe how you are implementing the solutions. Include an animated GIF or screenshot if the change affects the UI (email documentation@wso2.com to review all UI text). Include a link to a Markdown file or Google doc if the feature write-up is too long to paste here.\n\nUser stories\n\nSummary of user stories addressed by this change>\n\nRelease note\n\nBrief description of the new feature or bug fix as it will appear in the release notes\n\nDocumentation\n\nLink(s) to product documentation that addresses the changes of this PR. If no doc impact, enter \u201cN/A\u201d plus brief explanation of why there\u2019s no doc impact\n\nTraining\n\nLink to the PR for changes to the training content in https://github.com/wso2/WSO2-Training, if applicable\n\nCertification\n\nType \u201cSent\u201d when you have provided new/updated certification questions, plus four answers for each question (correct answer highlighted in bold), based on this change. Certification questions/answers should be sent to certification@wso2.com and NOT pasted in this PR. If there is no impact on certification exams, type \u201cN/A\u201d and explain why.\n\nMarketing\n\nLink to drafts of marketing content that will describe and promote this feature, including product page changes, technical articles, blog posts, videos, etc., if applicable\n\nAutomation tests\n\nUnit tests\n\nCode coverage information\n\n\nIntegration tests\n\nDetails about the test cases and coverage\n\n\n\nSecurity checks\n\nFollowed secure coding standards in http://wso2.com/technical-reports/wso2-secure-engineering-guidelines? yes/no\nRan FindSecurityBugs plugin and verified report? yes/no\nConfirmed that this PR doesn't commit any keys, passwords, tokens, usernames, or other secrets? yes/no\n\nSamples\n\nProvide high-level details about the samples related to this feature\n\nRelated PRs\n\nList any other related PRs\n\nMigrations (if applicable)\n\nDescribe migration steps and platforms on which migration has been tested\n\nTest environment\n\nList all JDK versions, operating systems, databases, and browser/versions on which this feature/fix was tested\n\nLearning\n\nDescribe the research phase and any blog posts, patterns, libraries, or add-ons you used to solve the problem.", "createdAt": "2020-04-24T06:58:32Z", "url": "https://github.com/wso2/carbon-kernel/pull/2670", "merged": true, "mergeCommit": {"oid": "74200ff35f55bd16ee1aeeaed79aae6190989cee"}, "closed": true, "closedAt": "2020-05-23T05:29:25Z", "author": {"login": "denuwanthi"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcar3mvAH2gAyNDA4MzY3NjM0OjY2YjNkZWJjYWQyMTJlNjZjNDE3NWZjY2UxMjg4MjQ4Yjk4YjYzOTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcjwGS2gH2gAyNDA4MzY3NjM0OjI2MzdkMzlhZTAzM2E2NTQxNmYzMGYxOWU2NTVhNmJiMzZjMmJmMzU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/66b3debcad212e66c4175fcce1288248b98b6399", "committedDate": "2020-04-24T06:54:46Z", "message": "Add new API in crypto util to pass the internal crypto provider type"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb170027e595b1e644f1a9f9c94722d2bd58827f", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/eb170027e595b1e644f1a9f9c94722d2bd58827f", "committedDate": "2020-04-27T05:50:51Z", "message": "Merge branch '4.6.x' of https://github.com/wso2/carbon-kernel into denu-4.6.x.1.1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjcwNzg3", "url": "https://github.com/wso2/carbon-kernel/pull/2670#pullrequestreview-400670787", "createdAt": "2020-04-27T06:55:20Z", "commit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToyMVrOGMTkrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NToyMVrOGMTkrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1Njc4MA==", "bodyText": "Can't we catch the specific exception here?", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415556780", "createdAt": "2020-04-27T06:55:21Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -307,6 +377,56 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n         }\n     }\n \n+    /**\n+     * Decrypt the cipher text using the given algorithm and internal crypto provider type.\n+     *\n+     * @param cipherTextBytes            The cipher text to be decrypted.\n+     * @param algorithm                  The algorithm used for decryption.\n+     * @param internalCryptoProviderType The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return Decrypted bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] decrypt(byte[] cipherTextBytes, String algorithm, String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(cipherTextBytes,algorithm,internalCryptoProviderType);\n+\n+        byte[] decryptedValue;\n+\n+        try {\n+            CryptoService cryptoService = CarbonCoreDataHolder.getInstance().getCryptoService();\n+\n+            if (cryptoService == null) {\n+                throw new CryptoException(\"A crypto service implementation has not been registered.\");\n+            }\n+\n+            CipherMetaDataHolder\n+                    cipherMetaDataHolder = cipherTextToCipherMetaDataHolder(cipherTextBytes);\n+            if (cipherMetaDataHolder != null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\n+                            String.format(\"Cipher text is in self contained format. Retrieve the actual cipher from \" +\n+                                    \"the self contained cipher text.\"));\n+                }\n+                cipherTextBytes = cipherMetaDataHolder.getCipherBase64Decoded();\n+            }\n+\n+            if (cipherTextBytes.length == 0) {\n+                decryptedValue = StringUtils.EMPTY.getBytes();\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ciphertext is empty. An empty array will be used as the plaintext bytes.\");\n+                }\n+            } else {\n+                decryptedValue = cryptoService.decrypt(cipherTextBytes, algorithm, CRYPTO_API_PROVIDER_BC,\n+                        internalCryptoProviderType);\n+            }\n+            return decryptedValue;\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "originalPosition": 132}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNjcxNTAw", "url": "https://github.com/wso2/carbon-kernel/pull/2670#pullrequestreview-400671500", "createdAt": "2020-04-27T06:56:34Z", "commit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NjozNFrOGMTnqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo1NjozNFrOGMTnqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1NzU0Nw==", "bodyText": "Can't we catch the specific exception here?", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415557547", "createdAt": "2020-04-27T06:56:34Z", "author": {"login": "ashensw"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -170,6 +170,58 @@ public RegistryService getRegistryService() {\n         return encrypt(plainTextBytes, System.getProperty(CIPHER_TRANSFORMATION_SYSTEM_PROPERTY), true);\n     }\n \n+    /**\n+     * Encrypt a given plain text with the provided algorithm and internal crypto provider type.\n+     *\n+     * @param plainTextBytes                plain text bytes that need to be encrypted.\n+     * @param algorithm                     The encryption algorithm.\n+     * @param returnSelfContainedCipherText Create self-contained cipher text if true, return simple encrypted ciphertext otherwise.\n+     * @param internalCryptoProviderType    The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return The cipher text bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] encrypt(byte[] plainTextBytes, String algorithm, boolean returnSelfContainedCipherText,\n+                          String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(plainTextBytes, algorithm, internalCryptoProviderType);\n+\n+        byte[] encryptedKey;\n+        try {\n+\n+            CryptoService cryptoService = CarbonCoreDataHolder.getInstance().getCryptoService();\n+\n+            if (cryptoService == null) {\n+                throw new CryptoException(\"A crypto service implementation has not been registered.\");\n+            }\n+            if (plainTextBytes.length == 0) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Plaintext is empty. An empty array will be used as the ciphertext bytes.\");\n+                }\n+                encryptedKey = StringUtils.EMPTY.getBytes();\n+            } else {\n+                if (log.isDebugEnabled()) {\n+                    if (returnSelfContainedCipherText) {\n+                        log.debug(String.format(\n+                                \"Encrypting data in self contained format, with algorithm: '%s' and internal crypto \" +\n+                                        \"provider: '%s'\", algorithm, internalCryptoProviderType));\n+                    } else {\n+                        log.debug(String.format(\n+                                \"Encrypting data with algorithm: '%s' and internal crypto \" +\n+                                        \"provider: '%s'\", algorithm, internalCryptoProviderType));\n+                    }\n+                }\n+                encryptedKey = cryptoService\n+                        .encrypt(plainTextBytes, algorithm, CRYPTO_API_PROVIDER_BC, returnSelfContainedCipherText,\n+                                internalCryptoProviderType);\n+            }\n+\n+        } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66b3debcad212e66c4175fcce1288248b98b6399"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7157b37d5c65be094165fc2ee48137ca915b81c3", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/7157b37d5c65be094165fc2ee48137ca915b81c3", "committedDate": "2020-04-27T07:33:51Z", "message": "Fix PR Comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNzUwNzMx", "url": "https://github.com/wso2/carbon-kernel/pull/2670#pullrequestreview-400750731", "createdAt": "2020-04-27T08:51:05Z", "commit": {"oid": "7157b37d5c65be094165fc2ee48137ca915b81c3"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwODU1ODA2", "url": "https://github.com/wso2/carbon-kernel/pull/2670#pullrequestreview-400855806", "createdAt": "2020-04-27T11:18:37Z", "commit": {"oid": "7157b37d5c65be094165fc2ee48137ca915b81c3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToxODozOFrOGMd7rQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QxMToxODozOFrOGMd7rQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTcyNjUwOQ==", "bodyText": "formatting", "url": "https://github.com/wso2/carbon-kernel/pull/2670#discussion_r415726509", "createdAt": "2020-04-27T11:18:38Z", "author": {"login": "malithie"}, "path": "core/org.wso2.carbon.core/src/main/java/org/wso2/carbon/core/util/CryptoUtil.java", "diffHunk": "@@ -307,6 +378,56 @@ public String encryptAndBase64Encode(byte[] plainText) throws\n         }\n     }\n \n+    /**\n+     * Decrypt the cipher text using the given algorithm and internal crypto provider type.\n+     *\n+     * @param cipherTextBytes            The cipher text to be decrypted.\n+     * @param algorithm                  The algorithm used for decryption.\n+     * @param internalCryptoProviderType The {@link org.wso2.carbon.crypto.api.InternalCryptoProvider} type.\n+     * @return Decrypted bytes.\n+     * @throws CryptoException\n+     */\n+    public byte[] decrypt(byte[] cipherTextBytes, String algorithm, String internalCryptoProviderType)\n+            throws CryptoException {\n+\n+        failIfEncryptDecryptInputsAreInvalid(cipherTextBytes,algorithm,internalCryptoProviderType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7157b37d5c65be094165fc2ee48137ca915b81c3"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe82da84cda344cc5f4771cb2750525a7b3e4e98", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/fe82da84cda344cc5f4771cb2750525a7b3e4e98", "committedDate": "2020-04-28T02:56:42Z", "message": "Fix formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761477b076480a0cce6eaddfac030a70b1521766", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/761477b076480a0cce6eaddfac030a70b1521766", "committedDate": "2020-05-13T09:26:26Z", "message": "Retrieve the algorithm from self contained cipher text"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyMzE0NTY1", "url": "https://github.com/wso2/carbon-kernel/pull/2670#pullrequestreview-412314565", "createdAt": "2020-05-15T02:57:15Z", "commit": {"oid": "761477b076480a0cce6eaddfac030a70b1521766"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2637d39ae033a65416f30f19e655a6bb36c2bf35", "author": {"user": {"login": "denuwanthi", "name": "denuwanthi"}}, "url": "https://github.com/wso2/carbon-kernel/commit/2637d39ae033a65416f30f19e655a6bb36c2bf35", "committedDate": "2020-05-22T10:55:45Z", "message": "Update the cryptoservice version"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2105, "cost": 1, "resetAt": "2021-11-02T10:47:05Z"}}}