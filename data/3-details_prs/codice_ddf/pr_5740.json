{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzU5NzEzNTY1", "number": 5740, "title": "DDF-5739: Added Core itests", "bodyText": "What does this PR do?\nAdds a set of itests/smoke tests for the core functionality of DDF.\nWho is reviewing it?\n\nSelect relevant component teams:\n@codice/test\nAsk 2 committers to review/merge the PR and tag them here.\n@pklinef\n@rzwiefel\nHow should this be tested?\nVerify the tests pass\nAny background context you want to provide?\nThe current itests test a lot of functionality and are very slow. One way to improve the build is to only test the core functionality of DDF all the time. The core tests would run all the time on each build but be much faster than the full itest suite which would run nightly.\nWhat are the relevant tickets?\nFixes: #5739\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-01-06T21:05:45Z", "url": "https://github.com/codice/ddf/pull/5740", "merged": true, "mergeCommit": {"oid": "7dd632bb5d013536052d1f70e3fc710ad5a66138"}, "closed": true, "closedAt": "2020-01-22T18:30:40Z", "author": {"login": "AzGoalie"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4ay6nAFqTMzOTU0ODk5Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb8pYd2gBqjI5NjgxMDg0ODM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzM5NTQ4OTky", "url": "https://github.com/codice/ddf/pull/5740#pullrequestreview-339548992", "createdAt": "2020-01-07T22:29:17Z", "commit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wN1QyMjoyOToxN1rOFbHxSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOFQxOTo0NjowM1rOFbh5dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4MzE3OQ==", "bodyText": "\u270f\ufe0f Combine declaration and instantiation.", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363983179", "createdAt": "2020-01-07T22:29:17Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4NTE5Mw==", "bodyText": "\u2753Should we remove the corresponding tests from TestCatalog?", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363985193", "createdAt": "2020-01-07T22:35:04Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4NTc4Mw==", "bodyText": "Already handled by the configureRestForGuest() call above.", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363985783", "createdAt": "2020-01-07T22:36:49Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Mzk4NjY5MQ==", "bodyText": "Could these be moved to beforeExam()?", "url": "https://github.com/codice/ddf/pull/5740#discussion_r363986691", "createdAt": "2020-01-07T22:39:25Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwMzU4OA==", "bodyText": "Are we at a point where we could edit the failsafe plugin configuration to run only the core test file and add a Maven profile with a different configuration that runs all the tests?", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364003588", "createdAt": "2020-01-07T23:36:54Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf/pom.xml", "diffHunk": "@@ -311,6 +311,13 @@\n             <version>${pax.exam.version}</version>\n             <type>xml</type>\n         </dependency>\n+\n+        <!-- Depend on the core-itests so these only run after them-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDAwNDUyNg==", "bodyText": "\u270f\ufe0f Do we need any of these getPid() calls?", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364004526", "createdAt": "2020-01-07T23:40:29Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId;\n+    String secondId;\n+\n+    firstId = getMetacardIdFromCswInsertResponse(firstResponse);\n+    secondId = getMetacardIdFromCswInsertResponse(secondResponse);\n+\n+    String firstUrl = REST_PATH.getUrl() + firstId;\n+    when()\n+        .get(firstUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+\n+    String secondUrl = REST_PATH.getUrl() + secondId;\n+    when()\n+        .get(secondUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+  }\n+\n+  @Test\n+  public void testBasicRestAccess() throws Exception {\n+    String url = SERVICE_ROOT.getUrl() + \"/catalog/query?q=*&src=local\";\n+\n+    waitForSecurityHandlers(url);\n+\n+    configureRestForBasic(\"/services/sdk\");\n+\n+    // Make sure that no credentials receives a 401\n+    getSecurityPolicy().waitForBasicAuthReady(url);\n+    when().get(url).then().log().all().assertThat().statusCode(equalTo(401));\n+\n+    // A random user receives a 401\n+    given()\n+        .auth()\n+        .basic(\"bad\", \"user\")\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(401));\n+\n+    // A real user receives a SSO token\n+    String cookie =\n+        given()\n+            .auth()\n+            .basic(\"admin\", \"admin\")\n+            .when()\n+            .get(url)\n+            .then()\n+            .log()\n+            .ifValidationFails()\n+            .assertThat()\n+            .statusCode(equalTo(200))\n+            .assertThat()\n+            .header(\"Set-Cookie\", containsString(\"JSESSIONID\"))\n+            .extract()\n+            .cookie(\"JSESSIONID\");\n+\n+    // Try the session instead of basic auth\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+\n+    // Admin user should be able to access the admin page\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(ADMIN_PATH.getUrl())\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+  }\n+\n+  @Test\n+  public void testFederatedSpatial() throws IOException {\n+    ingest(getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+    ingestXmlWithProduct(DEFAULT_SAMPLE_PRODUCT_FILE_NAME);\n+\n+    getOpenSearch(\n+            \"xml\",\n+            null,\n+            null,\n+            \"lat=10.0\",\n+            \"lon=30.0\",\n+            \"radius=250000\",\n+            \"spatialType=POINT_RADIUS\",\n+            \"src=\" + OPENSEARCH_SOURCE_ID)\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_1\n+                    + \"']\"),\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_2\n+                    + \"']\"));\n+  }\n+\n+  @Test\n+  public void testCswQueryByTitle() {\n+    String geojsonId =\n+        ingest(\n+            getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+\n+    String titleQuery =\n+        getCswQuery(\"title\", \"myTitle\", \"application/xml\", \"http://www.opengis.net/cat/csw/2.0.2\");\n+\n+    given()\n+        .contentType(ContentType.XML)\n+        .body(titleQuery)\n+        .when()\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/Record/identifier\", Matchers.is(geojsonId)),\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/@numberOfRecordsReturned\", Matchers.is(\"1\")));\n+  }\n+\n+  private Response ingestCswRecord() {\n+    String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n+\n+    return given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(\n+            getCswInsertRequest(\n+                \"csw:Record\",\n+                getFileContent(\n+                    CSW_RECORD_RESOURCE_PATH + \"/CswRecord\", ImmutableMap.of(\"id\", uuid))))\n+        .post(CSW_PATH.getUrl());\n+  }\n+\n+  private void waitForSecurityHandlers(String url) {\n+    await(\"Waiting for security handlers to become available\")\n+        .atMost(5, TimeUnit.MINUTES)\n+        .pollDelay(1, TimeUnit.SECONDS)\n+        .until(() -> get(url).statusCode() != 503);\n+  }\n+\n+  private String ingestXmlWithProduct(String filename) throws IOException {\n+    Path path = Paths.get(filename);\n+\n+    if (Files.exists(path)) {\n+      Files.delete(Paths.get(filename));\n+    }\n+\n+    Files.createFile(path);\n+    Files.write(path, Collections.singleton(SAMPLE_DATA));\n+\n+    String fileLocation = path.toUri().toURL().toString();\n+    LOGGER.debug(\"File Location: {}\", fileLocation);\n+    return ingest(getSimpleXml(fileLocation), \"text/xml\");\n+  }\n+\n+  public static String getSimpleXml(String uri) {\n+    return \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\" standalone=\\\"yes\\\"?>\\n\"\n+        + getFileContent(\n+            XML_RECORD_RESOURCE_PATH + \"/SimpleXmlNoDecMetacard\", ImmutableMap.of(\"uri\", uri));\n+  }\n+\n+  private void setupOpenSearch() throws IOException {\n+    Map<String, Object> openSearchProperties =\n+        getOpenSearchSourceProperties(\n+            OPENSEARCH_SOURCE_ID, OPENSEARCH_PATH.getUrl(), getServiceManager());\n+    getServiceManager().createManagedService(OPENSEARCH_FACTORY_PID, openSearchProperties).getPid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 427}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQwMjQ2NQ==", "bodyText": "\u270f\ufe0f Files.delete(path)", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364402465", "createdAt": "2020-01-08T19:25:28Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+\n+    getCatalogBundle().setupCaching(false);\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    getSecurityPolicy().configureRestForGuest();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId;\n+    String secondId;\n+\n+    firstId = getMetacardIdFromCswInsertResponse(firstResponse);\n+    secondId = getMetacardIdFromCswInsertResponse(secondResponse);\n+\n+    String firstUrl = REST_PATH.getUrl() + firstId;\n+    when()\n+        .get(firstUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+\n+    String secondUrl = REST_PATH.getUrl() + secondId;\n+    when()\n+        .get(secondUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+  }\n+\n+  @Test\n+  public void testBasicRestAccess() throws Exception {\n+    String url = SERVICE_ROOT.getUrl() + \"/catalog/query?q=*&src=local\";\n+\n+    waitForSecurityHandlers(url);\n+\n+    configureRestForBasic(\"/services/sdk\");\n+\n+    // Make sure that no credentials receives a 401\n+    getSecurityPolicy().waitForBasicAuthReady(url);\n+    when().get(url).then().log().all().assertThat().statusCode(equalTo(401));\n+\n+    // A random user receives a 401\n+    given()\n+        .auth()\n+        .basic(\"bad\", \"user\")\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(401));\n+\n+    // A real user receives a SSO token\n+    String cookie =\n+        given()\n+            .auth()\n+            .basic(\"admin\", \"admin\")\n+            .when()\n+            .get(url)\n+            .then()\n+            .log()\n+            .ifValidationFails()\n+            .assertThat()\n+            .statusCode(equalTo(200))\n+            .assertThat()\n+            .header(\"Set-Cookie\", containsString(\"JSESSIONID\"))\n+            .extract()\n+            .cookie(\"JSESSIONID\");\n+\n+    // Try the session instead of basic auth\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+\n+    // Admin user should be able to access the admin page\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(ADMIN_PATH.getUrl())\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+  }\n+\n+  @Test\n+  public void testFederatedSpatial() throws IOException {\n+    ingest(getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+    ingestXmlWithProduct(DEFAULT_SAMPLE_PRODUCT_FILE_NAME);\n+\n+    getOpenSearch(\n+            \"xml\",\n+            null,\n+            null,\n+            \"lat=10.0\",\n+            \"lon=30.0\",\n+            \"radius=250000\",\n+            \"spatialType=POINT_RADIUS\",\n+            \"src=\" + OPENSEARCH_SOURCE_ID)\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_1\n+                    + \"']\"),\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_2\n+                    + \"']\"));\n+  }\n+\n+  @Test\n+  public void testCswQueryByTitle() {\n+    String geojsonId =\n+        ingest(\n+            getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+\n+    String titleQuery =\n+        getCswQuery(\"title\", \"myTitle\", \"application/xml\", \"http://www.opengis.net/cat/csw/2.0.2\");\n+\n+    given()\n+        .contentType(ContentType.XML)\n+        .body(titleQuery)\n+        .when()\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/Record/identifier\", Matchers.is(geojsonId)),\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/@numberOfRecordsReturned\", Matchers.is(\"1\")));\n+  }\n+\n+  private Response ingestCswRecord() {\n+    String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n+\n+    return given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(\n+            getCswInsertRequest(\n+                \"csw:Record\",\n+                getFileContent(\n+                    CSW_RECORD_RESOURCE_PATH + \"/CswRecord\", ImmutableMap.of(\"id\", uuid))))\n+        .post(CSW_PATH.getUrl());\n+  }\n+\n+  private void waitForSecurityHandlers(String url) {\n+    await(\"Waiting for security handlers to become available\")\n+        .atMost(5, TimeUnit.MINUTES)\n+        .pollDelay(1, TimeUnit.SECONDS)\n+        .until(() -> get(url).statusCode() != 503);\n+  }\n+\n+  private String ingestXmlWithProduct(String filename) throws IOException {\n+    Path path = Paths.get(filename);\n+\n+    if (Files.exists(path)) {\n+      Files.delete(Paths.get(filename));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 406}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDQxMTI1NA==", "bodyText": "\u2753Are the tests actually using all these sources? It looks like the only one the tests really need is the OpenSearch source.", "url": "https://github.com/codice/ddf/pull/5740#discussion_r364411254", "createdAt": "2020-01-08T19:46:03Z", "author": {"login": "jrnorth"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,477 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6267485bce585c04a16944a1d78ca821de8e4b0b"}, "originalPosition": 115}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDkyMTY1", "url": "https://github.com/codice/ddf/pull/5740#pullrequestreview-343492165", "createdAt": "2020-01-15T20:14:24Z", "commit": {"oid": "a0217af37d25d9d85a4abe3b338e3e036dbf2d25"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNDk1MTE1", "url": "https://github.com/codice/ddf/pull/5740#pullrequestreview-343495115", "createdAt": "2020-01-15T20:19:37Z", "commit": {"oid": "a0217af37d25d9d85a4abe3b338e3e036dbf2d25"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxOTozN1rOFeFNpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMDoxOTozN1rOFeFNpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzA4NzAxNA==", "bodyText": "\u2753 Should we remove all of the other tests you moved to core?", "url": "https://github.com/codice/ddf/pull/5740#discussion_r367087014", "createdAt": "2020-01-15T20:19:37Z", "author": {"login": "pklinef"}, "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "diffHunk": "@@ -515,27 +515,6 @@ private Response ingestXmlWithHeaderMetacard() {\n         .post(CSW_PATH.getUrl());\n   }\n \n-  @Test\n-  public void testCswIngest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0217af37d25d9d85a4abe3b338e3e036dbf2d25"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzNTU3NzAz", "url": "https://github.com/codice/ddf/pull/5740#pullrequestreview-343557703", "createdAt": "2020-01-15T22:12:50Z", "commit": {"oid": "e83f455188369a56f3ec692da13815ad23cc40e8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjoxMjo1MVrOFeIIWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQyMjoxMjo1MVrOFeIIWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NzEzNDgxMQ==", "bodyText": "\u2754 Should we comment on why these are considered Core tests? What are the criteria or how we determine what is a core test in the future? Not sure if belongs here, but seems like it would be great for anybody who gets into this file.", "url": "https://github.com/codice/ddf/pull/5740#discussion_r367134811", "createdAt": "2020-01-15T22:12:51Z", "author": {"login": "shaundmorris"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e83f455188369a56f3ec692da13815ad23cc40e8"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0OTY0NTU3", "url": "https://github.com/codice/ddf/pull/5740#pullrequestreview-344964557", "createdAt": "2020-01-18T21:56:51Z", "commit": {"oid": "e83f455188369a56f3ec692da13815ad23cc40e8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMTo1Njo1MlrOFfMPnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xOFQyMTo1Njo1MlrOFfMPnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODI1MDc4MQ==", "bodyText": "\u2753 Should this be private instead? Even if someone else is calling this, should we allow dependencies on the test classes themselves?", "url": "https://github.com/codice/ddf/pull/5740#discussion_r368250781", "createdAt": "2020-01-18T21:56:52Z", "author": {"login": "Lambeaux"}, "path": "distribution/test/itests/test-itests-ddf-core/src/test/java/ddf/test/itests/core/DdfCoreIT.java", "diffHunk": "@@ -0,0 +1,471 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.test.itests.core;\n+\n+import static com.jayway.restassured.RestAssured.get;\n+import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.RestAssured.when;\n+import static org.awaitility.Awaitility.await;\n+import static org.codice.ddf.itests.common.AbstractIntegrationTest.DynamicUrl.INSECURE_ROOT;\n+import static org.codice.ddf.itests.common.catalog.CatalogTestCommons.ingest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.GMD_CSW_FEDERATED_SOURCE_FACTORY_PID;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswInsertRequest;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswQuery;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getCswSourceProperties;\n+import static org.codice.ddf.itests.common.csw.CswTestCommons.getMetacardIdFromCswInsertResponse;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.OPENSEARCH_FACTORY_PID;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearch;\n+import static org.codice.ddf.itests.common.opensearch.OpenSearchTestCommons.getOpenSearchSourceProperties;\n+import static org.hamcrest.CoreMatchers.containsString;\n+import static org.hamcrest.CoreMatchers.equalTo;\n+import static org.hamcrest.CoreMatchers.is;\n+import static org.hamcrest.CoreMatchers.startsWith;\n+import static org.hamcrest.xml.HasXPath.hasXPath;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.jayway.restassured.http.ContentType;\n+import com.jayway.restassured.response.Response;\n+import com.xebialabs.restito.server.StubServer;\n+import com.xebialabs.restito.server.secure.SecureStubServer;\n+import ddf.catalog.data.Metacard;\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.UUID;\n+import java.util.concurrent.TimeUnit;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.xpath.XPathExpressionException;\n+import org.apache.commons.io.FileUtils;\n+import org.codice.ddf.itests.common.AbstractIntegrationTest;\n+import org.codice.ddf.itests.common.config.UrlResourceReaderConfigurator;\n+import org.codice.ddf.itests.common.csw.mock.FederatedCswMockServer;\n+import org.codice.ddf.test.common.annotations.AfterExam;\n+import org.codice.ddf.test.common.annotations.BeforeExam;\n+import org.hamcrest.Matchers;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.ops4j.pax.exam.junit.PaxExam;\n+import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n+import org.ops4j.pax.exam.spi.reactors.PerSuite;\n+\n+@RunWith(PaxExam.class)\n+@ExamReactorStrategy(PerSuite.class)\n+public class DdfCoreIT extends AbstractIntegrationTest {\n+\n+  private static final DynamicUrl SECURE_ROOT_AND_PORT =\n+      new DynamicUrl(DynamicUrl.SECURE_ROOT, HTTPS_PORT);\n+\n+  private static final DynamicUrl ADMIN_PATH =\n+      new DynamicUrl(SECURE_ROOT_AND_PORT, \"/admin/index.html\");\n+\n+  private static final String RECORD_TITLE_1 = \"myTitle\";\n+\n+  private static final String RECORD_TITLE_2 = \"myXmlTitle\";\n+\n+  private static final DynamicPort RESTITO_STUB_SERVER_PORT = new DynamicPort(6);\n+  private UrlResourceReaderConfigurator urlResourceReaderConfigurator;\n+  private static StubServer server;\n+  private static final String SAMPLE_DATA = \"sample data\";\n+  private static FederatedCswMockServer cswServer;\n+  private static final String DEFAULT_SAMPLE_PRODUCT_FILE_NAME = \"sample.txt\";\n+  private static final String DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS = \"data/products\";\n+  private final List<String> resourcesToDelete = new ArrayList<>();\n+\n+  private static final int MAX_DOWNLOAD_RETRY_ATTEMPTS = 3;\n+  private static final String CSW_STUB_SOURCE_ID = \"cswStubServer\";\n+  private static final DynamicPort CSW_STUB_SERVER_PORT = new DynamicPort(7);\n+  private static final DynamicUrl CSW_STUB_SERVER_PATH =\n+      new DynamicUrl(INSECURE_ROOT, CSW_STUB_SERVER_PORT, \"/services/csw\");\n+  private static final String POLL_INTERVAL = \"pollInterval\";\n+  private static final int CSW_SOURCE_POLL_INTERVAL = 10;\n+  private static final String CSW_SOURCE_WITH_METACARD_XML_ID = \"cswSource2\";\n+  private static final String GMD_SOURCE_ID = \"gmdSource\";\n+\n+  @BeforeExam\n+  public void beforeExam() throws Exception {\n+    getCatalogBundle().setupMaxDownloadRetryAttempts(MAX_DOWNLOAD_RETRY_ATTEMPTS);\n+\n+    setupOpenSearch();\n+\n+    setupCswServer();\n+\n+    setupGmd();\n+\n+    getCatalogBundle().waitForFederatedSource(OPENSEARCH_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_STUB_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_ID);\n+    getCatalogBundle().waitForFederatedSource(CSW_SOURCE_WITH_METACARD_XML_ID);\n+    getCatalogBundle().waitForFederatedSource(GMD_SOURCE_ID);\n+\n+    getServiceManager()\n+        .waitForSourcesToBeAvailable(\n+            REST_PATH.getUrl(),\n+            OPENSEARCH_SOURCE_ID,\n+            CSW_STUB_SOURCE_ID,\n+            CSW_SOURCE_ID,\n+            CSW_SOURCE_WITH_METACARD_XML_ID,\n+            GMD_SOURCE_ID);\n+\n+    getCatalogBundle().setDownloadRetryDelayInSeconds(1);\n+    getCatalogBundle().setupCaching(false);\n+\n+    LOGGER.info(\"Source status: \\n{}\", get(REST_PATH.getUrl() + \"sources\").body().prettyPrint());\n+  }\n+\n+  @AfterExam\n+  public void afterExam() {\n+    if (cswServer != null) {\n+      cswServer.stop();\n+    }\n+  }\n+\n+  @Before\n+  public void setup() throws Exception {\n+    urlResourceReaderConfigurator = getUrlResourceReaderConfigurator();\n+\n+    server = new SecureStubServer(Integer.parseInt(RESTITO_STUB_SERVER_PORT.getPort())).run();\n+    server.start();\n+\n+    cswServer.reset();\n+  }\n+\n+  @After\n+  public void tearDown() throws Exception {\n+    clearCatalogAndWait();\n+    configureRestForGuest();\n+\n+    urlResourceReaderConfigurator.setUrlResourceReaderRootDirs(\n+        DEFAULT_URL_RESOURCE_READER_ROOT_RESOURCE_DIRS);\n+\n+    for (String resource : resourcesToDelete) {\n+      FileUtils.deleteQuietly(new File(resource));\n+    }\n+\n+    resourcesToDelete.clear();\n+\n+    cswServer.stop();\n+\n+    if (server != null) {\n+      server.stop();\n+    }\n+  }\n+\n+  @Test\n+  public void testCswIngest() {\n+    Response response = ingestCswRecord();\n+\n+    response\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"1\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\n+                \"//TransactionResponse/InsertResult/BriefRecord/title\",\n+                is(\"Aliquam fermentum purus quis arcu\")),\n+            hasXPath(\"//TransactionResponse/InsertResult/BriefRecord/BoundingBox\"));\n+  }\n+\n+  @Test\n+  public void testCswDeleteMultiple() {\n+    ingestCswRecord();\n+    ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswFilterDeleteRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"2\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"0\")));\n+  }\n+\n+  @Test\n+  public void testCswUpdateByFilterConstraint() throws IOException, XPathExpressionException {\n+    Response firstResponse = ingestCswRecord();\n+    Response secondResponse = ingestCswRecord();\n+\n+    given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(getFileContent(CSW_REQUEST_RESOURCE_PATH + \"/CswUpdateByFilterConstraintRequest\"))\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .body(\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalDeleted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalInserted\", is(\"0\")),\n+            hasXPath(\"//TransactionResponse/TransactionSummary/totalUpdated\", is(\"2\")));\n+\n+    String firstId = getMetacardIdFromCswInsertResponse(firstResponse);\n+    String secondId = getMetacardIdFromCswInsertResponse(secondResponse);\n+\n+    String firstUrl = REST_PATH.getUrl() + firstId;\n+    when()\n+        .get(firstUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+\n+    String secondUrl = REST_PATH.getUrl() + secondId;\n+    when()\n+        .get(secondUrl)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        // Check that the updated attributes were changed.\n+        .body(\n+            hasXPath(\"//metacard/dateTime[@name='modified']/value\", startsWith(\"2015-08-25\")),\n+            hasXPath(\"//metacard/string[@name='title']/value\", is(\"Updated Title\")),\n+            hasXPath(\"//metacard/string[@name='media.format']/value\", is(\"\")),\n+            // Check that an attribute that was not updated was not changed.\n+            hasXPath(\n+                \"//metacard/string[@name='topic.category']/value\",\n+                is(\"Hydrography--Dictionaries\")));\n+  }\n+\n+  @Test\n+  public void testBasicRestAccess() throws Exception {\n+    String url = SERVICE_ROOT.getUrl() + \"/catalog/query?q=*&src=local\";\n+\n+    waitForSecurityHandlers(url);\n+\n+    configureRestForBasic(\"/services/sdk\");\n+\n+    // Make sure that no credentials receives a 401\n+    getSecurityPolicy().waitForBasicAuthReady(url);\n+    when().get(url).then().log().all().assertThat().statusCode(equalTo(401));\n+\n+    // A random user receives a 401\n+    given()\n+        .auth()\n+        .basic(\"bad\", \"user\")\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(401));\n+\n+    // A real user receives a SSO token\n+    String cookie =\n+        given()\n+            .auth()\n+            .basic(\"admin\", \"admin\")\n+            .when()\n+            .get(url)\n+            .then()\n+            .log()\n+            .ifValidationFails()\n+            .assertThat()\n+            .statusCode(equalTo(200))\n+            .assertThat()\n+            .header(\"Set-Cookie\", containsString(\"JSESSIONID\"))\n+            .extract()\n+            .cookie(\"JSESSIONID\");\n+\n+    // Try the session instead of basic auth\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(url)\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+\n+    // Admin user should be able to access the admin page\n+    given()\n+        .cookie(\"JSESSIONID\", cookie)\n+        .when()\n+        .get(ADMIN_PATH.getUrl())\n+        .then()\n+        .log()\n+        .ifValidationFails()\n+        .assertThat()\n+        .statusCode(equalTo(200));\n+  }\n+\n+  @Test\n+  public void testFederatedSpatial() throws IOException {\n+    ingest(getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+    ingestXmlWithProduct(DEFAULT_SAMPLE_PRODUCT_FILE_NAME);\n+\n+    getOpenSearch(\n+            \"xml\",\n+            null,\n+            null,\n+            \"lat=10.0\",\n+            \"lon=30.0\",\n+            \"radius=250000\",\n+            \"spatialType=POINT_RADIUS\",\n+            \"src=\" + OPENSEARCH_SOURCE_ID)\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_1\n+                    + \"']\"),\n+            Matchers.hasXPath(\n+                \"/metacards/metacard/string[@name='\"\n+                    + Metacard.TITLE\n+                    + \"']/value[text()='\"\n+                    + RECORD_TITLE_2\n+                    + \"']\"));\n+  }\n+\n+  @Test\n+  public void testCswQueryByTitle() {\n+    String geojsonId =\n+        ingest(\n+            getFileContent(JSON_RECORD_RESOURCE_PATH + \"/SimpleGeoJsonRecord\"), \"application/json\");\n+\n+    String titleQuery =\n+        getCswQuery(\"title\", \"myTitle\", \"application/xml\", \"http://www.opengis.net/cat/csw/2.0.2\");\n+\n+    given()\n+        .contentType(ContentType.XML)\n+        .body(titleQuery)\n+        .when()\n+        .post(CSW_PATH.getUrl())\n+        .then()\n+        .assertThat()\n+        .body(\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/Record/identifier\", Matchers.is(geojsonId)),\n+            Matchers.hasXPath(\n+                \"/GetRecordsResponse/SearchResults/@numberOfRecordsReturned\", Matchers.is(\"1\")));\n+  }\n+\n+  private Response ingestCswRecord() {\n+    String uuid = UUID.randomUUID().toString().replaceAll(\"-\", \"\");\n+\n+    return given()\n+        .header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML)\n+        .body(\n+            getCswInsertRequest(\n+                \"csw:Record\",\n+                getFileContent(\n+                    CSW_RECORD_RESOURCE_PATH + \"/CswRecord\", ImmutableMap.of(\"id\", uuid))))\n+        .post(CSW_PATH.getUrl());\n+  }\n+\n+  private void waitForSecurityHandlers(String url) {\n+    await(\"Waiting for security handlers to become available\")\n+        .atMost(5, TimeUnit.MINUTES)\n+        .pollDelay(1, TimeUnit.SECONDS)\n+        .until(() -> get(url).statusCode() != 503);\n+  }\n+\n+  private String ingestXmlWithProduct(String filename) throws IOException {\n+    Path path = Paths.get(filename);\n+\n+    if (Files.exists(path)) {\n+      Files.delete(path);\n+    }\n+\n+    Files.createFile(path);\n+    Files.write(path, Collections.singleton(SAMPLE_DATA));\n+\n+    String fileLocation = path.toUri().toURL().toString();\n+    LOGGER.debug(\"File Location: {}\", fileLocation);\n+    return ingest(getSimpleXml(fileLocation), \"text/xml\");\n+  }\n+\n+  public static String getSimpleXml(String uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e83f455188369a56f3ec692da13815ad23cc40e8"}, "originalPosition": 411}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDEyMjM0", "url": "https://github.com/codice/ddf/pull/5740#pullrequestreview-346012234", "createdAt": "2020-01-21T16:25:15Z", "commit": {"oid": "e83f455188369a56f3ec692da13815ad23cc40e8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc0359190971d92c098bd6fc26928fc726eabc38", "author": {"user": {"login": "AzGoalie", "name": "Travis McMahon"}}, "url": "https://github.com/codice/ddf/commit/cc0359190971d92c098bd6fc26928fc726eabc38", "committedDate": "2020-01-21T22:15:08Z", "message": "DDF-5739: Added core itest module\n\nUpdated to next development version\n\nAdded testCswDeleteMultiple testCswUpdateFilterCOntraint\n\nAdded testFederatedSpatial and testCswQueryByTitle\n\nRefactored and cleaned up code\n\nRemoved security setup\n\nUpdated to next development version\n\nFixed name and made ddf-itests depend on the core itests\n\nRemoved unused variables\n\nFixed typo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "author": {"user": {"login": "AzGoalie", "name": "Travis McMahon"}}, "url": "https://github.com/codice/ddf/commit/ffcda44d9e6a4160707ae7e8985efdcb11eaa921", "committedDate": "2020-01-21T22:15:08Z", "message": "Addressed comments about refactoring."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4dc95f4c0427f6e378b4de044ef9b6c79413235f", "author": {"user": {"login": "AzGoalie", "name": "Travis McMahon"}}, "url": "https://github.com/codice/ddf/commit/4dc95f4c0427f6e378b4de044ef9b6c79413235f", "committedDate": "2020-01-21T22:15:08Z", "message": "Removed ITests that were moved to core."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e83f455188369a56f3ec692da13815ad23cc40e8", "author": {"user": {"login": "AzGoalie", "name": "Travis McMahon"}}, "url": "https://github.com/codice/ddf/commit/e83f455188369a56f3ec692da13815ad23cc40e8", "committedDate": "2020-01-15T20:29:05Z", "message": "Removed ITests that were moved to core."}, "afterCommit": {"oid": "4dc95f4c0427f6e378b4de044ef9b6c79413235f", "author": {"user": {"login": "AzGoalie", "name": "Travis McMahon"}}, "url": "https://github.com/codice/ddf/commit/4dc95f4c0427f6e378b4de044ef9b6c79413235f", "committedDate": "2020-01-21T22:15:08Z", "message": "Removed ITests that were moved to core."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 71, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}