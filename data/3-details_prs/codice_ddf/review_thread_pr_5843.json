{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1Njg0NzQ2", "number": 5843, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozMTowNlrODghkmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToxMDozM1rODllmjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMxMDY0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozMTowNlrOFqxnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjo0NTozOFrOFqzpUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5NzQwNg==", "bodyText": "\u2753 Do these lines conform to our formatter? If not, we need to format. If so, we should update the formatter. This can make it difficult debugging the result of the condition because there's a chance the stack context gets lost immediately. You don't want the stack to immediately change in the debugger window when this == o evals to true, you'd want an extra frame to verify that flow without losing your stack.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380397406", "createdAt": "2020-02-17T23:31:06Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n+    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQzMDY3NA==", "bodyText": "These lines conform to our formatter, so do with that information what you will. I'll assuage your concerns about these lines and the others like them with an appropriate refactor, though.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380430674", "createdAt": "2020-02-18T02:45:38Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n+    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5NzQwNg=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMxMzk0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozNDozMFrOFqxpQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozNDozMFrOFqxpQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5Nzg5MQ==", "bodyText": "\u2753 Can this javadoc just be a summary since we iterate each argument down below? This seems unnecessarily verbose.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380397891", "createdAt": "2020-02-17T23:34:30Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMxNTkxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozNjozOFrOFqxqbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozNjozOFrOFqxqbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5ODE4OA==", "bodyText": "\u2753 Same question here.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380398188", "createdAt": "2020-02-17T23:36:38Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) return that.warnings == null;\n+    if (that.warnings == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMyNzAwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzo0Nzo1OFrOFqxw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNVQyMTo1NDo1M1rOFuWpIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA==", "bodyText": "I think this method's logic can be shortened. to\nreturn (o!=null && getClass() == o.getClass() && super.equals(o)\nThis is because line 91 and 92 do the same comparison that is done in this classes super class.\nIn fact, you could probably omit this method and just rely on the super method (unless you need to know if two compared objects are of the same impl type instead of just the same interface type).", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380399840", "createdAt": "2020-02-17T23:47:58Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3OTY4Nw==", "bodyText": "@kentmorrissey were these equals() and hashcode() functions generated by IntelliJ?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381579687", "createdAt": "2020-02-19T22:20:25Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDE0OTc5NA==", "bodyText": "I don't think I should omit this method because the inclusion of this method allows that, where applicable, tests can verify that exceptions and sourceIds match in addition to warnings.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r384149794", "createdAt": "2020-02-25T21:54:53Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMzMzA2OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceResponseImplTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzo1Mzo0N1rOFqx0aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMjozOToyNVrOFqzk3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMDc0NQ==", "bodyText": "\u2753 Should we test if this list preserves null values as well?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380400745", "createdAt": "2020-02-17T23:53:47Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceResponseImplTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import ddf.catalog.operation.impl.SourceResponseImpl;\n+import org.junit.Test;\n+\n+public class SourceResponseImplTest {\n+\n+  @Test\n+  public void testGetProcessingDetailsDoesNotReturnNull() {\n+    assertThat(\n+        (new SourceResponseImpl(null, null, null, 0, null)).getProcessingDetails(),\n+        is(notNullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyOTUzMg==", "bodyText": "Nevermind. This is a ctor I thought I saw a list literal. Wrong language.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380429532", "createdAt": "2020-02-18T02:39:25Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceResponseImplTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import ddf.catalog.operation.impl.SourceResponseImpl;\n+import org.junit.Test;\n+\n+public class SourceResponseImplTest {\n+\n+  @Test\n+  public void testGetProcessingDetailsDoesNotReturnNull() {\n+    assertThat(\n+        (new SourceResponseImpl(null, null, null, 0, null)).getProcessingDetails(),\n+        is(notNullValue()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMDc0NQ=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDMzODM3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzo1ODoyMVrOFqx3cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzo1ODoyMVrOFqx3cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTUyMg==", "bodyText": "\u2753 Why not just return a new ProcessingDetails object? Why does this filtering operation have to lose object granularity?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380401522", "createdAt": "2020-02-17T23:58:21Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.\n+   *\n+   * @param details the {@link ProcessingDetails} which contain the {@code warnings} which this\n+   *     method filters\n+   * @return either a {@link Set} composed exclusively of the parameter's filtered {@code warnings}\n+   *     or, if no {@code warnings} pass through the filter, the empty {@link Set}\n+   */\n+  Set<String> filter(ProcessingDetails details);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDM0MTE0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDowMToxM1rOFqx5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoxNDo1OFrOFr5nsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw==", "bodyText": "\u2753 Are we filtering or determining? What happens if this SourceWarningsFilter can't correctly filter? Does it throw an exception? Should we also have a canFilter function as well? Or is this documentation irrelevant because all SourceWarningsFilters can actually filter any ProcessingDetails object it comes across?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380401937", "createdAt": "2020-02-18T00:01:13Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMzM5Mg==", "bodyText": "This \u261d\ufe0f is probably the most crucial thing that needs resolution.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380403392", "createdAt": "2020-02-18T00:11:12Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwNzg0MQ==", "bodyText": "I think we should change getId() to canFilter() and rewrite the Javadoc of this method to specify that no class should filter() until it has determined that it canFilter(). @mojogitoverhere, we sort of talked about this. What do you think?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380407841", "createdAt": "2020-02-18T00:38:54Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQxMTgxOQ==", "bodyText": "Alternatively, we could specify in this Javadoc that filter() should return an empty Set if it determines that it can't correctly filter() the ProcessingDetails which it receives as the argument.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380411819", "createdAt": "2020-02-18T01:03:18Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyNjMyMg==", "bodyText": "\u2757\ufe0f I wouldn't return an empty set if we can't correctly filter. Then how would we tell the difference between an inability to filter and a successful filter that yields empty?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380426322", "createdAt": "2020-02-18T02:22:54Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTA1NTA3Mw==", "bodyText": "Using canFilter() would make the whole SourceWarningsFilter plugin system more generic. Right now, each SourceWarningsFilter is tied to a single source since we only use a filter if its getId() matches the source id of the ProcessingDetails object it is filtering. After talking with @kentmorrissey a while back, I think we agreed that using canFilter() would be more complex and we probably aren't going to need it (YAGNI) so we opted to stick with getId() for now.\nTo answer your questions @Lambeaux:\n\nAre we filtering or determining?\n\nFiltering\n\nWhat happens if this SourceWarningsFilter can't correctly filter? Does it throw an exception?\n\nI'm not sure I understand how the filtering could fail. The idea was that we would check if warning string matches some kind of pattern. If it matches, then keep the warning, otherwise filter it out.\n\nShould we also have a canFilter function as well? Or is this documentation irrelevant because all SourceWarningsFilters can actually filter any ProcessingDetails object it comes across?\n\nLike I said above, we thought about using a canFilter() function but thought that added too much overhead. Instead each SourceWarningsFilter is tied directly to a source by its id.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381055073", "createdAt": "2020-02-19T03:07:32Z", "author": {"login": "mojogitoverhere"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3NzEzOQ==", "bodyText": "After talking in person we decided to go with the canFilter() approach. And to clarify the javadoc accordingly.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381577139", "createdAt": "2020-02-19T22:14:58Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NDM0NTQxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDowNTo1OFrOFqx7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoxODo1N1rOFr5vIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg==", "bodyText": "\u270f\ufe0f Consider consolidating constructor parameters into one or two domain objects to reduce parameter clutter", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380402626", "createdAt": "2020-02-18T00:05:58Z", "author": {"login": "mazarag2"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   *\n+   * @param request the {@link QueryRequest}\n+   * @param results the {@link List} of {@link Result}s\n+   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n+   * @param hits the number of distinct {@link Result}s\n+   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n+   *     values\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n+   *     QueryRequest}'s execution\n+   */\n+  public QueryResponseImpl(\n+      QueryRequest request,\n+      List<Result> results,\n+      boolean shouldCloseResultQueue,\n+      long hits,\n+      Map<String, Serializable> properties,\n+      Set<ProcessingDetails> processingDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQyOTc1Ng==", "bodyText": "\ud83d\udc4e I personally would not do that. The classes would incur more overhead than they resolve.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380429756", "createdAt": "2020-02-18T02:40:46Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   *\n+   * @param request the {@link QueryRequest}\n+   * @param results the {@link List} of {@link Result}s\n+   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n+   * @param hits the number of distinct {@link Result}s\n+   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n+   *     values\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n+   *     QueryRequest}'s execution\n+   */\n+  public QueryResponseImpl(\n+      QueryRequest request,\n+      List<Result> results,\n+      boolean shouldCloseResultQueue,\n+      long hits,\n+      Map<String, Serializable> properties,\n+      Set<ProcessingDetails> processingDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NTQ4Mg==", "bodyText": "From my understanding If we're using Sonar as part of our Code Quality Policy in DDF this will break the build\nhttps://rules.sonarsource.com/java/RSPEC-107", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380775482", "createdAt": "2020-02-18T16:11:53Z", "author": {"login": "mazarag2"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   *\n+   * @param request the {@link QueryRequest}\n+   * @param results the {@link List} of {@link Result}s\n+   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n+   * @param hits the number of distinct {@link Result}s\n+   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n+   *     values\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n+   *     QueryRequest}'s execution\n+   */\n+  public QueryResponseImpl(\n+      QueryRequest request,\n+      List<Result> results,\n+      boolean shouldCloseResultQueue,\n+      long hits,\n+      Map<String, Serializable> properties,\n+      Set<ProcessingDetails> processingDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3OTA0Mw==", "bodyText": "There's a lot about Sonar that is good. But I don't think we fix every finding that gets reported. We're only at six arguments, that's not terrible. If we need to add more, then it might be time to reconsider.\nGood candidate for suppression IMHO.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381579043", "createdAt": "2020-02-19T22:18:57Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   *\n+   * @param request the {@link QueryRequest}\n+   * @param results the {@link List} of {@link Result}s\n+   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n+   * @param hits the number of distinct {@link Result}s\n+   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n+   *     values\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n+   *     QueryRequest}'s execution\n+   */\n+  public QueryResponseImpl(\n+      QueryRequest request,\n+      List<Result> results,\n+      boolean shouldCloseResultQueue,\n+      long hits,\n+      Map<String, Serializable> properties,\n+      Set<ProcessingDetails> processingDetails) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg=="}, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1Njc2MzkwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjoxNDozOFrOFrIzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDoyNjozMVrOFxVUPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA==", "bodyText": "\u270f\ufe0f this can be a static constant", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380777310", "createdAt": "2020-02-18T16:14:38Z", "author": {"login": "bdeining"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzU3Mg==", "bodyText": "same for a bunch of these objects", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380777572", "createdAt": "2020-02-18T16:15:01Z", "author": {"login": "bdeining"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA=="}, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3Mzc5MA==", "bodyText": "Reduce duplication by making many of these objects static", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387273790", "createdAt": "2020-03-03T20:26:31Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA=="}, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU1NjY5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowMDozOFrOFrQf9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMjoyMDozMVrOFr5xyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQxMw==", "bodyText": "Could probably replace this method with:\nif(o==null || getClass() != o.getClass()){\n\treturn false;\n}\nSourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\nif(this.warnings==null && that.warnings == null){\n\treturn true;\n}else{\n\treturn (this.warnings!=null && that.warnings!=null && this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings));\n}\n\nfor added clarity", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380903413", "createdAt": "2020-02-18T20:00:38Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU3OTcyMw==", "bodyText": "@kentmorrissey were these equals() and hashcode() functions generated by IntelliJ?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r381579723", "createdAt": "2020-02-19T22:20:31Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQxMw=="}, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU4MzcxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowOToxNVrOFrQxGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDowOToxNVrOFrQxGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzgwMQ==", "bodyText": "\u270f\ufe0f If you are just checking for equality to null, you can avoid implementing the equals method and replace\nprocessingDetails.equals(null)\n\nwith\nprocessingDetals == null\n\nNote that not implementing the equals method is only if you don't need the equals method for other checks of equality.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380907801", "createdAt": "2020-02-18T20:09:15Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    List<String> differentWarning = Collections.singletonList(\"different warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentWarnings =\n+        new ProcessingDetailsImpl(sourceId, exception, differentWarning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentWarnings)));\n+  }\n+\n+  @Test\n+  public void testInequalityWithNull() {\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl();\n+    assertThat(processingDetails.equals(null), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzU5MzUyOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMjoyMlrOFrQ3Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxMjoyMlrOFrQ3Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTM5OQ==", "bodyText": "\u270f\ufe0f If you are just checking for equality to null, you can avoid implementing the equals method and replace\nprocessingDetails.equals(null)\n\nwith\nprocessingDetals == null\n\nNote that not implementing the equals method is only if you don't need the equals method for other checks of equality.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380909399", "createdAt": "2020-02-18T20:12:22Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.SourceProcessingDetailsImpl;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class SourceProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    SourceProcessingDetails sourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    SourceProcessingDetails identicalSourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    assertThat(sourceProcessingDetails, is(identicalSourceProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequality() {\n+    SourceProcessingDetails sourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    SourceProcessingDetails unequalSourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"different warning\"));\n+    assertThat(sourceProcessingDetails, is(not(unequalSourceProcessingDetails)));\n+  }\n+\n+  @Test\n+  public void testInequalityWithNull() {\n+    SourceProcessingDetails sourceProcessingDetails = new SourceProcessingDetailsImpl();\n+    assertThat(sourceProcessingDetails.equals(null), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzYwNDczOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNjoxM1rOFrQ-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDoxNjoxM1rOFrQ-PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTE2NA==", "bodyText": "I'm not sure what this javadoc is saying in the sentence: \"If it can, so filter the ProcessingDetails warnings and create...\". The part that confuses me is \"so filter\"", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380911164", "createdAt": "2020-02-18T20:16:13Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgwMzE3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMzowNlrOFrS51Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoyMzoxNlrOFu-k8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ==", "bodyText": "Rename the variable \"that\" to increase readability.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380942805", "createdAt": "2020-02-18T21:23:06Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk1MTcxMA==", "bodyText": "What do you suggest as a more readable name?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380951710", "createdAt": "2020-02-18T21:41:19Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ=="}, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNDA4MQ==", "bodyText": "Spoke with @kentmorrissey and I am fine with leaving this name as is.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r384804081", "createdAt": "2020-02-26T22:23:16Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ=="}, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgwNTA3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyMzo0NlrOFrS7Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNlQyMjoyMzoyM1rOFu-lPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzExMQ==", "bodyText": "Rename the variable \"that\" to increase readability.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380943111", "createdAt": "2020-02-18T21:23:46Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NDgwNDE1OA==", "bodyText": "Spoke with @kentmorrissey and I am fine with leaving this name as is.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r384804158", "createdAt": "2020-02-26T22:23:23Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzExMQ=="}, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzgyMjc1OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyOTozNlrOFrTGAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyOTozNlrOFrTGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTkyMQ==", "bodyText": "Braces should be added to conform to google style as listed on the \"Coding Standards\" page on confluence. This statement applies to the entire PR.\n\n4.1.1 Braces are used where optional\nBraces are used with if, else, for, do and while statements, even when the body is empty or contains only a single statement.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380945921", "createdAt": "2020-02-18T21:29:36Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk3MDYxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1NDo0MFrOFwtIIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQyMDo1ODozOVrOFx9Zfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ==", "bodyText": "\u2753 Why are null semantics leaking into the equals(..) method? Shouldn't the constructor enforce that, worst case, the list of warnings are empty?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386615329", "createdAt": "2020-03-02T19:54:40Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNTM2OA==", "bodyText": "Maybe the constructor should enforce that, but it doesn't. Do you recommend that I alter the constructor such that it enforces that its warnings cannot take a null value?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386625368", "createdAt": "2020-03-02T20:15:18Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NTkyNA==", "bodyText": "Yes that would be a good improvement. It should not support taking null but, rather, an empty list if necessary. That cleans up your equals method and the associated tests.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387275924", "createdAt": "2020-03-03T20:30:51Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NTg0Mw==", "bodyText": "Do you think that the constructor should throw an Exception when it receives null as an argument, or just set warnings to an empty List in that case?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387285843", "createdAt": "2020-03-03T20:51:27Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzkzMDQ5NA==", "bodyText": "Definitely throw. Something like notNull(your_object, \"this thing can't be null\") would work fine.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387930494", "createdAt": "2020-03-04T20:58:39Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk3ODA0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1Njo0MVrOFwtMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMDo0ODoxNlrOFxV9Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ==", "bodyText": "\u2753 You're defining equality as this.warnings being a superset of that.warnings, is that really what you want?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386616459", "createdAt": "2020-03-02T19:56:41Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODM2OQ==", "bodyText": "\u2757\ufe0f Verify this is not a bug.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386618369", "createdAt": "2020-03-02T20:00:19Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyNzc1NA==", "bodyText": "How would it be a bug?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386627754", "createdAt": "2020-03-02T20:20:16Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3MzI4Ng==", "bodyText": "@Lambeaux In the case that this.warnings is a superset of that.warnings, that.warnings.size() will not be equal to this.warnings.size() which will correctly have the method return false.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387273286", "createdAt": "2020-03-03T20:25:33Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI3NTA1NQ==", "bodyText": "Ah! Totally missed that. My eyes focused in on the one-sided contains check. That should be fine \ud83d\udc4d", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387275055", "createdAt": "2020-03-03T20:29:10Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI4NDI2Mg==", "bodyText": "Any set is a superset of itself.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r387284262", "createdAt": "2020-03-03T20:48:16Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5NDk4Mjk5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1ODoyMVrOFwtPpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDoyMjoxMVrOFwt8IQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNzI1NA==", "bodyText": "\u2753 Can we be consistent with our equals methods? The other object defers to super.equals(..) and this one basically re-implements it.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386617254", "createdAt": "2020-03-02T19:58:21Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYyODY0MQ==", "bodyText": "Which super.equals() does this method basically reimplement?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386628641", "createdAt": "2020-03-02T20:22:11Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNzI1NA=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzM4NjkwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowNjowMFrOFykJLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozNjo0MVrOFylDeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA==", "bodyText": "\u270f\ufe0f This is fine, but it hides the fact that all you're really doing is a reference equality comparison. Unless of course this object's inheritance hierarchy changed. Better to be explicit.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388565294", "createdAt": "2020-03-05T21:06:00Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -13,29 +13,57 @@\n  */\n package ddf.catalog.operation.impl;\n \n+import static org.apache.commons.lang.Validate.notNull;\n+\n import ddf.catalog.operation.SourceProcessingDetails;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n /**\n  * The SourceProcessingDetailsImpl class represents a default implementation of a {@link\n  * SourceProcessingDetails} to provide {@link Source} warnings.\n  */\n public class SourceProcessingDetailsImpl implements SourceProcessingDetails {\n \n-  protected List<String> warnings = null;\n+  protected List<String> warnings;\n \n-  /** Instantiates a new SourceProcessingDetailsImpl. */\n-  public SourceProcessingDetailsImpl() {}\n+  /** Instantiates a new SourceProcessingDetailsImpl */\n+  public SourceProcessingDetailsImpl() {\n+    warnings = new ArrayList<>();\n+  }\n \n   /**\n    * Instantiates a new SourceProcessingDetailsImpl.\n    *\n    * @param warnings the warnings associated with the {@link Source}\n    */\n   public SourceProcessingDetailsImpl(List<String> warnings) {\n+    notNull(\n+        warnings, \"the constructor of SourceProcessingDetailsImpl does not accept null warnings\");\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (super.equals(o)) {\n+      return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MTQzNA==", "bodyText": "So you think I should change line 49 back to if (this == 0)?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388571434", "createdAt": "2020-03-05T21:18:55Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -13,29 +13,57 @@\n  */\n package ddf.catalog.operation.impl;\n \n+import static org.apache.commons.lang.Validate.notNull;\n+\n import ddf.catalog.operation.SourceProcessingDetails;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n /**\n  * The SourceProcessingDetailsImpl class represents a default implementation of a {@link\n  * SourceProcessingDetails} to provide {@link Source} warnings.\n  */\n public class SourceProcessingDetailsImpl implements SourceProcessingDetails {\n \n-  protected List<String> warnings = null;\n+  protected List<String> warnings;\n \n-  /** Instantiates a new SourceProcessingDetailsImpl. */\n-  public SourceProcessingDetailsImpl() {}\n+  /** Instantiates a new SourceProcessingDetailsImpl */\n+  public SourceProcessingDetailsImpl() {\n+    warnings = new ArrayList<>();\n+  }\n \n   /**\n    * Instantiates a new SourceProcessingDetailsImpl.\n    *\n    * @param warnings the warnings associated with the {@link Source}\n    */\n   public SourceProcessingDetailsImpl(List<String> warnings) {\n+    notNull(\n+        warnings, \"the constructor of SourceProcessingDetailsImpl does not accept null warnings\");\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (super.equals(o)) {\n+      return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDIxNg==", "bodyText": "Oh I see what you did. You tried to be consistent, per my previous comment, but one of the objects actually needed to reference the parent. Okay this is fine.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388580216", "createdAt": "2020-03-05T21:36:41Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -13,29 +13,57 @@\n  */\n package ddf.catalog.operation.impl;\n \n+import static org.apache.commons.lang.Validate.notNull;\n+\n import ddf.catalog.operation.SourceProcessingDetails;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n /**\n  * The SourceProcessingDetailsImpl class represents a default implementation of a {@link\n  * SourceProcessingDetails} to provide {@link Source} warnings.\n  */\n public class SourceProcessingDetailsImpl implements SourceProcessingDetails {\n \n-  protected List<String> warnings = null;\n+  protected List<String> warnings;\n \n-  /** Instantiates a new SourceProcessingDetailsImpl. */\n-  public SourceProcessingDetailsImpl() {}\n+  /** Instantiates a new SourceProcessingDetailsImpl */\n+  public SourceProcessingDetailsImpl() {\n+    warnings = new ArrayList<>();\n+  }\n \n   /**\n    * Instantiates a new SourceProcessingDetailsImpl.\n    *\n    * @param warnings the warnings associated with the {@link Source}\n    */\n   public SourceProcessingDetailsImpl(List<String> warnings) {\n+    notNull(\n+        warnings, \"the constructor of SourceProcessingDetailsImpl does not accept null warnings\");\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (super.equals(o)) {\n+      return true;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzM4OTUwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowNjo1OVrOFykK1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTozNzo0MlrOFylFWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA==", "bodyText": "\u270f\ufe0f Same here. It's fine for now. But it adds an unnecessary level of indirection.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388565718", "createdAt": "2020-03-05T21:06:59Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (!super.equals(o)) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MjI4MQ==", "bodyText": "These lines call SourceProcessingDetailsImpl's equals(). Do you think that adds an unnecessary level of indirection?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388572281", "createdAt": "2020-03-05T21:20:35Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (!super.equals(o)) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4MDY5OA==", "bodyText": "No, you're right. I missed that. \ud83d\udc4d", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388580698", "createdAt": "2020-03-05T21:37:42Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (!super.equals(o)) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNzM5OTgyOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToxMDozM1rOFykRYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTo1ODoxM1rOFylu9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw==", "bodyText": "\u270f\ufe0f Could use Collections.singletonList(...) instead.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388567393", "createdAt": "2020-03-05T21:10:33Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3MzgyMA==", "bodyText": "...instead of to \u200dtoWarningList()?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388573820", "createdAt": "2020-03-05T21:23:42Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU3OTI3OQ==", "bodyText": "Correct. The toWarningList() method is creating a general purpose collection, meant to hold multiple elements, and is mutable. By using Collections.singletonList(list) you are cutting down on code, memory usage, and get immutability for free.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388579279", "createdAt": "2020-03-05T21:34:57Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU4NTA5OA==", "bodyText": "It's mutable, but never mutates. Neither ProcessingDetailsImpl nor SourceProcessingDetailsImpl either adds a warning to this.warnings or provides a method to do so. If I use Collections.singletonList() as you suggest, shouldn't I delete toWarningList()?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388585098", "createdAt": "2020-03-05T21:47:13Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MDE2Mg==", "bodyText": "Yes the idea is that singletonList() replaces toWarningList() and similar cases where a method like that would be needed. But I'm not mandating the change for approval.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388590162", "createdAt": "2020-03-05T21:55:44Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU5MTM1MQ==", "bodyText": "I know. I just wanted to make sure that I understood your suggestion. I agree with you, so I'll make the change which you suggested in this comment.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388591351", "createdAt": "2020-03-05T21:58:13Z", "author": {"login": "kentmorrissey"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw=="}, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4811, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}