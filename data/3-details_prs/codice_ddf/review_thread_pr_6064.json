{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjExMDQ2", "number": 6064, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNjo1OFrOD930Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NTowMlrOEB7kYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjA0MTgzOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNjo1OFrOGXoLLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNjo1OFrOGXoLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyODY1Mg==", "bodyText": "\u2753 Should this be higher than debug? I'm not sure how frequently this would occur or if it would be considered noise.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r427428652", "createdAt": "2020-05-19T16:16:58Z", "author": {"login": "mcalcote"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java", "diffHunk": "@@ -49,6 +51,11 @@ public final void onFailure(Exchange exchange) {\n     if (!connected) {\n       LOGGER.debug(\n           \"a network error occurred, The file [{}] failed to process\", asyncFileEntry.getName());\n+    } else if (exchange.getException() != null) {\n+      LOGGER.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMwMzAxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyMzowN1rOGXqyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyMzowN1rOGXqyPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTQyMg==", "bodyText": "Maybe make this \"Initializing monitor for...\" to distinguish between the init() and configure() method below.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r427471422", "createdAt": "2020-05-19T17:23:07Z", "author": {"login": "aaronilovici"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -172,6 +174,7 @@ public Integer getReadLockIntervalMilliseconds() {\n    * called whenever an existing route is updated.\n    */\n   public void init() {\n+    LOGGER.debug(\"Configuring monitor for {}\", monitoredDirectory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzg0NTgxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1MzoxNlrOGZcENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1MzoxNlrOGZcENg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzQxNA==", "bodyText": "These numbers could be constants", "url": "https://github.com/codice/ddf/pull/6064#discussion_r429327414", "createdAt": "2020-05-22T15:53:16Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();\n+      timer.scheduleAtFixedRate(new LogProcessing(), 500, 5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mzg0NzM5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1Mzo0OVrOGZcFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1Nzo1N1rOGbY2ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzY3NQ==", "bodyText": "Should this timer be closed/canceled in a destroy method?", "url": "https://github.com/codice/ddf/pull/6064#discussion_r429327675", "createdAt": "2020-05-22T15:53:49Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTg3Ng==", "bodyText": "\u2757 What Chris said is important to ensure a bundle is properly stopped", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371876", "createdAt": "2020-05-27T18:57:57Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzY3NQ=="}, "originalCommit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjgwMTAwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NjoyOVrOGbYzEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NjoyOVrOGbYzEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTAyNQ==", "bodyText": "\u2757 All onFinish() should be called in a finally clause to ensure we properly cleanup", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371025", "createdAt": "2020-05-27T18:56:29Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -283,12 +302,18 @@ else if (!entry.hasChildren()) {\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitDelete(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n+    LOGGER.trace(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n       entry.getParent().ifPresent(e -> e.removeChild(entry));\n       entry.destroy();\n+      LOGGER.debug(\n+          \"{} was removed from {}\",\n+          entry.getName(),\n+          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+    } else {\n+      LOGGER.debug(\"Delete task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjgwMzc4OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NzoxOFrOGbY03g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NzoxOFrOGbY03g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTQ4Ng==", "bodyText": "\u2757 See other comment", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371486", "createdAt": "2020-05-27T18:57:18Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -246,11 +263,14 @@ private void doMatch(AsyncFileEntry entry, final AsyncFileAlterationListener lis\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitMatch(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n+      LOGGER.trace(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n       entry.commit();\n+      LOGGER.debug(\"{} committed\", entry.getName());\n+    } else {\n+      LOGGER.debug(\"Match task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjgwNDQ5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NzoyOFrOGbY1RQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NzoyOFrOGbY1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTU4OQ==", "bodyText": "\u2757 See other comment", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371589", "createdAt": "2020-05-27T18:57:28Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -208,12 +220,18 @@ private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener li\n    */\n   private void commitCreate(AsyncFileEntry entry, boolean success) {\n \n-    LOGGER.debug(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n+    LOGGER.trace(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n       entry.commit();\n       entry.getParent().ifPresent(e -> e.addChild(entry));\n+      LOGGER.debug(\n+          \"File {} committed to {}\",\n+          entry.getName(),\n+          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+    } else {\n+      LOGGER.debug(\"Create task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NjgyMTY3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTowMjozNFrOGbZAhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTowMjozNFrOGbZAhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3NDQ3MQ==", "bodyText": "\u270f\ufe0f Please don't create a temp collection just to get a string representation of it. There are collectors for streams that will do that directly.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431374471", "createdAt": "2020-05-27T19:02:34Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +392,37 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {\n+        String files =\n+            processing\n+                .stream()\n+                .map(AsyncFileEntry::getName)\n+                .collect(Collectors.toList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a47b9960997f79253ec9506c92c384fe5cf5f7"}, "originalPosition": 198}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDI0NTU3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0Njo0NFrOGeBhRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0Njo0NFrOGeBhRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTM2NQ==", "bodyText": "\u2757 using finalization is not advisable. In addition, this object will never be GCed since at init time, a timer task is created and registered in the timer. Therefore, there will always be a hard reference to this object which is why it will never be GCed", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434135365", "createdAt": "2020-06-02T19:46:44Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +402,36 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {\n+        String files =\n+            processing.stream().map(AsyncFileEntry::getName).collect(Collectors.joining(\", \"));\n+        LOGGER.debug(\"{} files being processed: {}\", processing.size(), files);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  protected void finalize() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDQ1NjAxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NToxNlrOGeDorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NToxNlrOGeDorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDAyOQ==", "bodyText": "you might want to add another condition to the if: LOGGER.isDebugEnabled()", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434170029", "createdAt": "2020-06-02T20:55:16Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +402,36 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDUyOTI3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToxOTozNVrOGeEWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToxOTozNVrOGeEWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTc2Mw==", "bodyText": "\u2757 This is actually not a good idea to do in the constructor as you are creating a timer and scheduling a task that will have an implicit reference to this object but this object has not yet been created.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434181763", "createdAt": "2020-06-02T21:19:35Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +77,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();\n+      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDU5NjYwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Mzo0MVrOGeFAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMjowNDoyNVrOGeFhdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjU4Mw==", "bodyText": "\u2753 Did you realize that you will only startup the timer thread if, at init time, debug is enabled?", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434192583", "createdAt": "2020-06-02T21:43:41Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -120,10 +115,20 @@ private AsyncFileAlterationObserver(AsyncFileEntry entry, ObjectPersistentStore\n   public void initialize() throws IllegalStateException {\n     initChildEntries(rootFile);\n     serializer.store(rootFile.getName(), rootFile);\n+\n+    if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIwMDk1MQ==", "bodyText": "Good point. The timertask checks for debug before working anyway, I'll just remove this one", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434200951", "createdAt": "2020-06-02T22:04:25Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -120,10 +115,20 @@ private AsyncFileAlterationObserver(AsyncFileEntry entry, ObjectPersistentStore\n   public void initialize() throws IllegalStateException {\n     initChildEntries(rootFile);\n     serializer.store(rootFile.getName(), rootFile);\n+\n+    if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjU4Mw=="}, "originalCommit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDYwMDAzOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/DurableFileSystemFileConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NTowMlrOGeFDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo1Njo1MFrOGeFVrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzE3OA==", "bodyText": "\u2757 Because you re-used the same destroy() method that already existed on the observer, the side effect is that the file will also be deleted. is that what you want?", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434193178", "createdAt": "2020-06-02T21:45:02Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/DurableFileSystemFileConsumer.java", "diffHunk": "@@ -108,5 +108,9 @@ private AsyncFileAlterationObserver backwardsCompatibility(String fileName) {\n   public void shutdown() throws Exception {\n     super.shutdown();\n     listener.destroy();\n+\n+    if (observer != null) {\n+      observer.destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5NzkzMw==", "bodyText": "Hmm, this should be fine. This destroy method will delete the root folder, which should be safe to get rid of if the object is being destroyed. Everything that accesses that variable is ultimately called by DurableFileSystemFileConsumer, so sincee we're shutting it down in that class I can't see it needing to be used again", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434197933", "createdAt": "2020-06-02T21:56:50Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/DurableFileSystemFileConsumer.java", "diffHunk": "@@ -108,5 +108,9 @@ private AsyncFileAlterationObserver backwardsCompatibility(String fileName) {\n   public void shutdown() throws Exception {\n     super.shutdown();\n     listener.destroy();\n+\n+    if (observer != null) {\n+      observer.destroy();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzE3OA=="}, "originalCommit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4598, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}