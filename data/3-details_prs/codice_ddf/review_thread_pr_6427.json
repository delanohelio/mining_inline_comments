{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzQzMjgw", "number": 6427, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoyNTo1OVrOE7nJWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoyNTo1OVrOE7nJWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwOTQyODExOnYy", "diffSide": "RIGHT", "path": "platform/email/platform-email-impl/src/main/java/org/codice/ddf/platform/email/impl/SmtpClientImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoyNTo1OVrOH3WvvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjo0NTo1MVrOH3Xigg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwNjM5Ng==", "bodyText": "\u270f\ufe0f Would it be worthwhile to reset the class loader in a finally block?", "url": "https://github.com/codice/ddf/pull/6427#discussion_r527806396", "createdAt": "2020-11-20T16:25:59Z", "author": {"login": "emmberk"}, "path": "platform/email/platform-email-impl/src/main/java/org/codice/ddf/platform/email/impl/SmtpClientImpl.java", "diffHunk": "@@ -126,15 +127,34 @@ public Session createSession() {\n     properties.setProperty(SMTP_HOST_PROPERTY, hostName);\n     properties.setProperty(SMTP_PORT_PROPERTY, portNumber.toString());\n \n+    // Jakarta Mail uses java.util.ServiceLoader.load() to look for service implementations, in\n+    // this case of the javax.mail.Provider interface. ServiceLoader relies on the Thread Context\n+    // Classloader which is not necessarily the correct behavior in an OSGi context and may result\n+    // in services not being found.\n+    //\n+    // To fix this, we set the current thread classloader to the classloader of the bundle\n+    // containing those services (making sure to restore the original classloader before returning)\n+    // so that ServiceLoader will always find them.\n+    //\n+    // TODO: Look into SPI Fly. Might be a better solution\n+    // http://aries.apache.org/modules/spi-fly.html\n+    ClassLoader originalContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    Thread.currentThread().setContextClassLoader(Provider.class.getClassLoader());\n+\n+    Session session;\n     if (StringUtils.isNotBlank(userName)) {\n       properties.put(SMTP_AUTH_PROPERTY, TRUE);\n       properties.put(SMTP_START_TLS_ENABLE_PROPERTY, TRUE);\n \n-      return Session.getInstance(properties, createAuthenticator());\n+      session = Session.getInstance(properties, createAuthenticator());\n     } else {\n       properties.setProperty(SMTP_AUTH_PROPERTY, FALSE);\n-      return Session.getInstance(properties);\n+\n+      session = Session.getInstance(properties);\n     }\n+\n+    Thread.currentThread().setContextClassLoader(originalContextClassLoader);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e3aed6db979c8307ca0c783e9927a2bc48dbc61d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxMjk0NQ==", "bodyText": "Good idea", "url": "https://github.com/codice/ddf/pull/6427#discussion_r527812945", "createdAt": "2020-11-20T16:36:09Z", "author": {"login": "SmithJosh"}, "path": "platform/email/platform-email-impl/src/main/java/org/codice/ddf/platform/email/impl/SmtpClientImpl.java", "diffHunk": "@@ -126,15 +127,34 @@ public Session createSession() {\n     properties.setProperty(SMTP_HOST_PROPERTY, hostName);\n     properties.setProperty(SMTP_PORT_PROPERTY, portNumber.toString());\n \n+    // Jakarta Mail uses java.util.ServiceLoader.load() to look for service implementations, in\n+    // this case of the javax.mail.Provider interface. ServiceLoader relies on the Thread Context\n+    // Classloader which is not necessarily the correct behavior in an OSGi context and may result\n+    // in services not being found.\n+    //\n+    // To fix this, we set the current thread classloader to the classloader of the bundle\n+    // containing those services (making sure to restore the original classloader before returning)\n+    // so that ServiceLoader will always find them.\n+    //\n+    // TODO: Look into SPI Fly. Might be a better solution\n+    // http://aries.apache.org/modules/spi-fly.html\n+    ClassLoader originalContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    Thread.currentThread().setContextClassLoader(Provider.class.getClassLoader());\n+\n+    Session session;\n     if (StringUtils.isNotBlank(userName)) {\n       properties.put(SMTP_AUTH_PROPERTY, TRUE);\n       properties.put(SMTP_START_TLS_ENABLE_PROPERTY, TRUE);\n \n-      return Session.getInstance(properties, createAuthenticator());\n+      session = Session.getInstance(properties, createAuthenticator());\n     } else {\n       properties.setProperty(SMTP_AUTH_PROPERTY, FALSE);\n-      return Session.getInstance(properties);\n+\n+      session = Session.getInstance(properties);\n     }\n+\n+    Thread.currentThread().setContextClassLoader(originalContextClassLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwNjM5Ng=="}, "originalCommit": {"oid": "e3aed6db979c8307ca0c783e9927a2bc48dbc61d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxNTIyMA==", "bodyText": "\u270f\ufe0f Should the Thread.currentThread().setContextClassLoader(Provider.class.getClassLoader()); line go inside the try block in case something goes wrong between that line and when the try block starts?", "url": "https://github.com/codice/ddf/pull/6427#discussion_r527815220", "createdAt": "2020-11-20T16:39:35Z", "author": {"login": "emmberk"}, "path": "platform/email/platform-email-impl/src/main/java/org/codice/ddf/platform/email/impl/SmtpClientImpl.java", "diffHunk": "@@ -126,15 +127,34 @@ public Session createSession() {\n     properties.setProperty(SMTP_HOST_PROPERTY, hostName);\n     properties.setProperty(SMTP_PORT_PROPERTY, portNumber.toString());\n \n+    // Jakarta Mail uses java.util.ServiceLoader.load() to look for service implementations, in\n+    // this case of the javax.mail.Provider interface. ServiceLoader relies on the Thread Context\n+    // Classloader which is not necessarily the correct behavior in an OSGi context and may result\n+    // in services not being found.\n+    //\n+    // To fix this, we set the current thread classloader to the classloader of the bundle\n+    // containing those services (making sure to restore the original classloader before returning)\n+    // so that ServiceLoader will always find them.\n+    //\n+    // TODO: Look into SPI Fly. Might be a better solution\n+    // http://aries.apache.org/modules/spi-fly.html\n+    ClassLoader originalContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    Thread.currentThread().setContextClassLoader(Provider.class.getClassLoader());\n+\n+    Session session;\n     if (StringUtils.isNotBlank(userName)) {\n       properties.put(SMTP_AUTH_PROPERTY, TRUE);\n       properties.put(SMTP_START_TLS_ENABLE_PROPERTY, TRUE);\n \n-      return Session.getInstance(properties, createAuthenticator());\n+      session = Session.getInstance(properties, createAuthenticator());\n     } else {\n       properties.setProperty(SMTP_AUTH_PROPERTY, FALSE);\n-      return Session.getInstance(properties);\n+\n+      session = Session.getInstance(properties);\n     }\n+\n+    Thread.currentThread().setContextClassLoader(originalContextClassLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwNjM5Ng=="}, "originalCommit": {"oid": "e3aed6db979c8307ca0c783e9927a2bc48dbc61d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgxOTM5NA==", "bodyText": "Ah, yeah. I changed it", "url": "https://github.com/codice/ddf/pull/6427#discussion_r527819394", "createdAt": "2020-11-20T16:45:51Z", "author": {"login": "SmithJosh"}, "path": "platform/email/platform-email-impl/src/main/java/org/codice/ddf/platform/email/impl/SmtpClientImpl.java", "diffHunk": "@@ -126,15 +127,34 @@ public Session createSession() {\n     properties.setProperty(SMTP_HOST_PROPERTY, hostName);\n     properties.setProperty(SMTP_PORT_PROPERTY, portNumber.toString());\n \n+    // Jakarta Mail uses java.util.ServiceLoader.load() to look for service implementations, in\n+    // this case of the javax.mail.Provider interface. ServiceLoader relies on the Thread Context\n+    // Classloader which is not necessarily the correct behavior in an OSGi context and may result\n+    // in services not being found.\n+    //\n+    // To fix this, we set the current thread classloader to the classloader of the bundle\n+    // containing those services (making sure to restore the original classloader before returning)\n+    // so that ServiceLoader will always find them.\n+    //\n+    // TODO: Look into SPI Fly. Might be a better solution\n+    // http://aries.apache.org/modules/spi-fly.html\n+    ClassLoader originalContextClassLoader = Thread.currentThread().getContextClassLoader();\n+    Thread.currentThread().setContextClassLoader(Provider.class.getClassLoader());\n+\n+    Session session;\n     if (StringUtils.isNotBlank(userName)) {\n       properties.put(SMTP_AUTH_PROPERTY, TRUE);\n       properties.put(SMTP_START_TLS_ENABLE_PROPERTY, TRUE);\n \n-      return Session.getInstance(properties, createAuthenticator());\n+      session = Session.getInstance(properties, createAuthenticator());\n     } else {\n       properties.setProperty(SMTP_AUTH_PROPERTY, FALSE);\n-      return Session.getInstance(properties);\n+\n+      session = Session.getInstance(properties);\n     }\n+\n+    Thread.currentThread().setContextClassLoader(originalContextClassLoader);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwNjM5Ng=="}, "originalCommit": {"oid": "e3aed6db979c8307ca0c783e9927a2bc48dbc61d"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4405, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}