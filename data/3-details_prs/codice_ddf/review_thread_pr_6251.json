{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODAwNjg3", "number": 6251, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyODozNVrOEcGLZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozNDoyNlrOEcGWgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODk2ODA3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyODozNVrOHGa16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxODozMjoxNVrOHGku_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MzI4OA==", "bodyText": "\u270f\ufe0f Might be good to create a custom subclass of RuntimeException for use here, especially as it would allow for the code that catches the exception to handle it differently from other RTExceptions.", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476493288", "createdAt": "2020-08-25T14:28:35Z", "author": {"login": "coyotesqrl"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -332,4 +337,34 @@ public void run() {\n       offsetResultQueue.closeResultQueue();\n     }\n   }\n+\n+  /**\n+   * Logs unhandled Throwable, adds processing details, and closes the result queue when Errors\n+   * (e.g. NoClassDefFoundError) and RuntimeExceptions are thrown from the wrapped runnable.\n+   */\n+  static class QueryResponseRunnableMonitor implements Runnable {\n+\n+    final Runnable wrapped;\n+\n+    final QueryResponseImpl queryResponse;\n+\n+    QueryResponseRunnableMonitor(Runnable runnable, QueryResponseImpl queryResponse) {\n+      wrapped = runnable;\n+      this.queryResponse = queryResponse;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        wrapped.run();\n+      } catch (Throwable t) {\n+        LOGGER.debug(\"Unhandled exception while watching query response runnable.\", t);\n+        queryResponse\n+            .getProcessingDetails()\n+            .add(new ProcessingDetailsImpl(\"unknown\", new RuntimeException(t)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY1NTM1OA==", "bodyText": "I think I would need to be exporting that exception for it to help other modules.  If I export from the standard framework, then that would create coupling to that module.  Though I think throwing a FederationException would make sense here since it is from the federation strategy which throws FederationExceptions.", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476655358", "createdAt": "2020-08-25T18:32:15Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -332,4 +337,34 @@ public void run() {\n       offsetResultQueue.closeResultQueue();\n     }\n   }\n+\n+  /**\n+   * Logs unhandled Throwable, adds processing details, and closes the result queue when Errors\n+   * (e.g. NoClassDefFoundError) and RuntimeExceptions are thrown from the wrapped runnable.\n+   */\n+  static class QueryResponseRunnableMonitor implements Runnable {\n+\n+    final Runnable wrapped;\n+\n+    final QueryResponseImpl queryResponse;\n+\n+    QueryResponseRunnableMonitor(Runnable runnable, QueryResponseImpl queryResponse) {\n+      wrapped = runnable;\n+      this.queryResponse = queryResponse;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        wrapped.run();\n+      } catch (Throwable t) {\n+        LOGGER.debug(\"Unhandled exception while watching query response runnable.\", t);\n+        queryResponse\n+            .getProcessingDetails()\n+            .add(new ProcessingDetailsImpl(\"unknown\", new RuntimeException(t)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MzI4OA=="}, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3ODk5NjUwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/QueryOperations.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozNDoyNlrOHGbHeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxOTozOTozOVrOHGnAAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5Nzc4Ng==", "bodyText": "\u270f\ufe0f !isEmpty() instead of size check.", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476497786", "createdAt": "2020-08-25T14:34:26Z", "author": {"login": "coyotesqrl"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/QueryOperations.java", "diffHunk": "@@ -219,18 +219,38 @@ QueryResponse query(\n       queryResponse = processPostQueryAccessPlugins(queryResponse);\n       queryResponse = processPostQueryPlugins(queryResponse);\n \n-      LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n-      LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+      log(queryResponse);\n \n     } catch (OAuthPluginException e) {\n       throw e;\n     } catch (RuntimeException re) {\n+      LOGGER.debug(\"Unhandled runtime exception during query\", re);\n       throw new UnsupportedQueryException(\"Exception during runtime while performing query\", re);\n     }\n \n     return queryResponse;\n   }\n \n+  private void log(QueryResponse queryResponse) {\n+    LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n+    LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+    if (LOGGER.isTraceEnabled() && queryResponse.getProcessingDetails() != null) {\n+      LOGGER.trace(\"Processing details count: {}\", queryResponse.getProcessingDetails().size());\n+      for (ProcessingDetails details : queryResponse.getProcessingDetails()) {\n+        if (details.getException() != null) {\n+          LOGGER.trace(\n+              \"Source [{}] query exception\", details.getSourceId(), details.getException());\n+        }\n+        if (details.getWarnings() != null && details.getWarnings().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjU4Njg2MQ==", "bodyText": "What are the trade offs between a size check and using isEmpty?\nhttps://github.com/AdoptOpenJDK/openjdk-jdk8u/blob/master/jdk/src/share/classes/java/util/ArrayList.java#L278-L294", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476586861", "createdAt": "2020-08-25T16:39:57Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/QueryOperations.java", "diffHunk": "@@ -219,18 +219,38 @@ QueryResponse query(\n       queryResponse = processPostQueryAccessPlugins(queryResponse);\n       queryResponse = processPostQueryPlugins(queryResponse);\n \n-      LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n-      LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+      log(queryResponse);\n \n     } catch (OAuthPluginException e) {\n       throw e;\n     } catch (RuntimeException re) {\n+      LOGGER.debug(\"Unhandled runtime exception during query\", re);\n       throw new UnsupportedQueryException(\"Exception during runtime while performing query\", re);\n     }\n \n     return queryResponse;\n   }\n \n+  private void log(QueryResponse queryResponse) {\n+    LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n+    LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+    if (LOGGER.isTraceEnabled() && queryResponse.getProcessingDetails() != null) {\n+      LOGGER.trace(\"Processing details count: {}\", queryResponse.getProcessingDetails().size());\n+      for (ProcessingDetails details : queryResponse.getProcessingDetails()) {\n+        if (details.getException() != null) {\n+          LOGGER.trace(\n+              \"Source [{}] query exception\", details.getSourceId(), details.getException());\n+        }\n+        if (details.getWarnings() != null && details.getWarnings().size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5Nzc4Ng=="}, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY2NzQ1MA==", "bodyText": "Clarity over performance (which is negligible). Having been tasked with resolving a lot of SonarQube findings recently, it's fresh on my mind. Though I can't find a link to it right now, it pops up as a minor code smell.", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476667450", "createdAt": "2020-08-25T18:53:54Z", "author": {"login": "coyotesqrl"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/QueryOperations.java", "diffHunk": "@@ -219,18 +219,38 @@ QueryResponse query(\n       queryResponse = processPostQueryAccessPlugins(queryResponse);\n       queryResponse = processPostQueryPlugins(queryResponse);\n \n-      LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n-      LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+      log(queryResponse);\n \n     } catch (OAuthPluginException e) {\n       throw e;\n     } catch (RuntimeException re) {\n+      LOGGER.debug(\"Unhandled runtime exception during query\", re);\n       throw new UnsupportedQueryException(\"Exception during runtime while performing query\", re);\n     }\n \n     return queryResponse;\n   }\n \n+  private void log(QueryResponse queryResponse) {\n+    LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n+    LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+    if (LOGGER.isTraceEnabled() && queryResponse.getProcessingDetails() != null) {\n+      LOGGER.trace(\"Processing details count: {}\", queryResponse.getProcessingDetails().size());\n+      for (ProcessingDetails details : queryResponse.getProcessingDetails()) {\n+        if (details.getException() != null) {\n+          LOGGER.trace(\n+              \"Source [{}] query exception\", details.getSourceId(), details.getException());\n+        }\n+        if (details.getWarnings() != null && details.getWarnings().size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5Nzc4Ng=="}, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjY5MjQ4Mw==", "bodyText": "I think I found it.\n\nUsing Collection.size() to test for emptiness works, but using Collection.isEmpty() makes the code more readable and can be more performant. The time complexity of any isEmpty() method implementation should be O(1) whereas some implementations of size() can be O(n).\n\nhttps://rules.sonarsource.com/java/tag/clumsy/RSPEC-1155", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476692483", "createdAt": "2020-08-25T19:39:39Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/QueryOperations.java", "diffHunk": "@@ -219,18 +219,38 @@ QueryResponse query(\n       queryResponse = processPostQueryAccessPlugins(queryResponse);\n       queryResponse = processPostQueryPlugins(queryResponse);\n \n-      LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n-      LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+      log(queryResponse);\n \n     } catch (OAuthPluginException e) {\n       throw e;\n     } catch (RuntimeException re) {\n+      LOGGER.debug(\"Unhandled runtime exception during query\", re);\n       throw new UnsupportedQueryException(\"Exception during runtime while performing query\", re);\n     }\n \n     return queryResponse;\n   }\n \n+  private void log(QueryResponse queryResponse) {\n+    LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n+    LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+    if (LOGGER.isTraceEnabled() && queryResponse.getProcessingDetails() != null) {\n+      LOGGER.trace(\"Processing details count: {}\", queryResponse.getProcessingDetails().size());\n+      for (ProcessingDetails details : queryResponse.getProcessingDetails()) {\n+        if (details.getException() != null) {\n+          LOGGER.trace(\n+              \"Source [{}] query exception\", details.getSourceId(), details.getException());\n+        }\n+        if (details.getWarnings() != null && details.getWarnings().size() > 0) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5Nzc4Ng=="}, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4563, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}