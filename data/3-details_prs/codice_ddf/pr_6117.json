{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTQxNTUy", "number": 6117, "title": "Extract Solr from Catalog Core", "bodyText": "What does this PR do?\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies.\nWho is reviewing it?\n\n@lamhuy\n@derekwilhelm\nSelect relevant component teams:\n\n@codice/solr\nAsk 2 committers to review/merge the PR and tag them here.\n\n@rzwiefel\n@Lambeaux\nHow should this be tested?\n\n\nInstall the standard install profile\nfeature:install catalog-solr-cache\nCreate loopback OpenSearch source named loopback-os\nVerify cache source is available\ncurl --request GET \\ --url https://localhost:8993/services/catalog/sources \\ --header 'authorization: Basic YWRtaW46YWRtaW4=' \\ --header 'referer: https://localhost:8993/services/catalog/' \\ --header 'x-requested-with: XMLHttpRequest' \\ -k\nQuery loopback-os and request results to be cached\ncurl --request GET \\ --url 'https://localhost:8993/services/catalog/query?q=*&src=loopback-os&mode=cache' \\ --header 'authorization: Basic YWRtaW46YWRtaW4=' \\ --header 'referer: https://localhost:8993/services/catalog/' \\ --header 'x-requested-with: XMLHttpRequest' \\ -k\nQuery cache to see loopback-os cached results\ncurl --request GET \\ --url 'https://localhost:8993/services/catalog/query?q=*&src=cache' \\ --header 'authorization: Basic YWRtaW46YWRtaW4=' \\ --header 'referer: https://localhost:8993/services/catalog/' \\ --header 'x-requested-with: XMLHttpRequest' \\ -k\nClear cache from karaf shell solr:cache --clear and do previous command to verify cache results are 0\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: n/a\nScreenshots\n\nChecklist:\n\n[ n/a ] Documentation Updated\n[ n/a ] Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-06-04T01:53:04Z", "url": "https://github.com/codice/ddf/pull/6117", "merged": true, "mergeCommit": {"oid": "21ddc98bdec4039648362a282b695fb994d947ed"}, "closed": true, "closedAt": "2020-06-09T17:35:30Z", "author": {"login": "pklinef"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcoCJU5gFqTQyNDcwNTg1OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpmKtYAFqTQyNzIyNzI3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzA1ODU5", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-424705859", "createdAt": "2020-06-04T18:13:03Z", "commit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxMzowM1rOGfR9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxMzowM1rOGfR9Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg==", "bodyText": "\u270f\ufe0f  do we want any debug or trace logging here? Perhaps to log that we found and added cache sources to the properties?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435453242", "createdAt": "2020-06-04T18:13:03Z", "author": {"login": "rzwiefel"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    HashMap<String, Serializable> props = new HashMap<>(input.getProperties());\n+    props.put(\"cache-sources\", String.join(\",\", input.getSourceIds()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzA2NjQ5", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-424706649", "createdAt": "2020-06-04T18:14:10Z", "commit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxNDoxMFrOGfR_cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxNDoxMFrOGfR_cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA==", "bodyText": "\u270f\ufe0f just double checking, was using the logger for SolrCacheSource.class intended?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435453808", "createdAt": "2020-06-04T18:14:10Z", "author": {"login": "rzwiefel"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzM2OTkz", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-424736993", "createdAt": "2020-06-04T18:50:06Z", "commit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDowNlrOGfTiWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDowNlrOGfTiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTEyOA==", "bodyText": "You can ignore both of these, I was just checking into other ways to do this with optional/streaming to see how it looked but don't really strike me as advantageous. And that second one was just for POC, you can kinda curry args as you build up ctor parameters.. so while nifty.... having to specify the Function since it can't infer the type is not pretty at all  (neither is nested lambdas really) \ud83d\ude02\nclonedResults\n    .stream()\n    .findFirst()\n    .map(Result::getMetacard)\n    .map(Metacard::getSourceId)\n    .ifPresent(sourceId -> sourceResponse.getProcessingDetails()\n        .stream()\n        .map(sourceDetails -> new ProcessingDetailsImpl(sourceDetails, sourceId))\n        .collect(Collectors.toSet()));\n      clonedResults\n        .stream()\n        .findFirst()\n        .map(Result::getMetacard)\n        .map(Metacard::getSourceId)\n        .map(\n            sourceId ->\n                (Function<SourceProcessingDetails, ProcessingDetailsImpl>)\n                    sourceDetail -> new ProcessingDetailsImpl(sourceDetail, sourceId))\n        .map(\n            pdcreator ->\n                response\n                    .getProcessingDetails()\n                    .stream()\n                    .map(pdcreator)\n                    .collect(Collectors.toSet()))\n        .orElseGet(HashSet::new);", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435479128", "createdAt": "2020-06-04T18:50:06Z", "author": {"login": "rzwiefel"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    LOGGER.debug(\"Post query processing of QueryResponse.\");\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {\n+    cacheCommitPhaser.shutdown();\n+    cacheBulkProcessor.shutdown();\n+  }\n+\n+  private void addToCache(QueryResponse input) {\n+    SourceResponse clonedSourceResponse = cloneResponse(input);\n+    cacheExecutorService.submit(\n+        () -> {\n+          try {\n+            cacheBulkProcessor.add(clonedSourceResponse.getResults());\n+          } catch (VirtualMachineError vme) {\n+            throw vme;\n+          } catch (Throwable throwable) {\n+            LOGGER.warn(\"Unable to add results for bulk processing\", throwable);\n+          }\n+        });\n+  }\n+\n+  private SourceResponse cloneResponse(SourceResponse sourceResponse) {\n+\n+    List<Result> clonedResults =\n+        sourceResponse\n+            .getResults()\n+            .stream()\n+            .map(Result::getMetacard)\n+            .map(m -> new MetacardImpl(m, m.getMetacardType()))\n+            .map(ResultImpl::new)\n+            .collect(Collectors.toList());\n+\n+    Set<ProcessingDetails> processingDetails = new HashSet<>();\n+    if (clonedResults.size() > 0) {\n+      String sourceId = clonedResults.get(0).getMetacard().getSourceId();\n+      processingDetails =\n+          sourceResponse\n+              .getProcessingDetails()\n+              .stream()\n+              .map(sourceDetails -> new ProcessingDetailsImpl(sourceDetails, sourceId))\n+              .collect(Collectors.toSet());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 141}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/19d243c30e8c731c101c8a43592ac3299ee9571c", "committedDate": "2020-06-04T00:30:26Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}, "afterCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/b3dc07f7745ffb5431eca9941655778a5af6640f", "committedDate": "2020-06-04T21:34:08Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0ODYxMzA3", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-424861307", "createdAt": "2020-06-04T21:51:45Z", "commit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1MTo0NVrOGfZSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxOTowM1rOGfdWeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzM1MQ==", "bodyText": "\u2753 Making a note for later (might already be addressed) - should the cache separately support management commands with similar semantics so you can still work with it or verify behavior?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435573351", "createdAt": "2020-06-04T21:51:45Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -98,9 +95,6 @@\n   )\n   boolean force = false;\n \n-  @Option(name = \"--cache\", description = \"Only remove cached entries.\")\n-  boolean cache = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDYxMg==", "bodyText": "\u2753 Just so I'm understanding this correctly - pulling out the cache renders this mode property completely unnecessary now?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435574612", "createdAt": "2020-06-04T21:55:12Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -295,15 +267,10 @@ private QueryRequest getIntendedQuery(FilterBuilder filterBuilder, boolean isReq\n     }\n \n     QueryImpl query = new QueryImpl(filter);\n-\n     query.setRequestsTotalResultsCount(isRequestForTotal);\n-\n     query.setPageSize(batchSize);\n \n-    Map<String, Serializable> properties = new HashMap<>();\n-    properties.put(\"mode\", \"native\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTU3Nw==", "bodyText": "\u2753 This will never run against the cache, even if it happens to be installed, so filters are now fair game in all cases?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435575577", "createdAt": "2020-06-04T21:57:38Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveCommand.java", "diffHunk": "@@ -124,7 +90,7 @@ private Object executeRemoveFromStore() throws CatalogCommandException {\n       }\n \n       if (hasFilter()) {\n-        QueryRequestImpl queryRequest = new QueryRequestImpl(getQuery(), false);\n+        QueryRequestImpl queryRequest = new QueryRequestImpl(new QueryImpl(getFilter()), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU2Nw==", "bodyText": "\ud83d\udcaf\n\u2753 Does the new way to leverage the Solr cache have dependencies on the provider in order to share the third-party Solr support? Or does it bring its own? I'm wondering if the total catalog-min distribution will see this size reduction if the consumers opt out of Solr caching entirely.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435595567", "createdAt": "2020-06-04T22:53:01Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/pom.xml", "diffHunk": "@@ -385,7 +350,7 @@\n                         <configuration>\n                             <rules>\n                                 <ArtifactSizeEnforcerRule implementation=\"org.codice.maven.artifactsize.ArtifactSizeEnforcerRule\">\n-                                    <maxArtifactSize>63.2_MB</maxArtifactSize>\n+                                    <maxArtifactSize>10.5_MB</maxArtifactSize>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw==", "bodyText": "\u2753 Is this being reassigned? Can it be final instead?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435606353", "createdAt": "2020-06-04T23:28:10Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -127,97 +88,43 @@\n    */\n   protected List<PostFederatedQueryPlugin> postQuery;\n \n-  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory(this);\n+  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxMDkwMg==", "bodyText": "\u2753 I'm a tad confused why we need finalSourceQueryRequest, is it because of side effects? If so do we need to copy sourceQueryRequest instead of just assigning? Or was this done just for readability?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435610902", "createdAt": "2020-06-04T23:36:29Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -274,9 +181,9 @@ private QueryResponse sourceFederate(List<Source> sources, final QueryRequest qu\n           LOGGER.info(\"Plugin stopped processing\", e);\n         }\n \n+        QueryRequest finalSourceQueryRequest = sourceQueryRequest;\n         futures.put(\n-            queryCompletion.submit(\n-                new CallableSourceResponse(new TimedSource(source), sourceQueryRequest)),\n+            queryCompletion.submit(() -> new TimedSource(source).query(finalSourceQueryRequest)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ==", "bodyText": "\u2753 Are both this federateStrategy and the above strategy necessary? They seem like dupes. Are they stateful and are you comparing state? Seems like they were made for different tests but it's not clear what the difference is.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435622409", "createdAt": "2020-06-05T00:05:45Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.federation.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.Query;\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryImpl;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.source.Source;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.geotools.filter.NullFilterImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.opengis.filter.sort.SortBy;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SortedFederationStrategyTest {\n+\n+  private static final long LONG_TIMEOUT = 1000;\n+\n+  /** Constant to test contract of source latency prefix. */\n+  private static final String METRICS_SOURCE_ELAPSED_PREFIX = \"metrics.source.elapsed.\";\n+\n+  private ExecutorService queryExecutor;\n+\n+  @Mock private Query mockQuery;\n+\n+  private SortedFederationStrategy strategy;\n+\n+  private SortedFederationStrategy federateStrategy;\n+\n+  @Mock private PreFederatedQueryPlugin preQueryPlugin;\n+\n+  private MetacardImpl metacard;\n+\n+  @Mock private SourceResponse mockResponse;\n+\n+  @Mock private SortedQueryMonitorFactory mockSortedQueryMonitorFactory;\n+\n+  @Mock private SortedQueryMonitor mockSortedQueryMonitor;\n+\n+  private HashMap<String, Serializable> properties;\n+\n+  private ArgumentCaptor<QueryRequestImpl> requestArgumentCaptor;\n+\n+  ArgumentCaptor<QueryResponseImpl> responseArgumentCaptor;\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    queryExecutor = MoreExecutors.newDirectExecutorService();\n+\n+    when(preQueryPlugin.process(any(), any()))\n+        .thenAnswer(invocation -> invocation.getArguments()[1]);\n+\n+    strategy =\n+        new SortedFederationStrategy(\n+            queryExecutor, Arrays.asList(preQueryPlugin), new ArrayList<>());\n+\n+    federateStrategy =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjAzOQ==", "bodyText": "\u2753 Does the cache need hard-coded dynamic capabilities?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435626039", "createdAt": "2020-06-05T00:20:36Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/pom.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <artifactId>catalog-solr</artifactId>\n+        <groupId>ddf.catalog.solr</groupId>\n+        <version>2.25.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>catalog-solr-cache</artifactId>\n+    <name>DDF :: Catalog :: Solr :: Cache</name>\n+    <packaging>bundle</packaging>\n+    <description>Catalog Provider that connects to Solr</description>\n+    <dependencies>\n+        <dependency>\n+            <groupId>ddf.platform.util</groupId>\n+            <artifactId>platform-util</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>catalog-core-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>catalog-core-api-impl</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>filter-proxy</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.solr</groupId>\n+            <artifactId>catalog-solr-core</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.osgi</groupId>\n+            <artifactId>org.osgi.core</artifactId>\n+            <version>${osgi.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjg2Mw==", "bodyText": "\u2753 Properties can't be null right?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435626863", "createdAt": "2020-06-05T00:24:01Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CacheModeQueryPlugin.class);\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzg5Nw==", "bodyText": "\u2753 Is it worth making these final by removing the setters and doing constructor injection instead?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435627897", "createdAt": "2020-06-05T00:28:20Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg==", "bodyText": "\u2753 Do we need null checks for any of these things in the ctor?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435628462", "createdAt": "2020-06-05T00:30:53Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ==", "bodyText": "\u2753 If we don't make them final do we need to null check in the setters or here?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435628579", "createdAt": "2020-06-05T00:31:23Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    LOGGER.debug(\"Adding {} federated query results to cache.\", input.getResults().size());\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODU0Ng==", "bodyText": "\u2753 Now that group IDs are changing, besides updating dependent artifacts downstream (handled separately), is there any build-level or infrastructure configuration we will need to update?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435638546", "createdAt": "2020-06-05T01:12:41Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-commands/pom.xml", "diffHunk": "@@ -15,12 +15,12 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <parent>\n-        <artifactId>core</artifactId>\n-        <groupId>ddf.catalog.core</groupId>\n+        <artifactId>catalog-solr</artifactId>\n+        <groupId>ddf.catalog.solr</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODg1MQ==", "bodyText": "\ud83d\udc4d   I think seeing this addresses one of my earlier questions.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435638851", "createdAt": "2020-06-05T01:14:18Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-commands/src/main/java/org/codice/ddf/commands/solr/CacheCommand.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.commands.solr;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.apache.karaf.shell.api.console.Session;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.factory.SolrClientFactory;\n+\n+@Service\n+@Command(\n+  scope = SolrCommands.NAMESPACE,\n+  name = \"cache\",\n+  description = \"Support the remote result cache.\"\n+)\n+public class CacheCommand extends SolrCommands {\n+\n+  @Option(name = \"--clear\", description = \"Clear the remote result cache.\", required = true)\n+  @VisibleForTesting\n+  protected boolean clear = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTkyOQ==", "bodyText": "\u2753 Do we have any other E2E tests for the cache? Can we run them independently now?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435639929", "createdAt": "2020-06-05T01:19:03Z", "author": {"login": "Lambeaux"}, "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "diffHunk": "@@ -1189,44 +1188,6 @@ public void testUpdateContentResourceUri() throws IOException {\n     deleteTemporaryFile(fileName);\n   }\n \n-  @Test\n-  public void testCachedContentLengthHeader() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDk3OTgz", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-425497983", "createdAt": "2020-06-05T17:41:35Z", "commit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo0MTozNlrOGf3gfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODo1NFrOGf4Dig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODQ3Nw==", "bodyText": "is this being used anymore?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436068477", "createdAt": "2020-06-05T17:41:36Z", "author": {"login": "lamhuy"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MDY3MQ==", "bodyText": "is this class being used anymore?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436070671", "createdAt": "2020-06-05T17:46:04Z", "author": {"login": "lamhuy"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java", "diffHunk": "@@ -12,12 +12,13 @@\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n \n-package ddf.catalog.cache.solr.impl;\n+package org.codice.ddf.catalog.solr.cache.impl;\n \n import ddf.catalog.CatalogFramework;\n import java.util.function.Supplier;\n \n public class LocalCatalogIdSupplier implements Supplier<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzQ1MA==", "bodyText": "does this interval seem overkilled? if we are caching for 7 days and checking every 10 min to remove expired doc.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436077450", "createdAt": "2020-06-05T17:58:54Z", "author": {"login": "lamhuy"}, "path": "catalog/solr/catalog-solr-cache/src/main/resources/OSGI-INF/metatype/SolrCache.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version. \n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+ -->\n+<metatype:MetaData xmlns:metatype=\"http://www.osgi.org/xmlns/metatype/v1.0.0\">\n+\n+    <OCD name=\"Solr Federated Result Cache\"\n+         id=\"org.codice.ddf.catalog.solr.cache.impl.SolrCache\">\n+        <AD name=\"AnyText Expansion Field Whitelist\" id=\"anyTextFieldWhitelist\" cardinality=\"100\" required=\"false\" type=\"String\"\n+            description=\"List of Solr fields that an anyText query expands to include (e.g. title, description, ext.extracted.*). NOTE: If a blacklist is also provided, this list becomes a blacklist exception list instead of a pure whitelist.\"/>\n+\n+        <AD name=\"AnyText Expansion Field Blacklist\" id=\"anyTextFieldBlacklist\" cardinality=\"100\" required=\"false\" type=\"String\"\n+            description=\"List of Solr fields that an anyText query will NOT include (e.g. id, checksum, security.*)\"/>\n+\n+        <AD name=\"Expiration Interval\" id=\"expirationIntervalInMinutes\" type=\"Long\" default=\"10\"\n+            description=\"Interval that Solr Cache checks for expired documents to remove.\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/b3dc07f7745ffb5431eca9941655778a5af6640f", "committedDate": "2020-06-04T21:34:08Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}, "afterCommit": {"oid": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/959700cb0316a0c5d26ffe9584af105836c5fe5e", "committedDate": "2020-06-05T22:16:47Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "959700cb0316a0c5d26ffe9584af105836c5fe5e", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/959700cb0316a0c5d26ffe9584af105836c5fe5e", "committedDate": "2020-06-05T22:16:47Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}, "afterCommit": {"oid": "9127b587995db62285bf67c68977b2062a02f664", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/9127b587995db62285bf67c68977b2062a02f664", "committedDate": "2020-06-05T22:53:07Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1Njk5MDYy", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-425699062", "createdAt": "2020-06-06T01:01:50Z", "commit": {"oid": "9127b587995db62285bf67c68977b2062a02f664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MTY0OTAy", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-426164902", "createdAt": "2020-06-08T12:12:16Z", "commit": {"oid": "9127b587995db62285bf67c68977b2062a02f664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NTA1NDMy", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-426505432", "createdAt": "2020-06-08T18:30:12Z", "commit": {"oid": "9127b587995db62285bf67c68977b2062a02f664"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5745afb3f3d046e0f817034f048c635d6e152d8c", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/5745afb3f3d046e0f817034f048c635d6e152d8c", "committedDate": "2020-06-08T18:35:57Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9127b587995db62285bf67c68977b2062a02f664", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/9127b587995db62285bf67c68977b2062a02f664", "committedDate": "2020-06-05T22:53:07Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}, "afterCommit": {"oid": "5745afb3f3d046e0f817034f048c635d6e152d8c", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/5745afb3f3d046e0f817034f048c635d6e152d8c", "committedDate": "2020-06-08T18:35:57Z", "message": "Extract Solr from Catalog Core\n\nExtracted all Solr concerns out of catalog core.\nExtracted Solr cache from federation strategy in standard catalog framework.\nSolr cache is now a source and plugins.\nRemoved unused, outdated, alternative federation strategies."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3MjI3Mjc0", "url": "https://github.com/codice/ddf/pull/6117#pullrequestreview-427227274", "createdAt": "2020-06-09T14:45:04Z", "commit": {"oid": "5745afb3f3d046e0f817034f048c635d6e152d8c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 942, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}