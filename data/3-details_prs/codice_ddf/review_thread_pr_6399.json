{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMDcwNzI0", "number": 6399, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoyNjowM1rOEyAm6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0OTowNVrOE-vlRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODc0MjE2OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoyNjowM1rOHoajQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoyNjowM1rOHoajQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0MDA5Nw==", "bodyText": "Wrapping and rethrowing with the same exception type will just make the stack trace harder to read. The exception thrown from findAndRegisterValidator probably shouldn't be caught here.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512140097", "createdAt": "2020-10-26T17:26:03Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODc2MDc0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzozMDoyOVrOHoauvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzozMDoyOVrOHoauvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0MzAzNg==", "bodyText": "\u270f\ufe0f Consider using an if instead since there are only two cases.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512143036", "createdAt": "2020-10-26T17:30:29Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODk3ODQxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNToyMlrOHoc2Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoyNToyMlrOHoc2Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzczOA==", "bodyText": "\u270f\ufe0f clazz will always be AttributeValidator so the parameter can be omitted.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512177738", "createdAt": "2020-10-26T18:25:22Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);\n+      if (ref.length < 1) throw new InvalidSyntaxException(\"No service references found\", filter);\n+      return bundleContext.getService(ref[0]);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.error(String.format(\"Invalid filter: %s\", filter));\n+    } catch (NullPointerException e) {\n+      LOGGER.debug(\n+          String.format(\"Service Reference for class %s not found. Returning NULL\", clazz));\n+    }\n+    return null;\n+  }\n+\n+  private AttributeValidator getAttributeValidator(String clazz, String filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTAwNjQ3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMjoyOVrOHodHNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozMjoyOVrOHodHNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjA2OA==", "bodyText": "\u2757Use parameterized logging\nAlso, error is probably not the right level since this exception will not cause the system to break.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512182068", "createdAt": "2020-10-26T18:32:29Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);\n+      if (ref.length < 1) throw new InvalidSyntaxException(\"No service references found\", filter);\n+      return bundleContext.getService(ref[0]);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.error(String.format(\"Invalid filter: %s\", filter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTAxMzIzOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNDowOVrOHodLKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNDowOVrOHodLKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MzA4MA==", "bodyText": "\u2757We should check for a null reference ourselves instead of using it and catching a NPE.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512183080", "createdAt": "2020-10-26T18:34:09Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);\n+      if (ref.length < 1) throw new InvalidSyntaxException(\"No service references found\", filter);\n+      return bundleContext.getService(ref[0]);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.error(String.format(\"Invalid filter: %s\", filter));\n+    } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTAxODY4OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNToxN1rOHodOIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNToxN1rOHodOIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4Mzg0MQ==", "bodyText": "I think these if statements will fail checkstyle without braces.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512183841", "createdAt": "2020-10-26T18:35:17Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTAyMTI1OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNTo1NFrOHodPrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNTo1NFrOHodPrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NDIzNg==", "bodyText": "I don't think InvalidSyntaxException is appropriate for either case.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512184236", "createdAt": "2020-10-26T18:35:54Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI5OTUwNzg4OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowMToyOFrOH135Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNTo1OTo0MFrOH5kRug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjM2Ng==", "bodyText": "\u2753What is validatorType used for?", "url": "https://github.com/codice/ddf/pull/6399#discussion_r526252366", "createdAt": "2020-11-18T17:01:28Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,46 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator should be in format of 'validatorId::validatorType', not '\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI2NjAyMA==", "bodyText": "It's there to infer which validator type an attribute should be, in order to cast to a validator type. But since it's only supporting AttributeValidator I could just take that out.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r526266020", "createdAt": "2020-11-18T17:20:03Z", "author": {"login": "frnkshin"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,46 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator should be in format of 'validatorId::validatorType', not '\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjM2Ng=="}, "originalCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI3NTkxNg==", "bodyText": "I think it's actually better to just add a new case, maybe downstream, and add what's currently in the default case logic in the downstream case, and just leave default stay as it was.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r526275916", "createdAt": "2020-11-18T17:31:25Z", "author": {"login": "frnkshin"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,46 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator should be in format of 'validatorId::validatorType', not '\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjM2Ng=="}, "originalCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjMzNzI5Ng==", "bodyText": "That sounds like a good solution.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r526337296", "createdAt": "2020-11-18T18:47:41Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,46 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator should be in format of 'validatorId::validatorType', not '\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjM2Ng=="}, "originalCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDEyNTI0Mg==", "bodyText": "And.. I just updated it.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r530125242", "createdAt": "2020-11-25T05:59:40Z", "author": {"login": "frnkshin"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,46 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator should be in format of 'validatorId::validatorType', not '\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjM2Ng=="}, "originalCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNzI3MDU2OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo0NzozNlrOH57-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo0NzozNlrOH57-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxMzYxMA==", "bodyText": "As it is currently if there is more than one service reference it will fail to enter this if statement, return null, and then silently not add the attribute validator.\nI would recommend changing this to ref.length > 0, Unless you are specifically trying to prevent the case that multiple versions might be registered. While we usually only have one bundle providing a service its always possible there could be more than one, so we should handle that case. In many places we pick the first service reference in the list (which is probably fine) , but you could also do a LOGGER.warn that there were multiple services and we chose the first in the list. (maybe printing the list of service references that we chose from would provide some useful information if they have implemented toString methods)", "url": "https://github.com/codice/ddf/pull/6399#discussion_r530513610", "createdAt": "2020-11-25T16:47:36Z", "author": {"login": "rzwiefel"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -632,12 +640,42 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           wrapper.reportingMetacardValidator(relationshipValidator);\n           break;\n         }\n+      case \"custom\":\n+        {\n+          List<Outer.Validator> collection = ((Outer.ValidatorCollection) validator).validators;\n+          collection.forEach(\n+              item -> {\n+                AttributeValidator av =\n+                    (AttributeValidator)\n+                        this.getService(\n+                            AttributeValidator.class.getName(),\n+                            (String.format(\"(id=%s)\", item.validator)));\n+                if (av != null) {\n+                  wrapper.attributeValidator(av);\n+                }\n+              });\n+          break;\n+        }\n       default:\n         throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n     }\n     return wrapper;\n   }\n \n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref != null && ref.length == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe599150950576341feee2dbf6c96fef78c3639a"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0MjI2NzU5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0OTowNVrOH8EDfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0OTowNVrOH8EDfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0MzAzOQ==", "bodyText": "\u270f\ufe0f Unnecessary parentheses", "url": "https://github.com/codice/ddf/pull/6399#discussion_r532743039", "createdAt": "2020-11-30T16:49:05Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -632,12 +641,50 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           wrapper.reportingMetacardValidator(relationshipValidator);\n           break;\n         }\n+      case \"custom\":\n+        {\n+          List<Outer.Validator> collection = ((Outer.ValidatorCollection) validator).validators;\n+          collection.forEach(\n+              item -> {\n+                AttributeValidator av =\n+                    (AttributeValidator)\n+                        this.getService(\n+                            AttributeValidator.class.getName(),\n+                            (String.format(\"(id=%s)\", item.validator)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd43ad7de311b9b4f561254aac855fb6048fd97d"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4498, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}