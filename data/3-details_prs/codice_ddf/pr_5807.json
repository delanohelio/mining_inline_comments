{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5MzU2MzQ1", "number": 5807, "title": "DDF-5538 - Add InjectedAttributes to DynamicSchemaResolver field cache", "bodyText": "What does this PR do?\nPR #5536 improved the DynamicSchemaResolver so that it pre-populates its cache with all metacard types. However, if an attribute was injected into a metacard type the DynamicSchemaResolver would fail if that injected attribute was queried on.  This PR adds a listener for InjectableAttributes and adds them to the DynamicSchemaResolver.\nWho is reviewing it?\n@pklinef\n@rzwiefel\n@glenhein\nSelect relevant component teams:\n@codice/solr\nAsk 2 committers to review/merge the PR and tag them here.\n@andrewkfiedler\n@jlcsmith\nHow should this be tested?\nThe original problem can be reproduced by first installing a master build. Add a json definition file to etc/definitions that will inject an attribute into any/all metacard types (e.g. ext.alt-source).  Then, using the karaf console, run catalog:search --cql '\"ext.alt-source\" IS NULL'. You should see an exception in the logs with the message Anonymous Field Property does not exist. ext.alt-source.\nWith this PR, you should no longer see the exception.\nAny background context you want to provide?\nThis is affecting downstream projects.  Part of the issue was solved with #5536\nWhat are the relevant tickets?\nFixes: #5538\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-01-31T00:35:12Z", "url": "https://github.com/codice/ddf/pull/5807", "merged": true, "mergeCommit": {"oid": "287103136dc21c3fc7ce56a3765cc58e1e3ada88"}, "closed": true, "closedAt": "2020-02-19T00:38:08Z", "author": {"login": "derekwilhelm"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_j6qxgH2gAyMzY5MzU2MzQ1OjRhNDQyYzk3ZjMyMjk4ZjgzOGFkY2M2YmE0MGI4ODAyYTRkODRmMjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBHW-NAFqTM1MzI3MDE1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29", "author": {"user": {"login": "derekwilhelm", "name": null}}, "url": "https://github.com/codice/ddf/commit/4a442c97f32298f838adcc6ba40b8802a4d84f29", "committedDate": "2020-01-31T00:22:55Z", "message": "DDF-5538 - Improve DynamicSchemaResolver to be aware of injected attributes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzc5MTg2", "url": "https://github.com/codice/ddf/pull/5807#pullrequestreview-352379186", "createdAt": "2020-02-03T16:18:13Z", "commit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMDgwNDA4", "url": "https://github.com/codice/ddf/pull/5807#pullrequestreview-353080408", "createdAt": "2020-02-04T15:43:17Z", "commit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjI3ODM4", "url": "https://github.com/codice/ddf/pull/5807#pullrequestreview-353227838", "createdAt": "2020-02-04T19:07:39Z", "commit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjM2NzMy", "url": "https://github.com/codice/ddf/pull/5807#pullrequestreview-353236732", "createdAt": "2020-02-04T19:21:12Z", "commit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToyMToxM1rOFlgZvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxOToyMzowM1rOFlgdVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MjUxMA==", "bodyText": "Could you add some javadoc that gives a high level description?", "url": "https://github.com/codice/ddf/pull/5807#discussion_r374872510", "createdAt": "2020-02-04T19:21:13Z", "author": {"login": "glenhein"}, "path": "catalog/solr/catalog-solr-provider/src/main/java/ddf/catalog/solr/provider/InjectedAttributeListener.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.provider;\n+\n+import ddf.catalog.data.AttributeDescriptor;\n+import ddf.catalog.data.AttributeRegistry;\n+import ddf.catalog.data.InjectableAttribute;\n+import ddf.catalog.source.solr.DynamicSchemaResolver;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class InjectedAttributeListener implements ServiceListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDg3MzQyOQ==", "bodyText": "\u270f\ufe0f \u270f\ufe0f I would eliminate the eventType variable, since it's only used once and doesn't add to readability.", "url": "https://github.com/codice/ddf/pull/5807#discussion_r374873429", "createdAt": "2020-02-04T19:23:03Z", "author": {"login": "glenhein"}, "path": "catalog/solr/catalog-solr-provider/src/main/java/ddf/catalog/solr/provider/InjectedAttributeListener.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.provider;\n+\n+import ddf.catalog.data.AttributeDescriptor;\n+import ddf.catalog.data.AttributeRegistry;\n+import ddf.catalog.data.InjectableAttribute;\n+import ddf.catalog.source.solr.DynamicSchemaResolver;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class InjectedAttributeListener implements ServiceListener {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(InjectedAttributeListener.class);\n+\n+  private BundleContext context;\n+  private DynamicSchemaResolver resolver;\n+  private AttributeRegistry attributeRegistry;\n+\n+  public InjectedAttributeListener(\n+      DynamicSchemaResolver resolver, AttributeRegistry attributeRegistry) {\n+    this.resolver = resolver;\n+    this.attributeRegistry = attributeRegistry;\n+  }\n+\n+  public void init() {\n+    Bundle bundle = FrameworkUtil.getBundle(this.getClass());\n+    context = bundle.getBundleContext();\n+    try {\n+      String filter = \"(objectClass=\" + InjectableAttribute.class.getName() + \")\";\n+      context.addServiceListener(this, filter);\n+\n+      Collection<ServiceReference<InjectableAttribute>> alreadyRegistered =\n+          context.getServiceReferences(InjectableAttribute.class, null);\n+      alreadyRegistered\n+          .stream()\n+          .map(context::getService)\n+          .filter(Objects::nonNull)\n+          .map(InjectableAttribute::attribute)\n+          .forEach(this::registerAttribute);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.warn(\"Unable to register listener for injected attributes\", e);\n+    }\n+  }\n+\n+  public void close() {\n+    if (context != null) {\n+      context.removeServiceListener(this);\n+    }\n+  }\n+\n+  public void serviceChanged(ServiceEvent event) {\n+    ServiceReference serviceRef = event.getServiceReference();\n+    Object service = context.getService(serviceRef);\n+    if (service instanceof InjectableAttribute) {\n+      int eventType = event.getType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a442c97f32298f838adcc6ba40b8802a4d84f29"}, "originalPosition": 78}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f03c578e7a3d062f0a7644b1e8137f5a01ffd6f", "author": {"user": {"login": "derekwilhelm", "name": null}}, "url": "https://github.com/codice/ddf/commit/0f03c578e7a3d062f0a7644b1e8137f5a01ffd6f", "committedDate": "2020-02-04T19:45:57Z", "message": "Add javadoc class description, clean up code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzMjcwMTUy", "url": "https://github.com/codice/ddf/pull/5807#pullrequestreview-353270152", "createdAt": "2020-02-04T20:14:26Z", "commit": {"oid": "0f03c578e7a3d062f0a7644b1e8137f5a01ffd6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4982, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}