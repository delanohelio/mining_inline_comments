{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjcyMzQ2", "number": 5760, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODowMVrODXrpYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo1MDoxNlrODX1glQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU4OTQ1OnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/presentation.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODowMVrOFdHKUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODowMVrOFdHKUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDM1Mw==", "bodyText": "\u2753 Should we use this util class instead of doing it manually?\n\n  \n    \n      ddf/ui/packages/catalog-ui-search/src/main/webapp/js/DistanceUtils.js\n    \n    \n         Line 62\n      in\n      6a3da70\n    \n    \n    \n    \n\n        \n          \n           getDistanceFromMeters(distance, units) {", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366070353", "createdAt": "2020-01-13T22:48:01Z", "author": {"login": "brjeter"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/presentation.tsx", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+type Props = {\n+  currentDistance: number\n+  left: String\n+  top: String\n+}\n+\n+const Root = styled.div<Props>`\n+  font-family: 'Inconsolata', 'Lucida Console', monospace;\n+  background: ${props => props.theme.backgroundModal};\n+  display: block;\n+  width: auto;\n+  height: auto;\n+  font-size: ${props => props.theme.mediumFontSize};\n+  position: absolute;\n+  text-align: left;\n+  padding: ${props => props.theme.minimumSpacing};\n+  max-width: 50%;\n+`\n+\n+const DistanceInfoText = styled.div`\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+`\n+\n+/*\n+ * Formats the current distance value to a string with the appropriate unit of measurement.\n+ */\n+const getDistanceText = (distance: number) => {\n+  // use meters when distance is under 1000m and convert to kilometers when \u22651000m\n+  const distanceText =\n+    distance < 1000 ? `${distance} m` : `${(distance * 0.001).toFixed(2)} km`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MTU5MTExOnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/map-info/presentation.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODo0M1rOFdHLYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODo0M1rOFdHLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDYyNA==", "bodyText": "\u2753 Same question.", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366070624", "createdAt": "2020-01-13T22:48:43Z", "author": {"login": "brjeter"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/map-info/presentation.tsx", "diffHunk": "@@ -53,6 +55,29 @@ const metacardInfo = ({ attributes }: Props) =>\n     <MetacardInfo>{formatAttribute({ name, value })}</MetacardInfo>\n   ))\n \n+/*\n+   * Formats the current distance value to a string with the appropriate unit of measurement.\n+   */\n+const getDistanceText = (distance: number) => {\n+  // use meters when distance is under 1000m and convert to kilometers when \u22651000m\n+  const distanceText =\n+    distance < 1000\n+      ? `${distance.toFixed(2)} m`\n+      : `${(distance * 0.001).toFixed(2)} km`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA4NzM3OnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/cesium/map.cesium.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNTowMFrOFdVQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNTowMFrOFdVQbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMTI5NQ==", "bodyText": "\u2753 Can we still use the addPointWithText() method with a different set of options to avoid having duplicate code here?", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366301295", "createdAt": "2020-01-14T12:05:00Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/cesium/map.cesium.js", "diffHunk": "@@ -507,24 +508,51 @@ module.exports = function CesiumMap(\n      */\n     addRulerPoint(coordinates, markerLabel) {\n       const { lat, lon } = coordinates\n+\n       // a point requires an altitude value so just use 0\n       const point = [lon, lat, 0]\n-      const options = {\n+      const pointObject = convertPointCoordinate(point)\n+      const cartographicPosition = Cesium.Cartographic.fromDegrees(\n+        pointObject.longitude,\n+        pointObject.latitude,\n+        pointObject.altitude\n+      )\n+      let cartesianPosition = map.scene.globe.ellipsoid.cartographicToCartesian(\n+        cartographicPosition\n+      )\n+      const billboardRef = billboardCollection.add({\n+        image: DrawingUtility.getCircle({\n+          fillColor: rulerColor,\n+          icon: null,\n+        }),\n+        position: cartesianPosition,\n         id: markerLabel,\n-        title: `Selected ruler coordinate '${markerLabel}'`,\n-        color: '#FC2803',\n-        icon: null,\n-        view: this,\n+        eyeOffset,\n+      })\n+      //if there is a terrain provider and no altitude has been specified, sample it from the configured terrain provider\n+      if (!pointObject.altitude && map.scene.terrainProvider) {\n+        const promise = Cesium.sampleTerrain(map.scene.terrainProvider, 5, [\n+          cartographicPosition,\n+        ])\n+        Cesium.when(promise, updatedCartographic => {\n+          if (updatedCartographic[0].height && !this.isDestroyed) {\n+            cartesianPosition = map.scene.globe.ellipsoid.cartographicToCartesian(\n+              updatedCartographic[0]\n+            )\n+            billboardRef.position = cartesianPosition\n+          }\n+        })\n       }\n-      const useCustomText = true\n+      map.scene.requestRender()\n \n-      return this.addPointWithText(point, options, useCustomText)\n+      return billboardRef", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzA5NzkzOnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.model.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowOToyMFrOFdVW0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowOToyMFrOFdVW0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMjkzMA==", "bodyText": "\u2753 Should these properties have defaults defined at the top?", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366302930", "createdAt": "2020-01-14T12:09:20Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.model.js", "diffHunk": "@@ -102,12 +102,27 @@ module.exports = Backbone.AssociatedModel.extend({\n   clearPoints() {\n     this.set({ points: [] })\n   },\n+  /*\n+   * Set coordinates of the ruler measurements starting point\n+   */\n+  setStartingCoordinates(coordinates) {\n+    this.set({ startingCoordinates: coordinates })\n+  },\n   /*\n    * Sets the current distance to the new given distance (in meters).\n    */\n   setCurrentDistance(distance) {\n     this.set({ currentDistance: distance })\n   },\n+  addDistanceInfo(distanceInfo) {\n+    this.set({ distanceInfo })\n+  },\n+  /*\n+   * set the position of DistanceInfo in px relative to the top left of the Cesium component\n+   */\n+  setDistanceInfoPosition(left, top) {\n+    this.set({ distanceInfo: { left, top } })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzEwNTUxOnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.view.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoxMjoyNFrOFdVbew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoxMjoyNFrOFdVbew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwNDEyMw==", "bodyText": "\u270f\ufe0f const", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366304123", "createdAt": "2020-01-14T12:12:24Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.view.js", "diffHunk": "@@ -351,6 +361,21 @@ module.exports = Marionette.LayoutView.extend({\n       targetMetacard,\n     })\n   },\n+  updateDistance() {\n+    if (this.mapModel.get('measurementState') === 'START') {\n+        let lat = this.mapModel.get('mouseLat')\n+        let lon = this.mapModel.get('mouseLon')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzE0NjY1OnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoyODoyNFrOFdV0DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjoyODoyNFrOFdV0DQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxMDQxMw==", "bodyText": "\u2757\ufe0f I don't think you should call setState() in the constructor. If you still want to use mapPropsToState() here, you could do this.state = { ...mapPropsToState(props), showDistance: false }.", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366310413", "createdAt": "2020-01-14T12:28:24Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import { hot } from 'react-hot-loader'\n+import withListenTo, { WithBackboneProps } from '../backbone-container'\n+\n+const LEFT_OFFSET = 390\n+const TOP_OFFSET = 180\n+\n+const DistanceInfoPresentation = require('./presentation').default\n+\n+const mapPropsToState = (props: Props) => {\n+  const { map } = props\n+  const distance = map.get('currentDistance')\n+  return {\n+    showDistance: map.get('measurementState') === 'START' && distance,\n+    currentDistance: distance,\n+    left: map.get('distanceInfo')['left'] - LEFT_OFFSET + 'px',\n+    top: map.get('distanceInfo')['top'] - TOP_OFFSET + 'px',\n+  }\n+}\n+\n+type Props = {\n+  map: Backbone.Model\n+} & WithBackboneProps\n+\n+type State = {\n+  showDistance: Boolean\n+  currentDistance: Number\n+  left: String\n+  top: String\n+}\n+\n+class DistanceInfo extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props)\n+    this.state = mapPropsToState(props)\n+    this.setState({ showDistance: false })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzE3NTI5OnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/select-coordinates/select-coordinates.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjozODo0NlrOFdWFEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjozODo0NlrOFdWFEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxNDc2OQ==", "bodyText": "\u270f\ufe0f Can you add something here to tell the user that they can still use Ctrl+C to manually copy it?", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366314769", "createdAt": "2020-01-14T12:38:46Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/select-coordinates/select-coordinates.tsx", "diffHunk": "@@ -149,7 +131,7 @@ const generateClipboardHandler = (\n     })\n     clipboardInstance.on('error', (e: any) => {\n       announcement.announce({\n-        title: 'Press Ctrl+C to copy',\n+        title: 'Could not copy distance to clipboard',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2MzIwNTMzOnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo1MDoxNlrOFdWXrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo1MDoxNlrOFdWXrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxOTUzNA==", "bodyText": "\u2757\ufe0f It might be better to put this in componentDidMount() and remove the listeners in componentWillUnmount().", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366319534", "createdAt": "2020-01-14T12:50:16Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import { hot } from 'react-hot-loader'\n+import withListenTo, { WithBackboneProps } from '../backbone-container'\n+\n+const LEFT_OFFSET = 390\n+const TOP_OFFSET = 180\n+\n+const DistanceInfoPresentation = require('./presentation').default\n+\n+const mapPropsToState = (props: Props) => {\n+  const { map } = props\n+  const distance = map.get('currentDistance')\n+  return {\n+    showDistance: map.get('measurementState') === 'START' && distance,\n+    currentDistance: distance,\n+    left: map.get('distanceInfo')['left'] - LEFT_OFFSET + 'px',\n+    top: map.get('distanceInfo')['top'] - TOP_OFFSET + 'px',\n+  }\n+}\n+\n+type Props = {\n+  map: Backbone.Model\n+} & WithBackboneProps\n+\n+type State = {\n+  showDistance: Boolean\n+  currentDistance: Number\n+  left: String\n+  top: String\n+}\n+\n+class DistanceInfo extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props)\n+    this.state = mapPropsToState(props)\n+    this.setState({ showDistance: false })\n+    this.listenToMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 51}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4763, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}