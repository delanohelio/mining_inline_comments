{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyMjcyMzQ2", "number": 5760, "title": "DDF-5581 Cosmetic Changes to Ruler on Map", "bodyText": "What does this PR do?\nThe Ruler on Map feature should show the distance between points via the MapInfo component on the bottom right of the screen and next to the mouse. That should also calculate the distance between the start point and the mouse when in the \"START\" state.\nOther changes include:\n\nFix to explicitly render points and lines when those functions are called\nColor changes to the line and points\nRemoving the toast upon creating a line\nRuler is dynamically drawing between starting point and the mouse\n\nWho is reviewing it?\n\n@rfding\n@mdang8\n@aaronilovici\nSelect relevant component teams:\n@codice/ui\nAsk 2 committers to review/merge the PR and tag them here.\n@brjeter\n@andrewkfiedler\nHow should this be tested?\n\npull and build changes.\nOpen up the Search UI and add a tab for the 3D map and the 2D map.\nStart with the 3D map. Select a point on the globe, right click and go to Calculate Distance -> Select Start Point.\nVerify that the distance is being updated in both the bottom left corner and next to the mouse. Zoom in close to the start point and hover the mouse near enough to verify that the measurement format changes to meters when distance < 1 km.\nRight click and add a stop endpoint. Verify that the distance tooltip goes away but the bottom left still display's the distance.\nRight click on the map and click Calculate Distance -> Copy Coordinates. Check that the copied coordinates are the same as the distance initially displayed.\nRepeat steps 3-7 again on the same map to make sure the state changes haven't affected the usage.\nRepeat steps 3-8 again on the 2D map.\n\nWhat are the relevant tickets?\nFixes: #DDF-5581\nScreenshots\n\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-01-13T19:01:29Z", "url": "https://github.com/codice/ddf/pull/5760", "merged": true, "mergeCommit": {"oid": "bf88dc158d33624488520232af02e280fe25d272"}, "closed": true, "closedAt": "2020-01-18T00:34:30Z", "author": {"login": "josephthweatt"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb6EZGDAFqTM0MjE5MjI0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb7BkLegH2gAyMzYyMjcyMzQ2OmNmNThlNDIyNDhmYzcwOTMyODNjYzg5ZjVhNzNiMWM1OTY0MTYyMDU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyMTkyMjQw", "url": "https://github.com/codice/ddf/pull/5760#pullrequestreview-342192240", "createdAt": "2020-01-13T22:48:01Z", "commit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODowMVrOFdHKUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QyMjo0ODo0M1rOFdHLYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDM1Mw==", "bodyText": "\u2753 Should we use this util class instead of doing it manually?\n\n  \n    \n      ddf/ui/packages/catalog-ui-search/src/main/webapp/js/DistanceUtils.js\n    \n    \n         Line 62\n      in\n      6a3da70\n    \n    \n    \n    \n\n        \n          \n           getDistanceFromMeters(distance, units) {", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366070353", "createdAt": "2020-01-13T22:48:01Z", "author": {"login": "brjeter"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/presentation.tsx", "diffHunk": "@@ -0,0 +1,64 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import styled from 'styled-components'\n+\n+type Props = {\n+  currentDistance: number\n+  left: String\n+  top: String\n+}\n+\n+const Root = styled.div<Props>`\n+  font-family: 'Inconsolata', 'Lucida Console', monospace;\n+  background: ${props => props.theme.backgroundModal};\n+  display: block;\n+  width: auto;\n+  height: auto;\n+  font-size: ${props => props.theme.mediumFontSize};\n+  position: absolute;\n+  text-align: left;\n+  padding: ${props => props.theme.minimumSpacing};\n+  max-width: 50%;\n+`\n+\n+const DistanceInfoText = styled.div`\n+  white-space: nowrap;\n+  overflow: hidden;\n+  text-overflow: ellipsis;\n+`\n+\n+/*\n+ * Formats the current distance value to a string with the appropriate unit of measurement.\n+ */\n+const getDistanceText = (distance: number) => {\n+  // use meters when distance is under 1000m and convert to kilometers when \u22651000m\n+  const distanceText =\n+    distance < 1000 ? `${distance} m` : `${(distance * 0.001).toFixed(2)} km`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjA3MDYyNA==", "bodyText": "\u2753 Same question.", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366070624", "createdAt": "2020-01-13T22:48:43Z", "author": {"login": "brjeter"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/map-info/presentation.tsx", "diffHunk": "@@ -53,6 +55,29 @@ const metacardInfo = ({ attributes }: Props) =>\n     <MetacardInfo>{formatAttribute({ name, value })}</MetacardInfo>\n   ))\n \n+/*\n+   * Formats the current distance value to a string with the appropriate unit of measurement.\n+   */\n+const getDistanceText = (distance: number) => {\n+  // use meters when distance is under 1000m and convert to kilometers when \u22651000m\n+  const distanceText =\n+    distance < 1000\n+      ? `${distance.toFixed(2)} m`\n+      : `${(distance * 0.001).toFixed(2)} km`", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQyNDgzNDk5", "url": "https://github.com/codice/ddf/pull/5760#pullrequestreview-342483499", "createdAt": "2020-01-14T12:05:00Z", "commit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjowNTowMFrOFdVQbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMjo1MDoxNlrOFdWXrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMTI5NQ==", "bodyText": "\u2753 Can we still use the addPointWithText() method with a different set of options to avoid having duplicate code here?", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366301295", "createdAt": "2020-01-14T12:05:00Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/cesium/map.cesium.js", "diffHunk": "@@ -507,24 +508,51 @@ module.exports = function CesiumMap(\n      */\n     addRulerPoint(coordinates, markerLabel) {\n       const { lat, lon } = coordinates\n+\n       // a point requires an altitude value so just use 0\n       const point = [lon, lat, 0]\n-      const options = {\n+      const pointObject = convertPointCoordinate(point)\n+      const cartographicPosition = Cesium.Cartographic.fromDegrees(\n+        pointObject.longitude,\n+        pointObject.latitude,\n+        pointObject.altitude\n+      )\n+      let cartesianPosition = map.scene.globe.ellipsoid.cartographicToCartesian(\n+        cartographicPosition\n+      )\n+      const billboardRef = billboardCollection.add({\n+        image: DrawingUtility.getCircle({\n+          fillColor: rulerColor,\n+          icon: null,\n+        }),\n+        position: cartesianPosition,\n         id: markerLabel,\n-        title: `Selected ruler coordinate '${markerLabel}'`,\n-        color: '#FC2803',\n-        icon: null,\n-        view: this,\n+        eyeOffset,\n+      })\n+      //if there is a terrain provider and no altitude has been specified, sample it from the configured terrain provider\n+      if (!pointObject.altitude && map.scene.terrainProvider) {\n+        const promise = Cesium.sampleTerrain(map.scene.terrainProvider, 5, [\n+          cartographicPosition,\n+        ])\n+        Cesium.when(promise, updatedCartographic => {\n+          if (updatedCartographic[0].height && !this.isDestroyed) {\n+            cartesianPosition = map.scene.globe.ellipsoid.cartographicToCartesian(\n+              updatedCartographic[0]\n+            )\n+            billboardRef.position = cartesianPosition\n+          }\n+        })\n       }\n-      const useCustomText = true\n+      map.scene.requestRender()\n \n-      return this.addPointWithText(point, options, useCustomText)\n+      return billboardRef", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwMjkzMA==", "bodyText": "\u2753 Should these properties have defaults defined at the top?", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366302930", "createdAt": "2020-01-14T12:09:20Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.model.js", "diffHunk": "@@ -102,12 +102,27 @@ module.exports = Backbone.AssociatedModel.extend({\n   clearPoints() {\n     this.set({ points: [] })\n   },\n+  /*\n+   * Set coordinates of the ruler measurements starting point\n+   */\n+  setStartingCoordinates(coordinates) {\n+    this.set({ startingCoordinates: coordinates })\n+  },\n   /*\n    * Sets the current distance to the new given distance (in meters).\n    */\n   setCurrentDistance(distance) {\n     this.set({ currentDistance: distance })\n   },\n+  addDistanceInfo(distanceInfo) {\n+    this.set({ distanceInfo })\n+  },\n+  /*\n+   * set the position of DistanceInfo in px relative to the top left of the Cesium component\n+   */\n+  setDistanceInfoPosition(left, top) {\n+    this.set({ distanceInfo: { left, top } })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMwNDEyMw==", "bodyText": "\u270f\ufe0f const", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366304123", "createdAt": "2020-01-14T12:12:24Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/component/visualization/maps/map.view.js", "diffHunk": "@@ -351,6 +361,21 @@ module.exports = Marionette.LayoutView.extend({\n       targetMetacard,\n     })\n   },\n+  updateDistance() {\n+    if (this.mapModel.get('measurementState') === 'START') {\n+        let lat = this.mapModel.get('mouseLat')\n+        let lon = this.mapModel.get('mouseLon')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxMDQxMw==", "bodyText": "\u2757\ufe0f I don't think you should call setState() in the constructor. If you still want to use mapPropsToState() here, you could do this.state = { ...mapPropsToState(props), showDistance: false }.", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366310413", "createdAt": "2020-01-14T12:28:24Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import { hot } from 'react-hot-loader'\n+import withListenTo, { WithBackboneProps } from '../backbone-container'\n+\n+const LEFT_OFFSET = 390\n+const TOP_OFFSET = 180\n+\n+const DistanceInfoPresentation = require('./presentation').default\n+\n+const mapPropsToState = (props: Props) => {\n+  const { map } = props\n+  const distance = map.get('currentDistance')\n+  return {\n+    showDistance: map.get('measurementState') === 'START' && distance,\n+    currentDistance: distance,\n+    left: map.get('distanceInfo')['left'] - LEFT_OFFSET + 'px',\n+    top: map.get('distanceInfo')['top'] - TOP_OFFSET + 'px',\n+  }\n+}\n+\n+type Props = {\n+  map: Backbone.Model\n+} & WithBackboneProps\n+\n+type State = {\n+  showDistance: Boolean\n+  currentDistance: Number\n+  left: String\n+  top: String\n+}\n+\n+class DistanceInfo extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props)\n+    this.state = mapPropsToState(props)\n+    this.setState({ showDistance: false })", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxNDc2OQ==", "bodyText": "\u270f\ufe0f Can you add something here to tell the user that they can still use Ctrl+C to manually copy it?", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366314769", "createdAt": "2020-01-14T12:38:46Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/select-coordinates/select-coordinates.tsx", "diffHunk": "@@ -149,7 +131,7 @@ const generateClipboardHandler = (\n     })\n     clipboardInstance.on('error', (e: any) => {\n       announcement.announce({\n-        title: 'Press Ctrl+C to copy',\n+        title: 'Could not copy distance to clipboard',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjMxOTUzNA==", "bodyText": "\u2757\ufe0f It might be better to put this in componentDidMount() and remove the listeners in componentWillUnmount().", "url": "https://github.com/codice/ddf/pull/5760#discussion_r366319534", "createdAt": "2020-01-14T12:50:16Z", "author": {"login": "mdang8"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/distance-info/distance-info.tsx", "diffHunk": "@@ -0,0 +1,75 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser\n+ * General Public License as published by the Free Software Foundation, either version 3 of the\n+ * License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without\n+ * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n+ * Lesser General Public License for more details. A copy of the GNU Lesser General Public License\n+ * is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+import * as React from 'react'\n+import { hot } from 'react-hot-loader'\n+import withListenTo, { WithBackboneProps } from '../backbone-container'\n+\n+const LEFT_OFFSET = 390\n+const TOP_OFFSET = 180\n+\n+const DistanceInfoPresentation = require('./presentation').default\n+\n+const mapPropsToState = (props: Props) => {\n+  const { map } = props\n+  const distance = map.get('currentDistance')\n+  return {\n+    showDistance: map.get('measurementState') === 'START' && distance,\n+    currentDistance: distance,\n+    left: map.get('distanceInfo')['left'] - LEFT_OFFSET + 'px',\n+    top: map.get('distanceInfo')['top'] - TOP_OFFSET + 'px',\n+  }\n+}\n+\n+type Props = {\n+  map: Backbone.Model\n+} & WithBackboneProps\n+\n+type State = {\n+  showDistance: Boolean\n+  currentDistance: Number\n+  left: String\n+  top: String\n+}\n+\n+class DistanceInfo extends React.Component<Props, State> {\n+  constructor(props: Props) {\n+    super(props)\n+    this.state = mapPropsToState(props)\n+    this.setState({ showDistance: false })\n+    this.listenToMap()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d067fbffb2536863243e3ee2a39a9521bc739c80"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMzU4NTQ5", "url": "https://github.com/codice/ddf/pull/5760#pullrequestreview-343358549", "createdAt": "2020-01-15T16:38:42Z", "commit": {"oid": "304e01159b7f6f33ef90c4ac0cc1c11acbb85f36"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c25ff74b04b6423523217db0f14a857110bbddf8", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/c25ff74b04b6423523217db0f14a857110bbddf8", "committedDate": "2020-01-16T18:39:29Z", "message": "DDF-5581 initial cosmetic changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdd8106daac16e1781f12b40da8a0f9bf99af424", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/cdd8106daac16e1781f12b40da8a0f9bf99af424", "committedDate": "2020-01-16T18:39:30Z", "message": "DDF-5581 added distance info component"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e4e05c0686021bd01669f08b3fcc0b065dfe45f6", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/e4e05c0686021bd01669f08b3fcc0b065dfe45f6", "committedDate": "2020-01-16T18:39:30Z", "message": "DDF-5581 map distance moves and dissapears according to measurement state"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "def7d3dd622b49d125a4a9ee12566bb90a867655", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/def7d3dd622b49d125a4a9ee12566bb90a867655", "committedDate": "2020-01-16T18:39:30Z", "message": "DDF-5581  formatting and refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a7df6097224c2ef944463fafbafccf922cd5a5", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/14a7df6097224c2ef944463fafbafccf922cd5a5", "committedDate": "2020-01-16T18:39:30Z", "message": "DDF-5581 fixes to distance listener"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b7a9e752b0dbc31ec70a8d1725cfa7735e82879", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/1b7a9e752b0dbc31ec70a8d1725cfa7735e82879", "committedDate": "2020-01-16T18:39:30Z", "message": "DDF-5581 refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0ce6873d88b2957a855f92739d6b9170915f2eb", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/e0ce6873d88b2957a855f92739d6b9170915f2eb", "committedDate": "2020-01-16T18:39:30Z", "message": "DDF-5581 merge for dynamic rulers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "824d12bcddaa19438a31a4bb01002e3db46efaa0", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/824d12bcddaa19438a31a4bb01002e3db46efaa0", "committedDate": "2020-01-16T18:39:31Z", "message": "DDF-5581 matt's suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aabe6db61dfd3aa60c1f2c91c4ba9d86f141aa24", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/aabe6db61dfd3aa60c1f2c91c4ba9d86f141aa24", "committedDate": "2020-01-16T18:39:31Z", "message": "DDF-5581 added default for startingCoordinates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41d7bad2bce8dfe0cafbc0cff9637547172edc68", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/41d7bad2bce8dfe0cafbc0cff9637547172edc68", "committedDate": "2020-01-16T18:39:31Z", "message": "DDF-5581 jeter's suggestions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e50ab3ed5f5b7e2df57a271f93f96cc8b2851643", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/e50ab3ed5f5b7e2df57a271f93f96cc8b2851643", "committedDate": "2020-01-15T17:34:13Z", "message": "DDF-5581 jeter's suggestions"}, "afterCommit": {"oid": "41d7bad2bce8dfe0cafbc0cff9637547172edc68", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/41d7bad2bce8dfe0cafbc0cff9637547172edc68", "committedDate": "2020-01-16T18:39:31Z", "message": "DDF-5581 jeter's suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTQ5MzMz", "url": "https://github.com/codice/ddf/pull/5760#pullrequestreview-344149333", "createdAt": "2020-01-16T19:10:53Z", "commit": {"oid": "41d7bad2bce8dfe0cafbc0cff9637547172edc68"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cb072d31ddf4aa435a467c72ae7a522330bc04f", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/5cb072d31ddf4aa435a467c72ae7a522330bc04f", "committedDate": "2020-01-16T19:24:58Z", "message": "DDF-5581 reformatting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ0MTkxMTY5", "url": "https://github.com/codice/ddf/pull/5760#pullrequestreview-344191169", "createdAt": "2020-01-16T20:22:45Z", "commit": {"oid": "e50ab3ed5f5b7e2df57a271f93f96cc8b2851643"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f670293bb35bcf4c9d1f021779305bc2629c3875", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/f670293bb35bcf4c9d1f021779305bc2629c3875", "committedDate": "2020-01-16T21:01:03Z", "message": "DDF-5581 ruler drawing pauses on map context menu"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf58e42248fc7093283cc89f5a73b1c596416205", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/cf58e42248fc7093283cc89f5a73b1c596416205", "committedDate": "2020-01-16T22:05:53Z", "message": "DDF-5581 redraw ruler line on menu update"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4961, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}