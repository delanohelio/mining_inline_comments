{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MzA3ODky", "number": 6455, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0MzozMFrOFDuAXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzowMjo0NFrOFDufqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQzODA3OnYy", "diffSide": "LEFT", "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0MzozMFrOIDgrNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODo1NTo1OVrOIFgaVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1MTk4OQ==", "bodyText": "With the logout pages whitelisted, the logout servlets didn't have the correct subject and the user's session wasn't being invalidated correctly.", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540551989", "createdAt": "2020-12-10T22:43:30Z", "author": {"login": "SmithJosh"}, "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -42,20 +42,17 @@\n         </property>\n         <property name=\"whiteListContexts\">\n             <array value-type=\"java.lang.String\">\n-                <value>${org.codice.ddf.system.rootContext}/SecurityTokenService</value>\n-                <value>${org.codice.ddf.system.rootContext}/internal/metrics</value>\n                 <value>/proxy</value>\n                 <value>${org.codice.ddf.system.rootContext}/saml</value>\n-                <value>${org.codice.ddf.system.rootContext}/idp</value>\n-                <value>/idp</value>\n                 <value>${org.codice.ddf.system.rootContext}/platform/config/ui</value>\n-                <value>${org.codice.ddf.system.rootContext}/logout</value>\n-                <value>/logout</value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjY0NDgyMA==", "bodyText": "Reverted these changes. It made the logout work properly for basic/pki (correct sessions were destroyed), but caused issues with OIDC. I don't think there's a config that will work for both... Worth looking into fixing it but that's out-of-scope for this PR", "url": "https://github.com/codice/ddf/pull/6455#discussion_r542644820", "createdAt": "2020-12-14T18:55:59Z", "author": {"login": "SmithJosh"}, "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -42,20 +42,17 @@\n         </property>\n         <property name=\"whiteListContexts\">\n             <array value-type=\"java.lang.String\">\n-                <value>${org.codice.ddf.system.rootContext}/SecurityTokenService</value>\n-                <value>${org.codice.ddf.system.rootContext}/internal/metrics</value>\n                 <value>/proxy</value>\n                 <value>${org.codice.ddf.system.rootContext}/saml</value>\n-                <value>${org.codice.ddf.system.rootContext}/idp</value>\n-                <value>/idp</value>\n                 <value>${org.codice.ddf.system.rootContext}/platform/config/ui</value>\n-                <value>${org.codice.ddf.system.rootContext}/logout</value>\n-                <value>/logout</value>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1MTk4OQ=="}, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQ0NTM1OnYy", "diffSide": "RIGHT", "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0NToyOVrOIDgvVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0NToyOVrOIDgvVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1MzA0NQ==", "bodyText": "/logout/css and logout/js are the assets loaded by the /logout/logout-response.html page. For basic and PKI auth, loading any of these causes the user to log back in automatically after logging out if they're not whitelisted", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540553045", "createdAt": "2020-12-10T22:45:29Z", "author": {"login": "SmithJosh"}, "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -42,20 +42,17 @@\n         </property>\n         <property name=\"whiteListContexts\">\n             <array value-type=\"java.lang.String\">\n-                <value>${org.codice.ddf.system.rootContext}/SecurityTokenService</value>\n-                <value>${org.codice.ddf.system.rootContext}/internal/metrics</value>\n                 <value>/proxy</value>\n                 <value>${org.codice.ddf.system.rootContext}/saml</value>\n-                <value>${org.codice.ddf.system.rootContext}/idp</value>\n-                <value>/idp</value>\n                 <value>${org.codice.ddf.system.rootContext}/platform/config/ui</value>\n-                <value>${org.codice.ddf.system.rootContext}/logout</value>\n-                <value>/logout</value>\n                 <value>${org.codice.ddf.system.rootContext}/internal/session</value>\n                 <value>${org.codice.ddf.system.rootContext}/admin/fonts</value>\n                 <value>/favicon.ico</value>\n                 <value>/error</value>\n                 <value>/webjars</value>\n+                <value>/logout/logout-response.html</value>\n+                <value>/logout/css</value>\n+                <value>/logout/js</value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQ2MDAyOnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/security/session/AttributeSharingHashSessionIdManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MDowMlrOIDg3pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MDowMlrOIDg3pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTE3NA==", "bodyText": "Made this fail the bundle so we actually see an error if session auditing stops working. Last time session auditing stopped working and nobody noticed (it's been broken since this change in 2018 #3783)", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540555174", "createdAt": "2020-12-10T22:50:02Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/security/session/AttributeSharingHashSessionIdManager.java", "diffHunk": "@@ -68,73 +74,57 @@\n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(AttributeSharingHashSessionIdManager.class);\n \n-  static class SharingSessionInvalidator implements HttpSessionInvalidator {\n-\n-    private final AttributeSharingHashSessionIdManager idManager;\n-\n-    SharingSessionInvalidator(AttributeSharingHashSessionIdManager idManager) {\n-      this.idManager = idManager;\n-    }\n-\n-    @Override\n-    public void invalidateSession(\n-        String subjectName, Function<Map<String, Object>, String> sessionSubjectExtractor) {\n-\n-      final Optional<String> sessionIdOptional =\n-          idManager.dataStores.stream()\n-              .map(AttributeSharingSessionDataStore::getSessionDataMap)\n-              .map(Map::entrySet)\n-              .flatMap(Collection::stream)\n-              .filter(\n-                  e ->\n-                      subjectName.equals(\n-                          sessionSubjectExtractor.apply(e.getValue().getAllAttributes())))\n-              .map(Map.Entry::getKey)\n-              .findFirst();\n-\n-      sessionIdOptional.ifPresent(idManager::invalidateSession);\n-    }\n-  }\n+  private final BundleContext bundleContext;\n+  private final ServiceTracker<SecurityLogger, SecurityLogger> securityLogger;\n \n   private List<AttributeSharingSessionDataStore> dataStores = new CopyOnWriteArrayList<>();\n \n-  private void registerSessionManager() {\n+  private static BundleContext getContext() {\n     Bundle bundle = FrameworkUtil.getBundle(AttributeSharingHashSessionIdManager.class);\n-    if (bundle == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-    final BundleContext bundleContext = bundle.getBundleContext();\n-    if (bundleContext == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-\n-    final SharingSessionInvalidator sm = new SharingSessionInvalidator(this);\n-    final Dictionary<String, Object> props = new DictionaryMap<>();\n-    props.put(Constants.SERVICE_PID, sm.getClass().getName());\n-    props.put(Constants.SERVICE_DESCRIPTION, \"Sharing Session Invalidator\");\n-    props.put(Constants.SERVICE_VENDOR, \"Codice Foundation\");\n-    props.put(Constants.SERVICE_RANKING, Integer.MIN_VALUE);\n-\n-    bundleContext.registerService(HttpSessionInvalidator.class.getName(), sm, props);\n+    return (bundle != null) ? bundle.getBundleContext() : null;\n   }\n \n-  public AttributeSharingHashSessionIdManager(Server server) {\n+  @VisibleForTesting\n+  public AttributeSharingHashSessionIdManager(Server server, BundleContext context) {\n     super(server);\n+    bundleContext = Objects.requireNonNull(context, \"bundleContext cannot be null\");\n+    securityLogger = new ServiceTracker<>(bundleContext, SecurityLogger.class.getName(), null);\n     registerSessionManager();\n   }\n \n+  public AttributeSharingHashSessionIdManager(Server server) {\n+    this(server, getContext());\n+  }\n+\n   public AttributeSharingHashSessionIdManager(Server server, Random random) {\n     super(server, random);\n+    bundleContext = Objects.requireNonNull(getContext(), \"bundleContext cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQ2NDk0OnYy", "diffSide": "LEFT", "path": "distribution/ddf-common/src/main/resources-filtered/etc/custom.system.properties", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MTozOVrOIDg6kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1MTozOVrOIDg6kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTkyMg==", "bodyText": "This property was used to selectively audit only for users with the listed roles. Changed it so that we now audit for all users, so removed this property", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540555922", "createdAt": "2020-12-10T22:51:39Z", "author": {"login": "SmithJosh"}, "path": "distribution/ddf-common/src/main/resources-filtered/etc/custom.system.properties", "diffHunk": "@@ -241,7 +241,6 @@ karaf.local.user=admin\n #org.osgi.framework.trust.repositories=_DO_NOT_EXPAND_${karaf.etc}/trustStore.ks\n # pipe (|) separated list of regex patterns for DNs that are allowed to connect to the Security Token Service\n ws-security.subject.cert.constraints=.*CN=_DO_NOT_EXPAND_${org.codice.ddf.system.hostname}.*\n-security.audit.roles=group,admin,manager,viewer,system-admin,system-history,systembundles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDQ5NzY1OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/security/session/AttributeSharingHashSessionIdManager.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1ODo1NlrOIDhOiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo1ODo1NlrOIDhOiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2MTAzNQ==", "bodyText": "I couldn't find a better way to inject the SecurityLogger service into this class. This class is created by Jetty via jetty.xml so not managed by blueprint. I tried CDI but couldn't get it working.\nThis made things a little weird for the unit test for this class, too, which starts up a Jetty server (not OSGi). The BundleContext injection is a little ugly, but couldn't find a better way to make things work. Open to suggestions if anybody has any.", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540561035", "createdAt": "2020-12-10T22:58:56Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/security/session/AttributeSharingHashSessionIdManager.java", "diffHunk": "@@ -68,73 +74,57 @@\n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(AttributeSharingHashSessionIdManager.class);\n \n-  static class SharingSessionInvalidator implements HttpSessionInvalidator {\n-\n-    private final AttributeSharingHashSessionIdManager idManager;\n-\n-    SharingSessionInvalidator(AttributeSharingHashSessionIdManager idManager) {\n-      this.idManager = idManager;\n-    }\n-\n-    @Override\n-    public void invalidateSession(\n-        String subjectName, Function<Map<String, Object>, String> sessionSubjectExtractor) {\n-\n-      final Optional<String> sessionIdOptional =\n-          idManager.dataStores.stream()\n-              .map(AttributeSharingSessionDataStore::getSessionDataMap)\n-              .map(Map::entrySet)\n-              .flatMap(Collection::stream)\n-              .filter(\n-                  e ->\n-                      subjectName.equals(\n-                          sessionSubjectExtractor.apply(e.getValue().getAllAttributes())))\n-              .map(Map.Entry::getKey)\n-              .findFirst();\n-\n-      sessionIdOptional.ifPresent(idManager::invalidateSession);\n-    }\n-  }\n+  private final BundleContext bundleContext;\n+  private final ServiceTracker<SecurityLogger, SecurityLogger> securityLogger;\n \n   private List<AttributeSharingSessionDataStore> dataStores = new CopyOnWriteArrayList<>();\n \n-  private void registerSessionManager() {\n+  private static BundleContext getContext() {\n     Bundle bundle = FrameworkUtil.getBundle(AttributeSharingHashSessionIdManager.class);\n-    if (bundle == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-    final BundleContext bundleContext = bundle.getBundleContext();\n-    if (bundleContext == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-\n-    final SharingSessionInvalidator sm = new SharingSessionInvalidator(this);\n-    final Dictionary<String, Object> props = new DictionaryMap<>();\n-    props.put(Constants.SERVICE_PID, sm.getClass().getName());\n-    props.put(Constants.SERVICE_DESCRIPTION, \"Sharing Session Invalidator\");\n-    props.put(Constants.SERVICE_VENDOR, \"Codice Foundation\");\n-    props.put(Constants.SERVICE_RANKING, Integer.MIN_VALUE);\n-\n-    bundleContext.registerService(HttpSessionInvalidator.class.getName(), sm, props);\n+    return (bundle != null) ? bundle.getBundleContext() : null;\n   }\n \n-  public AttributeSharingHashSessionIdManager(Server server) {\n+  @VisibleForTesting\n+  public AttributeSharingHashSessionIdManager(Server server, BundleContext context) {\n     super(server);\n+    bundleContext = Objects.requireNonNull(context, \"bundleContext cannot be null\");\n+    securityLogger = new ServiceTracker<>(bundleContext, SecurityLogger.class.getName(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDUxODE2OnYy", "diffSide": "LEFT", "path": "platform/security/core/security-core-services/src/main/java/ddf/security/listener/AuditingHttpSessionListener.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzowMjo0NFrOIDhaiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzowMjo0NFrOIDhaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2NDEwNw==", "bodyText": "Registering this as a service doesn't work because of a limitation in Pax Web. See https://ops4j1.jira.com/browse/PAXWEB-1123. If we wanted to use an HttpSessionListener for all servlet contexts, we'd have to inject it the same way we do error pages, which is a bit of a hack. So I opted to audit from the AttributeSharingHashSessionIdManager", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540564107", "createdAt": "2020-12-10T23:02:44Z", "author": {"login": "SmithJosh"}, "path": "platform/security/core/security-core-services/src/main/java/ddf/security/listener/AuditingHttpSessionListener.java", "diffHunk": "@@ -1,48 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package ddf.security.listener;\n-\n-import com.google.common.hash.Hashing;\n-import ddf.security.audit.SecurityLogger;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.http.HttpSession;\n-import javax.servlet.http.HttpSessionEvent;\n-import javax.servlet.http.HttpSessionListener;\n-\n-public class AuditingHttpSessionListener implements HttpSessionListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4419, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}