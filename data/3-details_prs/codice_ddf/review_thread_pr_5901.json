{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NTA0MzEw", "number": 5901, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNTowNFrODoyk3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTowMVrODqk3Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MDk4MjcxOnYy", "diffSide": "RIGHT", "path": "platform/security/interceptor/security-interceptor-guest/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNjoxNTowNFrOF3jnZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QxOTowMDo1N1rOF6T4KA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5OTUyNw==", "bodyText": "\u2753 The availability of the security manager is optional here but in code, if we don't have it set we throw an exception. Is this here so we don't have issues resolving the dependency?", "url": "https://github.com/codice/ddf/pull/5901#discussion_r393799527", "createdAt": "2020-03-17T16:15:04Z", "author": {"login": "blen-desta"}, "path": "platform/security/interceptor/security-interceptor-guest/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -17,7 +17,7 @@\n            xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n            xsi:schemaLocation=\"http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\"\n >\n-    <reference id=\"securityManager\" interface=\"ddf.security.service.SecurityManager\"/>\n+    <reference id=\"securityManager\" interface=\"ddf.security.service.SecurityManager\" availability=\"optional\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77c929a8a1e2ab248991ad430ea171026ef5a597"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjY4NzQwMA==", "bodyText": "Correct. This lets the services come up independently, but if you try to use any of them before they are all done resolving things, then you will get an exception. This is how most of the services should behave. It allows for things to start up faster and resolves race conditions.", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396687400", "createdAt": "2020-03-23T19:00:57Z", "author": {"login": "stustison"}, "path": "platform/security/interceptor/security-interceptor-guest/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -17,7 +17,7 @@\n            xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\"\n            xsi:schemaLocation=\"http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd\"\n >\n-    <reference id=\"securityManager\" interface=\"ddf.security.service.SecurityManager\"/>\n+    <reference id=\"securityManager\" interface=\"ddf.security.service.SecurityManager\" availability=\"optional\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc5OTUyNw=="}, "originalCommit": {"oid": "77c929a8a1e2ab248991ad430ea171026ef5a597"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjEyNDc1OnYy", "diffSide": "RIGHT", "path": "platform/security/filter/security-filter-login/src/main/java/org/codice/ddf/security/filter/login/LoginFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTo0NjowMVrOF3vMVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTo0NjowMVrOF3vMVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4OTIwNQ==", "bodyText": "\u2753 Are these error messages getting propagated to an end user? If not, can we be more specific? Otherwise, I understand the reason for being vague.", "url": "https://github.com/codice/ddf/pull/5901#discussion_r393989205", "createdAt": "2020-03-17T21:46:01Z", "author": {"login": "Lambeaux"}, "path": "platform/security/filter/security-filter-login/src/main/java/org/codice/ddf/security/filter/login/LoginFilter.java", "diffHunk": "@@ -124,6 +125,9 @@ public void doFilter(\n         (X509Certificate[]) httpRequest.getAttribute(\"javax.servlet.request.X509Certificate\"));\n     token.setRequestURI(httpRequest.getRequestURI());\n \n+    if (securityManager == null) {\n+      throw new AuthenticationException(\"Unable to authenticate user, system is not available.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c235d56fee430391defdfb2e6acbfd20ae36a9b8"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjEyNTE5OnYy", "diffSide": "RIGHT", "path": "platform/security/filter/security-filter-login/src/main/java/org/codice/ddf/security/filter/login/LoginFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTo0NjowOVrOF3vMmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTo0NjowOVrOF3vMmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4OTI3Mg==", "bodyText": "\u2753 Are these error messages getting propagated to an end user? If not, can we be more specific? Otherwise, I understand the reason for being vague.", "url": "https://github.com/codice/ddf/pull/5901#discussion_r393989272", "createdAt": "2020-03-17T21:46:09Z", "author": {"login": "Lambeaux"}, "path": "platform/security/filter/security-filter-login/src/main/java/org/codice/ddf/security/filter/login/LoginFilter.java", "diffHunk": "@@ -190,6 +194,9 @@ public void doFilter(\n    * @param subject Subject to attach to request\n    */\n   private void addToSession(HttpServletRequest httpRequest, Subject subject) {\n+    if (sessionFactory == null) {\n+      throw new SessionException(\"Unable to store user's session.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c235d56fee430391defdfb2e6acbfd20ae36a9b8"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MjEyNTUzOnYy", "diffSide": "RIGHT", "path": "platform/security/filter/security-filter-web-sso/src/main/java/org/codice/ddf/security/filter/websso/WebSSOFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTo0NjoxOVrOF3vM4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QyMTo0NjoxOVrOF3vM4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzk4OTM0Nw==", "bodyText": "\u2753 Are these error messages getting propagated to an end user? If not, can we be more specific? Otherwise, I understand the reason for being vague.", "url": "https://github.com/codice/ddf/pull/5901#discussion_r393989347", "createdAt": "2020-03-17T21:46:19Z", "author": {"login": "Lambeaux"}, "path": "platform/security/filter/security-filter-web-sso/src/main/java/org/codice/ddf/security/filter/websso/WebSSOFilter.java", "diffHunk": "@@ -208,6 +210,9 @@ private HandlerResult checkForPreviousResultOnSession(HttpServletRequest httpReq\n           Hashing.sha256().hashString(requestedSessionId, StandardCharsets.UTF_8).toString());\n     }\n     if (session == null && requestedSessionId != null) {\n+      if (sessionFactory == null) {\n+        throw new SessionException(\"Unable to verify user's session.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c235d56fee430391defdfb2e6acbfd20ae36a9b8"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU1ODEyOnYy", "diffSide": "RIGHT", "path": "platform/platform-http-proxy/src/main/java/org/codice/ddf/platform/http/proxy/HttpProxy.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMToyODoyMVrOF6Yxyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozMzozNFrOF6aj4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzY5MA==", "bodyText": "Any reason why this is a singleton instead of an osgi service?", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396767690", "createdAt": "2020-03-23T21:28:21Z", "author": {"login": "bakejeyner"}, "path": "platform/platform-http-proxy/src/main/java/org/codice/ddf/platform/http/proxy/HttpProxy.java", "diffHunk": "@@ -126,8 +126,8 @@ Properties getProperties() throws IOException {\n                 + CXF_CONFIG);\n     Properties properties = new Properties();\n     if (paxConfig.exists() && cxfConfig.exists()) {\n-      properties.putAll(PropertiesLoader.loadProperties(paxConfig.getAbsolutePath()));\n-      properties.putAll(PropertiesLoader.loadProperties(cxfConfig.getAbsolutePath()));\n+      properties.putAll(PropertiesLoader.getInstance().loadProperties(paxConfig.getAbsolutePath()));\n+      properties.putAll(PropertiesLoader.getInstance().loadProperties(cxfConfig.getAbsolutePath()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1f46835852dc55c4870f184b3eb20fa9dc8277"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5Njg5OA==", "bodyText": "Not really any reason. This is simply removing the duplicated PropertiesLoader that was in the security api and using the one in platform-util instead", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396796898", "createdAt": "2020-03-23T22:33:34Z", "author": {"login": "stustison"}, "path": "platform/platform-http-proxy/src/main/java/org/codice/ddf/platform/http/proxy/HttpProxy.java", "diffHunk": "@@ -126,8 +126,8 @@ Properties getProperties() throws IOException {\n                 + CXF_CONFIG);\n     Properties properties = new Properties();\n     if (paxConfig.exists() && cxfConfig.exists()) {\n-      properties.putAll(PropertiesLoader.loadProperties(paxConfig.getAbsolutePath()));\n-      properties.putAll(PropertiesLoader.loadProperties(cxfConfig.getAbsolutePath()));\n+      properties.putAll(PropertiesLoader.getInstance().loadProperties(paxConfig.getAbsolutePath()));\n+      properties.putAll(PropertiesLoader.getInstance().loadProperties(cxfConfig.getAbsolutePath()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2NzY5MA=="}, "originalCommit": {"oid": "ad1f46835852dc55c4870f184b3eb20fa9dc8277"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU2NTUyOnYy", "diffSide": "RIGHT", "path": "platform/security/claims/security-claims-attributequerycommon/src/main/java/org/codice/ddf/security/claims/attributequery/common/AttributeQueryClaimsHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozMDo0OFrOF6Y2mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjozNDowM1rOF6akoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2ODkyMQ==", "bodyText": "I see the PropertiesLoader's methods toMap() and loadProperties used in conjunction a couple of times. Would it make sense to expose a new method that does both of those steps in one?", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396768921", "createdAt": "2020-03-23T21:30:48Z", "author": {"login": "bakejeyner"}, "path": "platform/security/claims/security-claims-attributequerycommon/src/main/java/org/codice/ddf/security/claims/attributequery/common/AttributeQueryClaimsHandler.java", "diffHunk": "@@ -318,7 +318,9 @@ public void setDestination(String destination) {\n   public void setAttributeMapLocation(String attributeMapLocation) {\n     if (StringUtils.isNotBlank(attributeMapLocation)\n         && !attributeMapLocation.equals(this.attributeMapLocation)) {\n-      attributeMap = PropertiesLoader.toMap(PropertiesLoader.loadProperties(attributeMapLocation));\n+      attributeMap =\n+          PropertiesLoader.getInstance()\n+              .toMap(PropertiesLoader.getInstance().loadProperties(attributeMapLocation));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1f46835852dc55c4870f184b3eb20fa9dc8277"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5NzA4OQ==", "bodyText": "It might, yeah. That'd be a different PR though.", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396797089", "createdAt": "2020-03-23T22:34:03Z", "author": {"login": "stustison"}, "path": "platform/security/claims/security-claims-attributequerycommon/src/main/java/org/codice/ddf/security/claims/attributequery/common/AttributeQueryClaimsHandler.java", "diffHunk": "@@ -318,7 +318,9 @@ public void setDestination(String destination) {\n   public void setAttributeMapLocation(String attributeMapLocation) {\n     if (StringUtils.isNotBlank(attributeMapLocation)\n         && !attributeMapLocation.equals(this.attributeMapLocation)) {\n-      attributeMap = PropertiesLoader.toMap(PropertiesLoader.loadProperties(attributeMapLocation));\n+      attributeMap =\n+          PropertiesLoader.getInstance()\n+              .toMap(PropertiesLoader.getInstance().loadProperties(attributeMapLocation));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2ODkyMQ=="}, "originalCommit": {"oid": "ad1f46835852dc55c4870f184b3eb20fa9dc8277"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTU2ODA1OnYy", "diffSide": "RIGHT", "path": "platform/security/core/security-core-impl/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozMTo0MVrOF6Y4Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMTozMTo0MVrOF6Y4Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc2OTM1OQ==", "bodyText": "\ud83c\udf89", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396769359", "createdAt": "2020-03-23T21:31:41Z", "author": {"login": "bakejeyner"}, "path": "platform/security/core/security-core-impl/pom.xml", "diffHunk": "@@ -140,17 +302,17 @@\n                                         <limit implementation=\"org.codice.jacoco.LenientLimit\">\n                                             <counter>INSTRUCTION</counter>\n                                             <value>COVEREDRATIO</value>\n-                                            <minimum>0.05</minimum>\n+                                            <minimum>0.56</minimum>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1f46835852dc55c4870f184b3eb20fa9dc8277"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ1OTcwNzUxOnYy", "diffSide": "RIGHT", "path": "platform/security/core/security-core-impl/src/test/groovy/ddf/security/samlp/impl/EntityInformationSpec.groovy", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTowMVrOF6aPtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yM1QyMjoyMTowMVrOF6aPtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Njc5MTczNQ==", "bodyText": "\u2753 :nitpick: wonder why this extra newline wasn't picked up by the formatter", "url": "https://github.com/codice/ddf/pull/5901#discussion_r396791735", "createdAt": "2020-03-23T22:21:01Z", "author": {"login": "bakejeyner"}, "path": "platform/security/core/security-core-impl/src/test/groovy/ddf/security/samlp/impl/EntityInformationSpec.groovy", "diffHunk": "@@ -1,14 +1,14 @@\n package ddf.security.samlp.impl\n \n-import ddf.security.samlp.MetadataConfigurationParser\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ad1f46835852dc55c4870f184b3eb20fa9dc8277"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4829, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}