{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyNjIyNTQy", "number": 5868, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyNTowNFrODkuSOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyOTozNVrODkua7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODMzNjU5OnYy", "diffSide": "RIGHT", "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/query/handlers/CqlTransformHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyNTowNFrOFxNA_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxODo0MTowN1rOFx5CeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNzc5MA==", "bodyText": "so this results is a subset fo the total results, if the results exceeded the size of the request, right? I guess there's no way to only get the number that we want, i.e. cqlTransformRequest.getCount() number of results", "url": "https://github.com/codice/ddf/pull/5868#discussion_r387137790", "createdAt": "2020-03-03T16:25:04Z", "author": {"login": "cassandrabailey293"}, "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/query/handlers/CqlTransformHandler.java", "diffHunk": "@@ -158,7 +234,48 @@ public Object handle(Request request, Response response) throws Exception {\n       return ImmutableMap.of(\"message\", \"Service not found\");\n     }\n \n-    CqlQueryResponse cqlQueryResponse = cqlQueryUtil.executeCqlQuery(cqlRequest);\n+    List<Result> results =\n+        cqlRequests\n+            .stream()\n+            .map(\n+                cqlRequest -> {\n+                  CqlQueryResponse cqlQueryResponse = null;\n+                  try {\n+                    cqlQueryResponse = cqlQueryUtil.executeCqlQuery(cqlRequest);\n+                  } catch (Exception e) {\n+                    LOGGER.debug(\"Error fetching cql request for {}\", cqlRequest.getSrc());\n+                    return null;\n+                  }\n+                  return cqlQueryResponse.getQueryResponse().getResults();\n+                })\n+            .filter(cqlResults -> CollectionUtils.isNotEmpty(cqlResults))\n+            .flatMap(cqlResults -> cqlResults.stream())\n+            .collect(Collectors.toList());\n+\n+    results.sort(getResultComparators(cqlTransformRequest.getSorts()));\n+\n+    results =\n+        results.size() > cqlTransformRequest.getCount()\n+            ? results.subList(0, cqlTransformRequest.getCount())\n+            : results;\n+\n+    results =\n+        CollectionUtils.isEmpty(cqlTransformRequest.getHiddenResults())\n+            ? results\n+            : results\n+                .stream()\n+                .filter(\n+                    result ->\n+                        !cqlTransformRequest\n+                            .getHiddenResults()\n+                            .contains(result.getMetacard().getId()))\n+                .collect(Collectors.toList());\n+\n+    QueryResponse combinedResponse =\n+        new QueryResponseImpl(\n+            new QueryRequestImpl(new QueryImpl(ECQL.toFilter(cqlRequests.get(0).getCql()))),\n+            results,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df10cd06d869d2586d6c07cb6e47ea167e8c86d"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg1OTA2NA==", "bodyText": "export all/exact number will have one combined cql request for all srcs because all srcs have the same starting index, so in this case we should only be retrieving the number of results we want. And just added a commit c43593d for visible to get the count per src so we should always be retrieving the correct amount of results. There are cases where downstream projects will be adding additional srcs to the request and will require the results being truncated", "url": "https://github.com/codice/ddf/pull/5868#discussion_r387859064", "createdAt": "2020-03-04T18:41:07Z", "author": {"login": "andrewzimmer"}, "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/query/handlers/CqlTransformHandler.java", "diffHunk": "@@ -158,7 +234,48 @@ public Object handle(Request request, Response response) throws Exception {\n       return ImmutableMap.of(\"message\", \"Service not found\");\n     }\n \n-    CqlQueryResponse cqlQueryResponse = cqlQueryUtil.executeCqlQuery(cqlRequest);\n+    List<Result> results =\n+        cqlRequests\n+            .stream()\n+            .map(\n+                cqlRequest -> {\n+                  CqlQueryResponse cqlQueryResponse = null;\n+                  try {\n+                    cqlQueryResponse = cqlQueryUtil.executeCqlQuery(cqlRequest);\n+                  } catch (Exception e) {\n+                    LOGGER.debug(\"Error fetching cql request for {}\", cqlRequest.getSrc());\n+                    return null;\n+                  }\n+                  return cqlQueryResponse.getQueryResponse().getResults();\n+                })\n+            .filter(cqlResults -> CollectionUtils.isNotEmpty(cqlResults))\n+            .flatMap(cqlResults -> cqlResults.stream())\n+            .collect(Collectors.toList());\n+\n+    results.sort(getResultComparators(cqlTransformRequest.getSorts()));\n+\n+    results =\n+        results.size() > cqlTransformRequest.getCount()\n+            ? results.subList(0, cqlTransformRequest.getCount())\n+            : results;\n+\n+    results =\n+        CollectionUtils.isEmpty(cqlTransformRequest.getHiddenResults())\n+            ? results\n+            : results\n+                .stream()\n+                .filter(\n+                    result ->\n+                        !cqlTransformRequest\n+                            .getHiddenResults()\n+                            .contains(result.getMetacard().getId()))\n+                .collect(Collectors.toList());\n+\n+    QueryResponse combinedResponse =\n+        new QueryResponseImpl(\n+            new QueryRequestImpl(new QueryImpl(ECQL.toFilter(cqlRequests.get(0).getCql()))),\n+            results,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzEzNzc5MA=="}, "originalCommit": {"oid": "7df10cd06d869d2586d6c07cb6e47ea167e8c86d"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODM1ODg2OnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/extension-points/table-export/table-export.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNjoyOTozNVrOFxNObA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxNjo0NTowNFrOFx1E0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MTIyOA==", "bodyText": "\u2753 what's the hidden results for?", "url": "https://github.com/codice/ddf/pull/5868#discussion_r387141228", "createdAt": "2020-03-03T16:29:35Z", "author": {"login": "cassandrabailey293"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/extension-points/table-export/table-export.tsx", "diffHunk": "@@ -165,19 +156,30 @@ export const getDownloadBody = (downloadInfo: DownloadInfo) => {\n     getExportCount({ exportSize, selectionInterface, customExportCount }),\n     properties.exportResultLimit\n   )\n-  const cql = getCqlForSize(exportSize, count, selectionInterface)\n+  const cql = selectionInterface.getCurrentQuery().get('cql')\n   const srcs = getSrcs(selectionInterface)\n   const sorts = getSorts(selectionInterface)\n+  const hiddenResults = getHiddenResults(exportSize)\n   const args = {\n     hiddenFields: hiddenFields.length > 0 ? hiddenFields : [],\n     columnOrder: columnOrder.length > 0 ? columnOrder : {},\n     columnAliasMap: properties.attributeAliases,\n   }\n+\n+  const searches = srcs.map((src: string) => {\n+    const start = getStartIndex(src, exportSize, selectionInterface)\n+    return {\n+      src,\n+      cql,\n+      start,\n+    }\n+  })\n+\n   return {\n-    cql,\n-    srcs,\n+    searches,\n     count,\n     sorts,\n+    hiddenResults,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7df10cd06d869d2586d6c07cb6e47ea167e8c86d"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzc5NDEyOQ==", "bodyText": "Results can be hidden on the ui and we don't want these to appear for an export visible. Previously getActiveSearchResults did this filtering by only retrieving ids of non-hidden results, now we are passing this list of ids to do this filtering on the backend", "url": "https://github.com/codice/ddf/pull/5868#discussion_r387794129", "createdAt": "2020-03-04T16:45:04Z", "author": {"login": "andrewzimmer"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/extension-points/table-export/table-export.tsx", "diffHunk": "@@ -165,19 +156,30 @@ export const getDownloadBody = (downloadInfo: DownloadInfo) => {\n     getExportCount({ exportSize, selectionInterface, customExportCount }),\n     properties.exportResultLimit\n   )\n-  const cql = getCqlForSize(exportSize, count, selectionInterface)\n+  const cql = selectionInterface.getCurrentQuery().get('cql')\n   const srcs = getSrcs(selectionInterface)\n   const sorts = getSorts(selectionInterface)\n+  const hiddenResults = getHiddenResults(exportSize)\n   const args = {\n     hiddenFields: hiddenFields.length > 0 ? hiddenFields : [],\n     columnOrder: columnOrder.length > 0 ? columnOrder : {},\n     columnAliasMap: properties.attributeAliases,\n   }\n+\n+  const searches = srcs.map((src: string) => {\n+    const start = getStartIndex(src, exportSize, selectionInterface)\n+    return {\n+      src,\n+      cql,\n+      start,\n+    }\n+  })\n+\n   return {\n-    cql,\n-    srcs,\n+    searches,\n     count,\n     sorts,\n+    hiddenResults,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE0MTIyOA=="}, "originalCommit": {"oid": "7df10cd06d869d2586d6c07cb6e47ea167e8c86d"}, "originalPosition": 83}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4817, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}