{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzODQwNDUw", "number": 5942, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNDo0NlrODs35pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo0ODozNlrODtrmIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzc5ODEzOnYy", "diffSide": "RIGHT", "path": "catalog/plugin/catalog-plugin-oauth/src/main/java/org/codice/ddf/catalog/plugin/oauth/OAuthPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNDo0NlrOF9-Ntw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjoxNDo0NlrOF9-Ntw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDUyNjc3NQ==", "bodyText": "\u270f\ufe0f I feel like I've mentioned this before, sorry if I did, but would \"The user Subject is not available.\"  make more sense here?", "url": "https://github.com/codice/ddf/pull/5942#discussion_r400526775", "createdAt": "2020-03-30T22:14:46Z", "author": {"login": "bakejeyner"}, "path": "catalog/plugin/catalog-plugin-oauth/src/main/java/org/codice/ddf/catalog/plugin/oauth/OAuthPlugin.java", "diffHunk": "@@ -140,17 +141,22 @@ public QueryRequest process(Source source, QueryRequest input) throws StopProces\n \n     Object securityAssertion = input.getProperties().get(SECURITY_SUBJECT);\n     if (!(securityAssertion instanceof Subject)) {\n-      LOGGER.warn(\"A user Subject is not available.\");\n-      throw new StopProcessingException(\"A user Subject is not available.\");\n+      LOGGER.warn(\"The user's subject is not available.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5ff8b95af2b83fbcaa2f17ea29e1032f5c679"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4Mzg5NDk1OnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/SecureCxfClientFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1MTo0N1rOF9_I_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1MTo0N1rOF9_I_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MTk1MA==", "bodyText": "\u270f\ufe0f getSystemWebClient() may read better", "url": "https://github.com/codice/ddf/pull/5942#discussion_r400541950", "createdAt": "2020-03-30T22:51:47Z", "author": {"login": "bakejeyner"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/SecureCxfClientFactory.java", "diffHunk": "@@ -42,6 +42,13 @@\n    */\n   WebClient getWebClient();\n \n+  /**\n+   * Returns the WebClient\n+   *\n+   * @return\n+   */\n+  WebClient getWebSystemClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5ff8b95af2b83fbcaa2f17ea29e1032f5c679"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAxMjMzOnYy", "diffSide": "RIGHT", "path": "catalog/plugin/catalog-plugin-oauth/src/main/java/org/codice/ddf/catalog/plugin/oauth/OAuthPlugin.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0NTozMFrOF-AQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0NTozMFrOF-AQQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDE5NA==", "bodyText": "\u270f\ufe0f This seems redundant, given we're already passing the baseUrl and parameters", "url": "https://github.com/codice/ddf/pull/5942#discussion_r400560194", "createdAt": "2020-03-30T23:45:30Z", "author": {"login": "SmithJosh"}, "path": "catalog/plugin/catalog-plugin-oauth/src/main/java/org/codice/ddf/catalog/plugin/oauth/OAuthPlugin.java", "diffHunk": "@@ -300,26 +314,22 @@ private void findExistingTokens(\n         return;\n       }\n \n-      refreshTokens(tokenEntry.getRefreshToken(), oauthSource, userId, metadata);\n+      refreshTokens(tokenEntry.getRefreshToken(), oauthSource, sessionId, metadata);\n     }\n \n     LOGGER.debug(\n         \"Unable to process query. The user needs to authorize to query the {} source.\",\n         oauthSource.getId());\n \n-    try {\n-      URIBuilder uriBuilder = new URIBuilder(AUTHORIZE_SOURCE_ENDPOINT);\n-      uriBuilder.addParameter(USER_ID, userId);\n-      uriBuilder.addParameter(SOURCE_ID, oauthSource.getId());\n-      uriBuilder.addParameter(DISCOVERY_URL, oauthSource.getOauthDiscoveryUrl());\n-\n-      String url = uriBuilder.build().toURL().toString();\n-      throw new OAuthPluginException(oauthSource.getId(), url, AUTH_SOURCE);\n-\n-    } catch (URISyntaxException | MalformedURLException e) {\n-      LOGGER.warn(\"Unable to construct authorization URL.\");\n-      throw new StopProcessingException(\"Unable to construct authorization URL. \" + e.getMessage());\n-    }\n+    Map<String, String> parameters = new HashMap<>();\n+    parameters.put(SOURCE_ID, oauthSource.getId());\n+    parameters.put(DISCOVERY_URL, oauthSource.getOauthDiscoveryUrl());\n+    throw new OAuthPluginException(\n+        oauthSource.getId(),\n+        buildUrl(AUTHORIZE_SOURCE_ENDPOINT, parameters),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5ff8b95af2b83fbcaa2f17ea29e1032f5c679"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAzMjgyOnYy", "diffSide": "RIGHT", "path": "catalog/rest/catalog-rest-service/src/main/java/org/codice/ddf/rest/service/AbstractCatalogService.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1NTo1MFrOF-Aceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo1NTo1MFrOF-Aceg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MzMyMg==", "bodyText": "\u270f\ufe0f Same comment as before - this is redundant. Imo makes more sense to move the constructUrl inside OAuthException", "url": "https://github.com/codice/ddf/pull/5942#discussion_r400563322", "createdAt": "2020-03-30T23:55:50Z", "author": {"login": "SmithJosh"}, "path": "catalog/rest/catalog-rest-service/src/main/java/org/codice/ddf/rest/service/AbstractCatalogService.java", "diffHunk": "@@ -366,6 +374,15 @@ public BinaryContent getDocument(\n         String errorMessage = \"Unable to process request. Data usage limit exceeded: \";\n         LOGGER.debug(errorMessage, e);\n         throw new DataUsageLimitExceededException(errorMessage);\n+      } catch (OAuthPluginException e) {\n+        Map<String, String> parameters = e.getParameters();\n+        String url = constructUrl(httpRequest, e.getBaseUrl(), parameters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5ff8b95af2b83fbcaa2f17ea29e1032f5c679"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDA4MjE2OnYy", "diffSide": "LEFT", "path": "platform/security/handler/security-handler-api/src/main/java/org/codice/ddf/security/handler/api/SessionToken.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwMDoyMDo1OVrOF-A6Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1ODoxNFrOF_QZ0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3MDk3OA==", "bodyText": "\u270f\ufe0f It's gone now, but your previous code change with overriding the getters gave me an idea. You could do something like:\n  public SessionToken(PrincipalCollection principals, String id, String ip) {\n    super(principals, id, ip);\n  }\n\n  public PrincipalCollection getPrincipalCollection() {\n    return (PrincipalCollection) this.principal;\n  }\n\n  public String getId() {\n    return (String) this.credentials;\n  }\n\nSo that it's clearer what SessionToken actually requires.", "url": "https://github.com/codice/ddf/pull/5942#discussion_r400570978", "createdAt": "2020-03-31T00:20:59Z", "author": {"login": "SmithJosh"}, "path": "platform/security/handler/security-handler-api/src/main/java/org/codice/ddf/security/handler/api/SessionToken.java", "diffHunk": "@@ -15,10 +15,6 @@\n \n public class SessionToken extends BaseAuthenticationToken {\n \n-  public SessionToken(Object credentials) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3139923ac9786fb9bb15bcd301fd405f7fe78d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MzM2Mw==", "bodyText": "This is a good idea. I'll make the change", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401873363", "createdAt": "2020-04-01T19:58:14Z", "author": {"login": "blen-desta"}, "path": "platform/security/handler/security-handler-api/src/main/java/org/codice/ddf/security/handler/api/SessionToken.java", "diffHunk": "@@ -15,10 +15,6 @@\n \n public class SessionToken extends BaseAuthenticationToken {\n \n-  public SessionToken(Object credentials) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU3MDk3OA=="}, "originalCommit": {"oid": "de3139923ac9786fb9bb15bcd301fd405f7fe78d"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjI0NTM2OnYy", "diffSide": "RIGHT", "path": "platform/security/idp/security-idp-client/src/main/java/org/codice/ddf/security/idp/client/LogoutRequestService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo0MjozMlrOF_P29w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1Mjo1N1rOF_QN8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NDQzOQ==", "bodyText": "\u2753 Aren't these args backwards?", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401864439", "createdAt": "2020-04-01T19:42:32Z", "author": {"login": "stustison"}, "path": "platform/security/idp/security-idp-client/src/main/java/org/codice/ddf/security/idp/client/LogoutRequestService.java", "diffHunk": "@@ -271,7 +271,7 @@ private String extractSubject(Map<String, Object> sessionAttributes) {\n         .map(SecurityTokenHolder::getPrincipals)\n         .filter(Objects::nonNull)\n         .map(PrincipalCollection.class::cast)\n-        .map(SessionToken::new)\n+        .map(principalCollection -> new SessionToken(principalCollection, null, \"127.0.0.1\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MDMyMA==", "bodyText": "Yes I just fixed them", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401870320", "createdAt": "2020-04-01T19:52:57Z", "author": {"login": "blen-desta"}, "path": "platform/security/idp/security-idp-client/src/main/java/org/codice/ddf/security/idp/client/LogoutRequestService.java", "diffHunk": "@@ -271,7 +271,7 @@ private String extractSubject(Map<String, Object> sessionAttributes) {\n         .map(SecurityTokenHolder::getPrincipals)\n         .filter(Objects::nonNull)\n         .map(PrincipalCollection.class::cast)\n-        .map(SessionToken::new)\n+        .map(principalCollection -> new SessionToken(principalCollection, null, \"127.0.0.1\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NDQzOQ=="}, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjI1MTc1OnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-cxfwrapper/src/main/java/org/codice/ddf/cxf/client/impl/SecureCxfClientFactoryImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo0NDoxMFrOF_P63g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1Mzo0N1rOF_QPsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NTQzOA==", "bodyText": "We probably need to make a builder for this thing.", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401865438", "createdAt": "2020-04-01T19:44:10Z", "author": {"login": "stustison"}, "path": "platform/security/rest/security-rest-cxfwrapper/src/main/java/org/codice/ddf/cxf/client/impl/SecureCxfClientFactoryImpl.java", "diffHunk": "@@ -399,6 +403,69 @@ public SecureCxfClientFactoryImpl(\n     this.oauthSecurity = oauthSecurity;\n   }\n \n+  /**\n+   * Constructs a factory that will return security-aware cxf clients. Once constructed, use the\n+   * getClient* methods to retrieve a fresh client with the same configuration. Providing {@link\n+   * WebClient} to interfaceClass will create a generic web client.\n+   *\n+   * <p>This factory can and should be cached. The clients it constructs should not be.\n+   *\n+   * @param endpointUrl the remote url to connect to\n+   * @param interfaceClass an interface representing the resource at the remote url\n+   * @param providers optional list of providers to further configure the client\n+   * @param interceptor optional message interceptor for the client\n+   * @param disableCnCheck disable ssl check for common name / host name match\n+   * @param allowRedirects allow this client to follow redirects\n+   * @param connectionTimeout timeout for the connection\n+   * @param receiveTimeout timeout for receiving responses\n+   * @param sourceId the id of the source\n+   * @param discoveryUrl the oauth provider's discovery url\n+   * @param clientId the client id registered with the oauth provider\n+   * @param clientSecret the client secret registered with the oauth provider\n+   * @param username the oauth flow to use\n+   * @param password the oauth flow to use\n+   * @param additionalOauthParameters the oauth flow to use\n+   * @param oauthSecurity class used to set oauth tokens on clients\n+   */\n+  @SuppressWarnings(\"squid:S00107\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MDc3MA==", "bodyText": "Agreed it's getting too big. I believe there was another PR on master to add one more constructor.", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401870770", "createdAt": "2020-04-01T19:53:47Z", "author": {"login": "blen-desta"}, "path": "platform/security/rest/security-rest-cxfwrapper/src/main/java/org/codice/ddf/cxf/client/impl/SecureCxfClientFactoryImpl.java", "diffHunk": "@@ -399,6 +403,69 @@ public SecureCxfClientFactoryImpl(\n     this.oauthSecurity = oauthSecurity;\n   }\n \n+  /**\n+   * Constructs a factory that will return security-aware cxf clients. Once constructed, use the\n+   * getClient* methods to retrieve a fresh client with the same configuration. Providing {@link\n+   * WebClient} to interfaceClass will create a generic web client.\n+   *\n+   * <p>This factory can and should be cached. The clients it constructs should not be.\n+   *\n+   * @param endpointUrl the remote url to connect to\n+   * @param interfaceClass an interface representing the resource at the remote url\n+   * @param providers optional list of providers to further configure the client\n+   * @param interceptor optional message interceptor for the client\n+   * @param disableCnCheck disable ssl check for common name / host name match\n+   * @param allowRedirects allow this client to follow redirects\n+   * @param connectionTimeout timeout for the connection\n+   * @param receiveTimeout timeout for receiving responses\n+   * @param sourceId the id of the source\n+   * @param discoveryUrl the oauth provider's discovery url\n+   * @param clientId the client id registered with the oauth provider\n+   * @param clientSecret the client secret registered with the oauth provider\n+   * @param username the oauth flow to use\n+   * @param password the oauth flow to use\n+   * @param additionalOauthParameters the oauth flow to use\n+   * @param oauthSecurity class used to set oauth tokens on clients\n+   */\n+  @SuppressWarnings(\"squid:S00107\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NTQzOA=="}, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MjI2Nzg0OnYy", "diffSide": "RIGHT", "path": "platform/security/servlet/security-servlet-logout/src/main/java/org/codice/ddf/security/servlet/logout/LogoutServiceImpl.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo0ODozNlrOF_QEgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxOTo1Nzo1NlrOF_QZQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NzkwNw==", "bodyText": "\u2753 Isn't this backwards from what is in WebSSOFilter?", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401867907", "createdAt": "2020-04-01T19:48:36Z", "author": {"login": "stustison"}, "path": "platform/security/servlet/security-servlet-logout/src/main/java/org/codice/ddf/security/servlet/logout/LogoutServiceImpl.java", "diffHunk": "@@ -57,7 +57,7 @@ public String getActionProviders(HttpServletRequest request, HttpServletResponse\n     Object token =\n         ((SecurityTokenHolder) session.getAttribute(SecurityConstants.SECURITY_TOKEN_KEY))\n             .getPrincipals();\n-    SessionToken sessionToken = new SessionToken(token);\n+    SessionToken sessionToken = new SessionToken(token, session.getId(), \"127.0.0.1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MTQ3NQ==", "bodyText": "Yes I missed this one \ud83e\udd26\u200d\u2640", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401871475", "createdAt": "2020-04-01T19:54:58Z", "author": {"login": "blen-desta"}, "path": "platform/security/servlet/security-servlet-logout/src/main/java/org/codice/ddf/security/servlet/logout/LogoutServiceImpl.java", "diffHunk": "@@ -57,7 +57,7 @@ public String getActionProviders(HttpServletRequest request, HttpServletResponse\n     Object token =\n         ((SecurityTokenHolder) session.getAttribute(SecurityConstants.SECURITY_TOKEN_KEY))\n             .getPrincipals();\n-    SessionToken sessionToken = new SessionToken(token);\n+    SessionToken sessionToken = new SessionToken(token, session.getId(), \"127.0.0.1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NzkwNw=="}, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg3MzIxOA==", "bodyText": "This would prevent these mistakes in the future: #5942 (comment)", "url": "https://github.com/codice/ddf/pull/5942#discussion_r401873218", "createdAt": "2020-04-01T19:57:56Z", "author": {"login": "SmithJosh"}, "path": "platform/security/servlet/security-servlet-logout/src/main/java/org/codice/ddf/security/servlet/logout/LogoutServiceImpl.java", "diffHunk": "@@ -57,7 +57,7 @@ public String getActionProviders(HttpServletRequest request, HttpServletResponse\n     Object token =\n         ((SecurityTokenHolder) session.getAttribute(SecurityConstants.SECURITY_TOKEN_KEY))\n             .getPrincipals();\n-    SessionToken sessionToken = new SessionToken(token);\n+    SessionToken sessionToken = new SessionToken(token, session.getId(), \"127.0.0.1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTg2NzkwNw=="}, "originalCommit": {"oid": "7c217528c77e4a823fa65e6cd5f3d6bcc1509da4"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4684, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}