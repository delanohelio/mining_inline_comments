{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5NTY5OTkz", "number": 6250, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo0OTozOVrOEfG1lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo1NDoxOVrOEgMVrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMDUzMzM1OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/Constants.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo0OTozOVrOHLK4Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQyMjo0OTozOVrOHLK4Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTQ3NDU3NA==", "bodyText": "I am thinking this constant should be included somewhere in the CDM bundle instead of the catalog api since it is only used in that one bundle.", "url": "https://github.com/codice/ddf/pull/6250#discussion_r481474574", "createdAt": "2020-09-01T22:49:39Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/Constants.java", "diffHunk": "@@ -125,6 +125,8 @@\n \n   public static final String INGEST_LOGGER_NAME = \"ingestLogger\";\n \n+  public static final String CDM_LOGGER_NAME = \"cdmLogger\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b7c0923ecb514a0303e4532d3acb5154837b9336"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjcwNTM0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-solr/src/test/java/ddf/catalog/source/solr/DynamicSchemaResolverTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyODo0NVrOHMI5Qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMToyODo0NVrOHMI5Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5MDY5MQ==", "bodyText": "What does this change have to do with the cdm change?", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482490691", "createdAt": "2020-09-02T21:28:45Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-solr/src/test/java/ddf/catalog/source/solr/DynamicSchemaResolverTest.java", "diffHunk": "@@ -57,6 +58,11 @@\n   private static final ObjectMapper METACARD_TYPE_MAPPER =\n       MetacardTypeMapperFactory.newObjectMapper();\n \n+  @AfterClass", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjczNDM4OnYy", "diffSide": "RIGHT", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/content-directory-monitor.adoc", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozNDoyM1rOHMJL7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMzozMjowN1rOHMPg5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NTQ3MQ==", "bodyText": "Did this file get lost in previous commits or are you back porting this particular one from more recent docs? Just wondering why it doesn't already exist", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482495471", "createdAt": "2020-09-02T21:34:23Z", "author": {"login": "clockard"}, "path": "distribution/docs/src/main/resources/content/_managing/_configuring/content-directory-monitor.adoc", "diffHunk": "@@ -0,0 +1,179 @@\n+:title: Content Directory Monitor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjU5OTE0Mw==", "bodyText": "It looks like this adoc file is in src/main/resources/content/_configuring/content-directory-monitor.adoc already", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482599143", "createdAt": "2020-09-02T23:32:07Z", "author": {"login": "clockard"}, "path": "distribution/docs/src/main/resources/content/_managing/_configuring/content-directory-monitor.adoc", "diffHunk": "@@ -0,0 +1,179 @@\n+:title: Content Directory Monitor", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NTQ3MQ=="}, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjc0MjQ1OnYy", "diffSide": "RIGHT", "path": "distribution/docs/src/main/resources/content/_managing/_configuring/content-directory-monitor.adoc", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozNTo1NVrOHMJRIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTozNTo1NVrOHMJRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjQ5NjgwMw==", "bodyText": "CDM will not attempt to ingest the file until the file changes again ?", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482496803", "createdAt": "2020-09-02T21:35:55Z", "author": {"login": "clockard"}, "path": "distribution/docs/src/main/resources/content/_managing/_configuring/content-directory-monitor.adoc", "diffHunk": "@@ -0,0 +1,179 @@\n+:title: Content Directory Monitor\n+:type: configuration\n+:status: published\n+:parent: Configuring Data Management\n+:order: 03\n+:summary: Content Directory Monitor.\n+\n+== {title}\n+\n+The Content Directory Monitor (CDM) provides the capability to easily add content and metacards into the\u00a0${ddf-catalog} by placing a file in a directory.\n+\n+=== Installing the Content Directory Monitor\n+\n+The Content Directory Monitor is installed by default with a standard installation of the ${ddf-catalog} application.\n+\n+=== Configuring Permissions for the Content Directory Monitor\n+// This section of the docs is duplicated in ${home_directory}/security/configurations.policy. Updates\n+// should be applied to both locations.\n+\n+[TIP]\n+====\n+If monitoring a WebDav server, then adding these permissions is not required and this section can be skipped.\n+====\n+\n+Configuring a Content Directory Monitor requires adding permissions to the Security Manager before CDM configuration.\n+\n+Configuring a CDM requires adding read and write permissions to the directory being monitored. The following permissions, replacing <DIRECTORY_PATH> with the path of the directory being monitored, are required for each configured CDM and should be placed in the CDM section inside ${home_directory}/security/configurations.policy.\n+\n+.Adding New Permissions\n+[WARNING]\n+====\n+After adding permissions, a system restart is required for them to take effect.\n+====\n+\n+. permission java.io.FilePermission \"<DIRECTORY_PATH>\", \"read\";\n+. permission java.io.FilePermission \"<DIRECTORY_PATH>${/}-\", \"read, write\";\n+\n+Trailing slashes after <DIRECTORY_PATH> have no effect on the permissions granted. For example, adding a permission for \"${/}test${/}path\" and \"${/}test${/}path${/}\" are equivalent. The recursive forms \"${/}test${/}path${/}-\", and \"${/}test${/}path${/}${/}-\" are also equivalent.\n+\n+Line 1 gives the CDM the permissions to read from the monitored directory path. Line 2 gives the CDM the permissions to recursively read and write from the monitored directory path, specified by the directory path's suffix \"${/}-\".\n+\n+If a CDM configuration is deleted, then the corresponding permissions that were added should be deleted to avoid granting unnecessary permissions to parts of the system.\n+\n+=== Configuring the Content Directory Monitor\n+\n+.Content Directory Monitor Permissions\n+[IMPORTANT]\n+====\n+When configuring a Content Directory Monitor, make sure to set permissions on the new directory to allow ${branding} to access it.\n+Setting permissions should be done *before* configuring a CDM.\n+Also, don't forget to add permissions for resources outside of the monitored directory.\n+See <<{managing-prefix}configuring_permissions_for_the_content_directory_monitor,Configuring Permissions for the Content Directory Monitor>> for in-depth instructions on configuring permissions.\n+====\n+\n+[NOTE]\n+====\n+If there's a metacard that points to a resource outside of the CDM, then you must configure the <<{developing-prefix}url_resource_reader, URL Resource Reader>> to be able to download it.\n+====\n+\n+.Monitoring Directories In Place\n+[WARNING]\n+====\n+If monitoring a directory in place, then the <<{developing-prefix}url_resource_reader, URL Resource Reader>> must be configured prior to configuring the CDM to allow reading from the configured directory.\n+This allows the ${ddf-catalog} to download the resources.\n+====\n+\n+Configure the CDM from the ${admin-console}:\n+\n+. Navigate to the *${admin-console}*.\n+. Select the *${ddf-catalog}* application.\n+. Select the *Configuration* tab.\n+. Select *Catalog Content Directory Monitor*.\n+\n+See <<{reference-prefix}org.codice.ddf.catalog.content.monitor.ContentDirectoryMonitor,Content Directory Monitor configurations>> for all possible configurations.\n+\n+=== Using the Content Directory Monitor\n+\n+The CDM processes files in a directory, and all of its sub-directories. The CDM offers three options:\n+\n+* Delete\n+* Move\n+* Monitor in place\n+\n+Regardless of the option, the ${branding} takes each file in a monitored directory structure and creates a metacard for it. The metacard is linked to the file. The behavior of each option is given below.\n+\n+.Delete\n+* Copies the file into the Content Repository.\n+* Creates a metacard in the Catalog from the file.\n+* *Erases* the original file from the monitored directory.\n+\n+.Move\n+* Copies the file into the directory `.\\ingested` *(this will double the disk space used)*\n+* Copies the file into the Content Repository.\n+* Creates a metacard in the Catalog from the file.\n+* *Erases* the original file from the monitored directory.\n+\n+.Monitor in place\n+* Creates a metacard in the Catalog from the file.\n+* Creates a reference from the metacard to the original file in the monitored directory.\n+* If the original file is deleted, the metacard is removed from the Catalog.\n+* If the original file is modified, the metacard is updated to reflect the new content.\n+* If the original file is renamed, the old metacard is deleted and a new metacard is created.\n+\n+.Parallel Processing\n+The CDM supports parallel processing of files (up to 8 files processed concurrently).  This is configured by setting the number of *Maximum Concurrent Files* in the configuration.  A maximum of 8 is imposed to protect system resources.\n+\n+.Read Lock\n+When the CDM is set up, the directory specified is continuously scanned, and files are locked for processing based on the *ReadLock Time Interval*.  This does not apply to the *Monitor in place* processing directive.  Files will not be ingested without having a ReadLock that has observed no change in the file size.\n+This is done so that files that are in transit will not be ingested prematurely. The interval should be dependent on the speed of the copy to the directory monitor (ex. network drive vs local disk).\n+For local files, the default value of 500 milliseconds is recommended. The recommended interval for network drives is 1000 - 2000 milliseconds.  If the value provided is less than 100, 100 milliseconds will be used.\n+It is also recommended that the *ReadLock Time Interval* be set to a lower amount of time when the *Maximum Concurrent Files* is set above 1 so that files are\n+locked in a timely manner and processed as soon as possible.  When a higher *ReadLock Time Interval* is set, the time it takes for files to be processed is increased.\n+\n+.Attribute Overrides\n+The CDM supports setting metacard attributes directly when ${branding} ingests a file. Custom overrides are entered in the form:\n+\n+`*attribute-name=attribute-value*`\n+\n+For example, to set the contact email for all metacards, add the attribute override:\n+\n+`*contact.point-of-contact-email=doctor@clinic.com*`\n+\n+Each override sets the value of a single metacard attribute. To set the value of an additional attribute, select the \"plus\"\n+ icon in the UI. This creates an empty line for the entry.\n+\n+To set multi-valued attributes, use a separate override for each value. For example, to add the keywords _PPI_ and _radiology_ to each metacard, add the custom attribute overrides:\n+\n+`*topic.keyword=PPI*` +\n+`*topic.keyword=radiology*`\n+\n+Attributes will only be overridden if they are part of the <<{integrating-prefix}metacard_type, metacard type>> or are <<{developing-prefix}attribute_injection_definition,injected>>.\n+\n+All attributes in the <<{metadata-prefix}catalog_taxonomy_definitions, catalog taxonomy tables>> are injected into all metacards by default and can be overridden.\n+\n+[IMPORTANT]\n+====\n+If an overridden attribute is not part of the <<{integrating-prefix}metacard_type, metacard type>> or <<{developing-prefix}attribute_injection_definition,injected>> the attribute will not be added to the metacard.\n+====\n+\n+For example, if the metacard type contains contact email,\n+\n+`*contact.point-of-contact-email*`\n+\n+but the value is not currently set, adding an attribute override will set the attribute value.\n+To override attributes that are not part of the metacard type, <<{developing-prefix}attribute_injection_definition,attribute injection>> can be used.\n+\n+.Blacklist\n+The CDM blacklist uses the \"bad.files\" and \"bad.file.extensions\" properties from the custom.system.properties file in \"etc/\" in order to prevent\n+malicious or unwanted data from being ingested into DDF.  While the CDM automatically omits hidden files, this is particularly useful when\n+an operating system automatically generates files that should not be ingested.  One such example of this is \"thumbs.db\" in Windows.\n+This file type and any temporary files are included in the blacklist.\n+\n+.Errors\n+If the CDM fails to read the file, an error will be logged in the CDM log. If the directory monitor is\n+configured to *Delete* or *Move*, the original file is also moved to the `\\.errors` directory.\n+\n+.Logging\n+CDM will send logs detailing the processing of files in the directory to `cdm.log`.\n+\n+[TIP]\n+====\n+The log level for CDM can be set with the following console command. At the DEBUG level, CDM will periodically log the list of files still currently processing.\n+----\n+log:set DEBUG cdmLogger\n+----\n+====\n+\n+.Timeout\n+CDM will expire files whose processing times exceed a specified threshold. By default, that threshold is 5 minutes. After expiration, CDM will not attempt to ingest the file until it changes have been made.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjc5MDMxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0NTo0NVrOHMJwTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo0NTo0NVrOHMJwTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUwNDc4Mw==", "bodyText": "Has this code been run through the formatter?", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482504783", "createdAt": "2020-09-02T21:45:45Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -283,12 +326,40 @@ else if (!entry.hasChildren()) {\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitDelete(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n-    if (success) {\n-      entry.getParent().ifPresent(e -> e.removeChild(entry));\n-      entry.destroy();\n+    LOGGER.trace(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n+    try {\n+      if (success) {\n+        entry.getParent().ifPresent(e -> e.removeChild(entry));\n+        entry.destroy();\n+        LOGGER.debug(\n+            \"{} was removed from {}\",\n+            entry.getName(),\n+            entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+      } else {\n+        LOGGER.debug(\"Delete task failed for {}\", entry.getName());\n+      }\n+    } finally {\n+      onFinish(entry);\n     }\n-    onFinish();\n+  }\n+\n+  /**\n+   * Verify whether {@link File} has exceeded the maximum processing time AND has not been updated\n+   *\n+   * @param file\n+   * @return true if the file has expired on processing before and has not been updated\n+   */\n+  private boolean expiredNotUpdated(File file) {\n+    if (file.isDirectory() || !expiredFiles.containsKey(file.getPath())) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjg1MDg5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1ODoxMVrOHMKXuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMTo1ODoxMVrOHMKXuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUxNDg3Mw==", "bodyText": "Is LOGGING the right term here? It seems like maybe HEALTH_CHECK or INGEST_CHECK might be clearer.", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482514873", "createdAt": "2020-09-02T21:58:11Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -49,15 +58,22 @@\n  */\n public class AsyncFileAlterationObserver {\n \n-  private static final Logger LOGGER = LoggerFactory.getLogger(AsyncFileAlterationObserver.class);\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CDM_LOGGER_NAME);\n+\n+  private static final int LOGGING_TIME_DELAY = 500;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxNjg5NDE2OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowNzozMlrOHMK0Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQyMjowNzozMlrOHMK0Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjUyMjEzNA==", "bodyText": "If we are setting this here we should probably not set it above on ling 98", "url": "https://github.com/codice/ddf/pull/6250#discussion_r482522134", "createdAt": "2020-09-02T22:07:32Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -115,6 +121,7 @@ public ContentDirectoryMonitor(\n     this.maxRetries = maxRetries;\n     this.delayBetweenRetries = delayBetweenRetries;\n     this.configurationExecutor = configurationExecutor;\n+    systemSubjectBinder = new SystemSubjectBinder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a58b1136850c32f29e513801c265891feb3517"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTkxMTg0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo0OTo0NlrOHM6-Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMDoyN1rOHOpLqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTE1MA==", "bodyText": "\u2754 Do you have to do any null checking on entry?", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483311150", "createdAt": "2020-09-03T23:49:46Z", "author": {"login": "shaundmorris"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -179,12 +212,10 @@ AsyncFileEntry getRootFile() {\n    */\n   private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n \n-    processing.incrementAndGet();\n+    processing.add(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNTY3Nw==", "bodyText": "Based on other methods such as doMatch, there hasn't existed any null checking for entry. AsyncFileAlterationObserver:265 for example assumes that entry is non-null, as does the code in checkAndNotify. I could do null checking here, but I'm not sure it's necessary", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485115677", "createdAt": "2020-09-08T18:28:24Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -179,12 +212,10 @@ AsyncFileEntry getRootFile() {\n    */\n   private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n \n-    processing.incrementAndGet();\n+    processing.add(entry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTE1MA=="}, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNjg0Mw==", "bodyText": "Doesn't sound like it is necessary, just figured I would suggest a further look there.", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485116843", "createdAt": "2020-09-08T18:30:27Z", "author": {"login": "shaundmorris"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -179,12 +212,10 @@ AsyncFileEntry getRootFile() {\n    */\n   private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n \n-    processing.incrementAndGet();\n+    processing.add(entry);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTE1MA=="}, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTkxNDYxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo1MTowNFrOHM6_rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODozMTozMlrOHOpNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTUzNA==", "bodyText": "\u2754 same question here on checking entry?", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483311534", "createdAt": "2020-09-03T23:51:04Z", "author": {"login": "shaundmorris"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -260,15 +305,14 @@ private void commitMatch(AsyncFileEntry entry, boolean success) {\n    */\n   private void doDelete(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n     if (!entry.isDirectory()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTExNzM4NQ==", "bodyText": "Same comments as above. This code was actually written early last year. I'm assuming they knew whether or not to null check this value, but I could be wrong. I think for now it might be out of the scope of this ticket, but if you think it's worth looking into later let me know!", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485117385", "createdAt": "2020-09-08T18:31:32Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -260,15 +305,14 @@ private void commitMatch(AsyncFileEntry entry, boolean success) {\n    */\n   private void doDelete(AsyncFileEntry entry, final AsyncFileAlterationListener listenerCopy) {\n     if (!entry.isDirectory()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMTUzNA=="}, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMTkyMDQ3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserverTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QyMzo1NDoxOVrOHM7DEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxODo0MDo1MlrOHOpg1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjQwMg==", "bodyText": "\u2754 Do you think is the right balance between test time and consistency? I'm thinking about potentially flakiness based on the sleep time.", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483312402", "createdAt": "2020-09-03T23:54:19Z", "author": {"login": "shaundmorris"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserverTest.java", "diffHunk": "@@ -231,6 +232,78 @@ public void testFileCreation() throws Exception {\n     verify(fileListener, never()).onFileDelete(any(File.class), any(Synchronization.class));\n   }\n \n+  @Test\n+  public void testHangingFileExpires() throws Exception {\n+    System.setProperty(\"org.codice.ddf.catalog.content.monitor.expirationTime\", \"100\");\n+\n+    // observer onCreate method will hang for longer than the set expiration time\n+    doAnswer(\n+            (InvocationOnMock e) -> {\n+              sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzYwMTA5NQ==", "bodyText": "If nothing else, this could be reduced. With an expiration time of 100, a sleep of 150 would work here as well and not hold up the builds as long.", "url": "https://github.com/codice/ddf/pull/6250#discussion_r483601095", "createdAt": "2020-09-04T13:02:18Z", "author": {"login": "aaronilovici"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserverTest.java", "diffHunk": "@@ -231,6 +232,78 @@ public void testFileCreation() throws Exception {\n     verify(fileListener, never()).onFileDelete(any(File.class), any(Synchronization.class));\n   }\n \n+  @Test\n+  public void testHangingFileExpires() throws Exception {\n+    System.setProperty(\"org.codice.ddf.catalog.content.monitor.expirationTime\", \"100\");\n+\n+    // observer onCreate method will hang for longer than the set expiration time\n+    doAnswer(\n+            (InvocationOnMock e) -> {\n+              sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjQwMg=="}, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTEyMjI2Mw==", "bodyText": "@aaronilovici I have tried reducing the sleep and expiration time, but reducing it too much causes flakiness. There are other steps deeper within the implementation that can cause a delay between when sleep is executed and when the \"created time\" of the entry is made. That results in the file being processed when it should be expired.", "url": "https://github.com/codice/ddf/pull/6250#discussion_r485122263", "createdAt": "2020-09-08T18:40:52Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserverTest.java", "diffHunk": "@@ -231,6 +232,78 @@ public void testFileCreation() throws Exception {\n     verify(fileListener, never()).onFileDelete(any(File.class), any(Synchronization.class));\n   }\n \n+  @Test\n+  public void testHangingFileExpires() throws Exception {\n+    System.setProperty(\"org.codice.ddf.catalog.content.monitor.expirationTime\", \"100\");\n+\n+    // observer onCreate method will hang for longer than the set expiration time\n+    doAnswer(\n+            (InvocationOnMock e) -> {\n+              sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzMxMjQwMg=="}, "originalCommit": {"oid": "0ad9456ed54bf84f56f47940151b57ab79f9dea8"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4560, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}