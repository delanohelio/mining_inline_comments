{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTM4MzE3", "number": 6339, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0MjoxM1rOEmPN7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoxMjozMVrOEnM-AA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NTMwNjY4OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0MjoxM1rOHWJp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQyMzo1MDo0OFrOHWQK_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4ODkxNg==", "bodyText": "Do we need that second condition, !failedAndNotUpdated(files[c])? It seems like the while loop before this would only satisfy the first condition (c < file length) if line 391's failedAndNotUpdated were false", "url": "https://github.com/codice/ddf/pull/6339#discussion_r492988916", "createdAt": "2020-09-22T19:42:13Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -383,7 +387,12 @@ private void checkAndNotify(\n \n     int c = 0;\n     for (final AsyncFileEntry entry : previous) {\n-      if (c < files.length && !expiredNotUpdated(files[c])) {\n+\n+      while (c < files.length && failedAndNotUpdated(files[c])) {\n+        c++;\n+      }\n+\n+      if (c < files.length && !failedAndNotUpdated(files[c])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b0e848d9cd60caf823a6e7585a4bc33fa1f15be"}, "originalPosition": 115}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzA5NTY3Nw==", "bodyText": "Nope. We can remove the whole if statement now.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493095677", "createdAt": "2020-09-22T23:50:48Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -383,7 +387,12 @@ private void checkAndNotify(\n \n     int c = 0;\n     for (final AsyncFileEntry entry : previous) {\n-      if (c < files.length && !expiredNotUpdated(files[c])) {\n+\n+      while (c < files.length && failedAndNotUpdated(files[c])) {\n+        c++;\n+      }\n+\n+      if (c < files.length && !failedAndNotUpdated(files[c])) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4ODkxNg=="}, "originalCommit": {"oid": "2b0e848d9cd60caf823a6e7585a4bc33fa1f15be"}, "originalPosition": 115}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MDA1MDkyOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0ODozNVrOHW3lYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNzo1OTowNlrOHW6Nig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTQxMQ==", "bodyText": "\u2754  This shouldn't occur enough to fill the logs at info level, right?", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493741411", "createdAt": "2020-09-23T16:48:35Z", "author": {"login": "shaundmorris"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java", "diffHunk": "@@ -218,6 +241,32 @@ private void create(final Exchange exchange)\n     processCatalogResponse(createResponse, exchange);\n   }\n \n+  <T extends Operation, R> R processWithTimeout(\n+      long timeout, CatalogFunction<T, R> catalog, T request)\n+      throws InterruptedException, IngestTimeoutException, ExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e02db28bf772793e2756712c7f3b09a4213b16"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc4NDQ1OA==", "bodyText": "It shouldn't but it also shouldn't be info. Changing to trace.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493784458", "createdAt": "2020-09-23T17:59:06Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java", "diffHunk": "@@ -218,6 +241,32 @@ private void create(final Exchange exchange)\n     processCatalogResponse(createResponse, exchange);\n   }\n \n+  <T extends Operation, R> R processWithTimeout(\n+      long timeout, CatalogFunction<T, R> catalog, T request)\n+      throws InterruptedException, IngestTimeoutException, ExecutionException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTQxMQ=="}, "originalCommit": {"oid": "29e02db28bf772793e2756712c7f3b09a4213b16"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTMzMDEwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/IngestTimeoutException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo0NDoxNlrOHXqEfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0MToyOVrOHX0v8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2ODU3NQ==", "bodyText": "This should be in all capital letters.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494568575", "createdAt": "2020-09-24T19:44:16Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/IngestTimeoutException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+public class IngestTimeoutException extends FrameworkProducerException {\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzUzNg==", "bodyText": "Normally you would be right but it needs to be this way for java serialization.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743536", "createdAt": "2020-09-25T04:41:29Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/IngestTimeoutException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+public class IngestTimeoutException extends FrameworkProducerException {\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2ODU3NQ=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTMzNjQyOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/transformer/TransformerTimeoutException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo0NTo1OFrOHXqIQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0MTo0NlrOHX0wRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2OTUzNw==", "bodyText": "This should be in all capital letters.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494569537", "createdAt": "2020-09-24T19:45:58Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/transformer/TransformerTimeoutException.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.transformer;\n+\n+public class TransformerTimeoutException extends RuntimeException {\n+\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzYyMg==", "bodyText": "See previous comment", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743622", "createdAt": "2020-09-25T04:41:46Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/transformer/TransformerTimeoutException.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.transformer;\n+\n+public class TransformerTimeoutException extends RuntimeException {\n+\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2OTUzNw=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTM0ODE5OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo0OToyOFrOHXqPUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0MjoxNVrOHX0w2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTM0NA==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571344", "createdAt": "2020-09-24T19:49:28Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0Mzc2OA==", "bodyText": "Added verification", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743768", "createdAt": "2020-09-25T04:42:15Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTM0NA=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTM1MDIwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1MDowM1rOHXqQfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0MjoyOFrOHX0w_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTY0Ng==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571646", "createdAt": "2020-09-24T19:50:03Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzgwNg==", "bodyText": "added verification", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743806", "createdAt": "2020-09-25T04:42:28Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTY0Ng=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTM1MTIxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1MDoyMVrOHXqRHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0MjozNlrOHX0xGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTgwNw==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571807", "createdAt": "2020-09-24T19:50:21Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerUpdateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerDelete() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzgzNQ==", "bodyText": "added verification", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743835", "createdAt": "2020-09-25T04:42:36Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerUpdateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerDelete() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTgwNw=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTM1NDUyOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo1MToxM1rOHXqS9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0Mjo1MlrOHX0xXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MjI3Ng==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494572276", "createdAt": "2020-09-24T19:51:13Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java", "diffHunk": "@@ -136,4 +166,30 @@ public void testMessageInputStreamIsClosed() throws Exception {\n     inputTransformerProducer.transform(message, \"\", \"\", mimeTypeToTransformerMapper);\n     verify(is).close();\n   }\n+\n+  @Test(expected = TransformerTimeoutException.class)\n+  public void testTransformTimeout() throws Exception {\n+    setupCatalogEndpoint(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(\"timeoutMilliseconds\")).thenReturn(1000L);\n+\n+    inputTransformerProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testTransformNoTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0MzkwMA==", "bodyText": "added verification", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494743900", "createdAt": "2020-09-25T04:42:52Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java", "diffHunk": "@@ -136,4 +166,30 @@ public void testMessageInputStreamIsClosed() throws Exception {\n     inputTransformerProducer.transform(message, \"\", \"\", mimeTypeToTransformerMapper);\n     verify(is).close();\n   }\n+\n+  @Test(expected = TransformerTimeoutException.class)\n+  public void testTransformTimeout() throws Exception {\n+    setupCatalogEndpoint(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(\"timeoutMilliseconds\")).thenReturn(1000L);\n+\n+    inputTransformerProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testTransformNoTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MjI3Ng=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NTQyNDAwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitorIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoxMjozMVrOHXq9yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNDo0NTo0NFrOHX0z4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzI0MA==", "bodyText": "Is this going to be addressed in this pull request?", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494583240", "createdAt": "2020-09-24T20:12:31Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitorIT.java", "diffHunk": "@@ -179,10 +180,12 @@ public void setup() throws Exception {\n   }\n \n   @Test\n+  @Ignore // Ignoring for now as the test requires a security manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDc0NDU0Ng==", "bodyText": "No. It sounds like it would be a significant effort to enable the security needed for this test now. It is a simple create test that has been throughly tested manually though. If this is ported to a newer branch it would be worth looking into re-enabling it.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494744546", "createdAt": "2020-09-25T04:45:44Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitorIT.java", "diffHunk": "@@ -179,10 +180,12 @@ public void setup() throws Exception {\n   }\n \n   @Test\n+  @Ignore // Ignoring for now as the test requires a security manager", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzI0MA=="}, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4461, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}