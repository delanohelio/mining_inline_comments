{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1Njg0NzQ2", "number": 5843, "title": "DDF-5649 G-6176 Add interface to filter warnings", "bodyText": "What does this PR do?\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This PR supports\nthe user's aforementioned desire in that it:\n\n\nadds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\nwhich implements it filter the warnings of ProcessingDetails of a\nSourceResponse which the Source may receive from the execution of a\nquery and, thereby, produce new ProcessingDetails whose warnings\ncontain only each warning of the original ProcessingDetails which\ndescribes or explains a malfunction which occurred in the execution\nof the query\n\n\nensures that the implementations of SourceResponse not return null\nfrom getProcessingDetails(), in accordance with the dictate of the\nJavadoc of SourceResponse.getProcessingDetails()\n\n\nrefactors some of the code which relates to the changes listed above\n\n\nWho is reviewing it?\n@mojogitoverhere\n@brianfelix\nSelect relevant component teams:\n@codice/core-apis\n@codice/ui\nAsk 2 committers to review/merge the PR and tag them here.\n@jrnorth\n@Lambeaux\nHow should this be tested?\n(will complete soon)\n(but for real this time)\nA full build should sufficiently test the changes made in this PR because these changes merely facilitate functionality which developers will implement in another repository which makes use of ddf. A test of the aforementioned functionality will occur in this other repository. These changes alter nothing about the experience which a user of DDF expects. Therefore, verification that these changes do not cause a failure in any of the tests in ddf suffices as insurance that the effect of these changes aligns with our expectations.\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #5649 (well, this doesn't really fix the issue, but it lays the groundwork for the solution)\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-02-15T06:18:49Z", "url": "https://github.com/codice/ddf/pull/5843", "merged": true, "mergeCommit": {"oid": "e90e843947730fa2d0d8b560cf29a6b1d44a2721"}, "closed": true, "closedAt": "2020-03-09T05:16:04Z", "author": {"login": "kentmorrissey"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcEegPmgBqjMwNDA3MTc0Mjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcK0hdUABqjMxMDMzMzMwODA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87812430cc22c592730a61567ffebf39d336c7bd", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/87812430cc22c592730a61567ffebf39d336c7bd", "committedDate": "2020-02-15T05:54:34Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() from the ProcessingDetails of the\n   SourceResponse which it receives back from a query each warning which\n   describes or explains a malfunction\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "0d2dd15a2639f4ddddebdf284525067a4bcd9901", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/0d2dd15a2639f4ddddebdf284525067a4bcd9901", "committedDate": "2020-02-15T06:40:49Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives back from a query and thereby\n   produce a Set which contains, exclusively, each warning of the\n   ProcessingDetails which describes or explains a malfunction which\n   occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0d2dd15a2639f4ddddebdf284525067a4bcd9901", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/0d2dd15a2639f4ddddebdf284525067a4bcd9901", "committedDate": "2020-02-15T06:40:49Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives back from a query and thereby\n   produce a Set which contains, exclusively, each warning of the\n   ProcessingDetails which describes or explains a malfunction which\n   occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "04353d9d565d85a750df6abfed79199132a7c081", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/04353d9d565d85a750df6abfed79199132a7c081", "committedDate": "2020-02-15T06:56:35Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "04353d9d565d85a750df6abfed79199132a7c081", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/04353d9d565d85a750df6abfed79199132a7c081", "committedDate": "2020-02-15T06:56:35Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports this desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/36ad872a851ae587645d8e86586baa79cf3b6e67", "committedDate": "2020-02-15T07:02:12Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports the user's aforementioned\ndesire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5OTk3MjA2", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-359997206", "createdAt": "2020-02-17T23:01:46Z", "commit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDAzMzYx", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-360003361", "createdAt": "2020-02-17T23:31:06Z", "commit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzozMTowNlrOFqxnXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDowMToxM1rOFqx5EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5NzQwNg==", "bodyText": "\u2753 Do these lines conform to our formatter? If not, we need to format. If so, we should update the formatter. This can make it difficult debugging the result of the condition because there's a chance the stack context gets lost immediately. You don't want the stack to immediately change in the debugger window when this == o evals to true, you'd want an extra frame to verify that flow without losing your stack.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380397406", "createdAt": "2020-02-17T23:31:06Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;\n+    return Objects.equals(sourceId, that.sourceId) && Objects.equals(exception, that.exception);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5Nzg5MQ==", "bodyText": "\u2753 Can this javadoc just be a summary since we iterate each argument down below? This seems unnecessarily verbose.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380397891", "createdAt": "2020-02-17T23:34:30Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5ODE4OA==", "bodyText": "\u2753 Same question here.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380398188", "createdAt": "2020-02-17T23:36:38Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) return that.warnings == null;\n+    if (that.warnings == null) return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMDc0NQ==", "bodyText": "\u2753 Should we test if this list preserves null values as well?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380400745", "createdAt": "2020-02-17T23:53:47Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceResponseImplTest.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+import ddf.catalog.operation.impl.SourceResponseImpl;\n+import org.junit.Test;\n+\n+public class SourceResponseImplTest {\n+\n+  @Test\n+  public void testGetProcessingDetailsDoesNotReturnNull() {\n+    assertThat(\n+        (new SourceResponseImpl(null, null, null, 0, null)).getProcessingDetails(),\n+        is(notNullValue()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTUyMg==", "bodyText": "\u2753 Why not just return a new ProcessingDetails object? Why does this filtering operation have to lose object granularity?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380401522", "createdAt": "2020-02-17T23:58:21Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.\n+   *\n+   * @param details the {@link ProcessingDetails} which contain the {@code warnings} which this\n+   *     method filters\n+   * @return either a {@link Set} composed exclusively of the parameter's filtered {@code warnings}\n+   *     or, if no {@code warnings} pass through the filter, the empty {@link Set}\n+   */\n+  Set<String> filter(ProcessingDetails details);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMTkzNw==", "bodyText": "\u2753 Are we filtering or determining? What happens if this SourceWarningsFilter can't correctly filter? Does it throw an exception? Should we also have a canFilter function as well? Or is this documentation irrelevant because all SourceWarningsFilters can actually filter any ProcessingDetails object it comes across?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380401937", "createdAt": "2020-02-18T00:01:13Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed\n+   * exclusively of the {@code warnings} which pass through the filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDA5Mzk1", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-360009395", "createdAt": "2020-02-18T00:05:58Z", "commit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDowNTo1OFrOFqx7wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwMDowNTo1OFrOFqx7wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDQwMjYyNg==", "bodyText": "\u270f\ufe0f Consider consolidating constructor parameters into one or two domain objects to reduce parameter clutter", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380402626", "createdAt": "2020-02-18T00:05:58Z", "author": {"login": "mazarag2"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/QueryResponseImpl.java", "diffHunk": "@@ -109,19 +111,52 @@ public QueryResponseImpl(\n       boolean closeResultQueue,\n       long hits,\n       Map<String, Serializable> properties) {\n+    this(request, results, closeResultQueue, hits, properties, null);\n+  }\n+\n+  /**\n+   * Instantiates a new {@code QueryResponseImpl} with: a {@link QueryRequest}, a {@link List} of\n+   * {@link Result}s from the {@link QueryRequest}, an indicator of whether to close this {@code\n+   * QueryResponseImpl}'s {@link #queue} of {@link Result}s, the number of distinct {@link Result}s\n+   * which this {@code QueryResponseImpl} contains, a {@link Map} which contains the keys and values\n+   * of this {@code QueryResponseImpl}'s properties, and the {@link Set} of {@link\n+   * ProcessingDetails} from the execution of the {@link QueryRequest}\n+   *\n+   * @param request the {@link QueryRequest}\n+   * @param results the {@link List} of {@link Result}s\n+   * @param shouldCloseResultQueue the indicator of whether to close the {@link #queue}\n+   * @param hits the number of distinct {@link Result}s\n+   * @param properties the {@link Map} of this {@code QueryResponseImpl}'s properties' keys to their\n+   *     values\n+   * @param processingDetails the {@link Set} of {@link ProcessingDetails} of the {@link\n+   *     QueryRequest}'s execution\n+   */\n+  public QueryResponseImpl(\n+      QueryRequest request,\n+      List<Result> results,\n+      boolean shouldCloseResultQueue,\n+      long hits,\n+      Map<String, Serializable> properties,\n+      Set<ProcessingDetails> processingDetails) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/36ad872a851ae587645d8e86586baa79cf3b6e67", "committedDate": "2020-02-15T07:02:12Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction. This\ncommit provides infrastructure which supports the user's aforementioned\ndesire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/73757ebc0045362a1390ac66db5dd00fe0955bf9", "committedDate": "2020-02-17T23:43:24Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNDczNjkz", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-360473693", "createdAt": "2020-02-18T16:14:38Z", "commit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjoxNDozOFrOFrIzXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjoxNDozOFrOFrIzXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc3NzMxMA==", "bodyText": "\u270f\ufe0f this can be a static constant", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380777310", "createdAt": "2020-02-18T16:14:38Z", "author": {"login": "bdeining"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwMDA2MjY0", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-360006264", "createdAt": "2020-02-17T23:47:58Z", "commit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QyMzo0Nzo1OFrOFqxw4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMToyOTozNlrOFrTGAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDM5OTg0MA==", "bodyText": "I think this method's logic can be shortened. to\nreturn (o!=null && getClass() == o.getClass() && super.equals(o)\nThis is because line 91 and 92 do the same comparison that is done in this classes super class.\nIn fact, you could probably omit this method and just rely on the super method (unless you need to know if two compared objects are of the same impl type instead of just the same interface type).", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380399840", "createdAt": "2020-02-17T23:47:58Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36ad872a851ae587645d8e86586baa79cf3b6e67"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwMzQxMw==", "bodyText": "Could probably replace this method with:\nif(o==null || getClass() != o.getClass()){\n\treturn false;\n}\nSourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\nif(this.warnings==null && that.warnings == null){\n\treturn true;\n}else{\n\treturn (this.warnings!=null && that.warnings!=null && this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings));\n}\n\nfor added clarity", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380903413", "createdAt": "2020-02-18T20:00:38Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwNzgwMQ==", "bodyText": "\u270f\ufe0f If you are just checking for equality to null, you can avoid implementing the equals method and replace\nprocessingDetails.equals(null)\n\nwith\nprocessingDetals == null\n\nNote that not implementing the equals method is only if you don't need the equals method for other checks of equality.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380907801", "createdAt": "2020-02-18T20:09:15Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/ProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,212 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.util.Collections;\n+import java.util.List;\n+import org.junit.Test;\n+\n+public class ProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    ProcessingDetails processingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    ProcessingDetails identicalProcessingDetails =\n+        new ProcessingDetailsImpl(\"test source\", exception, \"warning\");\n+    assertThat(processingDetails, is(identicalProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequalityOfSourceIds() {\n+    String sourceId = \"test source\";\n+    String differentSourceId = \"different test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentSourceId =\n+        new ProcessingDetailsImpl(differentSourceId, exception, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentSourceId)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfExceptions() {\n+    String sourceId = \"test source\";\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    Exception differentException =\n+        new UnsupportedQueryException(\"We do not support this query either\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentException =\n+        new ProcessingDetailsImpl(sourceId, differentException, warning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentException)));\n+  }\n+\n+  @Test\n+  public void testInequalityOfWarnings() {\n+    String sourceId = \"test source\";\n+    Exception exception = new UnsupportedQueryException(\"We do not support this query\");\n+    List<String> warning = Collections.singletonList(\"warning\");\n+    List<String> differentWarning = Collections.singletonList(\"different warning\");\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl(sourceId, exception, warning);\n+    ProcessingDetails processingDetailsWithDifferentWarnings =\n+        new ProcessingDetailsImpl(sourceId, exception, differentWarning);\n+    assertThat(processingDetails, is(not(processingDetailsWithDifferentWarnings)));\n+  }\n+\n+  @Test\n+  public void testInequalityWithNull() {\n+    ProcessingDetails processingDetails = new ProcessingDetailsImpl();\n+    assertThat(processingDetails.equals(null), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkwOTM5OQ==", "bodyText": "\u270f\ufe0f If you are just checking for equality to null, you can avoid implementing the equals method and replace\nprocessingDetails.equals(null)\n\nwith\nprocessingDetals == null\n\nNote that not implementing the equals method is only if you don't need the equals method for other checks of equality.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380909399", "createdAt": "2020-02-18T20:12:22Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/test/java/ddf/catalog/operation/SourceProcessingDetailsImplTest.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.operation;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+import ddf.catalog.operation.impl.SourceProcessingDetailsImpl;\n+import java.util.Collections;\n+import org.junit.Test;\n+\n+public class SourceProcessingDetailsImplTest {\n+\n+  @Test\n+  public void testEquality() {\n+    SourceProcessingDetails sourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    SourceProcessingDetails identicalSourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    assertThat(sourceProcessingDetails, is(identicalSourceProcessingDetails));\n+  }\n+\n+  @Test\n+  public void testInequality() {\n+    SourceProcessingDetails sourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"warning\"));\n+    SourceProcessingDetails unequalSourceProcessingDetails =\n+        new SourceProcessingDetailsImpl(Collections.singletonList(\"different warning\"));\n+    assertThat(sourceProcessingDetails, is(not(unequalSourceProcessingDetails)));\n+  }\n+\n+  @Test\n+  public void testInequalityWithNull() {\n+    SourceProcessingDetails sourceProcessingDetails = new SourceProcessingDetailsImpl();\n+    assertThat(sourceProcessingDetails.equals(null), is(false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkxMTE2NA==", "bodyText": "I'm not sure what this javadoc is saying in the sentence: \"If it can, so filter the ProcessingDetails warnings and create...\". The part that confuses me is \"so filter\"", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380911164", "createdAt": "2020-02-18T20:16:13Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api/src/main/java/ddf/catalog/security/SourceWarningsFilter.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.security;\n+\n+import ddf.catalog.operation.ProcessingDetails;\n+import java.util.Set;\n+\n+/**\n+ * <b> This code is experimental. While this interface is functional and tested, it may change or be\n+ * removed in a future version of the library. </b>\n+ */\n+public interface SourceWarningsFilter {\n+\n+  /**\n+   * Get the identifier of this {@code SourceWarningsFilter}\n+   *\n+   * @return either the identifier or, if this {@code SourceWarningsFilter} has no identifier, the\n+   *     empty {@link String}\n+   */\n+  String getId();\n+\n+  /**\n+   * Determine whether this {@code SourceWarningsFilter} can correctly filter out unreadable or\n+   * useless {@code warnings} contained in the {@link ProcessingDetails} passed to it. If it can, so\n+   * filter the {@link ProcessingDetails}'s {@code warnings} and create a {@link Set} composed", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MjgwNQ==", "bodyText": "Rename the variable \"that\" to increase readability.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380942805", "createdAt": "2020-02-18T21:23:06Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +83,20 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    if (!super.equals(o)) return false;\n+    ProcessingDetailsImpl that = (ProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0MzExMQ==", "bodyText": "Rename the variable \"that\" to increase readability.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380943111", "createdAt": "2020-02-18T21:23:46Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) return true;\n+    if (o == null || getClass() != o.getClass()) return false;\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDk0NTkyMQ==", "bodyText": "Braces should be added to conform to google style as listed on the \"Coding Standards\" page on confluence. This statement applies to the entire PR.\n\n4.1.1 Braces are used where optional\nBraces are used with if, else, for, do and while statements, even when the body is empty or contains only a single statement.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r380945921", "createdAt": "2020-02-18T21:29:36Z", "author": {"login": "brianfelix"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +38,28 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwODE3NTU5", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-360817559", "createdAt": "2020-02-19T03:12:21Z", "commit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73757ebc0045362a1390ac66db5dd00fe0955bf9", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/73757ebc0045362a1390ac66db5dd00fe0955bf9", "committedDate": "2020-02-17T23:43:24Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter() the warnings of the ProcessingDetails of\n   the SourceResponse which it receives from the execution of a query\n   and, thereby, produce a Set which contains, exclusively, each warning\n   of the ProcessingDetails which describes or explains a malfunction\n   which occurred in the execution of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "committedDate": "2020-02-28T05:21:23Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of the ProcessingDetails of\n   the SourceResponse which the Source receives from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3NDgzMDQ4", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-367483048", "createdAt": "2020-03-02T19:54:40Z", "commit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxOTo1NDo0MFrOFwtIIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQyMDowMDoxOVrOFwtUAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNTMyOQ==", "bodyText": "\u2753 Why are null semantics leaking into the equals(..) method? Shouldn't the constructor enforce that, worst case, the list of warnings are empty?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386615329", "createdAt": "2020-03-02T19:54:40Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ==", "bodyText": "\u2753 You're defining equality as this.warnings being a superset of that.warnings, is that really what you want?", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386616459", "createdAt": "2020-03-02T19:56:41Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNzI1NA==", "bodyText": "\u2753 Can we be consistent with our equals methods? The other object defers to super.equals(..) and this one basically re-implements it.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386617254", "createdAt": "2020-03-02T19:58:21Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxODM2OQ==", "bodyText": "\u2757\ufe0f Verify this is not a bug.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r386618369", "createdAt": "2020-03-02T20:00:19Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -36,6 +37,33 @@ public SourceProcessingDetailsImpl(List<String> warnings) {\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (this == o) {\n+      return true;\n+    }\n+\n+    if (o == null || getClass() != o.getClass()) {\n+      return false;\n+    }\n+\n+    SourceProcessingDetailsImpl that = (SourceProcessingDetailsImpl) o;\n+    if (this.warnings == null) {\n+      return that.warnings == null;\n+    }\n+\n+    if (that.warnings == null) {\n+      return false;\n+    }\n+\n+    return this.warnings.size() == that.warnings.size() && this.warnings.containsAll(that.warnings);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjYxNjQ1OQ=="}, "originalCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd"}, "originalPosition": 31}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/80e36c6e9e003e4cb10a6df2fafe999bbbdb8fdd", "committedDate": "2020-02-28T05:21:23Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of the ProcessingDetails of\n   the SourceResponse which the Source receives from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "committedDate": "2020-03-02T20:31:12Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY4MzAyMDc2", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-368302076", "createdAt": "2020-03-03T20:31:26Z", "commit": {"oid": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/8e20967291c43f1c24fd51d58c90d6c9b3dcbca4", "committedDate": "2020-03-02T20:31:12Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - enables that a SourceResponse contain the ProcessingDetails which a\n   Source generates via a query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "cf426512e0dd6d5e924f340b3367c4c27cb446f7", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/cf426512e0dd6d5e924f340b3367c4c27cb446f7", "committedDate": "2020-03-05T00:53:11Z", "message": "DDF-5649 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains on this earth or any other."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf426512e0dd6d5e924f340b3367c4c27cb446f7", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/cf426512e0dd6d5e924f340b3367c4c27cb446f7", "committedDate": "2020-03-05T00:53:11Z", "message": "DDF-5649 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains on this earth or any other."}, "afterCommit": {"oid": "546a5a32eca8b6e777ae74a13c22b00c55cb4b93", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/546a5a32eca8b6e777ae74a13c22b00c55cb4b93", "committedDate": "2020-03-05T03:02:18Z", "message": "DDF-5649 GSR-6176 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "546a5a32eca8b6e777ae74a13c22b00c55cb4b93", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/546a5a32eca8b6e777ae74a13c22b00c55cb4b93", "committedDate": "2020-03-05T03:02:18Z", "message": "DDF-5649 GSR-6176 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains"}, "afterCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "committedDate": "2020-03-05T05:38:29Z", "message": "DDF-5649 GSR-6176 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5OTEzNTQw", "url": "https://github.com/codice/ddf/pull/5843#pullrequestreview-369913540", "createdAt": "2020-03-05T21:06:00Z", "commit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMTowNjowMFrOFykJLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQyMToxMDozM1rOFykRYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTI5NA==", "bodyText": "\u270f\ufe0f This is fine, but it hides the fact that all you're really doing is a reference equality comparison. Unless of course this object's inheritance hierarchy changed. Better to be explicit.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388565294", "createdAt": "2020-03-05T21:06:00Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/SourceProcessingDetailsImpl.java", "diffHunk": "@@ -13,29 +13,57 @@\n  */\n package ddf.catalog.operation.impl;\n \n+import static org.apache.commons.lang.Validate.notNull;\n+\n import ddf.catalog.operation.SourceProcessingDetails;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Objects;\n \n /**\n  * The SourceProcessingDetailsImpl class represents a default implementation of a {@link\n  * SourceProcessingDetails} to provide {@link Source} warnings.\n  */\n public class SourceProcessingDetailsImpl implements SourceProcessingDetails {\n \n-  protected List<String> warnings = null;\n+  protected List<String> warnings;\n \n-  /** Instantiates a new SourceProcessingDetailsImpl. */\n-  public SourceProcessingDetailsImpl() {}\n+  /** Instantiates a new SourceProcessingDetailsImpl */\n+  public SourceProcessingDetailsImpl() {\n+    warnings = new ArrayList<>();\n+  }\n \n   /**\n    * Instantiates a new SourceProcessingDetailsImpl.\n    *\n    * @param warnings the warnings associated with the {@link Source}\n    */\n   public SourceProcessingDetailsImpl(List<String> warnings) {\n+    notNull(\n+        warnings, \"the constructor of SourceProcessingDetailsImpl does not accept null warnings\");\n     this.warnings = warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (super.equals(o)) {\n+      return true;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NTcxOA==", "bodyText": "\u270f\ufe0f Same here. It's fine for now. But it adds an unnecessary level of indirection.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388565718", "createdAt": "2020-03-05T21:06:59Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;\n   }\n \n+  @Override\n+  public boolean equals(Object o) {\n+    if (!super.equals(o)) {\n+      return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODU2NzM5Mw==", "bodyText": "\u270f\ufe0f Could use Collections.singletonList(...) instead.", "url": "https://github.com/codice/ddf/pull/5843#discussion_r388567393", "createdAt": "2020-03-05T21:10:33Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-api-impl/src/main/java/ddf/catalog/operation/impl/ProcessingDetailsImpl.java", "diffHunk": "@@ -82,6 +93,21 @@ public ProcessingDetailsImpl(SourceProcessingDetails details, String sourceId) {\n     return warnings;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/c7a21ab34ee7bcfd33ac1ab0ef8e47c46a203bbc", "committedDate": "2020-03-05T05:38:29Z", "message": "DDF-5649 GSR-6176 REVIEW THIS COMMIT IN PARTICULAR\n\nand then squash it into the previous commit so that no record\nof this message remains"}, "afterCommit": {"oid": "8007ee9288503a8e6258cfbd1451cdf3f82c8121", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/8007ee9288503a8e6258cfbd1451cdf3f82c8121", "committedDate": "2020-03-05T23:47:53Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "602e93375c7dde776a761d65d30e511bdd7930ac", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/602e93375c7dde776a761d65d30e511bdd7930ac", "committedDate": "2020-03-05T23:54:29Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - refactors some of the code which relates to the changes listed above"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8007ee9288503a8e6258cfbd1451cdf3f82c8121", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/8007ee9288503a8e6258cfbd1451cdf3f82c8121", "committedDate": "2020-03-05T23:47:53Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - refactors some of the code which relates to the changes listed above"}, "afterCommit": {"oid": "602e93375c7dde776a761d65d30e511bdd7930ac", "author": {"user": {"login": "kentmorrissey", "name": null}}, "url": "https://github.com/codice/ddf/commit/602e93375c7dde776a761d65d30e511bdd7930ac", "committedDate": "2020-03-05T23:54:29Z", "message": "DDF-5649 G-6176 Add interface to filter warnings\n\nIn response to a malfunction of a query which the user runs, the user\nwould like a message which describes or explains the malfunction so that\nthe user can more easily resolve the malfunction. This commit supports\nthe user's aforementioned desire in that it:\n\n - adds an interface\u2014SourceWarningsFilter\u2014which allows that a Source\n   which implements it filter the warnings of ProcessingDetails of a\n   SourceResponse which the Source may receive from the execution of a\n   query and, thereby, produce new ProcessingDetails whose warnings\n   contain only each warning of the original ProcessingDetails which\n   describes or explains a malfunction which occurred in the execution\n   of the query\n\n - ensures that the implementations of SourceResponse not return null\n   from getProcessingDetails(), in accordance with the dictate of the\n   Javadoc of SourceResponse.getProcessingDetails()\n\n - refactors some of the code which relates to the changes listed above"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 28, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}