{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzOTIyMTM5", "number": 6448, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODowMDo1NFrOFORQAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODowMDo1NFrOFORQAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUwNTA3MDEwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xM1QxODowMDo1NFrOIS7tlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xOVQxNzozNjo0NlrOIWZp7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcyMzYwNg==", "bodyText": "\u270f\ufe0f Consider:\n    this.validators =\n        Optional.ofNullable(validators).orElse(Collections.emptyList()).stream()\n            .sorted(Comparator.comparingInt(Object::hashCode))\n            .collect(Collectors.toList());```", "url": "https://github.com/codice/ddf/pull/6448#discussion_r556723606", "createdAt": "2021-01-13T18:00:54Z", "author": {"login": "leo-sakh"}, "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "diffHunk": "@@ -21,16 +21,28 @@\n import ddf.catalog.validation.violation.ValidationViolation;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n \n public class MatchAnyValidator implements AttributeValidator {\n   private final List<AttributeValidator> validators;\n \n   public MatchAnyValidator(List<AttributeValidator> validators) {\n-    this.validators = validators;\n+    if (validators == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bb62d51fa3271a2e9fe0a01a3bea757781aad64"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU2MDM1OTkxOQ==", "bodyText": "I think we will go with what we have for now, at least to keep it same with 2.19.x version of DDF.", "url": "https://github.com/codice/ddf/pull/6448#discussion_r560359919", "createdAt": "2021-01-19T17:36:46Z", "author": {"login": "frnkshin"}, "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "diffHunk": "@@ -21,16 +21,28 @@\n import ddf.catalog.validation.violation.ValidationViolation;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.stream.Collectors;\n import org.apache.commons.collections.CollectionUtils;\n+import org.apache.commons.lang.builder.EqualsBuilder;\n+import org.apache.commons.lang.builder.HashCodeBuilder;\n \n public class MatchAnyValidator implements AttributeValidator {\n   private final List<AttributeValidator> validators;\n \n   public MatchAnyValidator(List<AttributeValidator> validators) {\n-    this.validators = validators;\n+    if (validators == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NjcyMzYwNg=="}, "originalCommit": {"oid": "8bb62d51fa3271a2e9fe0a01a3bea757781aad64"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4413, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}