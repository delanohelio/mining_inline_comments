{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk0NDI2NTUz", "number": 6352, "title": "Address some SonarQube findings and missing unit tests in catalog-solr-offline-gazetteer", "bodyText": "What does this PR do?\nAddresses SonarQube findings in BuildGazetteerSuggesterIndexCommand\nhttps://sonarcloud.io/project/issues?id=ddf&issues=AXPkHocw60FsyeUshtpL&open=AXPkHocw60FsyeUshtpL\n\n\n\nWho is reviewing it?\n@rzwiefel @blen-desta @garrettfreibott @SmithJosh @bakejeyner @stustison\nHow should this be tested?\nConfirm that the offline-solr-gazetteer commands still work\n\nsee the Standalone Solr Offline Gazetteer Feature section in the docs\nsee #6153\n\nChecklist:\n\n[n/a] Documentation Updated\n[n/a] Update / Add Threat Dragon models\n Update / Add Unit Tests\n[n/a] Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-09-28T21:59:49Z", "url": "https://github.com/codice/ddf/pull/6352", "merged": true, "mergeCommit": {"oid": "217b370a57a1ddc4236423ccd8d49a86cd7972a5"}, "closed": true, "closedAt": "2020-10-01T17:59:43Z", "author": {"login": "emmberk"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNa7EVAFqTQ5NzkzMDEwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdOEWNLgFqTQ5OTg1MDMxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTMwMTAx", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-497930101", "createdAt": "2020-09-28T22:00:17Z", "commit": {"oid": "99dc4920674f517ce017191d8a47ad9b7fb700af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjowMDoxOFrOHZRVag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQyMjowMDoxOFrOHZRVag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDQ1OA==", "bodyText": "NOTE: This will be easier to review if you ignore whitespace in the diff.", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496260458", "createdAt": "2020-09-28T22:00:18Z", "author": {"login": "emmberk"}, "path": "catalog/solr/catalog-solr-offline-gazetteer/pom.xml", "diffHunk": "@@ -14,8 +14,8 @@\n \n  -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99dc4920674f517ce017191d8a47ad9b7fb700af"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc521e8f64ea68916b97ed74ee2d5b60e376745f", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/dc521e8f64ea68916b97ed74ee2d5b60e376745f", "committedDate": "2020-09-28T22:04:55Z", "message": "Address SonarQube findings in BuildGazetteerSuggesterIndexCommand and add unit tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3OTM5ODQy", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-497939842", "createdAt": "2020-09-28T22:21:43Z", "commit": {"oid": "dc521e8f64ea68916b97ed74ee2d5b60e376745f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344f091a41a10a70d56148d6ba7b29064ffb2af4", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/344f091a41a10a70d56148d6ba7b29064ffb2af4", "committedDate": "2020-09-29T02:21:21Z", "message": "Extract common code to get the SolrClient and check the availability\n\ncleanup\n\nWIP Add force back"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MDIwNzY0", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-498020764", "createdAt": "2020-09-29T02:26:39Z", "commit": {"oid": "344f091a41a10a70d56148d6ba7b29064ffb2af4"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjoyNjozOVrOHZWQ8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMjoyNjozOVrOHZWQ8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjM0MTIzMg==", "bodyText": "\u2757 @emmberk reminder to add this back in", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496341232", "createdAt": "2020-09-29T02:26:39Z", "author": {"login": "emmberk"}, "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/SyncCatalogCommand.java", "diffHunk": "@@ -54,62 +45,25 @@\n     scope = \"offline-solr-gazetteer\",\n     name = \"synccatalog\",\n     description = \"Syncs all catalog items to the solr gazetteer collection\")\n-public class SyncCatalogCommand implements Action {\n+public class SyncCatalogCommand extends AbstractSolrClientCommand {\n \n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(RemoveAllOfflineSolrGazetteerCommand.class);\n-  public static final int PARTITION_SIZE = 256;\n+  private static final int PARTITION_SIZE = 256;\n \n-  @Reference private SolrClientFactory clientFactory;\n-\n-  @Reference private Session session;\n-\n-  @Reference private CatalogFramework catalogFramework;\n-  @Reference private FilterBuilder filterBuilder;\n-  @Reference private Security security;\n-\n-  private final RetryPolicy retryPolicy =\n-      new RetryPolicy()\n-          .retryOn(ImmutableList.of(UnavailableSolrException.class, SolrServerException.class))\n-          .withMaxDuration(5, TimeUnit.SECONDS)\n-          .withBackoff(50, 1_000, TimeUnit.MILLISECONDS);\n+  @Reference CatalogFramework catalogFramework;\n+  @Reference FilterBuilder filterBuilder;\n \n   @Override\n-  public Object execute() throws Exception {\n-    return security.runWithSubjectOrElevate(this::executeWithSubject);\n-  }\n-\n-  public Object executeWithSubject() throws Exception {\n-    SolrClient solrClient = clientFactory.newClient(COLLECTION_NAME);\n-\n-    Boolean response =\n-        Failsafe.with(\n-                new RetryPolicy()\n-                    .retryWhen(false)\n-                    .withMaxDuration(5, TimeUnit.SECONDS)\n-                    .withBackoff(50, 1_000, TimeUnit.MILLISECONDS))\n-            .get(() -> solrClient.isAvailable());\n-    if (response == null || !response) {\n-      LOGGER.error(\"Could not contact solr to remove all\");\n-      session.getConsole().println(\"Could not contact solr to remove all, exiting.\");\n-      return null;\n-    }\n-\n+  void executeWithSolrClient(SolrClient solrClient) throws SolrServerException, IOException {\n     Iterable<Result> iterable =\n         ResultIterable.resultIterable(catalogFramework, getGazetteerFilter());\n \n-    session.getConsole().println(\"Starting sync...\");\n+    console.println(\"Starting sync...\");\n     long counter = 0;\n     Instant start = Instant.now();\n \n     for (List<Result> results : Iterables.partition(iterable, PARTITION_SIZE)) {\n-      if (Thread.interrupted()) {\n-        LOGGER.info(\"Catalog sync interrupted early, exiting\");\n-        session.getConsole().println(\"Catalog sync interrupted, exiting\");\n-        Thread.currentThread().interrupt();\n-        throw new InterruptedException();\n-      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "344f091a41a10a70d56148d6ba7b29064ffb2af4"}, "originalPosition": 94}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a19a137bab1743b4e3a05937b9d4872c464e425", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/1a19a137bab1743b4e3a05937b9d4872c464e425", "committedDate": "2020-09-29T17:26:00Z", "message": "Add back in Thread.interrupted() check in SyncCatalogCommand"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzIzMDg1", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-498723085", "createdAt": "2020-09-29T17:32:44Z", "commit": {"oid": "1a19a137bab1743b4e3a05937b9d4872c464e425"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozMjo0NFrOHZ5ckw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozMjo0NFrOHZ5ckw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxNzY1MQ==", "bodyText": "I extracted the force option and the logic to check if the SolrClient is available to this class. I also made this extend SubjectCommands so that the runWithSubjectOrElevate logic didn't need to be included in these classes.", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496917651", "createdAt": "2020-09-29T17:32:44Z", "author": {"login": "emmberk"}, "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/AbstractSolrClientCommand.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.offlinegazetteer;\n+\n+import static ddf.catalog.solr.offlinegazetteer.GazetteerConstants.COLLECTION_NAME;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.codice.ddf.commands.catalog.SubjectCommands;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.client.solrj.UnavailableSolrException;\n+import org.codice.solr.factory.SolrClientFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSolrClientCommand extends SubjectCommands {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSolrClientCommand.class);\n+\n+  @Reference protected SolrClientFactory clientFactory;\n+\n+  @Option(\n+      name = \"--force\",\n+      aliases = \"-f\",\n+      description = \"Force the command without a confirmation message.\")\n+  protected boolean force = false;\n+\n+  @SuppressWarnings({\"java:S2139\" /* Logging and rethrowing failure exception intentionally */})\n+  @Override\n+  protected Object executeWithSubject() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a19a137bab1743b4e3a05937b9d4872c464e425"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NzIzNjEw", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-498723610", "createdAt": "2020-09-29T17:33:26Z", "commit": {"oid": "1a19a137bab1743b4e3a05937b9d4872c464e425"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozMzoyNlrOHZ5eQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQxNzozMzoyNlrOHZ5eQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjkxODA4MA==", "bodyText": "Note that this can throw InterruptedException, which just bubbles up.", "url": "https://github.com/codice/ddf/pull/6352#discussion_r496918080", "createdAt": "2020-09-29T17:33:26Z", "author": {"login": "emmberk"}, "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/AbstractSolrClientCommand.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.offlinegazetteer;\n+\n+import static ddf.catalog.solr.offlinegazetteer.GazetteerConstants.COLLECTION_NAME;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.codice.ddf.commands.catalog.SubjectCommands;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.client.solrj.UnavailableSolrException;\n+import org.codice.solr.factory.SolrClientFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSolrClientCommand extends SubjectCommands {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSolrClientCommand.class);\n+\n+  @Reference protected SolrClientFactory clientFactory;\n+\n+  @Option(\n+      name = \"--force\",\n+      aliases = \"-f\",\n+      description = \"Force the command without a confirmation message.\")\n+  protected boolean force = false;\n+\n+  @SuppressWarnings({\"java:S2139\" /* Logging and rethrowing failure exception intentionally */})\n+  @Override\n+  protected Object executeWithSubject() throws Exception {\n+    if (!force) {\n+      String answer =\n+          session.readLine(\"Are you sure you want to continue?(y/n)\", ' ').toLowerCase();\n+      if (!(\"y\".equals(answer) || \"yes\".equals(answer))) {\n+        printSuccessMessage(\"Aborting.\");\n+        return null;\n+      }\n+    }\n+\n+    try (SolrClient solrClient = clientFactory.newClient(COLLECTION_NAME)) {\n+      Callable<Boolean> booleanCallable = solrClient::isAvailable;\n+      boolean response =\n+          Failsafe.with(\n+                  new RetryPolicy()\n+                      .retryWhen(false)\n+                      .withMaxDuration(5, TimeUnit.SECONDS)\n+                      .withBackoff(25, 1_000, TimeUnit.MILLISECONDS))\n+              .get(booleanCallable);\n+      if (!response) {\n+        LOGGER.error(\"Could not contact solr\");\n+        printErrorMessage(\"Could not contact solr, exiting.\");\n+        return null;\n+      }\n+      executeWithSolrClient(solrClient);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a19a137bab1743b4e3a05937b9d4872c464e425"}, "originalPosition": 71}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2d3acb957ef2898d5ab30d61c808def63c83f86", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/b2d3acb957ef2898d5ab30d61c808def63c83f86", "committedDate": "2020-09-29T17:40:50Z", "message": "Remove unnecessary try-catch"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd8844ab9ee84e382dc76c12b3964e3d8bac4553", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/bd8844ab9ee84e382dc76c12b3964e3d8bac4553", "committedDate": "2020-09-29T20:17:46Z", "message": "Remove success print color when aborting"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTQ0NDMy", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-498944432", "createdAt": "2020-09-29T22:22:49Z", "commit": {"oid": "bd8844ab9ee84e382dc76c12b3964e3d8bac4553"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjoyMjo0OVrOHaERfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQyMjoyNToyM1rOHaEVcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NTAzOQ==", "bodyText": "\ud83e\udd2f", "url": "https://github.com/codice/ddf/pull/6352#discussion_r497095039", "createdAt": "2020-09-29T22:22:49Z", "author": {"login": "bakejeyner"}, "path": "catalog/solr/catalog-solr-offline-gazetteer/pom.xml", "diffHunk": "@@ -14,8 +14,8 @@\n \n  -->\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjI2MDQ1OA=="}, "originalCommit": {"oid": "99dc4920674f517ce017191d8a47ad9b7fb700af"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzA5NjA0OA==", "bodyText": "\u270f\ufe0f Nitpick: could use equalsIgnoreCase here instead.", "url": "https://github.com/codice/ddf/pull/6352#discussion_r497096048", "createdAt": "2020-09-29T22:25:23Z", "author": {"login": "bakejeyner"}, "path": "catalog/solr/catalog-solr-offline-gazetteer/src/main/java/ddf/catalog/solr/offlinegazetteer/AbstractSolrClientCommand.java", "diffHunk": "@@ -0,0 +1,92 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.solr.offlinegazetteer;\n+\n+import static ddf.catalog.solr.offlinegazetteer.GazetteerConstants.COLLECTION_NAME;\n+\n+import java.io.IOException;\n+import java.util.concurrent.Callable;\n+import java.util.concurrent.TimeUnit;\n+import net.jodah.failsafe.Failsafe;\n+import net.jodah.failsafe.RetryPolicy;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.solr.client.solrj.SolrServerException;\n+import org.codice.ddf.commands.catalog.SubjectCommands;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.client.solrj.UnavailableSolrException;\n+import org.codice.solr.factory.SolrClientFactory;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSolrClientCommand extends SubjectCommands {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(AbstractSolrClientCommand.class);\n+\n+  @Reference protected SolrClientFactory clientFactory;\n+\n+  @Option(\n+      name = \"--force\",\n+      aliases = \"-f\",\n+      description = \"Force the command without a confirmation message.\")\n+  protected boolean force = false;\n+\n+  @SuppressWarnings({\"java:S2139\" /* Logging and rethrowing failure exception intentionally */})\n+  @Override\n+  protected Object executeWithSubject() throws Exception {\n+    if (!force) {\n+      String answer =\n+          session.readLine(\"Are you sure you want to continue?(y/n)\", ' ').toLowerCase();\n+      if (!(\"y\".equals(answer) || \"yes\".equals(answer))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bd8844ab9ee84e382dc76c12b3964e3d8bac4553"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4OTcwMTU3", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-498970157", "createdAt": "2020-09-29T22:36:31Z", "commit": {"oid": "bd8844ab9ee84e382dc76c12b3964e3d8bac4553"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b2f2e941a702336b3154cb0ae5983740f24f279", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/4b2f2e941a702336b3154cb0ae5983740f24f279", "committedDate": "2020-09-29T23:46:07Z", "message": "Clarify that offline-solr-gazetteer:removeall does not block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66249c2103351fcb7fd62faac53de0d0249b409a", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/66249c2103351fcb7fd62faac53de0d0249b409a", "committedDate": "2020-09-29T23:46:07Z", "message": "Ignore case when checking user y/n input"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODE0MDA4", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-499814008", "createdAt": "2020-09-30T21:09:40Z", "commit": {"oid": "66249c2103351fcb7fd62faac53de0d0249b409a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODQ1NTQ1", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-499845545", "createdAt": "2020-09-30T22:05:37Z", "commit": {"oid": "66249c2103351fcb7fd62faac53de0d0249b409a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5ODUwMzEz", "url": "https://github.com/codice/ddf/pull/6352#pullrequestreview-499850313", "createdAt": "2020-09-30T22:16:03Z", "commit": {"oid": "66249c2103351fcb7fd62faac53de0d0249b409a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 767, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}