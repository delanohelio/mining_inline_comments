{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1NTQ1ODk5", "number": 5792, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMDozMVrODaNIbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMDozMVrODaNIbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODA0NzE2OnYy", "diffSide": "RIGHT", "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/query/validate/QueryValidators.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMDozMVrOFhBrYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxNToxMDozMVrOFhBrYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDE3NDgxOQ==", "bodyText": "\u270f\ufe0f its", "url": "https://github.com/codice/ddf/pull/5792#discussion_r370174819", "createdAt": "2020-01-23T15:10:31Z", "author": {"login": "shaundmorris"}, "path": "catalog/ui/catalog-ui-search/src/main/java/org/codice/ddf/catalog/ui/query/validate/QueryValidators.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.ui.query.validate;\n+\n+import ddf.catalog.validation.QueryValidator;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * A collection of {@code QueryValidator} instances that have been registered in the system. These\n+ * instances can be fetched by their unique id (see {@code QueryValidator#getValidatorId}).\n+ */\n+public class QueryValidators {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryValidators.class);\n+\n+  private Map<String, QueryValidator> validators = new ConcurrentHashMap<>();\n+\n+  /**\n+   * Gets a registered {@code QueryValidator} instance by it's id.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1bec1966eeabe67d7f016f03f1530a331f07528"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4775, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}