{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNDYzMTM3", "number": 6216, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo1NzoyMlrOEViZpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0NDoyN1rOEZoIvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDE5MTczOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-directorymonitor/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxODo1NzoyMlrOG8WjAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMDo1NTo1M1rOG8aSdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNzE1Mw==", "bodyText": "[Not Important] This name confuses me. Is it supposed to be pronounced \"call one on\"?", "url": "https://github.com/codice/ddf/pull/6216#discussion_r465937153", "createdAt": "2020-08-05T18:57:22Z", "author": {"login": "bakejeyner"}, "path": "catalog/core/catalog-core-directorymonitor/pom.xml", "diffHunk": "@@ -324,7 +324,7 @@\n         <dependency>\n             <groupId>ch.qos.cal10n</groupId>\n             <artifactId>cal10n-api</artifactId>\n-            <version>0.7.4</version>\n+            <version>${cal10n.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4870da7777f6cda4e9bd3ace1276caea3905288"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0MTkxNA==", "bodyText": "From http://cal10n.qos.ch/\n\nCompiler Assisted Localization, abbreviated as CAL10N (pronounced as \"calion\")\n\nI'm not sure if that's cal + lion\nor if it rhymes with scallion \ud83d\ude04", "url": "https://github.com/codice/ddf/pull/6216#discussion_r465941914", "createdAt": "2020-08-05T19:06:12Z", "author": {"login": "SmithJosh"}, "path": "catalog/core/catalog-core-directorymonitor/pom.xml", "diffHunk": "@@ -324,7 +324,7 @@\n         <dependency>\n             <groupId>ch.qos.cal10n</groupId>\n             <artifactId>cal10n-api</artifactId>\n-            <version>0.7.4</version>\n+            <version>${cal10n.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNzE1Mw=="}, "originalCommit": {"oid": "f4870da7777f6cda4e9bd3ace1276caea3905288"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk5ODQ1NQ==", "bodyText": "LOL lets make a rap for it and stick it in the comments", "url": "https://github.com/codice/ddf/pull/6216#discussion_r465998455", "createdAt": "2020-08-05T20:55:53Z", "author": {"login": "bakejeyner"}, "path": "catalog/core/catalog-core-directorymonitor/pom.xml", "diffHunk": "@@ -324,7 +324,7 @@\n         <dependency>\n             <groupId>ch.qos.cal10n</groupId>\n             <artifactId>cal10n-api</artifactId>\n-            <version>0.7.4</version>\n+            <version>${cal10n.version}</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTkzNzE1Mw=="}, "originalCommit": {"oid": "f4870da7777f6cda4e9bd3ace1276caea3905288"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgxMTM4OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOToxNFrOG-cjGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOToxNFrOG-cjGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjYzNA==", "bodyText": "this should be parameterized", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468132634", "createdAt": "2020-08-10T19:29:14Z", "author": {"login": "bdeining"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgxMjEzOnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOToyNlrOG-cjlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOToyNlrOG-cjlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMjc1Nw==", "bodyText": "this should be parameterized", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468132757", "createdAt": "2020-08-10T19:29:26Z", "author": {"login": "bdeining"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, AuthenticationException {\n+    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());\n+    try {\n+      new ProxyFilterChain(filters).doFilter(request, response);\n+    } catch (ServletException e) {\n+      throw new AuthenticationException(\"Error in global ServletFilter chain\", e);\n+    }\n+    chain.doFilter(request, response);\n+  }\n+\n+  @Override\n+  public void destroy() {\n+    LOGGER.debug(\"Destroyed \" + DelegatingSecurityFilter.class.getSimpleName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDgxNDE0OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQxOToyOTo1OVrOG-ckxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozMjozMlrOHAixPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMzA2Mw==", "bodyText": "the logging in this method might be more appropriate at the trace level", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468133063", "createdAt": "2020-08-10T19:29:59Z", "author": {"login": "bdeining"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, AuthenticationException {\n+    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzMTcwOQ==", "bodyText": "I changed it to trace", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470331709", "createdAt": "2020-08-14T00:32:32Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingSecurityFilter.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.codice.ddf.platform.filter.AuthenticationException;\n+import org.codice.ddf.platform.filter.FilterChain;\n+import org.codice.ddf.platform.filter.SecurityFilter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingSecurityFilter implements SecurityFilter {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingSecurityFilter.class);\n+\n+  private final List<Filter> filters;\n+\n+  public DelegatingSecurityFilter(List<Filter> filters) {\n+    this.filters = filters;\n+  }\n+\n+  @Override\n+  public void init() {\n+    LOGGER.debug(\"Initialized \" + DelegatingSecurityFilter.class.getSimpleName());\n+  }\n+\n+  @Override\n+  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain)\n+      throws IOException, AuthenticationException {\n+    LOGGER.debug(\"Delegating to {} global ServletFilters.\", filters.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODEzMzA2Mw=="}, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkzMzg2OnYy", "diffSide": "LEFT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegateServletFilter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowNzoyNlrOG-duXA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0OTo1M1rOHAjcMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTkwMA==", "bodyText": "\u2753 Isn't this deletion going to break metrics and other cross-cutting concerns (i.e. client info filter but I doubt anyone still cares about that)? I think we have some dependents on this class without any viable substitutes as of yet.\nI don't think your SecurityFilter workaround is valid in all current cases.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468151900", "createdAt": "2020-08-10T20:07:26Z", "author": {"login": "Lambeaux"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegateServletFilter.java", "diffHunk": "@@ -1,54 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class DelegateServletFilter implements Filter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1OTIxMw==", "bodyText": "Isn't this deletion going to break metrics and other cross-cutting concerns (i.e. client info filter but I doubt anyone still cares about that)? I think we have some dependents on this class without any viable substitutes as of yet.\n\nI only changed the name of this class. It's now DelegateSecurityFilter, but it still performs the same behavior, picking up all registered ServletFilters and passing incoming requests off to them.\nAnd what do you mean by \"dependencies\"? I wasn't aware anybody used this class itself. They should just be registering ServletFilters which will get picked up by this.\n\nI don't think your SecurityFilter workaround is valid in all current cases.\n\nDo you have an example by chance where this wouldn't work?", "url": "https://github.com/codice/ddf/pull/6216#discussion_r468159213", "createdAt": "2020-08-10T20:16:08Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegateServletFilter.java", "diffHunk": "@@ -1,54 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class DelegateServletFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTkwMA=="}, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MjcwNw==", "bodyText": "You were right. The DoPrivilegedFilter wasn't working either, since the doPrivileged call terminated as soon as all the Filters had run. The delegate filter wasn't really running the the filters as part of the chain.\nI believe I fixed that now, so marking this as resolved", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470342707", "createdAt": "2020-08-14T00:49:53Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegateServletFilter.java", "diffHunk": "@@ -1,54 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.pax.web.jetty;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n-import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class DelegateServletFilter implements Filter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MTkwMA=="}, "originalCommit": {"oid": "88a0803db0ce5fc5707ed6909155d266c2d43387"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA0NTA0OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNzoxMlrOHAi8Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDozNzoxMlrOHAi8Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNDU1NA==", "bodyText": "The delegating servlet filter has a new home \ud83d\ude02 This time it's the Jetty Handler chain", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470334554", "createdAt": "2020-08-14T00:37:12Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.HttpFilter;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.HandlerWrapper;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.util.tracker.ServiceTracker;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingHttpFilterHandler extends HandlerWrapper {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d71829ef8f20d2f40413c39103f7cbe1f24b38"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA1OTU2OnYy", "diffSide": "RIGHT", "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0MToxM1rOHAjGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0MToxM1rOHAjGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzNzEyNg==", "bodyText": "The Jetty Handlers take HttpServletRequests. In order to inject stuff into that chain, I needed to have a filter interface that takes HttpServletRequests as well. Oddly enough this is not already a thing.\nAny filters we used to inject via the delegate filter will need to be changed to implement this new interface. That will require changing the method signature and removing the init/destroy methods since those aren't used anymore.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470337126", "createdAt": "2020-08-14T00:41:13Z", "author": {"login": "SmithJosh"}, "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {\n+\n+  void doFilter(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "18d71829ef8f20d2f40413c39103f7cbe1f24b38"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA2OTI3OnYy", "diffSide": "RIGHT", "path": "platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0Mzo0N1rOHAjMiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0Mzo0N1rOHAjMiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDMzODY5OQ==", "bodyText": "Here's an example of converting an existing Filter into an HttpFilter", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470338699", "createdAt": "2020-08-14T00:43:47Z", "author": {"login": "SmithJosh"}, "path": "platform/metrics/metrics-servlet-filter/src/main/java/org/codice/ddf/metrics/servlet/ServletMetrics.java", "diffHunk": "@@ -18,45 +18,34 @@\n import java.io.IOException;\n import javax.servlet.AsyncEvent;\n import javax.servlet.AsyncListener;\n-import javax.servlet.Filter;\n-import javax.servlet.FilterChain;\n-import javax.servlet.FilterConfig;\n import javax.servlet.ServletException;\n-import javax.servlet.ServletRequest;\n-import javax.servlet.ServletResponse;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.HttpFilter;\n+import org.codice.ddf.platform.filter.HttpFilterChain;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class ServletMetrics implements Filter {\n+public class ServletMetrics implements HttpFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTA4MzAzOnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NzoyMlrOHAjVzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwMDo0NzoyMlrOHAjVzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDM0MTA3MQ==", "bodyText": "This is getting injected into the Jetty Handler chain via the jetty.xml config, so I couldn't just inject a service reference list like it did before. If anybody has better ideas for how to do this, I'm open to suggestions.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470341071", "createdAt": "2020-08-14T00:47:22Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import java.util.Objects;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.HttpFilter;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.HandlerWrapper;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.util.tracker.ServiceTracker;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Hands the request off to a set chain of servlet {@link Filter}s. Since SecurityFilters are run on\n+ * each request, this provides a mechanism to add global servlet filters. As of OSGi R6, there is a\n+ * proper way to define global servlets/filters/listeners/etc., defined by the HTTP Whiteboard spec.\n+ * However, pax-web does not yet implement that feature, so we're left using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingHttpFilterHandler extends HandlerWrapper {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingHttpFilterHandler.class);\n+\n+  private final ServiceTracker<HttpFilter, HttpFilter> filterTracker;\n+\n+  @VisibleForTesting\n+  DelegatingHttpFilterHandler(ServiceTracker<HttpFilter, HttpFilter> filterTracker) {\n+    this.filterTracker = Objects.requireNonNull(filterTracker);\n+  }\n+\n+  public DelegatingHttpFilterHandler() {\n+    Bundle bundle = FrameworkUtil.getBundle(DelegatingHttpFilterHandler.class);\n+    Objects.requireNonNull(bundle, \"Bundle must not be null\");\n+    Objects.requireNonNull(bundle.getBundleContext(), \"Bundle has no valid BundleContext\");\n+\n+    this.filterTracker =\n+        new ServiceTracker(bundle.getBundleContext(), HttpFilter.class.getName(), null);\n+  }\n+\n+  @Override\n+  public void handle(\n+      String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    HttpFilter[] filters = getFilters();\n+    LOGGER.trace(\"Delegating to {} HttpFilters.\", filters.length);\n+\n+    ProxyHttpFilterChain filterChain =\n+        new ProxyHttpFilterChain(filters, getHandler(), target, baseRequest);\n+    filterChain.doFilter(request, response);\n+  }\n+\n+  private HttpFilter[] getFilters() {\n+    HttpFilter[] filters = new HttpFilter[filterTracker.size()];\n+    return filterTracker.getServices(filters);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0MjY4NjU1OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMjo0ODozMVrOHBFLtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoyMjoxN1rOHB5lWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NTU0MA==", "bodyText": "\u2753 Why did you have to add this?", "url": "https://github.com/codice/ddf/pull/6216#discussion_r470895540", "createdAt": "2020-08-14T22:48:31Z", "author": {"login": "pklinef"}, "path": "platform/platform-paxweb-jettyconfig/pom.xml", "diffHunk": "@@ -103,6 +103,13 @@\n             <artifactId>security-core-impl</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>io.micrometer</groupId>\n+            <artifactId>micrometer-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1NDA3NA==", "bodyText": "Oops, I forgot to clean this up. It shouldn't be here.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471754074", "createdAt": "2020-08-17T20:22:17Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/pom.xml", "diffHunk": "@@ -103,6 +103,13 @@\n             <artifactId>security-core-impl</artifactId>\n             <version>${project.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>io.micrometer</groupId>\n+            <artifactId>micrometer-core</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg5NTU0MA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODYzODM3OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDowNDoxM1rOHB5B-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMToxMTozN1rOHB7Azw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0NTAxOA==", "bodyText": "\u2753 Did we lose the ability to make sure these core handlers are executed in the proper order?  I guess we could use service ranking if we need it again.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471745018", "createdAt": "2020-08-17T20:04:13Z", "author": {"login": "pklinef"}, "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,43 +15,24 @@\n \n     <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\" />\n \n+    <!-- Global ServletFilters -->\n+    <service id=\"clientInfoFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">\n+        <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n+    </service>\n+\n     <bean id=\"responseFilter\" class=\"org.codice.ddf.pax.web.jetty.ResponseFilter\">\n         <cm:managed-properties\n-                persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n-                update-strategy=\"container-managed\"/>\n-    </bean>\n-\n-    <bean id=\"executor\" class=\"java.util.concurrent.Executors\" factory-method=\"newSingleThreadScheduledExecutor\">\n-        <argument ref=\"securityJavaSubjectThreadFactory\"/>\n+          persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n+          update-strategy=\"container-managed\"/>\n     </bean>\n+    <service ref=\"responseFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\"/>\n \n-    <reference-list id=\"filterList\" availability=\"optional\" interface=\"javax.servlet.Filter\" />\n-\n-    <bean id=\"delegateServletFilter\"\n-          class=\"org.codice.ddf.pax.web.jetty.DelegateServletFilter\">\n-        <argument ref=\"filterList\"/>\n-    </bean>\n-\n-    <bean id=\"filterInjector\" class=\"org.codice.ddf.pax.web.jetty.FilterInjector\" init-method=\"init\"\n-          destroy-method=\"destroy\">\n-        <argument type=\"java.util.List\">\n-            <list value-type=\"javax.servlet.Filter\">\n-                <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n-                <ref component-id=\"responseFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.SecurityJavaSubjectFilter\"/>\n-                <ref component-id=\"delegateServletFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.DoPrivilegedFilter\"/>\n-            </list>\n-        </argument>\n-        <argument ref=\"executor\"/>\n-    </bean>\n-\n-    <bean id=\"securityJavaSubjectThreadFactory\"\n-          class=\"org.codice.ddf.platform.util.StandardThreadFactoryBuilder\"\n-          factory-method=\"newThreadFactory\">\n-        <argument value=\"securityJavaSubjectThread\"/>\n-    </bean>\n+    <service id=\"securityJavaSubjectFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1OTQxNg==", "bodyText": "Hm... I'm not sure what guarantees we have about execution order anymore. If we need to preserve the existing order (ClientInfoFilter, ResponseFilter, SecurityJavaSubjectFilter, ServletMetrics, DoPrivilegedFilter), I'll look into it", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471759416", "createdAt": "2020-08-17T20:33:11Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,43 +15,24 @@\n \n     <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\" />\n \n+    <!-- Global ServletFilters -->\n+    <service id=\"clientInfoFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">\n+        <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n+    </service>\n+\n     <bean id=\"responseFilter\" class=\"org.codice.ddf.pax.web.jetty.ResponseFilter\">\n         <cm:managed-properties\n-                persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n-                update-strategy=\"container-managed\"/>\n-    </bean>\n-\n-    <bean id=\"executor\" class=\"java.util.concurrent.Executors\" factory-method=\"newSingleThreadScheduledExecutor\">\n-        <argument ref=\"securityJavaSubjectThreadFactory\"/>\n+          persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n+          update-strategy=\"container-managed\"/>\n     </bean>\n+    <service ref=\"responseFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\"/>\n \n-    <reference-list id=\"filterList\" availability=\"optional\" interface=\"javax.servlet.Filter\" />\n-\n-    <bean id=\"delegateServletFilter\"\n-          class=\"org.codice.ddf.pax.web.jetty.DelegateServletFilter\">\n-        <argument ref=\"filterList\"/>\n-    </bean>\n-\n-    <bean id=\"filterInjector\" class=\"org.codice.ddf.pax.web.jetty.FilterInjector\" init-method=\"init\"\n-          destroy-method=\"destroy\">\n-        <argument type=\"java.util.List\">\n-            <list value-type=\"javax.servlet.Filter\">\n-                <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n-                <ref component-id=\"responseFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.SecurityJavaSubjectFilter\"/>\n-                <ref component-id=\"delegateServletFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.DoPrivilegedFilter\"/>\n-            </list>\n-        </argument>\n-        <argument ref=\"executor\"/>\n-    </bean>\n-\n-    <bean id=\"securityJavaSubjectThreadFactory\"\n-          class=\"org.codice.ddf.platform.util.StandardThreadFactoryBuilder\"\n-          factory-method=\"newThreadFactory\">\n-        <argument value=\"securityJavaSubjectThread\"/>\n-    </bean>\n+    <service id=\"securityJavaSubjectFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0NTAxOA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2MTUwNA==", "bodyText": "Originally I was intentional abut making sure the filter delegate went after the security java subject filter so that the delegated filters could assume a subject would be available if the user was logged in.  I don't think the current filters care about that currently.  It is probably ok how you have it currently.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471761504", "createdAt": "2020-08-17T20:37:32Z", "author": {"login": "pklinef"}, "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,43 +15,24 @@\n \n     <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\" />\n \n+    <!-- Global ServletFilters -->\n+    <service id=\"clientInfoFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">\n+        <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n+    </service>\n+\n     <bean id=\"responseFilter\" class=\"org.codice.ddf.pax.web.jetty.ResponseFilter\">\n         <cm:managed-properties\n-                persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n-                update-strategy=\"container-managed\"/>\n-    </bean>\n-\n-    <bean id=\"executor\" class=\"java.util.concurrent.Executors\" factory-method=\"newSingleThreadScheduledExecutor\">\n-        <argument ref=\"securityJavaSubjectThreadFactory\"/>\n+          persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n+          update-strategy=\"container-managed\"/>\n     </bean>\n+    <service ref=\"responseFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\"/>\n \n-    <reference-list id=\"filterList\" availability=\"optional\" interface=\"javax.servlet.Filter\" />\n-\n-    <bean id=\"delegateServletFilter\"\n-          class=\"org.codice.ddf.pax.web.jetty.DelegateServletFilter\">\n-        <argument ref=\"filterList\"/>\n-    </bean>\n-\n-    <bean id=\"filterInjector\" class=\"org.codice.ddf.pax.web.jetty.FilterInjector\" init-method=\"init\"\n-          destroy-method=\"destroy\">\n-        <argument type=\"java.util.List\">\n-            <list value-type=\"javax.servlet.Filter\">\n-                <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n-                <ref component-id=\"responseFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.SecurityJavaSubjectFilter\"/>\n-                <ref component-id=\"delegateServletFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.DoPrivilegedFilter\"/>\n-            </list>\n-        </argument>\n-        <argument ref=\"executor\"/>\n-    </bean>\n-\n-    <bean id=\"securityJavaSubjectThreadFactory\"\n-          class=\"org.codice.ddf.platform.util.StandardThreadFactoryBuilder\"\n-          factory-method=\"newThreadFactory\">\n-        <argument value=\"securityJavaSubjectThread\"/>\n-    </bean>\n+    <service id=\"securityJavaSubjectFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0NTAxOA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2MjU1Ng==", "bodyText": "Though I wonder if it will impact the Java security manager policy.  Before we were able to keep policies details from leaking up to global filters.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471762556", "createdAt": "2020-08-17T20:39:48Z", "author": {"login": "pklinef"}, "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,43 +15,24 @@\n \n     <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\" />\n \n+    <!-- Global ServletFilters -->\n+    <service id=\"clientInfoFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">\n+        <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n+    </service>\n+\n     <bean id=\"responseFilter\" class=\"org.codice.ddf.pax.web.jetty.ResponseFilter\">\n         <cm:managed-properties\n-                persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n-                update-strategy=\"container-managed\"/>\n-    </bean>\n-\n-    <bean id=\"executor\" class=\"java.util.concurrent.Executors\" factory-method=\"newSingleThreadScheduledExecutor\">\n-        <argument ref=\"securityJavaSubjectThreadFactory\"/>\n+          persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n+          update-strategy=\"container-managed\"/>\n     </bean>\n+    <service ref=\"responseFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\"/>\n \n-    <reference-list id=\"filterList\" availability=\"optional\" interface=\"javax.servlet.Filter\" />\n-\n-    <bean id=\"delegateServletFilter\"\n-          class=\"org.codice.ddf.pax.web.jetty.DelegateServletFilter\">\n-        <argument ref=\"filterList\"/>\n-    </bean>\n-\n-    <bean id=\"filterInjector\" class=\"org.codice.ddf.pax.web.jetty.FilterInjector\" init-method=\"init\"\n-          destroy-method=\"destroy\">\n-        <argument type=\"java.util.List\">\n-            <list value-type=\"javax.servlet.Filter\">\n-                <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n-                <ref component-id=\"responseFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.SecurityJavaSubjectFilter\"/>\n-                <ref component-id=\"delegateServletFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.DoPrivilegedFilter\"/>\n-            </list>\n-        </argument>\n-        <argument ref=\"executor\"/>\n-    </bean>\n-\n-    <bean id=\"securityJavaSubjectThreadFactory\"\n-          class=\"org.codice.ddf.platform.util.StandardThreadFactoryBuilder\"\n-          factory-method=\"newThreadFactory\">\n-        <argument value=\"securityJavaSubjectThread\"/>\n-    </bean>\n+    <service id=\"securityJavaSubjectFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0NTAxOA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NTI1Nw==", "bodyText": "Good point. I'll see what I can do to make the DoPrivilegedFilter run last. Not sure if the ServiceTracker supports service ranking as I'm using it, but that would be easiest", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471775257", "createdAt": "2020-08-17T21:06:32Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,43 +15,24 @@\n \n     <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\" />\n \n+    <!-- Global ServletFilters -->\n+    <service id=\"clientInfoFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">\n+        <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n+    </service>\n+\n     <bean id=\"responseFilter\" class=\"org.codice.ddf.pax.web.jetty.ResponseFilter\">\n         <cm:managed-properties\n-                persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n-                update-strategy=\"container-managed\"/>\n-    </bean>\n-\n-    <bean id=\"executor\" class=\"java.util.concurrent.Executors\" factory-method=\"newSingleThreadScheduledExecutor\">\n-        <argument ref=\"securityJavaSubjectThreadFactory\"/>\n+          persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n+          update-strategy=\"container-managed\"/>\n     </bean>\n+    <service ref=\"responseFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\"/>\n \n-    <reference-list id=\"filterList\" availability=\"optional\" interface=\"javax.servlet.Filter\" />\n-\n-    <bean id=\"delegateServletFilter\"\n-          class=\"org.codice.ddf.pax.web.jetty.DelegateServletFilter\">\n-        <argument ref=\"filterList\"/>\n-    </bean>\n-\n-    <bean id=\"filterInjector\" class=\"org.codice.ddf.pax.web.jetty.FilterInjector\" init-method=\"init\"\n-          destroy-method=\"destroy\">\n-        <argument type=\"java.util.List\">\n-            <list value-type=\"javax.servlet.Filter\">\n-                <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n-                <ref component-id=\"responseFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.SecurityJavaSubjectFilter\"/>\n-                <ref component-id=\"delegateServletFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.DoPrivilegedFilter\"/>\n-            </list>\n-        </argument>\n-        <argument ref=\"executor\"/>\n-    </bean>\n-\n-    <bean id=\"securityJavaSubjectThreadFactory\"\n-          class=\"org.codice.ddf.platform.util.StandardThreadFactoryBuilder\"\n-          factory-method=\"newThreadFactory\">\n-        <argument value=\"securityJavaSubjectThread\"/>\n-    </bean>\n+    <service id=\"securityJavaSubjectFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0NTAxOA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc3NzQ4Nw==", "bodyText": "You could do something similar to our SortedServiceList.\nhttps://github.com/codice/ddf/blob/master/platform/util/platform-util/src/main/java/org/codice/ddf/platform/util/SortedServiceList.java#L57-L64", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471777487", "createdAt": "2020-08-17T21:11:37Z", "author": {"login": "pklinef"}, "path": "platform/platform-paxweb-jettyconfig/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,43 +15,24 @@\n \n     <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\" />\n \n+    <!-- Global ServletFilters -->\n+    <service id=\"clientInfoFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">\n+        <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n+    </service>\n+\n     <bean id=\"responseFilter\" class=\"org.codice.ddf.pax.web.jetty.ResponseFilter\">\n         <cm:managed-properties\n-                persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n-                update-strategy=\"container-managed\"/>\n-    </bean>\n-\n-    <bean id=\"executor\" class=\"java.util.concurrent.Executors\" factory-method=\"newSingleThreadScheduledExecutor\">\n-        <argument ref=\"securityJavaSubjectThreadFactory\"/>\n+          persistent-id=\"org.codice.ddf.platform.response.filter.ResponseHeaderConfig\"\n+          update-strategy=\"container-managed\"/>\n     </bean>\n+    <service ref=\"responseFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\"/>\n \n-    <reference-list id=\"filterList\" availability=\"optional\" interface=\"javax.servlet.Filter\" />\n-\n-    <bean id=\"delegateServletFilter\"\n-          class=\"org.codice.ddf.pax.web.jetty.DelegateServletFilter\">\n-        <argument ref=\"filterList\"/>\n-    </bean>\n-\n-    <bean id=\"filterInjector\" class=\"org.codice.ddf.pax.web.jetty.FilterInjector\" init-method=\"init\"\n-          destroy-method=\"destroy\">\n-        <argument type=\"java.util.List\">\n-            <list value-type=\"javax.servlet.Filter\">\n-                <bean class=\"org.codice.ddf.pax.web.jetty.ClientInfoFilter\"/>\n-                <ref component-id=\"responseFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.SecurityJavaSubjectFilter\"/>\n-                <ref component-id=\"delegateServletFilter\"/>\n-                <bean class=\"org.codice.ddf.pax.web.jetty.DoPrivilegedFilter\"/>\n-            </list>\n-        </argument>\n-        <argument ref=\"executor\"/>\n-    </bean>\n-\n-    <bean id=\"securityJavaSubjectThreadFactory\"\n-          class=\"org.codice.ddf.platform.util.StandardThreadFactoryBuilder\"\n-          factory-method=\"newThreadFactory\">\n-        <argument value=\"securityJavaSubjectThread\"/>\n-    </bean>\n+    <service id=\"securityJavaSubjectFilter\" interface=\"org.codice.ddf.platform.filter.HttpFilter\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0NTAxOA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODY1OTUzOnYy", "diffSide": "RIGHT", "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxMDo0MFrOHB5OrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDozNToxNlrOHB597w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ==", "bodyText": "\u2753 Why is this part of security-filter-api instead of part of platform-paxweb-jettyconfig or some other Jetty or HTTP concerned bundle?  This interface does not seem related to security as it is.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471748269", "createdAt": "2020-08-17T20:10:40Z", "author": {"login": "pklinef"}, "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1Nzg0Nw==", "bodyText": "Yeah I guess it's not necessarily related to security. I put it here since most of the filter implementations are security-related, but it may make more sense in a new api bundle.\nI don't think it should go into platform-paxweb-jettyconfig since that would pull in a bunch of other transitive dependencies as well.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471757847", "createdAt": "2020-08-17T20:30:08Z", "author": {"login": "SmithJosh"}, "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1OTgzNQ==", "bodyText": "A new API bundle would be safest.  Currently platform-api looks pretty safe but that runs the risk of being exposed to other unrelated dependencies in the future.  Already it depends on javax.validation.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471759835", "createdAt": "2020-08-17T20:34:09Z", "author": {"login": "pklinef"}, "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc2MDM2Nw==", "bodyText": "Ok I'll create a new bundle", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471760367", "createdAt": "2020-08-17T20:35:16Z", "author": {"login": "SmithJosh"}, "path": "platform/security-filter-api/src/main/java/org/codice/ddf/platform/filter/HttpFilter.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.platform.filter;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+\n+/**\n+ * An HttpFilter is an object that performs filtering tasks on either the request to a resource (a\n+ * servlet or static content), or on the response from a resource, or both.\n+ *\n+ * <p>It is modelled after {@link javax.servlet.Filter} but its {@code doFilter} method accepts\n+ * {@link HttpServletRequest} and {@link HttpServletResponse} arguments instead.\n+ */\n+public interface HttpFilter {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0ODI2OQ=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0ODY3MDUxOnYy", "diffSide": "RIGHT", "path": "platform/metrics/metrics-servlet-filter/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoxNDoxMlrOHB5VSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QyMDoyNDoxMlrOHB5o2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0OTk2MA==", "bodyText": "\u2753 Is this dependency actually needed here?  It should only depend on the API bundle with the HttpFilter interface.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471749960", "createdAt": "2020-08-17T20:14:12Z", "author": {"login": "pklinef"}, "path": "platform/metrics/metrics-servlet-filter/pom.xml", "diffHunk": "@@ -44,6 +44,12 @@\n             <artifactId>slf4j-api</artifactId>\n             <version>${org.slf4j.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>ddf.platform</groupId>\n+            <artifactId>platform-paxweb-jettyconfig</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc1NDk2OQ==", "bodyText": "You're right - it's not needed. I'd originally made the new interface in the paxweb-jettyconfig bundle and forgot to clean this up.", "url": "https://github.com/codice/ddf/pull/6216#discussion_r471754969", "createdAt": "2020-08-17T20:24:12Z", "author": {"login": "SmithJosh"}, "path": "platform/metrics/metrics-servlet-filter/pom.xml", "diffHunk": "@@ -44,6 +44,12 @@\n             <artifactId>slf4j-api</artifactId>\n             <version>${org.slf4j.version}</version>\n         </dependency>\n+        <dependency>\n+            <groupId>ddf.platform</groupId>\n+            <artifactId>platform-paxweb-jettyconfig</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTc0OTk2MA=="}, "originalCommit": {"oid": "59247a0c9512a96075539b9e2737613b5d2080f4"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzA2MzM0OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/ProxyHttpFilterChain.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0MDo0NVrOHCjOOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDowMzowMVrOHCj7eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjI4MQ==", "bodyText": "\u2753 Iterators are stateful. Does a new instance of this chain get created for each request? If not, and all requests share it, then how is this working?", "url": "https://github.com/codice/ddf/pull/6216#discussion_r472436281", "createdAt": "2020-08-18T19:40:45Z", "author": {"login": "Lambeaux"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/ProxyHttpFilterChain.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.filter.http.HttpFilterChain;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of filter chain that allows the ability to dynamically add new {@link Filter}s to\n+ * a chain. The {@link ProxyHttpFilterChain} may not be reused. That is, once the {@link\n+ * ProxyHttpFilterChain#doFilter} method is called, no more {@link HttpFilter}s may be added.\n+ */\n+public class ProxyHttpFilterChain implements HttpFilterChain {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProxyHttpFilterChain.class);\n+\n+  private final Iterator<HttpFilter> iterator;\n+  private final Handler handler;\n+  private final String target;\n+  private final Request baseRequest;\n+\n+  public ProxyHttpFilterChain(\n+      List<HttpFilter> filters, Handler handler, String target, Request baseRequest) {\n+    this.iterator = filters.iterator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3113f578bda468e1e00dd3a65424720ac9e1a8f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ0Nzg2NA==", "bodyText": "Yep, the ProxyHttpFilterChain is single-use. A new instance gets created for each request", "url": "https://github.com/codice/ddf/pull/6216#discussion_r472447864", "createdAt": "2020-08-18T20:03:01Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/ProxyHttpFilterChain.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.Iterator;\n+import java.util.List;\n+import javax.servlet.Filter;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.filter.http.HttpFilterChain;\n+import org.eclipse.jetty.server.Handler;\n+import org.eclipse.jetty.server.Request;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Implementation of filter chain that allows the ability to dynamically add new {@link Filter}s to\n+ * a chain. The {@link ProxyHttpFilterChain} may not be reused. That is, once the {@link\n+ * ProxyHttpFilterChain#doFilter} method is called, no more {@link HttpFilter}s may be added.\n+ */\n+public class ProxyHttpFilterChain implements HttpFilterChain {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(ProxyHttpFilterChain.class);\n+\n+  private final Iterator<HttpFilter> iterator;\n+  private final Handler handler;\n+  private final String target;\n+  private final Request baseRequest;\n+\n+  public ProxyHttpFilterChain(\n+      List<HttpFilter> filters, Handler handler, String target, Request baseRequest) {\n+    this.iterator = filters.iterator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzNjI4MQ=="}, "originalCommit": {"oid": "a3113f578bda468e1e00dd3a65424720ac9e1a8f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzA3NDU0OnYy", "diffSide": "RIGHT", "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0NDoyN1rOHCjVHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxOTo0NDoyN1rOHCjVHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQzODA0NA==", "bodyText": "\ud83d\udc4d  I see - should be fine", "url": "https://github.com/codice/ddf/pull/6216#discussion_r472438044", "createdAt": "2020-08-18T19:44:27Z", "author": {"login": "Lambeaux"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/pax/web/jetty/DelegatingHttpFilterHandler.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.pax.web.jetty;\n+\n+import java.io.IOException;\n+import java.util.Collection;\n+import java.util.Objects;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.codice.ddf.platform.filter.http.HttpFilter;\n+import org.codice.ddf.platform.util.SortedServiceList;\n+import org.eclipse.jetty.server.Request;\n+import org.eclipse.jetty.server.handler.HandlerWrapper;\n+import org.osgi.framework.Bundle;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.FrameworkUtil;\n+import org.osgi.framework.InvalidSyntaxException;\n+import org.osgi.framework.ServiceEvent;\n+import org.osgi.framework.ServiceListener;\n+import org.osgi.framework.ServiceReference;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The {@code DelegatingHttpFilterHandler} provides a way to create global filters which will apply\n+ * to all requests. It finds any registered {@link HttpFilter} services and passes incoming\n+ * requests to them in order of service ranking.\n+ *\n+ * As of OSGi R6, there is a proper way to define global servlets/filters/listeners/etc., defined\n+ * by the HTTP Whiteboard spec. However, pax-web does not yet implement that feature, so we're left\n+ * using this workaround.\n+ *\n+ * <p>When https://ops4j1.jira.com/browse/PAXWEB-1123 is resolved, this workaround should be\n+ * revisited.\n+ */\n+public class DelegatingHttpFilterHandler extends HandlerWrapper {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(DelegatingHttpFilterHandler.class);\n+\n+  private static final String FILTER = \"(objectclass=\" + HttpFilter.class.getName() + \")\";\n+\n+  private final HttpFilterServiceListener listener = new HttpFilterServiceListener();\n+\n+  private final SortedServiceList<HttpFilter> httpFilters;\n+\n+  private final BundleContext context;\n+\n+  private static BundleContext getContext() {\n+    Bundle bundle = FrameworkUtil.getBundle(DelegatingHttpFilterHandler.class);\n+    Objects.requireNonNull(bundle, \"Bundle cannot be null\");\n+    return bundle.getBundleContext();\n+  }\n+\n+  public DelegatingHttpFilterHandler() throws InvalidSyntaxException {\n+    this(getContext());\n+  }\n+\n+  public DelegatingHttpFilterHandler(BundleContext context) throws InvalidSyntaxException {\n+    Objects.requireNonNull(context, \"Bundle context cannot be null\");\n+    this.context = context;\n+    this.context.addServiceListener(listener, FILTER);\n+    this.httpFilters =\n+        new SortedServiceList<HttpFilter>() {\n+          @Override\n+          protected BundleContext getContext() {\n+            return context;\n+          }\n+        };\n+\n+    /*\n+     * The service listener won't pick up services that are already registered. Must manually\n+     * add them to the service list.\n+     */\n+    Collection<ServiceReference<HttpFilter>> serviceReferences =\n+        this.context.getServiceReferences(HttpFilter.class, FILTER);\n+    for (ServiceReference<HttpFilter> reference : serviceReferences) {\n+      this.listener.serviceChanged(new ServiceEvent(ServiceEvent.REGISTERED, reference));\n+    }\n+  }\n+\n+  @Override\n+  public void handle(\n+      String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)\n+      throws IOException, ServletException {\n+    LOGGER.trace(\"Delegating to {} HttpFilters.\", httpFilters.size());\n+\n+    ProxyHttpFilterChain filterChain =\n+        new ProxyHttpFilterChain(httpFilters, getHandler(), target, baseRequest);\n+    filterChain.doFilter(request, response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3113f578bda468e1e00dd3a65424720ac9e1a8f"}, "originalPosition": 101}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4536, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}