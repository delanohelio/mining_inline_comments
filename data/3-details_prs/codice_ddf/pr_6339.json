{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMTM4MzE3", "number": 6339, "title": "CDM timeout update", "bodyText": "What does this PR do?\nAdds timeout capablity to the custom camel components FrameworkProducer and TransformerProducer.\nUtilizes the timeout ability in CDM\nWho is reviewing it?\n\n@josephthweatt\n@aaronilovici\nSelect relevant component teams:\n\nAsk 2 committers to review/merge the PR and tag them here.\n\nHow should this be tested?\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #____\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-09-22T19:08:06Z", "url": "https://github.com/codice/ddf/pull/6339", "merged": true, "mergeCommit": {"oid": "1be10fd5e85f0ffc056b203a55671c611b4c7aab"}, "closed": true, "closedAt": "2020-09-25T16:47:34Z", "author": {"login": "clockard"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ5PT8AH2gAyNDkxMTM4MzE3OjM0MmVhNWZkYzAxNjg0MDA0YThkNzMxMDJjMzdlM2NlZGJmNTI3ODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMUwVGgFqTQ5NjM2NDY4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "342ea5fdc01684004a8d73102c37e3cedbf52788", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/342ea5fdc01684004a8d73102c37e3cedbf52788", "committedDate": "2020-09-17T23:03:52Z", "message": "DDF-6334 added logging & camel will expire messages. Also set max number of threads for CDM"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzNzg5NDY1", "url": "https://github.com/codice/ddf/pull/6339#pullrequestreview-493789465", "createdAt": "2020-09-22T19:42:13Z", "commit": {"oid": "2b0e848d9cd60caf823a6e7585a4bc33fa1f15be"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0MjoxM1rOHWJp9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxOTo0MjoxM1rOHWJp9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mjk4ODkxNg==", "bodyText": "Do we need that second condition, !failedAndNotUpdated(files[c])? It seems like the while loop before this would only satisfy the first condition (c < file length) if line 391's failedAndNotUpdated were false", "url": "https://github.com/codice/ddf/pull/6339#discussion_r492988916", "createdAt": "2020-09-22T19:42:13Z", "author": {"login": "josephthweatt"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -383,7 +387,12 @@ private void checkAndNotify(\n \n     int c = 0;\n     for (final AsyncFileEntry entry : previous) {\n-      if (c < files.length && !expiredNotUpdated(files[c])) {\n+\n+      while (c < files.length && failedAndNotUpdated(files[c])) {\n+        c++;\n+      }\n+\n+      if (c < files.length && !failedAndNotUpdated(files[c])) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b0e848d9cd60caf823a6e7585a4bc33fa1f15be"}, "originalPosition": 115}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2b0e848d9cd60caf823a6e7585a4bc33fa1f15be", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/2b0e848d9cd60caf823a6e7585a4bc33fa1f15be", "committedDate": "2020-09-22T19:03:08Z", "message": "Update CDM timeouts to use camel component timeouts"}, "afterCommit": {"oid": "82aebb6569eea79dbdc808ed4706cba1b3cd15e8", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/82aebb6569eea79dbdc808ed4706cba1b3cd15e8", "committedDate": "2020-09-22T23:48:13Z", "message": "Update CDM timeouts to use camel component timeouts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0ODU2NjYx", "url": "https://github.com/codice/ddf/pull/6339#pullrequestreview-494856661", "createdAt": "2020-09-23T16:48:35Z", "commit": {"oid": "29e02db28bf772793e2756712c7f3b09a4213b16"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0ODozNVrOHW3lYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxNjo0ODozNVrOHW3lYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5Mzc0MTQxMQ==", "bodyText": "\u2754  This shouldn't occur enough to fill the logs at info level, right?", "url": "https://github.com/codice/ddf/pull/6339#discussion_r493741411", "createdAt": "2020-09-23T16:48:35Z", "author": {"login": "shaundmorris"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/FrameworkProducer.java", "diffHunk": "@@ -218,6 +241,32 @@ private void create(final Exchange exchange)\n     processCatalogResponse(createResponse, exchange);\n   }\n \n+  <T extends Operation, R> R processWithTimeout(\n+      long timeout, CatalogFunction<T, R> catalog, T request)\n+      throws InterruptedException, IngestTimeoutException, ExecutionException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29e02db28bf772793e2756712c7f3b09a4213b16"}, "originalPosition": 109}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29e02db28bf772793e2756712c7f3b09a4213b16", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/29e02db28bf772793e2756712c7f3b09a4213b16", "committedDate": "2020-09-23T05:14:30Z", "message": "Add failure retry"}, "afterCommit": {"oid": "fcb33081afcee3ecb0c80266aa33d33a2610e2df", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/fcb33081afcee3ecb0c80266aa33d33a2610e2df", "committedDate": "2020-09-23T21:23:05Z", "message": "Add failure retry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NzA1Mzgx", "url": "https://github.com/codice/ddf/pull/6339#pullrequestreview-495705381", "createdAt": "2020-09-24T15:39:42Z", "commit": {"oid": "fcb33081afcee3ecb0c80266aa33d33a2610e2df"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "73230f593ccd2e0122268bd24f7f879a92289320", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/73230f593ccd2e0122268bd24f7f879a92289320", "committedDate": "2020-09-24T17:07:46Z", "message": "Update FrameworkProducer and TransformProducer to support timeouts"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fcb33081afcee3ecb0c80266aa33d33a2610e2df", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/fcb33081afcee3ecb0c80266aa33d33a2610e2df", "committedDate": "2020-09-23T21:23:05Z", "message": "Add failure retry"}, "afterCommit": {"oid": "d9324ea0233883010e903988a8d3bda1bdfc0cd9", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/d9324ea0233883010e903988a8d3bda1bdfc0cd9", "committedDate": "2020-09-24T17:07:47Z", "message": "Add failure retry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d9324ea0233883010e903988a8d3bda1bdfc0cd9", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/d9324ea0233883010e903988a8d3bda1bdfc0cd9", "committedDate": "2020-09-24T17:07:47Z", "message": "Add failure retry"}, "afterCommit": {"oid": "c68bf3621d951090ecdecf8e70437b675ee88437", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/c68bf3621d951090ecdecf8e70437b675ee88437", "committedDate": "2020-09-24T17:46:04Z", "message": "Add failure retry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a231167caf923fb64df027af17d9a0d01bf91e4", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/1a231167caf923fb64df027af17d9a0d01bf91e4", "committedDate": "2020-09-24T19:04:55Z", "message": "Update CDM timeouts to use camel component timeouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/4d3da17aff306d1319a7e885ad360647ae659f3a", "committedDate": "2020-09-24T19:04:55Z", "message": "Add failure retry"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c68bf3621d951090ecdecf8e70437b675ee88437", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/c68bf3621d951090ecdecf8e70437b675ee88437", "committedDate": "2020-09-24T17:46:04Z", "message": "Add failure retry"}, "afterCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/4d3da17aff306d1319a7e885ad360647ae659f3a", "committedDate": "2020-09-24T19:04:55Z", "message": "Add failure retry"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODk3ODcz", "url": "https://github.com/codice/ddf/pull/6339#pullrequestreview-495897873", "createdAt": "2020-09-24T19:44:15Z", "commit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxOTo0NDoxNlrOHXqEfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMDoxMjozMVrOHXq9yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2ODU3NQ==", "bodyText": "This should be in all capital letters.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494568575", "createdAt": "2020-09-24T19:44:16Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/framework/IngestTimeoutException.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+public class IngestTimeoutException extends FrameworkProducerException {\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU2OTUzNw==", "bodyText": "This should be in all capital letters.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494569537", "createdAt": "2020-09-24T19:45:58Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/main/java/ddf/camel/component/catalog/transformer/TransformerTimeoutException.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.transformer;\n+\n+public class TransformerTimeoutException extends RuntimeException {\n+\n+  /** The constant serialVersionUID. */\n+  private static final long serialVersionUID = 1L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTM0NA==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571344", "createdAt": "2020-09-24T19:49:28Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTY0Ng==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571646", "createdAt": "2020-09-24T19:50:03Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MTgwNw==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494571807", "createdAt": "2020-09-24T19:50:21Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/framework/FrameworkProducerTest.java", "diffHunk": "@@ -0,0 +1,178 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.camel.component.catalog.framework;\n+\n+import static org.mockito.Matchers.any;\n+import static org.mockito.Matchers.anyLong;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import ddf.camel.component.catalog.CatalogComponent;\n+import ddf.camel.component.catalog.CatalogEndpoint;\n+import ddf.catalog.CatalogFramework;\n+import ddf.catalog.data.Metacard;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.security.Subject;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Future;\n+import java.util.concurrent.TimeUnit;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.shiro.SecurityUtils;\n+import org.apache.shiro.mgt.SecurityManager;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class FrameworkProducerTest {\n+\n+  private static final String CREATE_OPERATION = \"CREATE\";\n+\n+  private static final String UPDATE_OPERATION = \"UPDATE\";\n+\n+  private static final String DELETE_OPERATION = \"DELETE\";\n+\n+  private static final String OPERATION_HEADER_KEY = \"operation\";\n+\n+  private static final String TIMEOUT_HEADER_KEY = \"timeoutMilliseconds\";\n+\n+  CatalogEndpoint catalogEndpoint;\n+\n+  List<Future<Object>> futures;\n+\n+  FrameworkProducer frameworkProducer;\n+\n+  @Before\n+  public void setup() {\n+    SecurityUtils.setSecurityManager(mock(SecurityManager.class));\n+    when(SecurityUtils.getSubject()).thenReturn(mock(Subject.class));\n+  }\n+\n+  private void setupFrameworkProducer(boolean timeout) throws Exception {\n+    CatalogFramework catalogFramework = mock(CatalogFramework.class);\n+    catalogEndpoint = mock(CatalogEndpoint.class);\n+\n+    CatalogComponent catalogComponent = mock(CatalogComponent.class);\n+    when(catalogEndpoint.getComponent()).thenReturn(catalogComponent);\n+\n+    futures = new ArrayList<>();\n+    Future<Object> future = mock(Future.class);\n+    when(future.isDone()).thenReturn(!timeout);\n+    futures.add(future);\n+\n+    ExecutorService executorService = mock(ExecutorService.class);\n+    when(executorService.invokeAll(any(), anyLong(), any(TimeUnit.class))).thenReturn(futures);\n+    when(catalogEndpoint.getExecutor()).thenReturn(executorService);\n+\n+    frameworkProducer = new FrameworkProducer(catalogEndpoint, catalogFramework);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerCreate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerCreateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(CREATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerUpdate() throws Exception {\n+    setupFrameworkProducer(false);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test(expected = IngestTimeoutException.class)\n+  public void testFrameworkProducerUpdateTimeout() throws Exception {\n+    setupFrameworkProducer(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+    Message message = mock(Message.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(OPERATION_HEADER_KEY)).thenReturn(UPDATE_OPERATION);\n+    when(mockExchange.getIn().getHeader(TIMEOUT_HEADER_KEY)).thenReturn(1000L);\n+\n+    when(mockExchange.getIn().getBody()).thenReturn(new MetacardImpl());\n+    when(mockExchange.getIn().getBody(any())).thenReturn(new MetacardImpl());\n+\n+    frameworkProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testFrameworkProducerDelete() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU3MjI3Ng==", "bodyText": "This test needs a verification.", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494572276", "createdAt": "2020-09-24T19:51:13Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-camelcomponent/src/test/java/ddf/camel/component/catalog/inputtransformer/InputTransformerProducerTest.java", "diffHunk": "@@ -136,4 +166,30 @@ public void testMessageInputStreamIsClosed() throws Exception {\n     inputTransformerProducer.transform(message, \"\", \"\", mimeTypeToTransformerMapper);\n     verify(is).close();\n   }\n+\n+  @Test(expected = TransformerTimeoutException.class)\n+  public void testTransformTimeout() throws Exception {\n+    setupCatalogEndpoint(true);\n+\n+    Exchange mockExchange = mock(Exchange.class);\n+\n+    when(mockExchange.getIn()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getOut()).thenReturn(message);\n+    when(mockExchange.getIn().getHeader(\"timeoutMilliseconds\")).thenReturn(1000L);\n+\n+    inputTransformerProducer.process(mockExchange);\n+  }\n+\n+  @Test\n+  public void testTransformNoTimeout() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDU4MzI0MA==", "bodyText": "Is this going to be addressed in this pull request?", "url": "https://github.com/codice/ddf/pull/6339#discussion_r494583240", "createdAt": "2020-09-24T20:12:31Z", "author": {"login": "cjlange"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitorIT.java", "diffHunk": "@@ -179,10 +180,12 @@ public void setup() throws Exception {\n   }\n \n   @Test\n+  @Ignore // Ignoring for now as the test requires a security manager", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4d3da17aff306d1319a7e885ad360647ae659f3a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "398002e832539fd6c318bdbb05d42bc1ea4d0b95", "author": {"user": {"login": "clockard", "name": "Chris Lockard"}}, "url": "https://github.com/codice/ddf/commit/398002e832539fd6c318bdbb05d42bc1ea4d0b95", "committedDate": "2020-09-25T04:40:02Z", "message": "Camel component test updates"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzY0Njg2", "url": "https://github.com/codice/ddf/pull/6339#pullrequestreview-496364686", "createdAt": "2020-09-25T12:15:13Z", "commit": {"oid": "398002e832539fd6c318bdbb05d42bc1ea4d0b95"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 744, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}