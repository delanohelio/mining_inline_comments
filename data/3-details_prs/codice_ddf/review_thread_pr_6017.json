{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4Nzg1NDg3", "number": 6017, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo0NDo0OFrOD1-8nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo0NDo0OFrOD1-8nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3OTMyNDQ0OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-solr/src/main/java/ddf/catalog/source/solr/DynamicSchemaResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMjo0NDo0OFrOGLrsVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMzoyMDo0NFrOGLsZCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMzM4MQ==", "bodyText": "interesting function... considers going past the top of the world as if you turned back around and walked down.", "url": "https://github.com/codice/ddf/pull/6017#discussion_r414903381", "createdAt": "2020-04-24T22:44:48Z", "author": {"login": "millerw8"}, "path": "catalog/core/catalog-core-solr/src/main/java/ddf/catalog/source/solr/DynamicSchemaResolver.java", "diffHunk": "@@ -430,7 +431,31 @@ private String createCenterPoint(List<Serializable> values) {\n       return null;\n     }\n \n-    return centerPoint.getY() + \",\" + centerPoint.getX();\n+    return normalize(centerPoint);\n+  }\n+\n+  /**\n+   * Normalizes point for coordinate boundary wrapping. Truncates coordinates to a reasonable\n+   * precision.\n+   *\n+   * @return Solr formatted coordinate\n+   */\n+  private String normalize(Point center) {\n+    return DistanceUtils.normLatDEG(truncate(center.getY()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "501f3c115af86c4cfc2338ccf69add77199096a0"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkxNDgyNQ==", "bodyText": "I realized I was starting to write a crappy version of it and then remembered Spatial4j would have the function I needed.  Thankfully it was public and already available to the Solr provider classes.", "url": "https://github.com/codice/ddf/pull/6017#discussion_r414914825", "createdAt": "2020-04-24T23:20:44Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-solr/src/main/java/ddf/catalog/source/solr/DynamicSchemaResolver.java", "diffHunk": "@@ -430,7 +431,31 @@ private String createCenterPoint(List<Serializable> values) {\n       return null;\n     }\n \n-    return centerPoint.getY() + \",\" + centerPoint.getX();\n+    return normalize(centerPoint);\n+  }\n+\n+  /**\n+   * Normalizes point for coordinate boundary wrapping. Truncates coordinates to a reasonable\n+   * precision.\n+   *\n+   * @return Solr formatted coordinate\n+   */\n+  private String normalize(Point center) {\n+    return DistanceUtils.normLatDEG(truncate(center.getY()))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDkwMzM4MQ=="}, "originalCommit": {"oid": "501f3c115af86c4cfc2338ccf69add77199096a0"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4743, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}