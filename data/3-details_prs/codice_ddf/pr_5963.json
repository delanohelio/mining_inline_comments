{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3ODc2NDk5", "number": 5963, "title": "DDF-5962 Support querying quoted phrases with Solr", "bodyText": "What does this PR do?\nAdds support to query quoted phrases with Solr.  See #5962 for more details.\nWho is reviewing it?\n\n@bellcc\n@derekwilhelm\nSelect relevant component teams:\n\n@codice/solr\nAsk 2 committers to review/merge the PR and tag them here.\n\n@Bdthomson\n@rzwiefel\nHow should this be tested?\n\nIngest a record with a field that contains spaces and/or punctuation. If you had a title like This is the title, you should be able to search on title and anyText and match with \"is the\", \"*the title\", and \"This is*\".\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #5962\nScreenshots\n\nChecklist:\n\n[ n/a ] Documentation Updated\n[ n/a ] Update / Add Threat Dragon models\n Update / Add Unit Tests\n[ n/a ] Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-04-03T00:40:53Z", "url": "https://github.com/codice/ddf/pull/5963", "merged": true, "mergeCommit": {"oid": "5287c354e9742ca92df0a719bf51289d8186bd59"}, "closed": true, "closedAt": "2020-04-14T22:50:11Z", "author": {"login": "pklinef"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcT1x6oAH2gAyMzk3ODc2NDk5OmYwNDU3NDkyMzc0NDViMmQzYWIzZWYwZDU0NGE3NzU3NDBlZmVjOWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcV-SA-gFqTM5MDkwMjU1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f045749237445b2d3ab3ef0d544a775740efec9a", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/f045749237445b2d3ab3ef0d544a775740efec9a", "committedDate": "2020-04-03T00:30:08Z", "message": "DDF-5962 Support querying quoted phrases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c", "committedDate": "2020-04-03T00:30:09Z", "message": "DDF-5962 Remove unsupported wildcards from PropertyIsEqualTo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwMzkwMDk4", "url": "https://github.com/codice/ddf/pull/5963#pullrequestreview-390390098", "createdAt": "2020-04-08T23:06:40Z", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNjo0MFrOGDEBxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzowNjo0MFrOGDEBxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2NDkwMw==", "bodyText": "So this only works if the whole thing is quoted.  What if I wanted to do a search where part of the search phrase was quoted?  For example: \"abc 123\" def \"ef gh\".  Couldn't we grab the quoted sections and escape the whitespace characters within the quotes?  Also, my example creates an interesting problem for this code because it actually does start and end with a quote", "url": "https://github.com/codice/ddf/pull/5963#discussion_r405864903", "createdAt": "2020-04-08T23:06:40Z", "author": {"login": "derekwilhelm"}, "path": "catalog/core/catalog-core-solr/src/main/java/ddf/catalog/source/solr/SolrFilterDelegate.java", "diffHunk": "@@ -300,22 +300,34 @@ public SolrQuery propertyIsLike(String propertyName, String pattern, boolean isC\n \n     String searchPhrase = escapeSpecialCharacters(pattern);\n \n-    if (Metacard.ANY_TEXT.equals(propertyName) && SOLR_WILDCARD_CHAR.equals(searchPhrase)) {\n+    boolean isAnyText = Metacard.ANY_TEXT.equals(propertyName);\n+\n+    if (isAnyText && SOLR_WILDCARD_CHAR.equals(searchPhrase)) {\n       return new SolrQuery(\"*:*\");\n     }\n \n-    if (searchPhrase.contains(SOLR_WILDCARD_CHAR)\n-        || searchPhrase.contains(SOLR_SINGLE_WILDCARD_CHAR)) {\n+    boolean isWildcard =\n+        searchPhrase.contains(SOLR_WILDCARD_CHAR)\n+            || searchPhrase.contains(SOLR_SINGLE_WILDCARD_CHAR);\n+\n+    boolean isQuotedPhrase = pattern.startsWith(\"\\\"\") && pattern.endsWith(\"\\\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDAzNzky", "url": "https://github.com/codice/ddf/pull/5963#pullrequestreview-390403792", "createdAt": "2020-04-08T23:45:13Z", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzo0NToxM1rOGDExWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMzo0NToxM1rOGDExWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg3NzA4Mw==", "bodyText": "\u2753 Could the query returns for isQuotedPhrase and isWildcard now get moved to the earlier if block? Actually I think the logic could be simplified as separate blocks now:\nif (isQuotedPhrase) {\n... \nreturn new SolrQuery(...);\n}\n\nif (isWildcard) {\n...\nreturn new SolrQuery(...);\n}\n\n// Not an exact phrase\nsearchPhrase = QUOTE + searchPhrase + QUOTE;\n\nif (isCaseSensitive) {\n...\n}\nreturn new SolrQuery(...);\n\nI realize this might be a matter of preference, but the decreased nesting would help me consume this faster. Assuming I'm correct this is a valid refactor and I'm not missing something.", "url": "https://github.com/codice/ddf/pull/5963#discussion_r405877083", "createdAt": "2020-04-08T23:45:13Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-solr/src/main/java/ddf/catalog/source/solr/SolrFilterDelegate.java", "diffHunk": "@@ -300,22 +300,34 @@ public SolrQuery propertyIsLike(String propertyName, String pattern, boolean isC\n \n     String searchPhrase = escapeSpecialCharacters(pattern);\n \n-    if (Metacard.ANY_TEXT.equals(propertyName) && SOLR_WILDCARD_CHAR.equals(searchPhrase)) {\n+    boolean isAnyText = Metacard.ANY_TEXT.equals(propertyName);\n+\n+    if (isAnyText && SOLR_WILDCARD_CHAR.equals(searchPhrase)) {\n       return new SolrQuery(\"*:*\");\n     }\n \n-    if (searchPhrase.contains(SOLR_WILDCARD_CHAR)\n-        || searchPhrase.contains(SOLR_SINGLE_WILDCARD_CHAR)) {\n+    boolean isWildcard =\n+        searchPhrase.contains(SOLR_WILDCARD_CHAR)\n+            || searchPhrase.contains(SOLR_SINGLE_WILDCARD_CHAR);\n+\n+    boolean isQuotedPhrase = pattern.startsWith(\"\\\"\") && pattern.endsWith(\"\\\"\");\n+\n+    if (isQuotedPhrase) {\n+      searchPhrase =\n+          searchPhrase.substring(2, searchPhrase.length() - 2).replaceAll(\"\\\\s\", \"\\\\\\\\ \");\n+      if (!isWildcard) {\n+        searchPhrase = SOLR_WILDCARD_CHAR + searchPhrase + SOLR_WILDCARD_CHAR;\n+      }\n+    } else if (isWildcard) {\n       searchPhrase = \"(\" + searchPhrase + \")\";\n     } else {\n       // Not an exact phrase\n       searchPhrase = QUOTE + searchPhrase + QUOTE;\n     }\n \n-    if (searchPhrase.contains(SOLR_WILDCARD_CHAR)\n-        || searchPhrase.contains(SOLR_SINGLE_WILDCARD_CHAR)\n-        || Metacard.ANY_TEXT.equals(propertyName)) {\n-\n+    if (isQuotedPhrase) {\n+      return new SolrQuery(wildcardSolrQuery(searchPhrase, propertyName, isCaseSensitive, true));\n+    } else if (isWildcard || isAnyText) {\n       return new SolrQuery(wildcardSolrQuery(searchPhrase, propertyName, isCaseSensitive, false));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDA3MzA2", "url": "https://github.com/codice/ddf/pull/5963#pullrequestreview-390407306", "createdAt": "2020-04-08T23:55:36Z", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwNDI2MTY3", "url": "https://github.com/codice/ddf/pull/5963#pullrequestreview-390426167", "createdAt": "2020-04-09T00:56:29Z", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwODgwMDY5", "url": "https://github.com/codice/ddf/pull/5963#pullrequestreview-390880069", "createdAt": "2020-04-09T15:07:03Z", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkwOTAyNTUx", "url": "https://github.com/codice/ddf/pull/5963#pullrequestreview-390902551", "createdAt": "2020-04-09T15:32:17Z", "commit": {"oid": "4ba5d099f82e4176e36f1a1bcaeb02d9293fb70c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4893, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}