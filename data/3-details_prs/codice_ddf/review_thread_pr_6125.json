{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMDcxNjAz", "number": 6125, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MzozN1rOEIFz2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NDowMlrOEIfPrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTE5MjU4OnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientFactoryBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0MzozN1rOGn2ATg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToxNTo1OFrOGn3GoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMjQ2Mg==", "bodyText": "\u2753 What value do we get from this being an interface? It doesn't hide any dependencies, and would need to change whenever the builder adds or removes arguments", "url": "https://github.com/codice/ddf/pull/6125#discussion_r444432462", "createdAt": "2020-06-23T18:43:37Z", "author": {"login": "SmithJosh"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41909c4d955f60f7a4c026ebc46b0e0495b760c6"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MDQ2NA==", "bodyText": "Yes, it would have to change, I couldn't see a way around that.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r444450464", "createdAt": "2020-06-23T19:15:58Z", "author": {"login": "stustison"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzMjQ2Mg=="}, "originalCommit": {"oid": "41909c4d955f60f7a4c026ebc46b0e0495b760c6"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIwNDM2OnYy", "diffSide": "RIGHT", "path": "catalog/spatial/wfs/2.0.0/spatial-wfs-v2_0_0-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/v2_0_0/catalog/source/WfsSource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo0Njo1MFrOGn2HpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxOToyMjo1NFrOGn3UiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNDM0MQ==", "bodyText": "\u2753 Can we make this a completely fluent api? It would be nice if we didn't have to see the builder at all. I'm imagining something like:\nClientFactory clientFactory = clientFactory.builder()\n    .prop1()\n    .prop2()\n    .build()", "url": "https://github.com/codice/ddf/pull/6125#discussion_r444434341", "createdAt": "2020-06-23T18:46:50Z", "author": {"login": "SmithJosh"}, "path": "catalog/spatial/wfs/2.0.0/spatial-wfs-v2_0_0-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/v2_0_0/catalog/source/WfsSource.java", "diffHunk": "@@ -341,47 +342,53 @@ public void refresh(Map<String, Object> configuration) {\n \n   /* This method should only be called after all properties have been set. */\n   private void createClientFactory() {\n+    ClientFactoryBuilder<Wfs> clientFactoryBuilder = clientFactory.getClientFactoryBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41909c4d955f60f7a4c026ebc46b0e0495b760c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1MDE4NA==", "bodyText": "I mean, you don't technically have to see it right now, I just chose to put it on two lines.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r444450184", "createdAt": "2020-06-23T19:15:27Z", "author": {"login": "stustison"}, "path": "catalog/spatial/wfs/2.0.0/spatial-wfs-v2_0_0-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/v2_0_0/catalog/source/WfsSource.java", "diffHunk": "@@ -341,47 +342,53 @@ public void refresh(Map<String, Object> configuration) {\n \n   /* This method should only be called after all properties have been set. */\n   private void createClientFactory() {\n+    ClientFactoryBuilder<Wfs> clientFactoryBuilder = clientFactory.getClientFactoryBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNDM0MQ=="}, "originalCommit": {"oid": "41909c4d955f60f7a4c026ebc46b0e0495b760c6"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQ1NDAyNQ==", "bodyText": "Oh lol. Well I guess then just take this as a statement of my preference of using the API fluently \ud83d\ude04", "url": "https://github.com/codice/ddf/pull/6125#discussion_r444454025", "createdAt": "2020-06-23T19:22:54Z", "author": {"login": "SmithJosh"}, "path": "catalog/spatial/wfs/2.0.0/spatial-wfs-v2_0_0-source/src/main/java/org/codice/ddf/spatial/ogc/wfs/v2_0_0/catalog/source/WfsSource.java", "diffHunk": "@@ -341,47 +342,53 @@ public void refresh(Map<String, Object> configuration) {\n \n   /* This method should only be called after all properties have been set. */\n   private void createClientFactory() {\n+    ClientFactoryBuilder<Wfs> clientFactoryBuilder = clientFactory.getClientFactoryBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzNDM0MQ=="}, "originalCommit": {"oid": "41909c4d955f60f7a4c026ebc46b0e0495b760c6"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2OTIzMTA3OnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientFactoryBuilder.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1NDo0NFrOGn2YnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxODo1NDo0NFrOGn2YnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDQzODY4NA==", "bodyText": "I would love to see this API combine some of these parameters such that they're not all top-level. For example:\nbuilder.withBasic(\"username\", \"password\").build()\n\nor\nbuilder\n    .withOAuth()   // Have this return some object that builds oauth configuration\n        .clientId(\"client\")\n        .clientSecret(\"secret\")\n        .oauthFlow(\"authorization_code\")\n        .additionalParameters(...)\n        .and()    // Return the original builder\n    .build()\n\nThat would make it much clearer how to use the API to properly conflgure the client", "url": "https://github.com/codice/ddf/pull/6125#discussion_r444438684", "createdAt": "2020-06-23T18:54:44Z", "author": {"login": "SmithJosh"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientFactoryBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> interfaceClass(Class<T> interfaceClass);\n+\n+  ClientFactoryBuilder<T> entityProviders(List<? extends Object> entityProviders);\n+\n+  ClientFactoryBuilder<T> interceptor(Interceptor<? extends Message> interceptor);\n+\n+  /**\n+   * Turns the CN check off when performing a TLS/SSL connection. This is for test only.\n+   *\n+   * @param disableCnCheck\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> disableCnCheck(boolean disableCnCheck);\n+\n+  /**\n+   * Whether or not to allow the client to follow redirects.\n+   *\n+   * @param allowRedirects\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> allowRedirects(boolean allowRedirects);\n+\n+  /**\n+   * Time before the connection will fail with no reply.\n+   *\n+   * @param connectionTimeout\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> connectionTimeout(Integer connectionTimeout);\n+\n+  /**\n+   * Time before connection will fail with no response.\n+   *\n+   * @param receiveTimeout\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> receiveTimeout(Integer receiveTimeout);\n+\n+  /**\n+   * Username to use with BASIC authentication.\n+   *\n+   * @param username\n+   * @return\n+   */\n+  ClientFactoryBuilder<T> username(String username);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41909c4d955f60f7a4c026ebc46b0e0495b760c6"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjkyODI2OnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilderFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNjo0NjoxN1rOGoakVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzo0NTowM1rOGocoXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTUxMQ==", "bodyText": "\u270f\ufe0f We should be consistent in what we call this thing", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445031511", "createdAt": "2020-06-24T16:46:17Z", "author": {"login": "SmithJosh"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilderFactory.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+/**\n+ * Factory class for creating secure CXF client factory builder\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilderFactory {\n+  <T> ClientBuilder<T> getClientFactoryBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52f535a1667560416889fb9717d8874de3aafa66"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA2NTMwOA==", "bodyText": "This was an artifact of the refactor.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445065308", "createdAt": "2020-06-24T17:45:03Z", "author": {"login": "stustison"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilderFactory.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+/**\n+ * Factory class for creating secure CXF client factory builder\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilderFactory {\n+  <T> ClientBuilder<T> getClientFactoryBuilder();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTAzMTUxMQ=="}, "originalCommit": {"oid": "52f535a1667560416889fb9717d8874de3aafa66"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzMxMDMwOnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODozOToyNlrOGoedkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODozOToyNlrOGoedkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5NTMxMg==", "bodyText": "\u2753 What are your thoughts about changing this method to actually take java.net.URL?  That would make sure the builder is always taking in a valid URL.  You could convert it back to string in ClientBuilderImpl setter or before calling the factory.\nThis currently feels like we are leaking implementation details that JAXRSClientFactoryBean taking addresses as Strings and Config Admin/system property addresses are also Strings.  The first time we find out the values are incorrect is way down in CXF code.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445095312", "createdAt": "2020-06-24T18:39:26Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzMzMTIzOnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo0NTozOVrOGoeqqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOTozNToxOVrOGogRxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5ODY2NA==", "bodyText": "\u270f\ufe0f Class in the method name feels redundant with the argument type.  interface(Class<T>) should get the same point across.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445098664", "createdAt": "2020-06-24T18:45:39Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNzcwNg==", "bodyText": "Ah, I know why I did it with \"Class\" in there. Interface is a keyword and it won't let me. :)", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445117706", "createdAt": "2020-06-24T19:20:54Z", "author": {"login": "stustison"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5ODY2NA=="}, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyMTc0NA==", "bodyText": "Ah, that makes sense. Thank you for verifying and sharing.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445121744", "createdAt": "2020-06-24T19:28:43Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5ODY2NA=="}, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEyNTA2Mg==", "bodyText": "Some alternatives would be forInterface and withInterface.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445125062", "createdAt": "2020-06-24T19:35:19Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5ODY2NA=="}, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzMzOTUwOnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo0Nzo1OVrOGoevxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo0Nzo1OVrOGoevxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5OTk3Mw==", "bodyText": "\u2753 Thoughts on making keystorePath an actual java.nio.file.Path?\nIt is always nice to use a well typed parameter if one exists instead of a String where possible.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445099973", "createdAt": "2020-06-24T18:47:59Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);\n+\n+  ClientBuilder<T> entityProviders(List<? extends Object> entityProviders);\n+\n+  ClientBuilder<T> interceptor(Interceptor<? extends Message> interceptor);\n+\n+  /**\n+   * Turns the CN check off when performing a TLS/SSL connection. This is for test only.\n+   *\n+   * @param disableCnCheck\n+   * @return\n+   */\n+  ClientBuilder<T> disableCnCheck(boolean disableCnCheck);\n+\n+  /**\n+   * Whether or not to allow the client to follow redirects.\n+   *\n+   * @param allowRedirects\n+   * @return\n+   */\n+  ClientBuilder<T> allowRedirects(boolean allowRedirects);\n+\n+  /**\n+   * Time before the connection will fail with no reply.\n+   *\n+   * @param connectionTimeout\n+   * @return\n+   */\n+  ClientBuilder<T> connectionTimeout(Integer connectionTimeout);\n+\n+  /**\n+   * Time before connection will fail with no response.\n+   *\n+   * @param receiveTimeout\n+   * @return\n+   */\n+  ClientBuilder<T> receiveTimeout(Integer receiveTimeout);\n+\n+  /**\n+   * Username to use with BASIC authentication.\n+   *\n+   * @param username\n+   * @return\n+   */\n+  ClientBuilder<T> username(String username);\n+\n+  /**\n+   * Password to use with BASIC authentication\n+   *\n+   * @param password\n+   * @return\n+   */\n+  ClientBuilder<T> password(String password);\n+\n+  /**\n+   * Key info to use when setting up TLS connection. In general this shouldn't need to be configured\n+   * as the system will use whatever is set to use via the standard system properties.\n+   *\n+   * @param certAlias\n+   * @param keystorePath\n+   * @return\n+   */\n+  ClientBuilder<T> clientKeyInfo(String certAlias, String keystorePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM1NzI5OnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1MzoxNVrOGoe69Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1MzoxNVrOGoe69Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwMjgzNw==", "bodyText": "Too bad there is not an enum in Java for the SSL protocols.\nhttps://docs.oracle.com/javase/7/docs/technotes/guides/security/StandardNames.html#SSLContext", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445102837", "createdAt": "2020-06-24T18:53:15Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);\n+\n+  ClientBuilder<T> entityProviders(List<? extends Object> entityProviders);\n+\n+  ClientBuilder<T> interceptor(Interceptor<? extends Message> interceptor);\n+\n+  /**\n+   * Turns the CN check off when performing a TLS/SSL connection. This is for test only.\n+   *\n+   * @param disableCnCheck\n+   * @return\n+   */\n+  ClientBuilder<T> disableCnCheck(boolean disableCnCheck);\n+\n+  /**\n+   * Whether or not to allow the client to follow redirects.\n+   *\n+   * @param allowRedirects\n+   * @return\n+   */\n+  ClientBuilder<T> allowRedirects(boolean allowRedirects);\n+\n+  /**\n+   * Time before the connection will fail with no reply.\n+   *\n+   * @param connectionTimeout\n+   * @return\n+   */\n+  ClientBuilder<T> connectionTimeout(Integer connectionTimeout);\n+\n+  /**\n+   * Time before connection will fail with no response.\n+   *\n+   * @param receiveTimeout\n+   * @return\n+   */\n+  ClientBuilder<T> receiveTimeout(Integer receiveTimeout);\n+\n+  /**\n+   * Username to use with BASIC authentication.\n+   *\n+   * @param username\n+   * @return\n+   */\n+  ClientBuilder<T> username(String username);\n+\n+  /**\n+   * Password to use with BASIC authentication\n+   *\n+   * @param password\n+   * @return\n+   */\n+  ClientBuilder<T> password(String password);\n+\n+  /**\n+   * Key info to use when setting up TLS connection. In general this shouldn't need to be configured\n+   * as the system will use whatever is set to use via the standard system properties.\n+   *\n+   * @param certAlias\n+   * @param keystorePath\n+   * @return\n+   */\n+  ClientBuilder<T> clientKeyInfo(String certAlias, String keystorePath);\n+\n+  /**\n+   * SSL/TLS protocol to use. This shouldn't need to be used in most instances.\n+   *\n+   * @param sslProtocol\n+   * @return\n+   */\n+  ClientBuilder<T> sslProtocol(String sslProtocol);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzM1OTgxOnYy", "diffSide": "RIGHT", "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NDowMlrOGoe8gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODo1NDowMlrOGoe8gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTEwMzIzMw==", "bodyText": "\u2753 Same question about the URL type here too.", "url": "https://github.com/codice/ddf/pull/6125#discussion_r445103233", "createdAt": "2020-06-24T18:54:02Z", "author": {"login": "pklinef"}, "path": "platform/security/rest/security-rest-clientapi/src/main/java/org/codice/ddf/cxf/client/ClientBuilder.java", "diffHunk": "@@ -0,0 +1,189 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.cxf.client;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.cxf.interceptor.Interceptor;\n+import org.apache.cxf.message.Message;\n+import org.codice.ddf.configuration.PropertyResolver;\n+\n+/**\n+ * Builder class for creating secure CXF client factory objects that can generate WebClients\n+ *\n+ * <p><b> This code is experimental. While this interface is functional and tested, it may change or\n+ * be * removed in a future version of the library. </b>\n+ */\n+public interface ClientBuilder<T> {\n+\n+  SecureCxfClientFactory<T> build();\n+\n+  /**\n+   * The endpoint the client should connect to.\n+   *\n+   * @param endpointUrl\n+   * @return\n+   */\n+  ClientBuilder<T> endpointUrl(String endpointUrl);\n+\n+  /**\n+   * The JAX-RS interface class/type that represents the endpoint\n+   *\n+   * @param interfaceClass\n+   * @return\n+   */\n+  ClientBuilder<T> interfaceClass(Class<T> interfaceClass);\n+\n+  ClientBuilder<T> entityProviders(List<? extends Object> entityProviders);\n+\n+  ClientBuilder<T> interceptor(Interceptor<? extends Message> interceptor);\n+\n+  /**\n+   * Turns the CN check off when performing a TLS/SSL connection. This is for test only.\n+   *\n+   * @param disableCnCheck\n+   * @return\n+   */\n+  ClientBuilder<T> disableCnCheck(boolean disableCnCheck);\n+\n+  /**\n+   * Whether or not to allow the client to follow redirects.\n+   *\n+   * @param allowRedirects\n+   * @return\n+   */\n+  ClientBuilder<T> allowRedirects(boolean allowRedirects);\n+\n+  /**\n+   * Time before the connection will fail with no reply.\n+   *\n+   * @param connectionTimeout\n+   * @return\n+   */\n+  ClientBuilder<T> connectionTimeout(Integer connectionTimeout);\n+\n+  /**\n+   * Time before connection will fail with no response.\n+   *\n+   * @param receiveTimeout\n+   * @return\n+   */\n+  ClientBuilder<T> receiveTimeout(Integer receiveTimeout);\n+\n+  /**\n+   * Username to use with BASIC authentication.\n+   *\n+   * @param username\n+   * @return\n+   */\n+  ClientBuilder<T> username(String username);\n+\n+  /**\n+   * Password to use with BASIC authentication\n+   *\n+   * @param password\n+   * @return\n+   */\n+  ClientBuilder<T> password(String password);\n+\n+  /**\n+   * Key info to use when setting up TLS connection. In general this shouldn't need to be configured\n+   * as the system will use whatever is set to use via the standard system properties.\n+   *\n+   * @param certAlias\n+   * @param keystorePath\n+   * @return\n+   */\n+  ClientBuilder<T> clientKeyInfo(String certAlias, String keystorePath);\n+\n+  /**\n+   * SSL/TLS protocol to use. This shouldn't need to be used in most instances.\n+   *\n+   * @param sslProtocol\n+   * @return\n+   */\n+  ClientBuilder<T> sslProtocol(String sslProtocol);\n+\n+  /**\n+   * Source ID for OAuth.\n+   *\n+   * @param sourceId\n+   * @return\n+   */\n+  ClientBuilder<T> sourceId(String sourceId);\n+\n+  /**\n+   * Discovery URL for OAuth.\n+   *\n+   * @param discoveryUrl\n+   * @return\n+   */\n+  ClientBuilder<T> discoveryUrl(String discoveryUrl);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fd591314850eec368f408ad78a3d13196886f0a"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4623, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}