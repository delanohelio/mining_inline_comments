{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY5ODAwNjg3", "number": 6251, "title": "Log unhandled exceptions during federation strategy future execution", "bodyText": "What does this PR do?\n\nAdded a future monitor to SortedFederationStrategy to watch for\nunhandled exceptions while monitoring source responses or offsetting\nresults to log, close the queue, and add processing details\nAdded additional logging in catalog framework to log unhandled\nexceptions and query processing details\nFixed a bug where QueryResponseImpl would set its timeout to 0 from\nthe QueryImpl default value which for Query means no timeout but in\nQueryResponseImpl would disable blocking for all take/poll methods\n\nWho is reviewing it?\n\n@derekwilhelm\nSelect relevant component teams:\n\nAsk 2 committers to review/merge the PR and tag them here.\n\n@rzwiefel\n@stustison\n@coyotesqrl\nHow should this be tested?\n\nMake a PostFederatedQueryPlugin throw a runtime exception and verify the query returns with processing details about the exception.\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: n/a\nScreenshots\n\nChecklist:\n\n[ n/a ] Documentation Updated\n[ n/a ] Update / Add Threat Dragon models\n Update / Add Unit Tests\n[ n/a ] Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-08-18T23:35:46Z", "url": "https://github.com/codice/ddf/pull/6251", "merged": true, "mergeCommit": {"oid": "67f76f9eb62a8df9cb31038fa7b770a9cacf9889"}, "closed": true, "closedAt": "2020-09-01T01:34:31Z", "author": {"login": "pklinef"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAaiMdgFqTQ3MDM5NDMwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEa7BgABqjM3MTE5ODE1MTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMzk0MzAy", "url": "https://github.com/codice/ddf/pull/6251#pullrequestreview-470394302", "createdAt": "2020-08-19T12:12:08Z", "commit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTI4MzQ1", "url": "https://github.com/codice/ddf/pull/6251#pullrequestreview-470528345", "createdAt": "2020-08-19T14:41:06Z", "commit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNjQ2ODA2", "url": "https://github.com/codice/ddf/pull/6251#pullrequestreview-470646806", "createdAt": "2020-08-19T16:40:42Z", "commit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0NTM4OTA1", "url": "https://github.com/codice/ddf/pull/6251#pullrequestreview-474538905", "createdAt": "2020-08-25T14:28:34Z", "commit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDoyODozNVrOHGa16A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQxNDozNDoyNlrOHGbHeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5MzI4OA==", "bodyText": "\u270f\ufe0f Might be good to create a custom subclass of RuntimeException for use here, especially as it would allow for the code that catches the exception to handle it differently from other RTExceptions.", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476493288", "createdAt": "2020-08-25T14:28:35Z", "author": {"login": "coyotesqrl"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -332,4 +337,34 @@ public void run() {\n       offsetResultQueue.closeResultQueue();\n     }\n   }\n+\n+  /**\n+   * Logs unhandled Throwable, adds processing details, and closes the result queue when Errors\n+   * (e.g. NoClassDefFoundError) and RuntimeExceptions are thrown from the wrapped runnable.\n+   */\n+  static class QueryResponseRunnableMonitor implements Runnable {\n+\n+    final Runnable wrapped;\n+\n+    final QueryResponseImpl queryResponse;\n+\n+    QueryResponseRunnableMonitor(Runnable runnable, QueryResponseImpl queryResponse) {\n+      wrapped = runnable;\n+      this.queryResponse = queryResponse;\n+    }\n+\n+    @Override\n+    public void run() {\n+      try {\n+        wrapped.run();\n+      } catch (Throwable t) {\n+        LOGGER.debug(\"Unhandled exception while watching query response runnable.\", t);\n+        queryResponse\n+            .getProcessingDetails()\n+            .add(new ProcessingDetailsImpl(\"unknown\", new RuntimeException(t)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjQ5Nzc4Ng==", "bodyText": "\u270f\ufe0f !isEmpty() instead of size check.", "url": "https://github.com/codice/ddf/pull/6251#discussion_r476497786", "createdAt": "2020-08-25T14:34:26Z", "author": {"login": "coyotesqrl"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/QueryOperations.java", "diffHunk": "@@ -219,18 +219,38 @@ QueryResponse query(\n       queryResponse = processPostQueryAccessPlugins(queryResponse);\n       queryResponse = processPostQueryPlugins(queryResponse);\n \n-      LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n-      LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+      log(queryResponse);\n \n     } catch (OAuthPluginException e) {\n       throw e;\n     } catch (RuntimeException re) {\n+      LOGGER.debug(\"Unhandled runtime exception during query\", re);\n       throw new UnsupportedQueryException(\"Exception during runtime while performing query\", re);\n     }\n \n     return queryResponse;\n   }\n \n+  private void log(QueryResponse queryResponse) {\n+    LOGGER.trace(\"AfterPostQueryFilter result size: {}\", queryResponse.getResults().size());\n+    LOGGER.trace(\"Total Hit count: {}\", queryResponse.getHits());\n+    if (LOGGER.isTraceEnabled() && queryResponse.getProcessingDetails() != null) {\n+      LOGGER.trace(\"Processing details count: {}\", queryResponse.getProcessingDetails().size());\n+      for (ProcessingDetails details : queryResponse.getProcessingDetails()) {\n+        if (details.getException() != null) {\n+          LOGGER.trace(\n+              \"Source [{}] query exception\", details.getSourceId(), details.getException());\n+        }\n+        if (details.getWarnings() != null && details.getWarnings().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59"}, "originalPosition": 28}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "614b70c269ce62403f4365fd6c6188a1957b4b59", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/614b70c269ce62403f4365fd6c6188a1957b4b59", "committedDate": "2020-08-18T23:33:52Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}, "afterCommit": {"oid": "afa9e9ec57d945706c90f5e0b0594976d9452a09", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/afa9e9ec57d945706c90f5e0b0594976d9452a09", "committedDate": "2020-08-25T18:35:33Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "afa9e9ec57d945706c90f5e0b0594976d9452a09", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/afa9e9ec57d945706c90f5e0b0594976d9452a09", "committedDate": "2020-08-25T18:35:33Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}, "afterCommit": {"oid": "c6f74b36aa65eaa8ba63f4a53cc58c54ff26db40", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/c6f74b36aa65eaa8ba63f4a53cc58c54ff26db40", "committedDate": "2020-08-26T19:53:59Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c6f74b36aa65eaa8ba63f4a53cc58c54ff26db40", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/c6f74b36aa65eaa8ba63f4a53cc58c54ff26db40", "committedDate": "2020-08-26T19:53:59Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}, "afterCommit": {"oid": "db80c0e6238c95bd87bfc5fcafb79583ada3f5e3", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/db80c0e6238c95bd87bfc5fcafb79583ada3f5e3", "committedDate": "2020-08-28T20:13:40Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "db80c0e6238c95bd87bfc5fcafb79583ada3f5e3", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/db80c0e6238c95bd87bfc5fcafb79583ada3f5e3", "committedDate": "2020-08-28T20:13:40Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}, "afterCommit": {"oid": "8c6d237443d1c784a3b6731d14888440c706cdb9", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/8c6d237443d1c784a3b6731d14888440c706cdb9", "committedDate": "2020-08-31T20:18:53Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e6f4f18a45591258fa145dc9020653898c700ab", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/4e6f4f18a45591258fa145dc9020653898c700ab", "committedDate": "2020-08-31T22:54:26Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c6d237443d1c784a3b6731d14888440c706cdb9", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/8c6d237443d1c784a3b6731d14888440c706cdb9", "committedDate": "2020-08-31T20:18:53Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}, "afterCommit": {"oid": "4e6f4f18a45591258fa145dc9020653898c700ab", "author": {"user": {"login": "pklinef", "name": "Phil Klinefelter"}}, "url": "https://github.com/codice/ddf/commit/4e6f4f18a45591258fa145dc9020653898c700ab", "committedDate": "2020-08-31T22:54:26Z", "message": "Log unhandled exceptions during federation strategy future execution\n\n- Added a future monitor to SortedFederationStrategy to watch for\n  unhandled exceptions while monitoring source responses or offsetting\n  results to log, close the queue, and add processing details\n- Added additional logging in catalog framework to log unhandled\n  exceptions and query processing details\n- Fixed a bug where QueryResponseImpl would set its timeout to 0 from\n  the QueryImpl default value which for Query means no timeout but in\n  QueryResponseImpl would disable blocking for all take/poll methods"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 873, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}