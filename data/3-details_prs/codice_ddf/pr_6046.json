{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTEwMDY4", "number": 6046, "title": "[2.21.x] Enhanced catalog framework to support retrieval of derived resources", "bodyText": "What does this PR do?\nEnhances the resource operations to handle a special case where a qualifier is present on the request to reference a specific derived resource to retrieve instead of the main resource.\nWho is reviewing it?\n\nSelect relevant component teams:\n@mcalcote\n@peterhuffer\nAsk 2 committers to review/merge the PR and tag them here.\n@figliold\n@pklinef\n@stustison\n\nHow should this be tested?\n\n\ningest something that will generate derived resources\nsend a REST request for a retrieving a resource for the metacard and add &QUALIFIER=xxx to the URL (e.g. /services/catalog/{id}?QUALIFIER=xxx). Where xxx represents the qualifier of a derived resource\nThe derived resource should be returned instead of the main resource\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #____\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-05-06T06:51:20Z", "url": "https://github.com/codice/ddf/pull/6046", "merged": true, "mergeCommit": {"oid": "afbfbf10e1ecc72ebbf4c54a7f0ef4e312acc0bd"}, "closed": true, "closedAt": "2020-05-07T23:42:15Z", "author": {"login": "paouelle"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcerKHxgFqTQwNjc3NTI5MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcfFmy1AFqTQwNzg5NjUzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2Nzc1Mjkw", "url": "https://github.com/codice/ddf/pull/6046#pullrequestreview-406775290", "createdAt": "2020-05-06T16:17:53Z", "commit": {"oid": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxNzo1M1rOGRa2cQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjoxNzo1M1rOGRa2cQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkxODg5Nw==", "bodyText": "\u2757 I do not think the ID case is secure.  Redacted metacards will always contain their ID.  The RESOURCE_URI case should be safe since the resource URI would be redacted or filtered if you did not have access to it.\nIf request by ID is made, we should at least check if the resource URI is present.", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420918897", "createdAt": "2020-05-06T16:17:53Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java", "diffHunk": "@@ -577,18 +634,35 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      }\n+      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n+        // no need to actually perform the query, just create a resource info with the metacard\n+        LOGGER.debug(\"get resource by metacard\");\n+        final Metacard metacard = (Metacard) value;\n+        final String metacardId = metacard.getId();\n \n-      QueryRequest queryRequest =\n-          new QueryRequestImpl(\n-              anyTag(query, site, isEnterprise),\n-              isEnterprise,\n-              Collections.singletonList(site == null ? this.getId() : site),\n-              resourceRequest.getProperties());\n+        LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n+        if (!requestProperties.containsKey(Metacard.ID)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef"}, "originalPosition": 121}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA2NzkzNDIz", "url": "https://github.com/codice/ddf/pull/6046#pullrequestreview-406793423", "createdAt": "2020-05-06T16:39:40Z", "commit": {"oid": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjozOTo0MVrOGRbv7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxNjo0MToxNFrOGRb0EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw==", "bodyText": "\u2757 I'm not sure that this is exactly true. You may not need to perform the query in order to do this operation, but we count on this rolling through all of the security plugins around query in order to restrict who can view what metacards. Doing this, you're bypassing all of that logic and allowing someone to go straight to a resource. They could even brute force their way to any resource the system knows about.", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420933613", "createdAt": "2020-05-06T16:39:41Z", "author": {"login": "stustison"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java", "diffHunk": "@@ -577,18 +634,35 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      }\n+      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n+        // no need to actually perform the query, just create a resource info with the metacard", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzNDY3Mg==", "bodyText": "You have two options, as I see it. You can manually roll through the plugins here (not as desirable imo), or you can add implementations to the resource sections of the policy and access plugins (better) so we don't need to worry about this in the future, and you can continue to skip the query at this point.", "url": "https://github.com/codice/ddf/pull/6046#discussion_r420934672", "createdAt": "2020-05-06T16:41:14Z", "author": {"login": "stustison"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/impl/operations/ResourceOperations.java", "diffHunk": "@@ -577,18 +634,35 @@ protected ResourceInfo getResourceInfo(\n         String metacardId = (String) value;\n         LOGGER.debug(\"metacardId = {},   site = {}\", metacardId, site);\n         query = createMetacardIdQuery(metacardId);\n-      }\n+      } else if (ResourceRequest.GET_RESOURCE_BY_METACARD.equals(name)) {\n+        // no need to actually perform the query, just create a resource info with the metacard", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDkzMzYxMw=="}, "originalCommit": {"oid": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93b7678f4aa73e188d0dc16ed8fa022202028b0d", "author": {"user": {"login": "paouelle", "name": "Patrick Ouellet"}}, "url": "https://github.com/codice/ddf/commit/93b7678f4aa73e188d0dc16ed8fa022202028b0d", "committedDate": "2020-05-06T21:03:15Z", "message": "Added support for retrieving derived resources instead of the metacard resource in the catalog framework"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca88807865511be254670c98d8cda4c7f7d514ff", "author": {"user": {"login": "paouelle", "name": "Patrick Ouellet"}}, "url": "https://github.com/codice/ddf/commit/ca88807865511be254670c98d8cda4c7f7d514ff", "committedDate": "2020-05-06T21:11:54Z", "message": "Fixed jacoco numbers"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "451fa43c2d6ca80475407888e8d78cfbaaaf0fef", "author": {"user": {"login": "paouelle", "name": "Patrick Ouellet"}}, "url": "https://github.com/codice/ddf/commit/451fa43c2d6ca80475407888e8d78cfbaaaf0fef", "committedDate": "2020-05-06T06:45:26Z", "message": "Added support for retrieving resources in the catalog framework when the metacard is already loaded.\nEnhanced the resource metacard transformer to take advantage of this new resource request feature.\nEnhanced the resource operations to also handle special case where a qualifer is present on the request to reference\na specific derived resource to retrieve instead of the main resource."}, "afterCommit": {"oid": "ca88807865511be254670c98d8cda4c7f7d514ff", "author": {"user": {"login": "paouelle", "name": "Patrick Ouellet"}}, "url": "https://github.com/codice/ddf/commit/ca88807865511be254670c98d8cda4c7f7d514ff", "committedDate": "2020-05-06T21:11:54Z", "message": "Fixed jacoco numbers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4c05a5375b19659bf453e6e748ecd015dd6e69c", "author": {"user": {"login": "paouelle", "name": "Patrick Ouellet"}}, "url": "https://github.com/codice/ddf/commit/a4c05a5375b19659bf453e6e748ecd015dd6e69c", "committedDate": "2020-05-07T13:59:52Z", "message": "Updated query parameter key to match other places"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTA4Mjcz", "url": "https://github.com/codice/ddf/pull/6046#pullrequestreview-407508273", "createdAt": "2020-05-07T14:08:00Z", "commit": {"oid": "a4c05a5375b19659bf453e6e748ecd015dd6e69c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTYxNjY0", "url": "https://github.com/codice/ddf/pull/6046#pullrequestreview-407561664", "createdAt": "2020-05-07T15:01:12Z", "commit": {"oid": "a4c05a5375b19659bf453e6e748ecd015dd6e69c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NTk4OTk2", "url": "https://github.com/codice/ddf/pull/6046#pullrequestreview-407598996", "createdAt": "2020-05-07T15:40:53Z", "commit": {"oid": "a4c05a5375b19659bf453e6e748ecd015dd6e69c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3ODk2NTMx", "url": "https://github.com/codice/ddf/pull/6046#pullrequestreview-407896531", "createdAt": "2020-05-07T23:09:38Z", "commit": {"oid": "a4c05a5375b19659bf453e6e748ecd015dd6e69c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 902, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}