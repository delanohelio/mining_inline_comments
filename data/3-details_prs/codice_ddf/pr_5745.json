{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMjEwOTE5", "number": 5745, "title": "DDF-5741 adding export and import command for PersistentStore", "bodyText": "What does this PR do?\n#5741\nAdd StoreImport and StoreExport command\nAllow Persistent Store data to be exported as json string into a file directory\nImport read the json string, reconstruct and ingest into solr\nBinary data contents should be base64 encoded and export as json string value\nFix paging in delete and export\nWho is reviewing it?\n@codice/core-apis\nAsk 2 committers to review/merge the PR and tag them here.\n@pklinef\n@bdeining\n@millerw8\nHow should this be tested?\n\ninstall:profile standard\ncopy these files into a local directory https://github.com/codice/ddf/tree/50e5b3561a48bdbb7836201dc14e9acba2db8584/platform/persistence/platform-persistence-commands/src/test/resources/GoodSet\nstore:import -t preferences \nVerify preference is now in solr http://localhost:8994/solr/preferences/select?q=*:*\ncreate a /tmp/pref directory\nexport by store:export -t preferences /tmp/pref\nverify a new file is created in the directory\nverify file content look reasonable\ndelete preference by store:delete -t preferences\nwait a min, then verify solr query above return none\nstore:list -t preferences also return zero result\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #5741\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-01-07T23:02:48Z", "url": "https://github.com/codice/ddf/pull/5745", "merged": true, "mergeCommit": {"oid": "de9e1752f5d0004e42958e293e6ceea3d0a4860f"}, "closed": true, "closedAt": "2020-06-10T16:14:06Z", "author": {"login": "lamhuy"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4JQxOgBqjI5MjkzODAzNTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcp7oMsgFqTQyODE5MDY2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a96ec0d26591928c808fc9505ec5be4fcd584fe", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/9a96ec0d26591928c808fc9505ec5be4fcd584fe", "committedDate": "2020-01-07T22:57:28Z", "message": "DDF-5741 adding export and import command"}, "afterCommit": {"oid": "0ec5d314182c160bae4d55ca05164a34bdbc7b14", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/0ec5d314182c160bae4d55ca05164a34bdbc7b14", "committedDate": "2020-01-07T23:21:42Z", "message": "DDF-5741 adding export and import command"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87482fa059f92c63f0425c6bbb1543cf6cde6bc7", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/87482fa059f92c63f0425c6bbb1543cf6cde6bc7", "committedDate": "2020-01-21T15:26:08Z", "message": "DDF-5741 fix test error"}, "afterCommit": {"oid": "6c972578ae8f5217e62fcb34f5e98b86f1bf242b", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/6c972578ae8f5217e62fcb34f5e98b86f1bf242b", "committedDate": "2020-01-21T18:06:09Z", "message": "DDF-5741 fix test error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwOTg2Mjg5", "url": "https://github.com/codice/ddf/pull/5745#pullrequestreview-350986289", "createdAt": "2020-01-30T16:59:20Z", "commit": {"oid": "6c972578ae8f5217e62fcb34f5e98b86f1bf242b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6c972578ae8f5217e62fcb34f5e98b86f1bf242b", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/6c972578ae8f5217e62fcb34f5e98b86f1bf242b", "committedDate": "2020-01-21T18:06:09Z", "message": "DDF-5741 fix test error"}, "afterCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/cf035b97a31c8e6b6e1a01ba09ee17553cad059f", "committedDate": "2020-04-20T19:24:51Z", "message": "DDF-5741 fix test error"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzI3ODAw", "url": "https://github.com/codice/ddf/pull/5745#pullrequestreview-399327800", "createdAt": "2020-04-23T17:37:06Z", "commit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzozNzowNlrOGK0G5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMzowNlrOGK1-wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5MjY3Ng==", "bodyText": "\u2753 Shouldn't the CQL be returned here if there is no user?", "url": "https://github.com/codice/ddf/pull/5745#discussion_r413992676", "createdAt": "2020-04-23T17:37:06Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/AbstractStoreCommand.java", "diffHunk": "@@ -81,4 +85,30 @@ public Object execute() {\n \n   /** Calls a command that operates on the Persistent Store service. */\n   abstract void storeCommand() throws PersistenceException;\n+\n+  protected String createCql(String user, String cql) {\n+    if (StringUtils.isBlank(user)) return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5NzY0Nw==", "bodyText": "\u2757 This seems dangerous to try and load all persistence items into memory.  I think this could cause OOM if there are millions of persistence items being exported.  The dump command iterates through all records but writes them out and does not accumulate the results into memory.\n\n  \n    \n      ddf/catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/DumpCommand.java\n    \n    \n         Line 99\n      in\n      fc2fa5f\n    \n    \n    \n    \n\n        \n          \n           public class DumpCommand extends CqlCommands {", "url": "https://github.com/codice/ddf/pull/5745#discussion_r413997647", "createdAt": "2020-04-23T17:44:36Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/AbstractStoreCommand.java", "diffHunk": "@@ -81,4 +85,30 @@ public Object execute() {\n \n   /** Calls a command that operates on the Persistent Store service. */\n   abstract void storeCommand() throws PersistenceException;\n+\n+  protected String createCql(String user, String cql) {\n+    if (StringUtils.isBlank(user)) return \"\";\n+    if (StringUtils.isNotBlank(cql)) {\n+      cql = \"( \" + cql + \") AND user='\" + user + \"'\";\n+    } else {\n+      cql = \"user='\" + user + \"'\";\n+    }\n+    return cql;\n+  }\n+\n+  protected List<Map<String, Object>> getResults() throws PersistenceException {\n+\n+    List<Map<String, Object>> results = new ArrayList<>();\n+    List<Map<String, Object>> pagedResults;\n+    int startIndex = 0;\n+    int pageSize = 1000;\n+\n+    do {\n+      pagedResults = persistentStore.get(type, cql, startIndex, pageSize);\n+      results.addAll(pagedResults);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNDE4NA==", "bodyText": "\u270f\ufe0f It would be nice to print out the progress bar.\n\n  \n    \n      ddf/catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/CommandSupport.java\n    \n    \n         Line 68\n      in\n      fc2fa5f\n    \n    \n    \n    \n\n        \n          \n           protected void printProgressAndFlush(long start, long totalCount, long currentCount) {", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414004184", "createdAt": "2020-04-23T17:54:05Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/StoreExportCommand.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.persistence.commands;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.karaf.shell.api.action.Argument;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.codice.ddf.persistence.PersistenceException;\n+import org.codice.ddf.persistence.PersistentItem;\n+\n+@Service\n+@Command(\n+  scope = \"store\",\n+  name = \"export\",\n+  description = \"Export entries that are available in the persistent store.\"\n+)\n+public class StoreExportCommand extends AbstractStoreCommand {\n+\n+  @Option(\n+    name = \"User ID\",\n+    aliases = {\"-u\", \"--user\"},\n+    required = false,\n+    description =\n+        \"User ID to search for notifications. If an id is not provided, then all of the notifications for all users are displayed.\",\n+    multiValued = false\n+  )\n+  private String user;\n+\n+  @Argument(\n+    name = \"Dump directory path\",\n+    description =\n+        \"Directory to export into. Paths are absolute and must be in quotes.  Files in directory will be overwritten if they already exist.\",\n+    index = 0,\n+    multiValued = false,\n+    required = true\n+  )\n+  private String dirPath = null;\n+\n+  private final Gson gson =\n+      new GsonBuilder().setDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\").create();\n+\n+  @Override\n+  public void storeCommand() throws PersistenceException {\n+\n+    if (FilenameUtils.getExtension(dirPath).equals(\"\") && !dirPath.endsWith(File.separator)) {\n+      dirPath += File.separator;\n+    }\n+    final File dumpDir = new File(dirPath);\n+\n+    if (!dumpDir.exists()) {\n+      console.println(\n+          \"Directory does not exist. If the directory does indeed exist, try putting the path in quotes.\");\n+      return;\n+    }\n+\n+    if (!dumpDir.isDirectory()) {\n+      console.println(\"Specified path is not a directory.\");\n+      return;\n+    }\n+\n+    cql = createCql(user, cql);\n+    List<Map<String, Object>> storeResults = getResults();\n+    console.println(\"Results found: \" + storeResults.size() + \"\\n\");\n+\n+    int count =\n+        storeResults\n+            .stream()\n+            .map(PersistentItem.class::cast)\n+            .map(\n+                persistentItem -> {\n+                  persistentItem.encodeBinaryProperties();\n+                  return persistentItem;\n+                })\n+            .map(gson::toJson)\n+            .map(json -> writeRecordToFile(json, dumpDir))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxNzAyNw==", "bodyText": "\u2757 I have two concerns with this method.\nThe first is that it is unsafe since it could be called multiple times and I think would fail after the first call.  It would also be confusing because the key would still have the binary suffix but would now have a string value.\nMy second concern is that this is not really a concern of this class.  There are many different ways to encode binary data.  I think this should be moved to to the store commands which have a concern on how to serialize the data.  Base64 decoding is already done in the store import command.  The store export command should do Base64 encoding to keep the command format symmetry in one package.  Another option is to create a GSON converter like this gist example to use in the commands.\nhttps://gist.github.com/orip/3635246\nIf you do that, it might be useful to add to our GSON type adapters.\nhttps://github.com/codice/ddf/blob/master/libs/gson-support/src/main/java/org/codice/gsonsupport/GsonTypeAdapters.java#L38", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414017027", "createdAt": "2020-04-23T18:13:22Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-core-api/src/main/java/org/codice/ddf/persistence/PersistentItem.java", "diffHunk": "@@ -142,6 +145,18 @@ public Date getDateProperty(String name) {\n     return (Date) getProperty(name + DATE_SUFFIX);\n   }\n \n+  public void encodeBinaryProperties() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzM2MQ==", "bodyText": "\u2757 We might have a problem with this call on SolrCloud since it looks like we do not sort to guarantee consistent ordering between shards.\nhttps://github.com/codice/ddf/blob/master/platform/persistence/platform-persistence-core-impl/src/main/java/org/codice/ddf/persistence/internal/PersistentStoreImpl.java#L191-L194\nWe have to sort by ID to avoid this issue with the catalog dump command\n\n  \n    \n      ddf/catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/DumpCommand.java\n    \n    \n         Line 253\n      in\n      fc2fa5f\n    \n    \n    \n    \n\n        \n          \n           SortBy sort = new SortByImpl(Core.ID, SortOrder.ASCENDING);", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414023361", "createdAt": "2020-04-23T18:23:06Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/AbstractStoreCommand.java", "diffHunk": "@@ -81,4 +85,30 @@ public Object execute() {\n \n   /** Calls a command that operates on the Persistent Store service. */\n   abstract void storeCommand() throws PersistenceException;\n+\n+  protected String createCql(String user, String cql) {\n+    if (StringUtils.isBlank(user)) return \"\";\n+    if (StringUtils.isNotBlank(cql)) {\n+      cql = \"( \" + cql + \") AND user='\" + user + \"'\";\n+    } else {\n+      cql = \"user='\" + user + \"'\";\n+    }\n+    return cql;\n+  }\n+\n+  protected List<Map<String, Object>> getResults() throws PersistenceException {\n+\n+    List<Map<String, Object>> results = new ArrayList<>();\n+    List<Map<String, Object>> pagedResults;\n+    int startIndex = 0;\n+    int pageSize = 1000;\n+\n+    do {\n+      pagedResults = persistentStore.get(type, cql, startIndex, pageSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MzM2MTY0", "url": "https://github.com/codice/ddf/pull/5745#pullrequestreview-399336164", "createdAt": "2020-04-23T17:47:51Z", "commit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNzo0Nzo1MlrOGK0jLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxODoyMjo1NFrOGK1-Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk5OTkxNw==", "bodyText": "If you go the stream route we can remove this variable", "url": "https://github.com/codice/ddf/pull/5745#discussion_r413999917", "createdAt": "2020-04-23T17:47:52Z", "author": {"login": "mojogitoverhere"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/IngestCommand.java", "diffHunk": "@@ -441,12 +442,11 @@ private int totalFileCount(File inputFile) throws IOException {\n     if (inputFile.isDirectory()) {\n       int currentFileCount = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNDA0NQ==", "bodyText": "\u2753 Does this pass the format check? I thought we had a rule preventing this inline style", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414004045", "createdAt": "2020-04-23T17:53:53Z", "author": {"login": "mojogitoverhere"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/AbstractStoreCommand.java", "diffHunk": "@@ -81,4 +85,30 @@ public Object execute() {\n \n   /** Calls a command that operates on the Persistent Store service. */\n   abstract void storeCommand() throws PersistenceException;\n+\n+  protected String createCql(String user, String cql) {\n+    if (StringUtils.isBlank(user)) return \"\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwNzUyMg==", "bodyText": "\u270f\ufe0f I know this was moved from a different class, but I think the descriptiveness of the name can be improved. What do you think about something like addUserConstraintToCql?", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414007522", "createdAt": "2020-04-23T17:59:01Z", "author": {"login": "mojogitoverhere"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/AbstractStoreCommand.java", "diffHunk": "@@ -81,4 +85,30 @@ public Object execute() {\n \n   /** Calls a command that operates on the Persistent Store service. */\n   abstract void storeCommand() throws PersistenceException;\n+\n+  protected String createCql(String user, String cql) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAwOTQyNg==", "bodyText": "\u2757 How many items do we expect to be in the persistent store? Is there a risk of running out of memory?", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414009426", "createdAt": "2020-04-23T18:01:40Z", "author": {"login": "mojogitoverhere"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/AbstractStoreCommand.java", "diffHunk": "@@ -81,4 +85,30 @@ public Object execute() {\n \n   /** Calls a command that operates on the Persistent Store service. */\n   abstract void storeCommand() throws PersistenceException;\n+\n+  protected String createCql(String user, String cql) {\n+    if (StringUtils.isBlank(user)) return \"\";\n+    if (StringUtils.isNotBlank(cql)) {\n+      cql = \"( \" + cql + \") AND user='\" + user + \"'\";\n+    } else {\n+      cql = \"user='\" + user + \"'\";\n+    }\n+    return cql;\n+  }\n+\n+  protected List<Map<String, Object>> getResults() throws PersistenceException {\n+\n+    List<Map<String, Object>> results = new ArrayList<>();\n+    List<Map<String, Object>> pagedResults;\n+    int startIndex = 0;\n+    int pageSize = 1000;\n+\n+    do {\n+      pagedResults = persistentStore.get(type, cql, startIndex, pageSize);\n+      results.addAll(pagedResults);\n+      startIndex += pageSize;\n+    } while (pagedResults.size() > 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAxMzU0NQ==", "bodyText": "\u2757 The persistent store is used for other things besides notifications, like user preferences", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414013545", "createdAt": "2020-04-23T18:07:56Z", "author": {"login": "mojogitoverhere"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/StoreExportCommand.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.persistence.commands;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.apache.commons.io.FilenameUtils;\n+import org.apache.karaf.shell.api.action.Argument;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.codice.ddf.persistence.PersistenceException;\n+import org.codice.ddf.persistence.PersistentItem;\n+\n+@Service\n+@Command(\n+  scope = \"store\",\n+  name = \"export\",\n+  description = \"Export entries that are available in the persistent store.\"\n+)\n+public class StoreExportCommand extends AbstractStoreCommand {\n+\n+  @Option(\n+    name = \"User ID\",\n+    aliases = {\"-u\", \"--user\"},\n+    required = false,\n+    description =\n+        \"User ID to search for notifications. If an id is not provided, then all of the notifications for all users are displayed.\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDAyMzIyMg==", "bodyText": "\u270f\ufe0f Might be nice to expose this date format (package private) in StoreExportCommand and import it here so they don't get out of sync", "url": "https://github.com/codice/ddf/pull/5745#discussion_r414023222", "createdAt": "2020-04-23T18:22:54Z", "author": {"login": "mojogitoverhere"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/StoreImportCommand.java", "diffHunk": "@@ -0,0 +1,197 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.persistence.commands;\n+\n+import static org.codice.ddf.persistence.PersistentItem.BINARY_SUFFIX;\n+import static org.codice.ddf.persistence.PersistentItem.DATE_SUFFIX;\n+import static org.codice.ddf.persistence.PersistentItem.INT_SUFFIX;\n+import static org.codice.ddf.persistence.PersistentItem.LONG_SUFFIX;\n+import static org.codice.ddf.persistence.PersistentItem.SUFFIXES;\n+import static org.codice.ddf.persistence.PersistentItem.TEXT_SUFFIX;\n+import static org.codice.ddf.persistence.PersistentItem.XML_SUFFIX;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonSyntaxException;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.karaf.shell.api.action.Argument;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Completion;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.apache.karaf.shell.support.completers.FileCompleter;\n+import org.codice.ddf.persistence.PersistenceException;\n+\n+@Service\n+@Command(\n+  scope = \"store\",\n+  name = \"import\",\n+  description = \"Import entries into the persistent store.\"\n+)\n+public class StoreImportCommand extends AbstractStoreCommand {\n+\n+  @Argument(\n+    name = \"File path or Directory path\",\n+    description =\n+        \"Path to a file or a directory of file(s) to be ingested. Paths can be absolute or relative to installation directory.\",\n+    index = 0,\n+    multiValued = false,\n+    required = true\n+  )\n+  @Completion(FileCompleter.class)\n+  String filePath;\n+\n+  private final Gson gson = new Gson();\n+  private final SimpleDateFormat formatter = new SimpleDateFormat(\"EEE, dd MMM yyyy HH:mm:ss zzz\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f"}, "originalPosition": 72}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf035b97a31c8e6b6e1a01ba09ee17553cad059f", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/cf035b97a31c8e6b6e1a01ba09ee17553cad059f", "committedDate": "2020-04-20T19:24:51Z", "message": "DDF-5741 fix test error"}, "afterCommit": {"oid": "3f62e430daea87c8ae4117ae44533f3135da486c", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/3f62e430daea87c8ae4117ae44533f3135da486c", "committedDate": "2020-05-20T16:15:43Z", "message": "DDF-5924 remove persistence type enforcement (#5938)\n\nDDF-5741 update logic add test"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc8e78b1c6ef4b588e8ba33d84dae3b07ce40f0d", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/fc8e78b1c6ef4b588e8ba33d84dae3b07ce40f0d", "committedDate": "2020-05-22T20:20:14Z", "message": "DDF-5741 using custom gson type adapter"}, "afterCommit": {"oid": "c97cbad54fb3e186f4f202033b14ea9f8131ce91", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/c97cbad54fb3e186f4f202033b14ea9f8131ce91", "committedDate": "2020-05-29T14:32:35Z", "message": "DDF-5741 clean up"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9e67f770e05d5c9e6fabd180a72b0825cf693d2", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/b9e67f770e05d5c9e6fabd180a72b0825cf693d2", "committedDate": "2020-06-01T22:08:41Z", "message": "DDF-5741 adding export and import command"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8283bb7410f166df688d5caed32ab491d502c30a", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/8283bb7410f166df688d5caed32ab491d502c30a", "committedDate": "2020-06-01T22:08:41Z", "message": "DDF-5924 remove persistence type enforcement (#5938)\n\nDDF-5741 update logic add test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b3a98c8300d6b64cb5bae61f2b02693c64431bd", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/9b3a98c8300d6b64cb5bae61f2b02693c64431bd", "committedDate": "2020-06-02T00:18:37Z", "message": "DDF-5741 using custom gson type adapter"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c97cbad54fb3e186f4f202033b14ea9f8131ce91", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/c97cbad54fb3e186f4f202033b14ea9f8131ce91", "committedDate": "2020-05-29T14:32:35Z", "message": "DDF-5741 clean up"}, "afterCommit": {"oid": "9b3a98c8300d6b64cb5bae61f2b02693c64431bd", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/9b3a98c8300d6b64cb5bae61f2b02693c64431bd", "committedDate": "2020-06-02T00:18:37Z", "message": "DDF-5741 using custom gson type adapter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93ee3eb8b28d928c88a83cc75fb394303485cbc4", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/93ee3eb8b28d928c88a83cc75fb394303485cbc4", "committedDate": "2020-06-02T15:00:29Z", "message": "DDF-5741 fix unit test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzOTY1Nzk3", "url": "https://github.com/codice/ddf/pull/5745#pullrequestreview-423965797", "createdAt": "2020-06-03T21:56:22Z", "commit": {"oid": "93ee3eb8b28d928c88a83cc75fb394303485cbc4"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMTo1NjoyM1rOGeu_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QyMjowNTo1M1rOGevOMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4MDMxNA==", "bodyText": "\u270f\ufe0f I think this could cause OOM is too many files are stored at once.  We could do the files in batches to avoid one map getting too large.", "url": "https://github.com/codice/ddf/pull/5745#discussion_r434880314", "createdAt": "2020-06-03T21:56:23Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/StoreImportCommand.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.persistence.commands;\n+\n+import static org.codice.gsonsupport.GsonTypeAdapters.MAP_STRING_TO_OBJECT_TYPE;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.google.gson.JsonIOException;\n+import com.google.gson.JsonSyntaxException;\n+import java.io.File;\n+import java.io.FileNotFoundException;\n+import java.io.FileReader;\n+import java.io.IOException;\n+import java.io.Reader;\n+import java.io.UncheckedIOException;\n+import java.nio.file.FileVisitOption;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.stream.Stream;\n+import org.apache.karaf.shell.api.action.Argument;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Completion;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.apache.karaf.shell.support.completers.FileCompleter;\n+import org.codice.ddf.persistence.PersistenceException;\n+import org.codice.gsonsupport.GsonTypeAdapters.PersistenceMapTypeAdapter;\n+\n+@Service\n+@Command(\n+  scope = \"store\",\n+  name = \"import\",\n+  description = \"Import entries into the persistent store.\"\n+)\n+public class StoreImportCommand extends AbstractStoreCommand {\n+\n+  @Argument(\n+    name = \"File path or Directory path\",\n+    description =\n+        \"Path to a file or a directory of file(s) to be ingested. Paths can be absolute or relative to installation directory.\",\n+    index = 0,\n+    multiValued = false,\n+    required = true\n+  )\n+  @Completion(FileCompleter.class)\n+  String filePath;\n+\n+  private final Gson gson =\n+      new GsonBuilder().registerTypeAdapterFactory(PersistenceMapTypeAdapter.FACTORY).create();\n+\n+  @Override\n+  public void storeCommand() throws PersistenceException {\n+\n+    final File inputFile = getInputFile();\n+    if (inputFile == null) {\n+      return;\n+    }\n+    int totalFiles = 0;\n+\n+    try {\n+      totalFiles = totalFileCount(inputFile);\n+    } catch (IOException e) {\n+      console.println(\"Unable to read directory\");\n+    }\n+\n+    List<Map<String, Object>> importResults = new ArrayList<>();\n+\n+    console.println(\"Found \" + totalFiles + \" files to import\\n\");\n+\n+    try (Stream<Path> ingestStream = Files.walk(inputFile.toPath(), FileVisitOption.FOLLOW_LINKS)) {\n+      ingestStream\n+          .filter(Files::isRegularFile)\n+          .map(Path::toFile)\n+          .map(this::processFile)\n+          .filter(Objects::nonNull)\n+          .forEach(importResults::add);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93ee3eb8b28d928c88a83cc75fb394303485cbc4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDg4NDE0NQ==", "bodyText": "\u2753 Couldn't this command print +100k lines if there were a lot of items or large items in the persistent store?\nShould we have a default limit of lines to print like 10 but a command option could increase it?", "url": "https://github.com/codice/ddf/pull/5745#discussion_r434884145", "createdAt": "2020-06-03T22:05:53Z", "author": {"login": "pklinef"}, "path": "platform/persistence/platform-persistence-commands/src/main/java/org/codice/ddf/persistence/commands/StoreListCommand.java", "diffHunk": "@@ -40,49 +40,40 @@\n         \"User ID to search for notifications. If an id is not provided, then all of the notifications for all users are displayed.\",\n     multiValued = false\n   )\n-  private String user;\n+  String user;\n \n-  private Set<String> headerSet = new TreeSet<String>();\n+  private Set<String> headerSet = new TreeSet<>();\n \n   @Override\n   public void storeCommand() throws PersistenceException {\n \n-    List<Map<String, Object>> storeResults;\n+    cql = addUserConstraintToCql(user, cql);\n \n-    cql = createCql(user, cql);\n+    // output the entries\n+    // populates the header with the keys from the first entry\n+    Function<List<Map<String, Object>>, Integer> listFunction =\n+        results -> {\n+          int count = 0;\n+          for (int i = 0; i < results.size(); i++) {\n+            Map<String, Object> curStore = PersistentItem.stripSuffixes(results.get(i));\n+            console.println(\"Result {\" + i + \"}:\");\n+            if (headerSet.isEmpty()) {\n+              // populates the header with the keys from the first entry\n+              headerSet.addAll(curStore.keySet());\n+            }\n \n-    if (StringUtils.isNotBlank(cql)) {\n-      storeResults = persistentStore.get(type, cql);\n-    } else {\n-      storeResults = persistentStore.get(type);\n-    }\n-    console.println(\"Results found: \" + storeResults.size() + \"\\n\");\n+            for (String curKey : headerSet) {\n+              console.println(curKey + \":\");\n+              console.println(\"\\t\" + curStore.get(curKey).toString());\n+              count++;\n+            }\n+          }\n+          return count;\n+        };\n \n-    // output the entries\n-    for (int i = 0; i < storeResults.size(); i++) {\n-      Map<String, Object> curStore = PersistentItem.stripSuffixes(storeResults.get(i));\n-      console.println(\"Result {\" + i + \"}:\");\n-      if (headerSet.isEmpty()) {\n-        // populates the header with the keys from the first entry\n-        headerSet.addAll(curStore.keySet());\n-      }\n+    long totalCount = getResults(listFunction);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93ee3eb8b28d928c88a83cc75fb394303485cbc4"}, "originalPosition": 62}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "50e5b3561a48bdbb7836201dc14e9acba2db8584", "author": {"user": {"login": "lamhuy", "name": "Jason Lam"}}, "url": "https://github.com/codice/ddf/commit/50e5b3561a48bdbb7836201dc14e9acba2db8584", "committedDate": "2020-06-05T20:39:46Z", "message": "DDF-5741 address comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTI5NTE4", "url": "https://github.com/codice/ddf/pull/5745#pullrequestreview-428129518", "createdAt": "2020-06-10T14:44:29Z", "commit": {"oid": "50e5b3561a48bdbb7836201dc14e9acba2db8584"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4MTkwNjYy", "url": "https://github.com/codice/ddf/pull/5745#pullrequestreview-428190662", "createdAt": "2020-06-10T15:45:17Z", "commit": {"oid": "50e5b3561a48bdbb7836201dc14e9acba2db8584"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 80, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}