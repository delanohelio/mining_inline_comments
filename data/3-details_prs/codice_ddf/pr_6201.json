{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDQ4MTYw", "number": 6201, "title": "Makes solr config auto include required files if not specified", "bodyText": "What does this PR do?\nPreviously when specifying config in etc/solr/conf you had to supply every file or solr would error out when using the partial config. The behavior now supplies any files that were not included for you automatically.\nstill to do:\n\n update tests\n\nWho is reviewing it?\n@codice/solr\n@pklinef\n@lamhuy\nHow should this be tested?\n\n  Build and unzip the distribution -- do not start it yet \n  Remove all data from solr by navigating to distribution/docker/solrcloud and performing the steps in the readme\n  \n    \n      \n         navigate to  <ddf_home>/etc/solr/solrconfig. You will see two folders, default and catalog.\n        \n      \n    \n  \n  Create the catalog/conf dir and copy solrconfig.xml to it from the default/conf directory.\n  \n  Mark the solrconfig by adding a field with a unique name so that you can confirm it gets uploaded\n  \n  Startup DDF with ./bin/ddf\n  Install DDF from either the web admin console or the karaf console (profile:install standard)\n  Ensure DDF can ingest items(karaf console example: ingest -t xml /Path/to/folder) and can search items in catalog (karaf console: search *)\n    \n    Note that you can also use ddf-ui to ingest and search for items if you wish\n  \n  Navigate to https://localhost:8994/solr, On the left side Select cloud and then tree. Then in the tree view select /configs and then catalog and then the schema file we updated. Confirm that the changes made are refelcted in it. \n\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-07-27T23:10:12Z", "url": "https://github.com/codice/ddf/pull/6201", "merged": true, "mergeCommit": {"oid": "a832274fb09901aceac4e23082958dee94185713"}, "closed": true, "closedAt": "2020-09-22T19:00:45Z", "author": {"login": "rzwiefel"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5wrxQgFqTQ1Nzg1MzczOQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdCyWp-gBqjM2OTY2MTM2MDE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3ODUzNzM5", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-457853739", "createdAt": "2020-07-29T20:03:01Z", "commit": {"oid": "fad8dd5aa759df2ee7a80f61933e0acc8ccf72a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDowMzowMVrOG5IEug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDowMzowMVrOG5IEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1NDI5OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // if any defaults are missing-- create a temp  and copy collectinPath+defaults\n          \n          \n            \n                // if any defaults are missing-- create a temp  and copy collectionPath + defaults", "url": "https://github.com/codice/ddf/pull/6201#discussion_r462554298", "createdAt": "2020-07-29T20:03:01Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectinPath+defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fad8dd5aa759df2ee7a80f61933e0acc8ccf72a3"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU4ODA5Mjk0", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-458809294", "createdAt": "2020-07-30T22:33:49Z", "commit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjozMzo0OVrOG52IrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjozMzo0OVrOG52IrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwODk3Mw==", "bodyText": "\u2753 Shouldn't we include the collection name in the temporary folder so two clients creating different collections do not partially overwrite each other?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r463308973", "createdAt": "2020-07-30T22:33:49Z", "author": {"login": "pklinef"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjE0Njcw", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-461214670", "createdAt": "2020-08-04T22:16:42Z", "commit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MzQ4MjM3", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-464348237", "createdAt": "2020-08-10T15:38:47Z", "commit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0NTM2NTcz", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-464536573", "createdAt": "2020-08-10T19:59:03Z", "commit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMjIyODU5", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-461222859", "createdAt": "2020-08-04T22:35:53Z", "commit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozNTo1M1rOG7z08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxMDowN1rOG-dzVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODMwNA==", "bodyText": "\u2754 Does this work better for different platforms?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r465368304", "createdAt": "2020-08-04T22:35:53Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -39,15 +44,14 @@\n               \"solr.xml\",\n               \"solrconfig.xml\",\n               \"stopwords.txt\",\n-              \"stopwords_en.txt\",\n               \"synonyms.txt\"));\n \n   private String configsetsPath;\n \n   private Path defaultPath;\n \n   public Configsets() {\n-    this(Paths.get(System.getProperty(\"ddf.home\", \"\"), \"etc/solr/configsets\"));\n+    this(Paths.get(System.getProperty(\"ddf.home\", \"\"), \"etc\", \"solr\", \"configsets\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjM2Mw==", "bodyText": "\u2754 If something else goes wrong in there do you need to make sure that tempConfigDir is closed?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468152363", "createdAt": "2020-08-10T20:08:23Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MzE3NQ==", "bodyText": "\u2754 Same here. Since you are not returning the tempConfigDir do you need to make sure it is closed?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468153175", "createdAt": "2020-08-10T20:10:07Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {\n+      LOGGER.debug(\n+          \"Could not create directory to utilize incomplete configset [{}]. Using default configset instead\",\n+          collection);\n+      return defaultPath;\n+    }\n+\n+    Set<Path> pathsToCopy =\n+        ImmutableSet.<Path>builder()\n+            .addAll(\n+                missingFiles.stream()\n+                    .map(Path::getFileName)\n+                    .map(Path::toString)\n+                    .map(fileName -> Paths.get(defaultPath.toString(), fileName))\n+                    .collect(Collectors.toSet()))\n+            .addAll(existingFiles)\n+            .build();\n+    for (Path filePath : pathsToCopy) {\n+      try {\n+        Files.copy(\n+            filePath,\n+            Paths.get(tempConfigDir.toString(), filePath.getFileName().toString()),\n+            StandardCopyOption.REPLACE_EXISTING);\n+      } catch (IOException e) {\n+        LOGGER.debug(\"Could not copy config file [{}], reverting to default.\", filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 95}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc0ODU4NjI3", "url": "https://github.com/codice/ddf/pull/6201#pullrequestreview-474858627", "createdAt": "2020-08-25T20:45:06Z", "commit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NTowNlrOHGpDxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NTowNlrOHGpDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNjIxMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n          \n          \n            \n                    allFiles.stream().filter(config -> config.toFile().exists()).collect(Collectors.toSet());", "url": "https://github.com/codice/ddf/pull/6201#discussion_r476726213", "createdAt": "2020-08-25T20:45:06Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 61}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "384a0736bb90d92f385dbb356fbe666304a37d3a", "author": {"user": {"login": "rzwiefel", "name": "Ryan Zwiefelhofer"}}, "url": "https://github.com/codice/ddf/commit/384a0736bb90d92f385dbb356fbe666304a37d3a", "committedDate": "2020-08-25T20:49:33Z", "message": "Update platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java"}, "afterCommit": {"oid": "478b229a5d66a64229b7c708ba019094eee15dab", "author": {"user": null}, "url": "https://github.com/codice/ddf/commit/478b229a5d66a64229b7c708ba019094eee15dab", "committedDate": "2020-08-26T18:41:36Z", "message": "Makes solr config auto include required files if not specified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b5024430cd4d18947ef4e9c02682096efb03cde", "author": {"user": null}, "url": "https://github.com/codice/ddf/commit/5b5024430cd4d18947ef4e9c02682096efb03cde", "committedDate": "2020-08-26T19:57:17Z", "message": "Makes solr config auto include required files if not specified"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "478b229a5d66a64229b7c708ba019094eee15dab", "author": {"user": null}, "url": "https://github.com/codice/ddf/commit/478b229a5d66a64229b7c708ba019094eee15dab", "committedDate": "2020-08-26T18:41:36Z", "message": "Makes solr config auto include required files if not specified"}, "afterCommit": {"oid": "5b5024430cd4d18947ef4e9c02682096efb03cde", "author": {"user": null}, "url": "https://github.com/codice/ddf/commit/5b5024430cd4d18947ef4e9c02682096efb03cde", "committedDate": "2020-08-26T19:57:17Z", "message": "Makes solr config auto include required files if not specified"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 828, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}