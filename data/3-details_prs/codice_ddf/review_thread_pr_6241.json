{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTA3ODE3", "number": 6241, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNToxNVrOEXunsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNToxNVrOEXunsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzE2NTMwOnYy", "diffSide": "RIGHT", "path": "platform/parser/xml/src/main/java/org/codice/ddf/parser/xml/XmlParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNToxNVrOG_rlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNToxNVrOG_rlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyNzUyMQ==", "bodyText": "Any RuntimeExceptions will bubble out of the doPrivileged, but checked exceptions are wrapped in a PrivilegedActionException.", "url": "https://github.com/codice/ddf/pull/6241#discussion_r469427521", "createdAt": "2020-08-12T17:35:15Z", "author": {"login": "emmberk"}, "path": "platform/parser/xml/src/main/java/org/codice/ddf/parser/xml/XmlParser.java", "diffHunk": "@@ -171,58 +174,79 @@ public void marshal(ParserConfigurator configurator, Object obj, Node node)\n \n   private void marshal(ParserConfigurator configurator, Consumer<Marshaller> marshallerConsumer)\n       throws ParserException {\n-    JAXBContext jaxbContext =\n-        getContext(configurator.getContextPath(), configurator.getClassLoader());\n-\n-    ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n     try {\n-      Thread.currentThread().setContextClassLoader(configurator.getClassLoader());\n-      Marshaller marshaller = jaxbContext.createMarshaller();\n-      if (configurator.getAdapter() != null) {\n-        marshaller.setAdapter(configurator.getAdapter());\n-      }\n-      if (configurator.getHandler() != null) {\n-        marshaller.setEventHandler(configurator.getHandler());\n-      }\n-      for (Map.Entry<String, Object> propRow : configurator.getProperties().entrySet()) {\n-        marshaller.setProperty(propRow.getKey(), propRow.getValue());\n-      }\n+      AccessController.doPrivileged(\n+          (PrivilegedExceptionAction<Void>)\n+              () -> {\n+                JAXBContext jaxbContext =\n+                    getContext(configurator.getContextPath(), configurator.getClassLoader());\n+\n+                ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n+                try {\n+                  Thread.currentThread().setContextClassLoader(configurator.getClassLoader());\n+                  Marshaller marshaller = jaxbContext.createMarshaller();\n+                  if (configurator.getAdapter() != null) {\n+                    marshaller.setAdapter(configurator.getAdapter());\n+                  }\n+                  if (configurator.getHandler() != null) {\n+                    marshaller.setEventHandler(configurator.getHandler());\n+                  }\n+                  for (Map.Entry<String, Object> propRow :\n+                      configurator.getProperties().entrySet()) {\n+                    marshaller.setProperty(propRow.getKey(), propRow.getValue());\n+                  }\n \n-      marshallerConsumer.accept(marshaller);\n-    } catch (RuntimeException | JAXBException e) {\n+                  marshallerConsumer.accept(marshaller);\n+                } finally {\n+                  Thread.currentThread().setContextClassLoader(tccl);\n+                }\n+                return null;\n+              });\n+    } catch (final RuntimeException e) {\n       LOGGER.debug(MARSHALLING_ERROR_MSG, e);\n       throw new ParserException(MARSHALLING_ERROR_MSG, e);\n-    } finally {\n-      Thread.currentThread().setContextClassLoader(tccl);\n+    } catch (final PrivilegedActionException e) {\n+      LOGGER.debug(MARSHALLING_ERROR_MSG, e);\n+      throw new ParserException(MARSHALLING_ERROR_MSG, e.getException());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4552, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}