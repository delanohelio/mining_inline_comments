{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNzQ5ODI4", "number": 6346, "title": "[2.19.x] DDF-6156 G-8624 SHA 256 Checksum Provider", "bodyText": "What does this PR do?\nAdds SHA 256 Checksum Provider\nWho is reviewing it?\n\n@lamhuy\nSelect relevant component teams:\n\nAsk 2 committers to review/merge the PR and tag them here.\n\n@mojogitoverhere\n@Lambeaux\nHow should this be tested?\nBuild / Install / Ingest / Verify checksum works\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #6156\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-09-24T23:29:23Z", "url": "https://github.com/codice/ddf/pull/6346", "merged": true, "mergeCommit": {"oid": "a5faba772a8564be4473ec0f02c2bbc1c5320fbc"}, "closed": true, "closedAt": "2020-10-06T21:59:00Z", "author": {"login": "bdeining"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdMKrNBAFqTQ5NjAyMDkyMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdPp8lhgH2gAyNDkyNzQ5ODI4OjRmNTY2NGE4ZDU4NTczNzc0ODE3YWNlYTQ3Y2IwNjA1MzNiNjgxOTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MDIwOTIx", "url": "https://github.com/codice/ddf/pull/6346#pullrequestreview-496020921", "createdAt": "2020-09-24T23:45:27Z", "commit": {"oid": "68aa4b21ec9c81b3119adb8418e758c79631cd64"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQyMzo0NToyOFrOHXwPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwMDozMDoyOFrOHXw_cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY2OTY0NQ==", "bodyText": "The Adler32 provider allocates more space for reading the stream.\nbyte[] buf = new byte[4096];\n\nIs 1028 going to be enough?", "url": "https://github.com/codice/ddf/pull/6346#discussion_r494669645", "createdAt": "2020-09-24T23:45:28Z", "author": {"login": "Lambeaux"}, "path": "libs/checksum/src/main/java/org/codice/ddf/checksum/impl/Sha256ChecksumProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.checksum.impl;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.codice.ddf.checksum.AbstractChecksumProvider;\n+\n+public class Sha256ChecksumProvider extends AbstractChecksumProvider {\n+\n+  private static final String DIGEST_ALGORITHM = \"SHA-256\";\n+\n+  @Override\n+  public String calculateChecksum(InputStream inputStream)\n+      throws IOException, NoSuchAlgorithmException {\n+    if (inputStream == null) {\n+      throw new IllegalArgumentException(\"InputStream cannot be null\");\n+    }\n+\n+    try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n+      byte[] buffer = new byte[1028];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68aa4b21ec9c81b3119adb8418e758c79631cd64"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjE3Ng==", "bodyText": "Okay. I think I see the difference here. The Adler flavor is using a special pass-through stream that handles checksum computation. That's not a built-in option for SHA-256 so we need to do a manual handoff between streams.\nThe local byte array buffer is only being used to cache the handoff. The outputStream has an internal byte array that will resize itself as necessary.\nI think this will work fine.\n(\u2753 ) Do we need to handle the case where len is zero?", "url": "https://github.com/codice/ddf/pull/6346#discussion_r494676176", "createdAt": "2020-09-25T00:08:38Z", "author": {"login": "Lambeaux"}, "path": "libs/checksum/src/main/java/org/codice/ddf/checksum/impl/Sha256ChecksumProvider.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.checksum.impl;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n+import org.apache.commons.codec.binary.Hex;\n+import org.codice.ddf.checksum.AbstractChecksumProvider;\n+\n+public class Sha256ChecksumProvider extends AbstractChecksumProvider {\n+\n+  private static final String DIGEST_ALGORITHM = \"SHA-256\";\n+\n+  @Override\n+  public String calculateChecksum(InputStream inputStream)\n+      throws IOException, NoSuchAlgorithmException {\n+    if (inputStream == null) {\n+      throw new IllegalArgumentException(\"InputStream cannot be null\");\n+    }\n+\n+    try (ByteArrayOutputStream outputStream = new ByteArrayOutputStream()) {\n+      byte[] buffer = new byte[1028];\n+\n+      int len;\n+      while ((len = inputStream.read(buffer)) != -1) {\n+        outputStream.write(buffer, 0, len);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68aa4b21ec9c81b3119adb8418e758c79631cd64"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY3NjYzOA==", "bodyText": "( \u2753 ) The Adler32 version is faster. Do we want to replace all instances of it with the Sha256 version or let callers decide which one they want?", "url": "https://github.com/codice/ddf/pull/6346#discussion_r494676638", "createdAt": "2020-09-25T00:10:09Z", "author": {"login": "Lambeaux"}, "path": "libs/checksum/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -15,7 +15,7 @@\n <blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">\n \n <!-- create the bean -->\n-<bean id=\"checksumProvider\" class=\"org.codice.ddf.checksum.impl.Adler32ChecksumProvider\">\n+<bean id=\"checksumProvider\" class=\"org.codice.ddf.checksum.impl.Sha256ChecksumProvider\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68aa4b21ec9c81b3119adb8418e758c79631cd64"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDY4MTk3MA==", "bodyText": "( \u2753 ) Can we validate these using a separate tool just to be sure? For example, I'm not getting consistent results leveraging Python when I expect I should.\n$ python -c \"import hashlib; m = hashlib.sha256(); m.update('Hello World'); print(m.hexdigest());\"\na591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b57b277d9ad9f146e\n\nSee https://docs.python.org/3/library/hashlib.html for details.", "url": "https://github.com/codice/ddf/pull/6346#discussion_r494681970", "createdAt": "2020-09-25T00:30:28Z", "author": {"login": "Lambeaux"}, "path": "libs/checksum/src/test/java/org/codice/ddf/checksum/Sha256ChecksumProviderTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.checksum;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectOutputStream;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n+import org.codice.ddf.checksum.impl.Sha256ChecksumProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class Sha256ChecksumProviderTest {\n+\n+  private ChecksumProvider checksumProvider;\n+\n+  @Before\n+  public void intialize() {\n+    checksumProvider = new Sha256ChecksumProvider();\n+  }\n+\n+  @Test\n+  public void testCalculateChecksumString() throws IOException, NoSuchAlgorithmException {\n+    String testString = \"Hello World\";\n+    String checksumCompareHash = \"cade3dbf41da60f7154ef628446ff163700b6a9860cd951de8e4321b2189de6d\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68aa4b21ec9c81b3119adb8418e758c79631cd64"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODkyMDYy", "url": "https://github.com/codice/ddf/pull/6346#pullrequestreview-496892062", "createdAt": "2020-09-25T22:14:37Z", "commit": {"oid": "cbd4b20835a18478d78eca5c60113ba3a2f35365"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxNDozOFrOHYVL4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQyMjoxNDozOFrOHYVL4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTI3NDk3OQ==", "bodyText": "I agree that we should have tests with object streams since that's how it's used in prod. But having the testString right next to the checksumCompareHash is misleading since we're not doing a 1:1 mapping there but instead are using an object stream.\n( \u2753 ) For all the tests, can we in-line the hash within the assertThat statement?\nI think that would help without redundant tests or comments.", "url": "https://github.com/codice/ddf/pull/6346#discussion_r495274979", "createdAt": "2020-09-25T22:14:38Z", "author": {"login": "Lambeaux"}, "path": "libs/checksum/src/test/java/org/codice/ddf/checksum/Sha256ChecksumProviderTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.checksum;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.core.Is.is;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.ObjectOutputStream;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.Arrays;\n+import org.codice.ddf.checksum.impl.Sha256ChecksumProvider;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class Sha256ChecksumProviderTest {\n+\n+  private ChecksumProvider checksumProvider;\n+\n+  @Before\n+  public void intialize() {\n+    checksumProvider = new Sha256ChecksumProvider();\n+  }\n+\n+  @Test\n+  public void testCalculateChecksumString() throws IOException, NoSuchAlgorithmException {\n+    String testString = \"Hello World\";\n+    String checksumCompareHash = \"cade3dbf41da60f7154ef628446ff163700b6a9860cd951de8e4321b2189de6d\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbd4b20835a18478d78eca5c60113ba3a2f35365"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODk2Mzcw", "url": "https://github.com/codice/ddf/pull/6346#pullrequestreview-496896370", "createdAt": "2020-09-25T22:27:47Z", "commit": {"oid": "cbd4b20835a18478d78eca5c60113ba3a2f35365"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5aae9f96aaf5079408d79f6e5848b280da4c88dc", "author": {"user": {"login": "bdeining", "name": "Benjamin Deininger"}}, "url": "https://github.com/codice/ddf/commit/5aae9f96aaf5079408d79f6e5848b280da4c88dc", "committedDate": "2020-09-30T19:58:49Z", "message": "DDF-6156 G-8624 SHA 256 Checksum"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd938fa021d34ef7f1db82318189d9ff0b184e53", "author": {"user": {"login": "bdeining", "name": "Benjamin Deininger"}}, "url": "https://github.com/codice/ddf/commit/bd938fa021d34ef7f1db82318189d9ff0b184e53", "committedDate": "2020-09-29T21:05:13Z", "message": "Merge branch '2.19.x' of https://github.com/bdeining/ddf into sum"}, "afterCommit": {"oid": "5aae9f96aaf5079408d79f6e5848b280da4c88dc", "author": {"user": {"login": "bdeining", "name": "Benjamin Deininger"}}, "url": "https://github.com/codice/ddf/commit/5aae9f96aaf5079408d79f6e5848b280da4c88dc", "committedDate": "2020-09-30T19:58:49Z", "message": "DDF-6156 G-8624 SHA 256 Checksum"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d0063587bfb9a7730a81472360e02f2b8dfcf8a", "author": {"user": {"login": "mojogitoverhere", "name": "David Morales"}}, "url": "https://github.com/codice/ddf/commit/4d0063587bfb9a7730a81472360e02f2b8dfcf8a", "committedDate": "2020-10-05T19:53:12Z", "message": "DDF-6156 Formatting and test cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f5664a8d58573774817acea47cb060533b68195", "author": {"user": {"login": "mojogitoverhere", "name": "David Morales"}}, "url": "https://github.com/codice/ddf/commit/4f5664a8d58573774817acea47cb060533b68195", "committedDate": "2020-10-05T20:38:23Z", "message": "Formatting"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 755, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}