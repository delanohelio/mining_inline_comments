{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNTg1ODc0", "number": 6222, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxOTo0MFrOEVi2ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDo1MTozNVrOEq6qzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDI2NTMzOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxOTo0MFrOG8XRaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxOTowOFrOG81qJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0OTAzMg==", "bodyText": "\u2753 I don't know the details of EqualsBuilder so how is equality of collections of objects handled? Is it pair-wise check of values in each index? Does it perform a sort before testing? If so then what kind of sort?", "url": "https://github.com/codice/ddf/pull/6222#discussion_r465949032", "createdAt": "2020-08-05T19:19:40Z", "author": {"login": "leo-sakh"}, "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "diffHunk": "@@ -94,4 +97,24 @@ public MatchAnyValidator(List<AttributeValidator> validators) {\n     }\n     return Optional.of(result);\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(23, 37).append(validators).toHashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+\n+    if (obj == null || getClass() != obj.getClass()) {\n+      return false;\n+    }\n+\n+    MatchAnyValidator that = (MatchAnyValidator) obj;\n+\n+    return new EqualsBuilder().append(validators, that.validators).isEquals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc4f54e64ce1c091ed2bb591503898a75b347a3"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Njg4Nw==", "bodyText": "It doesn't guarantee that and a sort() is required before checking equality of list such as validators in this case. I added a new commit that adds sorting of validators based on hash code of each validators.", "url": "https://github.com/codice/ddf/pull/6222#discussion_r466446887", "createdAt": "2020-08-06T14:19:08Z", "author": {"login": "frnkshin"}, "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "diffHunk": "@@ -94,4 +97,24 @@ public MatchAnyValidator(List<AttributeValidator> validators) {\n     }\n     return Optional.of(result);\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(23, 37).append(validators).toHashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+\n+    if (obj == null || getClass() != obj.getClass()) {\n+      return false;\n+    }\n+\n+    MatchAnyValidator that = (MatchAnyValidator) obj;\n+\n+    return new EqualsBuilder().append(validators, that.validators).isEquals();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0OTAzMg=="}, "originalCommit": {"oid": "fcc4f54e64ce1c091ed2bb591503898a75b347a3"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDM2ODc3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-validator/src/test/java/ddf/catalog/validation/impl/MatchAnyValidatorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDo1MTozNVrOHdZeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xN1QxODowMjozOFrOH1CR5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4ODExMg==", "bodyText": "\u2753 Should we also have a test for Arrays.asList(patternValidator, enumerationValidator) so the sorting behavior is defined explicitly?", "url": "https://github.com/codice/ddf/pull/6222#discussion_r500588112", "createdAt": "2020-10-06T20:51:35Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-validator/src/test/java/ddf/catalog/validation/impl/MatchAnyValidatorTest.java", "diffHunk": "@@ -165,4 +168,22 @@ public void testMatchAnyValidatorPassesWithTwoEnumerationValidators() {\n     attributeValidationReportOptional = matchAnyValidator.validate(VALID_ATTRIBUTE_3);\n     assertThat(attributeValidationReportOptional.isPresent(), is(false));\n   }\n+\n+  @Test\n+  public void testNotEquals() {\n+    matchAnyValidator =\n+        new MatchAnyValidator(Arrays.asList(enumerationValidator, patternValidator));\n+    matchAnyValidator2 =\n+        new MatchAnyValidator(Arrays.asList(enumerationValidator2, patternValidator));\n+    assertThat(matchAnyValidator.equals(matchAnyValidator2), is(false));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTM3MzkyNw==", "bodyText": "MatchAnyValidatorTest.testEquals() should test for that.", "url": "https://github.com/codice/ddf/pull/6222#discussion_r525373927", "createdAt": "2020-11-17T18:02:38Z", "author": {"login": "frnkshin"}, "path": "catalog/core/catalog-core-validator/src/test/java/ddf/catalog/validation/impl/MatchAnyValidatorTest.java", "diffHunk": "@@ -165,4 +168,22 @@ public void testMatchAnyValidatorPassesWithTwoEnumerationValidators() {\n     attributeValidationReportOptional = matchAnyValidator.validate(VALID_ATTRIBUTE_3);\n     assertThat(attributeValidationReportOptional.isPresent(), is(false));\n   }\n+\n+  @Test\n+  public void testNotEquals() {\n+    matchAnyValidator =\n+        new MatchAnyValidator(Arrays.asList(enumerationValidator, patternValidator));\n+    matchAnyValidator2 =\n+        new MatchAnyValidator(Arrays.asList(enumerationValidator2, patternValidator));\n+    assertThat(matchAnyValidator.equals(matchAnyValidator2), is(false));\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4ODExMg=="}, "originalCommit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4540, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}