{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjQwMzM2", "number": 5800, "title": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services", "bodyText": "What does this PR do?\nWho is reviewing it?\n\n@SmithJosh @bakejeyner\nSelect relevant component teams:\n@codice/security\nAsk 2 committers to review/merge the PR and tag them here.\n@blen-desta\n@garrettfreibott\n@pklinef\n@stustison\nHow should this be tested?\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #5799\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-01-27T18:33:59Z", "url": "https://github.com/codice/ddf/pull/5800", "merged": true, "mergeCommit": {"oid": "56a69f9678a594100b5dbc9d3f73c4f3653635f9"}, "closed": true, "closedAt": "2020-02-06T14:30:52Z", "author": {"login": "stustison"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-hcC4ABqjI5ODI5OTMyNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBfeMzgFqTM1NDEzMTM0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0382c0b81a46265a42320cba08679929b17e6706", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/0382c0b81a46265a42320cba08679929b17e6706", "committedDate": "2020-01-27T18:31:02Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}, "afterCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/aefebfbcb174d747dab61466949b7cc55cf114fd", "committedDate": "2020-01-27T18:55:33Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4OTI4OTk1", "url": "https://github.com/codice/ddf/pull/5800#pullrequestreview-348928995", "createdAt": "2020-01-27T19:47:37Z", "commit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo0NzozOFrOFiPS5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxOTo1OToyNlrOFiPqCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ0NjUwMA==", "bodyText": "\u2753 Any need (or future need) to get the system trust store?", "url": "https://github.com/codice/ddf/pull/5800#discussion_r371446500", "createdAt": "2020-01-27T19:47:38Z", "author": {"login": "bakejeyner"}, "path": "platform/security/platform-security-core-api/src/main/java/org/codice/ddf/security/Security.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.security;\n+\n+import ddf.security.Subject;\n+import ddf.security.service.SecurityServiceException;\n+import java.lang.reflect.InvocationTargetException;\n+import java.security.KeyStore;\n+import java.security.PrivilegedAction;\n+import java.security.PrivilegedActionException;\n+import java.security.PrivilegedExceptionAction;\n+import java.util.concurrent.Callable;\n+import javax.annotation.Nullable;\n+\n+public interface Security {\n+  Subject getSubject(String username, String password, String ip);\n+\n+  /**\n+   * Determines if the current Java {@link Subject} has the admin role.\n+   *\n+   * @return {@code true} if the Java {@link Subject} exists and has the admin role, {@code false}\n+   *     otherwise\n+   * @throws SecurityException if a security manager exists and the {@link\n+   *     javax.security.auth.AuthPermission AuthPermission(\"getSubject\")} permission is not\n+   *     authorized\n+   */\n+  boolean javaSubjectHasAdminRole();\n+\n+  /**\n+   * Runs the {@link Callable} in the current thread as the current security framework's {@link\n+   * Subject}. If the security framework's {@link Subject} is not currently set and the Java Subject\n+   * contains the admin role, elevates and runs the {@link Callable} as the system {@link Subject}.\n+   *\n+   * @param codeToRun code to run\n+   * @param <T> type of the returned value\n+   * @return value returned by the {@link Callable}\n+   * @throws SecurityServiceException if the current subject didn' have enough permissions to run\n+   *     the code\n+   * @throws SecurityException if a security manager exists and the {@link\n+   *     javax.security.auth.AuthPermission AuthPermission(\"getSystemSubject\")} or {@link\n+   *     javax.security.auth.AuthPermission AuthPermission(\"getSubject\")} permissions are not\n+   *     authorized\n+   * @throws InvocationTargetException wraps any exception thrown by {@link Callable#call()}. {@link\n+   *     Callable} exception can be retrieved using the {@link\n+   *     InvocationTargetException#getCause()}.\n+   */\n+  <T> T runWithSubjectOrElevate(Callable<T> codeToRun)\n+      throws SecurityServiceException, InvocationTargetException;\n+\n+  /**\n+   * Gets the {@link Subject} associated with this system. Uses a cached subject since the subject\n+   * will not change between calls.\n+   *\n+   * @return system's {@link Subject} or {@code null} if unable to get the system's {@link Subject}\n+   * @throws SecurityException if a security manager exists and the {@link\n+   *     javax.security.auth.AuthPermission AuthPermission(\"getSystemSubject\")} or {@link\n+   *     javax.security.auth.AuthPermission AuthPermission(\"getSubject\")} permissions are not\n+   *     authorized\n+   */\n+  @Nullable\n+  Subject getSystemSubject();\n+\n+  /**\n+   * Gets the guest {@link Subject} associated with the specified IP. Uses a cached subject when\n+   * possible since the subject will not change between calls.\n+   *\n+   * @return system's {@link Subject}\n+   */\n+  Subject getGuestSubject(String ipAddress);\n+\n+  <T> T runAsAdmin(PrivilegedAction<T> action);\n+\n+  <T> T runAsAdminWithException(PrivilegedExceptionAction<T> action)\n+      throws PrivilegedActionException;\n+\n+  KeyStore getSystemKeyStore();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTQ1MjQyNA==", "bodyText": "\u270f\ufe0f There's something about the class name that doesn't feel right.\nI think its because RestSecurity implies that this class is providing security for rest, but instead this class encoding/decoding (and inflating/deflating) for rest.\nMaybe a name like \"RestTranscoder\" (who needs real words \ud83d\ude0f) or something would land better. Just a suggestion tho", "url": "https://github.com/codice/ddf/pull/5800#discussion_r371452424", "createdAt": "2020-01-27T19:59:26Z", "author": {"login": "bakejeyner"}, "path": "platform/security/platform-security-core-api/src/main/java/org/codice/ddf/security/jaxrs/RestSecurity.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.security.jaxrs;\n+\n+import java.io.IOException;\n+\n+public interface RestSecurity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDc5NjY1", "url": "https://github.com/codice/ddf/pull/5800#pullrequestreview-349479665", "createdAt": "2020-01-28T15:43:51Z", "commit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTo0Mzo1MVrOFip8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxOTowODowM1rOFixCNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg4MzE0Mw==", "bodyText": "\u2753 Curious what value Objects::requireNonNull adds here over just doing security.getSystemSubject().execute(...), since the NPE is thrown either way.", "url": "https://github.com/codice/ddf/pull/5800#discussion_r371883143", "createdAt": "2020-01-28T15:43:51Z", "author": {"login": "SmithJosh"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/ValidateCommand.java", "diffHunk": "@@ -135,12 +133,15 @@ public Object executeWithSubject() throws Exception {\n     return metacards;\n   }\n \n-  private List<Metacard> getMetacardsFromCatalog() throws CatalogCommandException {\n+  private List<Metacard> getMetacardsFromCatalog() {\n+    return Objects.requireNonNull(security.getSystemSubject())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTkxOTY5Mw==", "bodyText": "\u2753 Why did you remove this?", "url": "https://github.com/codice/ddf/pull/5800#discussion_r371919693", "createdAt": "2020-01-28T16:39:15Z", "author": {"login": "SmithJosh"}, "path": "catalog/core/catalog-core-directorymonitor/src/test/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitorIT.java", "diffHunk": "@@ -1,487 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package org.codice.ddf.catalog.content.monitor;\n-\n-import static com.xebialabs.restito.builder.stub.StubHttp.whenHttp;\n-import static com.xebialabs.restito.builder.verify.VerifyHttp.verifyHttp;\n-import static com.xebialabs.restito.semantics.Condition.endsWithUri;\n-import static com.xebialabs.restito.semantics.Condition.method;\n-import static com.xebialabs.restito.semantics.Condition.uri;\n-import static org.awaitility.Awaitility.await;\n-import static org.hamcrest.CoreMatchers.endsWith;\n-import static org.hamcrest.CoreMatchers.is;\n-import static org.hamcrest.CoreMatchers.startsWith;\n-import static org.hamcrest.MatcherAssert.assertThat;\n-import static org.mockito.Matchers.any;\n-import static org.mockito.Matchers.anyObject;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;\n-import static org.ops4j.pax.exam.CoreOptions.composite;\n-import static org.ops4j.pax.exam.CoreOptions.streamBundle;\n-import static org.ops4j.pax.exam.karaf.options.KarafDistributionOption.editConfigurationFilePut;\n-import static org.ops4j.pax.tinybundles.core.TinyBundles.withBnd;\n-\n-import aQute.bnd.osgi.Constants;\n-import com.xebialabs.restito.semantics.Action;\n-import com.xebialabs.restito.semantics.Condition;\n-import com.xebialabs.restito.server.StubServer;\n-import ddf.catalog.CatalogFramework;\n-import ddf.catalog.content.data.ContentItem;\n-import ddf.catalog.content.data.impl.ContentItemImpl;\n-import ddf.catalog.content.data.impl.ContentItemValidator;\n-import ddf.catalog.content.operation.CreateStorageRequest;\n-import ddf.catalog.content.operation.impl.CreateStorageResponseImpl;\n-import ddf.catalog.content.operation.impl.DeleteStorageResponseImpl;\n-import ddf.catalog.content.operation.impl.ReadStorageRequestImpl;\n-import ddf.catalog.content.operation.impl.ReadStorageResponseImpl;\n-import ddf.catalog.content.operation.impl.UpdateStorageResponseImpl;\n-import ddf.catalog.data.AttributeRegistry;\n-import ddf.catalog.data.Metacard;\n-import ddf.catalog.data.impl.AttributeImpl;\n-import ddf.catalog.operation.CreateRequest;\n-import ddf.catalog.operation.CreateResponse;\n-import ddf.catalog.operation.SourceInfoResponse;\n-import ddf.catalog.operation.impl.OperationImpl;\n-import ddf.catalog.operation.impl.ResponseImpl;\n-import ddf.catalog.source.SourceDescriptor;\n-import ddf.security.service.SecurityManager;\n-import java.io.File;\n-import java.io.FileNotFoundException;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-import javax.inject.Inject;\n-import org.apache.camel.CamelContext;\n-import org.apache.commons.io.IOUtils;\n-import org.codice.ddf.catalog.content.impl.FileSystemStorageProvider;\n-import org.codice.ddf.catalog.content.monitor.configurators.KeystoreTruststoreConfigurator;\n-import org.codice.ddf.catalog.content.monitor.features.CamelFeatures;\n-import org.codice.ddf.catalog.content.monitor.features.CxfFeatures;\n-import org.codice.ddf.catalog.content.monitor.features.KarafSpringFeatures;\n-import org.codice.ddf.catalog.content.monitor.features.SecurityFeatures;\n-import org.codice.ddf.catalog.content.monitor.features.TinkFeatures;\n-import org.codice.ddf.catalog.content.monitor.util.BundleInfo;\n-import org.codice.ddf.test.common.ComponentTestRunner;\n-import org.codice.ddf.test.common.annotations.AfterExam;\n-import org.codice.ddf.test.common.annotations.BeforeExam;\n-import org.codice.ddf.test.common.annotations.PaxExamRule;\n-import org.codice.ddf.test.common.configurators.PortFinder;\n-import org.glassfish.grizzly.http.Method;\n-import org.junit.Before;\n-import org.junit.Rule;\n-import org.junit.Test;\n-import org.junit.rules.TemporaryFolder;\n-import org.junit.runner.RunWith;\n-import org.mockito.ArgumentCaptor;\n-import org.mockito.stubbing.Answer;\n-import org.ops4j.io.FileUtils;\n-import org.ops4j.pax.exam.Option;\n-import org.ops4j.pax.exam.karaf.options.KarafDistributionOption;\n-import org.ops4j.pax.exam.spi.reactors.ExamReactorStrategy;\n-import org.ops4j.pax.exam.spi.reactors.PerClass;\n-import org.ops4j.pax.tinybundles.core.TinyBundles;\n-\n-@RunWith(ComponentTestRunner.class)\n-@ExamReactorStrategy(PerClass.class)\n-public class ContentDirectoryMonitorIT extends AbstractComponentTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk5OTI4Ng==", "bodyText": "\u2753 Is there no better way to inject these? I found this, though not sure it'll work with the Karaf reference annotation. https://github.com/cschneider/osgi-testing-example/blob/master/src/test/java/net/lr/example/testing/PrimeCommandMockTest.java", "url": "https://github.com/codice/ddf/pull/5800#discussion_r371999286", "createdAt": "2020-01-28T19:08:03Z", "author": {"login": "SmithJosh"}, "path": "catalog/core/catalog-core-commands/src/test/java/org/codice/ddf/commands/catalog/ValidateCommandTest.java", "diffHunk": "@@ -240,4 +264,13 @@ public void testQueryWithResults() throws Exception {\n     validateCommand.executeWithSubject();\n     verify(mockPrinter).printSummary(1, 1);\n   }\n+\n+  private class ValidateCommandUnderTest extends ValidateCommand {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjE5NDkz", "url": "https://github.com/codice/ddf/pull/5800#pullrequestreview-350219493", "createdAt": "2020-01-29T15:56:39Z", "commit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzODE4MTk5", "url": "https://github.com/codice/ddf/pull/5800#pullrequestreview-353818199", "createdAt": "2020-02-05T15:41:36Z", "commit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aefebfbcb174d747dab61466949b7cc55cf114fd", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/aefebfbcb174d747dab61466949b7cc55cf114fd", "committedDate": "2020-01-27T18:55:33Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}, "afterCommit": {"oid": "9c9ed24a4d062d17b443c3bef1e82987f5af1664", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/9c9ed24a4d062d17b443c3bef1e82987f5af1664", "committedDate": "2020-02-05T21:00:54Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43db352884583a1674da6e23213066bf2357c7b5", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/43db352884583a1674da6e23213066bf2357c7b5", "committedDate": "2020-02-05T22:18:59Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9c9ed24a4d062d17b443c3bef1e82987f5af1664", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/9c9ed24a4d062d17b443c3bef1e82987f5af1664", "committedDate": "2020-02-05T21:00:54Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}, "afterCommit": {"oid": "43db352884583a1674da6e23213066bf2357c7b5", "author": {"user": {"login": "stustison", "name": "Scott Tustison"}}, "url": "https://github.com/codice/ddf/commit/43db352884583a1674da6e23213066bf2357c7b5", "committedDate": "2020-02-05T22:18:59Z", "message": "DDF-5799 removed ddf-security-common and moved classes to either core-impl or core-services"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MTMxMzQ3", "url": "https://github.com/codice/ddf/pull/5800#pullrequestreview-354131347", "createdAt": "2020-02-06T00:20:03Z", "commit": {"oid": "43db352884583a1674da6e23213066bf2357c7b5"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4976, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}