{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2OTA3ODE3", "number": 6241, "title": "[2.25.x] DDF-6239 Wrap XmlParser marshall and unmarshall in doPrivileged blocks", "bodyText": "What does this PR do?\nAddresses an AccessControlException in XmlParser, and cleans up the related permission\nNote: might be easier to review if you ignore whitespace\nWho is reviewing it?\n@blen-desta @bakejeyner @stustison\nHow should this be tested?\nConfirm that the AccessControlException no longer occurs in the downstream project itest. Ping me for testing instructions.\nThe XML input transformer is tested in itests, so there's no need to manually test that.\nAny background context you want to provide?\nI don't know why this doesn't fail in DDF itests because there are itests that use the XML input transformer. I don't know how to reproduce this issue in DDF. \ud83e\udd37\nWhat are the relevant tickets?\nFixes: #6239\nScreenshots\nThis is the context that was failing the permission check\n\nChecklist:\n\n[n/a] Documentation Updated\n[n/a] Update / Add Threat Dragon models\n Update / Add Unit Tests - Unable to add unit tests for this\n Update / Add Integration Tests - I don't know why itests weren't failing before, so there are no itests to update.\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-08-12T17:26:29Z", "url": "https://github.com/codice/ddf/pull/6241", "merged": true, "mergeCommit": {"oid": "f31d2106da5712fa07606c97e6d5c2c4c8f7ba8b"}, "closed": true, "closedAt": "2020-08-12T20:18:27Z", "author": {"login": "emmberk"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-OsGzAH2gAyNDY2OTA3ODE3OjliMzA5ZGJhNGQwZDk0NDRiMzIyZTdhOWI3MWY5ZWI5ZGZkMGMzNTE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-P4qNgFqTQ2NjE3Njg2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351", "author": {"user": {"login": "emmberk", "name": "Emily Berk"}}, "url": "https://github.com/codice/ddf/commit/9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351", "committedDate": "2020-08-12T17:16:14Z", "message": "[2.25.x] DDF-6239 Wrap XmlParser marshall and unmarshall in doPrivileged blocks"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTMxMDA1", "url": "https://github.com/codice/ddf/pull/6241#pullrequestreview-466131005", "createdAt": "2020-08-12T17:35:15Z", "commit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNToxNVrOG_rlQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNToxNVrOG_rlQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyNzUyMQ==", "bodyText": "Any RuntimeExceptions will bubble out of the doPrivileged, but checked exceptions are wrapped in a PrivilegedActionException.", "url": "https://github.com/codice/ddf/pull/6241#discussion_r469427521", "createdAt": "2020-08-12T17:35:15Z", "author": {"login": "emmberk"}, "path": "platform/parser/xml/src/main/java/org/codice/ddf/parser/xml/XmlParser.java", "diffHunk": "@@ -171,58 +174,79 @@ public void marshal(ParserConfigurator configurator, Object obj, Node node)\n \n   private void marshal(ParserConfigurator configurator, Consumer<Marshaller> marshallerConsumer)\n       throws ParserException {\n-    JAXBContext jaxbContext =\n-        getContext(configurator.getContextPath(), configurator.getClassLoader());\n-\n-    ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n     try {\n-      Thread.currentThread().setContextClassLoader(configurator.getClassLoader());\n-      Marshaller marshaller = jaxbContext.createMarshaller();\n-      if (configurator.getAdapter() != null) {\n-        marshaller.setAdapter(configurator.getAdapter());\n-      }\n-      if (configurator.getHandler() != null) {\n-        marshaller.setEventHandler(configurator.getHandler());\n-      }\n-      for (Map.Entry<String, Object> propRow : configurator.getProperties().entrySet()) {\n-        marshaller.setProperty(propRow.getKey(), propRow.getValue());\n-      }\n+      AccessController.doPrivileged(\n+          (PrivilegedExceptionAction<Void>)\n+              () -> {\n+                JAXBContext jaxbContext =\n+                    getContext(configurator.getContextPath(), configurator.getClassLoader());\n+\n+                ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n+                try {\n+                  Thread.currentThread().setContextClassLoader(configurator.getClassLoader());\n+                  Marshaller marshaller = jaxbContext.createMarshaller();\n+                  if (configurator.getAdapter() != null) {\n+                    marshaller.setAdapter(configurator.getAdapter());\n+                  }\n+                  if (configurator.getHandler() != null) {\n+                    marshaller.setEventHandler(configurator.getHandler());\n+                  }\n+                  for (Map.Entry<String, Object> propRow :\n+                      configurator.getProperties().entrySet()) {\n+                    marshaller.setProperty(propRow.getKey(), propRow.getValue());\n+                  }\n \n-      marshallerConsumer.accept(marshaller);\n-    } catch (RuntimeException | JAXBException e) {\n+                  marshallerConsumer.accept(marshaller);\n+                } finally {\n+                  Thread.currentThread().setContextClassLoader(tccl);\n+                }\n+                return null;\n+              });\n+    } catch (final RuntimeException e) {\n       LOGGER.debug(MARSHALLING_ERROR_MSG, e);\n       throw new ParserException(MARSHALLING_ERROR_MSG, e);\n-    } finally {\n-      Thread.currentThread().setContextClassLoader(tccl);\n+    } catch (final PrivilegedActionException e) {\n+      LOGGER.debug(MARSHALLING_ERROR_MSG, e);\n+      throw new ParserException(MARSHALLING_ERROR_MSG, e.getException());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351"}, "originalPosition": 67}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTMxNTUy", "url": "https://github.com/codice/ddf/pull/6241#pullrequestreview-466131552", "createdAt": "2020-08-12T17:35:58Z", "commit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTM0NTk0", "url": "https://github.com/codice/ddf/pull/6241#pullrequestreview-466134594", "createdAt": "2020-08-12T17:40:10Z", "commit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTc2ODY1", "url": "https://github.com/codice/ddf/pull/6241#pullrequestreview-466176865", "createdAt": "2020-08-12T18:39:51Z", "commit": {"oid": "9b309dba4d0d9444b322e7a9b71f9eb9dfd0c351"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 859, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}