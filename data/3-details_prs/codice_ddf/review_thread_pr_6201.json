{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3NDQ4MTYw", "number": 6201, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDowMzowMVrOETaAgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NTowNlrOEcPI8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4Nzg0NTEzOnYy", "diffSide": "RIGHT", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDowMzowMVrOG5IEug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQyMDowMzowMVrOG5IEug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjU1NDI5OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                // if any defaults are missing-- create a temp  and copy collectinPath+defaults\n          \n          \n            \n                // if any defaults are missing-- create a temp  and copy collectionPath + defaults", "url": "https://github.com/codice/ddf/pull/6201#discussion_r462554298", "createdAt": "2020-07-29T20:03:01Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectinPath+defaults", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fad8dd5aa759df2ee7a80f61933e0acc8ccf72a3"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5MjY4MzM4OnYy", "diffSide": "RIGHT", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMjozMzo0OVrOG52IrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMzo0Mjo0OFrOG53bYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwODk3Mw==", "bodyText": "\u2753 Shouldn't we include the collection name in the temporary folder so two clients creating different collections do not partially overwrite each other?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r463308973", "createdAt": "2020-07-30T22:33:49Z", "author": {"login": "pklinef"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMzMDE0Ng==", "bodyText": "Never mind.  The directory will have a random number added to it.\nhttps://github.com/AdoptOpenJDK/openjdk-jdk8u/blob/5ca4d2a8ca68334a9f7323ebf9f5a259cee6f6ff/jdk/src/share/classes/java/nio/file/TempFileHelper.java#L57-L65", "url": "https://github.com/codice/ddf/pull/6201#discussion_r463330146", "createdAt": "2020-07-30T23:42:48Z", "author": {"login": "pklinef"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzMwODk3Mw=="}, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjU2NTE2OnYy", "diffSide": "RIGHT", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjozNTo1M1rOG7z08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxMjoyMFrOG-d3pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODMwNA==", "bodyText": "\u2754 Does this work better for different platforms?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r465368304", "createdAt": "2020-08-04T22:35:53Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -39,15 +44,14 @@\n               \"solr.xml\",\n               \"solrconfig.xml\",\n               \"stopwords.txt\",\n-              \"stopwords_en.txt\",\n               \"synonyms.txt\"));\n \n   private String configsetsPath;\n \n   private Path defaultPath;\n \n   public Configsets() {\n-    this(Paths.get(System.getProperty(\"ddf.home\", \"\"), \"etc/solr/configsets\"));\n+    this(Paths.get(System.getProperty(\"ddf.home\", \"\"), \"etc\", \"solr\", \"configsets\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1NDI3OQ==", "bodyText": "Yes, I believe this is the 'best practice' way to use Paths.get since it will insert the separator automatically, saving you from needing to hardcode it.", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468154279", "createdAt": "2020-08-10T20:12:20Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -39,15 +44,14 @@\n               \"solr.xml\",\n               \"solrconfig.xml\",\n               \"stopwords.txt\",\n-              \"stopwords_en.txt\",\n               \"synonyms.txt\"));\n \n   private String configsetsPath;\n \n   private Path defaultPath;\n \n   public Configsets() {\n-    this(Paths.get(System.getProperty(\"ddf.home\", \"\"), \"etc/solr/configsets\"));\n+    this(Paths.get(System.getProperty(\"ddf.home\", \"\"), \"etc\", \"solr\", \"configsets\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM2ODMwNA=="}, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDkzNjg4OnYy", "diffSide": "RIGHT", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDowODoyM1rOG-dwKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxNTo1OVrOG-eKQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjM2Mw==", "bodyText": "\u2754 If something else goes wrong in there do you need to make sure that tempConfigDir is closed?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468152363", "createdAt": "2020-08-10T20:08:23Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1OTA0MA==", "bodyText": "The nice thing about using a temp directory is though we might make a couple of them (if multiple attempts are made or if something goes wrong), since its a temp directory the OS will clean it out (at a minimum) when restarted. The overhead isn't very high, so it should never accumulate into a problem.  The delete on exit is just an optimistic way to clean it out possibly sooner.", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468159040", "createdAt": "2020-08-10T20:15:59Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MjM2Mw=="}, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNDk0MjA5OnYy", "diffSide": "RIGHT", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDoxMDowN1rOG-dzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMFQyMDozNToyM1rOG-e3mQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MzE3NQ==", "bodyText": "\u2754 Same here. Since you are not returning the tempConfigDir do you need to make sure it is closed?", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468153175", "createdAt": "2020-08-10T20:10:07Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {\n+      LOGGER.debug(\n+          \"Could not create directory to utilize incomplete configset [{}]. Using default configset instead\",\n+          collection);\n+      return defaultPath;\n+    }\n+\n+    Set<Path> pathsToCopy =\n+        ImmutableSet.<Path>builder()\n+            .addAll(\n+                missingFiles.stream()\n+                    .map(Path::getFileName)\n+                    .map(Path::toString)\n+                    .map(fileName -> Paths.get(defaultPath.toString(), fileName))\n+                    .collect(Collectors.toSet()))\n+            .addAll(existingFiles)\n+            .build();\n+    for (Path filePath : pathsToCopy) {\n+      try {\n+        Files.copy(\n+            filePath,\n+            Paths.get(tempConfigDir.toString(), filePath.getFileName().toString()),\n+            StandardCopyOption.REPLACE_EXISTING);\n+      } catch (IOException e) {\n+        LOGGER.debug(\"Could not copy config file [{}], reverting to default.\", filePath);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1OTg5OA==", "bodyText": "see other comment", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468159898", "createdAt": "2020-08-10T20:16:37Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {\n+      LOGGER.debug(\n+          \"Could not create directory to utilize incomplete configset [{}]. Using default configset instead\",\n+          collection);\n+      return defaultPath;\n+    }\n+\n+    Set<Path> pathsToCopy =\n+        ImmutableSet.<Path>builder()\n+            .addAll(\n+                missingFiles.stream()\n+                    .map(Path::getFileName)\n+                    .map(Path::toString)\n+                    .map(fileName -> Paths.get(defaultPath.toString(), fileName))\n+                    .collect(Collectors.toSet()))\n+            .addAll(existingFiles)\n+            .build();\n+    for (Path filePath : pathsToCopy) {\n+      try {\n+        Files.copy(\n+            filePath,\n+            Paths.get(tempConfigDir.toString(), filePath.getFileName().toString()),\n+            StandardCopyOption.REPLACE_EXISTING);\n+      } catch (IOException e) {\n+        LOGGER.debug(\"Could not copy config file [{}], reverting to default.\", filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MzE3NQ=="}, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE3MDY0OQ==", "bodyText": "roger, not sure why I was missing the TempDirectory", "url": "https://github.com/codice/ddf/pull/6201#discussion_r468170649", "createdAt": "2020-08-10T20:35:23Z", "author": {"login": "shaundmorris"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n+\n+    if (missingFiles.isEmpty()) {\n+      return collectionPath;\n+    }\n+\n+    Path tempConfigDir;\n+    try {\n+      tempConfigDir = Files.createTempDirectory(\"solr-configsets\");\n+      tempConfigDir.toFile().deleteOnExit();\n+    } catch (IOException e) {\n+      LOGGER.debug(\n+          \"Could not create directory to utilize incomplete configset [{}]. Using default configset instead\",\n+          collection);\n+      return defaultPath;\n+    }\n+\n+    Set<Path> pathsToCopy =\n+        ImmutableSet.<Path>builder()\n+            .addAll(\n+                missingFiles.stream()\n+                    .map(Path::getFileName)\n+                    .map(Path::toString)\n+                    .map(fileName -> Paths.get(defaultPath.toString(), fileName))\n+                    .collect(Collectors.toSet()))\n+            .addAll(existingFiles)\n+            .build();\n+    for (Path filePath : pathsToCopy) {\n+      try {\n+        Files.copy(\n+            filePath,\n+            Paths.get(tempConfigDir.toString(), filePath.getFileName().toString()),\n+            StandardCopyOption.REPLACE_EXISTING);\n+      } catch (IOException e) {\n+        LOGGER.debug(\"Could not copy config file [{}], reverting to default.\", filePath);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODE1MzE3NQ=="}, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4MDQzNjMzOnYy", "diffSide": "RIGHT", "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NTowNlrOHGpDxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNVQyMDo0NTowNlrOHGpDxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NjcyNjIxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());\n          \n          \n            \n                    allFiles.stream().filter(config -> config.toFile().exists()).collect(Collectors.toSet());", "url": "https://github.com/codice/ddf/pull/6201#discussion_r476726213", "createdAt": "2020-08-25T20:45:06Z", "author": {"login": "rzwiefel"}, "path": "platform/solr/solr-factory-impl/src/main/java/org/codice/solr/factory/impl/Configsets.java", "diffHunk": "@@ -80,11 +84,61 @@ private Path createDefaultConfigset(Path configsets) {\n \n   public Path get(String collection) {\n     Path collectionPath = Paths.get(configsetsPath, collection, \"conf\");\n-    if (collectionPath.toFile().exists()) {\n-      return collectionPath;\n-    } else {\n+    if (!collectionPath.toFile().exists()) {\n       LOGGER.debug(\"No configset for collection [{}]. Using default configset instead\", collection);\n       return defaultPath;\n     }\n+    return getRectifiedConfig(collection, collectionPath);\n+  }\n+\n+  private Path getRectifiedConfig(String collection, Path collectionPath) {\n+    // if any defaults are missing-- create a temp  and copy collectionPath + defaults\n+    Set<Path> allFiles =\n+        SOLR_CONFIG_FILES.stream()\n+            .map(configName -> Paths.get(collectionPath.toString(), configName))\n+            .collect(Collectors.toSet());\n+    Set<Path> missingFiles =\n+        allFiles.stream().filter(config -> !config.toFile().exists()).collect(Collectors.toSet());\n+    Set<Path> existingFiles =\n+        allFiles.stream().filter(missingFiles::contains).collect(Collectors.toSet());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef10fd313199dd900d090918bcd7fcc7a9b1626"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4529, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}