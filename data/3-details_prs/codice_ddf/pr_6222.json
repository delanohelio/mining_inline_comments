{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzNTg1ODc0", "number": 6222, "title": "[2.19.x] DDF-6221 Make MatchAnyValidator to not get registered to AttributeValidatorRegistry if MatchAnyValidator with same content exists for an attribute", "bodyText": "What does this PR do?\nAdds equals() and hashCode() methods to MatchAnyValidator to not allow adding in multiple of the same MatchAnyValidators if one already exists for an attribute.\nWho is reviewing it?\n\n@leo-sakh\n@bennuttle\n@jMoneee\nSelect relevant component teams:\n@codice/core-apis\n\nAsk 2 committers to review/merge the PR and tag them here.\n@bdeining\n@millerw8\n\nHow should this be tested?\n\n\nBuild and install\nEdit /etc/definition/core-attributes-validator.json file with the following contents\n\n{\n  \"validators\": {\n    \"datatype\":\n    [\n      {\n        \"validator\": \"enumerationignorecase\",\n        \"arguments\": [\n          \"Collection\",\n          \"Dataset\",\n          \"Event\",\n          \"Image\",\n          \"Interactive Resource\",\n          \"Moving Image\",\n          \"Physical Object\",\n          \"Service\",\n          \"Software\",\n          \"Sound\",\n          \"Still Image\",\n          \"Text\"\n        ]\n      }\n    ],\n    \"location.country-code\":\n    [\n        {\n            \"validator\": \"match_any\",\n            \"validators\": [\n                {\n                    \"validator\": \"iso3_countryignorecase\"\n                }\n            ]\n        }\n    ]\n  }\n}\n\n\nRun DDF\nCheck that the dropdown populates countrycodes for location.country-code attribute (On the UI dropdown possibly).\nIn Karaf console, run $ bundle:restart 432 (Or try to find the bundle ID by running $ bundle:list | grep Definition) to restart Definition Parser.\nRepeat step 4\nObserve that the dropdown still populates country codes. (Current behavior is that it doesn't show country codes in the dropdown)\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #6221\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n[x ] Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-08-05T19:07:11Z", "url": "https://github.com/codice/ddf/pull/6222", "merged": true, "mergeCommit": {"oid": "3ebae39e742e578bf10aa1b23422c84398b72e6a"}, "closed": true, "closedAt": "2020-12-07T18:17:23Z", "author": {"login": "frnkshin"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8AQv_AFqTQ2MTk1NDM5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABddkZgigBqjQwMDgzNTQwMTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxOTU0Mzk1", "url": "https://github.com/codice/ddf/pull/6222#pullrequestreview-461954395", "createdAt": "2020-08-05T19:19:40Z", "commit": {"oid": "fcc4f54e64ce1c091ed2bb591503898a75b347a3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxOTo0MFrOG8XRaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxOToxOTo0MFrOG8XRaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTk0OTAzMg==", "bodyText": "\u2753 I don't know the details of EqualsBuilder so how is equality of collections of objects handled? Is it pair-wise check of values in each index? Does it perform a sort before testing? If so then what kind of sort?", "url": "https://github.com/codice/ddf/pull/6222#discussion_r465949032", "createdAt": "2020-08-05T19:19:40Z", "author": {"login": "leo-sakh"}, "path": "catalog/core/catalog-core-validator/src/main/java/ddf/catalog/validation/impl/validator/MatchAnyValidator.java", "diffHunk": "@@ -94,4 +97,24 @@ public MatchAnyValidator(List<AttributeValidator> validators) {\n     }\n     return Optional.of(result);\n   }\n+\n+  @Override\n+  public int hashCode() {\n+    return new HashCodeBuilder(23, 37).append(validators).toHashCode();\n+  }\n+\n+  @Override\n+  public boolean equals(Object obj) {\n+    if (this == obj) {\n+      return true;\n+    }\n+\n+    if (obj == null || getClass() != obj.getClass()) {\n+      return false;\n+    }\n+\n+    MatchAnyValidator that = (MatchAnyValidator) obj;\n+\n+    return new EqualsBuilder().append(validators, that.validators).isEquals();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcc4f54e64ce1c091ed2bb591503898a75b347a3"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNTc4Nzc0", "url": "https://github.com/codice/ddf/pull/6222#pullrequestreview-500578774", "createdAt": "2020-10-01T17:42:57Z", "commit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAwNzgxOTg2", "url": "https://github.com/codice/ddf/pull/6222#pullrequestreview-500781986", "createdAt": "2020-10-01T23:29:18Z", "commit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMTU0Mzkw", "url": "https://github.com/codice/ddf/pull/6222#pullrequestreview-503154390", "createdAt": "2020-10-06T16:34:14Z", "commit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzMzQ4NzE3", "url": "https://github.com/codice/ddf/pull/6222#pullrequestreview-503348717", "createdAt": "2020-10-06T20:51:35Z", "commit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDo1MTozNVrOHdZeUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQyMDo1MTozNVrOHdZeUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDU4ODExMg==", "bodyText": "\u2753 Should we also have a test for Arrays.asList(patternValidator, enumerationValidator) so the sorting behavior is defined explicitly?", "url": "https://github.com/codice/ddf/pull/6222#discussion_r500588112", "createdAt": "2020-10-06T20:51:35Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-validator/src/test/java/ddf/catalog/validation/impl/MatchAnyValidatorTest.java", "diffHunk": "@@ -165,4 +168,22 @@ public void testMatchAnyValidatorPassesWithTwoEnumerationValidators() {\n     attributeValidationReportOptional = matchAnyValidator.validate(VALID_ATTRIBUTE_3);\n     assertThat(attributeValidationReportOptional.isPresent(), is(false));\n   }\n+\n+  @Test\n+  public void testNotEquals() {\n+    matchAnyValidator =\n+        new MatchAnyValidator(Arrays.asList(enumerationValidator, patternValidator));\n+    matchAnyValidator2 =\n+        new MatchAnyValidator(Arrays.asList(enumerationValidator2, patternValidator));\n+    assertThat(matchAnyValidator.equals(matchAnyValidator2), is(false));\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20ccdc40dda37c590383f89e3ca434f1e1fc2be6"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815aabe6029e30d62eda272277a07488b6395643", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/815aabe6029e30d62eda272277a07488b6395643", "committedDate": "2020-11-18T02:04:44Z", "message": "Added hashCode() and equals() methods to MatchAnyValidator. Added equals and noequals tests to MatchAnyValidatorTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aeb00a7853a93a99a66e1b96816e61a14e941c49", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/aeb00a7853a93a99a66e1b96816e61a14e941c49", "committedDate": "2020-11-18T02:04:44Z", "message": "Updated MatchAnyValidator to sort when receiving a list of validators based on hashcode"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c7f0178de1dd46f7b8ef0bf7d96c60077f47352", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/2c7f0178de1dd46f7b8ef0bf7d96c60077f47352", "committedDate": "2020-11-18T02:04:44Z", "message": "Fix styling issue"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea395fcbb5cf800e6d2a3216f8252e40f9b778e0", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/ea395fcbb5cf800e6d2a3216f8252e40f9b778e0", "committedDate": "2020-11-17T19:17:34Z", "message": "Fix styling issue"}, "afterCommit": {"oid": "2c7f0178de1dd46f7b8ef0bf7d96c60077f47352", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/2c7f0178de1dd46f7b8ef0bf7d96c60077f47352", "committedDate": "2020-11-18T02:04:44Z", "message": "Fix styling issue"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 844, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}