{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMTQ4MDQy", "number": 6040, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0ODowM1rOD5kqrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNToxOFrOD6WL2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxNjk2MTc1OnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/utils/validation/validation.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0ODowM1rOGQ69OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDo0ODowM1rOGQ69OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM5NjM0NQ==", "bodyText": "can we split up this triple ternary for readability?", "url": "https://github.com/codice/ddf/pull/6040#discussion_r420396345", "createdAt": "2020-05-05T20:48:03Z", "author": {"login": "bdeining"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/utils/validation/validation.tsx", "diffHunk": "@@ -270,68 +271,134 @@ function validateLinePolygon(mode: string, currentValue: string) {\n   }\n }\n \n-function validateBoundingBox(value: any) {\n-  let north\n-  let south\n-  if (value.isDms) {\n-    const coordinateNorth = parseDmsCoordinate(value.north)\n-    const coordinateSouth = parseDmsCoordinate(value.south)\n-    north = coordinateNorth\n-      ? dmsCoordinateToDD({\n-          ...coordinateNorth,\n-          direction: value.dmsNorthDirection,\n-        })\n-      : null\n-    south = coordinateSouth\n-      ? dmsCoordinateToDD({\n-          ...coordinateSouth,\n-          direction: value.dmsSouthDirection,\n-        })\n-      : null\n-  } else if (value.isUsng) {\n-    const upperLeftCoord = converter.USNGtoLL(value.upperLeft, true)\n-    const lowerRightCoord = converter.USNGtoLL(value.lowerRight, true)\n-    north = upperLeftCoord.lat\n-    south = lowerRightCoord.lat\n-  } else if (value.isUtmUps) {\n-    let northPole = value.upperLeft.hemisphere.toUpperCase() === 'NORTHERN'\n-    const upperLeftParts = {\n-      easting: parseFloat(value.upperLeft.easting),\n-      northing: parseFloat(value.upperLeft.northing),\n-      zoneNumber: value.upperLeft.zoneNumber,\n-      hemisphere: value.upperLeft.hemisphere,\n-      northPole,\n-    }\n-    upperLeftParts.northing =\n-      upperLeftParts.zoneNumber === 0 || northPole\n-        ? upperLeftParts.northing\n-        : upperLeftParts.northing - NORTHING_OFFSET\n-    north = Number(converter.UTMUPStoLL(upperLeftParts).lat.toFixed(5))\n-    northPole = value.lowerRight.hemisphere.toUpperCase() === 'NORTHERN'\n-    const lowerRightParts = {\n-      easting: parseFloat(value.lowerRight.easting),\n-      northing: parseFloat(value.lowerRight.northing),\n-      zoneNumber: value.lowerRight.zoneNumber,\n-      hemisphere: value.lowerRight.hemisphere,\n-      northPole,\n+function getDdCoords(value: any) {\n+  return {\n+    north: Number(value.north),\n+    south: Number(value.south),\n+    west: Number(value.west),\n+    east: Number(value.east),\n+  }\n+}\n+\n+function getDmsCoords(value: any) {\n+  const coordinateNorth = parseDmsCoordinate(value.north)\n+  const coordinateSouth = parseDmsCoordinate(value.south)\n+  const coordinateWest = parseDmsCoordinate(value.west)\n+  const coordinateEast = parseDmsCoordinate(value.east)\n+  let north, south, west, east\n+  if (coordinateNorth) {\n+    north = dmsCoordinateToDD({\n+      ...coordinateNorth,\n+      direction: value.dmsNorthDirection,\n+    })\n+  }\n+  if (coordinateSouth) {\n+    south = dmsCoordinateToDD({\n+      ...coordinateSouth,\n+      direction: value.dmsSouthDirection,\n+    })\n+  }\n+  if (coordinateWest) {\n+    west = dmsCoordinateToDD({\n+      ...coordinateWest,\n+      direction: value.dmsWestDirection,\n+    })\n+  }\n+  if (coordinateEast) {\n+    east = dmsCoordinateToDD({\n+      ...coordinateEast,\n+      direction: value.dmsEastDirection,\n+    })\n+  }\n+  return { north, south, west, east }\n+}\n+\n+function getUsngCoords(upperLeft: any, lowerRight: any) {\n+  const upperLeftCoord = converter.USNGtoLL(upperLeft, true)\n+  const lowerRightCoord = converter.USNGtoLL(lowerRight, true)\n+  return {\n+    north: upperLeftCoord.lat.toFixed(5),\n+    south: lowerRightCoord.lat.toFixed(5),\n+    west: upperLeftCoord.lon.toFixed(5),\n+    east: lowerRightCoord.lon.toFixed(5),\n+  }\n+}\n+\n+function getUtmUpsCoords(upperLeft: any, lowerRight: any) {\n+  const upperLeftParts = {\n+    easting: parseFloat(upperLeft.easting),\n+    northing: parseFloat(upperLeft.northing),\n+    zoneNumber: upperLeft.zoneNumber,\n+    hemisphere: upperLeft.hemisphere,\n+    northPole: upperLeft.hemisphere.toUpperCase() === 'NORTHERN',\n+  }\n+  const lowerRightParts = {\n+    easting: parseFloat(lowerRight.easting),\n+    northing: parseFloat(lowerRight.northing),\n+    zoneNumber: lowerRight.zoneNumber,\n+    hemisphere: lowerRight.hemisphere,\n+    northPole: lowerRight.hemisphere.toUpperCase() === 'NORTHERN',\n+  }\n+  upperLeftParts.northing =\n+    upperLeftParts.zoneNumber === 0 || upperLeftParts.northPole\n+      ? upperLeftParts.northing\n+      : upperLeftParts.northing - NORTHING_OFFSET\n+  lowerRightParts.northing =\n+    lowerRightParts.zoneNumber === 0 || lowerRightParts.northPole\n+      ? lowerRightParts.northing\n+      : lowerRightParts.northing - NORTHING_OFFSET\n+  const north = Number(converter.UTMUPStoLL(upperLeftParts).lat.toFixed(5))\n+  const south = Number(converter.UTMUPStoLL(lowerRightParts).lat.toFixed(5))\n+  const west = Number(converter.UTMUPStoLL(upperLeftParts).lon.toFixed(5))\n+  const east = Number(converter.UTMUPStoLL(lowerRightParts).lon.toFixed(5))\n+  return { north, south, west, east }\n+}\n+\n+function validateLatitudes(north: any, south: any, isUsngOrUtmUps: boolean) {\n+  if (!isNaN(south) && !isNaN(north) && south >= north) {\n+    return {\n+      error: true,\n+      message: isUsngOrUtmUps\n+        ? 'Upper left coordinate must be located above lower right coordinate'\n+        : 'North value must be greater than south value',\n     }\n-    lowerRightParts.northing =\n-      lowerRightParts.zoneNumber === 0 || northPole\n-        ? lowerRightParts.northing\n-        : lowerRightParts.northing - NORTHING_OFFSET\n-    south = Number(converter.UTMUPStoLL(lowerRightParts).lat.toFixed(5))\n-  } else {\n-    north = Number(value.north)\n-    south = Number(value.south)\n   }\n-  if (south !== null && north !== null && south >= north) {\n+  return initialErrorState\n+}\n+\n+function validateLongitudes(west: any, east: any, isUsngOrUtmUps: boolean) {\n+  if (!isNaN(west) && !isNaN(east) && west === east) {\n     return {\n       error: true,\n-      message:\n-        value.isUsng || value.isUtmUps\n-          ? 'Upper left coordinate must be located above lower right coordinate'\n-          : 'North value must be greater than south value',\n+      message: isUsngOrUtmUps\n+        ? 'Left bound cannot equal right bound'\n+        : 'West value cannot equal east value',\n+    }\n+  }\n+  return initialErrorState\n+}\n+\n+function validateBoundingBox(key: string, value: any) {\n+  const { north, south, west, east } = value.isDms\n+    ? getDmsCoords(value)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309fc0cf7b3559ab314929be415ec466c65ad349"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyNTA3NDgwOnYy", "diffSide": "RIGHT", "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/utils/validation/validation.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxNzoyNToxOFrOGSIscw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxNjozODozM1rOGSrz9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDAwMw==", "bodyText": "\u2753 why is validateLongitudes being called here?", "url": "https://github.com/codice/ddf/pull/6040#discussion_r421670003", "createdAt": "2020-05-07T17:25:18Z", "author": {"login": "cassandrabailey293"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/utils/validation/validation.tsx", "diffHunk": "@@ -270,68 +271,134 @@ function validateLinePolygon(mode: string, currentValue: string) {\n   }\n }\n \n-function validateBoundingBox(value: any) {\n-  let north\n-  let south\n-  if (value.isDms) {\n-    const coordinateNorth = parseDmsCoordinate(value.north)\n-    const coordinateSouth = parseDmsCoordinate(value.south)\n-    north = coordinateNorth\n-      ? dmsCoordinateToDD({\n-          ...coordinateNorth,\n-          direction: value.dmsNorthDirection,\n-        })\n-      : null\n-    south = coordinateSouth\n-      ? dmsCoordinateToDD({\n-          ...coordinateSouth,\n-          direction: value.dmsSouthDirection,\n-        })\n-      : null\n-  } else if (value.isUsng) {\n-    const upperLeftCoord = converter.USNGtoLL(value.upperLeft, true)\n-    const lowerRightCoord = converter.USNGtoLL(value.lowerRight, true)\n-    north = upperLeftCoord.lat\n-    south = lowerRightCoord.lat\n-  } else if (value.isUtmUps) {\n-    let northPole = value.upperLeft.hemisphere.toUpperCase() === 'NORTHERN'\n-    const upperLeftParts = {\n-      easting: parseFloat(value.upperLeft.easting),\n-      northing: parseFloat(value.upperLeft.northing),\n-      zoneNumber: value.upperLeft.zoneNumber,\n-      hemisphere: value.upperLeft.hemisphere,\n-      northPole,\n-    }\n-    upperLeftParts.northing =\n-      upperLeftParts.zoneNumber === 0 || northPole\n-        ? upperLeftParts.northing\n-        : upperLeftParts.northing - NORTHING_OFFSET\n-    north = Number(converter.UTMUPStoLL(upperLeftParts).lat.toFixed(5))\n-    northPole = value.lowerRight.hemisphere.toUpperCase() === 'NORTHERN'\n-    const lowerRightParts = {\n-      easting: parseFloat(value.lowerRight.easting),\n-      northing: parseFloat(value.lowerRight.northing),\n-      zoneNumber: value.lowerRight.zoneNumber,\n-      hemisphere: value.lowerRight.hemisphere,\n-      northPole,\n+function getDdCoords(value: any) {\n+  return {\n+    north: Number(value.north),\n+    south: Number(value.south),\n+    west: Number(value.west),\n+    east: Number(value.east),\n+  }\n+}\n+\n+function getDmsCoords(value: any) {\n+  const coordinateNorth = parseDmsCoordinate(value.north)\n+  const coordinateSouth = parseDmsCoordinate(value.south)\n+  const coordinateWest = parseDmsCoordinate(value.west)\n+  const coordinateEast = parseDmsCoordinate(value.east)\n+  let north, south, west, east\n+  if (coordinateNorth) {\n+    north = dmsCoordinateToDD({\n+      ...coordinateNorth,\n+      direction: value.dmsNorthDirection,\n+    })\n+  }\n+  if (coordinateSouth) {\n+    south = dmsCoordinateToDD({\n+      ...coordinateSouth,\n+      direction: value.dmsSouthDirection,\n+    })\n+  }\n+  if (coordinateWest) {\n+    west = dmsCoordinateToDD({\n+      ...coordinateWest,\n+      direction: value.dmsWestDirection,\n+    })\n+  }\n+  if (coordinateEast) {\n+    east = dmsCoordinateToDD({\n+      ...coordinateEast,\n+      direction: value.dmsEastDirection,\n+    })\n+  }\n+  return { north, south, west, east }\n+}\n+\n+function getUsngCoords(upperLeft: any, lowerRight: any) {\n+  const upperLeftCoord = converter.USNGtoLL(upperLeft, true)\n+  const lowerRightCoord = converter.USNGtoLL(lowerRight, true)\n+  return {\n+    north: upperLeftCoord.lat.toFixed(5),\n+    south: lowerRightCoord.lat.toFixed(5),\n+    west: upperLeftCoord.lon.toFixed(5),\n+    east: lowerRightCoord.lon.toFixed(5),\n+  }\n+}\n+\n+function getUtmUpsCoords(upperLeft: any, lowerRight: any) {\n+  const upperLeftParts = {\n+    easting: parseFloat(upperLeft.easting),\n+    northing: parseFloat(upperLeft.northing),\n+    zoneNumber: upperLeft.zoneNumber,\n+    hemisphere: upperLeft.hemisphere,\n+    northPole: upperLeft.hemisphere.toUpperCase() === 'NORTHERN',\n+  }\n+  const lowerRightParts = {\n+    easting: parseFloat(lowerRight.easting),\n+    northing: parseFloat(lowerRight.northing),\n+    zoneNumber: lowerRight.zoneNumber,\n+    hemisphere: lowerRight.hemisphere,\n+    northPole: lowerRight.hemisphere.toUpperCase() === 'NORTHERN',\n+  }\n+  upperLeftParts.northing =\n+    upperLeftParts.zoneNumber === 0 || upperLeftParts.northPole\n+      ? upperLeftParts.northing\n+      : upperLeftParts.northing - NORTHING_OFFSET\n+  lowerRightParts.northing =\n+    lowerRightParts.zoneNumber === 0 || lowerRightParts.northPole\n+      ? lowerRightParts.northing\n+      : lowerRightParts.northing - NORTHING_OFFSET\n+  const north = Number(converter.UTMUPStoLL(upperLeftParts).lat.toFixed(5))\n+  const south = Number(converter.UTMUPStoLL(lowerRightParts).lat.toFixed(5))\n+  const west = Number(converter.UTMUPStoLL(upperLeftParts).lon.toFixed(5))\n+  const east = Number(converter.UTMUPStoLL(lowerRightParts).lon.toFixed(5))\n+  return { north, south, west, east }\n+}\n+\n+function validateLatitudes(north: any, south: any, isUsngOrUtmUps: boolean) {\n+  if (!isNaN(south) && !isNaN(north) && south >= north) {\n+    return {\n+      error: true,\n+      message: isUsngOrUtmUps\n+        ? 'Upper left coordinate must be located above lower right coordinate'\n+        : 'North value must be greater than south value',\n     }\n-    lowerRightParts.northing =\n-      lowerRightParts.zoneNumber === 0 || northPole\n-        ? lowerRightParts.northing\n-        : lowerRightParts.northing - NORTHING_OFFSET\n-    south = Number(converter.UTMUPStoLL(lowerRightParts).lat.toFixed(5))\n-  } else {\n-    north = Number(value.north)\n-    south = Number(value.south)\n   }\n-  if (south !== null && north !== null && south >= north) {\n+  return initialErrorState\n+}\n+\n+function validateLongitudes(west: any, east: any, isUsngOrUtmUps: boolean) {\n+  if (!isNaN(west) && !isNaN(east) && west === east) {\n     return {\n       error: true,\n-      message:\n-        value.isUsng || value.isUtmUps\n-          ? 'Upper left coordinate must be located above lower right coordinate'\n-          : 'North value must be greater than south value',\n+      message: isUsngOrUtmUps\n+        ? 'Left bound cannot equal right bound'\n+        : 'West value cannot equal east value',\n+    }\n+  }\n+  return initialErrorState\n+}\n+\n+function validateBoundingBox(key: string, value: any) {\n+  const { north, south, west, east } = value.isDms\n+    ? getDmsCoords(value)\n+    : value.isUsng\n+      ? getUsngCoords(value.upperLeft, value.lowerRight)\n+      : value.isUtmUps\n+        ? getUtmUpsCoords(value.upperLeft, value.lowerRight)\n+        : getDdCoords(value)\n+  const isUsngOrUtmUps = value.isUsng || value.isUtmUps\n+  if (key.toLowerCase().includes('lon')) {\n+    const { error, message } = validateLongitudes(west, east, isUsngOrUtmUps)\n+    if (error) {\n+      return { error, message }\n+    }\n+    return validateLatitudes(north, south, isUsngOrUtmUps)\n+  } else {\n+    const { error, message } = validateLatitudes(north, south, isUsngOrUtmUps)\n+    if (error) {\n+      return { error, message }\n     }\n+    return validateLongitudes(west, east, isUsngOrUtmUps)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "309fc0cf7b3559ab314929be415ec466c65ad349"}, "originalPosition": 207}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjI0NTM2Ng==", "bodyText": "If the key is 'lat' but there are no issues with the latitudes, we still want to display an error message if east = west, which is what validateLongitudes checks for", "url": "https://github.com/codice/ddf/pull/6040#discussion_r422245366", "createdAt": "2020-05-08T16:38:33Z", "author": {"login": "hayleynorton"}, "path": "ui/packages/catalog-ui-search/src/main/webapp/react-component/utils/validation/validation.tsx", "diffHunk": "@@ -270,68 +271,134 @@ function validateLinePolygon(mode: string, currentValue: string) {\n   }\n }\n \n-function validateBoundingBox(value: any) {\n-  let north\n-  let south\n-  if (value.isDms) {\n-    const coordinateNorth = parseDmsCoordinate(value.north)\n-    const coordinateSouth = parseDmsCoordinate(value.south)\n-    north = coordinateNorth\n-      ? dmsCoordinateToDD({\n-          ...coordinateNorth,\n-          direction: value.dmsNorthDirection,\n-        })\n-      : null\n-    south = coordinateSouth\n-      ? dmsCoordinateToDD({\n-          ...coordinateSouth,\n-          direction: value.dmsSouthDirection,\n-        })\n-      : null\n-  } else if (value.isUsng) {\n-    const upperLeftCoord = converter.USNGtoLL(value.upperLeft, true)\n-    const lowerRightCoord = converter.USNGtoLL(value.lowerRight, true)\n-    north = upperLeftCoord.lat\n-    south = lowerRightCoord.lat\n-  } else if (value.isUtmUps) {\n-    let northPole = value.upperLeft.hemisphere.toUpperCase() === 'NORTHERN'\n-    const upperLeftParts = {\n-      easting: parseFloat(value.upperLeft.easting),\n-      northing: parseFloat(value.upperLeft.northing),\n-      zoneNumber: value.upperLeft.zoneNumber,\n-      hemisphere: value.upperLeft.hemisphere,\n-      northPole,\n-    }\n-    upperLeftParts.northing =\n-      upperLeftParts.zoneNumber === 0 || northPole\n-        ? upperLeftParts.northing\n-        : upperLeftParts.northing - NORTHING_OFFSET\n-    north = Number(converter.UTMUPStoLL(upperLeftParts).lat.toFixed(5))\n-    northPole = value.lowerRight.hemisphere.toUpperCase() === 'NORTHERN'\n-    const lowerRightParts = {\n-      easting: parseFloat(value.lowerRight.easting),\n-      northing: parseFloat(value.lowerRight.northing),\n-      zoneNumber: value.lowerRight.zoneNumber,\n-      hemisphere: value.lowerRight.hemisphere,\n-      northPole,\n+function getDdCoords(value: any) {\n+  return {\n+    north: Number(value.north),\n+    south: Number(value.south),\n+    west: Number(value.west),\n+    east: Number(value.east),\n+  }\n+}\n+\n+function getDmsCoords(value: any) {\n+  const coordinateNorth = parseDmsCoordinate(value.north)\n+  const coordinateSouth = parseDmsCoordinate(value.south)\n+  const coordinateWest = parseDmsCoordinate(value.west)\n+  const coordinateEast = parseDmsCoordinate(value.east)\n+  let north, south, west, east\n+  if (coordinateNorth) {\n+    north = dmsCoordinateToDD({\n+      ...coordinateNorth,\n+      direction: value.dmsNorthDirection,\n+    })\n+  }\n+  if (coordinateSouth) {\n+    south = dmsCoordinateToDD({\n+      ...coordinateSouth,\n+      direction: value.dmsSouthDirection,\n+    })\n+  }\n+  if (coordinateWest) {\n+    west = dmsCoordinateToDD({\n+      ...coordinateWest,\n+      direction: value.dmsWestDirection,\n+    })\n+  }\n+  if (coordinateEast) {\n+    east = dmsCoordinateToDD({\n+      ...coordinateEast,\n+      direction: value.dmsEastDirection,\n+    })\n+  }\n+  return { north, south, west, east }\n+}\n+\n+function getUsngCoords(upperLeft: any, lowerRight: any) {\n+  const upperLeftCoord = converter.USNGtoLL(upperLeft, true)\n+  const lowerRightCoord = converter.USNGtoLL(lowerRight, true)\n+  return {\n+    north: upperLeftCoord.lat.toFixed(5),\n+    south: lowerRightCoord.lat.toFixed(5),\n+    west: upperLeftCoord.lon.toFixed(5),\n+    east: lowerRightCoord.lon.toFixed(5),\n+  }\n+}\n+\n+function getUtmUpsCoords(upperLeft: any, lowerRight: any) {\n+  const upperLeftParts = {\n+    easting: parseFloat(upperLeft.easting),\n+    northing: parseFloat(upperLeft.northing),\n+    zoneNumber: upperLeft.zoneNumber,\n+    hemisphere: upperLeft.hemisphere,\n+    northPole: upperLeft.hemisphere.toUpperCase() === 'NORTHERN',\n+  }\n+  const lowerRightParts = {\n+    easting: parseFloat(lowerRight.easting),\n+    northing: parseFloat(lowerRight.northing),\n+    zoneNumber: lowerRight.zoneNumber,\n+    hemisphere: lowerRight.hemisphere,\n+    northPole: lowerRight.hemisphere.toUpperCase() === 'NORTHERN',\n+  }\n+  upperLeftParts.northing =\n+    upperLeftParts.zoneNumber === 0 || upperLeftParts.northPole\n+      ? upperLeftParts.northing\n+      : upperLeftParts.northing - NORTHING_OFFSET\n+  lowerRightParts.northing =\n+    lowerRightParts.zoneNumber === 0 || lowerRightParts.northPole\n+      ? lowerRightParts.northing\n+      : lowerRightParts.northing - NORTHING_OFFSET\n+  const north = Number(converter.UTMUPStoLL(upperLeftParts).lat.toFixed(5))\n+  const south = Number(converter.UTMUPStoLL(lowerRightParts).lat.toFixed(5))\n+  const west = Number(converter.UTMUPStoLL(upperLeftParts).lon.toFixed(5))\n+  const east = Number(converter.UTMUPStoLL(lowerRightParts).lon.toFixed(5))\n+  return { north, south, west, east }\n+}\n+\n+function validateLatitudes(north: any, south: any, isUsngOrUtmUps: boolean) {\n+  if (!isNaN(south) && !isNaN(north) && south >= north) {\n+    return {\n+      error: true,\n+      message: isUsngOrUtmUps\n+        ? 'Upper left coordinate must be located above lower right coordinate'\n+        : 'North value must be greater than south value',\n     }\n-    lowerRightParts.northing =\n-      lowerRightParts.zoneNumber === 0 || northPole\n-        ? lowerRightParts.northing\n-        : lowerRightParts.northing - NORTHING_OFFSET\n-    south = Number(converter.UTMUPStoLL(lowerRightParts).lat.toFixed(5))\n-  } else {\n-    north = Number(value.north)\n-    south = Number(value.south)\n   }\n-  if (south !== null && north !== null && south >= north) {\n+  return initialErrorState\n+}\n+\n+function validateLongitudes(west: any, east: any, isUsngOrUtmUps: boolean) {\n+  if (!isNaN(west) && !isNaN(east) && west === east) {\n     return {\n       error: true,\n-      message:\n-        value.isUsng || value.isUtmUps\n-          ? 'Upper left coordinate must be located above lower right coordinate'\n-          : 'North value must be greater than south value',\n+      message: isUsngOrUtmUps\n+        ? 'Left bound cannot equal right bound'\n+        : 'West value cannot equal east value',\n+    }\n+  }\n+  return initialErrorState\n+}\n+\n+function validateBoundingBox(key: string, value: any) {\n+  const { north, south, west, east } = value.isDms\n+    ? getDmsCoords(value)\n+    : value.isUsng\n+      ? getUsngCoords(value.upperLeft, value.lowerRight)\n+      : value.isUtmUps\n+        ? getUtmUpsCoords(value.upperLeft, value.lowerRight)\n+        : getDdCoords(value)\n+  const isUsngOrUtmUps = value.isUsng || value.isUtmUps\n+  if (key.toLowerCase().includes('lon')) {\n+    const { error, message } = validateLongitudes(west, east, isUsngOrUtmUps)\n+    if (error) {\n+      return { error, message }\n+    }\n+    return validateLatitudes(north, south, isUsngOrUtmUps)\n+  } else {\n+    const { error, message } = validateLatitudes(north, south, isUsngOrUtmUps)\n+    if (error) {\n+      return { error, message }\n     }\n+    return validateLongitudes(west, east, isUsngOrUtmUps)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTY3MDAwMw=="}, "originalCommit": {"oid": "309fc0cf7b3559ab314929be415ec466c65ad349"}, "originalPosition": 207}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4756, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}