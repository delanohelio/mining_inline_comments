{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NTQxNTUy", "number": 6117, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxMzowM1rOECrSmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODo1NFrOEDC_uQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjQxODgzOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxMzowM1rOGfR9Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozNTowNlrOGfY2rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg==", "bodyText": "\u270f\ufe0f  do we want any debug or trace logging here? Perhaps to log that we found and added cache sources to the properties?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435453242", "createdAt": "2020-06-04T18:13:03Z", "author": {"login": "rzwiefel"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    HashMap<String, Serializable> props = new HashMap<>(input.getProperties());\n+    props.put(\"cache-sources\", String.join(\",\", input.getSourceIds()));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NTk4Nw==", "bodyText": "I was going back and forth on that just last night before pushing up the PR.  I backed off since I had changed so much already.  I can go back and see where it would not be possible to see a side effect from some other down range log statement.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435455987", "createdAt": "2020-06-04T18:17:55Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    HashMap<String, Serializable> props = new HashMap<>(input.getProperties());\n+    props.put(\"cache-sources\", String.join(\",\", input.getSourceIds()));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg=="}, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NjI1NA==", "bodyText": "I added more logging.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435566254", "createdAt": "2020-06-04T21:35:06Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    HashMap<String, Serializable> props = new HashMap<>(input.getProperties());\n+    props.put(\"cache-sources\", String.join(\",\", input.getSourceIds()));\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzI0Mg=="}, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjQyMjIwOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODoxNDoxMFrOGfR_cA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTozNToxNFrOGfY29Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA==", "bodyText": "\u270f\ufe0f just double checking, was using the logger for SolrCacheSource.class intended?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435453808", "createdAt": "2020-06-04T18:14:10Z", "author": {"login": "rzwiefel"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1NjIxNw==", "bodyText": "Whoops, copy and paste fail. \ud83d\ude05", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435456217", "createdAt": "2020-06-04T18:18:22Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA=="}, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU2NjMyNQ==", "bodyText": "Fixed", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435566325", "createdAt": "2020-06-04T21:35:14Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ1MzgwOA=="}, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMjU3ODk2OnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDowNlrOGfTiWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxODo1MDowNlrOGfTiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ3OTEyOA==", "bodyText": "You can ignore both of these, I was just checking into other ways to do this with optional/streaming to see how it looked but don't really strike me as advantageous. And that second one was just for POC, you can kinda curry args as you build up ctor parameters.. so while nifty.... having to specify the Function since it can't infer the type is not pretty at all  (neither is nested lambdas really) \ud83d\ude02\nclonedResults\n    .stream()\n    .findFirst()\n    .map(Result::getMetacard)\n    .map(Metacard::getSourceId)\n    .ifPresent(sourceId -> sourceResponse.getProcessingDetails()\n        .stream()\n        .map(sourceDetails -> new ProcessingDetailsImpl(sourceDetails, sourceId))\n        .collect(Collectors.toSet()));\n      clonedResults\n        .stream()\n        .findFirst()\n        .map(Result::getMetacard)\n        .map(Metacard::getSourceId)\n        .map(\n            sourceId ->\n                (Function<SourceProcessingDetails, ProcessingDetailsImpl>)\n                    sourceDetail -> new ProcessingDetailsImpl(sourceDetail, sourceId))\n        .map(\n            pdcreator ->\n                response\n                    .getProcessingDetails()\n                    .stream()\n                    .map(pdcreator)\n                    .collect(Collectors.toSet()))\n        .orElseGet(HashSet::new);", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435479128", "createdAt": "2020-06-04T18:50:06Z", "author": {"login": "rzwiefel"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(SolrCacheSource.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    LOGGER.debug(\"Post query processing of QueryResponse.\");\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {\n+    cacheCommitPhaser.shutdown();\n+    cacheBulkProcessor.shutdown();\n+  }\n+\n+  private void addToCache(QueryResponse input) {\n+    SourceResponse clonedSourceResponse = cloneResponse(input);\n+    cacheExecutorService.submit(\n+        () -> {\n+          try {\n+            cacheBulkProcessor.add(clonedSourceResponse.getResults());\n+          } catch (VirtualMachineError vme) {\n+            throw vme;\n+          } catch (Throwable throwable) {\n+            LOGGER.warn(\"Unable to add results for bulk processing\", throwable);\n+          }\n+        });\n+  }\n+\n+  private SourceResponse cloneResponse(SourceResponse sourceResponse) {\n+\n+    List<Result> clonedResults =\n+        sourceResponse\n+            .getResults()\n+            .stream()\n+            .map(Result::getMetacard)\n+            .map(m -> new MetacardImpl(m, m.getMetacardType()))\n+            .map(ResultImpl::new)\n+            .collect(Collectors.toList());\n+\n+    Set<ProcessingDetails> processingDetails = new HashSet<>();\n+    if (clonedResults.size() > 0) {\n+      String sourceId = clonedResults.get(0).getMetacard().getSourceId();\n+      processingDetails =\n+          sourceResponse\n+              .getProcessingDetails()\n+              .stream()\n+              .map(sourceDetails -> new ProcessingDetailsImpl(sourceDetails, sourceId))\n+              .collect(Collectors.toSet());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d243c30e8c731c101c8a43592ac3299ee9571c"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE2MDc1OnYy", "diffSide": "LEFT", "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1MTo0NVrOGfZSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozMToxM1rOGf95UQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzM1MQ==", "bodyText": "\u2753 Making a note for later (might already be addressed) - should the cache separately support management commands with similar semantics so you can still work with it or verify behavior?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435573351", "createdAt": "2020-06-04T21:51:45Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -98,9 +95,6 @@\n   )\n   boolean force = false;\n \n-  @Option(name = \"--cache\", description = \"Only remove cached entries.\")\n-  boolean cache = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzEzNw==", "bodyText": "If you need to query, you can use the current endpoints to query the new cache source.  Generally you should not have to manually manage the cache contents.  There are settings to manage when cached results age out.  If something makes it into the cache that needs to be immediately removed then there is still a cache clear command available.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436173137", "createdAt": "2020-06-05T21:31:13Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -98,9 +95,6 @@\n   )\n   boolean force = false;\n \n-  @Option(name = \"--cache\", description = \"Only remove cached entries.\")\n-  boolean cache = false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3MzM1MQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE2ODM3OnYy", "diffSide": "LEFT", "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1NToxMlrOGfZXVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTozMjoxNlrOGf96xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDYxMg==", "bodyText": "\u2753 Just so I'm understanding this correctly - pulling out the cache renders this mode property completely unnecessary now?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435574612", "createdAt": "2020-06-04T21:55:12Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -295,15 +267,10 @@ private QueryRequest getIntendedQuery(FilterBuilder filterBuilder, boolean isReq\n     }\n \n     QueryImpl query = new QueryImpl(filter);\n-\n     query.setRequestsTotalResultsCount(isRequestForTotal);\n-\n     query.setPageSize(batchSize);\n \n-    Map<String, Serializable> properties = new HashMap<>();\n-    properties.put(\"mode\", \"native\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MzUwOQ==", "bodyText": "This mode was only ever used by the old, removed Standard UI.  I removed it since there are no plans to use this feature in the future since it was too slow and did not scale well.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436173509", "createdAt": "2020-06-05T21:32:16Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveAllCommand.java", "diffHunk": "@@ -295,15 +267,10 @@ private QueryRequest getIntendedQuery(FilterBuilder filterBuilder, boolean isReq\n     }\n \n     QueryImpl query = new QueryImpl(filter);\n-\n     query.setRequestsTotalResultsCount(isRequestForTotal);\n-\n     query.setPageSize(batchSize);\n \n-    Map<String, Serializable> properties = new HashMap<>();\n-    properties.put(\"mode\", \"native\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NDYxMg=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzE3NDU4OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveCommand.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMTo1NzozOFrOGfZbGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjo0NDo0NlrOGf_TOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTU3Nw==", "bodyText": "\u2753 This will never run against the cache, even if it happens to be installed, so filters are now fair game in all cases?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435575577", "createdAt": "2020-06-04T21:57:38Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveCommand.java", "diffHunk": "@@ -124,7 +90,7 @@ private Object executeRemoveFromStore() throws CatalogCommandException {\n       }\n \n       if (hasFilter()) {\n-        QueryRequestImpl queryRequest = new QueryRequestImpl(getQuery(), false);\n+        QueryRequestImpl queryRequest = new QueryRequestImpl(new QueryImpl(getFilter()), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5NjE1NQ==", "bodyText": "Correct. This will only impact the catalog provider now.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436196155", "createdAt": "2020-06-05T22:44:46Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-commands/src/main/java/org/codice/ddf/commands/catalog/RemoveCommand.java", "diffHunk": "@@ -124,7 +90,7 @@ private Object executeRemoveFromStore() throws CatalogCommandException {\n       }\n \n       if (hasFilter()) {\n-        QueryRequestImpl queryRequest = new QueryRequestImpl(getQuery(), false);\n+        QueryRequestImpl queryRequest = new QueryRequestImpl(new QueryImpl(getFilter()), false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU3NTU3Nw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzMwMzMxOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-standardframework/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMjo1MzowMVrOGfapLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODowNzowOFrOGgqEWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU2Nw==", "bodyText": "\ud83d\udcaf\n\u2753 Does the new way to leverage the Solr cache have dependencies on the provider in order to share the third-party Solr support? Or does it bring its own? I'm wondering if the total catalog-min distribution will see this size reduction if the consumers opt out of Solr caching entirely.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435595567", "createdAt": "2020-06-04T22:53:01Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/pom.xml", "diffHunk": "@@ -385,7 +350,7 @@\n                         <configuration>\n                             <rules>\n                                 <ArtifactSizeEnforcerRule implementation=\"org.codice.maven.artifactsize.ArtifactSizeEnforcerRule\">\n-                                    <maxArtifactSize>63.2_MB</maxArtifactSize>\n+                                    <maxArtifactSize>10.5_MB</maxArtifactSize>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NDI3OA==", "bodyText": "Currently the size is not reduced since the embedded dependencies are in the new Solr cache module.  With some cleanup, I think we could get to a point where there is one service used by both the provider and the cache to avoid this duplication but I did not do that as a part of this PR.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436174278", "createdAt": "2020-06-05T21:34:36Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/pom.xml", "diffHunk": "@@ -385,7 +350,7 @@\n                         <configuration>\n                             <rules>\n                                 <ArtifactSizeEnforcerRule implementation=\"org.codice.maven.artifactsize.ArtifactSizeEnforcerRule\">\n-                                    <maxArtifactSize>63.2_MB</maxArtifactSize>\n+                                    <maxArtifactSize>10.5_MB</maxArtifactSize>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU2Nw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxODU3Mw==", "bodyText": "That's fine - we probably don't have to take it that far since most of the benefits have been obtained, although we certainly could - the point is that if we don't install Solr Cache support then we will see the size reduction because those bundles with the additional embedded dependencies won't be installed, which means we don't have to ship them. Does that sound right?\nNot shipping them will require a little features file and Karaf distribution rework. And sounds favorable in lieu of writing a new service.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436218573", "createdAt": "2020-06-06T00:41:58Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/pom.xml", "diffHunk": "@@ -385,7 +350,7 @@\n                         <configuration>\n                             <rules>\n                                 <ArtifactSizeEnforcerRule implementation=\"org.codice.maven.artifactsize.ArtifactSizeEnforcerRule\">\n-                                    <maxArtifactSize>63.2_MB</maxArtifactSize>\n+                                    <maxArtifactSize>10.5_MB</maxArtifactSize>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU2Nw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5Njg1OQ==", "bodyText": "That sounds right.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436896859", "createdAt": "2020-06-08T18:07:08Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/pom.xml", "diffHunk": "@@ -385,7 +350,7 @@\n                         <configuration>\n                             <rules>\n                                 <ArtifactSizeEnforcerRule implementation=\"org.codice.maven.artifactsize.ArtifactSizeEnforcerRule\">\n-                                    <maxArtifactSize>63.2_MB</maxArtifactSize>\n+                                    <maxArtifactSize>10.5_MB</maxArtifactSize>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTU5NTU2Nw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM3MjE2OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzoyODoxMFrOGfbTUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODoxMDoxNVrOGgqK_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw==", "bodyText": "\u2753 Is this being reassigned? Can it be final instead?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435606353", "createdAt": "2020-06-04T23:28:10Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -127,97 +88,43 @@\n    */\n   protected List<PostFederatedQueryPlugin> postQuery;\n \n-  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory(this);\n+  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE5Njk3MA==", "bodyText": "It is replaced with a mock during testing.  I added a @VisibleForTesting to its setter.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436196970", "createdAt": "2020-06-05T22:48:01Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -127,97 +88,43 @@\n    */\n   protected List<PostFederatedQueryPlugin> postQuery;\n \n-  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory(this);\n+  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIxOTgyNw==", "bodyText": "\u2753  Any reason it couldn't just get passed through the constructor instead? Does it need to change mid-test or would re-building the object before each test be unnecessarily verbose?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436219827", "createdAt": "2020-06-06T00:44:51Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -127,97 +88,43 @@\n    */\n   protected List<PostFederatedQueryPlugin> postQuery;\n \n-  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory(this);\n+  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjg5ODU1OA==", "bodyText": "Nope.  Looks like it is only used in the setup method.  I think I was just trying to avoid anything that would impact blueprint but it appears this will only impact the test.  I can fix this one.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436898558", "createdAt": "2020-06-08T18:10:15Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -127,97 +88,43 @@\n    */\n   protected List<PostFederatedQueryPlugin> postQuery;\n \n-  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory(this);\n+  private SortedQueryMonitorFactory sortedQueryMonitorFactory = new SortedQueryMonitorFactory();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYwNjM1Mw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzM5Njk3OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMzozNjoyOVrOGfblFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTo0MjowOFrOGf-H7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxMDkwMg==", "bodyText": "\u2753 I'm a tad confused why we need finalSourceQueryRequest, is it because of side effects? If so do we need to copy sourceQueryRequest instead of just assigning? Or was this done just for readability?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435610902", "createdAt": "2020-06-04T23:36:29Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -274,9 +181,9 @@ private QueryResponse sourceFederate(List<Source> sources, final QueryRequest qu\n           LOGGER.info(\"Plugin stopped processing\", e);\n         }\n \n+        QueryRequest finalSourceQueryRequest = sourceQueryRequest;\n         futures.put(\n-            queryCompletion.submit(\n-                new CallableSourceResponse(new TimedSource(source), sourceQueryRequest)),\n+            queryCompletion.submit(() -> new TimedSource(source).query(finalSourceQueryRequest)),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3Njg3OQ==", "bodyText": "I think the new lambda could not access that local variable since it was not effectively final due to the PreFederatedQueryPlugins could change the reference of that variable.  finalSourceQueryRequest is effectively final since it is never modified for the rest of its scope.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436176879", "createdAt": "2020-06-05T21:42:08Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/federation/impl/SortedFederationStrategy.java", "diffHunk": "@@ -274,9 +181,9 @@ private QueryResponse sourceFederate(List<Source> sources, final QueryRequest qu\n           LOGGER.info(\"Plugin stopped processing\", e);\n         }\n \n+        QueryRequest finalSourceQueryRequest = sourceQueryRequest;\n         futures.put(\n-            queryCompletion.submit(\n-                new CallableSourceResponse(new TimedSource(source), sourceQueryRequest)),\n+            queryCompletion.submit(() -> new TimedSource(source).query(finalSourceQueryRequest)),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYxMDkwMg=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzQ2NDkwOnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDowNTo0NVrOGfcSCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNTowMVrOGgrAMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ==", "bodyText": "\u2753 Are both this federateStrategy and the above strategy necessary? They seem like dupes. Are they stateful and are you comparing state? Seems like they were made for different tests but it's not clear what the difference is.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435622409", "createdAt": "2020-06-05T00:05:45Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.federation.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.Query;\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryImpl;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.source.Source;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.geotools.filter.NullFilterImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.opengis.filter.sort.SortBy;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SortedFederationStrategyTest {\n+\n+  private static final long LONG_TIMEOUT = 1000;\n+\n+  /** Constant to test contract of source latency prefix. */\n+  private static final String METRICS_SOURCE_ELAPSED_PREFIX = \"metrics.source.elapsed.\";\n+\n+  private ExecutorService queryExecutor;\n+\n+  @Mock private Query mockQuery;\n+\n+  private SortedFederationStrategy strategy;\n+\n+  private SortedFederationStrategy federateStrategy;\n+\n+  @Mock private PreFederatedQueryPlugin preQueryPlugin;\n+\n+  private MetacardImpl metacard;\n+\n+  @Mock private SourceResponse mockResponse;\n+\n+  @Mock private SortedQueryMonitorFactory mockSortedQueryMonitorFactory;\n+\n+  @Mock private SortedQueryMonitor mockSortedQueryMonitor;\n+\n+  private HashMap<String, Serializable> properties;\n+\n+  private ArgumentCaptor<QueryRequestImpl> requestArgumentCaptor;\n+\n+  ArgumentCaptor<QueryResponseImpl> responseArgumentCaptor;\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    queryExecutor = MoreExecutors.newDirectExecutorService();\n+\n+    when(preQueryPlugin.process(any(), any()))\n+        .thenAnswer(invocation -> invocation.getArguments()[1]);\n+\n+    strategy =\n+        new SortedFederationStrategy(\n+            queryExecutor, Arrays.asList(preQueryPlugin), new ArrayList<>());\n+\n+    federateStrategy =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMDQ4MA==", "bodyText": "\u2753 Any word on this \u261d\ufe0f  question?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436220480", "createdAt": "2020-06-06T00:47:03Z", "author": {"login": "Lambeaux"}, "path": "catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.federation.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.Query;\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryImpl;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.source.Source;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.geotools.filter.NullFilterImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.opengis.filter.sort.SortBy;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SortedFederationStrategyTest {\n+\n+  private static final long LONG_TIMEOUT = 1000;\n+\n+  /** Constant to test contract of source latency prefix. */\n+  private static final String METRICS_SOURCE_ELAPSED_PREFIX = \"metrics.source.elapsed.\";\n+\n+  private ExecutorService queryExecutor;\n+\n+  @Mock private Query mockQuery;\n+\n+  private SortedFederationStrategy strategy;\n+\n+  private SortedFederationStrategy federateStrategy;\n+\n+  @Mock private PreFederatedQueryPlugin preQueryPlugin;\n+\n+  private MetacardImpl metacard;\n+\n+  @Mock private SourceResponse mockResponse;\n+\n+  @Mock private SortedQueryMonitorFactory mockSortedQueryMonitorFactory;\n+\n+  @Mock private SortedQueryMonitor mockSortedQueryMonitor;\n+\n+  private HashMap<String, Serializable> properties;\n+\n+  private ArgumentCaptor<QueryRequestImpl> requestArgumentCaptor;\n+\n+  ArgumentCaptor<QueryResponseImpl> responseArgumentCaptor;\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    queryExecutor = MoreExecutors.newDirectExecutorService();\n+\n+    when(preQueryPlugin.process(any(), any()))\n+        .thenAnswer(invocation -> invocation.getArguments()[1]);\n+\n+    strategy =\n+        new SortedFederationStrategy(\n+            queryExecutor, Arrays.asList(preQueryPlugin), new ArrayList<>());\n+\n+    federateStrategy =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMjE3Nw==", "bodyText": "Looks like the difference was only needed for one test.  I will push that mock and different strategy down to that one test.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436912177", "createdAt": "2020-06-08T18:35:01Z", "author": {"login": "pklinef"}, "path": "catalog/core/catalog-core-standardframework/src/test/java/ddf/catalog/federation/impl/SortedFederationStrategyTest.java", "diffHunk": "@@ -0,0 +1,458 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package ddf.catalog.federation.impl;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.containsInAnyOrder;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.Mockito.atLeastOnce;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.doReturn;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.verifyZeroInteractions;\n+import static org.mockito.Mockito.when;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.util.concurrent.MoreExecutors;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.Query;\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryImpl;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.source.Source;\n+import ddf.catalog.source.UnsupportedQueryException;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.UUID;\n+import java.util.concurrent.CompletionService;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.geotools.filter.NullFilterImpl;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.Mock;\n+import org.mockito.junit.MockitoJUnitRunner;\n+import org.opengis.filter.sort.SortBy;\n+\n+@RunWith(MockitoJUnitRunner.class)\n+public class SortedFederationStrategyTest {\n+\n+  private static final long LONG_TIMEOUT = 1000;\n+\n+  /** Constant to test contract of source latency prefix. */\n+  private static final String METRICS_SOURCE_ELAPSED_PREFIX = \"metrics.source.elapsed.\";\n+\n+  private ExecutorService queryExecutor;\n+\n+  @Mock private Query mockQuery;\n+\n+  private SortedFederationStrategy strategy;\n+\n+  private SortedFederationStrategy federateStrategy;\n+\n+  @Mock private PreFederatedQueryPlugin preQueryPlugin;\n+\n+  private MetacardImpl metacard;\n+\n+  @Mock private SourceResponse mockResponse;\n+\n+  @Mock private SortedQueryMonitorFactory mockSortedQueryMonitorFactory;\n+\n+  @Mock private SortedQueryMonitor mockSortedQueryMonitor;\n+\n+  private HashMap<String, Serializable> properties;\n+\n+  private ArgumentCaptor<QueryRequestImpl> requestArgumentCaptor;\n+\n+  ArgumentCaptor<QueryResponseImpl> responseArgumentCaptor;\n+\n+  @Before\n+  public void setup() throws Exception {\n+\n+    queryExecutor = MoreExecutors.newDirectExecutorService();\n+\n+    when(preQueryPlugin.process(any(), any()))\n+        .thenAnswer(invocation -> invocation.getArguments()[1]);\n+\n+    strategy =\n+        new SortedFederationStrategy(\n+            queryExecutor, Arrays.asList(preQueryPlugin), new ArrayList<>());\n+\n+    federateStrategy =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyMjQwOQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzQ4NzgwOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoyMDozNlrOGfcgNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTo0Mzo1N1rOGf-KWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjAzOQ==", "bodyText": "\u2753 Does the cache need hard-coded dynamic capabilities?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435626039", "createdAt": "2020-06-05T00:20:36Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/pom.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <artifactId>catalog-solr</artifactId>\n+        <groupId>ddf.catalog.solr</groupId>\n+        <version>2.25.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>catalog-solr-cache</artifactId>\n+    <name>DDF :: Catalog :: Solr :: Cache</name>\n+    <packaging>bundle</packaging>\n+    <description>Catalog Provider that connects to Solr</description>\n+    <dependencies>\n+        <dependency>\n+            <groupId>ddf.platform.util</groupId>\n+            <artifactId>platform-util</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>catalog-core-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>catalog-core-api-impl</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>filter-proxy</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.solr</groupId>\n+            <artifactId>catalog-solr-core</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.osgi</groupId>\n+            <artifactId>org.osgi.core</artifactId>\n+            <version>${osgi.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3NzQ5Nw==", "bodyText": "Copy and paste oversight I think.  Removing.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436177497", "createdAt": "2020-06-05T21:43:57Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/pom.xml", "diffHunk": "@@ -0,0 +1,180 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n+<!--\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+    <parent>\n+        <artifactId>catalog-solr</artifactId>\n+        <groupId>ddf.catalog.solr</groupId>\n+        <version>2.25.0-SNAPSHOT</version>\n+    </parent>\n+    <artifactId>catalog-solr-cache</artifactId>\n+    <name>DDF :: Catalog :: Solr :: Cache</name>\n+    <packaging>bundle</packaging>\n+    <description>Catalog Provider that connects to Solr</description>\n+    <dependencies>\n+        <dependency>\n+            <groupId>ddf.platform.util</groupId>\n+            <artifactId>platform-util</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>catalog-core-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>catalog-core-api-impl</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.core</groupId>\n+            <artifactId>filter-proxy</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>ddf.catalog.solr</groupId>\n+            <artifactId>catalog-solr-core</artifactId>\n+            <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.osgi</groupId>\n+            <artifactId>org.osgi.core</artifactId>\n+            <version>${osgi.version}</version>\n+        </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjAzOQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzQ5MzEzOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoyNDowMVrOGfcjbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTo0NjoyOVrOGf-N1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjg2Mw==", "bodyText": "\u2753 Properties can't be null right?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435626863", "createdAt": "2020-06-05T00:24:01Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CacheModeQueryPlugin.class);\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3ODM4OA==", "bodyText": "Most plugins make this assumption today.  I left this the way it was without adding more defensive checks but I did go back and forth on it.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436178388", "createdAt": "2020-06-05T21:46:29Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/CacheModeQueryPlugin.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.operation.QueryRequest;\n+import ddf.catalog.operation.impl.QueryRequestImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PreQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class CacheModeQueryPlugin implements PreQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(CacheModeQueryPlugin.class);\n+\n+  @Override\n+  public QueryRequest process(QueryRequest input)\n+      throws PluginExecutionException, StopProcessingException {\n+    if (!\"cache\".equals(input.getProperties().get(\"mode\"))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNjg2Mw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzQ5OTcwOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDoyODoyMFrOGfcneQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozMzowOVrOGgq8VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzg5Nw==", "bodyText": "\u2753 Is it worth making these final by removing the setters and doing constructor injection instead?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435627897", "createdAt": "2020-06-05T00:28:20Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTE4OA==", "bodyText": "Doesn't look like this impacts Blueprint or tests so I will go ahead and fix it.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436911188", "createdAt": "2020-06-08T18:33:09Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyNzg5Nw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzUwMzIzOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDozMDo1M1rOGfcprg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMTo1NzoyOVrOGf-bwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg==", "bodyText": "\u2753 Do we need null checks for any of these things in the ctor?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435628462", "createdAt": "2020-06-05T00:30:53Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4MDA5Mw==", "bodyText": "We are inconsistent on if we null check things that we construct and inject from Blueprint.  I think SolrCacheSource is the only class that had constructor validation that came over from the original code.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436180093", "createdAt": "2020-06-05T21:51:52Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4MTk1Mw==", "bodyText": "Adding more ctor null checks.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436181953", "createdAt": "2020-06-05T21:57:29Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODQ2Mg=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzUwMzk4OnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMDozMToyM1rOGfcqIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxODozNDozM1rOGgq_Hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ==", "bodyText": "\u2753 If we don't make them final do we need to null check in the setters or here?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435628579", "createdAt": "2020-06-05T00:31:23Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    LOGGER.debug(\"Adding {} federated query results to cache.\", input.getResults().size());\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4Mjk1NA==", "bodyText": "The setter is package private for testing.  I added @VisibleForTesting to the setter.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436182954", "createdAt": "2020-06-05T22:00:06Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    LOGGER.debug(\"Adding {} federated query results to cache.\", input.getResults().size());\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjIyMTUxNw==", "bodyText": "\u2753  Should we null check in the setter, then? If the shutdown() method gets called and we get an NPE the stack trace we analyze won't have anything to do with the actual bug.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436221517", "createdAt": "2020-06-06T00:55:52Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    LOGGER.debug(\"Adding {} federated query results to cache.\", input.getResults().size());\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjkxMTkwMw==", "bodyText": "This is now OBE based on other changes to a previous comment.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436911903", "createdAt": "2020-06-08T18:34:33Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;\n+\n+  private CacheBulkProcessor cacheBulkProcessor;\n+\n+  private boolean isCachingFederatedResponses = true;\n+\n+  public QueryResultCachePlugin(\n+      SolrCache solrCache,\n+      SolrCacheSource solrCacheSource,\n+      ExecutorService solrCacheExecutorService) {\n+    cacheSource = solrCacheSource;\n+    cacheExecutorService = solrCacheExecutorService;\n+\n+    cacheCommitPhaser = new CacheCommitPhaser(solrCache);\n+    cacheBulkProcessor = new CacheBulkProcessor(solrCache);\n+  }\n+\n+  @Override\n+  public QueryResponse process(QueryResponse input)\n+      throws PluginExecutionException, StopProcessingException {\n+\n+    if (!isCachingFederatedResponses) {\n+      return input;\n+    }\n+\n+    if (!\"update\".equals(input.getRequest().getProperties().get(\"mode\"))) {\n+      return input;\n+    }\n+\n+    if (Requests.isLocal(input.getRequest())) {\n+      return input;\n+    }\n+\n+    if (cacheSource\n+        .getId()\n+        .equals(input.getRequest().getProperties().get(Constants.SERVICE_TITLE))) {\n+      return input;\n+    }\n+\n+    LOGGER.debug(\"Adding {} federated query results to cache.\", input.getResults().size());\n+    addToCache(input);\n+\n+    return input;\n+  }\n+\n+  void setCacheCommitPhaser(CacheCommitPhaser cacheCommitPhaser) {\n+    this.cacheCommitPhaser = cacheCommitPhaser;\n+  }\n+\n+  void setCacheBulkProcessor(CacheBulkProcessor cacheBulkProcessor) {\n+    this.cacheBulkProcessor = cacheBulkProcessor;\n+  }\n+\n+  public void setCachingFederatedResponses(boolean cachingFederatedResponses) {\n+    this.isCachingFederatedResponses = cachingFederatedResponses;\n+  }\n+\n+  public void shutdown() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYyODU3OQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzU2ODIyOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-commands/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxMjo0MVrOGfdREg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjowNDozMlrOGf-pEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODU0Ng==", "bodyText": "\u2753 Now that group IDs are changing, besides updating dependent artifacts downstream (handled separately), is there any build-level or infrastructure configuration we will need to update?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435638546", "createdAt": "2020-06-05T01:12:41Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-commands/pom.xml", "diffHunk": "@@ -15,12 +15,12 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <parent>\n-        <artifactId>core</artifactId>\n-        <groupId>ddf.catalog.core</groupId>\n+        <artifactId>catalog-solr</artifactId>\n+        <groupId>ddf.catalog.solr</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4NTM2Mg==", "bodyText": "I don't think so for this module since no one should have depended on these coordinates directly but would pull them in using the feature file which has the same coordinates as before.\nThe impact is to anyone downstream using the CachePutPlugin.  The API coordinates and package did change.  But this interface is not whitelisted.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436185362", "createdAt": "2020-06-05T22:04:32Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-commands/pom.xml", "diffHunk": "@@ -15,12 +15,12 @@\n <project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n     <modelVersion>4.0.0</modelVersion>\n     <parent>\n-        <artifactId>core</artifactId>\n-        <groupId>ddf.catalog.core</groupId>\n+        <artifactId>catalog-solr</artifactId>\n+        <groupId>ddf.catalog.solr</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODU0Ng=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzU3MDEzOnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-commands/src/main/java/org/codice/ddf/commands/solr/CacheCommand.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxNDoxOFrOGfdSQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxNDoxOFrOGfdSQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzODg1MQ==", "bodyText": "\ud83d\udc4d   I think seeing this addresses one of my earlier questions.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435638851", "createdAt": "2020-06-05T01:14:18Z", "author": {"login": "Lambeaux"}, "path": "catalog/solr/catalog-solr-commands/src/main/java/org/codice/ddf/commands/solr/CacheCommand.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.commands.solr;\n+\n+import com.google.common.annotations.VisibleForTesting;\n+import java.io.IOException;\n+import org.apache.karaf.shell.api.action.Command;\n+import org.apache.karaf.shell.api.action.Option;\n+import org.apache.karaf.shell.api.action.lifecycle.Reference;\n+import org.apache.karaf.shell.api.action.lifecycle.Service;\n+import org.apache.karaf.shell.api.console.Session;\n+import org.codice.solr.client.solrj.SolrClient;\n+import org.codice.solr.factory.SolrClientFactory;\n+\n+@Service\n+@Command(\n+  scope = SolrCommands.NAMESPACE,\n+  name = \"cache\",\n+  description = \"Support the remote result cache.\"\n+)\n+public class CacheCommand extends SolrCommands {\n+\n+  @Option(name = \"--clear\", description = \"Clear the remote result cache.\", required = true)\n+  @VisibleForTesting\n+  protected boolean clear = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMzU3Njg4OnYy", "diffSide": "LEFT", "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwMToxOTowM1rOGfdWeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMjowNTozOFrOGf-qZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTkyOQ==", "bodyText": "\u2753 Do we have any other E2E tests for the cache? Can we run them independently now?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r435639929", "createdAt": "2020-06-05T01:19:03Z", "author": {"login": "Lambeaux"}, "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "diffHunk": "@@ -1189,44 +1188,6 @@ public void testUpdateContentResourceUri() throws IOException {\n     deleteTemporaryFile(fileName);\n   }\n \n-  @Test\n-  public void testCachedContentLengthHeader() throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE4NTcwMg==", "bodyText": "I think we used to have E2E tests for the Standard UI and the cache.  I think this was just left over.  You should be able to test this independently now.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436185702", "createdAt": "2020-06-05T22:05:38Z", "author": {"login": "pklinef"}, "path": "distribution/test/itests/test-itests-ddf/src/test/java/ddf/test/itests/catalog/TestCatalog.java", "diffHunk": "@@ -1189,44 +1188,6 @@ public void testUpdateContentResourceUri() throws IOException {\n     deleteTemporaryFile(fileName);\n   }\n \n-  @Test\n-  public void testCachedContentLengthHeader() throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTYzOTkyOQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjI0Njg2OnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo0MTozNlrOGf3gfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQyMToyNTo1MVrOGf9yOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODQ3Nw==", "bodyText": "is this being used anymore?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436068477", "createdAt": "2020-06-05T17:41:36Z", "author": {"login": "lamhuy"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjE3MTMyMg==", "bodyText": "Good catch.  This is no longer needed now that we do not support the index mode used by the old, removed Standard UI.  I will remove it.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436171322", "createdAt": "2020-06-05T21:25:51Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/QueryResultCachePlugin.java", "diffHunk": "@@ -0,0 +1,156 @@\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n+ * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n+ * the License, or any later version.\n+ *\n+ * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n+ * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n+ * License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ */\n+package org.codice.ddf.catalog.solr.cache.impl;\n+\n+import ddf.catalog.Constants;\n+import ddf.catalog.data.Result;\n+import ddf.catalog.data.impl.MetacardImpl;\n+import ddf.catalog.data.impl.ResultImpl;\n+import ddf.catalog.operation.ProcessingDetails;\n+import ddf.catalog.operation.QueryResponse;\n+import ddf.catalog.operation.SourceResponse;\n+import ddf.catalog.operation.impl.ProcessingDetailsImpl;\n+import ddf.catalog.operation.impl.QueryResponseImpl;\n+import ddf.catalog.plugin.PluginExecutionException;\n+import ddf.catalog.plugin.PostFederatedQueryPlugin;\n+import ddf.catalog.plugin.StopProcessingException;\n+import ddf.catalog.util.impl.Requests;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.concurrent.ExecutorService;\n+import java.util.stream.Collectors;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class QueryResultCachePlugin implements PostFederatedQueryPlugin {\n+\n+  private static final Logger LOGGER = LoggerFactory.getLogger(QueryResultCachePlugin.class);\n+\n+  private final SolrCacheSource cacheSource;\n+\n+  private final ExecutorService cacheExecutorService;\n+\n+  private CacheCommitPhaser cacheCommitPhaser;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA2ODQ3Nw=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjI2MDM4OnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo0NjowNFrOGf3pDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxOTowMzo0N1rOGf6Gtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MDY3MQ==", "bodyText": "is this class being used anymore?", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436070671", "createdAt": "2020-06-05T17:46:04Z", "author": {"login": "lamhuy"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java", "diffHunk": "@@ -12,12 +12,13 @@\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n \n-package ddf.catalog.cache.solr.impl;\n+package org.codice.ddf.catalog.solr.cache.impl;\n \n import ddf.catalog.CatalogFramework;\n import java.util.function.Supplier;\n \n public class LocalCatalogIdSupplier implements Supplier<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjExMTAzMQ==", "bodyText": "Looks like it gets statically set on the CacheStrategy.\n\n  \n    \n      ddf/catalog/core/catalog-core-standardframework/src/main/java/ddf/catalog/cache/solr/impl/LocalCatalogIdSupplier.java\n    \n    \n         Line 25\n      in\n      b054ac2\n    \n    \n    \n    \n\n        \n          \n           CacheStrategy.setLocalSourceIdSupplier(this);", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436111031", "createdAt": "2020-06-05T19:03:47Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/java/org/codice/ddf/catalog/solr/cache/impl/LocalCatalogIdSupplier.java", "diffHunk": "@@ -12,12 +12,13 @@\n  * <http://www.gnu.org/licenses/lgpl.html>.\n  */\n \n-package ddf.catalog.cache.solr.impl;\n+package org.codice.ddf.catalog.solr.cache.impl;\n \n import ddf.catalog.CatalogFramework;\n import java.util.function.Supplier;\n \n public class LocalCatalogIdSupplier implements Supplier<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MDY3MQ=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjMwMjY1OnYy", "diffSide": "RIGHT", "path": "catalog/solr/catalog-solr-cache/src/main/resources/OSGI-INF/metatype/SolrCache.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1ODo1NFrOGf4Dig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxODo1ODo1OVrOGf5-Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzQ1MA==", "bodyText": "does this interval seem overkilled? if we are caching for 7 days and checking every 10 min to remove expired doc.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436077450", "createdAt": "2020-06-05T17:58:54Z", "author": {"login": "lamhuy"}, "path": "catalog/solr/catalog-solr-cache/src/main/resources/OSGI-INF/metatype/SolrCache.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version. \n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+ -->\n+<metatype:MetaData xmlns:metatype=\"http://www.osgi.org/xmlns/metatype/v1.0.0\">\n+\n+    <OCD name=\"Solr Federated Result Cache\"\n+         id=\"org.codice.ddf.catalog.solr.cache.impl.SolrCache\">\n+        <AD name=\"AnyText Expansion Field Whitelist\" id=\"anyTextFieldWhitelist\" cardinality=\"100\" required=\"false\" type=\"String\"\n+            description=\"List of Solr fields that an anyText query expands to include (e.g. title, description, ext.extracted.*). NOTE: If a blacklist is also provided, this list becomes a blacklist exception list instead of a pure whitelist.\"/>\n+\n+        <AD name=\"AnyText Expansion Field Blacklist\" id=\"anyTextFieldBlacklist\" cardinality=\"100\" required=\"false\" type=\"String\"\n+            description=\"List of Solr fields that an anyText query will NOT include (e.g. id, checksum, security.*)\"/>\n+\n+        <AD name=\"Expiration Interval\" id=\"expirationIntervalInMinutes\" type=\"Long\" default=\"10\"\n+            description=\"Interval that Solr Cache checks for expired documents to remove.\"/>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjEwODg0Ng==", "bodyText": "This is so we delete 10 minutes worth of cached data at a time to avoid deleting too much at once.", "url": "https://github.com/codice/ddf/pull/6117#discussion_r436108846", "createdAt": "2020-06-05T18:58:59Z", "author": {"login": "pklinef"}, "path": "catalog/solr/catalog-solr-cache/src/main/resources/OSGI-INF/metatype/SolrCache.xml", "diffHunk": "@@ -0,0 +1,37 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+/**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version. \n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/\n+ -->\n+<metatype:MetaData xmlns:metatype=\"http://www.osgi.org/xmlns/metatype/v1.0.0\">\n+\n+    <OCD name=\"Solr Federated Result Cache\"\n+         id=\"org.codice.ddf.catalog.solr.cache.impl.SolrCache\">\n+        <AD name=\"AnyText Expansion Field Whitelist\" id=\"anyTextFieldWhitelist\" cardinality=\"100\" required=\"false\" type=\"String\"\n+            description=\"List of Solr fields that an anyText query expands to include (e.g. title, description, ext.extracted.*). NOTE: If a blacklist is also provided, this list becomes a blacklist exception list instead of a pure whitelist.\"/>\n+\n+        <AD name=\"AnyText Expansion Field Blacklist\" id=\"anyTextFieldBlacklist\" cardinality=\"100\" required=\"false\" type=\"String\"\n+            description=\"List of Solr fields that an anyText query will NOT include (e.g. id, checksum, security.*)\"/>\n+\n+        <AD name=\"Expiration Interval\" id=\"expirationIntervalInMinutes\" type=\"Long\" default=\"10\"\n+            description=\"Interval that Solr Cache checks for expired documents to remove.\"/>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3NzQ1MA=="}, "originalCommit": {"oid": "b3dc07f7745ffb5431eca9941655778a5af6640f"}, "originalPosition": 26}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4620, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}