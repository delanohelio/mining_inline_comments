{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NjExMDQ2", "number": 6064, "title": "DDF-6048 Improve Logging for CDM ", "bodyText": "What does this PR do?\nImproves logging in the catalog-core-directorymonitor bundle:\n\nCDM now has its own log in data/logs\nConcurrent set keeps track of files still being processed in AsyncFileAlterationObserver\nAdditional Logging information in cdm classes\n\nWho is reviewing it?\n@mcalcote\n@aaronilovici\nSelect relevant component teams:\n@codice/core-apis\nAsk 2 committers to review/merge the PR and tag them here.\n@clockard\n@paouelle\nHow should this be tested?\n\nPull and build this branch\nSet up DDF with a normal profile and set cdmLogging to TRACE\nCreate a directory of files to use for the cdm. There should be 20 or more files in this directory. Duplicate all of the files to a subdirectory within the first directory.\n3a. Add permissions for the directory in security/configurations.policy. Message me for details\nSet up a \"Monitor in place\" CDM in the admin console by going to Catalog -> Configuration -> Catalog Content Directory Monitor, be sure to specify the path of the directory created in step 3\nOpen cdm.log in data/log. Verify that the CDM was successfully set up. Verify that CDM shows \"files processing\", the number of files that need to be committed to the monitor. Also make sure that the logs occasionally display a list of files still needing to be processed.\n\nWhat are the relevant tickets?\nFixes: #6048\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-05-18T16:28:36Z", "url": "https://github.com/codice/ddf/pull/6064", "merged": true, "mergeCommit": {"oid": "bfbd3b4555386b808f4a19e286e2a4d0b30df1bb"}, "closed": true, "closedAt": "2020-06-05T16:57:11Z", "author": {"login": "josephthweatt"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfR381AH2gAyNDE5NjExMDQ2OjYwMWNiNTRhMjU2Y2ZlMzY0NDU4NzgzNzlmNzZjZmQ3NzNhMDE2MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcoSMmBAH2gAyNDE5NjExMDQ2OjQ2MmVlOTNiMDVjYThkMDI1MjVjMmNlOTA3OTM4MGU4M2I1NjhmYjE=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "601cb54a256cfe36445878379f76cfd773a01614", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/601cb54a256cfe36445878379f76cfd773a01614", "committedDate": "2020-05-08T13:27:14Z", "message": "DDF-6048 added log file for cdm"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa3facb2d6a4a1a43bf1f51aa4430791a107447", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/6fa3facb2d6a4a1a43bf1f51aa4430791a107447", "committedDate": "2020-05-11T17:20:59Z", "message": "DDF-6408 all CDM logs go to cdm.log, AsyncFileAlterationObserver saves processing file entries"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cada389edcd1af7d6526b6a60ad445743b98de33", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/cada389edcd1af7d6526b6a60ad445743b98de33", "committedDate": "2020-05-12T13:01:41Z", "message": "DDF-6408 Changed processing to concurrent set with AsyncFileEntry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/dd2ae8dc836efafc96cbcbf38da75bc2590a6d16", "committedDate": "2020-05-12T13:17:05Z", "message": "DDF-6408 refactoring"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjEwOTE1", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-414610915", "createdAt": "2020-05-19T16:16:57Z", "commit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNjo1OFrOGXoLLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNjoxNjo1OFrOGXoLLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQyODY1Mg==", "bodyText": "\u2753 Should this be higher than debug? I'm not sure how frequently this would occur or if it would be considered noise.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r427428652", "createdAt": "2020-05-19T16:16:58Z", "author": {"login": "mcalcote"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/synchronizations/CompletionSynchronization.java", "diffHunk": "@@ -49,6 +51,11 @@ public final void onFailure(Exchange exchange) {\n     if (!connected) {\n       LOGGER.debug(\n           \"a network error occurred, The file [{}] failed to process\", asyncFileEntry.getName());\n+    } else if (exchange.getException() != null) {\n+      LOGGER.debug(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjY0NjM3", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-414664637", "createdAt": "2020-05-19T17:23:07Z", "commit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyMzowN1rOGXqyPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyMzowN1rOGXqyPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MTQyMg==", "bodyText": "Maybe make this \"Initializing monitor for...\" to distinguish between the init() and configure() method below.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r427471422", "createdAt": "2020-05-19T17:23:07Z", "author": {"login": "aaronilovici"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/ContentDirectoryMonitor.java", "diffHunk": "@@ -172,6 +174,7 @@ public Integer getReadLockIntervalMilliseconds() {\n    * called whenever an existing route is updated.\n    */\n   public void init() {\n+    LOGGER.debug(\"Configuring monitor for {}\", monitoredDirectory);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE0NjgwMjA0", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-414680204", "createdAt": "2020-05-19T17:43:04Z", "commit": {"oid": "dd2ae8dc836efafc96cbcbf38da75bc2590a6d16"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d09f7822af8286f849008dafc588604e802c6bbb", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/d09f7822af8286f849008dafc588604e802c6bbb", "committedDate": "2020-05-21T17:22:07Z", "message": "DDF-6408 reduced logging in CDM"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2", "committedDate": "2020-05-21T20:48:28Z", "message": "DDF-6408 readded logs and NPE fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDE3Mjk2", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-417017296", "createdAt": "2020-05-22T15:53:16Z", "commit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1MzoxNlrOGZcENg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTo1Mzo0OVrOGZcFOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzQxNA==", "bodyText": "These numbers could be constants", "url": "https://github.com/codice/ddf/pull/6064#discussion_r429327414", "createdAt": "2020-05-22T15:53:16Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();\n+      timer.scheduleAtFixedRate(new LogProcessing(), 500, 5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzY3NQ==", "bodyText": "Should this timer be closed/canceled in a destroy method?", "url": "https://github.com/codice/ddf/pull/6064#discussion_r429327675", "createdAt": "2020-05-22T15:53:49Z", "author": {"login": "clockard"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/28a8fba61a804d30b5dfdf9431bbec4d1c8333c2", "committedDate": "2020-05-26T12:41:55Z", "message": "DDF-6408 adding constants for AsyncFileAlterationObserver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c2a47b9960997f79253ec9506c92c384fe5cf5f7", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/c2a47b9960997f79253ec9506c92c384fe5cf5f7", "committedDate": "2020-05-27T18:59:17Z", "message": "DDF-6408 timer cancelled at end of object life"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTE5MDMw", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-419519030", "createdAt": "2020-05-27T18:56:28Z", "commit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxODo1NjoyOVrOGbYzEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxOTowMjozNFrOGbZAhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTAyNQ==", "bodyText": "\u2757 All onFinish() should be called in a finally clause to ensure we properly cleanup", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371025", "createdAt": "2020-05-27T18:56:29Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -283,12 +302,18 @@ else if (!entry.hasChildren()) {\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitDelete(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n+    LOGGER.trace(\"commitDelete({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n       entry.getParent().ifPresent(e -> e.removeChild(entry));\n       entry.destroy();\n+      LOGGER.debug(\n+          \"{} was removed from {}\",\n+          entry.getName(),\n+          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+    } else {\n+      LOGGER.debug(\"Delete task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTQ4Ng==", "bodyText": "\u2757 See other comment", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371486", "createdAt": "2020-05-27T18:57:18Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -246,11 +263,14 @@ private void doMatch(AsyncFileEntry entry, final AsyncFileAlterationListener lis\n    * @param success Boolean that shows if the task failed or completed successfully\n    */\n   private void commitMatch(AsyncFileEntry entry, boolean success) {\n-    LOGGER.debug(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n+      LOGGER.trace(\"commitMatch({},{}): Starting...\", entry.getName(), success);\n       entry.commit();\n+      LOGGER.debug(\"{} committed\", entry.getName());\n+    } else {\n+      LOGGER.debug(\"Match task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTU4OQ==", "bodyText": "\u2757 See other comment", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371589", "createdAt": "2020-05-27T18:57:28Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -208,12 +220,18 @@ private void doCreate(AsyncFileEntry entry, final AsyncFileAlterationListener li\n    */\n   private void commitCreate(AsyncFileEntry entry, boolean success) {\n \n-    LOGGER.debug(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n+    LOGGER.trace(\"commitCreate({},{}): Starting...\", entry.getName(), success);\n     if (success) {\n       entry.commit();\n       entry.getParent().ifPresent(e -> e.addChild(entry));\n+      LOGGER.debug(\n+          \"File {} committed to {}\",\n+          entry.getName(),\n+          entry.getParent().map(AsyncFileEntry::getName).orElse(\"parent\"));\n+    } else {\n+      LOGGER.debug(\"Create task failed for {}\", entry.getName());\n     }\n-    onFinish();\n+    onFinish(entry);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a8fba61a804d30b5dfdf9431bbec4d1c8333c2"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3MTg3Ng==", "bodyText": "\u2757 What Chris said is important to ensure a bundle is properly stopped", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431371876", "createdAt": "2020-05-27T18:57:57Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +73,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMyNzY3NQ=="}, "originalCommit": {"oid": "12f1424b73713ba93b533e4d8f9dc3f7dbc68ab2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTM3NDQ3MQ==", "bodyText": "\u270f\ufe0f Please don't create a temp collection just to get a string representation of it. There are collectors for streams that will do that directly.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r431374471", "createdAt": "2020-05-27T19:02:34Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +392,37 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {\n+        String files =\n+            processing\n+                .stream()\n+                .map(AsyncFileEntry::getName)\n+                .collect(Collectors.toList())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2a47b9960997f79253ec9506c92c384fe5cf5f7"}, "originalPosition": 198}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "331fed0aee87339f66b1d711fc6144d6a8fe2520", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/331fed0aee87339f66b1d711fc6144d6a8fe2520", "committedDate": "2020-05-27T19:24:25Z", "message": "DDF-6408 patrick's suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e330e167ffc71ecfb393307e064aa13d0d3bcf6", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/4e330e167ffc71ecfb393307e064aa13d0d3bcf6", "committedDate": "2020-05-28T13:53:32Z", "message": "DDF-6408 formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd11de843ac846805310365e445d6be5d623ad25", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/bd11de843ac846805310365e445d6be5d623ad25", "committedDate": "2020-05-28T14:37:53Z", "message": "DDF-6408 fixed finalize method in AsyncFileAlterationObserver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ff3ad465a60b6e76069d2a9a5b82506414fa716", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/5ff3ad465a60b6e76069d2a9a5b82506414fa716", "committedDate": "2020-06-01T13:23:07Z", "message": "DDF-6408 made logging time constants static"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/657bf1247915e0c269acee8ee8c71480a8027d2a", "committedDate": "2020-06-02T19:22:24Z", "message": "DDF-6408 added documentation for cdmLogging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDA1MzI0", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423005324", "createdAt": "2020-06-02T19:46:44Z", "commit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0Njo0NFrOGeBhRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxOTo0Njo0NFrOGeBhRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDEzNTM2NQ==", "bodyText": "\u2757 using finalization is not advisable. In addition, this object will never be GCed since at init time, a timer task is created and registered in the timer. Therefore, there will always be a hard reference to this object which is why it will never be GCed", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434135365", "createdAt": "2020-06-02T19:46:44Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +402,36 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {\n+        String files =\n+            processing.stream().map(AsyncFileEntry::getName).collect(Collectors.joining(\", \"));\n+        LOGGER.debug(\"{} files being processed: {}\", processing.size(), files);\n+      }\n+    }\n+  }\n+\n+  @Override\n+  protected void finalize() throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "originalPosition": 220}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDI1NTg3", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423025587", "createdAt": "2020-06-02T20:17:08Z", "commit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDUwNTY0", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423050564", "createdAt": "2020-06-02T20:55:16Z", "commit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NToxNlrOGeDorQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMDo1NToxNlrOGeDorQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE3MDAyOQ==", "bodyText": "you might want to add another condition to the if: LOGGER.isDebugEnabled()", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434170029", "createdAt": "2020-06-02T20:55:16Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -367,12 +402,36 @@ private void initChildEntries(AsyncFileEntry parent) throws IllegalStateExceptio\n     }\n   }\n \n-  private void onFinish() {\n+  private void onFinish(AsyncFileEntry entry) {\n     synchronized (processingLock) {\n-      if (processing.decrementAndGet() == 0) {\n+      processing.remove(entry);\n+      if (processing.isEmpty()) {\n+        LOGGER.debug(\"All files finished processing\");\n         serializer.store(rootFile.getName(), rootFile);\n         isProcessing = false;\n       }\n     }\n   }\n+\n+  private class LogProcessing extends TimerTask {\n+\n+    /** Log files still in processing at scheduled intervals */\n+    public void run() {\n+      if (!processing.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "originalPosition": 211}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDY1NjEz", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423065613", "createdAt": "2020-06-02T21:19:35Z", "commit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToxOTozNVrOGeEWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMToxOTozNVrOGeEWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE4MTc2Mw==", "bodyText": "\u2757 This is actually not a good idea to do in the constructor as you are creating a timer and scheduling a task that will have an implicit reference to this object but this object has not yet been created.", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434181763", "createdAt": "2020-06-02T21:19:35Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -66,6 +77,11 @@ public AsyncFileAlterationObserver(File fileToObserve, ObjectPersistentStore ser\n     }\n     this.serializer = serializer;\n     rootFile = new AsyncFileEntry(fileToObserve);\n+\n+    if (LOGGER.isDebugEnabled()) {\n+      timer = new Timer();\n+      timer.scheduleAtFixedRate(new LogProcessing(), LOGGING_TIME_DELAY, LOGGING_TIME_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657bf1247915e0c269acee8ee8c71480a8027d2a"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/2c2b68c0797ac9cba03781afe1c641799d58b172", "committedDate": "2020-06-02T21:33:39Z", "message": "DDF-6408 AsyncFileAlterationObserver initialize called when first created"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDc4OTUw", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423078950", "createdAt": "2020-06-02T21:43:40Z", "commit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Mzo0MVrOGeFAxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0Mzo0MVrOGeFAxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MjU4Mw==", "bodyText": "\u2753 Did you realize that you will only startup the timer thread if, at init time, debug is enabled?", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434192583", "createdAt": "2020-06-02T21:43:41Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/AsyncFileAlterationObserver.java", "diffHunk": "@@ -120,10 +115,20 @@ private AsyncFileAlterationObserver(AsyncFileEntry entry, ObjectPersistentStore\n   public void initialize() throws IllegalStateException {\n     initChildEntries(rootFile);\n     serializer.store(rootFile.getName(), rootFile);\n+\n+    if (LOGGER.isDebugEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "originalPosition": 17}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDc5Njgz", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423079683", "createdAt": "2020-06-02T21:45:02Z", "commit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NTowMlrOGeFDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMTo0NTowMlrOGeFDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDE5MzE3OA==", "bodyText": "\u2757 Because you re-used the same destroy() method that already existed on the observer, the side effect is that the file will also be deleted. is that what you want?", "url": "https://github.com/codice/ddf/pull/6064#discussion_r434193178", "createdAt": "2020-06-02T21:45:02Z", "author": {"login": "paouelle"}, "path": "catalog/core/catalog-core-directorymonitor/src/main/java/org/codice/ddf/catalog/content/monitor/DurableFileSystemFileConsumer.java", "diffHunk": "@@ -108,5 +108,9 @@ private AsyncFileAlterationObserver backwardsCompatibility(String fileName) {\n   public void shutdown() throws Exception {\n     super.shutdown();\n     listener.destroy();\n+\n+    if (observer != null) {\n+      observer.destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIzMDkwMDI3", "url": "https://github.com/codice/ddf/pull/6064#pullrequestreview-423090027", "createdAt": "2020-06-02T22:05:38Z", "commit": {"oid": "2c2b68c0797ac9cba03781afe1c641799d58b172"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bd9a04c609200e9a8fe175236872d3d0cf7a950", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/9bd9a04c609200e9a8fe175236872d3d0cf7a950", "committedDate": "2020-06-02T22:06:01Z", "message": "DDF-6408 removed initial timer check for debug"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16a80e13462097d8d1680ab044833840773f894a", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/16a80e13462097d8d1680ab044833840773f894a", "committedDate": "2020-06-03T20:03:35Z", "message": "DDF-6408 observers initialize on creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462ee93b05ca8d02525c2ce9079380e83b568fb1", "author": {"user": {"login": "josephthweatt", "name": "Joseph Thweatt"}}, "url": "https://github.com/codice/ddf/commit/462ee93b05ca8d02525c2ce9079380e83b568fb1", "committedDate": "2020-06-05T12:55:06Z", "message": "DDF-6408 separated time logging initialization from regular init processes"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 915, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}