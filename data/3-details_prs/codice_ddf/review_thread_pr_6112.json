{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2ODQxNTU1", "number": 6112, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzozNDozNVrOEB9Axg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo1NTo0N1rOECR-eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDgzNjU0OnYy", "diffSide": "RIGHT", "path": "platform/security/filter/security-filter-csrf/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzozNDozNVrOGeHWQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOTowNTozMlrOGepgag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMDg0OQ==", "bodyText": "\u2753 Where does this place the CSRF filter in the order? Before the auth filters?", "url": "https://github.com/codice/ddf/pull/6112#discussion_r434230849", "createdAt": "2020-06-02T23:34:35Z", "author": {"login": "SmithJosh"}, "path": "platform/security/filter/security-filter-csrf/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- /**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/ -->\n+<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">\n+\n+  <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\"/>\n+\n+  <bean id=\"filter\" class=\"org.codice.ddf.security.filter.csrf.CsrfFilter\">\n+    <argument ref=\"securityLogger\"/>\n+    <property name=\"whiteListContexts\">\n+      <array value-type=\"java.lang.String\">\n+        <value>/services[/]?$=GET</value>\n+        <value>/services/admin/config[/]?$=GET</value>\n+        <value>/services/content[/]?$=GET</value>\n+        <value>/services/catalog/query[/]?$=GET</value> <!-- Simple Search -->\n+        <value>/services/catalog/sources.*=GET</value> <!-- REST Action providers -->\n+        <value>/services/internal/catalog/download/cache.*=GET</value>\n+        <value>/services/internal/session.*=GET</value>\n+        <value>/services/internal/metrics.*=GET</value>\n+        <value>/services/logout/actions[/]?$=GET</value>\n+        <value>/services/logout/local[/]?$=GET</value>\n+        <value>/services/platform/config/ui[/]?$=GET</value>\n+        <value>/services/saml/logout[/]?$=GET</value>\n+        <value>/services/saml/logout/request[/]?$=GET</value>\n+        <value>/services/saml/sso[/]?$=POST</value>\n+        <value>/services/saml/sso/metadata[/]?$=GET</value>\n+        <value>/services/store/config[/]?$=GET</value>\n+        <value>/services/internal/registries.*=GET</value>\n+        <value>/services/oidc/logout.*=GET</value>\n+      </array>\n+    </property>\n+  </bean>\n+\n+  <service ref=\"filter\" interface=\"org.codice.ddf.platform.filter.SecurityFilter\" ranking=\"101\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83012cd46d2943c4e7baa11d8f72f9197fb15726"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5MDUwNg==", "bodyText": "That is my understanding after the websso and login filter but let me double-check", "url": "https://github.com/codice/ddf/pull/6112#discussion_r434790506", "createdAt": "2020-06-03T19:05:32Z", "author": {"login": "blen-desta"}, "path": "platform/security/filter/security-filter-csrf/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!-- /**\n+ * Copyright (c) Codice Foundation\n+ *\n+ * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either\n+ * version 3 of the License, or any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n+ * See the GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public License is distributed along with this program and can be found at\n+ * <http://www.gnu.org/licenses/lgpl.html>.\n+ *\n+ **/ -->\n+<blueprint xmlns=\"http://www.osgi.org/xmlns/blueprint/v1.0.0\">\n+\n+  <reference id=\"securityLogger\" interface=\"ddf.security.audit.SecurityLogger\" availability=\"optional\"/>\n+\n+  <bean id=\"filter\" class=\"org.codice.ddf.security.filter.csrf.CsrfFilter\">\n+    <argument ref=\"securityLogger\"/>\n+    <property name=\"whiteListContexts\">\n+      <array value-type=\"java.lang.String\">\n+        <value>/services[/]?$=GET</value>\n+        <value>/services/admin/config[/]?$=GET</value>\n+        <value>/services/content[/]?$=GET</value>\n+        <value>/services/catalog/query[/]?$=GET</value> <!-- Simple Search -->\n+        <value>/services/catalog/sources.*=GET</value> <!-- REST Action providers -->\n+        <value>/services/internal/catalog/download/cache.*=GET</value>\n+        <value>/services/internal/session.*=GET</value>\n+        <value>/services/internal/metrics.*=GET</value>\n+        <value>/services/logout/actions[/]?$=GET</value>\n+        <value>/services/logout/local[/]?$=GET</value>\n+        <value>/services/platform/config/ui[/]?$=GET</value>\n+        <value>/services/saml/logout[/]?$=GET</value>\n+        <value>/services/saml/logout/request[/]?$=GET</value>\n+        <value>/services/saml/sso[/]?$=POST</value>\n+        <value>/services/saml/sso/metadata[/]?$=GET</value>\n+        <value>/services/store/config[/]?$=GET</value>\n+        <value>/services/internal/registries.*=GET</value>\n+        <value>/services/oidc/logout.*=GET</value>\n+      </array>\n+    </property>\n+  </bean>\n+\n+  <service ref=\"filter\" interface=\"org.codice.ddf.platform.filter.SecurityFilter\" ranking=\"101\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMDg0OQ=="}, "originalCommit": {"oid": "83012cd46d2943c4e7baa11d8f72f9197fb15726"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNDg0NTk3OnYy", "diffSide": "RIGHT", "path": "platform/security/filter/security-filter-csrf/src/main/java/org/codice/ddf/security/filter/csrf/CsrfFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzozOTo0N1rOGeHcDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQyMzozOTo0N1rOGeHcDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDIzMjMzMw==", "bodyText": "\u270f\ufe0f Just a minor thing, but an \"authorization failure\" would be more fitting imo", "url": "https://github.com/codice/ddf/pull/6112#discussion_r434232333", "createdAt": "2020-06-02T23:39:47Z", "author": {"login": "SmithJosh"}, "path": "platform/security/filter/security-filter-csrf/src/main/java/org/codice/ddf/security/filter/csrf/CsrfFilter.java", "diffHunk": "@@ -174,14 +176,14 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n       if (protectedContexts.stream().anyMatch(targetContextPath::startsWith)\n           && doBrowserProtectionFilter(\n               httpRequest, httpResponse, targetContextPath, requestMethod)) {\n-        return;\n+        throw new AuthenticationFailureException();\n       }\n \n       // Execute CSRF check if user is accessing /services\n       if (targetContextPath.startsWith(SERVICE_CONTEXT)\n           && doSystemProtectionFilter(\n               httpRequest, httpResponse, targetContextPath, requestMethod, userAgentHeader)) {\n-        return;\n+        throw new AuthenticationFailureException();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "83012cd46d2943c4e7baa11d8f72f9197fb15726"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwODI3MTI5OnYy", "diffSide": "RIGHT", "path": "distribution/ddf-common/src/main/resources/security/default.policy", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxODo1NTo0N1rOGepMBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxOToxNzo1N1rOGep6SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTI4Ng==", "bodyText": "\u2753 Can't seem to figure out where the CSRF filter reads from custom.system.properties.", "url": "https://github.com/codice/ddf/pull/6112#discussion_r434785286", "createdAt": "2020-06-03T18:55:47Z", "author": {"login": "bakejeyner"}, "path": "distribution/ddf-common/src/main/resources/security/default.policy", "diffHunk": "@@ -307,6 +307,10 @@ grant codeBase \"file:/admin-core-jolokia/javax.servlet-api/org.apache.shiro.core\n     permission java.security.SecurityPermission \"insertProvider\";\n }\n \n+grant codeBase \"file:/security-filter-csrf\" {\n+    permission java.io.FilePermission \"${ddf.home.perm}etc${/}custom.system.properties\", \"read\";\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba2281800f7334b5d589f76100cb1878b39688a3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4OTQ2MQ==", "bodyText": "In etc/custom.system.properties you can configure:\n# Whether or not CSRF filtering should be enabled. This should only be disabled for testing and\n# debugging purposes, otherwise the system will be left insecure.\ncsrf.enabled=true\n\n# Comma separated list of host/port combinations that can be trusted to make requests to DDF.\ncsrf.trustedAuthorities=", "url": "https://github.com/codice/ddf/pull/6112#discussion_r434789461", "createdAt": "2020-06-03T19:03:34Z", "author": {"login": "blen-desta"}, "path": "distribution/ddf-common/src/main/resources/security/default.policy", "diffHunk": "@@ -307,6 +307,10 @@ grant codeBase \"file:/admin-core-jolokia/javax.servlet-api/org.apache.shiro.core\n     permission java.security.SecurityPermission \"insertProvider\";\n }\n \n+grant codeBase \"file:/security-filter-csrf\" {\n+    permission java.io.FilePermission \"${ddf.home.perm}etc${/}custom.system.properties\", \"read\";\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTI4Ng=="}, "originalCommit": {"oid": "ba2281800f7334b5d589f76100cb1878b39688a3"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc5NzEyOQ==", "bodyText": "Ahhh ya I see that; thanks!\nI just find it weird that a call to System.getProperty would require reading from custom.system.properties. I thought that some other bundle is responsible for reading entries from custom.system.properties and loading those entries into the system properties, and the CSRF filter would just be reading the system properties without ever having to even know about the custom.system.properties file \ud83e\udd37 .", "url": "https://github.com/codice/ddf/pull/6112#discussion_r434797129", "createdAt": "2020-06-03T19:17:57Z", "author": {"login": "bakejeyner"}, "path": "distribution/ddf-common/src/main/resources/security/default.policy", "diffHunk": "@@ -307,6 +307,10 @@ grant codeBase \"file:/admin-core-jolokia/javax.servlet-api/org.apache.shiro.core\n     permission java.security.SecurityPermission \"insertProvider\";\n }\n \n+grant codeBase \"file:/security-filter-csrf\" {\n+    permission java.io.FilePermission \"${ddf.home.perm}etc${/}custom.system.properties\", \"read\";\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDc4NTI4Ng=="}, "originalCommit": {"oid": "ba2281800f7334b5d589f76100cb1878b39688a3"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4616, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}