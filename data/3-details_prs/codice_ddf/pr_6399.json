{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMDcwNzI0", "number": 6399, "title": "[2.19.x] DDF-6043 Allow DDF to register external attribute validators", "bodyText": "What does this PR do?\nAdds DDF to register external attribute validators via Definition Parser\nWho is reviewing it?\n\n@leo-sakh\n@bennuttle\n@lavoywj\n@jMoneee\nSelect relevant component teams:\n\n@codice/core-apis\nAsk 2 committers to review/merge the PR and tag them here.\n\n@rzwiefel\n@jrnorth\nHow should this be tested?\n\n\nCreate a new AttributeValidator service from a downstream project\nUpdate the json file read by DDF. Update an attribute to include a custom validator like below:\n\n\"anAttribute\": [\n    {\n        \"validator\": \"custom\",\n        \"validators\": [\n            {\n                \"validator\": \"service_id_for_your_new_validator_service_from_step_1\"\n            }\n        ]\n    }\n]\n\n\nCheck and see if DefinitionParser correctly registers the validator for attribute (An easier way would be to attach a debugger)\n\nAny background context you want to provide?\nThis allows downstream projects to define custom validator mapping to the json file, and allows to use downstream-specific validator.\nWhat are the relevant tickets?\nFixes: #6043\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-10-26T14:29:53Z", "url": "https://github.com/codice/ddf/pull/6399", "merged": true, "mergeCommit": {"oid": "311898f033bd8739c1a14285a97f881ff19155f8"}, "closed": true, "closedAt": "2020-12-03T21:52:37Z", "author": {"login": "frnkshin"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWY4KTAFqTUxNzAxMjg5NQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdhohA-AH2gAyNTEwMDcwNzI0OjRiZTI1Y2ViODY2ZWFiMTNjNGFjYzg4MjI4NzNmNzEzZDgwMWRhOWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDEyODk1", "url": "https://github.com/codice/ddf/pull/6399#pullrequestreview-517012895", "createdAt": "2020-10-26T17:26:02Z", "commit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxNzoyNjowM1rOHoajQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODozNTo1NFrOHodPrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0MDA5Nw==", "bodyText": "Wrapping and rethrowing with the same exception type will just make the stack trace harder to read. The exception thrown from findAndRegisterValidator probably shouldn't be caught here.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512140097", "createdAt": "2020-10-26T17:26:03Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE0MzAzNg==", "bodyText": "\u270f\ufe0f Consider using an if instead since there are only two cases.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512143036", "createdAt": "2020-10-26T17:30:29Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3NzczOA==", "bodyText": "\u270f\ufe0f clazz will always be AttributeValidator so the parameter can be omitted.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512177738", "createdAt": "2020-10-26T18:25:22Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);\n+      if (ref.length < 1) throw new InvalidSyntaxException(\"No service references found\", filter);\n+      return bundleContext.getService(ref[0]);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.error(String.format(\"Invalid filter: %s\", filter));\n+    } catch (NullPointerException e) {\n+      LOGGER.debug(\n+          String.format(\"Service Reference for class %s not found. Returning NULL\", clazz));\n+    }\n+    return null;\n+  }\n+\n+  private AttributeValidator getAttributeValidator(String clazz, String filter) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MjA2OA==", "bodyText": "\u2757Use parameterized logging\nAlso, error is probably not the right level since this exception will not cause the system to break.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512182068", "createdAt": "2020-10-26T18:32:29Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);\n+      if (ref.length < 1) throw new InvalidSyntaxException(\"No service references found\", filter);\n+      return bundleContext.getService(ref[0]);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.error(String.format(\"Invalid filter: %s\", filter));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4MzA4MA==", "bodyText": "\u2757We should check for a null reference ourselves instead of using it and catching a NPE.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512183080", "createdAt": "2020-10-26T18:34:09Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);\n+      if (ref.length < 1) throw new InvalidSyntaxException(\"No service references found\", filter);\n+      return bundleContext.getService(ref[0]);\n+    } catch (InvalidSyntaxException e) {\n+      LOGGER.error(String.format(\"Invalid filter: %s\", filter));\n+    } catch (NullPointerException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4Mzg0MQ==", "bodyText": "I think these if statements will fail checkstyle without braces.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512183841", "createdAt": "2020-10-26T18:35:17Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE4NDIzNg==", "bodyText": "I don't think InvalidSyntaxException is appropriate for either case.", "url": "https://github.com/codice/ddf/pull/6399#discussion_r512184236", "createdAt": "2020-10-26T18:35:54Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,73 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\");\n+          }\n+\n+          String serviceId = validators[0];\n+          String validatorType = validators[1];\n+          String filter = String.format(\"(id=%s)\", serviceId);\n+\n+          try {\n+            findAndRegisterValidator(wrapper, validatorType, serviceId, filter);\n+          } catch (IllegalStateException ise) {\n+            throw new IllegalStateException(\n+                \"Validator does not exist. (\" + validator.validator + \")\", ise);\n+          }\n+          break;\n+        }\n     }\n     return wrapper;\n   }\n \n+  private void findAndRegisterValidator(\n+      ValidatorWrapper wrapper, String validatorType, String serviceId, String filter) {\n+    switch (validatorType) {\n+      case \"AttributeValidator\":\n+        AttributeValidator av = getAttributeValidator(AttributeValidator.class.getName(), filter);\n+        if (av != null) {\n+          wrapper.attributeValidator(av);\n+        } else {\n+          String errorMsg =\n+              String.format(\n+                  \"Appropriate service not found for validatorType=%s, serviceId=%s, filter=%s\",\n+                  validatorType, serviceId, filter);\n+          throw new IllegalStateException(errorMsg);\n+        }\n+        break;\n+      default:\n+        String errorMsg =\n+            String.format(\"ValidatorType of %s is not a supported validator type\", validatorType);\n+        throw new IllegalStateException(errorMsg);\n+    }\n+  }\n+\n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref.length > 1)\n+        throw new InvalidSyntaxException(\"Multiple service references found\", filter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d49c4a6c06b8d07aad95148219adf755218e77a6"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "14a69a281b6e4994b844ece41bff88d037c992b1", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/14a69a281b6e4994b844ece41bff88d037c992b1", "committedDate": "2020-11-18T15:06:11Z", "message": "[2.19.x] DDF-6043 Allow DDF to register external attribute validators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59e9b7490c1f4fee754961ec5683cf6fc86a5224", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/59e9b7490c1f4fee754961ec5683cf6fc86a5224", "committedDate": "2020-11-18T15:06:11Z", "message": "refactor DefinitionParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8a70b220404e2ec9aaee93f1d9598164b51b70bd", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/8a70b220404e2ec9aaee93f1d9598164b51b70bd", "committedDate": "2020-11-18T15:06:11Z", "message": "added a successful test case for validator registration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bfcaf79dc9de08b1f8a5f3b63449554252b94cc", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/9bfcaf79dc9de08b1f8a5f3b63449554252b94cc", "committedDate": "2020-11-18T15:06:11Z", "message": "single class imports and fix invalid external validators test case"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/3e826224a1a99aeebeefbb45b0879bd83b1ffac8", "committedDate": "2020-11-18T15:06:11Z", "message": "Use parameterized logging"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e9d69f3e8d688972d5069cbb978f5d17a7058bb", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/5e9d69f3e8d688972d5069cbb978f5d17a7058bb", "committedDate": "2020-11-16T18:21:49Z", "message": "Use parameterized logging"}, "afterCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/3e826224a1a99aeebeefbb45b0879bd83b1ffac8", "committedDate": "2020-11-18T15:06:11Z", "message": "Use parameterized logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMzNjYyMTEw", "url": "https://github.com/codice/ddf/pull/6399#pullrequestreview-533662110", "createdAt": "2020-11-18T17:01:28Z", "commit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowMToyOFrOH135Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNzowMToyOFrOH135Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjI1MjM2Ng==", "bodyText": "\u2753What is validatorType used for?", "url": "https://github.com/codice/ddf/pull/6399#discussion_r526252366", "createdAt": "2020-11-18T17:01:28Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -633,11 +641,46 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           break;\n         }\n       default:\n-        throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n+        {\n+          String[] validators = validator.validator.split(\"::\");\n+          if (validators.length != 2) {\n+            throw new IllegalStateException(\n+                \"Validator should be in format of 'validatorId::validatorType', not '\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e826224a1a99aeebeefbb45b0879bd83b1ffac8"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "661481a1cefa3a167257a9535bdbc441f6b19000", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/661481a1cefa3a167257a9535bdbc441f6b19000", "committedDate": "2020-11-19T07:48:22Z", "message": "use a new custom validator for attribute instead of just directing it to default case in definition parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f6819a36a867967a2ed594560a4e485f8a3555f", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/3f6819a36a867967a2ed594560a4e485f8a3555f", "committedDate": "2020-11-25T04:28:44Z", "message": "Add custom validator logic in DefinitionParser. Update test cases"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe599150950576341feee2dbf6c96fef78c3639a", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/fe599150950576341feee2dbf6c96fef78c3639a", "committedDate": "2020-11-25T05:29:29Z", "message": "Remove unused method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Njg0ODE5", "url": "https://github.com/codice/ddf/pull/6399#pullrequestreview-538684819", "createdAt": "2020-11-25T16:47:36Z", "commit": {"oid": "fe599150950576341feee2dbf6c96fef78c3639a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo0NzozNlrOH57-yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNjo0NzozNlrOH57-yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDUxMzYxMA==", "bodyText": "As it is currently if there is more than one service reference it will fail to enter this if statement, return null, and then silently not add the attribute validator.\nI would recommend changing this to ref.length > 0, Unless you are specifically trying to prevent the case that multiple versions might be registered. While we usually only have one bundle providing a service its always possible there could be more than one, so we should handle that case. In many places we pick the first service reference in the list (which is probably fine) , but you could also do a LOGGER.warn that there were multiple services and we chose the first in the list. (maybe printing the list of service references that we chose from would provide some useful information if they have implemented toString methods)", "url": "https://github.com/codice/ddf/pull/6399#discussion_r530513610", "createdAt": "2020-11-25T16:47:36Z", "author": {"login": "rzwiefel"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -632,12 +640,42 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           wrapper.reportingMetacardValidator(relationshipValidator);\n           break;\n         }\n+      case \"custom\":\n+        {\n+          List<Outer.Validator> collection = ((Outer.ValidatorCollection) validator).validators;\n+          collection.forEach(\n+              item -> {\n+                AttributeValidator av =\n+                    (AttributeValidator)\n+                        this.getService(\n+                            AttributeValidator.class.getName(),\n+                            (String.format(\"(id=%s)\", item.validator)));\n+                if (av != null) {\n+                  wrapper.attributeValidator(av);\n+                }\n+              });\n+          break;\n+        }\n       default:\n         throw new IllegalStateException(\"Validator does not exist. (\" + validator.validator + \")\");\n     }\n     return wrapper;\n   }\n \n+  private Object getService(String clazz, String filter) {\n+    BundleContext bundleContext = getBundleContext();\n+    ServiceReference<?>[] ref;\n+    try {\n+      ref = bundleContext.getServiceReferences(clazz, filter);\n+      if (ref != null && ref.length == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe599150950576341feee2dbf6c96fef78c3639a"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4Njk4NzQy", "url": "https://github.com/codice/ddf/pull/6399#pullrequestreview-538698742", "createdAt": "2020-11-25T17:04:23Z", "commit": {"oid": "fe599150950576341feee2dbf6c96fef78c3639a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71c987f1cf42015e952da9399e7354c170cf0772", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/71c987f1cf42015e952da9399e7354c170cf0772", "committedDate": "2020-11-25T22:16:35Z", "message": "Allow mapping first found validator service to an attribute"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd43ad7de311b9b4f561254aac855fb6048fd97d", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/cd43ad7de311b9b4f561254aac855fb6048fd97d", "committedDate": "2020-11-25T22:44:51Z", "message": "fix formatting issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxMDk3Mzg0", "url": "https://github.com/codice/ddf/pull/6399#pullrequestreview-541097384", "createdAt": "2020-11-30T16:49:05Z", "commit": {"oid": "cd43ad7de311b9b4f561254aac855fb6048fd97d"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0OTowNVrOH8EDfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0zMFQxNjo0OTowNVrOH8EDfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMjc0MzAzOQ==", "bodyText": "\u270f\ufe0f Unnecessary parentheses", "url": "https://github.com/codice/ddf/pull/6399#discussion_r532743039", "createdAt": "2020-11-30T16:49:05Z", "author": {"login": "jrnorth"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -632,12 +641,50 @@ private ValidatorWrapper getValidator(String key, Outer.Validator validator) {\n           wrapper.reportingMetacardValidator(relationshipValidator);\n           break;\n         }\n+      case \"custom\":\n+        {\n+          List<Outer.Validator> collection = ((Outer.ValidatorCollection) validator).validators;\n+          collection.forEach(\n+              item -> {\n+                AttributeValidator av =\n+                    (AttributeValidator)\n+                        this.getService(\n+                            AttributeValidator.class.getName(),\n+                            (String.format(\"(id=%s)\", item.validator)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd43ad7de311b9b4f561254aac855fb6048fd97d"}, "originalPosition": 69}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4be25ceb866eab13c4acc8822873f713d801da9c", "author": {"user": {"login": "frnkshin", "name": "Frank Shin"}}, "url": "https://github.com/codice/ddf/commit/4be25ceb866eab13c4acc8822873f713d801da9c", "committedDate": "2020-11-30T17:09:00Z", "message": "fix formatting - remove unnecessary parens"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 790, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}