{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2MzA3ODky", "number": 6455, "title": "[2.26.x] Improve audit logs for authentication and session events", "bodyText": "What does this PR do?\nCleans up DDF's audit logs for authentication and session events:\n\nLogin success/failure\nLogout\nSession creation/deletion/expiration\nInvalid session\n\nWho is reviewing it?\n\n@glenhein @jlcsmith\nSelect relevant component teams:\n@codice/security\nHow should this be tested?\n\nPerform each of the following actions and make sure the output matches what is shown. The auth actions (login, logout) should be tested for BASIC, PKI, and OIDC except authentication failure - OIDC will use an external auth server so DDF won't know when the user login fails. Note: the audit logs may differ slightly between auth types, but all the info should be there.\n\nLog in\n\n[INFO ] 2020-12-10T12:05:49,646 | qtp529305888-135 | securityLogger  |  Subject: admin Logged in\n[INFO ] 2020-12-10T12:05:49,671 | qtp529305888-135 | securityLogger  |  Subject: admin Creating a new session with id 5826261cb8e381cb765659c57fcf4d426949bbba5b4079e67fa4d6fc51fbcdc8 for client 0:0:0:0:0:0:0:1.\n\n\nLog out. Make sure the session id matches the one created when you logged in\n\n[INFO ] 2020-12-10T12:05:59,218 | qtp529305888-136 | securityLogger  |  Subject: UNKNOWN Subject admin logged out\n[INFO ] 2020-12-10T12:05:59,227 | qtp529305888-136 | securityLogger  |  Subject: UNKNOWN Session 5826261cb8e381cb765659c57fcf4d426949bbba5b4079e67fa4d6fc51fbcdc8 destroyed\n\n\nTry to log in with bad credentials (Basic auth)\n\n[INFO ] 2020-12-10T12:15:31,951 | qtp529305888-448 | securityLogger  |  Subject: UNKNOWN Authentication failed. Error message: 'Login failed for user: admin'\n\n\nIn the Admin UI, change the session timeout (Security > Session > Session Timeout) to 2 minutes. Then log in and wait for the session to expire. Jetty won't delete it immediately after 2 minutes. It seems to expire sessions in batches every 10-15 minutes or so. Make sure the session created when you logged in matches the expired session.\n\n[INFO ] 2020-12-10T12:08:50,450 | qtp529305888-135 | securityLogger  |  Subject: admin Logged in\n[INFO ] 2020-12-10T12:08:50,489 | qtp529305888-136 | securityLogger  |  Subject: admin Creating a new session with id 5cbd4636fbbcf75580d435080e25b77e9f35426fcb3a98782f78c6c687f40bbc for client 0:0:0:0:0:0:0:1.\n...\n[INFO ] 2020-12-10T12:24:52,906 | eeper-4fc9a898-1 | securityLogger  |  Subject: UNKNOWN Session 5cbd4636fbbcf75580d435080e25b77e9f35426fcb3a98782f78c6c687f40bbc expired\n\n\nCreate a request with an invalid session id curl -k --cookie \"JSESSIONID=123\" https://localhost:8993/\n\n[INFO ] 2020-12-10T15:36:40,198 | qtp529305888-507 | securityLogger  |  Subject: UNKNOWN Request contained invalid or expired session id [a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3]\n\nAny background context you want to provide?\nWhat are the relevant tickets?\nFixes: #____\nScreenshots\n\nChecklist:\n\n Documentation Updated\n Update / Add Threat Dragon models\n Update / Add Unit Tests\n Update / Add Integration Tests\n\nNotes on Review Process\nPlease see Notes on Review Process for further guidance on requirements for merging and abbreviated reviews.\nReview Comment Legend:\n\n\u270f\ufe0f (Pencil) This comment is a nitpick or style suggestion, no action required for approval. This comment should provide a suggestion either as an in line code snippet or a gist.\n\u2753 (Question Mark) This comment is to gain a clearer understanding of design or code choices, clarification is required but action may not be necessary for approval.\n\u2757 (Exclamation Mark) This comment is critical and requires clarification or action before approval.", "createdAt": "2020-12-10T22:39:47Z", "url": "https://github.com/codice/ddf/pull/6455", "merged": true, "mergeCommit": {"oid": "483e7052d08d75d391f13f4ac7e26f385cf1a979"}, "closed": true, "closedAt": "2020-12-17T01:23:54Z", "author": {"login": "SmithJosh"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkRbutgH2gAyNTM2MzA3ODkyOjBmZTBkMzc1ZTQzZjI0MDYyYTc1YjRmMGYwNDQxZDNkYmMwZmJhMTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmdSL0AFqTU1MjY2NDkwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0fe0d375e43f24062a75b4f0f0441d3dbc0fba13", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/0fe0d375e43f24062a75b4f0f0441d3dbc0fba13", "committedDate": "2020-12-08T21:57:11Z", "message": "Audit login success/failure and session creation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8b675fb93a9ed8dc5ffd9fc1405b8c054234c16", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/f8b675fb93a9ed8dc5ffd9fc1405b8c054234c16", "committedDate": "2020-12-09T02:55:44Z", "message": "Audit logout events for all users and fix auditing of invalid session ids"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "430c24f20f682c7a4682d98e75a34fa22426b891", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/430c24f20f682c7a4682d98e75a34fa22426b891", "committedDate": "2020-12-10T22:27:04Z", "message": "Fix auditing of session deletion/expiration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/608196e1586e5641abbd9a05a93ca5c6c0837c78", "committedDate": "2020-12-10T22:27:04Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5NjY1MzYz", "url": "https://github.com/codice/ddf/pull/6455#pullrequestreview-549665363", "createdAt": "2020-12-10T22:43:30Z", "commit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMjo0MzozMFrOIDgrNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzowMjo0NFrOIDhaiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1MTk4OQ==", "bodyText": "With the logout pages whitelisted, the logout servlets didn't have the correct subject and the user's session wasn't being invalidated correctly.", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540551989", "createdAt": "2020-12-10T22:43:30Z", "author": {"login": "SmithJosh"}, "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -42,20 +42,17 @@\n         </property>\n         <property name=\"whiteListContexts\">\n             <array value-type=\"java.lang.String\">\n-                <value>${org.codice.ddf.system.rootContext}/SecurityTokenService</value>\n-                <value>${org.codice.ddf.system.rootContext}/internal/metrics</value>\n                 <value>/proxy</value>\n                 <value>${org.codice.ddf.system.rootContext}/saml</value>\n-                <value>${org.codice.ddf.system.rootContext}/idp</value>\n-                <value>/idp</value>\n                 <value>${org.codice.ddf.system.rootContext}/platform/config/ui</value>\n-                <value>${org.codice.ddf.system.rootContext}/logout</value>\n-                <value>/logout</value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1MzA0NQ==", "bodyText": "/logout/css and logout/js are the assets loaded by the /logout/logout-response.html page. For basic and PKI auth, loading any of these causes the user to log back in automatically after logging out if they're not whitelisted", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540553045", "createdAt": "2020-12-10T22:45:29Z", "author": {"login": "SmithJosh"}, "path": "platform/security/policy/security-policy-context/src/main/resources/OSGI-INF/blueprint/blueprint.xml", "diffHunk": "@@ -42,20 +42,17 @@\n         </property>\n         <property name=\"whiteListContexts\">\n             <array value-type=\"java.lang.String\">\n-                <value>${org.codice.ddf.system.rootContext}/SecurityTokenService</value>\n-                <value>${org.codice.ddf.system.rootContext}/internal/metrics</value>\n                 <value>/proxy</value>\n                 <value>${org.codice.ddf.system.rootContext}/saml</value>\n-                <value>${org.codice.ddf.system.rootContext}/idp</value>\n-                <value>/idp</value>\n                 <value>${org.codice.ddf.system.rootContext}/platform/config/ui</value>\n-                <value>${org.codice.ddf.system.rootContext}/logout</value>\n-                <value>/logout</value>\n                 <value>${org.codice.ddf.system.rootContext}/internal/session</value>\n                 <value>${org.codice.ddf.system.rootContext}/admin/fonts</value>\n                 <value>/favicon.ico</value>\n                 <value>/error</value>\n                 <value>/webjars</value>\n+                <value>/logout/logout-response.html</value>\n+                <value>/logout/css</value>\n+                <value>/logout/js</value>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTE3NA==", "bodyText": "Made this fail the bundle so we actually see an error if session auditing stops working. Last time session auditing stopped working and nobody noticed (it's been broken since this change in 2018 #3783)", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540555174", "createdAt": "2020-12-10T22:50:02Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/security/session/AttributeSharingHashSessionIdManager.java", "diffHunk": "@@ -68,73 +74,57 @@\n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(AttributeSharingHashSessionIdManager.class);\n \n-  static class SharingSessionInvalidator implements HttpSessionInvalidator {\n-\n-    private final AttributeSharingHashSessionIdManager idManager;\n-\n-    SharingSessionInvalidator(AttributeSharingHashSessionIdManager idManager) {\n-      this.idManager = idManager;\n-    }\n-\n-    @Override\n-    public void invalidateSession(\n-        String subjectName, Function<Map<String, Object>, String> sessionSubjectExtractor) {\n-\n-      final Optional<String> sessionIdOptional =\n-          idManager.dataStores.stream()\n-              .map(AttributeSharingSessionDataStore::getSessionDataMap)\n-              .map(Map::entrySet)\n-              .flatMap(Collection::stream)\n-              .filter(\n-                  e ->\n-                      subjectName.equals(\n-                          sessionSubjectExtractor.apply(e.getValue().getAllAttributes())))\n-              .map(Map.Entry::getKey)\n-              .findFirst();\n-\n-      sessionIdOptional.ifPresent(idManager::invalidateSession);\n-    }\n-  }\n+  private final BundleContext bundleContext;\n+  private final ServiceTracker<SecurityLogger, SecurityLogger> securityLogger;\n \n   private List<AttributeSharingSessionDataStore> dataStores = new CopyOnWriteArrayList<>();\n \n-  private void registerSessionManager() {\n+  private static BundleContext getContext() {\n     Bundle bundle = FrameworkUtil.getBundle(AttributeSharingHashSessionIdManager.class);\n-    if (bundle == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-    final BundleContext bundleContext = bundle.getBundleContext();\n-    if (bundleContext == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-\n-    final SharingSessionInvalidator sm = new SharingSessionInvalidator(this);\n-    final Dictionary<String, Object> props = new DictionaryMap<>();\n-    props.put(Constants.SERVICE_PID, sm.getClass().getName());\n-    props.put(Constants.SERVICE_DESCRIPTION, \"Sharing Session Invalidator\");\n-    props.put(Constants.SERVICE_VENDOR, \"Codice Foundation\");\n-    props.put(Constants.SERVICE_RANKING, Integer.MIN_VALUE);\n-\n-    bundleContext.registerService(HttpSessionInvalidator.class.getName(), sm, props);\n+    return (bundle != null) ? bundle.getBundleContext() : null;\n   }\n \n-  public AttributeSharingHashSessionIdManager(Server server) {\n+  @VisibleForTesting\n+  public AttributeSharingHashSessionIdManager(Server server, BundleContext context) {\n     super(server);\n+    bundleContext = Objects.requireNonNull(context, \"bundleContext cannot be null\");\n+    securityLogger = new ServiceTracker<>(bundleContext, SecurityLogger.class.getName(), null);\n     registerSessionManager();\n   }\n \n+  public AttributeSharingHashSessionIdManager(Server server) {\n+    this(server, getContext());\n+  }\n+\n   public AttributeSharingHashSessionIdManager(Server server, Random random) {\n     super(server, random);\n+    bundleContext = Objects.requireNonNull(getContext(), \"bundleContext cannot be null\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU1NTkyMg==", "bodyText": "This property was used to selectively audit only for users with the listed roles. Changed it so that we now audit for all users, so removed this property", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540555922", "createdAt": "2020-12-10T22:51:39Z", "author": {"login": "SmithJosh"}, "path": "distribution/ddf-common/src/main/resources-filtered/etc/custom.system.properties", "diffHunk": "@@ -241,7 +241,6 @@ karaf.local.user=admin\n #org.osgi.framework.trust.repositories=_DO_NOT_EXPAND_${karaf.etc}/trustStore.ks\n # pipe (|) separated list of regex patterns for DNs that are allowed to connect to the Security Token Service\n ws-security.subject.cert.constraints=.*CN=_DO_NOT_EXPAND_${org.codice.ddf.system.hostname}.*\n-security.audit.roles=group,admin,manager,viewer,system-admin,system-history,systembundles", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2MTAzNQ==", "bodyText": "I couldn't find a better way to inject the SecurityLogger service into this class. This class is created by Jetty via jetty.xml so not managed by blueprint. I tried CDI but couldn't get it working.\nThis made things a little weird for the unit test for this class, too, which starts up a Jetty server (not OSGi). The BundleContext injection is a little ugly, but couldn't find a better way to make things work. Open to suggestions if anybody has any.", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540561035", "createdAt": "2020-12-10T22:58:56Z", "author": {"login": "SmithJosh"}, "path": "platform/platform-paxweb-jettyconfig/src/main/java/org/codice/ddf/security/session/AttributeSharingHashSessionIdManager.java", "diffHunk": "@@ -68,73 +74,57 @@\n   private static final Logger LOGGER =\n       LoggerFactory.getLogger(AttributeSharingHashSessionIdManager.class);\n \n-  static class SharingSessionInvalidator implements HttpSessionInvalidator {\n-\n-    private final AttributeSharingHashSessionIdManager idManager;\n-\n-    SharingSessionInvalidator(AttributeSharingHashSessionIdManager idManager) {\n-      this.idManager = idManager;\n-    }\n-\n-    @Override\n-    public void invalidateSession(\n-        String subjectName, Function<Map<String, Object>, String> sessionSubjectExtractor) {\n-\n-      final Optional<String> sessionIdOptional =\n-          idManager.dataStores.stream()\n-              .map(AttributeSharingSessionDataStore::getSessionDataMap)\n-              .map(Map::entrySet)\n-              .flatMap(Collection::stream)\n-              .filter(\n-                  e ->\n-                      subjectName.equals(\n-                          sessionSubjectExtractor.apply(e.getValue().getAllAttributes())))\n-              .map(Map.Entry::getKey)\n-              .findFirst();\n-\n-      sessionIdOptional.ifPresent(idManager::invalidateSession);\n-    }\n-  }\n+  private final BundleContext bundleContext;\n+  private final ServiceTracker<SecurityLogger, SecurityLogger> securityLogger;\n \n   private List<AttributeSharingSessionDataStore> dataStores = new CopyOnWriteArrayList<>();\n \n-  private void registerSessionManager() {\n+  private static BundleContext getContext() {\n     Bundle bundle = FrameworkUtil.getBundle(AttributeSharingHashSessionIdManager.class);\n-    if (bundle == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-    final BundleContext bundleContext = bundle.getBundleContext();\n-    if (bundleContext == null) {\n-      LOGGER.error(\"Error initializing Session Manager\");\n-      return;\n-    }\n-\n-    final SharingSessionInvalidator sm = new SharingSessionInvalidator(this);\n-    final Dictionary<String, Object> props = new DictionaryMap<>();\n-    props.put(Constants.SERVICE_PID, sm.getClass().getName());\n-    props.put(Constants.SERVICE_DESCRIPTION, \"Sharing Session Invalidator\");\n-    props.put(Constants.SERVICE_VENDOR, \"Codice Foundation\");\n-    props.put(Constants.SERVICE_RANKING, Integer.MIN_VALUE);\n-\n-    bundleContext.registerService(HttpSessionInvalidator.class.getName(), sm, props);\n+    return (bundle != null) ? bundle.getBundleContext() : null;\n   }\n \n-  public AttributeSharingHashSessionIdManager(Server server) {\n+  @VisibleForTesting\n+  public AttributeSharingHashSessionIdManager(Server server, BundleContext context) {\n     super(server);\n+    bundleContext = Objects.requireNonNull(context, \"bundleContext cannot be null\");\n+    securityLogger = new ServiceTracker<>(bundleContext, SecurityLogger.class.getName(), null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU2NDEwNw==", "bodyText": "Registering this as a service doesn't work because of a limitation in Pax Web. See https://ops4j1.jira.com/browse/PAXWEB-1123. If we wanted to use an HttpSessionListener for all servlet contexts, we'd have to inject it the same way we do error pages, which is a bit of a hack. So I opted to audit from the AttributeSharingHashSessionIdManager", "url": "https://github.com/codice/ddf/pull/6455#discussion_r540564107", "createdAt": "2020-12-10T23:02:44Z", "author": {"login": "SmithJosh"}, "path": "platform/security/core/security-core-services/src/main/java/ddf/security/listener/AuditingHttpSessionListener.java", "diffHunk": "@@ -1,48 +0,0 @@\n-/**\n- * Copyright (c) Codice Foundation\n- *\n- * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU\n- * Lesser General Public License as published by the Free Software Foundation, either version 3 of\n- * the License, or any later version.\n- *\n- * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;\n- * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n- * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public\n- * License is distributed along with this program and can be found at\n- * <http://www.gnu.org/licenses/lgpl.html>.\n- */\n-package ddf.security.listener;\n-\n-import com.google.common.hash.Hashing;\n-import ddf.security.audit.SecurityLogger;\n-import java.nio.charset.StandardCharsets;\n-import javax.servlet.http.HttpSession;\n-import javax.servlet.http.HttpSessionEvent;\n-import javax.servlet.http.HttpSessionListener;\n-\n-public class AuditingHttpSessionListener implements HttpSessionListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzIzODU4", "url": "https://github.com/codice/ddf/pull/6455#pullrequestreview-551723858", "createdAt": "2020-12-14T17:54:28Z", "commit": {"oid": "608196e1586e5641abbd9a05a93ca5c6c0837c78"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9fe663e54115533be18b925be3465efe09e26693", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/9fe663e54115533be18b925be3465efe09e26693", "committedDate": "2020-12-14T18:47:18Z", "message": "Add logout message for OIDC"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccbb85a579b2fa60cfb19c6f439e1d085a21414b", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/ccbb85a579b2fa60cfb19c6f439e1d085a21414b", "committedDate": "2020-12-14T18:51:13Z", "message": "Revert WCPM changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee7ef7ae49e1947ddbb7bf889d618687a7e5f257", "author": {"user": {"login": "SmithJosh", "name": "Joshua Smith"}}, "url": "https://github.com/codice/ddf/commit/ee7ef7ae49e1947ddbb7bf889d618687a7e5f257", "committedDate": "2020-12-14T21:18:15Z", "message": "Fix audited subject name for PKI logout"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjUyNzcy", "url": "https://github.com/codice/ddf/pull/6455#pullrequestreview-552652772", "createdAt": "2020-12-15T16:40:57Z", "commit": {"oid": "ee7ef7ae49e1947ddbb7bf889d618687a7e5f257"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyNjY0OTAz", "url": "https://github.com/codice/ddf/pull/6455#pullrequestreview-552664903", "createdAt": "2020-12-15T16:53:29Z", "commit": {"oid": "ee7ef7ae49e1947ddbb7bf889d618687a7e5f257"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 691, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}