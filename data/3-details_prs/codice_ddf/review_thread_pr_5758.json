{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNjcyOTY4", "number": 5758, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NToyMVrODY26Bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NToyMVrODY26Bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3MzkyMDA2OnYy", "diffSide": "RIGHT", "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NToyMVrOFe9EAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xN1QxNTo0NToyMVrOFe9EAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODAwMjA1MQ==", "bodyText": "\u270f\ufe0f Good opportunity to refactor this whole thing:\n  List<Callable<Boolean>> registerMetacardValidator(\n      final BundleContext context,\n      final Changeset changeset,\n      final Entry<String, List<MetacardValidatorDefinition>> row) {\n    return getMetacardValidators(row.getKey(), row.getValue().get(0))\n        .stream()\n        .map(\n            metacardValidator -> {\n              try {\n                return (Callable<Boolean>)\n                    () -> {\n                      ServiceRegistration<MetacardValidator> registration =\n                          context.registerService(MetacardValidator.class, metacardValidator, null);\n                      changeset.metacardValidatorServices.add(registration);\n                      return registration != null;\n                    };\n              } catch (IllegalStateException ise) {\n                LOGGER.error(\n                    \"Could not register metacard validator for definition: {} {}\",\n                    row.getKey(),\n                    row.getValue(),\n                    ise);\n              }\n\n              return (Callable<Boolean>) () -> Boolean.FALSE;\n            })\n        .collect(Collectors.toList());\n  }\n\n  private List<Callable<Boolean>> registerMetacardValidators(\n      Changeset changeset,\n      List<Map<String, List<MetacardValidatorDefinition>>> metacardValidatorDefinitions) {\n    Function<Entry<String, List<MetacardValidatorDefinition>>, List<Callable<Boolean>>>\n        validatorRegistration =\n            row -> registerMetacardValidator(getBundleContext(), changeset, row);\n\n    return metacardValidatorDefinitions\n        .stream()\n        .map(Map::entrySet)\n        .flatMap(Set::stream)\n        .map(validatorRegistration)\n        .flatMap(List::stream)\n        .collect(Collectors.toList());\n  }", "url": "https://github.com/codice/ddf/pull/5758#discussion_r368002051", "createdAt": "2020-01-17T15:45:21Z", "author": {"login": "leo-sakh"}, "path": "catalog/core/catalog-core-definitionparser/src/main/java/ddf/catalog/definition/impl/DefinitionParser.java", "diffHunk": "@@ -436,7 +436,8 @@ private void processAttribute(\n     for (Map<String, List<MetacardValidatorDefinition>> mvdMap : metacardValidatorDefinitions) {\n       for (Entry<String, List<MetacardValidatorDefinition>> row : mvdMap.entrySet()) {\n         try {\n-          List<MetacardValidator> metacardValidators = getMetacardValidators(row.getValue().get(0));\n+          List<MetacardValidator> metacardValidators =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d20ec8b9927aef6dafae81b9e082a610cadb8de8"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4759, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}