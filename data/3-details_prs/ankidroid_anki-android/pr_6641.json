{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ0OTkxMDcw", "number": 6641, "title": "Allow fileupload api", "bodyText": "Pull Request template\nPurpose / Description\nI've been tinkering with trying to extend the API and I believe I've got something going so far. In a nutshell, I've adjusted the CardContentProvider to allow a MEDIA row to be called with the insert method. This copies the media file supplied by the client into a temporary file, before using the libanki Media class's addFile method to add it to the media, which handles the naming and adding to the media database. The api call eventually returns the formatted string value which can be inserted as a field value in the usual insertNote method of the api, and through testing myself this correctly adds the note to AnkiDroid (I modified the api sample given online to include adding some media files simply by selecting them from storage).\nFrom here what are the chances of this being implemented after fixing it up? Shall I just push it to my fork and submit a PR for review for now?\nBest Wishes,\nKieran\nFixes\nAllows adding media via the ankidroid-api.\nApproach\nHow does this change address the problem?\nHow Has This Been Tested?\nTested on Pixel 2 API 30 emulator. Used the api sample as a guide and implemented adding a new card with media, which worked.\nLearning (optional, can help others)\nOne thing I would like to mention since I don't know where else to put it, my app was set to target SDK = 30, and because of this I needed to add a <queries> element in the app's manifest with the name of the package that I would be requesting access to. See: https://developer.android.com/preview/privacy/package-visibility I figure since this is new some people might run into this.\nEven though I set the FLAG_GRANT_READ_URI_PERMISSION in the intent for the file picker, I ran into a problem where the CardContentProvider didn't have permissions to open an InputStream from the content uri provided by the client, so I had to set the permissions in the onActivityResult callback with requireContext().grantUriPermission(\"com.ichi2.anki\",uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward remove the permission with requireContext().revokePermission(uri, Intent.FLAG_GRANT_READ_URI_PERMISSION)\nChecklist\nPlease, go through these checks before submitting the PR.\n\n You have not changed whitespace unnecessarily (it makes diffs hard to read)\n You have a descriptive commit message with a short title (first line, max 50 chars).\n Your code follows the style of the project (e.g. never omit braces in if statements)\n You have commented your code, particularly in hard-to-understand areas\n You have performed a self-review of your own code", "createdAt": "2020-07-06T20:41:24Z", "url": "https://github.com/ankidroid/Anki-Android/pull/6641", "merged": true, "mergeCommit": {"oid": "4d2cf42b053065f3eafdff9611d1fe9221a0ecff"}, "closed": true, "closedAt": "2020-10-04T19:14:51Z", "author": {"login": "KieranMigaku"}, "timelineItems": {"totalCount": 31, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5UbyUgFqTQ1NjUyNzI3Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdN-Oa9gH2gAyNDQ0OTkxMDcwOjhkZjQyMDhjOGQwMGFmZjhiMjEwNzk5YThjYmRmMzU1ZDlhMzY1NTk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTI3Mjc2", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-456527276", "createdAt": "2020-07-28T11:07:01Z", "commit": {"oid": "2a705ab5c2901707b6453ba9b7f6543f788371cc"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTowNzowMVrOG4HqZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMTowNzo1OVrOG4HsIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5ODk4Mw==", "bodyText": "Is this comment copy-pasted from somewhere else ? It seems more like a tutorial description and not a comment for the method. If so, we would at least need to credit the author properly", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461498983", "createdAt": "2020-07-28T11:07:01Z", "author": {"login": "Arthur-Milchior"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,27 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /*\n+    You would likely implement a FileProvider in your API to share the file from your app to \"the system\" as a URI,\n+    and pass that to a new AnkiDroid-API call you implement, where it would use ContentResolver to get the display\n+    name for the file and then open an input stream for it to copy the file in to the collection, similar to the way\n+    BasicImageFieldController does it (or will do it when a PR-in-progress lands) in the internalizeUri method\n+     */\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a705ab5c2901707b6453ba9b7f6543f788371cc"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQ5OTQyNg==", "bodyText": "It seems you get some value and do nothing with them. Just throw null.\u00a0I don't understand this commit", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461499426", "createdAt": "2020-07-28T11:07:59Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1032,6 +1043,13 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri filUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8197314503c92e39a116d495d07e305ae83e9ab"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTI5NTM3", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-456529537", "createdAt": "2020-07-28T11:10:16Z", "commit": {"oid": "912e3993c4bbcbc6131a4cec4c47332ee7cab0af"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMDoxNlrOG4HxGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMDoxNlrOG4HxGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMDY5Ng==", "bodyText": "If you  understand interactive rebase in git, it would be nice to put this import in the commit where it was useful. Makes commit history simpler to read", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461500696", "createdAt": "2020-07-28T11:10:16Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -52,6 +52,7 @@\n import com.ichi2.compat.CompatHelper;\n import com.ichi2.libanki.Consts;\n import com.ichi2.libanki.Media;\n+import com.ichi2.libanki.Decks;\n import com.ichi2.libanki.sched.AbstractSched;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "912e3993c4bbcbc6131a4cec4c47332ee7cab0af"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTMwNTU4", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-456530558", "createdAt": "2020-07-28T11:11:39Z", "commit": {"oid": "1e968db654e64746f9a4d74f8901c6799cf71368"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMTo0MFrOG4H0Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxMTo1OFrOG4H0sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMTQ1MQ==", "bodyText": "\"audio file\" ?\u00a0How do you know it's an audio file problem ?\u00a0It seems this code is not audio related.", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461501451", "createdAt": "2020-07-28T11:11:40Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1046,9 +1051,58 @@ public Uri insert(Uri uri, ContentValues values) {\n             case MEDIA:\n                 // insert a media file\n                 // contentvalue should have data and preferredFileName values\n-                Uri filUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n                 String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n-                return null;\n+                InputStream inputStream = null;\n+\n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary audio file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    }\n+                    catch (Exception e) {\n+                        Timber.e(e, \"Unable to copy audio file from ContentProvider\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e968db654e64746f9a4d74f8901c6799cf71368"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMTYxOQ==", "bodyText": "Would you please put the catch on the same line as } ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461501619", "createdAt": "2020-07-28T11:11:58Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1046,9 +1051,58 @@ public Uri insert(Uri uri, ContentValues values) {\n             case MEDIA:\n                 // insert a media file\n                 // contentvalue should have data and preferredFileName values\n-                Uri filUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n                 String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n-                return null;\n+                InputStream inputStream = null;\n+\n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary audio file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    }\n+                    catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e968db654e64746f9a4d74f8901c6799cf71368"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NTMyMTQ2", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-456532146", "createdAt": "2020-07-28T11:14:04Z", "commit": {"oid": "2a705ab5c2901707b6453ba9b7f6543f788371cc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxNDowNFrOG4H5CQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMToxNDowNFrOG4H5CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTUwMjcyOQ==", "bodyText": "Maybe you could return a boolean instead of 0 or 1", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r461502729", "createdAt": "2020-07-28T11:14:04Z", "author": {"login": "Arthur-Milchior"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,27 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /*\n+    You would likely implement a FileProvider in your API to share the file from your app to \"the system\" as a URI,\n+    and pass that to a new AnkiDroid-API call you implement, where it would use ContentResolver to get the display\n+    name for the file and then open an input stream for it to copy the file in to the collection, similar to the way\n+    BasicImageFieldController does it (or will do it when a PR-in-progress lands) in the internalizeUri method\n+     */\n+\n+    public int addMediaFromUri(Uri fileUri, String preferredName) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);\n+            return 0;\n+        } catch (Exception e){\n+            return 1;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2a705ab5c2901707b6453ba9b7f6543f788371cc"}, "originalPosition": 43}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7150cbf2c28e8a11002b7c3ead15f5cc0acf5de", "author": {"user": {"login": "mikehardy", "name": "Mike Hardy"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b7150cbf2c28e8a11002b7c3ead15f5cc0acf5de", "committedDate": "2020-07-11T18:50:31Z", "message": "Merge branch 'master' into allow-fileupload-api"}, "afterCommit": {"oid": "c20248feaf961a65a5c8480c12342018fe8ee5d5", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c20248feaf961a65a5c8480c12342018fe8ee5d5", "committedDate": "2020-07-30T22:37:36Z", "message": "addMediaFromUri returns proper formatted String\n\nThis formatted string can be returned and inserted straight into the\nfield of a card."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5ODAxODY5", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-469801869", "createdAt": "2020-08-18T20:20:50Z", "commit": {"oid": "7207f523cc7d3db7304a6673691545158d2fe76d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDoyMDo1MFrOHCk5mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDozMjo1M1rOHClmOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2Mzc3MQ==", "bodyText": "assert doesn't work in Java, it is typically a no-op but if they ever fix it, then this will crash the app which is a terrible outcome, this should be\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                    assert inputStream != null;\n          \n          \n            \n                                    inputStream.close();\n          \n          \n            \n                                    if (inputStream != null) {\n          \n          \n            \n                                        inputStream.close();\n          \n          \n            \n                                    }", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472463771", "createdAt": "2020-08-18T20:20:50Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+                InputStream inputStream = null;\n \n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary media file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Unable to copy media file from ContentProvider\");\n+                        return null;\n+                    } finally {\n+                        assert inputStream != null;\n+                        inputStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7207f523cc7d3db7304a6673691545158d2fe76d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NjE3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                e.printStackTrace();\n          \n          \n            \n                                Timber.w(e, \"insert failed from %s\", fileUri);", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472466171", "createdAt": "2020-08-18T20:23:29Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+                InputStream inputStream = null;\n \n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+                    // should we be enforcing strict mimetypes? which types?\n+                    File tempFile;\n+                    try {\n+                        tempFile = File.createTempFile(\n+                                preferredName+\"_\", // the beginning of the filename.\n+                                \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                                new File(media.dir())\n+                        );\n+                        tempFile.deleteOnExit();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Could not create temporary media file. \");\n+                        return null;\n+                    }\n+\n+                    // copy contents into temp file (possibly check file size and warn if large?)\n+                    try {\n+                        CompatHelper.getCompat().copyFile(inputStream, tempFile.getAbsolutePath());\n+                    } catch (FileNotFoundException e) {\n+                        Timber.e(e, \"File not found when opening stream for supplied media file.\");\n+                        return null;\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Unable to copy media file from ContentProvider\");\n+                        return null;\n+                    } finally {\n+                        assert inputStream != null;\n+                        inputStream.close();\n+                    }\n+\n+                    String fname = media.addFile(tempFile);\n+                    Timber.d(\"insert -> MEDIA: fname = %s\", fname);\n+                    File f = new File(fname);\n+                    Timber.d(\"insert -> MEDIA: f = %s\", f);\n+                    Uri uriFromF = Uri.fromFile(f);\n+                    Timber.d(\"insert -> MEDIA: uriFromF = %s\", uriFromF);\n+                    return Uri.fromFile(new File(fname));\n+\n+                } catch (IOException e) {\n+                    e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7207f523cc7d3db7304a6673691545158d2fe76d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NjU0Ng==", "bodyText": "This is a lot of code to have as a switch case, extract it to a method with parameters and call it from this case instead", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472466546", "createdAt": "2020-08-18T20:23:55Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7207f523cc7d3db7304a6673691545158d2fe76d"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ2NzYzMA==", "bodyText": "All the other classes in the contract have explicit usage instructions for integrators and CONTENT_TYPEs, can you add those following the existing pattern(s) above?", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472467630", "createdAt": "2020-08-18T20:25:01Z", "author": {"login": "mikehardy"}, "path": "api/src/main/java/com/ichi2/anki/FlashCardsContract.java", "diffHunk": "@@ -1185,4 +1185,19 @@ private FlashCardsContract() {\n         public static final String CONTENT_TYPE = \"vnd.android.cursor.dir/vnd.com.ichi2.anki.deck\";\n \n     }\n+\n+    public static class AnkiMedia {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cb4577493ffd01d1dbcd5244b10ad5166ef9034d"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MDU2OA==", "bodyText": "I wonder if any of the logic here could be re-used? https://github.com/ankidroid/Anki-Android/blob/master/AnkiDroid/src/main/java/com/ichi2/anki/multimediacard/fields/BasicImageFieldController.java#L410\nThe error handling wouldn't be \"showSomethingWentWrong()\" obviously, but if the common logic could be extracted so we're not handling URI-internalizing in multiple spots that could be a win - it is very tricky stuff!", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472470568", "createdAt": "2020-08-18T20:27:58Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1048,7 +1053,60 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+                String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+                InputStream inputStream = null;\n \n+                try {\n+                    ContentResolver cR = mContext.getContentResolver();\n+                    Media media = col.getMedia();\n+                    // idea, open input stream and save to cache directory, then\n+                    // pass this (hopefully temporary) file to the media.addFile function.\n+                    inputStream = cR.openInputStream(fileUri);\n+                    String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7207f523cc7d3db7304a6673691545158d2fe76d"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3MjcwMg==", "bodyText": "Should protect these from being sent in null as they are accessed blindly, and I think the method can be private so you don't have to worry as much about API contracts as it won't be exposed to other objects. Can return null so should be marked as such as well\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public String formatMediaName(String fname, String mimeType) {\n          \n          \n            \n                private @Nullable String formatMediaName(@NonNull String fname, @NonNull String mimeType) {", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472472702", "createdAt": "2020-08-18T20:30:13Z", "author": {"login": "mikehardy"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,47 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added.\n+     * @param preferredName String that will be added to the beginning of the file name in the media collection\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\"\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card.\n+     */\n+    public String addMediaFromUri(Uri fileUri, String preferredName, String mimeType) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        preferredName = preferredName.replace(\" \", \"_\");\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            Uri returnUri = mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);\n+            // get the filename from Uri, return [sound:%s] % file.getName()\n+            String fname = new File(returnUri.getPath()).toString();\n+            String formatted_fname = formatMediaName(fname, mimeType);\n+            return formatted_fname;\n+        } catch (Exception e){\n+            return null;\n+        }\n+\n+    }\n+\n+    public String formatMediaName(String fname, String mimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20248feaf961a65a5c8480c12342018fe8ee5d5"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ3NTE5NQ==", "bodyText": "Should mark it up with expectations on what can be null and what can't both in docs and as annotations, to guard against crashes - those are common sources of crashes for us\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param fileUri   Uri for the file to be added.\n          \n          \n            \n                 * @param preferredName String that will be added to the beginning of the file name in the media collection\n          \n          \n            \n                 * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\"\n          \n          \n            \n                 * @return the correctly formatted String for the media file to be placed in the desired field of a Card.\n          \n          \n            \n                 */\n          \n          \n            \n                public String addMediaFromUri(Uri fileUri, String preferredName, String mimeType) {\n          \n          \n            \n                 * @param fileUri  Uri for the file to be added, required.\n          \n          \n            \n                 * @param preferredName String that will be added to the beginning of the file name in the media collection, required\n          \n          \n            \n                 * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\", required\n          \n          \n            \n                 * @return the correctly formatted String for the media file to be placed in the desired field of a Card or null if unsuccessful.\n          \n          \n            \n                 */\n          \n          \n            \n                public @Nullable String addMediaFromUri(@NonNull Uri fileUri, @NonNull String preferredName, @NonNull String mimeType) {", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r472475195", "createdAt": "2020-08-18T20:32:53Z", "author": {"login": "mikehardy"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +158,47 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added.\n+     * @param preferredName String that will be added to the beginning of the file name in the media collection\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\"\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card.\n+     */\n+    public String addMediaFromUri(Uri fileUri, String preferredName, String mimeType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c20248feaf961a65a5c8480c12342018fe8ee5d5"}, "originalPosition": 36}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b65a71d62f740eb31db423de84902bea395ffb47", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b65a71d62f740eb31db423de84902bea395ffb47", "committedDate": "2020-08-22T20:04:56Z", "message": "Extract internalizeUri to FileUtil.java"}, "afterCommit": {"oid": "560cd233011fdd60d9631cbb4d2d216245d63073", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/560cd233011fdd60d9631cbb4d2d216245d63073", "committedDate": "2020-08-22T20:28:09Z", "message": "Extract internalizeUri to FileUtil.java"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "560cd233011fdd60d9631cbb4d2d216245d63073", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/560cd233011fdd60d9631cbb4d2d216245d63073", "committedDate": "2020-08-22T20:28:09Z", "message": "Extract internalizeUri to FileUtil.java"}, "afterCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ce815547847110b28b395642ca8c896ccb2ecb5a", "committedDate": "2020-08-22T21:14:32Z", "message": "Extract internalizeUri to FileUtil.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDMxOTUx", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-473031951", "createdAt": "2020-08-23T18:18:02Z", "commit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDM1MjUx", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-473035251", "createdAt": "2020-08-23T19:15:06Z", "commit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxOToxNTowNlrOHFPPMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxOTozMzoyNFrOHFPV1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDU3OQ==", "bodyText": "This doesn't necessarily point to the cache - questionable naming", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254579", "createdAt": "2020-08-23T19:15:06Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/utils/FileUtil.java", "diffHunk": "@@ -18,4 +32,54 @@ public static long getFreeDiskSpace(File file, long defaultValue) {\n             return defaultValue;\n         }\n     }\n+\n+    public static File createNewCacheFile(\n+            @NonNull File storageDir, @NonNull String preferredName, @NonNull String extension\n+    ) throws IOException {\n+        return File.createTempFile(preferredName, \".\" + extension, storageDir);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDY4Ng==", "bodyText": "Why are we using the media directory here? Shouldn't we be using a temp dir to ensure this doesn't interfere with syncing", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254686", "createdAt": "2020-08-23T19:16:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+            // should we be enforcing strict mimetypes? which types?\n+            File tempFile;\n+            try {\n+                tempFile = File.createTempFile(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc1OQ==", "bodyText": "I can see a use case of allowing the caller to pass in the file extension as an override. Was this not required for your use case?", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254759", "createdAt": "2020-08-23T19:16:58Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NDc5NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            Timber.e(e, \"Could not create temporary media file. \");\n          \n          \n            \n                            Timber.w(e, \"Could not create temporary media file. \");", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475254795", "createdAt": "2020-08-23T19:17:31Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+            // should we be enforcing strict mimetypes? which types?\n+            File tempFile;\n+            try {\n+                tempFile = File.createTempFile(\n+                        preferredName+\"_\", // the beginning of the filename.\n+                        \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                        new File(media.dir())\n+                );\n+                tempFile.deleteOnExit();\n+            } catch (Exception e) {\n+                Timber.e(e, \"Could not create temporary media file. \");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NTEzNg==", "bodyText": "This returns a file:// URI. Will this work on later APIs? Can we provide this via a FileProvider instead?", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475255136", "createdAt": "2020-08-23T19:21:11Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/provider/CardContentProvider.java", "diffHunk": "@@ -1038,12 +1056,59 @@ public Uri insert(Uri uri, ContentValues values) {\n             case DECKS_ID:\n                 // Deck ID is generated automatically by libanki\n                 throw new IllegalArgumentException(\"Not possible to insert deck with specific ID\");\n+            case MEDIA:\n+                // insert a media file\n+                // contentvalue should have data and preferredFileName values\n+                return insertMediaFile(values, col);\n             default:\n                 // Unknown URI type\n                 throw new IllegalArgumentException(\"uri \" + uri + \" is not supported\");\n         }\n     }\n \n+    private Uri insertMediaFile(ContentValues values, Collection col) {\n+        // Insert media file using libanki.Media.addFile and return Uri for the inserted file.\n+        Uri fileUri = Uri.parse(values.getAsString(FlashCardsContract.AnkiMedia.FILE_URI));\n+        String preferredName = values.getAsString(FlashCardsContract.AnkiMedia.PREFERRED_NAME);\n+\n+\n+        try {\n+            ContentResolver cR = mContext.getContentResolver();\n+            Media media = col.getMedia();\n+            // idea, open input stream and save to cache directory, then\n+            // pass this (hopefully temporary) file to the media.addFile function.\n+\n+            String fileMimeType = MimeTypeMap.getSingleton().getExtensionFromMimeType(cR.getType(fileUri)); // return eg \"jpeg\"\n+            // should we be enforcing strict mimetypes? which types?\n+            File tempFile;\n+            try {\n+                tempFile = File.createTempFile(\n+                        preferredName+\"_\", // the beginning of the filename.\n+                        \".\" + fileMimeType, // this is the extension, if null, '.tmp' is used, need to get the extension from MIME type?\n+                        new File(media.dir())\n+                );\n+                tempFile.deleteOnExit();\n+            } catch (Exception e) {\n+                Timber.e(e, \"Could not create temporary media file. \");\n+                return null;\n+            }\n+\n+            FileUtil.internalizeUri(fileUri, null, tempFile, cR);\n+\n+            String fname = media.addFile(tempFile);\n+            Timber.d(\"insert -> MEDIA: fname = %s\", fname);\n+            File f = new File(fname);\n+            Timber.d(\"insert -> MEDIA: f = %s\", f);\n+            Uri uriFromF = Uri.fromFile(f);\n+            Timber.d(\"insert -> MEDIA: uriFromF = %s\", uriFromF);\n+            return Uri.fromFile(new File(fname));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjAyMA==", "bodyText": "Should the URI be guaranteed to be a file? I feel it will better to return a content:// URI so the calling app doesn't requires file system access.", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475256020", "createdAt": "2020-08-23T19:30:29Z", "author": {"login": "david-allison-1"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,51 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the\n+     *                      media collection, required.\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\", required.\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card, or null\n+     *          if unsuccessful.\n+     */\n+    public @Nullable String addMediaFromUri(\n+            @NotNull Uri fileUri, @NotNull String preferredName, @NotNull String mimeType\n+    ) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        preferredName = preferredName.replace(\" \", \"_\");\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            Uri returnUri = mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);\n+            // get the filename from Uri, return [sound:%s] % file.getName()\n+            String fname = new File(returnUri.getPath()).toString();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjA1MQ==", "bodyText": "It would likely be better to return the filename as well as the content URI (not sure if this is possible, but I expect it should be) - it will remove the need to potentially janky URI handling.", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475256051", "createdAt": "2020-08-23T19:30:57Z", "author": {"login": "david-allison-1"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,51 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the\n+     *                      media collection, required.\n+     * @param mimeType  String indicating the mimeType of the media. Accepts \"audio\" or \"image\", required.\n+     * @return the correctly formatted String for the media file to be placed in the desired field of a Card, or null\n+     *          if unsuccessful.\n+     */\n+    public @Nullable String addMediaFromUri(\n+            @NotNull Uri fileUri, @NotNull String preferredName, @NotNull String mimeType\n+    ) {\n+        ContentValues contentValues = new ContentValues();\n+        contentValues.put(AnkiMedia.FILE_URI, fileUri.toString());\n+        preferredName = preferredName.replace(\" \", \"_\");\n+        contentValues.put(AnkiMedia.PREFERRED_NAME, preferredName);\n+\n+        try {\n+            Uri returnUri = mResolver.insert(AnkiMedia.CONTENT_URI, contentValues);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1NjI3Ng==", "bodyText": "Give an example - many people would include the extension here.", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r475256276", "createdAt": "2020-08-23T19:33:24Z", "author": {"login": "david-allison-1"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,51 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     * getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION) and then afterward\n+     * remove the permission with getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce815547847110b28b395642ca8c896ccb2ecb5a"}, "originalPosition": 35}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f354a0e40a6f110fbe83821bc8c204a6d274678d", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/f354a0e40a6f110fbe83821bc8c204a6d274678d", "committedDate": "2020-08-28T18:02:09Z", "message": "Convert Timber.e to Timber.w"}, "afterCommit": {"oid": "ee19ceefbeeb0b8abd702935ea0c1f4b0ac4f4e6", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ee19ceefbeeb0b8abd702935ea0c1f4b0ac4f4e6", "committedDate": "2020-08-28T19:24:56Z", "message": "Use temp-media cache dir instead of media.dir()"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzNjg3NTI5", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-483687529", "createdAt": "2020-09-07T18:41:55Z", "commit": {"oid": "4a3b55b1a6ddfa3f823f66ae9e4c771a1b395a8d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxODo0MTo1NVrOHOGLuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxODo0MTo1NVrOHOGLuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0MzQxOQ==", "bodyText": "Don't update robolectric version yet! That one is a really really hard upgrade - I'm working on it already in #7015 and it's a mess\nIn general don't mess with the dependencies, just leave those where they are in master\nI don't blame for your trying, just that this one in particular is a mess :-)", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r484543419", "createdAt": "2020-09-07T18:41:55Z", "author": {"login": "mikehardy"}, "path": "api/build.gradle", "diffHunk": "@@ -50,9 +50,9 @@ apply from: \"../lint.gradle\"\n \n dependencies {\n     api fileTree(dir: 'libs', include: ['*.jar'])\n-    implementation 'org.jetbrains:annotations:15.0'\n+    implementation 'org.jetbrains:annotations:20.0.0'\n     testImplementation 'org.junit.vintage:junit-vintage-engine:5.6.2'\n-    testImplementation 'org.robolectric:robolectric:4.3.1'\n+    testImplementation 'org.robolectric:robolectric:4.4'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a3b55b1a6ddfa3f823f66ae9e4c771a1b395a8d"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a3b55b1a6ddfa3f823f66ae9e4c771a1b395a8d", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/4a3b55b1a6ddfa3f823f66ae9e4c771a1b395a8d", "committedDate": "2020-09-07T18:12:52Z", "message": "Update annotations and robolectric impl. version"}, "afterCommit": {"oid": "a3b99155c38e4bca93be145c1f77f2c0c68a2165", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a3b99155c38e4bca93be145c1f77f2c0c68a2165", "committedDate": "2020-09-07T19:15:33Z", "message": "Use temp-media cache dir instead of media.dir()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "502d41c7572c4d4210074a8bed62d1fc96861603", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/502d41c7572c4d4210074a8bed62d1fc96861603", "committedDate": "2020-09-09T18:31:04Z", "message": "Add AnkiMedia class to FlashCardsContract.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7971d207dcc29b05d954be17bc1535c2ddcd4a4", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c7971d207dcc29b05d954be17bc1535c2ddcd4a4", "committedDate": "2020-09-09T18:31:04Z", "message": "Add MEDIA uri to ContentProvider"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "023161d04aef8ff4d12c371ff719c5f7c896ad3d", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/023161d04aef8ff4d12c371ff719c5f7c896ad3d", "committedDate": "2020-09-09T18:31:04Z", "message": "Insert MEDIA adds media file and returns Uri fname"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca52875a9765a344a6dd130c7ced44c15c08cb74", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ca52875a9765a344a6dd130c7ced44c15c08cb74", "committedDate": "2020-09-09T18:31:04Z", "message": "addMediaFromUri returns proper formatted String\n\nThis formatted string can be returned and inserted straight into the\nfield of a card."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cf50f7e264d49f04bc50e459f66e9e0bc357a30b", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/cf50f7e264d49f04bc50e459f66e9e0bc357a30b", "committedDate": "2020-09-09T18:31:04Z", "message": "Replace assert call\n\nAssert doesn't work in java, but if it ever gets fixed it could cause crashes. Best not to use it."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62c5028704689a67b4c28341a7f5474b88be993a", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/62c5028704689a67b4c28341a7f5474b88be993a", "committedDate": "2020-09-09T18:31:04Z", "message": "Change StackTrace to specific Timber warning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f461535fbdff978b02d7815f0e92a599c1f1b7b4", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/f461535fbdff978b02d7815f0e92a599c1f1b7b4", "committedDate": "2020-09-09T18:31:04Z", "message": "Refactor insert MEDIA case into a function call"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37cf79bce3ff89e5526b36b398979dcb00834bb1", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/37cf79bce3ff89e5526b36b398979dcb00834bb1", "committedDate": "2020-09-09T18:31:04Z", "message": "Improve documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe0b2578dde10e3efc73d7ad59ee3d281af53d9a", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/fe0b2578dde10e3efc73d7ad59ee3d281af53d9a", "committedDate": "2020-09-09T18:31:04Z", "message": "Add Nullable and NotNull annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "867f6257a254c6b9d9516ac2b7b7ad95e10cb72c", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/867f6257a254c6b9d9516ac2b7b7ad95e10cb72c", "committedDate": "2020-09-09T18:31:04Z", "message": "Extract internalizeUri to FileUtil.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60012b11dcc7987e86d1d33b36cbaa85453471dd", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/60012b11dcc7987e86d1d33b36cbaa85453471dd", "committedDate": "2020-09-09T18:31:04Z", "message": "Add example to javadoc"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ee189b6dae8912f6284b8efbc2abb5a359fb1566", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ee189b6dae8912f6284b8efbc2abb5a359fb1566", "committedDate": "2020-09-09T18:31:04Z", "message": "Convert Timber.e to Timber.w"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e24981b0d6a4450150150a01358f2450ab5c53cf", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/e24981b0d6a4450150150a01358f2450ab5c53cf", "committedDate": "2020-09-09T18:31:04Z", "message": "Use temp-media cache dir instead of media.dir()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eedee141b3d4e0eec03c00fcac1831f28897f3f7", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/eedee141b3d4e0eec03c00fcac1831f28897f3f7", "committedDate": "2020-09-09T18:31:04Z", "message": "Change annotations to androidx\n\nUnitTest was throwing linting error because we were using jetbrains\nannotations."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3b99155c38e4bca93be145c1f77f2c0c68a2165", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a3b99155c38e4bca93be145c1f77f2c0c68a2165", "committedDate": "2020-09-07T19:15:33Z", "message": "Use temp-media cache dir instead of media.dir()"}, "afterCommit": {"oid": "eedee141b3d4e0eec03c00fcac1831f28897f3f7", "author": {"user": {"login": "KieranMigaku", "name": "Kieran Migaku"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/eedee141b3d4e0eec03c00fcac1831f28897f3f7", "committedDate": "2020-09-09T18:31:04Z", "message": "Change annotations to androidx\n\nUnitTest was throwing linting error because we were using jetbrains\nannotations."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aebca21534e378125173b7e5346d24df664f6170", "author": {"user": {"login": "mikehardy", "name": "Mike Hardy"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/aebca21534e378125173b7e5346d24df664f6170", "committedDate": "2020-09-30T14:58:38Z", "message": "Merge branch 'master' into allow-fileupload-api"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk5NTM0NjQz", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#pullrequestreview-499534643", "createdAt": "2020-09-30T15:07:52Z", "commit": {"oid": "aebca21534e378125173b7e5346d24df664f6170"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTowNzo1MlrOHaiSZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNTowNzo1MlrOHaiSZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU4Njc4OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * @param preferredName String that will be added to the beginning of the file name in the\n          \n          \n            \n                 *                      media collection, required.\n          \n          \n            \n                 * @param preferredName String to add to start of filename (do not use a file extension), required.", "url": "https://github.com/ankidroid/Anki-Android/pull/6641#discussion_r497586788", "createdAt": "2020-09-30T15:07:52Z", "author": {"login": "mikehardy"}, "path": "api/src/main/java/com/ichi2/anki/api/AddContentApi.java", "diffHunk": "@@ -151,6 +161,76 @@ public int addNotes(long modelId, long deckId, List<String[]> fieldsList, List<S\n         return getCompat().insertNotes(deckId, newNoteValuesList.toArray(new ContentValues[newNoteValuesList.size()]));\n     }\n \n+    /**\n+     * Add a media file to AnkiDroid's media collection. You would likely supply this uri through a FileProvider, and\n+     * then set FLAG_GRANT_READ_URI_PERMISSION using something like:\n+     *\n+     * <pre>\n+     *     <code>\n+     *     getContext().grantUriPermission(\"com.ichi2.anki\", uri, Intent.FLAG_GRANT_READ_URI_PERMISSION)\n+     *     // Then when file is added, remove the permission\n+     *     // add File ...\n+     *     getContext().revokePermission(uri, Intent.FLAG_GRAN_READ_URI_PERMISSION)\n+     *     </code>\n+     * </pre>\n+     *\n+     * Example usage:\n+     *  <pre>\n+     *      <code>\n+     *      Long modelId = getModelId(); // implementation can be seen in api sample app\n+     *      Long deckId = getDeckId(); // as above\n+     *      Set&lt;String&gt; tags = getTags(); // as above\n+     *      Uri fileUri = ... // this will be returned by a File Picker activity where we select an image file\n+     *      String addedImageFileName = mApi.addMediaFromUri(fileUri, \"My_Image_File\", \"image\");\n+     *\n+     *      String[] fields = new String[] {\"text on front of card\", \"text on back of card \" + addedImageFileName};\n+     *      mApi.addNote(modelId, deckId, fields, tags)\n+     *      </code>\n+     *  </pre>\n+     *\n+     *\n+     *\n+     *\n+     * @param fileUri   Uri for the file to be added, required.\n+     * @param preferredName String that will be added to the beginning of the file name in the\n+     *                      media collection, required.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aebca21534e378125173b7e5346d24df664f6170"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8df4208c8d00aff8b210799a8cbdf355d9a36559", "author": {"user": {"login": "mikehardy", "name": "Mike Hardy"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/8df4208c8d00aff8b210799a8cbdf355d9a36559", "committedDate": "2020-09-30T15:08:07Z", "message": "Apply suggestions from code review"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3097, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}