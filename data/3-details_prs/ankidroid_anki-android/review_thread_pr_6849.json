{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0ODgwMjcz", "number": 6849, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNToyMFrOEX3DmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNjo0N1rOEX3GQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDU0NzQ1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNToyMFrOG_4tVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNToyMFrOG_4tVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MjU4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private Card mCard;\n          \n          \n            \n                    @Nullable\n          \n          \n            \n                    private Card mCard;", "url": "https://github.com/ankidroid/Anki-Android/pull/6849#discussion_r469642583", "createdAt": "2020-08-13T01:25:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -715,4 +715,101 @@ public boolean isReview() {\n     public boolean isNew() {\n         return this.getType() == Consts.CARD_TYPE_NEW;\n     }\n+\n+    /** A cache represents an intermediary step between a card id and a card object. Creating a Card has some fixed cost\n+     * in term of database access. Using an id has an unknown cost: none if the card is never accessed, heavy if the\n+     * card is accessed a lot of time. CardCache ensure that the cost is paid at most once, by waiting for first access\n+     * to load the data, and then saving them. Since CPU and RAM is usually less of a bottleneck than database access,\n+     * it may often be worth using this cache.\n+     *\n+     * Beware that the card is loaded only once. Change in the database are not reflected, so use it only if you can\n+     * safely assume that the card has not changed. That is\n+     * long id;\n+     * Card card = col.getCard(id);\n+     * ....\n+     * Card card2 = col.getCard(id);\n+     * is not equivalent to\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * Card card2 = cache.getCard();\n+     *\n+     * It is equivalent to:\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * cache.releoad();\n+     * Card card2 = cache.getCard();\n+     */\n+    public static class Cache implements Cloneable {\n+        private final Collection mCol;\n+        private final long mId;\n+        private Card mCard;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e855eac92561032d29ced8838db401141ecc7ea7"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDU0OTE2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNTo0MVrOG_4uNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNTo0MVrOG_4uNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MjgwNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private final Collection mCol;\n          \n          \n            \n                    @NonNull\n          \n          \n            \n                    private final Collection mCol;", "url": "https://github.com/ankidroid/Anki-Android/pull/6849#discussion_r469642804", "createdAt": "2020-08-13T01:25:41Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -715,4 +715,101 @@ public boolean isReview() {\n     public boolean isNew() {\n         return this.getType() == Consts.CARD_TYPE_NEW;\n     }\n+\n+    /** A cache represents an intermediary step between a card id and a card object. Creating a Card has some fixed cost\n+     * in term of database access. Using an id has an unknown cost: none if the card is never accessed, heavy if the\n+     * card is accessed a lot of time. CardCache ensure that the cost is paid at most once, by waiting for first access\n+     * to load the data, and then saving them. Since CPU and RAM is usually less of a bottleneck than database access,\n+     * it may often be worth using this cache.\n+     *\n+     * Beware that the card is loaded only once. Change in the database are not reflected, so use it only if you can\n+     * safely assume that the card has not changed. That is\n+     * long id;\n+     * Card card = col.getCard(id);\n+     * ....\n+     * Card card2 = col.getCard(id);\n+     * is not equivalent to\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * Card card2 = cache.getCard();\n+     *\n+     * It is equivalent to:\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * cache.releoad();\n+     * Card card2 = cache.getCard();\n+     */\n+    public static class Cache implements Cloneable {\n+        private final Collection mCol;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e855eac92561032d29ced8838db401141ecc7ea7"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNDU1NDI3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNjo0N1rOG_4xCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwMToyNjo0N1rOG_4xCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTY0MzUzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * cache.releoad();\n          \n          \n            \n                 * cache.reload();", "url": "https://github.com/ankidroid/Anki-Android/pull/6849#discussion_r469643530", "createdAt": "2020-08-13T01:26:47Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -715,4 +715,101 @@ public boolean isReview() {\n     public boolean isNew() {\n         return this.getType() == Consts.CARD_TYPE_NEW;\n     }\n+\n+    /** A cache represents an intermediary step between a card id and a card object. Creating a Card has some fixed cost\n+     * in term of database access. Using an id has an unknown cost: none if the card is never accessed, heavy if the\n+     * card is accessed a lot of time. CardCache ensure that the cost is paid at most once, by waiting for first access\n+     * to load the data, and then saving them. Since CPU and RAM is usually less of a bottleneck than database access,\n+     * it may often be worth using this cache.\n+     *\n+     * Beware that the card is loaded only once. Change in the database are not reflected, so use it only if you can\n+     * safely assume that the card has not changed. That is\n+     * long id;\n+     * Card card = col.getCard(id);\n+     * ....\n+     * Card card2 = col.getCard(id);\n+     * is not equivalent to\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * Card card2 = cache.getCard();\n+     *\n+     * It is equivalent to:\n+     * long id;\n+     * Card.Cache cache = new Cache(col, id);\n+     * Card card = cache.getCard();\n+     * ....\n+     * cache.releoad();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e855eac92561032d29ced8838db401141ecc7ea7"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4819, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}