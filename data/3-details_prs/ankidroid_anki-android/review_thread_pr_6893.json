{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MjQ3Njk5", "number": 6893, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMToxMjoyNlrOEYvcXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMToxMjoyNlrOEYvcXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Mzc4NTkwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMToxMjoyNlrOHBNqMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNVQyMTozMzoxM1rOHBNwcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNDQxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private void  assert_ord(Note note, Integer[] ords) {\n          \n          \n            \n                private void  assertNoteContainsCardOrdinals(Note note, Integer[] ords) {\n          \n      \n    \n    \n  \n\nChanges the really cryptic python-y name to something that means what it does so I don't have to read the method every time", "url": "https://github.com/ankidroid/Anki-Android/pull/6893#discussion_r471034418", "createdAt": "2020-08-15T21:12:26Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -114,4 +119,121 @@ public void test_gendeck() {\n         note.flush();\n         assertEquals(newId, note.cards().get(3).getDid());\n     }\n+\n+    @Test\n+    public void test_gen_or() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        models.renameField(model, flds.getJSONObject(0), \"A\");\n+        models.renameField(model, flds.getJSONObject(1), \"B\");\n+        JSONObject fld2 = models.newField(\"C\");\n+        fld2.put(\"ord\", null);\n+        models.addField(model, fld2);\n+\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{A}}{{B}}{{C}}\");\n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        JSONObject tmpl = models.newTemplate(\"AND_OR\");\n+        tmpl.put(\"qfmt\", \"        {{A}}    {{#B}}        {{#C}}            {{B}}        {{/C}}    {{/B}}\");\n+        models.addTemplate(model, tmpl);\n+\n+        models.save(model);\n+        models.setCurrent(model);\n+\n+        Note note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+        // First card is generated if no other card\n+    }\n+\n+    @Test\n+    public void test_gen_not() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+\n+        models.renameField(model, flds.getJSONObject(0), \"First\");\n+        models.renameField(model, flds.getJSONObject(1), \"Front\");\n+        JSONObject fld2 = models.newField(\"AddIfEmpty\");\n+        fld2.put(\"name\", \"AddIfEmpty\");\n+        models.addField(model, fld2);\n+    \n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{AddIfEmpty}}{{Front}}{{First}}\");\n+        JSONObject tmpl = models.newTemplate(\"NOT\");\n+        tmpl.put(\"qfmt\", \"    {{^AddIfEmpty}}        {{Front}}    {{/AddIfEmpty}}    \");\n+    \n+        models.addTemplate(model, tmpl);\n+    \n+        models.save(model);\n+        models.setCurrent(model);\n+    \n+        Note note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\"); // ensure first note generated\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+    }\n+\n+    private void  assert_ord(Note note, Integer[] ords) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e68a451067f536302f57e0b66fab4e85d1f3da84"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNTU3MQ==", "bodyText": "\"assertNoteOrdinalAre\"\nbecause I want to assert that this is the exact set of cards generated, and not only that those ords are contained", "url": "https://github.com/ankidroid/Anki-Android/pull/6893#discussion_r471035571", "createdAt": "2020-08-15T21:27:12Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -114,4 +119,121 @@ public void test_gendeck() {\n         note.flush();\n         assertEquals(newId, note.cards().get(3).getDid());\n     }\n+\n+    @Test\n+    public void test_gen_or() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        models.renameField(model, flds.getJSONObject(0), \"A\");\n+        models.renameField(model, flds.getJSONObject(1), \"B\");\n+        JSONObject fld2 = models.newField(\"C\");\n+        fld2.put(\"ord\", null);\n+        models.addField(model, fld2);\n+\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{A}}{{B}}{{C}}\");\n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        JSONObject tmpl = models.newTemplate(\"AND_OR\");\n+        tmpl.put(\"qfmt\", \"        {{A}}    {{#B}}        {{#C}}            {{B}}        {{/C}}    {{/B}}\");\n+        models.addTemplate(model, tmpl);\n+\n+        models.save(model);\n+        models.setCurrent(model);\n+\n+        Note note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+        // First card is generated if no other card\n+    }\n+\n+    @Test\n+    public void test_gen_not() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+\n+        models.renameField(model, flds.getJSONObject(0), \"First\");\n+        models.renameField(model, flds.getJSONObject(1), \"Front\");\n+        JSONObject fld2 = models.newField(\"AddIfEmpty\");\n+        fld2.put(\"name\", \"AddIfEmpty\");\n+        models.addField(model, fld2);\n+    \n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{AddIfEmpty}}{{Front}}{{First}}\");\n+        JSONObject tmpl = models.newTemplate(\"NOT\");\n+        tmpl.put(\"qfmt\", \"    {{^AddIfEmpty}}        {{Front}}    {{/AddIfEmpty}}    \");\n+    \n+        models.addTemplate(model, tmpl);\n+    \n+        models.save(model);\n+        models.setCurrent(model);\n+    \n+        Note note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\"); // ensure first note generated\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+    }\n+\n+    private void  assert_ord(Note note, Integer[] ords) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNDQxOA=="}, "originalCommit": {"oid": "e68a451067f536302f57e0b66fab4e85d1f3da84"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNjAxNg==", "bodyText": "I stuck a bit on the wording also, I think you picked well, it's even more accurate", "url": "https://github.com/ankidroid/Anki-Android/pull/6893#discussion_r471036016", "createdAt": "2020-08-15T21:33:13Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -114,4 +119,121 @@ public void test_gendeck() {\n         note.flush();\n         assertEquals(newId, note.cards().get(3).getDid());\n     }\n+\n+    @Test\n+    public void test_gen_or() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        models.renameField(model, flds.getJSONObject(0), \"A\");\n+        models.renameField(model, flds.getJSONObject(1), \"B\");\n+        JSONObject fld2 = models.newField(\"C\");\n+        fld2.put(\"ord\", null);\n+        models.addField(model, fld2);\n+\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{A}}{{B}}{{C}}\");\n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        JSONObject tmpl = models.newTemplate(\"AND_OR\");\n+        tmpl.put(\"qfmt\", \"        {{A}}    {{#B}}        {{#C}}            {{B}}        {{/C}}    {{/B}}\");\n+        models.addTemplate(model, tmpl);\n+\n+        models.save(model);\n+        models.setCurrent(model);\n+\n+        Note note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        note.setItem(\"B\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+\n+        note = col.newNote();\n+        note.setItem(\"A\", \"foo\");\n+        note.setItem(\"B\", \"foo\");\n+        note.setItem(\"C\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+\n+        note = col.newNote();\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+        // First card is generated if no other card\n+    }\n+\n+    @Test\n+    public void test_gen_not() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Models models = col.getModels();\n+        Model model = models.byName(\"Basic\");\n+        JSONArray flds = model.getJSONArray(\"flds\");\n+        JSONArray tmpls = model.getJSONArray(\"tmpls\");\n+\n+        models.renameField(model, flds.getJSONObject(0), \"First\");\n+        models.renameField(model, flds.getJSONObject(1), \"Front\");\n+        JSONObject fld2 = models.newField(\"AddIfEmpty\");\n+        fld2.put(\"name\", \"AddIfEmpty\");\n+        models.addField(model, fld2);\n+    \n+        // ensure first card is always generated,\n+        // because at last one card is generated\n+        tmpls.getJSONObject(0).put(\"qfmt\", \"{{AddIfEmpty}}{{Front}}{{First}}\");\n+        JSONObject tmpl = models.newTemplate(\"NOT\");\n+        tmpl.put(\"qfmt\", \"    {{^AddIfEmpty}}        {{Front}}    {{/AddIfEmpty}}    \");\n+    \n+        models.addTemplate(model, tmpl);\n+    \n+        models.save(model);\n+        models.setCurrent(model);\n+    \n+        Note note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"AddIfEmpty\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\"); // ensure first note generated\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0});\n+    \n+        note = col.newNote();\n+        note.setItem(\"First\", \"foo\");\n+        note.setItem(\"Front\", \"foo\");\n+        col.addNote(note);\n+        assert_ord(note, new Integer[]{0, 1});\n+    }\n+\n+    private void  assert_ord(Note note, Integer[] ords) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTAzNDQxOA=="}, "originalCommit": {"oid": "e68a451067f536302f57e0b66fab4e85d1f3da84"}, "originalPosition": 134}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4848, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}