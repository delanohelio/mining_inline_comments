{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4NjE2OTI0", "number": 6372, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1MjowMVrOEDC2cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoyNzoyNFrOER0oBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNjI3ODkxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNzo1MjowMVrOGf302A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxODo0NTowNFrOGp3kXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MzY4OA==", "bodyText": "I don't understand this method - shouldn't it be static?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r436073688", "createdAt": "2020-06-05T17:52:01Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2109,11 +1996,180 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public class CardCache {\n+        private long mId;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+\n+        public CardCache(long id) {\n+            mId = id;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = getCol().getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().getUserFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String content(Column key) {\n+            switch (key) {\n+            case FLAGS:\n+                return (new Integer(getCard().getUserFlag())).toString();\n+            case SUSPENDED:\n+                return getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED ? \"True\": \"False\";\n+            case MARKED:\n+                return getCard().note().hasTag(\"marked\") ? \"marked\" : null;\n+            case SFLD:\n+                return getCard().note().getSFld();\n+            case DECK:\n+                return getCol().getDecks().name(getCard().getDid());\n+            case TAGS:\n+                return getCard().note().stringTags();\n+            case CARD:\n+                return getCard().template().optString(\"name\");\n+            case DUE:\n+                return getCard().getDueString();\n+            case EASE:\n+                if (getCard().getType() == Consts.CARD_TYPE_NEW) {\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_ease_new_card);\n+                } else {\n+                    return (getCard().getFactor()/10)+\"%\";\n+                }\n+            case CHANGED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().getMod());\n+            case CREATED:\n+                return LanguageUtil.getShortDateFormatFromMs(getCard().note().getId());\n+            case EDITED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().note().getMod());\n+            case INTERVAL:\n+                switch (getCard().getType()) {\n+                case Consts.CARD_TYPE_NEW:\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_new_card);\n+                case Consts.CARD_TYPE_LRN :\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_learning_card);\n+                default:\n+                    return Utils.roundedTimeSpanUnformatted(AnkiDroidApp.getInstance(), getCard().getIvl()*86400);\n+                }\n+            case LAPSES:\n+                return Integer.toString(getCard().getLapses());\n+            case NOTE:\n+                return getCard().model().optString(\"name\");\n+            case REVIEWS:\n+                return Integer.toString(getCard().getReps());\n+            case QUESTION:\n+                updateSearchItemQA();\n+                return mQa.first;\n+            case ANSWER:\n+                updateSearchItemQA();\n+                return mQa.second;\n+            default:\n+                return null;\n+            }\n+        }\n+\n+        /** pre compute the note and question/answer.  It can safely\n+            be called twice without doing extra work. */\n+        public void load(boolean reload) {\n+            if (reload) {\n+                reload();\n+            }\n+            getCard().note();\n+            if (COLUMN1_KEYS[mColumn1Index] == QUESTION ||\n+                COLUMN1_KEYS[mColumn1Index] == ANSWER ||\n+                COLUMN2_KEYS[mColumn2Index] == QUESTION ||\n+                COLUMN2_KEYS[mColumn2Index] == ANSWER) {\n+                updateSearchItemQA();\n+            }\n+            mLoaded = true;\n+        }\n+\n+        public boolean isLoaded() {\n+            return mLoaded;\n+        }\n+\n+        /**\n+           Reload question and answer. Use browser format. If it's empty\n+           uses non-browser format. If answer starts by question, remove\n+           question.\n+        */\n+        public void updateSearchItemQA() {\n+            if (mQa != null) {\n+                return;\n+            }\n+            // render question and answer\n+            Map<String, String> qa = getCard()._getQA(true, true);\n+            // Render full question / answer if the bafmt (i.e. \"browser appearance\") setting forced blank result\n+            if (\"\".equals(qa.get(\"q\")) || \"\".equals(qa.get(\"a\"))) {\n+                HashMap<String, String> qaFull = getCard()._getQA(true, false);\n+                if (\"\".equals(qa.get(\"q\"))) {\n+                    qa.put(\"q\", qaFull.get(\"q\"));\n+                }\n+                if (\"\".equals(qa.get(\"a\"))) {\n+                    qa.put(\"a\", qaFull.get(\"a\"));\n+                }\n+            }\n+            // update the original hash map to include rendered question & answer\n+            String q = qa.get(\"q\");\n+            String a = qa.get(\"a\");\n+            // remove the question from the start of the answer if it exists\n+            if (a.startsWith(q)) {\n+                a = a.replaceFirst(Pattern.quote(q), \"\");\n+            }\n+            a = formatQA(a, AnkiDroidApp.getInstance());\n+            q = formatQA(q, AnkiDroidApp.getInstance());\n+            mQa = new Pair<>(q, a);\n+        }\n+    }\n+\n+    public CardCache getCardCache(long id) {\n+        return new CardCache(id);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ff19e4812aa256822b22c87bae9fa510e432a84"}, "originalPosition": 631}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NTIyOA==", "bodyText": "this method does not exists anymore. The point used to be that I wanted my CardCache to have access to the card browser, and I didn't know how to do \"cb.new CardCache\"", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446555228", "createdAt": "2020-06-27T18:45:04Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2109,11 +1996,180 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public class CardCache {\n+        private long mId;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+\n+        public CardCache(long id) {\n+            mId = id;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = getCol().getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().getUserFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String content(Column key) {\n+            switch (key) {\n+            case FLAGS:\n+                return (new Integer(getCard().getUserFlag())).toString();\n+            case SUSPENDED:\n+                return getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED ? \"True\": \"False\";\n+            case MARKED:\n+                return getCard().note().hasTag(\"marked\") ? \"marked\" : null;\n+            case SFLD:\n+                return getCard().note().getSFld();\n+            case DECK:\n+                return getCol().getDecks().name(getCard().getDid());\n+            case TAGS:\n+                return getCard().note().stringTags();\n+            case CARD:\n+                return getCard().template().optString(\"name\");\n+            case DUE:\n+                return getCard().getDueString();\n+            case EASE:\n+                if (getCard().getType() == Consts.CARD_TYPE_NEW) {\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_ease_new_card);\n+                } else {\n+                    return (getCard().getFactor()/10)+\"%\";\n+                }\n+            case CHANGED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().getMod());\n+            case CREATED:\n+                return LanguageUtil.getShortDateFormatFromMs(getCard().note().getId());\n+            case EDITED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().note().getMod());\n+            case INTERVAL:\n+                switch (getCard().getType()) {\n+                case Consts.CARD_TYPE_NEW:\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_new_card);\n+                case Consts.CARD_TYPE_LRN :\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_learning_card);\n+                default:\n+                    return Utils.roundedTimeSpanUnformatted(AnkiDroidApp.getInstance(), getCard().getIvl()*86400);\n+                }\n+            case LAPSES:\n+                return Integer.toString(getCard().getLapses());\n+            case NOTE:\n+                return getCard().model().optString(\"name\");\n+            case REVIEWS:\n+                return Integer.toString(getCard().getReps());\n+            case QUESTION:\n+                updateSearchItemQA();\n+                return mQa.first;\n+            case ANSWER:\n+                updateSearchItemQA();\n+                return mQa.second;\n+            default:\n+                return null;\n+            }\n+        }\n+\n+        /** pre compute the note and question/answer.  It can safely\n+            be called twice without doing extra work. */\n+        public void load(boolean reload) {\n+            if (reload) {\n+                reload();\n+            }\n+            getCard().note();\n+            if (COLUMN1_KEYS[mColumn1Index] == QUESTION ||\n+                COLUMN1_KEYS[mColumn1Index] == ANSWER ||\n+                COLUMN2_KEYS[mColumn2Index] == QUESTION ||\n+                COLUMN2_KEYS[mColumn2Index] == ANSWER) {\n+                updateSearchItemQA();\n+            }\n+            mLoaded = true;\n+        }\n+\n+        public boolean isLoaded() {\n+            return mLoaded;\n+        }\n+\n+        /**\n+           Reload question and answer. Use browser format. If it's empty\n+           uses non-browser format. If answer starts by question, remove\n+           question.\n+        */\n+        public void updateSearchItemQA() {\n+            if (mQa != null) {\n+                return;\n+            }\n+            // render question and answer\n+            Map<String, String> qa = getCard()._getQA(true, true);\n+            // Render full question / answer if the bafmt (i.e. \"browser appearance\") setting forced blank result\n+            if (\"\".equals(qa.get(\"q\")) || \"\".equals(qa.get(\"a\"))) {\n+                HashMap<String, String> qaFull = getCard()._getQA(true, false);\n+                if (\"\".equals(qa.get(\"q\"))) {\n+                    qa.put(\"q\", qaFull.get(\"q\"));\n+                }\n+                if (\"\".equals(qa.get(\"a\"))) {\n+                    qa.put(\"a\", qaFull.get(\"a\"));\n+                }\n+            }\n+            // update the original hash map to include rendered question & answer\n+            String q = qa.get(\"q\");\n+            String a = qa.get(\"a\");\n+            // remove the question from the start of the answer if it exists\n+            if (a.startsWith(q)) {\n+                a = a.replaceFirst(Pattern.quote(q), \"\");\n+            }\n+            a = formatQA(a, AnkiDroidApp.getInstance());\n+            q = formatQA(q, AnkiDroidApp.getInstance());\n+            mQa = new Pair<>(q, a);\n+        }\n+    }\n+\n+    public CardCache getCardCache(long id) {\n+        return new CardCache(id);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjA3MzY4OA=="}, "originalCommit": {"oid": "3ff19e4812aa256822b22c87bae9fa510e432a84"}, "originalPosition": 631}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxNzk0MDU4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wN1QwMjowNzoyMlrOGgGrgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxOTo1Nzo1M1rOGp390A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzA1Ng==", "bodyText": "card.getNid() would be good - I'm not a fan of the strict application of the law of demeter, but it'd be useful to have another more efficient backing store here.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r436317056", "createdAt": "2020-06-07T02:07:22Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -386,10 +390,10 @@ private boolean hasSelectedSingleNoteId() {\n             return false;\n         }\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        HashSet<String> notes = new HashSet<>();\n-        for (Integer position : checkedPositions) {\n-            String noteId = mCards.get(position).get(NOTE);\n+        CardCache[] checkedPositions = mCheckedCard.toArray(new CardCache[0]);\n+        HashSet<Long> notes = new HashSet<>();\n+        for (CardCache card : checkedPositions) {\n+            long noteId = card.getCard().getNid();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac300e38efc942ff253ad54088b9cc1a2565d8a3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NTYwMA==", "bodyText": "I don't see any getCard().getNid anymore, so I'm going toi ignore this. I still see getCard().getNote(), but I like the fact that it is not cached. Indeed, this ensure that each time the card object is set back to null, the note object is note accessible anymore and has to be reloaded too", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446555600", "createdAt": "2020-06-27T18:49:05Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -386,10 +390,10 @@ private boolean hasSelectedSingleNoteId() {\n             return false;\n         }\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        HashSet<String> notes = new HashSet<>();\n-        for (Integer position : checkedPositions) {\n-            String noteId = mCards.get(position).get(NOTE);\n+        CardCache[] checkedPositions = mCheckedCard.toArray(new CardCache[0]);\n+        HashSet<Long> notes = new HashSet<>();\n+        for (CardCache card : checkedPositions) {\n+            long noteId = card.getCard().getNid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzA1Ng=="}, "originalCommit": {"oid": "ac300e38efc942ff253ad54088b9cc1a2565d8a3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NzI2OA==", "bodyText": "Removing the access to Card here allows us to switch to a more efficient implementation later on. No caching required for the change.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446557268", "createdAt": "2020-06-27T19:06:34Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -386,10 +390,10 @@ private boolean hasSelectedSingleNoteId() {\n             return false;\n         }\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        HashSet<String> notes = new HashSet<>();\n-        for (Integer position : checkedPositions) {\n-            String noteId = mCards.get(position).get(NOTE);\n+        CardCache[] checkedPositions = mCheckedCard.toArray(new CardCache[0]);\n+        HashSet<Long> notes = new HashSet<>();\n+        for (CardCache card : checkedPositions) {\n+            long noteId = card.getCard().getNid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzA1Ng=="}, "originalCommit": {"oid": "ac300e38efc942ff253ad54088b9cc1a2565d8a3"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU2MTc0NA==", "bodyText": "I guess it would make sens. But we are commenting an outdated part of the code which no longer exists", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446561744", "createdAt": "2020-06-27T19:57:53Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -386,10 +390,10 @@ private boolean hasSelectedSingleNoteId() {\n             return false;\n         }\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        HashSet<String> notes = new HashSet<>();\n-        for (Integer position : checkedPositions) {\n-            String noteId = mCards.get(position).get(NOTE);\n+        CardCache[] checkedPositions = mCheckedCard.toArray(new CardCache[0]);\n+        HashSet<Long> notes = new HashSet<>();\n+        for (CardCache card : checkedPositions) {\n+            long noteId = card.getCard().getNid();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjMxNzA1Ng=="}, "originalCommit": {"oid": "ac300e38efc942ff253ad54088b9cc1a2565d8a3"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxMzkwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1MTo0OFrOGjb-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxODo0OTozMlrOGp3l_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTcwNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (! idToRemove.contains(card.getId())) {\n          \n          \n            \n                        if (!idToRemove.contains(card.getId())) {", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439811706", "createdAt": "2020-06-14T09:51:48Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1582,10 +1516,10 @@ private void removeNotesView(java.util.Collection<Long> cardsIds, boolean reorde\n             }\n         }\n \n-        List<Map<String, String>> newMCards = new ArrayList<Map<String, String>>();\n-        for (Map<String, String> cardProperties: oldMCards) {\n-            if (! idToRemove.contains(Long.parseLong(cardProperties.get(ID)))) {\n-                newMCards.add(cardProperties);\n+        List<CardCache> newMCards = new ArrayList<>();\n+        for (CardCache card: oldMCards) {\n+            if (! idToRemove.contains(card.getId())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 375}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NTY0Nw==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446555647", "createdAt": "2020-06-27T18:49:32Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1582,10 +1516,10 @@ private void removeNotesView(java.util.Collection<Long> cardsIds, boolean reorde\n             }\n         }\n \n-        List<Map<String, String>> newMCards = new ArrayList<Map<String, String>>();\n-        for (Map<String, String> cardProperties: oldMCards) {\n-            if (! idToRemove.contains(Long.parseLong(cardProperties.get(ID)))) {\n-                newMCards.add(cardProperties);\n+        List<CardCache> newMCards = new ArrayList<>();\n+        for (CardCache card: oldMCards) {\n+            if (! idToRemove.contains(card.getId())) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTcwNg=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 375}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxNDE0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1MjoyMVrOGjb-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxODo1MDoxMVrOGp3mUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTc0MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (! firstLoaded || ! lastLoaded) {\n          \n          \n            \n                            if (!firstLoaded || !lastLoaded) {", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439811740", "createdAt": "2020-06-14T09:52:21Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1831,10 +1765,10 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun\n             int lastVisibleItem = firstVisibleItem + visibleItemCount;\n             int size = getCardCount();\n             if ((size > 0) && (firstVisibleItem < size) && ((lastVisibleItem - 1) < size)) {\n-                String firstAns = getCards().get(firstVisibleItem).get(ANSWER);\n+                boolean firstLoaded = getCards().get(firstVisibleItem).isLoaded();\n                 // Note: max value of lastVisibleItem is totalItemCount, so need to subtract 1\n-                String lastAns = getCards().get(lastVisibleItem - 1).get(ANSWER);\n-                if (firstAns == null || lastAns == null) {\n+                boolean lastLoaded = getCards().get(lastVisibleItem - 1).isLoaded();\n+                if (! firstLoaded || ! lastLoaded) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 399}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NTczMA==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446555730", "createdAt": "2020-06-27T18:50:11Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1831,10 +1765,10 @@ public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCoun\n             int lastVisibleItem = firstVisibleItem + visibleItemCount;\n             int size = getCardCount();\n             if ((size > 0) && (firstVisibleItem < size) && ((lastVisibleItem - 1) < size)) {\n-                String firstAns = getCards().get(firstVisibleItem).get(ANSWER);\n+                boolean firstLoaded = getCards().get(firstVisibleItem).isLoaded();\n                 // Note: max value of lastVisibleItem is totalItemCount, so need to subtract 1\n-                String lastAns = getCards().get(lastVisibleItem - 1).get(ANSWER);\n-                if (firstAns == null || lastAns == null) {\n+                boolean lastLoaded = getCards().get(lastVisibleItem - 1).isLoaded();\n+                if (! firstLoaded || ! lastLoaded) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTc0MA=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 399}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxNTA4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1Mzo0MVrOGjb_Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yN1QxODo1MDowOVrOGp3mSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTg1NA==", "bodyText": "design: I'm not sure content is the best word. getColumnText springs to mind, but I still think it could be better.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439811854", "createdAt": "2020-06-14T09:53:41Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1905,23 +1839,23 @@ public View getView(int position, View convertView, ViewGroup parent) {\n         private void bindView(final int position, final View v) {\n             // Draw the content in the columns\n             View[] columns = (View[]) v.getTag();\n-            final Map<String, String> card = getCards().get(position);\n+            final CardCache card = getCards().get(position);\n             for (int i = 0; i < mToIds.length; i++) {\n                 TextView col = (TextView) columns[i];\n                 // set font for column\n                 setFont(col);\n                 // set text for column\n-                col.setText(card.get(mFromKeys[i]));\n+                col.setText(card.content(mFromKeys[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 432}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjU1NTcyMg==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446555722", "createdAt": "2020-06-27T18:50:09Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1905,23 +1839,23 @@ public View getView(int position, View convertView, ViewGroup parent) {\n         private void bindView(final int position, final View v) {\n             // Draw the content in the columns\n             View[] columns = (View[]) v.getTag();\n-            final Map<String, String> card = getCards().get(position);\n+            final CardCache card = getCards().get(position);\n             for (int i = 0; i < mToIds.length; i++) {\n                 TextView col = (TextView) columns[i];\n                 // set font for column\n                 setFont(col);\n                 // set text for column\n-                col.setText(card.get(mFromKeys[i]));\n+                col.setText(card.content(mFromKeys[i]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTg1NA=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 432}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxNTYzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1NDoyN1rOGjb_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzowNjowNlrOGpw5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTkyOA==", "bodyText": "mCheckedCards", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439811928", "createdAt": "2020-06-14T09:54:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -198,7 +202,7 @@\n     private TextView mActionBarTitle;\n     private boolean mReloadRequired = false;\n     private boolean mInMultiSelectMode = false;\n-    private Set<Integer> mCheckedCardPositions = Collections.synchronizedSet(new LinkedHashSet<>());\n+    private Set<CardCache> mCheckedCard = Collections.synchronizedSet(new LinkedHashSet<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NjA3OQ==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446446079", "createdAt": "2020-06-26T23:06:06Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -198,7 +202,7 @@\n     private TextView mActionBarTitle;\n     private boolean mReloadRequired = false;\n     private boolean mInMultiSelectMode = false;\n-    private Set<Integer> mCheckedCardPositions = Collections.synchronizedSet(new LinkedHashSet<>());\n+    private Set<CardCache> mCheckedCard = Collections.synchronizedSet(new LinkedHashSet<>());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTkyOA=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxNjE2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1NToyM1rOGjb_mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzowMzowOVrOGpw3ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTk5NA==", "bodyText": "Can this be cached, or are the callers optimised to only call this once?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439811994", "createdAt": "2020-06-14T09:55:23Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2099,11 +1985,201 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public class CardCache {\n+        private long mId;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, int position) {\n+            mId = id;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = getCol().getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().getUserFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String content(Column key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 645}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NTQ3NQ==", "bodyText": "The method updateSearchItemQA starts by checking whether questiond and answer are computed in\n            if (mQa != null) {\n                return;\n            }\n\nIf it is already computed, then it will not compute it again. So the function called immediately returns. Does it answer your question ? I would expect \"content\" to be the caller, but I expect your question being about the function which is called, so it's not clear to me here what it means.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446445475", "createdAt": "2020-06-26T23:03:09Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2099,11 +1985,201 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public class CardCache {\n+        private long mId;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, int position) {\n+            mId = id;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = getCol().getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().getUserFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String content(Column key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMTk5NA=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 645}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxNzg2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1ODoxM1rOGjcAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMzowMDozN1rOGpw1Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMjIwNQ==", "bodyText": "Could you add a quick comment stating that column1 can't be an answer", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439812205", "createdAt": "2020-06-14T09:58:13Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2099,11 +1985,201 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public class CardCache {\n+        private long mId;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, int position) {\n+            mId = id;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = getCol().getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().getUserFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String content(Column key) {\n+            switch (key) {\n+            case FLAGS:\n+                return (new Integer(getCard().getUserFlag())).toString();\n+            case SUSPENDED:\n+                return getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED ? \"True\": \"False\";\n+            case MARKED:\n+                return getCard().note().hasTag(\"marked\") ? \"marked\" : null;\n+            case SFLD:\n+                return getCard().note().getSFld();\n+            case DECK:\n+                return getCol().getDecks().name(getCard().getDid());\n+            case TAGS:\n+                return getCard().note().stringTags();\n+            case CARD:\n+                return getCard().template().optString(\"name\");\n+            case DUE:\n+                return getCard().getDueString();\n+            case EASE:\n+                if (getCard().getType() == Consts.CARD_TYPE_NEW) {\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_ease_new_card);\n+                } else {\n+                    return (getCard().getFactor()/10)+\"%\";\n+                }\n+            case CHANGED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().getMod());\n+            case CREATED:\n+                return LanguageUtil.getShortDateFormatFromMs(getCard().note().getId());\n+            case EDITED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().note().getMod());\n+            case INTERVAL:\n+                switch (getCard().getType()) {\n+                case Consts.CARD_TYPE_NEW:\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_new_card);\n+                case Consts.CARD_TYPE_LRN :\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_learning_card);\n+                default:\n+                    return Utils.roundedTimeSpanUnformatted(AnkiDroidApp.getInstance(), getCard().getIvl()*86400);\n+                }\n+            case LAPSES:\n+                return Integer.toString(getCard().getLapses());\n+            case NOTE_TYPE:\n+                return getCard().model().optString(\"name\");\n+            case REVIEWS:\n+                return Integer.toString(getCard().getReps());\n+            case QUESTION:\n+                updateSearchItemQA();\n+                return mQa.first;\n+            case ANSWER:\n+                updateSearchItemQA();\n+                return mQa.second;\n+            default:\n+                return null;\n+            }\n+        }\n+\n+        /** pre compute the note and question/answer.  It can safely\n+            be called twice without doing extra work. */\n+        public void load(boolean reload) {\n+            if (reload) {\n+                reload();\n+            }\n+            getCard().note();\n+            if (\n+                COLUMN1_KEYS[mColumn1Index] == QUESTION ||\n+                COLUMN2_KEYS[mColumn2Index] == QUESTION ||\n+                COLUMN2_KEYS[mColumn2Index] == ANSWER) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 711}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ0NDg5OQ==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446444899", "createdAt": "2020-06-26T23:00:37Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2099,11 +1985,201 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public class CardCache {\n+        private long mId;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, int position) {\n+            mId = id;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = getCol().getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().getUserFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String content(Column key) {\n+            switch (key) {\n+            case FLAGS:\n+                return (new Integer(getCard().getUserFlag())).toString();\n+            case SUSPENDED:\n+                return getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED ? \"True\": \"False\";\n+            case MARKED:\n+                return getCard().note().hasTag(\"marked\") ? \"marked\" : null;\n+            case SFLD:\n+                return getCard().note().getSFld();\n+            case DECK:\n+                return getCol().getDecks().name(getCard().getDid());\n+            case TAGS:\n+                return getCard().note().stringTags();\n+            case CARD:\n+                return getCard().template().optString(\"name\");\n+            case DUE:\n+                return getCard().getDueString();\n+            case EASE:\n+                if (getCard().getType() == Consts.CARD_TYPE_NEW) {\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_ease_new_card);\n+                } else {\n+                    return (getCard().getFactor()/10)+\"%\";\n+                }\n+            case CHANGED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().getMod());\n+            case CREATED:\n+                return LanguageUtil.getShortDateFormatFromMs(getCard().note().getId());\n+            case EDITED:\n+                return LanguageUtil.getShortDateFormatFromS(getCard().note().getMod());\n+            case INTERVAL:\n+                switch (getCard().getType()) {\n+                case Consts.CARD_TYPE_NEW:\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_new_card);\n+                case Consts.CARD_TYPE_LRN :\n+                    return AnkiDroidApp.getInstance().getString(R.string.card_browser_interval_learning_card);\n+                default:\n+                    return Utils.roundedTimeSpanUnformatted(AnkiDroidApp.getInstance(), getCard().getIvl()*86400);\n+                }\n+            case LAPSES:\n+                return Integer.toString(getCard().getLapses());\n+            case NOTE_TYPE:\n+                return getCard().model().optString(\"name\");\n+            case REVIEWS:\n+                return Integer.toString(getCard().getReps());\n+            case QUESTION:\n+                updateSearchItemQA();\n+                return mQa.first;\n+            case ANSWER:\n+                updateSearchItemQA();\n+                return mQa.second;\n+            default:\n+                return null;\n+            }\n+        }\n+\n+        /** pre compute the note and question/answer.  It can safely\n+            be called twice without doing extra work. */\n+        public void load(boolean reload) {\n+            if (reload) {\n+                reload();\n+            }\n+            getCard().note();\n+            if (\n+                COLUMN1_KEYS[mColumn1Index] == QUESTION ||\n+                COLUMN2_KEYS[mColumn2Index] == QUESTION ||\n+                COLUMN2_KEYS[mColumn2Index] == ANSWER) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMjIwNQ=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 711}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAxODQ1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1OTo1NlrOGjcAww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQwOTo1OTo1NlrOGjcAww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMjI5MQ==", "bodyText": "No longer relevant comment", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439812291", "createdAt": "2020-06-14T09:59:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -103,33 +103,37 @@\n \n import timber.log.Timber;\n \n+import static com.ichi2.anki.CardBrowser.Column.*;\n+\n public class CardBrowser extends NavigationDrawerActivity implements\n         DeckDropDownAdapter.SubtitleListener {\n \n     // Properties in mCards. this is a stringly typed map for speed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDAyMTY0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNFQxMDowNToxMFrOGjcCag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxNDoxODo1MVrOGp9xEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMjcxNA==", "bodyText": "This (temporarily) leaks an activity reference, is there a better way to do this (extracting CardCache[] into a data structure for example)?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r439812714", "createdAt": "2020-06-14T10:05:10Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -910,19 +910,19 @@ private TaskData doInBackgroundSearchCards(TaskData... params) {\n         String query = (String) params[0].getObjArray()[0];\n         Boolean order = (Boolean) params[0].getObjArray()[1];\n         int numCardsToRender = (int) params[0].getObjArray()[2];\n+        CardBrowser cb = (CardBrowser) params[0].getObjArray()[3];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjQ1MDY2OQ==", "bodyText": "A CardCache object needs to have access to the cardbrowser in order to get access to:\n\ngetCol\nmColumn1Index and mColumn2Index\n\nThe collection could easily be given as a parameter. However, it really needs to know current columns for optimization purpose, and also need to have access to it when the column change. I could ask the card browser to propagate this cahnge to the card cache, but that seems more error-prone. there seems to be little reason to do a loop over card cache to tell all of them.\nOf course, CardCache could call a method from CardBrowser instead of a direct access to the variable, but it still means it would need to access the CardBrowser, and so the CardCache would still contains an access to the CardBrowser.\nThe main trouble is that, since CardCache has access to CardBrowser, when CardCache is sent in background (i.e. in updateSearchItemQA) in order to precompute its value question/answer, it'll also send a reference to the CardBrowser. And I don't really know how to avoid that.\nI guess I may just give the two column index directly to updateSearchItemQA, but it will need mode refactorization", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446450669", "createdAt": "2020-06-26T23:27:59Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -910,19 +910,19 @@ private TaskData doInBackgroundSearchCards(TaskData... params) {\n         String query = (String) params[0].getObjArray()[0];\n         Boolean order = (Boolean) params[0].getObjArray()[1];\n         int numCardsToRender = (int) params[0].getObjArray()[2];\n+        CardBrowser cb = (CardBrowser) params[0].getObjArray()[3];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMjcxNA=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1Njc4NQ==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r446656785", "createdAt": "2020-06-28T14:18:51Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -910,19 +910,19 @@ private TaskData doInBackgroundSearchCards(TaskData... params) {\n         String query = (String) params[0].getObjArray()[0];\n         Boolean order = (Boolean) params[0].getObjArray()[1];\n         int numCardsToRender = (int) params[0].getObjArray()[2];\n+        CardBrowser cb = (CardBrowser) params[0].getObjArray()[3];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTgxMjcxNA=="}, "originalCommit": {"oid": "7d21e677194a0898946a9a30770977e204709592"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE0NzM0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowMTo1MlrOG2ueNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0MzowM1rOG2yGQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzY4Ng==", "bodyText": "We shouldn't need the array copy now we're iterating over the same collection", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460037686", "createdAt": "2020-07-24T13:01:52Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -373,11 +374,11 @@ private void onSearch() {\n \n     private long[] getSelectedCardIds() {\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        long[] ids = new long[checkedPositions.length];\n+        CardCache[] checkedCards = mCheckedCards.toArray(new CardCache[0]);\n+        long[] ids = new long[checkedCards.length];\n         int count = 0;\n-        for (int cardPosition : checkedPositions) {\n-            ids[count++] = Long.valueOf(mCards.get(cardPosition).get(ID));\n+        for (CardCache cardPosition : checkedCards) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MjY5MA==", "bodyText": "I don't know why the copy was there. I just tried to stay close to previous code. If you feel it's safe, I'll add a commit deleting it", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460052690", "createdAt": "2020-07-24T13:30:12Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -373,11 +374,11 @@ private void onSearch() {\n \n     private long[] getSelectedCardIds() {\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        long[] ids = new long[checkedPositions.length];\n+        CardCache[] checkedCards = mCheckedCards.toArray(new CardCache[0]);\n+        long[] ids = new long[checkedCards.length];\n         int count = 0;\n-        for (int cardPosition : checkedPositions) {\n-            ids[count++] = Long.valueOf(mCards.get(cardPosition).get(ID));\n+        for (CardCache cardPosition : checkedCards) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzY4Ng=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2NTE0NQ==", "bodyText": "This is also a translation from CardCache to card id. It seems to be useful, because at some points, the card IDs are given to background tasks that are not fit to receive CardCache, so I think I should keep it.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460065145", "createdAt": "2020-07-24T13:51:28Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -373,11 +374,11 @@ private void onSearch() {\n \n     private long[] getSelectedCardIds() {\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        long[] ids = new long[checkedPositions.length];\n+        CardCache[] checkedCards = mCheckedCards.toArray(new CardCache[0]);\n+        long[] ids = new long[checkedCards.length];\n         int count = 0;\n-        for (int cardPosition : checkedPositions) {\n-            ids[count++] = Long.valueOf(mCards.get(cardPosition).get(ID));\n+        for (CardCache cardPosition : checkedCards) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzY4Ng=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2NzYzMQ==", "bodyText": "The method's fine, but the checkedCards variable shouldn't need to be created", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460067631", "createdAt": "2020-07-24T13:55:42Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -373,11 +374,11 @@ private void onSearch() {\n \n     private long[] getSelectedCardIds() {\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        long[] ids = new long[checkedPositions.length];\n+        CardCache[] checkedCards = mCheckedCards.toArray(new CardCache[0]);\n+        long[] ids = new long[checkedCards.length];\n         int count = 0;\n-        for (int cardPosition : checkedPositions) {\n-            ids[count++] = Long.valueOf(mCards.get(cardPosition).get(ID));\n+        for (CardCache cardPosition : checkedCards) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzY4Ng=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NzA4OQ==", "bodyText": "Oh okay.\u00a0I wasn't looking at the righ line", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460097089", "createdAt": "2020-07-24T14:43:03Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -373,11 +374,11 @@ private void onSearch() {\n \n     private long[] getSelectedCardIds() {\n         //copy to array to ensure threadsafe iteration\n-        Integer[] checkedPositions = mCheckedCardPositions.toArray(new Integer[0]);\n-        long[] ids = new long[checkedPositions.length];\n+        CardCache[] checkedCards = mCheckedCards.toArray(new CardCache[0]);\n+        long[] ids = new long[checkedCards.length];\n         int count = 0;\n-        for (int cardPosition : checkedPositions) {\n-            ids[count++] = Long.valueOf(mCards.get(cardPosition).get(ID));\n+        for (CardCache cardPosition : checkedCards) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzNzY4Ng=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE1NTU3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNDoyN1rOG2ujLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzo1MzoxOFrOG2wNmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODk1OA==", "bodyText": "I don't get how this could occur, could you explain the change more?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460038958", "createdAt": "2020-07-24T13:04:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -562,10 +563,10 @@ public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {\n                     mColumn2Index = pos;\n                     AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit()\n                             .putInt(\"cardBrowserColumn2\", mColumn2Index).commit();\n-                    String[] fromMap = mCardsAdapter.getFromMapping();\n+                    Column[] fromMap = mCardsAdapter.getFromMapping();\n                     fromMap[1] = COLUMN2_KEYS[mColumn2Index];\n                     if (fromMap[1] == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1Mzg1MQ==", "bodyText": "No reason to still check it. I just didn't re read every line.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460053851", "createdAt": "2020-07-24T13:32:18Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -562,10 +563,10 @@ public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {\n                     mColumn2Index = pos;\n                     AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit()\n                             .putInt(\"cardBrowserColumn2\", mColumn2Index).commit();\n-                    String[] fromMap = mCardsAdapter.getFromMapping();\n+                    Column[] fromMap = mCardsAdapter.getFromMapping();\n                     fromMap[1] = COLUMN2_KEYS[mColumn2Index];\n                     if (fromMap[1] == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODk1OA=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA2NjIwMA==", "bodyText": "I don't even know how it was possible before", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460066200", "createdAt": "2020-07-24T13:53:18Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -562,10 +563,10 @@ public void onItemSelected(AdapterView<?> parent, View view, int pos, long id) {\n                     mColumn2Index = pos;\n                     AnkiDroidApp.getSharedPrefs(AnkiDroidApp.getInstance().getBaseContext()).edit()\n                             .putInt(\"cardBrowserColumn2\", mColumn2Index).commit();\n-                    String[] fromMap = mCardsAdapter.getFromMapping();\n+                    Column[] fromMap = mCardsAdapter.getFromMapping();\n                     fromMap[1] = COLUMN2_KEYS[mColumn2Index];\n                     if (fromMap[1] == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzODk1OA=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE1ODY5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNToyMFrOG2uk6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzowNToyMFrOG2uk6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDAzOTQwMA==", "bodyText": "Again, I don't think this can be null any more, is this logic retained?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460039400", "createdAt": "2020-07-24T13:05:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -579,9 +580,9 @@ public void onNothingSelected(AdapterView<?> parent) {\n         // get the font and font size from the preferences\n         int sflRelativeFontSize = preferences.getInt(\"relativeCardBrowserFontSize\", DEFAULT_FONT_SIZE_RATIO);\n         String sflCustomFont = preferences.getString(\"browserEditorFont\", \"\");\n-        String[] columnsContent = {COLUMN1_KEYS[mColumn1Index], COLUMN2_KEYS[mColumn2Index]};\n+        Column[] columnsContent = {COLUMN1_KEYS[mColumn1Index], COLUMN2_KEYS[mColumn2Index]};\n         if (columnsContent[1] == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 151}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE4MjE0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxMjozNVrOG2uzIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDowNjowMFrOG2wrpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MzA0Mg==", "bodyText": "I think we want to ensure that we're using the same instance from  getCards() throughout this procedure", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460043042", "createdAt": "2020-07-24T13:12:35Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1406,30 +1416,13 @@ public void onPostExecute(TaskData result) {\n     private void updateCardsInList(List<Card> cards, Map<Long, String> updatedCardTags) {\n         Map<Long, Integer> idToPos = getPositionMap(getCards());\n         for (Card c : cards) {\n-            Note note = c.note();\n             // get position in the mCards search results HashMap\n             int pos = idToPos.containsKey(c.getId()) ? idToPos.get(c.getId()) : -1;\n             if (pos < 0 || pos >= getCardCount()) {\n                 continue;\n             }\n-            Map<String, String> card = getCards().get(pos);\n-            // update tags\n-            card.put(MARKED, (c.note().hasTag(\"marked\")) ? \"marked\" : null);\n-            if (updatedCardTags != null) {\n-                card.put(TAGS, updatedCardTags.get(c.getNid()));\n-            }\n-            // update sfld\n-            String sfld = note.getSFld();\n-            card.put(SFLD, sfld);\n             // update Q & A etc\n-            updateSearchItemQA(getBaseContext(), card, c, getCol());\n-            // update deck\n-            String deckName;\n-            deckName = getCol().getDecks().get(c.getDid()).getString(\"name\");\n-            card.put(DECK, deckName);\n-            // update flags (marked / suspended / etc) which determine color\n-            card.put(SUSPENDED, c.getQueue() == Consts.QUEUE_TYPE_SUSPENDED ? \"True\": \"False\");\n-            card.put(FLAGS, (new Integer(c.userFlag())).toString());\n+            getCards().get(pos).load(true, mColumn1Index, mColumn2Index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 286}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3Mzg5Mg==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460073892", "createdAt": "2020-07-24T14:06:00Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1406,30 +1416,13 @@ public void onPostExecute(TaskData result) {\n     private void updateCardsInList(List<Card> cards, Map<Long, String> updatedCardTags) {\n         Map<Long, Integer> idToPos = getPositionMap(getCards());\n         for (Card c : cards) {\n-            Note note = c.note();\n             // get position in the mCards search results HashMap\n             int pos = idToPos.containsKey(c.getId()) ? idToPos.get(c.getId()) : -1;\n             if (pos < 0 || pos >= getCardCount()) {\n                 continue;\n             }\n-            Map<String, String> card = getCards().get(pos);\n-            // update tags\n-            card.put(MARKED, (c.note().hasTag(\"marked\")) ? \"marked\" : null);\n-            if (updatedCardTags != null) {\n-                card.put(TAGS, updatedCardTags.get(c.getNid()));\n-            }\n-            // update sfld\n-            String sfld = note.getSFld();\n-            card.put(SFLD, sfld);\n             // update Q & A etc\n-            updateSearchItemQA(getBaseContext(), card, c, getCol());\n-            // update deck\n-            String deckName;\n-            deckName = getCol().getDecks().get(c.getDid()).getString(\"name\");\n-            card.put(DECK, deckName);\n-            // update flags (marked / suspended / etc) which determine color\n-            card.put(SUSPENDED, c.getQueue() == Consts.QUEUE_TYPE_SUSPENDED ? \"True\": \"False\");\n-            card.put(FLAGS, (new Integer(c.userFlag())).toString());\n+            getCards().get(pos).load(true, mColumn1Index, mColumn2Index);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0MzA0Mg=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 286}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE5MTU5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNToyN1rOG2u5EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzozNzo0M1rOG2vpaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NDU2MQ==", "bodyText": "getColumnHeaderText?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460044561", "createdAt": "2020-07-24T13:15:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1927,23 +1860,23 @@ public View getView(int position, View convertView, ViewGroup parent) {\n         private void bindView(final int position, final View v) {\n             // Draw the content in the columns\n             View[] columns = (View[]) v.getTag();\n-            final Map<String, String> card = getCards().get(position);\n+            final CardCache card = getCards().get(position);\n             for (int i = 0; i < mToIds.length; i++) {\n                 TextView col = (TextView) columns[i];\n                 // set font for column\n                 setFont(col);\n                 // set text for column\n-                col.setText(card.get(mFromKeys[i]));\n+                col.setText(card.getColumnText(mFromKeys[i]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 450}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1NjkzNg==", "bodyText": "Ok", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460056936", "createdAt": "2020-07-24T13:37:43Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1927,23 +1860,23 @@ public View getView(int position, View convertView, ViewGroup parent) {\n         private void bindView(final int position, final View v) {\n             // Draw the content in the columns\n             View[] columns = (View[]) v.getTag();\n-            final Map<String, String> card = getCards().get(position);\n+            final CardCache card = getCards().get(position);\n             for (int i = 0; i < mToIds.length; i++) {\n                 TextView col = (TextView) columns[i];\n                 // set font for column\n                 setFont(col);\n                 // set text for column\n-                col.setText(card.get(mFromKeys[i]));\n+                col.setText(card.getColumnText(mFromKeys[i]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NDU2MQ=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 450}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE5NzY5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNzowNlrOG2u8tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNzowNlrOG2u8tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTQ5NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    mActionBarTitle.setText(String.valueOf(mCheckedCards.size()));\n          \n          \n            \n                    mActionBarTitle.setText(String.valueOf(checkedCardCount()));", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460045494", "createdAt": "2020-07-24T13:17:06Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2177,7 +2257,7 @@ private void loadMultiSelectMode() {\n         mInMultiSelectMode = true;\n         // show title and hide spinner\n         mActionBarTitle.setVisibility(View.VISIBLE);\n-        mActionBarTitle.setText(String.valueOf(mCheckedCardPositions.size()));\n+        mActionBarTitle.setText(String.valueOf(mCheckedCards.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 804}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE5ODM2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNzoxNlrOG2u9GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDo0MjoyM1rOG2yEvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTU5Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @VisibleForTesting", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460045592", "createdAt": "2020-07-24T13:17:16Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2205,7 +2285,7 @@ private void endMultiSelectMode() {\n \n     @VisibleForTesting", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 819}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3NTU2Mw==", "bodyText": "Why ? There is still no reason appart from testing, to set it to public", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460075563", "createdAt": "2020-07-24T14:08:47Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2205,7 +2285,7 @@ private void endMultiSelectMode() {\n \n     @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTU5Mg=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 819}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MDYxMw==", "bodyText": "Further suggestions use the method", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460090613", "createdAt": "2020-07-24T14:32:18Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2205,7 +2285,7 @@ private void endMultiSelectMode() {\n \n     @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTU5Mg=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 819}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5NjcwMQ==", "bodyText": "Yes, but it is used only in the current class. So there would still be no reason to let it be public instead of private", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460096701", "createdAt": "2020-07-24T14:42:23Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2205,7 +2285,7 @@ private void endMultiSelectMode() {\n \n     @VisibleForTesting", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTU5Mg=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 819}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTE5OTMyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNzozNFrOG2u9sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxNzozNFrOG2u9sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NTc0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return mCheckedCards.size() >= getCardCount(); //must handle 0.\n          \n          \n            \n                    return checkedCardCount() >= getCardCount(); //must handle 0.", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460045745", "createdAt": "2020-07-24T13:17:34Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -877,11 +879,11 @@ private void updateMultiselectMenu() {\n \n \n     private boolean hasSelectedCards() {\n-        return mCheckedCardPositions.size() > 0;\n+        return !mCheckedCards.isEmpty();\n     }\n \n     private boolean hasSelectedAllCards() {\n-        return mCheckedCardPositions.size() >= getCardCount(); //must handle 0.\n+        return mCheckedCards.size() >= getCardCount(); //must handle 0.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTIwMTY0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxODowOFrOG2u_HQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozMjo0M1rOG2xuAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NjEwOQ==", "bodyText": "Maybe extract to hasCheckedCards() or similar", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460046109", "createdAt": "2020-07-24T13:18:08Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1051,13 +1053,13 @@ public void onClick(DialogInterface dialog, int which) {\n \n             case R.id.action_preview: {\n                 Intent previewer = new Intent(CardBrowser.this, Previewer.class);\n-                if (mInMultiSelectMode && mCheckedCardPositions.size() > 1) {\n+                if (mInMultiSelectMode && mCheckedCards.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3NzY4NQ==", "bodyText": "I don't see the point. There is a single instance.\nFurthermore, we are checking whether they are at least two checked cards. The name would not make it clear", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460077685", "createdAt": "2020-07-24T14:12:10Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1051,13 +1053,13 @@ public void onClick(DialogInterface dialog, int which) {\n \n             case R.id.action_preview: {\n                 Intent previewer = new Intent(CardBrowser.this, Previewer.class);\n-                if (mInMultiSelectMode && mCheckedCardPositions.size() > 1) {\n+                if (mInMultiSelectMode && mCheckedCards.size() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NjEwOQ=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MDg4Mg==", "bodyText": "Damn, you're right", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460090882", "createdAt": "2020-07-24T14:32:43Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1051,13 +1053,13 @@ public void onClick(DialogInterface dialog, int which) {\n \n             case R.id.action_preview: {\n                 Intent previewer = new Intent(CardBrowser.this, Previewer.class);\n-                if (mInMultiSelectMode && mCheckedCardPositions.size() > 1) {\n+                if (mInMultiSelectMode && mCheckedCards.size() > 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NjEwOQ=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTIwMzA1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxODozN1rOG2vACw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoxMzoxMlrOG2w88g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NjM0Nw==", "bodyText": "nit\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                int startIndex = mCheckedCards.isEmpty() ? 0: mCheckedCards.iterator().next().getPosition();\n          \n          \n            \n                                int startIndex = mCheckedCards.isEmpty() ? 0 : mCheckedCards.iterator().next().getPosition();", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460046347", "createdAt": "2020-07-24T13:18:37Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1051,13 +1053,13 @@ public void onClick(DialogInterface dialog, int which) {\n \n             case R.id.action_preview: {\n                 Intent previewer = new Intent(CardBrowser.this, Previewer.class);\n-                if (mInMultiSelectMode && mCheckedCardPositions.size() > 1) {\n+                if (mInMultiSelectMode && mCheckedCards.size() > 1) {\n                     // Multiple cards have been explicitly selected, so preview only those cards\n                     previewer.putExtra(\"index\", 0);\n                     previewer.putExtra(\"cardList\", getSelectedCardIds());\n                 } else {\n                     // Preview all cards, starting from the one that is currently selected\n-                    int startIndex = mCheckedCardPositions.isEmpty() ? 0: mCheckedCardPositions.iterator().next();\n+                    int startIndex = mCheckedCards.isEmpty() ? 0: mCheckedCards.iterator().next().getPosition();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3ODMyMg==", "bodyText": "Right....\nto be honest, I don't usually check the syntax of the code I didn't change. In this case, the 0: was already here previously", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460078322", "createdAt": "2020-07-24T14:13:12Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1051,13 +1053,13 @@ public void onClick(DialogInterface dialog, int which) {\n \n             case R.id.action_preview: {\n                 Intent previewer = new Intent(CardBrowser.this, Previewer.class);\n-                if (mInMultiSelectMode && mCheckedCardPositions.size() > 1) {\n+                if (mInMultiSelectMode && mCheckedCards.size() > 1) {\n                     // Multiple cards have been explicitly selected, so preview only those cards\n                     previewer.putExtra(\"index\", 0);\n                     previewer.putExtra(\"cardList\", getSelectedCardIds());\n                 } else {\n                     // Preview all cards, starting from the one that is currently selected\n-                    int startIndex = mCheckedCardPositions.isEmpty() ? 0: mCheckedCardPositions.iterator().next();\n+                    int startIndex = mCheckedCards.isEmpty() ? 0: mCheckedCards.iterator().next().getPosition();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NjM0Nw=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTIwNTQ5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxOToyMFrOG2vBlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoxOToyMFrOG2vBlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0Njc0Mw==", "bodyText": "``\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        mActionBarTitle.setText(Integer.toString(mCheckedCards.size()));\n          \n          \n            \n                        mActionBarTitle.setText(Integer.toString(checkedCardCount()));", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460046743", "createdAt": "2020-07-24T13:19:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2105,13 +1990,13 @@ private void onSelectionChanged() {\n             }\n \n             updateMultiselectMenu();\n-            mActionBarTitle.setText(Integer.toString(mCheckedCardPositions.size()));\n+            mActionBarTitle.setText(Integer.toString(mCheckedCards.size()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 580}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTIxMDA0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoyMDoyOVrOG2vEPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDozMzoyNlrOG2xv0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NzQyMw==", "bodyText": "@Nullable", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460047423", "createdAt": "2020-07-24T13:20:29Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2121,11 +2006,206 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public static class CardCache {\n+        private long mId;\n+        private Collection mCol;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, Collection col, int position) {\n+            mId = id;\n+            mCol = col;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = mCol.getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().userFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String getColumnText(Column key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 665}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA3OTI0Mw==", "bodyText": "Are you sure ?\u00a0In theory, it should never return nulls. It occurs only if the theoretical case where no element of switch is satisfied and the default occurs. Normally, that should not occurs", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460079243", "createdAt": "2020-07-24T14:14:41Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2121,11 +2006,206 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public static class CardCache {\n+        private long mId;\n+        private Collection mCol;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, Collection col, int position) {\n+            mId = id;\n+            mCol = col;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = mCol.getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().userFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String getColumnText(Column key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NzQyMw=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 665}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA5MTM0NA==", "bodyText": "Hmm... that's difficult. Let's leave it as it is", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460091344", "createdAt": "2020-07-24T14:33:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -2121,11 +2006,206 @@ private void onSelectionChanged() {\n     private long[] getAllCardIds() {\n         long[] l = new long[mCards.size()];\n         for (int i = 0; i < mCards.size(); i++) {\n-            l[i] = Long.parseLong(mCards.get(i).get(ID));\n+            l[i] = mCards.get(i).getId();\n         }\n         return l;\n     }\n \n+    public static class CardCache {\n+        private long mId;\n+        private Collection mCol;\n+        private Card mCard = null;\n+        private boolean mLoaded = false;\n+        private Pair<String, String> mQa = null;\n+        private int mPosition;\n+\n+        public CardCache(long id, Collection col, int position) {\n+            mId = id;\n+            mCol = col;\n+            mPosition = position;\n+        }\n+\n+        public long getId() {\n+            return mId;\n+        }\n+\n+        public int getPosition() {\n+            return mPosition;\n+        }\n+\n+        /** clear all values except ID.*/\n+        public void reload() {\n+            mCard = null;\n+            mLoaded = false;\n+            mQa = null;\n+        }\n+\n+        public Card getCard() {\n+            if (mCard == null) {\n+                mCard = mCol.getCard(mId);\n+            }\n+            return mCard;\n+        }\n+\n+        /**\n+         * Get the background color of items in the card list based on the Card\n+         * @return index into TypedArray specifying the background color\n+         */\n+        private int getColor() {\n+            int flag = getCard().userFlag();\n+            switch (flag) {\n+                case 1:\n+                    return R.attr.flagRed;\n+                case 2:\n+                    return R.attr.flagOrange;\n+                case 3:\n+                    return R.attr.flagGreen;\n+                case 4:\n+                    return R.attr.flagBlue;\n+                default:\n+                    if (getCard().note().hasTag(\"marked\")) {\n+                        return R.attr.markedColor;\n+                    } else {\n+                        if (getCard().getQueue() == Consts.QUEUE_TYPE_SUSPENDED) {\n+                            return R.attr.suspendedColor;\n+                        } else {\n+                            return android.R.attr.colorBackground;\n+                        }\n+                    }\n+            }\n+        }\n+\n+        public String getColumnText(Column key) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA0NzQyMw=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 665}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTIzNDYyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxMzoyNzoyNFrOG2vTHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNDoyODowM1rOG2xiWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MTIyOA==", "bodyText": "Having CardCache contain position can lead to bugs, as removing or adding from the list will cause inconsistent data. Is there a way to have the data structure keep track of this?", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460051228", "createdAt": "2020-07-24T13:27:24Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -968,17 +968,19 @@ private TaskData doInBackgroundSearchCards(TaskData... params) {\n         String query = (String) params[0].getObjArray()[0];\n         Boolean order = (Boolean) params[0].getObjArray()[1];\n         int numCardsToRender = (int) params[0].getObjArray()[2];\n-        List<Long> searchResult_ = col.findCards(query, order, this);\n         if (isCancelled()) {\n             Timber.d(\"doInBackgroundSearchCards was cancelled so return null\");\n             return null;\n         }\n+        int column1Index = (Integer) params[0].getObjArray()[3];\n+        int column2Index = (Integer) params[0].getObjArray()[4];\n+        List<Long> searchResult_ = col.findCards(query, order, this);\n         int resultSize = searchResult_.size();\n-        List<Map<String,String>> searchResult = new ArrayList<>(resultSize);\n+        List<CardBrowser.CardCache> searchResult = new ArrayList<>(resultSize);\n         Timber.d(\"The search found %d cards\", resultSize);\n+        int position = 0;\n         for (Long cid: searchResult_) {\n-            Map<String, String> card = new HashMap<>();\n-            card.put(CardBrowser.ID, cid.toString());\n+            CardBrowser.CardCache card = new CardBrowser.CardCache(cid, col, position++);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA4Nzg5OA==", "bodyText": "The list is never modified. I added a note stating that if the list is modified, the position should be modified too.\nThe only change right now is when elements are deleted, a new list is created. I ensured that even in this card, the position are correct", "url": "https://github.com/ankidroid/Anki-Android/pull/6372#discussion_r460087898", "createdAt": "2020-07-24T14:28:03Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -968,17 +968,19 @@ private TaskData doInBackgroundSearchCards(TaskData... params) {\n         String query = (String) params[0].getObjArray()[0];\n         Boolean order = (Boolean) params[0].getObjArray()[1];\n         int numCardsToRender = (int) params[0].getObjArray()[2];\n-        List<Long> searchResult_ = col.findCards(query, order, this);\n         if (isCancelled()) {\n             Timber.d(\"doInBackgroundSearchCards was cancelled so return null\");\n             return null;\n         }\n+        int column1Index = (Integer) params[0].getObjArray()[3];\n+        int column2Index = (Integer) params[0].getObjArray()[4];\n+        List<Long> searchResult_ = col.findCards(query, order, this);\n         int resultSize = searchResult_.size();\n-        List<Map<String,String>> searchResult = new ArrayList<>(resultSize);\n+        List<CardBrowser.CardCache> searchResult = new ArrayList<>(resultSize);\n         Timber.d(\"The search found %d cards\", resultSize);\n+        int position = 0;\n         for (Long cid: searchResult_) {\n-            Map<String, String> card = new HashMap<>();\n-            card.put(CardBrowser.ID, cid.toString());\n+            CardBrowser.CardCache card = new CardBrowser.CardCache(cid, col, position++);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDA1MTIyOA=="}, "originalCommit": {"oid": "9463b840589e4645a77c1661f4dd53c75c779f0b"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 141, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}