{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0MjY2NzIy", "number": 6708, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzozOToxMlrOEQoK9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyOToxNVrOEVGQcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODcwODM4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMzozOToxMlrOG04bHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNjoxNDoxOFrOG0_kKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA==", "bodyText": "Maybe I missed it, but this strong typing would be an easy one to split into a separate PR.\nOverall, it'd be great to get the individual code changes into separate PRs, then this would just contain test changes (which would end up being a simple \"approve\" as long as the tests aren't flaky and look reasonable).", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458103580", "createdAt": "2020-07-21T13:39:12Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExMjY4Mg==", "bodyText": "#6689 ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458112682", "createdAt": "2020-07-21T13:51:27Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNTEzOQ==", "bodyText": "I put most changes outside of tests in separate PR already. The few exceptions are the one which makes really little sens, such as utils function which are used only in tests. Adding a util function without using it would made for a strange PR.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458115139", "createdAt": "2020-07-21T13:54:42Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODExNzYyNQ==", "bodyText": "and look reasonable\n\nAre you really looking forward reading 6000 lines of tests ? I wish you good luck. As you may understand by looking at my commits, I automated most of my changes, I would not have been able to read 6000 lines of code in a week-end ! I fear that you are going to spend far too much time ensuring they all looks reasonable.\nMy suggestion would be to accept them as long as they run, and if at some point we get a problem, check whether it's a unit test error or a code error.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458117625", "createdAt": "2020-07-21T13:57:53Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNzExNw==", "bodyText": "#6689 ?\n\nMissed that! That's why a quick breakdown of PRs that we need is a good thing.\nI've done massive PRs before. It's never ideal, but in this case, it won't be too problematic as long as it's confined to a single file.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458207117", "createdAt": "2020-07-21T15:55:14Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxMDAwMw==", "bodyText": "I am sorry, there are multiple files. I decided to split unit test and follow upstream file. So there are different files for importing, exporting, model, deck, collection, card...\nI still hope that's going to be okay. It's not like splitting the test in multiple PR will help in any way I believe.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458210003", "createdAt": "2020-07-21T15:59:10Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIxMjE0MA==", "bodyText": "Let's see what it's like when we've cut down the big PRs, I'm not expecting that there'll be too much hassle.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458212140", "createdAt": "2020-07-21T16:02:14Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyMDU4Nw==", "bodyText": "Anyway, if AnkiDroid's team want upstream unit test, I don't even see how I could do anything else than a massive PR. Porting unit test manually from upstream would be a huge work. I can't imagine any way to do it efficiently, in only a week-end, which does not require to do a lot of batch processing.\nthere are 97 new tests, I can't imagine that we would consider doing 97 PRs", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r458220587", "createdAt": "2020-07-21T16:14:18Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/anki/tests/ContentProviderTest.java", "diffHunk": "@@ -511,7 +513,7 @@ public void testInsertAndUpdateModel() {\n             // Delete the model (this will force a full-sync)\n             col.modSchemaNoCheck();\n             try {\n-                JSONObject model = col.getModels().get(mid);\n+                Model model = col.getModels().get(mid);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEwMzU4MA=="}, "originalCommit": {"oid": "9d12079cb749bd65f3323e3d99fe3a7e39c69cfa"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTgyMzE3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/CollectionUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo1OTozNVrOG209Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo1OTozNVrOG209Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0Mzg5OA==", "bodyText": "Could you mark that this throws if empty", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460143898", "createdAt": "2020-07-24T15:59:35Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/CollectionUtils.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.ichi2.libanki;\n+\n+import java.util.Collection;\n+import java.util.List;\n+\n+public class CollectionUtils {\n+    public static <T> T getLastListElement(List<T> l) {\n+        return l.get(l.size()-1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTgyNDQ4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/CollectionUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNTo1OTo1NlrOG2095g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjoyNjoxMlrOG212JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDEwMg==", "bodyText": "We have a few utils packages already, would be better in there", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460144102", "createdAt": "2020-07-24T15:59:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/CollectionUtils.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.ichi2.libanki;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NDgxNw==", "bodyText": "Which one please ? I didn't see one where it makes really sens", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460154817", "createdAt": "2020-07-24T16:19:03Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/CollectionUtils.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.ichi2.libanki;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDEwMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1ODUwMA==", "bodyText": "com.ichi2.utils", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460158500", "createdAt": "2020-07-24T16:26:12Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/CollectionUtils.java", "diffHunk": "@@ -0,0 +1,10 @@\n+package com.ichi2.libanki;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDEwMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTgyODk4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowMTowNFrOG21AnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0MDozMlrOG22T0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDc5Ng==", "bodyText": "This one might be better as a PR", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460144796", "createdAt": "2020-07-24T16:01:04Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -145,6 +148,12 @@\n     public abstract void maybeRandomizeDeck();\n     public abstract void maybeRandomizeDeck(Long did);\n     public abstract boolean haveBuried(long did);\n+    public enum UnburyType {\n+        ALL,\n+        MANUAL,\n+        SIBLINGS;\n+    }\n+    public abstract void unburyCardsForDeck(UnburyType type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NDg4OA==", "bodyText": "Ok", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460154888", "createdAt": "2020-07-24T16:19:12Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -145,6 +148,12 @@\n     public abstract void maybeRandomizeDeck();\n     public abstract void maybeRandomizeDeck(Long did);\n     public abstract boolean haveBuried(long did);\n+    public enum UnburyType {\n+        ALL,\n+        MANUAL,\n+        SIBLINGS;\n+    }\n+    public abstract void unburyCardsForDeck(UnburyType type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDc5Ng=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NjA5Ng==", "bodyText": "#6734", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460166096", "createdAt": "2020-07-24T16:40:32Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -145,6 +148,12 @@\n     public abstract void maybeRandomizeDeck();\n     public abstract void maybeRandomizeDeck(Long did);\n     public abstract boolean haveBuried(long did);\n+    public enum UnburyType {\n+        ALL,\n+        MANUAL,\n+        SIBLINGS;\n+    }\n+    public abstract void unburyCardsForDeck(UnburyType type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NDc5Ng=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTgzMTAxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowMTozNlrOG21B4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo0NToxN1rOG26ELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTEyMg==", "bodyText": "Mention that these were autogenerated, and the commit hash", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460145122", "createdAt": "2020-07-24T16:01:36Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1NTAzMA==", "bodyText": "I don't understand this remark", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460155030", "createdAt": "2020-07-24T16:19:28Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTEyMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE1OTY1Ng==", "bodyText": "Something along the lines of: \"autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\"", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460159656", "createdAt": "2020-07-24T16:28:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTEyMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2Mjg3MA==", "bodyText": "Should I add it to all files ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460162870", "createdAt": "2020-07-24T16:34:41Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTEyMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NDI2OA==", "bodyText": "Yeah, it'd be sensible", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460164268", "createdAt": "2020-07-24T16:37:14Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTEyMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNzYyOA==", "bodyText": "Done. Note sure about whether \"autogenerated\" is the truth, given the amount of manual work to create the macros doing this change, but I\u00a0guess it's mostly a theoretical question", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460227628", "createdAt": "2020-07-24T18:45:17Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTEyMg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTgzNDYyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowMjozNlrOG21EOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjozMjo1NFrOG22DfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTcyMQ==", "bodyText": "assertThat(d.addNote(f), greaterThan(0))", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460145721", "createdAt": "2020-07-24T16:02:36Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "diffHunk": "@@ -37,7 +38,7 @@ public void testCloze() {\n         }\n         // a cloze model with no clozes is not empty\n         f.setItem(\"Text\", \"nothing\");\n-        assertTrue(d.addNote(f) > 0);\n+        assertNotEquals(0, d.addNote(f));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MTkxNg==", "bodyText": "Thanks. Didn't know that", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460161916", "createdAt": "2020-07-24T16:32:54Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "diffHunk": "@@ -37,7 +38,7 @@ public void testCloze() {\n         }\n         // a cloze model with no clozes is not empty\n         f.setItem(\"Text\", \"nothing\");\n-        assertTrue(d.addNote(f) > 0);\n+        assertNotEquals(0, d.addNote(f));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NTcyMQ=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg0MjgxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowNDo1NlrOG21JQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo0MDo0NFrOG258Zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzAxMA==", "bodyText": "Does this mean it's broken? Could do with elaboration", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460147010", "createdAt": "2020-07-24T16:04:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MTg3Mw==", "bodyText": "I don't know what it means, so I don't know whether it's broken or what it means. So I left it for later consideration", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460161873", "createdAt": "2020-07-24T16:32:46Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzAxMA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTYzOQ==", "bodyText": "csum is a hash used to deduplicate notes - maybe on the AnkiWeb side for mass analytics.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460225639", "createdAt": "2020-07-24T18:40:44Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzAxMA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg0NDU0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowNToyNVrOG21KfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo1NDoxM1rOG26Tzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzMyNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    note.setItem(\"Front\",\"1\");\n          \n          \n            \n                    note.setItem(\"Front\", \"1\");", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460147324", "createdAt": "2020-07-24T16:05:25Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*\n+     ******************/\n+    \n+    @Test\n+    public void test_delete(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        long cid = note.cards().get(0).getId();\n+        col.reset();\n+        col.getSched().answerCard(col.getSched().getCard(), 2);\n+        col.remCards(Arrays.asList(new Long [] {cid}));\n+        assertEquals(0, col.cardCount());\n+        assertEquals(0, col.noteCount());\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from notes\"));\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from cards\"));\n+        assertEquals(2, col.getDb().queryScalar(\"select count() from graves\"));\n+    }\n+\n+    @Test\n+    public void test_misc_cards(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MTU4MA==", "bodyText": "Is there a tool to automate our style ?\nI really wish not to re read those 6k lines to check every line's syntax", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460161580", "createdAt": "2020-07-24T16:32:06Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*\n+     ******************/\n+    \n+    @Test\n+    public void test_delete(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        long cid = note.cards().get(0).getId();\n+        col.reset();\n+        col.getSched().answerCard(col.getSched().getCard(), 2);\n+        col.remCards(Arrays.asList(new Long [] {cid}));\n+        assertEquals(0, col.cardCount());\n+        assertEquals(0, col.noteCount());\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from notes\"));\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from cards\"));\n+        assertEquals(2, col.getDb().queryScalar(\"select count() from graves\"));\n+    }\n+\n+    @Test\n+    public void test_misc_cards(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzMyNA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NDYxMw==", "bodyText": "I'll be doing it - setItem was the first that I saw\nThere's auto formatting in Android Studio", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460164613", "createdAt": "2020-07-24T16:37:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*\n+     ******************/\n+    \n+    @Test\n+    public void test_delete(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        long cid = note.cards().get(0).getId();\n+        col.reset();\n+        col.getSched().answerCard(col.getSched().getCard(), 2);\n+        col.remCards(Arrays.asList(new Long [] {cid}));\n+        assertEquals(0, col.cardCount());\n+        assertEquals(0, col.noteCount());\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from notes\"));\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from cards\"));\n+        assertEquals(2, col.getDb().queryScalar(\"select count() from graves\"));\n+    }\n+\n+    @Test\n+    public void test_misc_cards(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzMyNA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTYzMA==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460231630", "createdAt": "2020-07-24T18:54:13Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CardTest.java", "diffHunk": "@@ -0,0 +1,146 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CardTest extends RobolectricTest {\n+    /******************\n+     ** Upstream tests*\n+     ******************/\n+    \n+    @Test\n+    public void test_delete(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        long cid = note.cards().get(0).getId();\n+        col.reset();\n+        col.getSched().answerCard(col.getSched().getCard(), 2);\n+        col.remCards(Arrays.asList(new Long [] {cid}));\n+        assertEquals(0, col.cardCount());\n+        assertEquals(0, col.noteCount());\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from notes\"));\n+        assertEquals(0, col.getDb().queryScalar(\"select count() from cards\"));\n+        assertEquals(2, col.getDb().queryScalar(\"select count() from graves\"));\n+    }\n+\n+    @Test\n+    public void test_misc_cards(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzMyNA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg0NzUyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowNjoxM1rOG21MWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo1NDoxMFrOG26Tug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzgwMA==", "bodyText": "This is a feature that we need to implement - the new style of media that Rust uses", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460147800", "createdAt": "2020-07-24T16:06:13Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2ODE2MA==", "bodyText": "What do you want me to do about it right now ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460168160", "createdAt": "2020-07-24T16:44:14Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzgwMA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTgzNw==", "bodyText": "Just explain what it is, and say that it's pending the rust translation", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460225837", "createdAt": "2020-07-24T18:41:12Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzgwMA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTYxMA==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460231610", "createdAt": "2020-07-24T18:54:10Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0NzgwMA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg1MTc1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowNzoxOVrOG21O9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0NTo0OFrOG22fFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0ODQ2OA==", "bodyText": "This can go - we use a different translation mechanism", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460148468", "createdAt": "2020-07-24T16:07:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")\n+    public void test_furigana(){\n+        Collection col = getCol();\n+        Models mm = col.getModels();\n+        Model m = mm.current();\n+        // filter should work\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{kana:Front}}\");\n+        mm.save(m);\n+        Note n = col.newNote();\n+        n.setItem(\"Front\", \"foo[abc]\");\n+        col.addNote(n);\n+        Card c = n.cards().get(0);\n+        assertTrue(c.q().endsWith(\"abc\"));\n+        // and should avoid sound\n+        n.setItem(\"Front\", \"foo[sound:abc.mp3]\");\n+        n.flush();\n+        String question = c.q(true);\n+        assertTrue(\"Question \u00ab\" + question +\"\u00bb does not contains \u00abanki:play\u00bb.\", question.contains(\"anki:play\"));\n+        // it shouldn't throw an error while people are editing\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{kana:}}\");\n+        mm.save(m);\n+        c.q(true);\n+    }\n+\n+    /*\n+      @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2ODg5OQ==", "bodyText": "Removed", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460168899", "createdAt": "2020-07-24T16:45:39Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")\n+    public void test_furigana(){\n+        Collection col = getCol();\n+        Models mm = col.getModels();\n+        Model m = mm.current();\n+        // filter should work\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{kana:Front}}\");\n+        mm.save(m);\n+        Note n = col.newNote();\n+        n.setItem(\"Front\", \"foo[abc]\");\n+        col.addNote(n);\n+        Card c = n.cards().get(0);\n+        assertTrue(c.q().endsWith(\"abc\"));\n+        // and should avoid sound\n+        n.setItem(\"Front\", \"foo[sound:abc.mp3]\");\n+        n.flush();\n+        String question = c.q(true);\n+        assertTrue(\"Question \u00ab\" + question +\"\u00bb does not contains \u00abanki:play\u00bb.\", question.contains(\"anki:play\"));\n+        // it shouldn't throw an error while people are editing\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{kana:}}\");\n+        mm.save(m);\n+        c.q(true);\n+    }\n+\n+    /*\n+      @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0ODQ2OA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2ODk4MA==", "bodyText": "Removed", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460168980", "createdAt": "2020-07-24T16:45:48Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/CollectionTest.java", "diffHunk": "@@ -0,0 +1,230 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class CollectionTest extends RobolectricTest {\n+\n+    /*******************\n+     ** Upstream tests *\n+     *******************/\n+\n+    /*TODO\n+      @Test\n+      public void test_create_open(){\n+      (fd, path) = tempfile.mkstemp(suffix=\".anki2\", prefix=\"test_attachNew\");\n+      try {\n+      os.close(fd);\n+      os.unlink(path);\n+      } catch (OSError) {\n+      }\n+      Collection col = aopen(path);\n+      // for open()\n+      String newPath = col.getPath();\n+      long newMod = col.getMod();\n+      col.close();\n+\n+      // reopen\n+      col = aopen(newPath);\n+      assertEquals(newMod, col.getMod());\n+      col.close();\n+\n+      // non-writeable dir\n+      if (isWin) {\n+      String dir = \"c:\\root.anki2\";\n+      } else {\n+      String dir = \"/attachroot.anki2\";\n+      }\n+      assertException(Exception, lambda: aopen(dir));\n+      // reuse tmp file from before, test non-writeable file\n+      os.chmod(newPath, 0);\n+      assertException(Exception, lambda: aopen(newPath));\n+      os.chmod(newPath, 0o666);\n+      os.unlink(newPath);\n+      } */\n+\n+    @Test\n+    public void test_noteAddDelete(){\n+        Collection col = getCol();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"one\");\n+        note.setItem(\"Back\",\"two\");\n+        int n = col.addNote(note);\n+        assertEquals(1, n);\n+        // test multiple cards - add another template\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m, true); // todo:\u00a0remove true which is not upstream\n+        assertEquals(2, col.cardCount());\n+        // creating new notes should use both cards\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"three\");\n+        note.setItem(\"Back\",\"four\");\n+        n = col.addNote(note);\n+        assertEquals(2, n);\n+        assertEquals(4, col.cardCount());\n+        // check q/a generation\n+        Card c0 = note.cards().get(0);\n+        assertTrue(c0.q().contains(\"three\"));\n+        // it should not be a duplicate\n+        assertEquals(note.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // now let's make a duplicate\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"one\");\n+        note2.setItem(\"Back\",\"\");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+        // empty first field should not be permitted either\n+        note2.setItem(\"Front\",\" \");\n+        assertNotEquals(note2.dupeOrEmpty(), Note.DupeOrEmpty.CORRECT);\n+    }\n+\n+    @Test\n+    @Ignore(\"I don't understand this csum\")\n+    public void test_fieldChecksum(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"new\");\n+        note.setItem(\"Back\",\"new2\");\n+        col.addNote(note);\n+        assertEquals(0xc2a6b03f, col.getDb().queryLongScalar(\"select csum from notes\"));\n+        // changing the val should change the checksum\n+        note.setItem(\"Front\",\"newx\");\n+        note.flush();\n+        assertEquals(0x302811ae, col.getDb().queryLongScalar(\"select csum from notes\"));\n+    }\n+\n+    @Test\n+    public void test_addDelTags(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        col.addNote(note);\n+        Note note2 = col.newNote();\n+        note2.setItem(\"Front\",\"2\");\n+        col.addNote(note2);\n+        // adding for a given id\n+        col.getTags().bulkAdd(Arrays.asList(new Long[] {note.getId()}), \"foo\");\n+        note.load();\n+        note2.load();\n+        assertTrue(note.getTags().contains(\"foo\"));\n+        assertFalse(note2.getTags().contains(\"foo\"));\n+        // should be canonified\n+        col.getTags().bulkAdd(Arrays.asList(new Long [] {note.getId()}), \"foo aaa\");\n+        note.load();\n+        assertEquals(\"aaa\", note.getTags().get(0));\n+        assertEquals(2, note.getTags().size());\n+    }\n+\n+    @Test\n+    public void test_timestamps(){\n+        Collection col = getCol();\n+        int stdModelSize = StdModels.stdModels.length;\n+        assertEquals(col.getModels().all().size(), stdModelSize);\n+        for (int i = 0; i < 100; i++) {\n+            StdModels.basicModel.add(col);\n+        }\n+        assertEquals(col.getModels().all().size(), 100 + stdModelSize);\n+    }\n+\n+    @Test\n+    @Ignore(\"What is anki:play\")\n+    public void test_furigana(){\n+        Collection col = getCol();\n+        Models mm = col.getModels();\n+        Model m = mm.current();\n+        // filter should work\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{kana:Front}}\");\n+        mm.save(m);\n+        Note n = col.newNote();\n+        n.setItem(\"Front\", \"foo[abc]\");\n+        col.addNote(n);\n+        Card c = n.cards().get(0);\n+        assertTrue(c.q().endsWith(\"abc\"));\n+        // and should avoid sound\n+        n.setItem(\"Front\", \"foo[sound:abc.mp3]\");\n+        n.flush();\n+        String question = c.q(true);\n+        assertTrue(\"Question \u00ab\" + question +\"\u00bb does not contains \u00abanki:play\u00bb.\", question.contains(\"anki:play\"));\n+        // it shouldn't throw an error while people are editing\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{kana:}}\");\n+        mm.save(m);\n+        c.q(true);\n+    }\n+\n+    /*\n+      @Test", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0ODQ2OA=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 203}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg1NTk3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowODozN1rOG21RtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODo0NzoxOFrOG26H2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTE3Mg==", "bodyText": "let's get rid of this", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460149172", "createdAt": "2020-07-24T16:08:37Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MDUxNw==", "bodyText": "if there is no test in a file, the test fail. Do you want me to remove the file entirely ? I was expecting that it's still useful to have at least a part of the work done in the repo, even if the test is not running currently", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460160517", "createdAt": "2020-07-24T16:30:11Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTE3Mg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTk1Ng==", "bodyText": "Ah... just a comment should do", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460225956", "createdAt": "2020-07-24T18:41:28Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTE3Mg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyODU2OA==", "bodyText": "I added a comment explaining why I added the method. Hope it's okay", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460228568", "createdAt": "2020-07-24T18:47:18Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTE3Mg=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MTg1NzE3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjowODo1NlrOG21Saw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNjo0Njo0MFrOG22g-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTM1NQ==", "bodyText": "We should flag this one as one we should get working", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460149355", "createdAt": "2020-07-24T16:08:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }\n+\n+\n+    /* TODO\n+       @Test\n+       public void test_export_anki(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2MDc3NA==", "bodyText": "How do I flag something to indicate work should be done ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460160774", "createdAt": "2020-07-24T16:30:35Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }\n+\n+\n+    /* TODO\n+       @Test\n+       public void test_export_anki(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTM1NQ=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2NjEyNw==", "bodyText": "If we're not going to get it done in this PR, then a GitHub issue with a checklist, otherwise it can go in the main post", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460166127", "createdAt": "2020-07-24T16:40:35Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }\n+\n+\n+    /* TODO\n+       @Test\n+       public void test_export_anki(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTM1NQ=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE2OTQ2NQ==", "bodyText": "I don't expect to do it in this PR. I would prefer to see it merged; there are already quite enough interesting things in it I believe", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460169465", "createdAt": "2020-07-24T16:46:40Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,209 @@\n+package com.ichi2.libanki;\n+\n+import android.content.res.Resources;\n+import android.database.Cursor;\n+import android.icu.util.Calendar;\n+import android.util.Pair;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.anki.exception.DeckRenameException;\n+import com.ichi2.libanki.sched.AbstractSched;\n+import com.ichi2.libanki.sched.Sched;\n+import com.ichi2.testutils.AnkiAssert;\n+import com.ichi2.utils.Assert;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.apache.http.util.Asserts;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+import timber.log.Timber;\n+\n+import static com.ichi2.libanki.CollectionUtils.getLastListElement;\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.hamcrest.MatcherAssert.*;\n+import static org.hamcrest.Matchers.*;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+     /*****************\n+      ** Exporting    *\n+      *****************/\n+    private Collection setup1(){\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"foo\");\n+        note.setItem(\"Back\",\"bar<br>\");\n+        note.setTagsFromStr(\"tag, tag2\");\n+        col.addNote(note);\n+        // with a different col\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"baz\");\n+        note.setItem(\"Back\",\"qux\");\n+        note.model().put(\"did\", col.getDecks().id(\"new col\"));\n+        col.addNote(note);\n+        return col;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////// */\n+    @Test\n+    public void empty_test() {\n+    }\n+\n+\n+    /* TODO\n+       @Test\n+       public void test_export_anki(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE0OTM1NQ=="}, "originalCommit": {"oid": "7fb841064b6dcac188793a341c1188f3fb5f468f"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA0OTA4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/MediaTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowNToyNVrOG23HLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozNTo0MFrOG25y7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3OTI0NQ==", "bodyText": "We can get this one working", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460179245", "createdAt": "2020-07-24T17:05:25Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/MediaTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MediaTest extends RobolectricTest {\n+    /*****************\n+     ** Media        *\n+     *****************/\n+    // copying files to media folder\n+    \n+    /* TODO: media\n+       @Test\n+       public void test_add(){\n+       Collection col = getCol();\n+       String dir = tempfile.mkdtemp(prefix=\"anki\");\n+       String path = os.path.join(dir, \"foo.jpg\");\n+       with open(path, \"w\") as note:\n+       note.write(\"hello\");\n+       // new file, should preserve name\n+       assertEquals(\"foo.jpg\", col.getMedia().addFile(path));\n+       // adding the same file again should not create a duplicate\n+       assertEquals(\"foo.jpg\", col.getMedia().addFile(path));\n+       // but if it has a different sha1, it should\n+       with open(path, \"w\") as note:\n+       note.write(\"world\");\n+       assertEquals(\"foo-7c211433f02071597741e6ff5a8ea34789abbf43.jpg\", col.getMedia().addFile(path));\n+       } */\n+    \n+    @Test\n+    public void test_strings(){\n+        Collection col = getCol();\n+        long mid = col.getModels().current().getLong(\"id\");\n+        assertEquals(0, col.getMedia().filesInStr(mid, \"aoeu\").size());\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src='foo.jpg'>ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src='foo.jpg' style='test'>ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\", \"bar.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src='foo.jpg'><img src=\\\"bar.jpg\\\">ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src=foo.jpg style=bar>ao\"));\n+        assertEqualsArrayList(new String [] {\"one\", \"two\"}, col.getMedia().filesInStr(mid, \"<img src=one><img src=two>\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src=\\\"foo.jpg\\\">ao\"));\n+        assertEqualsArrayList(new String[] {\"foo.jpg\", \"fo\"},\n+                              col.getMedia().filesInStr(mid, \"aoeu<img src=\\\"foo.jpg\\\"><img class=yo src=fo>ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.mp3\"}, col.getMedia().filesInStr(mid, \"aou[sound:foo.mp3]aou\"));\n+        assertEquals(\"aoeu\", col.getMedia().strip(\"aoeu\"));\n+        assertEquals(\"aoeuaoeu\", col.getMedia().strip(\"aoeu[sound:foo.mp3]aoeu\"));\n+        assertEquals(\"aoeu\", col.getMedia().strip(\"a<img src=yo>oeu\"));\n+        assertEquals(\"aoeu\", col.getMedia().escapeImages(\"aoeu\"));\n+        assertEquals(\"<img src='http://foo.com'>\", col.getMedia().escapeImages(\"<img src='http://foo.com'>\"));\n+        assertEquals(\"<img src=\\\"foo%20bar.jpg\\\">\", col.getMedia().escapeImages(\"<img src=\\\"foo bar.jpg\\\">\"));\n+    }\n+    \n+    /** TODO: file\n+        @Test\n+        public void test_deckIntegration(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMzIxNQ==", "bodyText": "Probably. I just don't know how to deal with file in AnkiDroid, so I left it for later. I don't expect it to be complex by itself", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460223215", "createdAt": "2020-07-24T18:35:40Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/MediaTest.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.testutils.AnkiAssert.assertEqualsArrayList;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class MediaTest extends RobolectricTest {\n+    /*****************\n+     ** Media        *\n+     *****************/\n+    // copying files to media folder\n+    \n+    /* TODO: media\n+       @Test\n+       public void test_add(){\n+       Collection col = getCol();\n+       String dir = tempfile.mkdtemp(prefix=\"anki\");\n+       String path = os.path.join(dir, \"foo.jpg\");\n+       with open(path, \"w\") as note:\n+       note.write(\"hello\");\n+       // new file, should preserve name\n+       assertEquals(\"foo.jpg\", col.getMedia().addFile(path));\n+       // adding the same file again should not create a duplicate\n+       assertEquals(\"foo.jpg\", col.getMedia().addFile(path));\n+       // but if it has a different sha1, it should\n+       with open(path, \"w\") as note:\n+       note.write(\"world\");\n+       assertEquals(\"foo-7c211433f02071597741e6ff5a8ea34789abbf43.jpg\", col.getMedia().addFile(path));\n+       } */\n+    \n+    @Test\n+    public void test_strings(){\n+        Collection col = getCol();\n+        long mid = col.getModels().current().getLong(\"id\");\n+        assertEquals(0, col.getMedia().filesInStr(mid, \"aoeu\").size());\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src='foo.jpg'>ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src='foo.jpg' style='test'>ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\", \"bar.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src='foo.jpg'><img src=\\\"bar.jpg\\\">ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src=foo.jpg style=bar>ao\"));\n+        assertEqualsArrayList(new String [] {\"one\", \"two\"}, col.getMedia().filesInStr(mid, \"<img src=one><img src=two>\"));\n+        assertEqualsArrayList(new String [] {\"foo.jpg\"}, col.getMedia().filesInStr(mid, \"aoeu<img src=\\\"foo.jpg\\\">ao\"));\n+        assertEqualsArrayList(new String[] {\"foo.jpg\", \"fo\"},\n+                              col.getMedia().filesInStr(mid, \"aoeu<img src=\\\"foo.jpg\\\"><img class=yo src=fo>ao\"));\n+        assertEqualsArrayList(new String [] {\"foo.mp3\"}, col.getMedia().filesInStr(mid, \"aou[sound:foo.mp3]aou\"));\n+        assertEquals(\"aoeu\", col.getMedia().strip(\"aoeu\"));\n+        assertEquals(\"aoeuaoeu\", col.getMedia().strip(\"aoeu[sound:foo.mp3]aoeu\"));\n+        assertEquals(\"aoeu\", col.getMedia().strip(\"a<img src=yo>oeu\"));\n+        assertEquals(\"aoeu\", col.getMedia().escapeImages(\"aoeu\"));\n+        assertEquals(\"<img src='http://foo.com'>\", col.getMedia().escapeImages(\"<img src='http://foo.com'>\"));\n+        assertEquals(\"<img src=\\\"foo%20bar.jpg\\\">\", col.getMedia().escapeImages(\"<img src=\\\"foo bar.jpg\\\">\"));\n+    }\n+    \n+    /** TODO: file\n+        @Test\n+        public void test_deckIntegration(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE3OTI0NQ=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA1NDQzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowNzoxM1rOG23KlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozNTo0OVrOG25zOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDExNg==", "bodyText": "Should be able to:\nassertThat(note.cards().get(0).q(), containsString(\"class=cloze\"));", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460180116", "createdAt": "2020-07-24T17:07:13Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMzI5MQ==", "bodyText": "Done for all string #6736", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460223291", "createdAt": "2020-07-24T18:35:49Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDExNg=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA1NTg4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowNzo0OVrOG23LiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxODozNTo1OFrOG25zfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDM2MQ==", "bodyText": "Hamcrest: endsWith", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460180361", "createdAt": "2020-07-24T17:07:49Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(1).q().contains(\"class=cloze\"));\n+        assertFalse(note.cards().get(2).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(3).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(4).q().contains(\"class=cloze\"));\n+        \n+        note = col.newNote();\n+        note.setItem(\"Text\",\"\\\\(a\\\\) {{c1::b}} \\\\[ {{c1::c}} \\\\]\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(1, note.numberOfCards());\n+        String question = note.cards().get(0).q();\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not end correctly\", question.endsWith(\"\\\\(a\\\\) <span class=cloze>[...]</span> \\\\[ [...] \\\\]\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 264}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyMzM1Nw==", "bodyText": "Done for all string #6736", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460223357", "createdAt": "2020-07-24T18:35:58Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(1).q().contains(\"class=cloze\"));\n+        assertFalse(note.cards().get(2).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(3).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(4).q().contains(\"class=cloze\"));\n+        \n+        note = col.newNote();\n+        note.setItem(\"Text\",\"\\\\(a\\\\) {{c1::b}} \\\\[ {{c1::c}} \\\\]\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(1, note.numberOfCards());\n+        String question = note.cards().get(0).q();\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not end correctly\", question.endsWith(\"\\\\(a\\\\) <span class=cloze>[...]</span> \\\\[ [...] \\\\]\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDM2MQ=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 264}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA1NzYzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowODoyNVrOG23MpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQyMTozODo0M1rOG50wSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDY0NQ==", "bodyText": "If you comment out the assertions, please assume false or ignore the test", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460180645", "createdAt": "2020-07-24T17:08:25Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(1).q().contains(\"class=cloze\"));\n+        assertFalse(note.cards().get(2).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(3).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(4).q().contains(\"class=cloze\"));\n+        \n+        note = col.newNote();\n+        note.setItem(\"Text\",\"\\\\(a\\\\) {{c1::b}} \\\\[ {{c1::c}} \\\\]\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(1, note.numberOfCards());\n+        String question = note.cards().get(0).q();\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not end correctly\", question.endsWith(\"\\\\(a\\\\) <span class=cloze>[...]</span> \\\\[ [...] \\\\]\"));\n+    }\n+    \n+    @Test\n+    public void test_typecloze(){\n+        Collection col = getCol();\n+        Model m = col.getModels().byName(\"Cloze\");\n+        col.getModels().setCurrent(m);\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{cloze:Text}}{{type:cloze:Text}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"[[type:cloze:Text]]\"));\n+    }\n+    \n+    @Test\n+    public void test_chained_mods() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{cloze:text:Text}}\");\n+        t.put(\"afmt\", \"{{cloze:text:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        String q1 = \"<span style=\\\"color:red\\\">phrase</span>\";\n+        String a1 = \"<b>sentence</b>\";\n+        String q2 = \"<span style=\\\"color:red\\\">en chaine</span>\";\n+        String a2 = \"<i>chained</i>\";\n+        note.setItem(\"Text\",\"This {{c1::\"+q1+\"::\"+a1+\"}} demonstrates {{c1::\"+q2+\"::\"+a2+\"}} clozes.\");\n+        assertEquals(1, col.addNote(note));\n+        String question = note.cards().get(0).q();\n+        /* TODO: chained modifier", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDI5Mw==", "bodyText": "This seems to make ne sens for me, sorry.\nI don't want to assume that they are false. They should be true. We are not differing from upstream, we should potentially correct it, but anyway it should be true, even if it's false right now.\nI don't want to ignore the test etiher, because the remaining assertion are working, and if at some point they break, I want to see a warning", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460224293", "createdAt": "2020-07-24T18:37:52Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(1).q().contains(\"class=cloze\"));\n+        assertFalse(note.cards().get(2).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(3).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(4).q().contains(\"class=cloze\"));\n+        \n+        note = col.newNote();\n+        note.setItem(\"Text\",\"\\\\(a\\\\) {{c1::b}} \\\\[ {{c1::c}} \\\\]\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(1, note.numberOfCards());\n+        String question = note.cards().get(0).q();\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not end correctly\", question.endsWith(\"\\\\(a\\\\) <span class=cloze>[...]</span> \\\\[ [...] \\\\]\"));\n+    }\n+    \n+    @Test\n+    public void test_typecloze(){\n+        Collection col = getCol();\n+        Model m = col.getModels().byName(\"Cloze\");\n+        col.getModels().setCurrent(m);\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{cloze:Text}}{{type:cloze:Text}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"[[type:cloze:Text]]\"));\n+    }\n+    \n+    @Test\n+    public void test_chained_mods() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{cloze:text:Text}}\");\n+        t.put(\"afmt\", \"{{cloze:text:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        String q1 = \"<span style=\\\"color:red\\\">phrase</span>\";\n+        String a1 = \"<b>sentence</b>\";\n+        String q2 = \"<span style=\\\"color:red\\\">en chaine</span>\";\n+        String a2 = \"<i>chained</i>\";\n+        note.setItem(\"Text\",\"This {{c1::\"+q1+\"::\"+a1+\"}} demonstrates {{c1::\"+q2+\"::\"+a2+\"}} clozes.\");\n+        assertEquals(1, col.addNote(note));\n+        String question = note.cards().get(0).q();\n+        /* TODO: chained modifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDY0NQ=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 303}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NjM0NQ==", "bodyText": "I personally treat \"ignore\" as \"inconclusive\", ignoring at a certain point in the test allows it to execute and fail if there are issues, but doesn't signify that everything's perfect. That's a flag to a developer in the future that the test is a work in progress, or waiting for some condition. @mikehardy - do we have/want rules on this?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463286345", "createdAt": "2020-07-30T21:38:43Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(1).q().contains(\"class=cloze\"));\n+        assertFalse(note.cards().get(2).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(3).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(4).q().contains(\"class=cloze\"));\n+        \n+        note = col.newNote();\n+        note.setItem(\"Text\",\"\\\\(a\\\\) {{c1::b}} \\\\[ {{c1::c}} \\\\]\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(1, note.numberOfCards());\n+        String question = note.cards().get(0).q();\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not end correctly\", question.endsWith(\"\\\\(a\\\\) <span class=cloze>[...]</span> \\\\[ [...] \\\\]\"));\n+    }\n+    \n+    @Test\n+    public void test_typecloze(){\n+        Collection col = getCol();\n+        Model m = col.getModels().byName(\"Cloze\");\n+        col.getModels().setCurrent(m);\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{cloze:Text}}{{type:cloze:Text}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"[[type:cloze:Text]]\"));\n+    }\n+    \n+    @Test\n+    public void test_chained_mods() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{cloze:text:Text}}\");\n+        t.put(\"afmt\", \"{{cloze:text:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        String q1 = \"<span style=\\\"color:red\\\">phrase</span>\";\n+        String a1 = \"<b>sentence</b>\";\n+        String q2 = \"<span style=\\\"color:red\\\">en chaine</span>\";\n+        String a2 = \"<i>chained</i>\";\n+        note.setItem(\"Text\",\"This {{c1::\"+q1+\"::\"+a1+\"}} demonstrates {{c1::\"+q2+\"::\"+a2+\"}} clozes.\");\n+        assertEquals(1, col.addNote(note));\n+        String question = note.cards().get(0).q();\n+        /* TODO: chained modifier", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MDY0NQ=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 303}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA2MDk2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowOToyNlrOG23OpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzowOToyNlrOG23OpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTE1Nw==", "bodyText": "TODO: me - Can be improved by hamcrest", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460181157", "createdAt": "2020-07-24T17:09:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ModelTest.java", "diffHunk": "@@ -0,0 +1,450 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.utils.JSONArray;\n+import com.ichi2.utils.JSONObject;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.*;\n+import static com.ichi2.libanki.Utils.intTime;\n+import static com.ichi2.libanki.Utils.stripHTML;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertThrows;\n+import static org.junit.Assert.assertTrue;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ModelTest extends RobolectricTest {\n+    /*****************\n+     ** Models       *\n+     *****************/\n+    \n+    @Test\n+    public void test_modelDelete() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(1, col.cardCount());\n+        col.getModels().rem(col.getModels().current());\n+        assertEquals(0, col.cardCount());\n+    }\n+    \n+    @Test\n+    public void test_modelCopy(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Model m2 = col.getModels().copy(m);\n+        assertEquals(\"Basic copy\", m2.getString(\"name\"));\n+        assertNotEquals(m2.getLong(\"id\"), m.getLong(\"id\"));\n+        assertEquals(2, m2.getJSONArray(\"flds\").length());\n+        assertEquals(2, m.getJSONArray(\"flds\").length());\n+        assertEquals(m.getJSONArray(\"flds\").length(), m2.getJSONArray(\"flds\").length());\n+        assertEquals(1, m.getJSONArray(\"tmpls\").length());\n+        assertEquals(1, m2.getJSONArray(\"tmpls\").length());\n+        assertEquals(col.getModels().scmhash(m), col.getModels().scmhash(m2));\n+    }\n+    \n+    @Test\n+    public void test_fields() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        Model m = col.getModels().current();\n+        // make sure renaming a field updates the templates\n+        col.getModels().renameField(m, m.getJSONArray(\"flds\").getJSONObject(0), \"NewFront\");\n+        assertTrue(m.getJSONArray(\"tmpls\").getJSONObject(0).getString(\"qfmt\").contains(\"{{NewFront}}\"));\n+        String h = col.getModels().scmhash(m);\n+        // add a field\n+        JSONObject field = col.getModels().newField(\"foo\");\n+        col.getModels().addField(m, field);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        assertNotEquals(h, col.getModels().scmhash(m));\n+        // rename it\n+        field = m.getJSONArray(\"flds\").getJSONObject(2);\n+        col.getModels().renameField(m, field, \"bar\");\n+        assertEquals(\"\", col.getNote(col.getModels().nids(m).get(0)).getItem(\"bar\"));\n+        // delete back\n+        col.getModels().remField(m, m.getJSONArray(\"flds\").getJSONObject(1));\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 1 -> 0\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(1), 0);\n+        assertArrayEquals(new String [] {\"1\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // add another and put in middle\n+        field = col.getModels().newField(\"baz\");\n+        col.getModels().addField(m, field);\n+        note = col.getNote(col.getModels().nids(m).get(0));\n+        note.setItem(\"baz\",\"2\");\n+        note.flush();\n+        assertArrayEquals(new String [] {\"1\", \"\", \"2\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 2 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(2), 1);\n+        assertArrayEquals(new String [] {\"1\", \"2\", \"\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 2\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 2);\n+        assertArrayEquals(new String [] {\"2\", \"\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+        // move 0 -> 1\n+        col.getModels().moveField(m, m.getJSONArray(\"flds\").getJSONObject(0), 1);\n+        assertArrayEquals(new String [] {\"\", \"2\", \"1\"}, col.getNote(col.getModels().nids(m).get(0)).getFields());\n+    }\n+    \n+    @Test\n+    public void test_templates() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"1\");\n+        note.setItem(\"Back\",\"2\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+        // switch templates\n+        col.getModels().moveTemplate(m, c.template(), 1);\n+        c.load();\n+        c2.load();\n+        assertEquals(1, c.getOrd());\n+        assertEquals(0, c2.getOrd());\n+        // removing a template should delete its cards\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(1, col.cardCount());\n+        // and should have updated the other cards' ordinals\n+        c = note.cards().get(0);\n+        assertEquals(0, c.getOrd());\n+        assertEquals(\"1\", stripHTML(c.q()));\n+        // it shouldn't be possible to orphan notes by removing templates\n+        t = mm.newTemplate(\"template name\");\n+        mm.addTemplateModChanged(m, t);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        assertEquals(0,\n+                     col.getDb().queryLongScalar(\n+                                                 \"select count() from cards where nid not in (select id from notes)\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze_ordinals() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{text:cloze:Text}}\");\n+        t.put(\"afmt\", \"{{text:cloze:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"{{c1::firstQ::firstA}}{{c2::secondQ::secondA}}\");\n+        col.addNote(note);\n+        assertEquals(2, col.cardCount());\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c = cards.get(0);\n+        Card c2 = cards.get(1);\n+        // first card should have first ord\n+        assertEquals(0, c.getOrd());\n+        assertEquals(1, c2.getOrd());\n+    }\n+    \n+    @Test\n+    public void test_text(){\n+        Collection col = getCol();\n+        Model m = col.getModels().current();\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{text:Front}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"hello<b>world\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"helloworld\"));\n+    }\n+    \n+    @Test\n+    public void test_cloze(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        assertEquals(\"Cloze\", note.model().getString(\"name\"));\n+        // a cloze model with no clozes is not empty\n+        note.setItem(\"Text\",\"nothing\");\n+        assertNotEquals(0, col.addNote(note));\n+        // try with one cloze\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"hello <span class=cloze>[...]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"hello <span class=cloze>world</span>\"));\n+        // and with a comment\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world::typical}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).q().contains(\"<span class=cloze>[typical]</span>\"));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>world</span>\"));\n+        // and with 2 clozes\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}} {{c2::bar}}\");\n+        assertEquals(2, col.addNote(note));\n+        List<Card> cards =  note.cards();\n+        assertEquals(2, cards.size());\n+        Card c1 = cards.get(0);\n+        Card c2 = cards.get(1);\n+        assertTrue(c1.q().contains(\"<span class=cloze>[...]</span> bar\"));\n+        assertTrue(c1.a().contains(\"<span class=cloze>world</span> bar\"));\n+        assertTrue(c2.q().contains(\"world <span class=cloze>[...]</span>\"));\n+        assertTrue(c2.a().contains(\"world <span class=cloze>bar</span>\"));\n+        // if there are multiple answers for a single cloze, they are given in a\n+        // list\n+        note = col.newNote();\n+        note.setItem(\"Text\",\"a {{c1::b}} {{c1::c}}\");\n+        assertEquals(1, col.addNote(note));\n+        assertTrue(note.cards().get(0).a().contains(\"<span class=cloze>b</span> <span class=cloze>c</span>\"));\n+        // if we add another cloze, a card should be generated\n+        int cnt = col.cardCount();\n+        note.setItem(\"Text\",\"{{c2::hello}} {{c1::foo}}\");\n+        note.flush();\n+        assertEquals(cnt + 1, col.cardCount());\n+        // 0 or negative indices are not supported\n+        note.setItem(\"Text\",\"{{c0::zero}} {{c-1:foo}}\");\n+        note.flush();\n+        assertEquals(2, note.numberOfCards());\n+    }\n+    \n+    @Test\n+    public void test_cloze_mathjax(){\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Note note = col.newNote();\n+        note.setItem(\"Text\", \"{{c1::ok}} \\\\(2^2\\\\) {{c2::not ok}} \\\\(2^{{c3::2}}\\\\) \\\\(x^3\\\\) {{c4::blah}} {{c5::text with \\\\(x^2\\\\) jax}}\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(5, note.numberOfCards());\n+        assertTrue(note.cards().get(0).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(1).q().contains(\"class=cloze\"));\n+        assertFalse(note.cards().get(2).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(3).q().contains(\"class=cloze\"));\n+        assertTrue(note.cards().get(4).q().contains(\"class=cloze\"));\n+        \n+        note = col.newNote();\n+        note.setItem(\"Text\",\"\\\\(a\\\\) {{c1::b}} \\\\[ {{c1::c}} \\\\]\");\n+        assertNotEquals(0, col.addNote(note));\n+        assertEquals(1, note.numberOfCards());\n+        String question = note.cards().get(0).q();\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not end correctly\", question.endsWith(\"\\\\(a\\\\) <span class=cloze>[...]</span> \\\\[ [...] \\\\]\"));\n+    }\n+    \n+    @Test\n+    public void test_typecloze(){\n+        Collection col = getCol();\n+        Model m = col.getModels().byName(\"Cloze\");\n+        col.getModels().setCurrent(m);\n+        m.getJSONArray(\"tmpls\").getJSONObject(0).put(\"qfmt\", \"{{cloze:Text}}{{type:cloze:Text}}\");\n+        col.getModels().save(m);\n+        Note note = col.newNote();\n+        note.setItem(\"Text\",\"hello {{c1::world}}\");\n+        col.addNote(note);\n+        assertTrue(note.cards().get(0).q().contains(\"[[type:cloze:Text]]\"));\n+    }\n+    \n+    @Test\n+    public void test_chained_mods() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.getModels().setCurrent(col.getModels().byName(\"Cloze\"));\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        \n+        // We replace the default Cloze template\n+        JSONObject t = mm.newTemplate(\"ChainedCloze\");\n+        t.put(\"qfmt\", \"{{cloze:text:Text}}\");\n+        t.put(\"afmt\", \"{{cloze:text:Text}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        col.getModels().remTemplate(m, m.getJSONArray(\"tmpls\").getJSONObject(0));\n+        \n+        Note note = col.newNote();\n+        String q1 = \"<span style=\\\"color:red\\\">phrase</span>\";\n+        String a1 = \"<b>sentence</b>\";\n+        String q2 = \"<span style=\\\"color:red\\\">en chaine</span>\";\n+        String a2 = \"<i>chained</i>\";\n+        note.setItem(\"Text\",\"This {{c1::\"+q1+\"::\"+a1+\"}} demonstrates {{c1::\"+q2+\"::\"+a2+\"}} clozes.\");\n+        assertEquals(1, col.addNote(note));\n+        String question = note.cards().get(0).q();\n+        /* TODO: chained modifier\n+        assertTrue(\"Question \u00ab\"+question+\"\u00bb does not contain the expected string\", question.contains(\"This <span class=cloze>[sentence]</span> demonstrates <span class=cloze>[chained]</span> clozes.\")\n+                   );\n+        assertTrue(note.cards().get(0).a().contains(\"This <span class=cloze>phrase</span> demonstrates <span class=cloze>en chaine</span> clozes.\"\n+                                                    ));\n+\n+         */\n+    }\n+    \n+    @Test\n+    public void test_modelChange() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        Model cloze = col.getModels().byName(\"Cloze\");\n+        // enable second template and add a note\n+        Model m = col.getModels().current();\n+        Models mm = col.getModels();\n+        JSONObject t = mm.newTemplate(\"Reverse\");\n+        t.put(\"qfmt\", \"{{Back}}\");\n+        t.put(\"afmt\", \"{{Front}}\");\n+        mm.addTemplateModChanged(m, t);\n+        mm.save(m);\n+        Model basic = m;\n+        Note note = col.newNote();\n+        note.setItem(\"Front\",\"note\");\n+        note.setItem(\"Back\",\"b123\");\n+        col.addNote(note);\n+        // switch fields\n+        Map<Integer, Integer> map = new HashMap<>();\n+        map.put(0, 1);\n+        map.put(1, 0);\n+        col.getModels().change(basic,new long [] {note.getId()}, basic, map, null);\n+        note.load();\n+        assertEquals(\"b123\", note.getItem(\"Front\"));\n+        assertEquals(\"note\", note.getItem(\"Back\"));\n+        // switch cards\n+        Card c0 = note.cards().get(0);\n+        Card c1 = note.cards().get(1);\n+        assertTrue(c0.q().contains(\"b123\"));\n+        assertTrue(c1.q().contains(\"note\"));\n+        assertEquals(0, c0.getOrd());\n+        assertEquals(1, c1.getOrd());\n+        col.getModels().change(basic,new long []{note.getId()}, basic, null, map);\n+        note.load();\n+        c0.load();\n+        c1.load();\n+        assertTrue(c0.q().contains(\"note\"));\n+        assertTrue(c1.q().contains(\"b123\"));\n+        assertEquals(1, c0.getOrd());\n+        assertEquals(0, c1.getOrd());\n+        // .cards() returns cards in order\n+        assertEquals(c1.getId(), note.cards().get(0).getId());\n+        // delete first card\n+        map = new HashMap<>();\n+        map.put(0, null);\n+        map.put(1, 1);\n+        // if (isWin) {\n+        //     // The low precision timer on Windows reveals a race condition\n+        //     time.sleep(0.05);\n+        // }\n+        col.getModels().change(basic,new long [] {note.getId()}, basic, null, map);\n+        note.load();\n+        c0.load();\n+        // the card was deleted\n+        // but we have two cards, as a new one was generated\n+        assertEquals(2, note.numberOfCards());\n+        // an unmapped field becomes blank\n+        assertEquals(\"b123\", note.getItem(\"Front\"));\n+        assertEquals(\"note\", note.getItem(\"Back\"));\n+        col.getModels().change(basic,new long [] {note.getId()}, basic, map, null);\n+        note.load();\n+        assertEquals(\"\", note.getItem(\"Front\"));\n+        assertEquals(\"note\", note.getItem(\"Back\"));\n+        // another note to try model conversion\n+        note = col.newNote();\n+        note.setItem(\"Front\",\"f2\");\n+        note.setItem(\"Back\",\"b2\");\n+        col.addNote(note);\n+        // counts = col.getModels().all_use_counts();\n+        // Using older version of the test\n+        assertEquals(2, col.getModels().useCount(basic));\n+        assertEquals(0, col.getModels().useCount(cloze));\n+        // Identity map\n+        map = new HashMap<>();\n+        map.put(0, 0);\n+        map.put(1, 1);\n+        col.getModels().change(basic,new long []{note.getId()}, cloze, map, map);\n+        note.load();\n+        assertEquals(\"f2\", note.getItem(\"Text\"));\n+        assertEquals(2, note.numberOfCards());\n+        // back the other way, with deletion of second ord\n+        col.getModels().remTemplate(basic, basic.getJSONArray(\"tmpls\").getJSONObject(1));\n+        assertEquals(2, col.getDb().queryScalar(\"select count() from cards where nid = ?\", note.getId()));\n+        map = new HashMap<>();\n+        map.put(0, 0);\n+        col.getModels().change(cloze,new long []{note.getId()}, basic, map, map);\n+        assertEquals(1, col.getDb().queryScalar(\"select count() from cards where nid = ?\", note.getId()));\n+    }\n+    \n+    \n+    private void reqSize(Model model) {\n+        if (model.getInt(\"type\") == MODEL_CLOZE) {\n+            return;\n+        }\n+        assertEquals(model.getJSONArray(\"req\").length(), model.getJSONArray(\"tmpls\").length());\n+    }\n+    \n+    @Test\n+    public void test_req(){\n+        \n+        Collection col = getCol();\n+        Models mm = col.getModels();\n+        Model basic = mm.byName(\"Basic\");\n+        assertTrue(basic.has(\"req\"));\n+        reqSize(basic);\n+        JSONArray r = basic.getJSONArray(\"req\").getJSONArray(0);\n+        assertEquals(0, r.getInt(0));\n+        assertTrue(Arrays.asList(new String[]{\"any\", \"all\"}).contains(r.getString(1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 419}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA2MzU5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMDoxMVrOG23QQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1NDoyN1rOG7mzCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA==", "bodyText": "Try to avoid commenting out assertions if the test would still \"pass\"", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460181570", "createdAt": "2020-07-24T17:10:11Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNDc1NA==", "bodyText": "The tests fails here. save(\"foo\") does not add an element to the Undo list as it does upstream. So this test fails. I still want to keep the remaining of the test as it works", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460224754", "createdAt": "2020-07-24T18:38:55Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNjU1Mg==", "bodyText": "If you assumeThat(\"Not Implemented\", false), then the test will either fail, or be ignored, is that a reasonable compromise?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460226552", "createdAt": "2020-07-24T18:42:52Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyOTYxNQ==", "bodyText": "I guess so.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460229615", "createdAt": "2020-07-24T18:49:42Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTAyMw==", "bodyText": "I don't understand exactly what I should write here. When I use assumeThat(col.undoName(getTargetContext().getResources()), is(\"foo\")); the test fails.\nWritting literally:\nassumeThat(\"Not Implemented\", false), makes no sens, so I assume you just meant this is the schema of what I was expected to do", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460231023", "createdAt": "2020-07-24T18:52:44Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0MzAwNw==", "bodyText": "No, specifically that line - it means the test can either fail, or be ignored (which is better than ignoring the whole test), it also points to a specific line which is the problem\nEDIT: assumeTrue(\"Not Implemented\", false)", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460443007", "createdAt": "2020-07-25T20:21:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NDgyNw==", "bodyText": "Assume used", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465154827", "createdAt": "2020-08-04T15:54:27Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,126 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        /* TODO: save and undo\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTU3MA=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA2NDQwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UtilsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMDoyN1rOG23Qzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMDoyN1rOG23Qzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MTcxMA==", "bodyText": "This change seems unnecessary", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460181710", "createdAt": "2020-07-24T17:10:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UtilsTest.java", "diffHunk": "@@ -84,4 +86,7 @@ public void testCopyFile() throws Exception {\n         Utils.copyFile(new File(resource.toURI()), copy);\n         Assert.assertEquals(TestUtils.getMD5(resourcePath), TestUtils.getMD5(copy.getCanonicalPath()));\n     }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3MjA2NjYwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxNzoxMTowOFrOG23SHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNFQxOToyMjo0OFrOG27Gjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjA0Ng==", "bodyText": "More commented out assertions", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460182046", "createdAt": "2020-07-24T17:11:08Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +156,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** Upstream test*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyNTg5MQ==", "bodyText": "It's commented upstream. i am not going to try to correct upstream tests", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460225891", "createdAt": "2020-07-24T18:41:19Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +156,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** Upstream test*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjA0Ng=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIyODAyOQ==", "bodyText": "Oh... could you mention that, assumed it was commented here.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460228029", "createdAt": "2020-07-24T18:46:11Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +156,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** Upstream test*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjA0Ng=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDIzMTQ1OA==", "bodyText": "That's going to take time to find out all tests that are commented and ported as is. I'll try to do it later", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460231458", "createdAt": "2020-07-24T18:53:46Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +156,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** Upstream test*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjA0Ng=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDI0NDYyMw==", "bodyText": "I'll flag them as I find them. Enjoy your weekend!", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460244623", "createdAt": "2020-07-24T19:22:48Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +156,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** Upstream test*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDE4MjA0Ng=="}, "originalCommit": {"oid": "a5909b8f3791133d4d28358eb41b6d465eb3f0ee"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg3MTI2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1MToxOVrOG3GnBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTozNzoyM1rOG3G2kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzE1OA==", "bodyText": "I think we should move this into a separate PR", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460433158", "createdAt": "2020-07-25T18:51:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "diffHunk": "@@ -72,7 +69,7 @@ public void testCloze() {\n         int cnt = d.cardCount();\n         f.setItem(\"Text\", \"{{c2::hello}} {{c1::foo}}\");\n         f.flush();\n-        assertEquals(cnt+1, d.cardCount());\n+        assertEquals(cnt + 1, d.cardCount());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDU4MA==", "bodyText": "I can hardy agree more. At this point, I believe that you may loose more time showing me the errors than just correcting them directly", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460434580", "createdAt": "2020-07-25T19:07:58Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "diffHunk": "@@ -72,7 +69,7 @@ public void testCloze() {\n         int cnt = d.cardCount();\n         f.setItem(\"Text\", \"{{c2::hello}} {{c1::foo}}\");\n         f.flush();\n-        assertEquals(cnt+1, d.cardCount());\n+        assertEquals(cnt + 1, d.cardCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzE1OA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNzEzNg==", "bodyText": "IMO, it'll be very useful to have this PR just handle the inclusion of new tests, and not fixing formatting issues in existing tests.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460437136", "createdAt": "2020-07-25T19:37:23Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ClozeTest.java", "diffHunk": "@@ -72,7 +69,7 @@ public void testCloze() {\n         int cnt = d.cardCount();\n         f.setItem(\"Text\", \"{{c2::hello}} {{c1::foo}}\");\n         f.flush();\n-        assertEquals(cnt+1, d.cardCount());\n+        assertEquals(cnt + 1, d.cardCount());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzE1OA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg3MzY5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxODo1NDo1MVrOG3GoKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo1NTo1N1rOG6eJbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzQ0OQ==", "bodyText": "This should probably override setUp and use a local variable - avoids the need to call it on each", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460433449", "createdAt": "2020-07-25T18:54:51Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+    /*****************\n+     ** Exporting    *\n+     *****************/\n+    private Collection setup1() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxNzA5NA==", "bodyText": "I do not see how to \"setup\" and then access the collection. I do not see how it is done in the other classes", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460617094", "createdAt": "2020-07-27T02:35:35Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+    /*****************\n+     ** Exporting    *\n+     *****************/\n+    private Collection setup1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzQ0OQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4NzQ4MA==", "bodyText": "Can be done along these lines\n@Override\npublic void setUp() {\n    super.setUp();\n    this.localVariableToBeUsedInTesting = getCol();\n}", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463287480", "createdAt": "2020-07-30T21:40:59Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+    /*****************\n+     ** Exporting    *\n+     *****************/\n+    private Collection setup1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzQ0OQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2NDUyNw==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463964527", "createdAt": "2020-08-01T13:55:57Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/ExportingTest.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class ExportingTest extends RobolectricTest {\n+    /*****************\n+     ** Exporting    *\n+     *****************/\n+    private Collection setup1() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzQ0OQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg3ODA1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/MathJaxClozeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTowMDozNVrOG3GqJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo0NjozN1rOG6eGPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzk1OQ==", "bodyText": "Could you move this to a separate PR, or remove the change - not relevant to porting", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460433959", "createdAt": "2020-07-25T19:00:35Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/MathJaxClozeTest.java", "diffHunk": "@@ -41,6 +41,7 @@ public void removeFormattingFromMathjax() {\n         assertEquals(escaped_s2, Template.removeFormattingFromMathjax(original_s2, \"1\"));\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzcxMA==", "bodyText": "done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463963710", "createdAt": "2020-08-01T13:46:37Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/MathJaxClozeTest.java", "diffHunk": "@@ -41,6 +41,7 @@ public void removeFormattingFromMathjax() {\n         assertEquals(escaped_s2, Template.removeFormattingFromMathjax(original_s2, \"1\"));\n     }\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzMzk1OQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg4MjAxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/NoteTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTowNjowOFrOG3GsAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTowNjowOFrOG3GsAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDQzMg==", "bodyText": "Could you remove this file from the PR?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460434432", "createdAt": "2020-07-25T19:06:08Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/NoteTest.java", "diffHunk": "@@ -22,6 +22,7 @@ public void noFieldDataReturnsFirstClozeIndex() {\n         assertThat(\"No data should return a cloze index of 1 the next.\", expected, is(1));\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg4Mzc4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UtilsTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTowODo0OFrOG3Gs0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMVQxMzo0NjozMVrOG6eGMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDY0Mg==", "bodyText": "Again, maybe for another PR", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460434642", "createdAt": "2020-07-25T19:08:48Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UtilsTest.java", "diffHunk": "@@ -43,15 +43,15 @@ public void testZipWithPathTraversal() {\n             Enumeration zipEntries = zipFile.getEntries();\n             while (zipEntries.hasMoreElements()) {\n                 ZipArchiveEntry ze2 = (ZipArchiveEntry) zipEntries.nextElement();\n-                Utils.unzipFiles(zipFile, \"/tmp\", new String[]{ze2.getName()}, null);\n+                Utils.unzipFiles(zipFile, \"/tmp\", new String[] {ze2.getName()}, null);\n             }\n             Assert.fail(\"Expected an IOException\");\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             Assert.assertEquals(\"File is outside extraction target directory.\", e.getMessage());\n         }\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4ODAxNA==", "bodyText": "Still outstanding", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463288014", "createdAt": "2020-07-30T21:42:08Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UtilsTest.java", "diffHunk": "@@ -43,15 +43,15 @@ public void testZipWithPathTraversal() {\n             Enumeration zipEntries = zipFile.getEntries();\n             while (zipEntries.hasMoreElements()) {\n                 ZipArchiveEntry ze2 = (ZipArchiveEntry) zipEntries.nextElement();\n-                Utils.unzipFiles(zipFile, \"/tmp\", new String[]{ze2.getName()}, null);\n+                Utils.unzipFiles(zipFile, \"/tmp\", new String[] {ze2.getName()}, null);\n             }\n             Assert.fail(\"Expected an IOException\");\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             Assert.assertEquals(\"File is outside extraction target directory.\", e.getMessage());\n         }\n     }\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDY0Mg=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzY5Ng==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463963696", "createdAt": "2020-08-01T13:46:31Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UtilsTest.java", "diffHunk": "@@ -43,15 +43,15 @@ public void testZipWithPathTraversal() {\n             Enumeration zipEntries = zipFile.getEntries();\n             while (zipEntries.hasMoreElements()) {\n                 ZipArchiveEntry ze2 = (ZipArchiveEntry) zipEntries.nextElement();\n-                Utils.unzipFiles(zipFile, \"/tmp\", new String[]{ze2.getName()}, null);\n+                Utils.unzipFiles(zipFile, \"/tmp\", new String[] {ze2.getName()}, null);\n             }\n             Assert.fail(\"Expected an IOException\");\n-        }\n-        catch (Exception e) {\n+        } catch (Exception e) {\n             Assert.assertEquals(\"File is outside extraction target directory.\", e.getMessage());\n         }\n     }\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNDY0Mg=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg4OTM0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOToxNjoxOVrOG3GvYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjozODowNlrOG3R3VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTI5OQ==", "bodyText": "Ignore the test for now", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460435299", "createdAt": "2020-07-25T19:16:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +158,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V1() throws Exception {\n+        Collection col = getColV1();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        Note note;\n+        for (int i = 0; i < 30; i++) {\n+            note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount); TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        //assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v1() throws Exception {\n+        Collection col = getColV1();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV1() throws Exception {\n+        Collection col = getColV1();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 2);\n+        // it should be due in 3 minutes\n+        assertEquals(Math.round(c.getDue() - Utils.now()), 179, 1);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(2, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 2);\n+        // it should be due in 10 minutes\n+        assertEquals(c.getDue() - Utils.now(), 599, 1);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+        // now failed card handling\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        c.setODue(123);\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(123, c.getDue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // we should be able to remove manually, too\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        c.setODue(321);\n+        c.flush();\n+        ((Sched) col.getSched()).removeLrn();\n+        c.load();\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(321, c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV1() throws Exception {\n+        Collection col = getColV1();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 2);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV1() throws Exception {\n+        Collection col = getColV1();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 2);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 2));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 2));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 2));\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_RELEARNING, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV1() throws Exception {\n+        Collection col = getColV1();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // failing it should put it in the learn queue with the default options\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        // different delay to new\n+        col.reset();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {2, 20}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // it should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getODue());\n+        assertEquals(1, c.getIvl());\n+        // but because it's in the learn queue, its current due time should be in\n+        // the future\n+        assertTrue(c.getDue() >= Utils.now());\n+        assertTrue((c.getDue() - Utils.now()) > 118);\n+        // factor should have been decremented\n+        assertEquals(2300, c.getFactor());\n+        // check counters\n+        assertEquals(2, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // check ests.\n+\n+        assertEquals(120, col.getSched().nextIvl(c, 1));\n+        assertEquals(20 * 60, col.getSched().nextIvl(c, 2));\n+        // try again with an ease of 2 instead\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100 + 8/4) * 1.2 = 122\n+        assertTrue(checkRevIvl(col, c, 122));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+    }\n+\n+\n+\n+\n+    @Test\n+    public void test_button_spacingV1() throws Exception {\n+        Collection col = getColV1();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_overdue_lapseV1() throws Exception {\n+        // disabled in commit anki@3069729776990980f34c25be66410e947e9d51a2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 507}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxNzU1Nw==", "bodyText": "@ignore added.\nAs note, it's disabled upstream too", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460617557", "createdAt": "2020-07-27T02:38:06Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -126,20 +158,1248 @@ private void selectNewDeck() {\n         getCol().getDecks().select(did);\n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         getCol().getSched().deckDueTree();\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n+        assertEquals(\"Tree has not the expected structure\", SchedV2Test.expectedTree(sched, false), tree);\n \n     }\n \n \n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n-}\n\\ No newline at end of file\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py*\n+     *****************/\n+    private Collection getColV1() throws ConfirmModSchemaException {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(1);\n+        return col;\n+    }\n+\n+\n+    public void test_new_v1() throws Exception {\n+        Collection col = getColV1();\n+        col.reset();\n+        assertEquals(0, col.getSched().newDue());\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount); get access of new count\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V1() throws Exception {\n+        Collection col = getColV1();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        Note note;\n+        for (int i = 0; i < 30; i++) {\n+            note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount); TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        //assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v1() throws Exception {\n+        Collection col = getColV1();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV1() throws Exception {\n+        Collection col = getColV1();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 2);\n+        // it should be due in 3 minutes\n+        assertEquals(Math.round(c.getDue() - Utils.now()), 179, 1);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(2, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 2);\n+        // it should be due in 10 minutes\n+        assertEquals(c.getDue() - Utils.now(), 599, 1);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+        // now failed card handling\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        c.setODue(123);\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(123, c.getDue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // we should be able to remove manually, too\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        c.setODue(321);\n+        c.flush();\n+        ((Sched) col.getSched()).removeLrn();\n+        c.load();\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(321, c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV1() throws Exception {\n+        Collection col = getColV1();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 2);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV1() throws Exception {\n+        Collection col = getColV1();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 2);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 2));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 2));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 2));\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_RELEARNING, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV1() throws Exception {\n+        Collection col = getColV1();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // failing it should put it in the learn queue with the default options\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        // different delay to new\n+        col.reset();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {2, 20}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // it should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getODue());\n+        assertEquals(1, c.getIvl());\n+        // but because it's in the learn queue, its current due time should be in\n+        // the future\n+        assertTrue(c.getDue() >= Utils.now());\n+        assertTrue((c.getDue() - Utils.now()) > 118);\n+        // factor should have been decremented\n+        assertEquals(2300, c.getFactor());\n+        // check counters\n+        assertEquals(2, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // check ests.\n+\n+        assertEquals(120, col.getSched().nextIvl(c, 1));\n+        assertEquals(20 * 60, col.getSched().nextIvl(c, 2));\n+        // try again with an ease of 2 instead\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100 + 8/4) * 1.2 = 122\n+        assertTrue(checkRevIvl(col, c, 122));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+    }\n+\n+\n+\n+\n+    @Test\n+    public void test_button_spacingV1() throws Exception {\n+        Collection col = getColV1();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_overdue_lapseV1() throws Exception {\n+        // disabled in commit anki@3069729776990980f34c25be66410e947e9d51a2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTI5OQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 507}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg5MjE4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": true, "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOToyMDowMlrOG3Gwtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNjo0NDo1NVrOG7oxyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA==", "bodyText": "\ud83d\uded1 This will be flaky in CI", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460435638", "createdAt": "2020-07-25T19:20:02Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQ0MzE0OA==", "bodyText": "I think we should ignore the class in the setup routine if there's a possibility that it'll all be flaky.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460443148", "createdAt": "2020-07-25T20:22:55Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxNzY0Mw==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460617643", "createdAt": "2020-07-27T02:38:35Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4OTA1Ng==", "bodyText": "I don't see the setUp ignore if we're close to the cutoff.\nWe'll want to sort this one out as soon as possible as it means we're not running high-impact tests at a certain time of day - I've made it possible to inject a time dependency into SchedV2, this is one of the ones that I feel might be worth blocking merge over.\n@mikehardy Any thoughts?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463289056", "createdAt": "2020-07-30T21:44:37Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MzA4NA==", "bodyText": "\"blocking merge\" ?\u00a0You mean that you feel that it's worth not merging any of those test because of this condition ?\nBy the way, you added mTime in SchedV2 but it's also sometime used in sched V1. Because sched V1\u00a0inherits from V2, and some methods using mTime are not overriden. Which means that currently, schedv1 potentially uses two distinct timer (even if in practice, they both reflect real time)", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463963084", "createdAt": "2020-08-01T13:39:59Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTE2NQ==", "bodyText": "We're fine as mTime is just an abstraction used for testing.\nIt does need to be expanded to include SchedV1, but I'd be much more comfortable refactoring while I'm adding tests, rather than refactoring for future testability. I'm not totally comfortable with just the refactoring, as there's nothing checking that all uses of the system clock were caught.\nHaving a class that hasn't been converted leaves an obvious solution the next person coming along writing tests. Having a class with all but one dependency converted (because the conversion missed something, and there wasn't a test) can waste a lot more time.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464101165", "createdAt": "2020-08-02T17:13:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTQyOA==", "bodyText": "Say someone submits a PR at the time that these tests are ignored. This PR breaks the tests, but nobody knows.\nTravis goes green, the code gets merged, and the next build for Travis fails due to this. - We've got a flaky build.\nIgnoring tests unconditionally isn't great, but it's better than the alternatives. Ignoring tests conditionally can lead to a flaky build, which is what we want to ignore. I feel this is a candidate for \"get it fixed before it goes in\", especially as this change is a single commit and rollbacks would be tricky.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464101428", "createdAt": "2020-08-02T17:16:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNDg4Ng==", "bodyText": "I understand that you prefer not to incorporate those tests. I could simply comment them until we have a way to ensure that we always uses a false clock with a specified time. i don't understand why you would want to block the whole merge over it.\n\nI don't see the setUp ignore if we're close to the cutoff.\n\nI'm sorry but on second thought I don't understand what you means here. Are you implying it should obviously be here and you're making a comment about the fact that there is an obvious problem ?\nI may imagine you would want a system similar to the one for the tests on real phone with sched v1/v2; Except that using such a system would be flaky here and so would not be appropriate.\nMore generally, it seems you know what you want here. Aren't you loosing time making such comments instead of doing the change yourself ? It seems to me that, as you know the code and the codebase, it would be quite quicker to do the change than to explain them to a human", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464104886", "createdAt": "2020-08-02T17:53:25Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE2MzI0Mw==", "bodyText": "Blocking the merge until we have a resolution for an issue in the ported code seems sensible - it's temporary, especially as we're dealing with a large commit that wouldn't be easy to revert after time passes.\nI don't know how we want to go about solving it, it's the main thing stopping the tests going in, and it's worth discussing options:\n\nComment out the tests - possible but not ideal, as we lose out on testing the scheduler, which is the most significant benefit of this PR\nFix the time dependency - feasible, but could lower the quality of the tests if we don't understand the implications. Unknown time scale on implementation.\nLeave the tests in as is - nonstarter - flaky\nconvert the exception to an ignore in setUp - some risk of a flaky build - disables the previous tests in the file as well around the cutoff\n\n\\2. seems like the best option to me, but I'm more than open to other suggestions to get this unblocked. If there's any action you'd like me to take to help on this tomorrow, let me know", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464163243", "createdAt": "2020-08-03T02:25:04Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDQ5MzExOQ==", "bodyText": "For option 2 - \"inject a controlled testing time into the scheduler\" - I think the fastest solution is for @david-allison-1 to either post almost-working code to do this as testing and that injected time are your strong points, or to pull the branch and actually push a commit that does it (with coordination on the branch from @Arthur-Milchior so you don't conflict on the effort). This may be quick work vs extended comment discussion, and would show exactly how to do it for future\nIf that is not acceptable I am open to 4 - \"if we are near the cutoff when the tests run, ignore this test\", especially in conjunction with a cron run of CI on master that can be configured away from the cutoff (and a comment can be put in the test mentioning that there is a cron job scheduled to run daily that executes at - I think based on the last run - approximately 1900UTC). I believe this is the quick solution if option 2 is intractable", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464493119", "createdAt": "2020-08-03T15:36:14Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTcwMw==", "bodyText": "@Arthur-Milchior - Fixed the time dependency in: https://github.com/david-allison-1/Anki-Android/commits/upstream-test\nFeel free to rebase the change into your branch - I'd rather not cause conflicts.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465011703", "createdAt": "2020-08-04T12:26:02Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0ODgzMA==", "bodyText": "thanks a lot for taking care of it.\nDo you know why the different scheds uses different way to get time ?\u00a0It does not seems that switching to mTime in sched V1 seems hard work either", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465148830", "createdAt": "2020-08-04T15:45:26Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE4NzI3NQ==", "bodyText": "It'll be easy to miss something -  I (or someone else will) get around to it in the future, but I won't be giving it appropriate due care and attention if I'm doing work for SchedV2.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465187275", "createdAt": "2020-08-04T16:44:55Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTYzOA=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg5NDQ4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOToyMjo1NFrOG3GxxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwMjozOTowNVrOG3R4CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTkwOQ==", "bodyText": "ditto - ignore", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460435909", "createdAt": "2020-07-25T19:22:54Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 632}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxNzczNw==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460617737", "createdAt": "2020-07-27T02:39:05Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNTkwOQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 632}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg5OTEwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": true, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOToyOToyMFrOG3Gz7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToyOToyNlrOG7lv4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ==", "bodyText": "Let's keep parity with upstream, and ignore the test for now", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460436461", "createdAt": "2020-07-25T19:29:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDYxODE5Mg==", "bodyText": "I don't get it. I mean, if we did ignore the whole tests then if anything break we won't see it. While this contains already a lot of interesting equals that works.\nIn this case, simply commenting this line would make more sens if you care that much.\nSince it's a rounding question anyway, I would not expect it to have any interest here", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460618192", "createdAt": "2020-07-27T02:41:00Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzI4OTU3Ng==", "bodyText": "True: better as an assume Not Implemented at this location", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463289576", "createdAt": "2020-07-30T21:45:44Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2Mjg3MQ==", "bodyText": "Sorry, I've no idea what it means. \"assume Not Implemented\" does not seems to be valid code. Android studio autocomplete NotImplemented with Kotlin only, which we don't use.\nAnd, anyway, we are only considering a rounding error here. I believe this test is still useful. Even if upstream round to the nearest value and we floor the value, it does not really matter. What matters is that we have 10.7 or 10.8 and not 2 or 294 mont or 3\u00a0days... if at some point we \"repair\" and uses \"round\" instead of \"floor\" and this test fails, the comment will be enough to understand that it is an acceptable thing to change", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463962871", "createdAt": "2020-08-01T13:38:07Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMDQ4NQ==", "bodyText": "How about:\nassumeThat(without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)), either(is(\"10.7\")).or(is(\"10.8\")));\nassumeTrue(\"Investigate this difference: Anki displays 10.8, we display 10.7\", false);\nThe \"Investigate\" line could even go at the end of the test if the rest of the code works.\nWe lose a lot of value from these tests if we're not matching the API of Anki Desktop", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464100485", "createdAt": "2020-08-02T17:05:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwNDIxMQ==", "bodyText": "Tests work on my computer with\nassumeThat(\"Investigate this difference\", col.getSched().nextIvl(c, 3), is(((long)(75 * 2.5)) * 86400));\n\nHowever, on travis, it leads to:\n\n   Caused by:\n   org.junit.AssumptionViolatedException: Investigate this difference: got: <12960000L>, expected: is <16156800L>\n       at org.junit.Assume.assumeThat(Assume.java:129)\n       at com.ichi2.libanki.sched.SchedV2Test.test_filt_reviewing_early_normal(SchedV2Test.java:973)", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464104211", "createdAt": "2020-08-02T17:46:00Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MTAwNA==", "bodyText": "I added the lines you gave. With \"mo\" at the end of the string, otherwise it obviously fails", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464581004", "createdAt": "2020-08-03T18:12:28Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU4MTQ3NA==", "bodyText": "I should note that this is seen as a failure on my computer and states the test fails", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464581474", "createdAt": "2020-08-03T18:13:31Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkzNjEwNQ==", "bodyText": "org.junit.AssumptionViolatedException: Investigate this difference: Anki displays 10.8, we display 10.7\n\nAccording to travis. So I believe the line is not actually what we wanted", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464936105", "createdAt": "2020-08-04T09:53:06Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAwODcwMQ==", "bodyText": "That seems to be a Robolectric problem - add this.advanceRobolectricLooper(); before the assume and the test will be ignored.\nWe likely want to override the method in RobolectricTest", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465008701", "createdAt": "2020-08-04T12:20:37Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzNzYzNA==", "bodyText": "Done. Seems to work, tanks", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465137634", "createdAt": "2020-08-04T15:29:26Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjQ2MQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 755}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3Mzg5OTk5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yNVQxOTozMDoyMlrOG3G0VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wMlQxNzoxODoxOVrOG6mgxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjU2NQ==", "bodyText": "flagging - might want to ignore here", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r460436565", "createdAt": "2020-07-25T19:30:22Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_bury() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        Card c2 = note.cards().get(0);\n+        // burying\n+        col.getSched().buryCards(new long[] {c.getId()}, true);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_MANUALLY_BURIED, c.getQueue());\n+        col.getSched().buryCards(new long[] {c2.getId()}, false);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.MANUAL);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.SIBLINGS);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_NEW, c2.getQueue());\n+\n+        col.getSched().buryCards(new long[] {c.getId(), c2.getId()});\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.ALL);\n+\n+        col.reset();\n+\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_suspendv2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        // suspending\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+        // unsuspending\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        // should cope with rev cards being relearnt\n+        c.setDue(0);\n+        c.setIvl(100);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.flush();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(c.getDue() >= Utils.now());\n+        long due = c.getDue();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(due, c.getDue());\n+        // should cope with cards in cram decks\n+        c.setDue(1);\n+        c.flush();\n+        col.getDecks().newDyn(\"tmp\");\n+        col.getSched().rebuildDyn();\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        assertEquals(1, c.getODue());\n+    }\n+\n+\n+    @Test\n+    public void test_filt_reviewing_early_normal() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        // due in 25 days, so it's been waiting 75 days\n+        c.setDue(col.getSched().getToday() + 25);\n+        c.setMod(1);\n+        c.setFactor(STARTING_FACTOR);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+        // create a dynamic deck and refresh it\n+        long did = col.getDecks().newDyn(\"Cram\");\n+        col.getSched().rebuildDyn(did);\n+        col.reset();\n+        // should appear as normal in the deck list\n+        /* todo sort\n+           assertEquals(1, sorted(col.getSched().deckDueTree().getChildren())[0].review_count);\n+        */\n+        // and should appear in the counts\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        // grab it and check estimates\n+        c = col.getSched().getCard();\n+        assertEquals(4, col.getSched().answerButtons(c));\n+        assertEquals(600, col.getSched().nextIvl(c, 1));\n+        assertEquals(Math.round(75 * 1.2) * 86400, col.getSched().nextIvl(c, 2));\n+        /* TODO: Investigate this difference", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 885}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mzk2MjYxMQ==", "bodyText": "I'm sorry, but I really don't understand what this kind of comments mean. Are you asking me to flag something ?\u00a0Are you taking personal note for later. Are you telling me to ignore the whole test ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r463962611", "createdAt": "2020-08-01T13:34:59Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_bury() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        Card c2 = note.cards().get(0);\n+        // burying\n+        col.getSched().buryCards(new long[] {c.getId()}, true);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_MANUALLY_BURIED, c.getQueue());\n+        col.getSched().buryCards(new long[] {c2.getId()}, false);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.MANUAL);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.SIBLINGS);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_NEW, c2.getQueue());\n+\n+        col.getSched().buryCards(new long[] {c.getId(), c2.getId()});\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.ALL);\n+\n+        col.reset();\n+\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_suspendv2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        // suspending\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+        // unsuspending\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        // should cope with rev cards being relearnt\n+        c.setDue(0);\n+        c.setIvl(100);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.flush();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(c.getDue() >= Utils.now());\n+        long due = c.getDue();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(due, c.getDue());\n+        // should cope with cards in cram decks\n+        c.setDue(1);\n+        c.flush();\n+        col.getDecks().newDyn(\"tmp\");\n+        col.getSched().rebuildDyn();\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        assertEquals(1, c.getODue());\n+    }\n+\n+\n+    @Test\n+    public void test_filt_reviewing_early_normal() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        // due in 25 days, so it's been waiting 75 days\n+        c.setDue(col.getSched().getToday() + 25);\n+        c.setMod(1);\n+        c.setFactor(STARTING_FACTOR);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+        // create a dynamic deck and refresh it\n+        long did = col.getDecks().newDyn(\"Cram\");\n+        col.getSched().rebuildDyn(did);\n+        col.reset();\n+        // should appear as normal in the deck list\n+        /* todo sort\n+           assertEquals(1, sorted(col.getSched().deckDueTree().getChildren())[0].review_count);\n+        */\n+        // and should appear in the counts\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        // grab it and check estimates\n+        c = col.getSched().getCard();\n+        assertEquals(4, col.getSched().answerButtons(c));\n+        assertEquals(600, col.getSched().nextIvl(c, 1));\n+        assertEquals(Math.round(75 * 1.2) * 86400, col.getSched().nextIvl(c, 2));\n+        /* TODO: Investigate this difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjU2NQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 885}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDA5OTA2Nw==", "bodyText": "I'm flagging that you might want to ignore the test via assumeThat(\"Investigate this difference\", false) so a future reader would know that there is an issue with the test and that all cases didn't pass", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464099067", "createdAt": "2020-08-02T16:50:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_bury() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        Card c2 = note.cards().get(0);\n+        // burying\n+        col.getSched().buryCards(new long[] {c.getId()}, true);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_MANUALLY_BURIED, c.getQueue());\n+        col.getSched().buryCards(new long[] {c2.getId()}, false);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.MANUAL);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.SIBLINGS);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_NEW, c2.getQueue());\n+\n+        col.getSched().buryCards(new long[] {c.getId(), c2.getId()});\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.ALL);\n+\n+        col.reset();\n+\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_suspendv2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        // suspending\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+        // unsuspending\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        // should cope with rev cards being relearnt\n+        c.setDue(0);\n+        c.setIvl(100);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.flush();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(c.getDue() >= Utils.now());\n+        long due = c.getDue();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(due, c.getDue());\n+        // should cope with cards in cram decks\n+        c.setDue(1);\n+        c.flush();\n+        col.getDecks().newDyn(\"tmp\");\n+        col.getSched().rebuildDyn();\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        assertEquals(1, c.getODue());\n+    }\n+\n+\n+    @Test\n+    public void test_filt_reviewing_early_normal() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        // due in 25 days, so it's been waiting 75 days\n+        c.setDue(col.getSched().getToday() + 25);\n+        c.setMod(1);\n+        c.setFactor(STARTING_FACTOR);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+        // create a dynamic deck and refresh it\n+        long did = col.getDecks().newDyn(\"Cram\");\n+        col.getSched().rebuildDyn(did);\n+        col.reset();\n+        // should appear as normal in the deck list\n+        /* todo sort\n+           assertEquals(1, sorted(col.getSched().deckDueTree().getChildren())[0].review_count);\n+        */\n+        // and should appear in the counts\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        // grab it and check estimates\n+        c = col.getSched().getCard();\n+        assertEquals(4, col.getSched().answerButtons(c));\n+        assertEquals(600, col.getSched().nextIvl(c, 1));\n+        assertEquals(Math.round(75 * 1.2) * 86400, col.getSched().nextIvl(c, 2));\n+        /* TODO: Investigate this difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjU2NQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 885}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMDE5Mg==", "bodyText": "Done, I think.\nExcept that assumeThat takes a matcher and not a boolean", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464100192", "createdAt": "2020-08-02T17:02:31Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_bury() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        Card c2 = note.cards().get(0);\n+        // burying\n+        col.getSched().buryCards(new long[] {c.getId()}, true);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_MANUALLY_BURIED, c.getQueue());\n+        col.getSched().buryCards(new long[] {c2.getId()}, false);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.MANUAL);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.SIBLINGS);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_NEW, c2.getQueue());\n+\n+        col.getSched().buryCards(new long[] {c.getId(), c2.getId()});\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.ALL);\n+\n+        col.reset();\n+\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_suspendv2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        // suspending\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+        // unsuspending\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        // should cope with rev cards being relearnt\n+        c.setDue(0);\n+        c.setIvl(100);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.flush();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(c.getDue() >= Utils.now());\n+        long due = c.getDue();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(due, c.getDue());\n+        // should cope with cards in cram decks\n+        c.setDue(1);\n+        c.flush();\n+        col.getDecks().newDyn(\"tmp\");\n+        col.getSched().rebuildDyn();\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        assertEquals(1, c.getODue());\n+    }\n+\n+\n+    @Test\n+    public void test_filt_reviewing_early_normal() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        // due in 25 days, so it's been waiting 75 days\n+        c.setDue(col.getSched().getToday() + 25);\n+        c.setMod(1);\n+        c.setFactor(STARTING_FACTOR);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+        // create a dynamic deck and refresh it\n+        long did = col.getDecks().newDyn(\"Cram\");\n+        col.getSched().rebuildDyn(did);\n+        col.reset();\n+        // should appear as normal in the deck list\n+        /* todo sort\n+           assertEquals(1, sorted(col.getSched().deckDueTree().getChildren())[0].review_count);\n+        */\n+        // and should appear in the counts\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        // grab it and check estimates\n+        c = col.getSched().getCard();\n+        assertEquals(4, col.getSched().answerButtons(c));\n+        assertEquals(600, col.getSched().nextIvl(c, 1));\n+        assertEquals(Math.round(75 * 1.2) * 86400, col.getSched().nextIvl(c, 2));\n+        /* TODO: Investigate this difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjU2NQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 885}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDEwMTU3Mg==", "bodyText": "Ah, yes, apologies. assumeTrue, or assumeThat(\"\", true, is(false))\"", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464101572", "createdAt": "2020-08-02T17:18:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +182,1429 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+    }\n+\n+\n+    @Test\n+    public void test_new_v2() throws Exception {\n+        Collection col = getColV2();\n+        col.reset();\n+        // assertEquals(0, col.getSched().newCount);TODO: newCount getter\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        // assertEquals(1, col.getSched().newCount);TODO: newCount getter\n+        // fetch it\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertEquals(CARD_TYPE_NEW, c.getType());\n+        // if we answer it, it should become a learn card\n+        long t = intTime();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        assertTrue(c.getDue() >= t);\n+\n+        // disabled for now, as the learn fudging makes this randomly fail\n+        // // the default order should ensure siblings are not seen together, and\n+        // // should show all cards\n+        // Model m = col.getModels().current(); Models mm = col.getModels()\n+        // JSONObject t = mm.newTemplate(\"Reverse\")\n+        // t['qfmt'] = \"{{Back}}\"\n+        // t['afmt'] = \"{{Front}}\"\n+        // mm.addTemplateModChanged(m, t)\n+        // mm.save(m)\n+        // note = col.newNote()\n+        // note['Front'] = u\"2\"; note['Back'] = u\"2\"\n+        // col.addNote(note)\n+        // note = col.newNote()\n+        // note['Front'] = u\"3\"; note['Back'] = u\"3\"\n+        // col.addNote(note)\n+        // col.reset()\n+        // qs = (\"2\", \"3\", \"2\", \"3\")\n+        // for (int n = 0; n < 4; n++) {\n+        //     c = col.getSched().getCard()\n+        //     assertTrue(qs[n] in c.q())\n+        //     col.getSched().answerCard(c, 2)\n+        // }\n+    }\n+\n+\n+    @Test\n+    public void test_newLimits_V2() throws Exception {\n+        Collection col = getColV2();\n+        // add some notes\n+        long deck2 = col.getDecks().id(\"Default::foo\");\n+        for (int i = 0; i < 30; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", Integer.toString(i));\n+            if (i > 4) {\n+                note.model().put(\"did\", deck2);\n+            }\n+            col.addNote(note);\n+        }\n+        // give the child deck a different configuration\n+        long c2 = col.getDecks().confId(\"new conf\");\n+        col.getDecks().setConf(col.getDecks().get(deck2), c2);\n+        col.reset();\n+        // both confs have defaulted to a limit of 20\n+        // assertEquals(20, col.getSched().newCount);TODO: newCount getter\n+        // first card we get comes from parent\n+        Card c = col.getSched().getCard();\n+        assertEquals(1, c.getDid());\n+        // limit the parent to 10 cards, meaning we get 10 in total\n+        DeckConfig conf1 = col.getDecks().confForDid(1);\n+        conf1.getJSONObject(\"new\").put(\"perDay\", 10);\n+        col.getDecks().save(conf1);\n+        col.reset();\n+        // assertEquals(10, col.getSched().newCount);TODO: newCount getter\n+        // if we limit child to 4, we should get 9\n+        DeckConfig conf2 = col.getDecks().confForDid(deck2);\n+        conf2.getJSONObject(\"new\").put(\"perDay\", 4);\n+        col.getDecks().save(conf2);\n+        col.reset();\n+        //assertEquals(9, col.getSched().newCount);TODO: newCount getter\n+    }\n+\n+\n+    @Test\n+    public void test_newBoxes_v2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 2, 3, 4, 5}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+        // should handle gracefully\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1}));\n+        col.getDecks().save(conf);\n+        col.getSched().answerCard(c, 2);\n+    }\n+\n+\n+    @Test\n+    public void test_learnV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // sched.getCard should return it, since it's due in the past\n+        Card c = col.getSched().getCard();\n+        assertNotNull(c);\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        col.getDecks().save(conf);\n+        // fail it\n+        col.getSched().answerCard(c, 1);\n+        // it should have three reps left to graduation\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(3, c.getLeft() / 1000);\n+        // it should be due in 30 seconds\n+        long t = Math.round(c.getDue() - Utils.now());\n+        assertTrue(t >= 25 && t <= 40);\n+        // pass it once\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 3 minutes\n+        double dueIn = c.getDue() - Utils.now();\n+        assertTrue(178 <= dueIn && dueIn <= 180 * 1.25);\n+        assertEquals(2, c.getLeft() % 1000);\n+        assertEquals(2, c.getLeft() / 1000);\n+        // check log is accurate\n+        Cursor log = col.getDb().getDatabase().query(\"select * from revlog order by id desc\");\n+        assertTrue(log.moveToFirst());\n+        assertEquals(3, log.getInt(3));\n+        assertEquals(-180, log.getInt(4));\n+        assertEquals(-30, log.getInt(5));\n+        // pass again\n+        col.getSched().answerCard(c, 3);\n+        // it should be due in 10 minutes\n+        dueIn = c.getDue() - Utils.now();\n+        assertTrue(599 <= dueIn && dueIn <= 600 * 1.25);\n+        assertEquals(1, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        // the next pass should graduate the card\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_LRN, c.getType());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        // should be due tomorrow, with an interval of 1\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(1, c.getIvl());\n+        // or normal removal\n+        c.setType(CARD_TYPE_NEW);\n+        c.setQueue(QUEUE_TYPE_LRN);\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertTrue(checkRevIvl(col, c, 4));\n+        // revlog should have been updated each time\n+        assertEquals(5, col.getDb().queryScalar(\"select count() from revlog where type = 0\"));\n+    }\n+\n+\n+    @Test\n+    public void test_relearn() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(1, c.getIvl());\n+\n+        // immediately graduate it\n+        col.getSched().answerCard(c, 4);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        assertEquals(2, c.getIvl());\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+    }\n+\n+\n+    @Test\n+    public void test_relearn_no_steps() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setDue(col.getSched().getToday());\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        c.flush();\n+\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+\n+        // fail the card\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+    }\n+\n+\n+    @Test\n+    public void test_learn_collapsedV2() throws Exception {\n+        Collection col = getColV2();\n+        // add 2 notes\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"1\");\n+        col.addNote(note);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"2\");\n+        col.addNote(note);\n+        // set as a learn card and rebuild queues\n+        col.getDb().execute(\"update cards set queue=0, type=0\");\n+        col.reset();\n+        // should get '1' first\n+        Card c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"1\"));\n+        // pass it so it's due in 10 minutes\n+        col.getSched().answerCard(c, 3);\n+        // get the other card\n+        c = col.getSched().getCard();\n+        assertTrue(c.q().endsWith(\"2\"));\n+        // fail it so it's due in 1 minute\n+        col.getSched().answerCard(c, 1);\n+        // we shouldn't get the same card again\n+        c = col.getSched().getCard();\n+        assertFalse(c.q().endsWith(\"2\"));\n+    }\n+\n+\n+    @Test\n+    public void test_learn_dayV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.getSched().reset();\n+        Card c = col.getSched().getCard();\n+        DeckConfig conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {1, 10, 1440, 2880}));\n+        col.getDecks().save(conf);\n+        // pass it\n+        col.getSched().answerCard(c, 3);\n+        // two reps to graduate, 1 more today\n+        assertEquals(3, c.getLeft() % 1000);\n+        assertEquals(1, c.getLeft() / 1000);\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        // answering it will place it in queue 3\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(col.getSched().getToday() + 1, c.getDue());\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertNull(col.getSched().getCard());\n+        // for testing, move it back a day\n+        c.setDue(c.getDue() - 1);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        // nextIvl should work\n+        assertEquals(86400 * 2, col.getSched().nextIvl(c, 3));\n+        // if we fail it, it should be back in the correct queue\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        col.undo();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        // simulate the passing of another two days\n+        c.setDue(c.getDue() - 2);\n+        c.flush();\n+        col.reset();\n+        // the last pass should graduate it into a review card\n+        assertEquals(86400, col.getSched().nextIvl(c, 3));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(CARD_TYPE_REV, c.getType());\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // if the lapse step is tomorrow, failing it should handle the counts\n+        // correctly\n+        c.setDue(0);\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        conf = col.getSched()._cardConf(c);\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1440}));\n+        col.getDecks().save(conf);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertEquals(QUEUE_TYPE_DAY_LEARN_RELEARN, c.getQueue());\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_reviewsV2() throws Exception {\n+        Collection col = getColV2();\n+        // add a note\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // set the card up as a review card, due 8 days ago\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday() - 8);\n+        c.setFactor(STARTING_FACTOR);\n+        c.setReps(3);\n+        c.setLapses(1);\n+        c.setIvl(100);\n+        c.startTimer();\n+        c.flush();\n+        // save it for later use as well\n+        Card cardcopy = c.clone();\n+        // try with an ease of 2\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.reset();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(QUEUE_TYPE_REV, c.getQueue());\n+        // the new interval should be (100) * 1.2 = 120\n+        assertTrue(checkRevIvl(col, c, 120));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been decremented\n+        assertEquals(2350, c.getFactor());\n+        // check counters\n+        assertEquals(1, c.getLapses());\n+        assertEquals(4, c.getReps());\n+        // ease 3\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 3);\n+        // the new interval should be (100 + 8/2) * 2.5 = 260\n+        assertTrue(checkRevIvl(col, c, 260));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been left alone\n+        assertEquals(STARTING_FACTOR, c.getFactor());\n+        // ease 4\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c = cardcopy.clone();\n+        c.flush();\n+        col.getSched().answerCard(c, 4);\n+        // the new interval should be (100 + 8) * 2.5 * 1.3 = 351\n+        assertTrue(checkRevIvl(col, c, 351));\n+        assertEquals(col.getSched().getToday() + c.getIvl(), c.getDue());\n+        // factor should have been increased\n+        assertEquals(2650, c.getFactor());\n+        // leech handling\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        DeckConfig conf = col.getDecks().getConf(1);\n+        conf.getJSONObject(\"lapse\").put(\"leechAction\", LEECH_SUSPEND);\n+        col.getDecks().save(conf);\n+        c = cardcopy.clone();\n+        c.setLapses(7);\n+        c.flush();\n+        /* todo hook\n+        // steup hook\n+        hooked = new [] {};\n+        \n+        def onLeech(card):\n+        hooked.append(1);\n+        \n+        hooks.card_did_leech.append(onLeech);\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(hooked);\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_SUSPENDED, c.getQueue());\n+        */\n+    }\n+\n+\n+    @Test\n+    public void test_review_limits() throws Exception {\n+        Collection col = getColV2();\n+\n+        Deck parent = col.getDecks().get(col.getDecks().id(\"parent\"));\n+        Deck child = col.getDecks().get(col.getDecks().id(\"parent::child\"));\n+\n+        DeckConfig pconf = col.getDecks().getConf(col.getDecks().confId(\"parentConf\"));\n+        DeckConfig cconf = col.getDecks().getConf(col.getDecks().confId(\"childConf\"));\n+\n+        pconf.getJSONObject(\"rev\").put(\"perDay\", 5);\n+        col.getDecks().updateConf(pconf);\n+        col.getDecks().setConf(parent, pconf.getLong(\"id\"));\n+        cconf.getJSONObject(\"rev\").put(\"perDay\", 10);\n+        col.getDecks().updateConf(cconf);\n+        col.getDecks().setConf(child, cconf.getLong(\"id\"));\n+\n+        Model m = col.getModels().current();\n+        m.put(\"did\", child.getLong(\"id\"));\n+        col.getModels().save(m, false);\n+\n+        // add some cards\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setItem(\"Front\", \"one\");\n+            note.setItem(\"Back\", \"two\");\n+            col.addNote(note);\n+\n+            // make them reviews\n+            Card c = note.cards().get(0);\n+            c.setQueue(CARD_TYPE_REV);\n+            c.setType(QUEUE_TYPE_REV);\n+            c.setDue(0);\n+            c.flush();\n+        }\n+\n+        // position 0 is default deck. Different from upstream\n+        AbstractSched.DeckDueTreeNode tree = col.getSched().deckDueTree().get(1);\n+        // (('parent', 1514457677462, 5, 0, 0, (('child', 1514457677463, 5, 0, 0, ()),)))\n+        assertEquals(\"parent\", tree.getFullDeckName());\n+        assertEquals(5, tree.getRevCount());  // paren, tree.review_count)t\n+        assertEquals(5, tree.getChildren().get(0).getRevCount());\n+\n+        // .counts() should match\n+        col.getDecks().select(child.getLong(\"id\"));\n+        col.getSched().reset();\n+        assertArrayEquals(new int[] {0, 0, 5}, col.getSched().counts());\n+\n+        // answering a card in the child should decrement parent count\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 0, 4}, col.getSched().counts());\n+\n+        tree = col.getSched().deckDueTree().get(1);\n+        assertEquals(4, tree.getRevCount());\n+        assertEquals(4, tree.getChildren().get(0).getRevCount());\n+    }\n+\n+\n+    @Test\n+    public void test_button_spacingV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        // 1 day ivl review card due now\n+        Card c = note.cards().get(0);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setDue(col.getSched().getToday());\n+        c.setReps(1);\n+        c.setIvl(1);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        // Upstream, there is no space in 2d\n+        assertEquals(\"2 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n+        assertEquals(\"3 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 3)));\n+        assertEquals(\"4 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+\n+        // if hard factor is <= 1, then hard may not increase\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"rev\").put(\"hardFactor\", 1);\n+        col.getDecks().save(conf);\n+        assertEquals(\"1 d\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 2)));\n     }\n \n \n+    @Test\n+    public void test_overdue_lapseV2() throws Exception {\n+        // disabled in commit 3069729776990980f34c25be66410e947e9d51a2\n+        return;\n+        /* Upstream does not execute it\n+           Collection col = getColV2()  // pylint: disable=unreachable\n+           // add a note\n+           Note note = col.newNote();\n+           note.setItem(\"Front\",\"one\");\n+           col.addNote(note);\n+           // simulate a review that was lapsed and is now due for its normal review\n+           Card c = note.cards().get(0);\n+           c.setType(CARD_TYPE_REV);\n+           c.setQueue(QUEUE_TYPE_LRN);\n+           c.setDue(-1);\n+           c.setODue(-1);\n+           c.setFactor(STARTING_FACTOR);\n+           c.setLeft(2002);\n+           c.setIvl(0);\n+           c.flush();\n+           // checkpoint\n+           col.save();\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 2, 0}, col.getSched().counts());\n+           c = col.getSched().getCard();\n+           col.getSched().answerCard(c, 3);\n+           // it should be due tomorrow\n+           assertEquals(col.getSched().getToday()+ 1, c.getDue());\n+           // revert to before\n+           /* todo: rollback\n+           col.rollback();\n+           // with the default settings, the overdue card should be removed from the\n+           // learning queue\n+           col.getSched().reset();\n+           assertArrayEquals(new int[]{0, 0, 1}, col.getSched().counts());\n+        */\n+\n+    }\n+\n+\n+    @Test\n+    public void test_finishedV2() throws Exception {\n+        Collection col = getColV2();\n+        // nothing due\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        // have a new card\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"new cards available\"));\n+        // turn it into a review\n+        col.reset();\n+        Card c = note.cards().get(0);\n+        c.startTimer();\n+        col.getSched().answerCard(c, 3);\n+        // nothing should be due tomorrow, as it's due in a week\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), containsString(\"Congratulations\"));\n+        assertThat(col.getSched().finishedMsg(getTargetContext()).toString(), not(containsString(\"limit\")));\n+    }\n+\n+\n+    @Test\n+    public void test_nextIvlV2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        note.setItem(\"Back\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        DeckConfig conf = col.getDecks().confForDid(1);\n+        conf.getJSONObject(\"new\").put(\"delays\", new JSONArray(new double[] {0.5, 3, 10}));\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {1, 5, 9}));\n+        col.getDecks().save(conf);\n+        Card c = col.getSched().getCard();\n+        // new cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 1);\n+        // cards in learning\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((30 + 180) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(180, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(30, col.getSched().nextIvl(c, 1));\n+        assertEquals((180 + 600) / 2, col.getSched().nextIvl(c, 2));\n+        assertEquals(600, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        col.getSched().answerCard(c, 3);\n+        // normal graduation is tomorrow\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(4 * 86400, col.getSched().nextIvl(c, 4));\n+        // lapsed cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setType(CARD_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        assertEquals(100 * 86400, col.getSched().nextIvl(c, 3));\n+        assertEquals(101 * 86400, col.getSched().nextIvl(c, 4));\n+        // review cards\n+        ////////////////////////////////////////////////////////////////////////////////////////////////////\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.setIvl(100);\n+        c.setFactor(STARTING_FACTOR);\n+        // failing it should put it at 60s\n+        assertEquals(60, col.getSched().nextIvl(c, 1));\n+        // or 1 day if relearn is false\n+        conf.getJSONObject(\"lapse\").put(\"delays\", new JSONArray(new double[] {}));\n+        col.getDecks().save(conf);\n+        assertEquals(1 * 86400, col.getSched().nextIvl(c, 1));\n+        // (* 100 1.2 86400)10368000.0\n+        assertEquals(10368000, col.getSched().nextIvl(c, 2));\n+        // (* 100 2.5 86400)21600000.0\n+        assertEquals(21600000, col.getSched().nextIvl(c, 3));\n+        // (* 100 2.5 1.3 86400)28080000.0\n+        assertEquals(28080000, col.getSched().nextIvl(c, 4));\n+        // TODO: upstream is 10.8, try to understand the difference\n+        assertEquals(\"10.7 mo\", without_unicode_isolation(col.getSched().nextIvlStr(getTargetContext(), c, 4)));\n+    }\n+\n+\n+    @Test\n+    public void test_bury() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        Card c2 = note.cards().get(0);\n+        // burying\n+        col.getSched().buryCards(new long[] {c.getId()}, true);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_MANUALLY_BURIED, c.getQueue());\n+        col.getSched().buryCards(new long[] {c2.getId()}, false);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.MANUAL);\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_SIBLING_BURIED, c2.getQueue());\n+\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.SIBLINGS);\n+        c2.load();\n+        assertEquals(QUEUE_TYPE_NEW, c2.getQueue());\n+\n+        col.getSched().buryCards(new long[] {c.getId(), c2.getId()});\n+        col.getSched().unburyCardsForDeck(AbstractSched.UnburyType.ALL);\n+\n+        col.reset();\n+\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+    }\n+\n+\n+    @Test\n+    public void test_suspendv2() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        // suspending\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNull(col.getSched().getCard());\n+        // unsuspending\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        col.reset();\n+        assertNotNull(col.getSched().getCard());\n+        // should cope with rev cards being relearnt\n+        c.setDue(0);\n+        c.setIvl(100);\n+        c.setType(CARD_TYPE_REV);\n+        c.setQueue(QUEUE_TYPE_REV);\n+        c.flush();\n+        col.reset();\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 1);\n+        assertTrue(c.getDue() >= Utils.now());\n+        long due = c.getDue();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        col.getSched().unsuspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        assertEquals(CARD_TYPE_RELEARNING, c.getType());\n+        assertEquals(due, c.getDue());\n+        // should cope with cards in cram decks\n+        c.setDue(1);\n+        c.flush();\n+        col.getDecks().newDyn(\"tmp\");\n+        col.getSched().rebuildDyn();\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        col.getSched().suspendCards(new long[] {c.getId()});\n+        c.load();\n+        assertNotEquals(1, c.getDue());\n+        assertNotEquals(1, c.getDid());\n+        assertEquals(1, c.getODue());\n+    }\n+\n+\n+    @Test\n+    public void test_filt_reviewing_early_normal() throws Exception {\n+        Collection col = getColV2();\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        Card c = note.cards().get(0);\n+        c.setIvl(100);\n+        c.setQueue(CARD_TYPE_REV);\n+        c.setType(QUEUE_TYPE_REV);\n+        // due in 25 days, so it's been waiting 75 days\n+        c.setDue(col.getSched().getToday() + 25);\n+        c.setMod(1);\n+        c.setFactor(STARTING_FACTOR);\n+        c.startTimer();\n+        c.flush();\n+        col.reset();\n+        assertArrayEquals(new int[] {0, 0, 0}, col.getSched().counts());\n+        // create a dynamic deck and refresh it\n+        long did = col.getDecks().newDyn(\"Cram\");\n+        col.getSched().rebuildDyn(did);\n+        col.reset();\n+        // should appear as normal in the deck list\n+        /* todo sort\n+           assertEquals(1, sorted(col.getSched().deckDueTree().getChildren())[0].review_count);\n+        */\n+        // and should appear in the counts\n+        assertArrayEquals(new int[] {0, 0, 1}, col.getSched().counts());\n+        // grab it and check estimates\n+        c = col.getSched().getCard();\n+        assertEquals(4, col.getSched().answerButtons(c));\n+        assertEquals(600, col.getSched().nextIvl(c, 1));\n+        assertEquals(Math.round(75 * 1.2) * 86400, col.getSched().nextIvl(c, 2));\n+        /* TODO: Investigate this difference", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDQzNjU2NQ=="}, "originalCommit": {"oid": "a74f9f92032777f428b26b339caf53bdc302345c"}, "originalPosition": 885}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzYzNzAyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTowNToyMFrOG7Xw9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNTo1NzowN1rOG7m6gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwODUzMg==", "bodyText": "shouldn't this have a getColV2", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464908532", "createdAt": "2020-08-04T09:05:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDk4MjI3OQ==", "bodyText": "I didn't even know it exists", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464982279", "createdAt": "2020-08-04T11:28:02Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwODUzMg=="}, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTAxMTQ0Nw==", "bodyText": "It was added by this commit", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465011447", "createdAt": "2020-08-04T12:25:33Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwODUzMg=="}, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzMzQwOQ==", "bodyText": "I'm feeling silly now", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465133409", "createdAt": "2020-08-04T15:23:30Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwODUzMg=="}, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE0ODU5Mw==", "bodyText": "5000 lines is enough to make anyone forget (especially if it's autogenerated)!", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465148593", "createdAt": "2020-08-04T15:45:07Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwODUzMg=="}, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTE1NjczOA==", "bodyText": "This one probably one of the few no autogenerated line", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465156738", "createdAt": "2020-08-04T15:57:07Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwODUzMg=="}, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMzY0MDEzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTowNjoxMlrOG7Xy2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNToyMjoxNVrOG7lb5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwOTAxOQ==", "bodyText": "getColV2?", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r464909019", "createdAt": "2020-08-04T09:06:12Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    @Ignore(\"Risks to be flaky in CI\")\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 137}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTEzMjUxNw==", "bodyText": "Done. Thanks", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465132517", "createdAt": "2020-08-04T15:22:15Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -146,15 +185,1428 @@ private void ensureLapseMatchesSppliedAnkiDesktopConfig(JSONObject lapse) {\n \n     }\n \n+\n     @Test\n     public void ensureDeckTree() {\n-        for (String deckName: TEST_DECKS) {\n+        for (String deckName : TEST_DECKS) {\n             addDeck(deckName);\n         }\n         AbstractSched sched = getCol().getSched();\n         List<AbstractSched.DeckDueTreeNode> tree = sched.deckDueTree();\n-        Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+        assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n+    }\n+\n+\n+    /*****************\n+     ** autogenerated from https://github.com/ankitects/anki/blob/2c73dcb2e547c44d9e02c20a00f3c52419dc277b/pylib/tests/test_cards.py\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    @Ignore(\"Risks to be flaky in CI\")\n+    public void test_clock() throws Exception {\n+        Collection col = getColV2();\n+        if ((col.getSched().getDayCutoff() - intTime()) < 10 * 60) {\n+            throw new Exception(\"Unit tests will fail around the day rollover.\");\n+        }\n+    }\n+\n+\n+    @Test\n+    public void test_basics() throws Exception {\n+        Collection col = getCol();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkwOTAxOQ=="}, "originalCommit": {"oid": "327897a0592a09e9258d21338476e5245d29fee0"}, "originalPosition": 137}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTUzMjgzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoxNjoyNlrOG7p6TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyNjoyNlrOG7qRBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNTgzNg==", "bodyText": "(Optional) It would be helpful to extract assumeThat() and assumeX this code into RobolectricTest so we always get this behaviour.", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465205836", "createdAt": "2020-08-04T17:16:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assume.assumeThat;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        // Upstream, \"save\" can be undone. This test fails here because it's not the case in AnkiDroid\n+        this.advanceRobolectricLooper();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55fe489094fb330c234c5b329664220e778d2b49"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMTY1NQ==", "bodyText": "Done for the few one I found followed by assume. Not for the one followed by an assert", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465211655", "createdAt": "2020-08-04T17:26:26Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/UndoTest.java", "diffHunk": "@@ -0,0 +1,129 @@\n+package com.ichi2.libanki;\n+\n+import com.ichi2.anki.RobolectricTest;\n+\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Consts.COUNT_REMAINING;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_LRN;\n+import static com.ichi2.libanki.Consts.QUEUE_TYPE_NEW;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assume.assumeThat;\n+\n+\n+@RunWith(AndroidJUnit4.class)\n+public class UndoTest extends RobolectricTest {\n+    /*****************\n+     ** Undo         *\n+     *****************/\n+    public Collection getColV2() throws Exception {\n+        Collection col = getCol();\n+        col.changeSchedulerVer(2);\n+        return col;\n+    }\n+\n+\n+    @Test\n+    @Ignore(\"We need to figure out how to test save/undo\")\n+    public void test_op() throws Exception {\n+        Collection col = getColV2();\n+        // should have no undo by default\n+        assertNull(col.undoType());\n+        // let's adjust a study option\n+        col.save(\"studyopts\");\n+        col.getConf().put(\"abc\", 5);\n+        // it should be listed as undoable\n+        assertEquals(\"studyopts\", col.undoName(getTargetContext().getResources()));\n+        // with about 5 minutes until it's clobbered\n+        /* lastSave\n+           assertThat(Utils.now() - col._lastSave, lesserThan(1));\n+        */\n+        // undoing should restore the old value\n+        col.undo();\n+        assertEquals(null, col.undoType());\n+        assertFalse(col.getConf().has(\"abc\"));\n+        // an (auto)save will clear the undo\n+        col.save(\"foo\");\n+        assertEquals(\"foo\", col.undoName(getTargetContext().getResources()));\n+        col.save();\n+        assertEquals(\"\", col.undoName(getTargetContext().getResources()));\n+        // and a review will, too\n+        col.save(\"add\");\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        assertEquals(\"add\", col.undoName(getTargetContext().getResources()));\n+        Card c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 2);\n+        assertEquals(\"Review\", col.undoName(getTargetContext().getResources()));\n+    }\n+\n+\n+    @Test\n+    public void test_review() throws Exception {\n+        Collection col = getColV2();\n+        col.getConf().put(\"counts\", COUNT_REMAINING);\n+        Note note = col.newNote();\n+        note.setItem(\"Front\", \"one\");\n+        col.addNote(note);\n+        col.reset();\n+        /* TODO:\u00a0 undo after reset ?\n+        assertNotNull(col.undoType());\n+\n+         */\n+        // answer\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        Card c = col.getSched().getCard();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(1001, c.getLeft());\n+        assertArrayEquals(new int[] {0, 1, 0}, col.getSched().counts());\n+        assertEquals(QUEUE_TYPE_LRN, c.getQueue());\n+        // undo\n+        assertNotNull(col.undoType());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 0, 0}, col.getSched().counts());\n+        c.load();\n+        assertEquals(QUEUE_TYPE_NEW, c.getQueue());\n+        assertNotEquals(1001, c.getLeft());\n+        assertNull(col.undoType());\n+        // we should be able to undo multiple answers too\n+        note = col.newNote();\n+        note.setItem(\"Front\", \"two\");\n+        col.addNote(note);\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertArrayEquals(new int[] {0, 2, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {1, 1, 0}, col.getSched().counts());\n+        col.undo();\n+        col.reset();\n+        assertArrayEquals(new int[] {2, 0, 0}, col.getSched().counts());\n+        // performing a normal op will clear the review queue\n+        c = col.getSched().getCard();\n+        col.getSched().answerCard(c, 3);\n+        assertEquals(Collection.DismissType.REVIEW, col.undoType());\n+        col.save(\"foo\");\n+        // Upstream, \"save\" can be undone. This test fails here because it's not the case in AnkiDroid\n+        this.advanceRobolectricLooper();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIwNTgzNg=="}, "originalCommit": {"oid": "55fe489094fb330c234c5b329664220e778d2b49"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNTU4MDY1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/RobolectricTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxNzoyOToxNVrOG7qXcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQxODoxNjowOVrOG7r-dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMzI5Nw==", "bodyText": "Probably should also handle:\nassumeThat(message, x, is(y))\nassumeThat(x, is(y))\nassumeTrue(false)", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465213297", "createdAt": "2020-08-04T17:29:15Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/RobolectricTest.java", "diffHunk": "@@ -291,4 +295,61 @@ public void onPostExecute(TaskData result) {\n             throw new IllegalStateException(String.format(\"Task %s didn't finish in %d ms\", taskType, timeoutMs));\n         }\n     }\n+    /**\n+     * Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n+     * If not, the test halts and is ignored.\n+     * Example:\n+     * <pre>:\n+     *   assumeThat(1, is(1)); // passes\n+     *   foo(); // will execute\n+     *   assumeThat(0, is(1)); // assumption failure! test halts\n+     *   int x = 1 / 0; // will never execute\n+     * </pre>\n+     *\n+     * @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as {@code assumeThat(1, is(\"a\"))}\n+     * @param actual the computed value being compared\n+     * @param matcher an expression, built of {@link Matcher}s, specifying allowed values\n+     * @see org.hamcrest.CoreMatchers\n+     * @see org.junit.matchers.JUnitMatchers\n+     */\n+    public <T> void assumeThat(T actual, Matcher<T> matcher) {\n+        this.advanceRobolectricLooper();\n+        Assume.assumeThat(actual, matcher);\n+    }\n+\n+    /**\n+     * Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n+     * If not, the test halts and is ignored.\n+     * Example:\n+     * <pre>:\n+     *   assumeThat(\"alwaysPasses\", 1, is(1)); // passes\n+     *   foo(); // will execute\n+     *   assumeThat(\"alwaysFails\", 0, is(1)); // assumption failure! test halts\n+     *   int x = 1 / 0; // will never execute\n+     * </pre>\n+     *\n+     * @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as {@code assumeThat(1, is(\"a\"))}\n+     * @param actual the computed value being compared\n+     * @param matcher an expression, built of {@link Matcher}s, specifying allowed values\n+     * @see org.hamcrest.CoreMatchers\n+     * @see org.junit.matchers.JUnitMatchers\n+     */\n+    public <T> void assumeThat(String message, T actual, Matcher<T> matcher) {\n+        this.advanceRobolectricLooper();\n+        Assume.assumeThat(message, actual, matcher);\n+    }\n+\n+\n+\n+    /**\n+     * If called with an expression evaluating to {@code false}, the test will halt and be ignored.\n+     *\n+     * @param b If <code>false</code>, the method will attempt to stop the test and ignore it by\n+     * throwing {@link AssumptionViolatedException}.\n+     * @param message A message to pass to {@link AssumptionViolatedException}.\n+     */\n+    public void assumeTrue(String message, boolean b) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "94afb42a5b60e76386d5c3a5575798099b3ebfb1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxODgzOQ==", "bodyText": "I don't understand this message.\nI already added\npublic void assumeTrue(String message, boolean b) {\npublic  void assumeThat(String message, T actual, Matcher matcher) { and\npublic  void assumeThat(T actual, Matcher matcher) {\nSo it seems similar to what you ask. Furthermore, I did remove all advanceRobolectricLooper that I did add in my code", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465218839", "createdAt": "2020-08-04T17:39:00Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/RobolectricTest.java", "diffHunk": "@@ -291,4 +295,61 @@ public void onPostExecute(TaskData result) {\n             throw new IllegalStateException(String.format(\"Task %s didn't finish in %d ms\", taskType, timeoutMs));\n         }\n     }\n+    /**\n+     * Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n+     * If not, the test halts and is ignored.\n+     * Example:\n+     * <pre>:\n+     *   assumeThat(1, is(1)); // passes\n+     *   foo(); // will execute\n+     *   assumeThat(0, is(1)); // assumption failure! test halts\n+     *   int x = 1 / 0; // will never execute\n+     * </pre>\n+     *\n+     * @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as {@code assumeThat(1, is(\"a\"))}\n+     * @param actual the computed value being compared\n+     * @param matcher an expression, built of {@link Matcher}s, specifying allowed values\n+     * @see org.hamcrest.CoreMatchers\n+     * @see org.junit.matchers.JUnitMatchers\n+     */\n+    public <T> void assumeThat(T actual, Matcher<T> matcher) {\n+        this.advanceRobolectricLooper();\n+        Assume.assumeThat(actual, matcher);\n+    }\n+\n+    /**\n+     * Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n+     * If not, the test halts and is ignored.\n+     * Example:\n+     * <pre>:\n+     *   assumeThat(\"alwaysPasses\", 1, is(1)); // passes\n+     *   foo(); // will execute\n+     *   assumeThat(\"alwaysFails\", 0, is(1)); // assumption failure! test halts\n+     *   int x = 1 / 0; // will never execute\n+     * </pre>\n+     *\n+     * @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as {@code assumeThat(1, is(\"a\"))}\n+     * @param actual the computed value being compared\n+     * @param matcher an expression, built of {@link Matcher}s, specifying allowed values\n+     * @see org.hamcrest.CoreMatchers\n+     * @see org.junit.matchers.JUnitMatchers\n+     */\n+    public <T> void assumeThat(String message, T actual, Matcher<T> matcher) {\n+        this.advanceRobolectricLooper();\n+        Assume.assumeThat(message, actual, matcher);\n+    }\n+\n+\n+\n+    /**\n+     * If called with an expression evaluating to {@code false}, the test will halt and be ignored.\n+     *\n+     * @param b If <code>false</code>, the method will attempt to stop the test and ignore it by\n+     * throwing {@link AssumptionViolatedException}.\n+     * @param message A message to pass to {@link AssumptionViolatedException}.\n+     */\n+    public void assumeTrue(String message, boolean b) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMzI5Nw=="}, "originalCommit": {"oid": "94afb42a5b60e76386d5c3a5575798099b3ebfb1"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIzOTY2OQ==", "bodyText": "I only saw a single method when I reviewed", "url": "https://github.com/ankidroid/Anki-Android/pull/6708#discussion_r465239669", "createdAt": "2020-08-04T18:16:09Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/RobolectricTest.java", "diffHunk": "@@ -291,4 +295,61 @@ public void onPostExecute(TaskData result) {\n             throw new IllegalStateException(String.format(\"Task %s didn't finish in %d ms\", taskType, timeoutMs));\n         }\n     }\n+    /**\n+     * Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n+     * If not, the test halts and is ignored.\n+     * Example:\n+     * <pre>:\n+     *   assumeThat(1, is(1)); // passes\n+     *   foo(); // will execute\n+     *   assumeThat(0, is(1)); // assumption failure! test halts\n+     *   int x = 1 / 0; // will never execute\n+     * </pre>\n+     *\n+     * @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as {@code assumeThat(1, is(\"a\"))}\n+     * @param actual the computed value being compared\n+     * @param matcher an expression, built of {@link Matcher}s, specifying allowed values\n+     * @see org.hamcrest.CoreMatchers\n+     * @see org.junit.matchers.JUnitMatchers\n+     */\n+    public <T> void assumeThat(T actual, Matcher<T> matcher) {\n+        this.advanceRobolectricLooper();\n+        Assume.assumeThat(actual, matcher);\n+    }\n+\n+    /**\n+     * Call to assume that <code>actual</code> satisfies the condition specified by <code>matcher</code>.\n+     * If not, the test halts and is ignored.\n+     * Example:\n+     * <pre>:\n+     *   assumeThat(\"alwaysPasses\", 1, is(1)); // passes\n+     *   foo(); // will execute\n+     *   assumeThat(\"alwaysFails\", 0, is(1)); // assumption failure! test halts\n+     *   int x = 1 / 0; // will never execute\n+     * </pre>\n+     *\n+     * @param <T> the static type accepted by the matcher (this can flag obvious compile-time problems such as {@code assumeThat(1, is(\"a\"))}\n+     * @param actual the computed value being compared\n+     * @param matcher an expression, built of {@link Matcher}s, specifying allowed values\n+     * @see org.hamcrest.CoreMatchers\n+     * @see org.junit.matchers.JUnitMatchers\n+     */\n+    public <T> void assumeThat(String message, T actual, Matcher<T> matcher) {\n+        this.advanceRobolectricLooper();\n+        Assume.assumeThat(message, actual, matcher);\n+    }\n+\n+\n+\n+    /**\n+     * If called with an expression evaluating to {@code false}, the test will halt and be ignored.\n+     *\n+     * @param b If <code>false</code>, the method will attempt to stop the test and ignore it by\n+     * throwing {@link AssumptionViolatedException}.\n+     * @param message A message to pass to {@link AssumptionViolatedException}.\n+     */\n+    public void assumeTrue(String message, boolean b) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTIxMzI5Nw=="}, "originalCommit": {"oid": "94afb42a5b60e76386d5c3a5575798099b3ebfb1"}, "originalPosition": 70}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4937, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}