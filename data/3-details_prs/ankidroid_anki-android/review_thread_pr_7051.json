{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzMjM3MDg3", "number": 7051, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0Mjo0N1rOEh5_pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0Mjo0N1rOEh5_pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzOTg4NjQ1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/utils/ImportUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0Mjo0N1rOHPe6RA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwMDo0Mjo0N1rOHPe6RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTk5NzEyNA==", "bodyText": "I was ambivalent on this - but it's better as an Optional, I'll fix", "url": "https://github.com/ankidroid/Anki-Android/pull/7051#discussion_r485997124", "createdAt": "2020-09-10T00:42:47Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/utils/ImportUtils.java", "diffHunk": "@@ -151,51 +155,51 @@ private String handleContentProviderFile(Context context, Intent intent, Uri dat\n                 } else {\n                     Timber.e(\"Could not retrieve filename from ContentProvider or read content as ZipFile\");\n                     AnkiDroidApp.sendExceptionReport(new RuntimeException(\"Could not import apkg from ContentProvider\"), \"IntentHandler.java\", \"apkg import failed\");\n-                    return AnkiDroidApp.getAppResources().getString(R.string.import_error_content_provider, AnkiDroidApp.getManualUrl() + \"#importing\");\n+                    return ImportResult.fromErrorString(AnkiDroidApp.getAppResources().getString(R.string.import_error_content_provider, AnkiDroidApp.getManualUrl() + \"#importing\"));\n                 }\n             }\n \n             if (!isValidPackageName(filename)) {\n                 if (isAnkiDatabase(filename)) {\n                     //.anki2 files aren't supported by Anki Desktop, we should eventually support them, because we can\n                     //but for now, show a \"nice\" error.\n-                    return context.getResources().getString(R.string.import_error_load_imported_database);\n+                    return ImportResult.fromErrorString(context.getResources().getString(R.string.import_error_load_imported_database));\n                 } else {\n                     // Don't import if file doesn't have an Anki package extension\n-                    return context.getResources().getString(R.string.import_error_not_apkg_extension, filename);\n+                    return ImportResult.fromErrorString(context.getResources().getString(R.string.import_error_not_apkg_extension, filename));\n                 }\n             } else {\n                 // Copy to temporary file\n                 filename = ensureValidLength(filename);\n                 String tempOutDir = Uri.fromFile(new File(context.getCacheDir(), filename)).getEncodedPath();\n-                errorMessage = copyFileToCache(context, data, tempOutDir) ? null : context.getString(R.string.import_error_copy_file_to_cache);\n+                String errorMessage = copyFileToCache(context, data, tempOutDir) ? null : context.getString(R.string.import_error_copy_file_to_cache);\n                 // Show import dialog\n                 if (errorMessage != null) {\n                     AnkiDroidApp.sendExceptionReport(new RuntimeException(\"Error importing apkg file\"), \"IntentHandler.java\", \"apkg import failed\");\n-                    return errorMessage;\n+                    return ImportResult.fromErrorString(errorMessage);\n                 }\n \n-                errorMessage = validateZipFile(context, tempOutDir);\n-                if (errorMessage != null) {\n+                ImportResult validateZipResult = validateZipFile(context, tempOutDir);\n+                if (!validateZipResult.isSuccess()) {\n                     //noinspection ResultOfMethodCallIgnored\n                     new File(tempOutDir).delete();\n-                    return errorMessage;\n+                    return validateZipResult;\n                 }\n \n                 sendShowImportFileDialogMsg(tempOutDir);\n-                return null;\n+                return ImportResult.fromSuccess();\n             }\n         }\n \n-\n-        protected String validateZipFile(Context context, String filePath) {\n+        @NonNull\n+        protected ImportResult validateZipFile(Context ctx, String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33b3de8787138e8524b046c2e2456d0dc2b653f0"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 914, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}