{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg4Mzg2Njgy", "number": 5820, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOToyMTo0OFrODoEkVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxNzoxNFrODoc3Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzQ0NDcxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxOToyMTo0OFrOF2bKwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQyMDozNzo1MlrOF2beGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMjU0NQ==", "bodyText": "\"The application's implementation of this callback should only attempt to clean up the specific WebView given as a parameter, and should not assume that other WebView instances are affected\" doesn't that mean that we can return true? And the right log level would be information?", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r392612545", "createdAt": "2020-03-14T19:21:48Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -1541,12 +1554,107 @@ public void onPageFinished(WebView view, String url) {\n                 drawMark();\n                 view.loadUrl(\"javascript:onPageFinished();\");\n             }\n+\n+            /** Fix: #5780 - WebView Renderer OOM crashes reviewer */\n+            @Override\n+            @TargetApi(Build.VERSION_CODES.O)\n+            public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {\n+\n+                if (mCard == null || !mCard.equals(view)) {\n+                    //A view crashed that wasn't ours. Unexpected.\n+                    Timber.wtf(\"Unexpected WebView Renderer terminated. Crashed: %b\",  detail.didCrash());\n+                    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9cc0244a723bfaa29ca1645da811160b1479a714"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxNzQ5OA==", "bodyText": "You're correct. Anything that returns false will cause an issue. https://chromium.googlesource.com/chromium/src.git/+/62.0.3178.1/android_webview/browser/aw_browser_terminator.cc?autodive=0%2F%2F#72", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r392617498", "createdAt": "2020-03-14T20:37:52Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -1541,12 +1554,107 @@ public void onPageFinished(WebView view, String url) {\n                 drawMark();\n                 view.loadUrl(\"javascript:onPageFinished();\");\n             }\n+\n+            /** Fix: #5780 - WebView Renderer OOM crashes reviewer */\n+            @Override\n+            @TargetApi(Build.VERSION_CODES.O)\n+            public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {\n+\n+                if (mCard == null || !mCard.equals(view)) {\n+                    //A view crashed that wasn't ours. Unexpected.\n+                    Timber.wtf(\"Unexpected WebView Renderer terminated. Crashed: %b\",  detail.didCrash());\n+                    return false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjYxMjU0NQ=="}, "originalCommit": {"oid": "9cc0244a723bfaa29ca1645da811160b1479a714"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQxNDA2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxNDoyMFrOF3AZ5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxNDoyMFrOF3AZ5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMjYyOA==", "bodyText": "Since you return in the other branch of the if, the else seems unnecessary - I have a preference to not use an else in these cases. What I'd prefer is to have the logic that is in the else currently moved out (deleting the else) and a comment that positively asserts the state allowing us to continue executing, e.g. \"If we got here, it's a recoverable crash and the first time on this card, attempt to re-display\", followed by the logic", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r393222628", "createdAt": "2020-03-16T18:14:20Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -1541,12 +1554,124 @@ public void onPageFinished(WebView view, String url) {\n                 drawMark();\n                 view.loadUrl(\"javascript:onPageFinished();\");\n             }\n+\n+            /** Fix: #5780 - WebView Renderer OOM crashes reviewer */\n+            @Override\n+            @TargetApi(Build.VERSION_CODES.O)\n+            public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {\n+\n+                if (mCard == null || !mCard.equals(view)) {\n+                    //A view crashed that wasn't ours.\n+                    //We have nothing to handle. Returning false is a desire to crash, so return true.\n+                    Timber.i(\"Unrelated WebView Renderer terminated. Crashed: %b\",  detail.didCrash());\n+                    return true;\n+                }\n+\n+                Timber.e(\"WebView Renderer process terminated. Crashed: %b\",  detail.didCrash());\n+\n+                //Destroy the current WebView (to ensure WebView is GCed).\n+                //Otherwise, we get the following error:\n+                //\"crash wasn't handled by all associated webviews, triggering application crash\"\n+                destroyWebView(mCard);\n+                ViewGroup parent = (ViewGroup) mCardFrame.getParent();\n+                parent.removeView(mCardFrame);\n+                mCard = null;\n+                mCardFrame = null;\n+                //Even with the above, I occasionally saw the above error. Manually trigger the GC.\n+                //I'll keep this line unless I see another crash, which would point to another underlying issue.\n+                System.gc();\n+\n+                //We only want to show one message per branch.\n+\n+                //It's not necessarily an OOM crash, false implies a general code which is for \"system terminated\".\n+                int errorCauseId = detail.didCrash() ? R.string.webview_crash_unknown : R.string.webview_crash_oom;\n+                String errorCauseString = getResources().getString(errorCauseId);\n+\n+                if (!canRecoverFromWebViewRendererCrash()) {\n+                    Timber.e(\"Unrecoverable WebView Render crash\");\n+                    String errorMessage = getResources().getString(R.string.webview_crash_fatal, errorCauseString);\n+                    UIUtils.showThemedToast(AbstractFlashcardViewer.this, errorMessage, false);\n+                    finishWithoutAnimation();\n+                    return true;\n+                }\n+\n+                if (webViewRendererLastCrashedOnCard(mCurrentCard.getId())) {\n+                    Timber.e(\"Web Renderer crash loop on card: %d\", mCurrentCard.getId());\n+                    displayRenderLoopDialog(mCurrentCard, detail);\n+                    return true;\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2f090db7d59eaf5f81f1734867df00e51aca107"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQxOTY1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxNTo0MFrOF3AdMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoyOTo0NVrOF3A7gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMzQ3NQ==", "bodyText": "Logs will only tell if you include a log, seems like a Timber.w might apply here as we think we can recover but it is unexpected / unwanted state?", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r393223475", "createdAt": "2020-03-16T18:15:40Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -1541,12 +1554,124 @@ public void onPageFinished(WebView view, String url) {\n                 drawMark();\n                 view.loadUrl(\"javascript:onPageFinished();\");\n             }\n+\n+            /** Fix: #5780 - WebView Renderer OOM crashes reviewer */\n+            @Override\n+            @TargetApi(Build.VERSION_CODES.O)\n+            public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {\n+\n+                if (mCard == null || !mCard.equals(view)) {\n+                    //A view crashed that wasn't ours.\n+                    //We have nothing to handle. Returning false is a desire to crash, so return true.\n+                    Timber.i(\"Unrelated WebView Renderer terminated. Crashed: %b\",  detail.didCrash());\n+                    return true;\n+                }\n+\n+                Timber.e(\"WebView Renderer process terminated. Crashed: %b\",  detail.didCrash());\n+\n+                //Destroy the current WebView (to ensure WebView is GCed).\n+                //Otherwise, we get the following error:\n+                //\"crash wasn't handled by all associated webviews, triggering application crash\"\n+                destroyWebView(mCard);\n+                ViewGroup parent = (ViewGroup) mCardFrame.getParent();\n+                parent.removeView(mCardFrame);\n+                mCard = null;\n+                mCardFrame = null;\n+                //Even with the above, I occasionally saw the above error. Manually trigger the GC.\n+                //I'll keep this line unless I see another crash, which would point to another underlying issue.\n+                System.gc();\n+\n+                //We only want to show one message per branch.\n+\n+                //It's not necessarily an OOM crash, false implies a general code which is for \"system terminated\".\n+                int errorCauseId = detail.didCrash() ? R.string.webview_crash_unknown : R.string.webview_crash_oom;\n+                String errorCauseString = getResources().getString(errorCauseId);\n+\n+                if (!canRecoverFromWebViewRendererCrash()) {\n+                    Timber.e(\"Unrecoverable WebView Render crash\");\n+                    String errorMessage = getResources().getString(R.string.webview_crash_fatal, errorCauseString);\n+                    UIUtils.showThemedToast(AbstractFlashcardViewer.this, errorMessage, false);\n+                    finishWithoutAnimation();\n+                    return true;\n+                }\n+\n+                if (webViewRendererLastCrashedOnCard(mCurrentCard.getId())) {\n+                    Timber.e(\"Web Renderer crash loop on card: %d\", mCurrentCard.getId());\n+                    displayRenderLoopDialog(mCurrentCard, detail);\n+                    return true;\n+                } else {\n+                    // This logic may need to be better defined. The card could have changed by the time we get here.\n+                    lastCrashingCardId = mCurrentCard.getId();\n+                }\n+\n+                String nonFatalError = getResources().getString(R.string.webview_crash_nonfatal, errorCauseString);\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, nonFatalError, false);\n+\n+                //inflate a new instance of mCardFrame\n+                mCardFrame = inflateNewView(R.id.flashcard);\n+                parent.addView(mCardFrame);\n+\n+                recreateWebView();\n+                displayCardQuestion();\n+\n+                //We handled the crash and can continue.\n+                return true;\n+            }\n+\n+\n+            @TargetApi(Build.VERSION_CODES.O)\n+            private void displayRenderLoopDialog(Card mCurrentCard, RenderProcessGoneDetail detail) {\n+                String cardInformation = Long.toString(mCurrentCard.getId());\n+                Resources res = getResources();\n+\n+                String errorDetails = detail.didCrash()\n+                        ? res.getString(R.string.webview_crash_unknwon_detailed)\n+                        : res.getString(R.string.webview_crash_oom_details);\n+                new MaterialDialog.Builder(AbstractFlashcardViewer.this)\n+                        .title(res.getString(R.string.webview_crash_loop_dialog_title))\n+                        .content(res.getString(R.string.webview_crash_loop_dialog_content, cardInformation, errorDetails))\n+                        .positiveText(R.string.dialog_ok)\n+                        .onPositive((materialDialog, dialogAction) -> finishWithoutAnimation())\n+                        .show();\n+            }\n         });\n         // Set transparent color to prevent flashing white when night mode enabled\n         webView.setBackgroundColor(Color.argb(1, 0, 0, 0));\n         return webView;\n     }\n \n+    private boolean webViewRendererLastCrashedOnCard(long cardId) {\n+        return lastCrashingCardId != null && lastCrashingCardId == cardId;\n+    }\n+\n+\n+    private boolean canRecoverFromWebViewRendererCrash() {\n+        // DEFECT\n+        // If we don't have a card to render, we're in a bad state. The class doesn't currently track state\n+        // well enough to be able to know exactly where we are in the initialisation pipeline.\n+        // so it's best to mark the crash as non-recoverable.\n+        // We should fix this, but it's very unlikely that we'll ever get here. Logs will tell", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2f090db7d59eaf5f81f1734867df00e51aca107"}, "originalPosition": 141}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMTIzNA==", "bodyText": "Done at the call site\nTimber.e(\"Unrecoverable WebView Render crash\");", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r393231234", "createdAt": "2020-03-16T18:29:45Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -1541,12 +1554,124 @@ public void onPageFinished(WebView view, String url) {\n                 drawMark();\n                 view.loadUrl(\"javascript:onPageFinished();\");\n             }\n+\n+            /** Fix: #5780 - WebView Renderer OOM crashes reviewer */\n+            @Override\n+            @TargetApi(Build.VERSION_CODES.O)\n+            public boolean onRenderProcessGone(WebView view, RenderProcessGoneDetail detail) {\n+\n+                if (mCard == null || !mCard.equals(view)) {\n+                    //A view crashed that wasn't ours.\n+                    //We have nothing to handle. Returning false is a desire to crash, so return true.\n+                    Timber.i(\"Unrelated WebView Renderer terminated. Crashed: %b\",  detail.didCrash());\n+                    return true;\n+                }\n+\n+                Timber.e(\"WebView Renderer process terminated. Crashed: %b\",  detail.didCrash());\n+\n+                //Destroy the current WebView (to ensure WebView is GCed).\n+                //Otherwise, we get the following error:\n+                //\"crash wasn't handled by all associated webviews, triggering application crash\"\n+                destroyWebView(mCard);\n+                ViewGroup parent = (ViewGroup) mCardFrame.getParent();\n+                parent.removeView(mCardFrame);\n+                mCard = null;\n+                mCardFrame = null;\n+                //Even with the above, I occasionally saw the above error. Manually trigger the GC.\n+                //I'll keep this line unless I see another crash, which would point to another underlying issue.\n+                System.gc();\n+\n+                //We only want to show one message per branch.\n+\n+                //It's not necessarily an OOM crash, false implies a general code which is for \"system terminated\".\n+                int errorCauseId = detail.didCrash() ? R.string.webview_crash_unknown : R.string.webview_crash_oom;\n+                String errorCauseString = getResources().getString(errorCauseId);\n+\n+                if (!canRecoverFromWebViewRendererCrash()) {\n+                    Timber.e(\"Unrecoverable WebView Render crash\");\n+                    String errorMessage = getResources().getString(R.string.webview_crash_fatal, errorCauseString);\n+                    UIUtils.showThemedToast(AbstractFlashcardViewer.this, errorMessage, false);\n+                    finishWithoutAnimation();\n+                    return true;\n+                }\n+\n+                if (webViewRendererLastCrashedOnCard(mCurrentCard.getId())) {\n+                    Timber.e(\"Web Renderer crash loop on card: %d\", mCurrentCard.getId());\n+                    displayRenderLoopDialog(mCurrentCard, detail);\n+                    return true;\n+                } else {\n+                    // This logic may need to be better defined. The card could have changed by the time we get here.\n+                    lastCrashingCardId = mCurrentCard.getId();\n+                }\n+\n+                String nonFatalError = getResources().getString(R.string.webview_crash_nonfatal, errorCauseString);\n+                UIUtils.showThemedToast(AbstractFlashcardViewer.this, nonFatalError, false);\n+\n+                //inflate a new instance of mCardFrame\n+                mCardFrame = inflateNewView(R.id.flashcard);\n+                parent.addView(mCardFrame);\n+\n+                recreateWebView();\n+                displayCardQuestion();\n+\n+                //We handled the crash and can continue.\n+                return true;\n+            }\n+\n+\n+            @TargetApi(Build.VERSION_CODES.O)\n+            private void displayRenderLoopDialog(Card mCurrentCard, RenderProcessGoneDetail detail) {\n+                String cardInformation = Long.toString(mCurrentCard.getId());\n+                Resources res = getResources();\n+\n+                String errorDetails = detail.didCrash()\n+                        ? res.getString(R.string.webview_crash_unknwon_detailed)\n+                        : res.getString(R.string.webview_crash_oom_details);\n+                new MaterialDialog.Builder(AbstractFlashcardViewer.this)\n+                        .title(res.getString(R.string.webview_crash_loop_dialog_title))\n+                        .content(res.getString(R.string.webview_crash_loop_dialog_content, cardInformation, errorDetails))\n+                        .positiveText(R.string.dialog_ok)\n+                        .onPositive((materialDialog, dialogAction) -> finishWithoutAnimation())\n+                        .show();\n+            }\n         });\n         // Set transparent color to prevent flashing white when night mode enabled\n         webView.setBackgroundColor(Color.argb(1, 0, 0, 0));\n         return webView;\n     }\n \n+    private boolean webViewRendererLastCrashedOnCard(long cardId) {\n+        return lastCrashingCardId != null && lastCrashingCardId == cardId;\n+    }\n+\n+\n+    private boolean canRecoverFromWebViewRendererCrash() {\n+        // DEFECT\n+        // If we don't have a card to render, we're in a bad state. The class doesn't currently track state\n+        // well enough to be able to know exactly where we are in the initialisation pipeline.\n+        // so it's best to mark the crash as non-recoverable.\n+        // We should fix this, but it's very unlikely that we'll ever get here. Logs will tell", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyMzQ3NQ=="}, "originalCommit": {"oid": "e2f090db7d59eaf5f81f1734867df00e51aca107"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzNzQyNDkxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoxNzoxNFrOF3Aghw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxODoyNzo1MVrOF3A3nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyNDMyNw==", "bodyText": "I'm not sure you intend for this line to remain here? seems like it would crash any time we showed answer, and is likely just for local testing?", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r393224327", "createdAt": "2020-03-16T18:17:14Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -2026,6 +2155,7 @@ protected String cleanTypedAnswer(String answer) {\n \n     protected void displayCardAnswer() {\n         Timber.d(\"displayCardAnswer()\");\n+        crashWebViewRenderer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2f090db7d59eaf5f81f1734867df00e51aca107"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIzMDIzOQ==", "bodyText": "\ud83e\udd26\u200d\u2642", "url": "https://github.com/ankidroid/Anki-Android/pull/5820#discussion_r393230239", "createdAt": "2020-03-16T18:27:51Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -2026,6 +2155,7 @@ protected String cleanTypedAnswer(String answer) {\n \n     protected void displayCardAnswer() {\n         Timber.d(\"displayCardAnswer()\");\n+        crashWebViewRenderer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzIyNDMyNw=="}, "originalCommit": {"oid": "e2f090db7d59eaf5f81f1734867df00e51aca107"}, "originalPosition": 181}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 612, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}