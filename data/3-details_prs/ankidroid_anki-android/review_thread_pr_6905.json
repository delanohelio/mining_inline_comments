{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4NTEzMjE3", "number": 6905, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDowODowN1rOEY2rVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoyMTozNlrOEY2wiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk3MTEwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDowODowN1rOHBWZoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDowODowN1rOHBWZoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3NzYzMw==", "bodyText": "yessss! love seeing a test for it that pokes the problem", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471177633", "createdAt": "2020-08-17T00:08:07Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {\n+        // #6903", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3a4d16ebcc8990f3db5b4268845124ea4255d50"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk3OTgxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoxNzowMlrOHBWeAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoxNzowMlrOHBWeAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3ODc1NQ==", "bodyText": "Optional: you could implement the interface to remove this method. Likely not worth it", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471178755", "createdAt": "2020-08-17T00:17:02Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -128,25 +128,56 @@ public int compareTo(LrnCard o) {\n         }\n     }\n \n-    protected abstract class CardQueue<T extends Card.Cache> extends LinkedList<T> {\n+    protected abstract class CardQueue<T extends Card.Cache> {\n+        private final LinkedList<T> mQueue = new LinkedList<>();\n+\n         public void loadFirstCard() {\n-            if (!isEmpty()) {\n+            if (!mQueue.isEmpty()) {\n                 // No nead to reload. If the card was changed, reset would have been called and emptied the queue\n-                get(0).loadQA(false, false);\n+                mQueue.get(0).loadQA(false, false);\n             }\n         }\n \n         public Card removeFirstCard() throws NoSuchElementException {\n-            return remove().getCard();\n+            return mQueue.remove().getCard();\n         }\n \n         public boolean remove(long cid) {\n             // CardCache and LrnCache with the same id will be considered as equal so it's a valid implementation.\n-            return remove(new Card.Cache(mCol, cid));\n+            return mQueue.remove(new Card.Cache(mCol, cid));\n+        }\n+\n+        public void add(T elt) {\n+            mQueue.add(elt);\n+        }\n+\n+        public void clear() {\n+            mQueue.clear();\n+        }\n+\n+        public boolean isEmpty() {\n+            return isEmpty();\n+        }\n+\n+        public int size() {\n+            return mQueue.size();\n+        }\n+\n+        protected LinkedList<T> getQueue() {\n+            return mQueue;\n+        }\n+\n+        public void shuffle(Random r) {\n+            Collections.shuffle(mQueue, r);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk4MTAzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoxODozM1rOHBWerg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDozNDowNlrOHBWnGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3ODkyNg==", "bodyText": "Optional: assertThat(queue, hasSize(0));", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471178926", "createdAt": "2020-08-17T00:18:33Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTA4Mw==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181083", "createdAt": "2020-08-17T00:34:06Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3ODkyNg=="}, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk4MjE3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoxOTo0NVrOHBWfQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMzo1ODo1OFrOHBY-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTA3Mg==", "bodyText": "Didn't we add getFirstCard for situations like this? Could save a little time per test", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179072", "createdAt": "2020-08-17T00:19:45Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIxOTc2MA==", "bodyText": "Indeed. If we really want efficiency however, directly querying the database would be better, since here we create a card object only to get its id.\nNo way to gets cids from note I thing", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471219760", "createdAt": "2020-08-17T03:58:58Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTA3Mg=="}, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk4Mjk0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoyMDoyMlrOHBWflw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDozNDo0N1rOHBWneA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTE1OQ==", "bodyText": "Could do with better naming", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179159", "createdAt": "2020-08-17T00:20:22Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTE3Ng==", "bodyText": "siblingCorrectlyBuried", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181176", "createdAt": "2020-08-17T00:34:47Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTE1OQ=="}, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk4MzQzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoyMDo0NFrOHBWf2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDozNToyMlrOHBWn9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTIyNw==", "bodyText": "Java naming standards, and could do with a more descriptive name", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179227", "createdAt": "2020-08-17T00:20:44Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTMwMg==", "bodyText": "testCardQueue\nThat's really the whole point, testing this class", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181302", "createdAt": "2020-08-17T00:35:22Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTIyNw=="}, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NDk4NDQxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDoyMTozNlrOHBWgWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwMDozNTo0NVrOHBWoJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTM1NA==", "bodyText": "Note.cards() is slow, factor it into one call", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471179354", "createdAt": "2020-08-17T00:21:36Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {\n+        // #6903\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Models models = col.getModels();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        final int nbNote = 2;\n+        Note[] notes = new Note[nbNote];\n+        for (int i = 0; i < nbNote; i++) {\n+            Note note  = addNoteUsingBasicAndReversedModel(\"front\", \"back\");\n+            notes[i] = note;\n+            Timber.d(\"note %d has cards %d and %d\", i, note.cards().get(0).getId(), note.cards().get(1).getId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE4MTM0OQ==", "bodyText": "Actually, I remove the timber.\u00a0Used it for debugging. I don't want it anymore", "url": "https://github.com/ankidroid/Anki-Android/pull/6905#discussion_r471181349", "createdAt": "2020-08-17T00:35:45Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -139,4 +146,62 @@ public void onPostExecute(TaskData result) {\n         waitForAsyncTasksToComplete();\n         assertTrue(executed[0]);\n     }\n+\n+    @Test\n+    public void CardQueue() {\n+        Collection col = getCol();\n+        SchedV2 sched = (SchedV2) col.getSched();\n+        SchedV2.SimpleCardQueue queue = sched.new SimpleCardQueue();\n+        assertEquals(queue.size(), 0);\n+        final int nbCard = 6;\n+        long[] cids = new long[nbCard];\n+        for (int i = 0; i < nbCard; i++) {\n+            Note note = addNoteUsingBasicModel(\"foo\", \"bar\");\n+            ArrayList<Card> cards = note.cards();\n+            Card card = cards.get(0);\n+            long cid = card.getId();\n+            cids[i] = cid;\n+            queue.add(cid);\n+        }\n+        assertEquals(queue.size(), nbCard);\n+        assertEquals(queue.removeFirstCard().getId(), cids[0]);\n+        assertEquals(queue.size(), nbCard - 1);\n+        queue.remove(cids[1]);\n+        assertEquals(queue.size(), nbCard - 2);\n+        queue.remove(cids[3]);\n+        assertEquals(queue.size(), nbCard - 3);\n+        assertEquals(queue.removeFirstCard().getId(), cids[2]);\n+        assertEquals(queue.size(), nbCard - 4);\n+        assertEquals(queue.removeFirstCard().getId(), cids[4]);\n+        assertEquals(queue.size(), nbCard - 5);\n+    }\n+\n+    @Test\n+    public void getCards() {\n+        // #6903\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Models models = col.getModels();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        final int nbNote = 2;\n+        Note[] notes = new Note[nbNote];\n+        for (int i = 0; i < nbNote; i++) {\n+            Note note  = addNoteUsingBasicAndReversedModel(\"front\", \"back\");\n+            notes[i] = note;\n+            Timber.d(\"note %d has cards %d and %d\", i, note.cards().get(0).getId(), note.cards().get(1).getId());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTE3OTM1NA=="}, "originalCommit": {"oid": "fc2330b50796048dfa11fe53a0d8ca8fbcb36052"}, "originalPosition": 75}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4857, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}