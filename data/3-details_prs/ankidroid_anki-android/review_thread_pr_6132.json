{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDA0MDE1", "number": 6132, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NFrOD66PjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OVrOD66PlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk4MjUzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NFrOGS-vHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NFrOGS-vHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyMg==", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.reviewer.CardMarker'", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555422", "createdAt": "2020-05-09T22:43:54Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java", "diffHunk": "@@ -55,6 +55,7 @@\n \n import timber.log.Timber;\n \n+import static com.ichi2.anki.reviewer.CardMarker.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk4MjU2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NVrOGS-vIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMjo1Njo0NlrOGS_-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555426", "createdAt": "2020-05-09T22:43:55Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTU1NQ==", "bodyText": "@david-allison-1 have your test method return true/false and assert on that? or don't worry about it :-). Conformity is important and overrated at the same time if that makes sense", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575555", "createdAt": "2020-05-10T02:52:56Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg=="}, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTc4OQ==", "bodyText": "I'd rather not worry about it. I don't think it makes the test unclear. Maintainer's choice \ud83d\ude09\nThe ideal would be to write something along the lines of: https://github.com/nunit/docs/wiki/TestCase-Attribute, but I haven't found a nice Java Library that supports it with decent syntax.", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575789", "createdAt": "2020-05-10T02:56:00Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg=="}, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTg0Mw==", "bodyText": "resolved -> works for me :-)", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575843", "createdAt": "2020-05-10T02:56:46Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg=="}, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk4MjU3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NlrOGS-vIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQwMjo1OTozOVrOGS__zQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw==", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.reviewer.CardMarker'", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555427", "createdAt": "2020-05-09T22:43:56Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -131,6 +132,7 @@\n \n import static com.ichi2.anki.cardviewer.CardAppearance.calculateDynamicFontSize;\n import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n+import static com.ichi2.anki.reviewer.CardMarker.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NTkwOA==", "bodyText": "Again, this is something I disagree with, because it is used, just not all of the imports taken from the wildcard.", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422575908", "createdAt": "2020-05-10T02:57:58Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -131,6 +132,7 @@\n \n import static com.ichi2.anki.cardviewer.CardAppearance.calculateDynamicFontSize;\n import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n+import static com.ichi2.anki.reviewer.CardMarker.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw=="}, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU3NjA3Nw==", "bodyText": "Yeah. I see the point, but I have a hard time finding value in a glob import for a clearly delimited sub-package. It isn't like I'm going to get lost reasoning about what's imported there. It's not java.util.*. That's why I'm letting these tidy sub-package glob imports go. Fine by me", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422576077", "createdAt": "2020-05-10T02:59:39Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -131,6 +132,7 @@\n \n import static com.ichi2.anki.cardviewer.CardAppearance.calculateDynamicFontSize;\n import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n+import static com.ichi2.anki.reviewer.CardMarker.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw=="}, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk4MjU4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1N1rOGS-vJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1N1rOGS-vJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyOA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555428", "createdAt": "2020-05-09T22:43:57Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+    }\n+\n+    @Test\n+    public void doubleTapBlueUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 141}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk4MjU5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OFrOGS-vJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OFrOGS-vJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyOQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555429", "createdAt": "2020-05-09T22:43:58Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMDk4MjYwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OVrOGS-vJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OVrOGS-vJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQzMQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555431", "createdAt": "2020-05-09T22:43:59Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 131}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 410, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}