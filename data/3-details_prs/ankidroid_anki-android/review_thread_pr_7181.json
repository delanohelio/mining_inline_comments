{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5OTUxNzM3", "number": 7181, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoxODowOVrOEle8Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoyMDowMVrOEle9Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzM5Njg3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoxODowOVrOHU_IZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoxODowOVrOHU_IZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2NzkxMQ==", "bodyText": "Extract this above", "url": "https://github.com/ankidroid/Anki-Android/pull/7181#discussion_r491767911", "createdAt": "2020-09-21T02:18:09Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2384,11 +2411,15 @@ public void __renderPage() {\n             if (getSupportActionBar() != null) {\n                 getSupportActionBar().setSubtitle(null);\n             }\n+            if (mToolbarSearchView != null) {\n+                mDeckListAdapter.getFilter().filter(mToolbarSearchView.getQuery());\n+            }\n             // We're done here\n             return;\n         }\n \n-        mDeckListAdapter.buildDeckList(mDueTree, getCol());\n+        CharSequence filter = mToolbarSearchView != null ? mToolbarSearchView.getQuery() : null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1316eba3f37d62abf936c2722c52c68f25a63f4"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzM5ODA0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoxOToxNlrOHU_JDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoxOToxNlrOHU_JDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2ODA3OQ==", "bodyText": "Only necessary to add a private constructor - needs no code", "url": "https://github.com/ankidroid/Anki-Android/pull/7181#discussion_r491768079", "createdAt": "2020-09-21T02:19:16Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java", "diffHunk": "@@ -346,7 +361,87 @@ public Integer getDue() {\n         }\n     }\n \n-    public List<AbstractDeckTreeNode> getDeckList() {\n-        return mDeckList;\n+    private List<AbstractDeckTreeNode> getDeckList() {\n+        return mCurrentDeckList;\n+    }\n+\n+\n+    @Override\n+    public Filter getFilter() {\n+        return new DeckFilter();\n+    }\n+\n+\n+    private class DeckFilter extends Filter {\n+        private ArrayList<AbstractDeckTreeNode> mFilteredDecks;\n+        private DeckFilter() {\n+            super();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1316eba3f37d62abf936c2722c52c68f25a63f4"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3NzM5OTIyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoyMDowMVrOHU_JpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwMjoyMDowMVrOHU_JpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTc2ODIyOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // If a deck contains the string, then all ts children are valid\n          \n          \n            \n                        // If a deck contains the string, then all its children are valid", "url": "https://github.com/ankidroid/Anki-Android/pull/7181#discussion_r491768228", "createdAt": "2020-09-21T02:20:01Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/widgets/DeckAdapter.java", "diffHunk": "@@ -346,7 +361,87 @@ public Integer getDue() {\n         }\n     }\n \n-    public List<AbstractDeckTreeNode> getDeckList() {\n-        return mDeckList;\n+    private List<AbstractDeckTreeNode> getDeckList() {\n+        return mCurrentDeckList;\n+    }\n+\n+\n+    @Override\n+    public Filter getFilter() {\n+        return new DeckFilter();\n+    }\n+\n+\n+    private class DeckFilter extends Filter {\n+        private ArrayList<AbstractDeckTreeNode> mFilteredDecks;\n+        private DeckFilter() {\n+            super();\n+            mFilteredDecks = new ArrayList<>();\n+        }\n+\n+        private List<AbstractDeckTreeNode> getAllDecks() {\n+            return mDeckList;\n+        }\n+\n+        @Override\n+        protected FilterResults performFiltering(CharSequence constraint) {\n+            mFilteredDecks.clear();\n+\n+            List<AbstractDeckTreeNode> allDecks = getAllDecks();\n+            if (TextUtils.isEmpty(constraint)) {\n+                mFilteredDecks.addAll(allDecks);\n+            } else {\n+                final String filterPattern = constraint.toString().toLowerCase().trim();\n+                List<AbstractDeckTreeNode> filteredDecks = filterDecks(filterPattern, allDecks);\n+                mFilteredDecks.addAll(filteredDecks);\n+            }\n+\n+            return FilterResultsUtils.fromCollection(mFilteredDecks);\n+        }\n+\n+        @Override\n+        protected void publishResults(CharSequence constraint, FilterResults results) {\n+            mCurrentDeckList.clear();\n+            mCurrentDeckList.addAll(mFilteredDecks);\n+            notifyDataSetChanged();\n+        }\n+\n+\n+        private List<AbstractDeckTreeNode> filterDecks(String filterPattern, List<AbstractDeckTreeNode> allDecks) {\n+            ArrayList<AbstractDeckTreeNode> ret = new ArrayList<>();\n+            for (AbstractDeckTreeNode tag : allDecks) {\n+                AbstractDeckTreeNode node = filterDeckInternal(filterPattern, tag);\n+                if (node != null) {\n+                    ret.add(node);\n+                }\n+            }\n+            return ret;\n+        }\n+\n+        @Nullable\n+        private <T extends AbstractDeckTreeNode<T>> T filterDeckInternal(String filterPattern, T root) {\n+\n+            // If a deck contains the string, then all ts children are valid", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c1316eba3f37d62abf936c2722c52c68f25a63f4"}, "originalPosition": 168}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 871, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}