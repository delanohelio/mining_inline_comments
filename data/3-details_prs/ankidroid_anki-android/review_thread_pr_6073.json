{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NjA2NDU4", "number": 6073, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0ODoyNFrOD1WDeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo1MzowNFrOD1WNfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjYyNDU4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0ODoyNFrOGKvNmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozNjowMlrOGKxf8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjQ3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;\n          \n          \n            \n                    String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag + \"(.+?)\" + otag + \"/\\\\1\" + ctag;", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413912474", "createdAt": "2020-04-23T15:48:24Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -107,11 +107,10 @@ private void compile_regexps() {\n         String otag = Pattern.quote(sOtag);\n         String ctag = Pattern.quote(sCtag);\n \n-        String section = String.format(Locale.US,\n-                \"%s[\\\\#|^]([^\\\\}]*)%s(.+?)%s/\\\\1%s\", otag, ctag, otag, ctag);\n+        String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "469886b949e99ff94b241713a1c8ce6afb8624c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxNDcwNA==", "bodyText": "Those might be faster with a StringBuilder (which is like StringBuffer for constructing Strings but is even faster because it is unsynchronized - meaning it is perfect for single-threaded use like this)", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413914704", "createdAt": "2020-04-23T15:51:10Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -107,11 +107,10 @@ private void compile_regexps() {\n         String otag = Pattern.quote(sOtag);\n         String ctag = Pattern.quote(sCtag);\n \n-        String section = String.format(Locale.US,\n-                \"%s[\\\\#|^]([^\\\\}]*)%s(.+?)%s/\\\\1%s\", otag, ctag, otag, ctag);\n+        String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjQ3NA=="}, "originalCommit": {"oid": "469886b949e99ff94b241713a1c8ce6afb8624c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0ODg3Mg==", "bodyText": "Oh okay. I didn't know string buffer.\nTo be honest, this is really really quick. It's executed at most twice during a note. I changed it for the sake of readability. I believe that %s is less readable than variable name. This never appeared in my profiler as a place were time was spent", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413948872", "createdAt": "2020-04-23T16:34:34Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -107,11 +107,10 @@ private void compile_regexps() {\n         String otag = Pattern.quote(sOtag);\n         String ctag = Pattern.quote(sCtag);\n \n-        String section = String.format(Locale.US,\n-                \"%s[\\\\#|^]([^\\\\}]*)%s(.+?)%s/\\\\1%s\", otag, ctag, otag, ctag);\n+        String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjQ3NA=="}, "originalCommit": {"oid": "469886b949e99ff94b241713a1c8ce6afb8624c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk0OTkzNg==", "bodyText": "To be extremly clear. I'm speaking of the method compile_regexps. The other method modified were a place were some time were spent", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413949936", "createdAt": "2020-04-23T16:36:02Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -107,11 +107,10 @@ private void compile_regexps() {\n         String otag = Pattern.quote(sOtag);\n         String ctag = Pattern.quote(sCtag);\n \n-        String section = String.format(Locale.US,\n-                \"%s[\\\\#|^]([^\\\\}]*)%s(.+?)%s/\\\\1%s\", otag, ctag, otag, ctag);\n+        String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjQ3NA=="}, "originalCommit": {"oid": "469886b949e99ff94b241713a1c8ce6afb8624c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjYyNjU4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo0ODo0NlrOGKvOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNToyOTo0OFrOGMGERw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String tag = otag+\"(#|=|&|!|>|\\\\{)?(.+?)\\\\1?\"+ctag+\"+\";\n          \n          \n            \n                    String tag = otag + \"(#|=|&|!|>|\\\\{)?(.+?)\\\\1?\" + ctag + \"+\";", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413912772", "createdAt": "2020-04-23T15:48:46Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -107,11 +107,10 @@ private void compile_regexps() {\n         String otag = Pattern.quote(sOtag);\n         String ctag = Pattern.quote(sCtag);\n \n-        String section = String.format(Locale.US,\n-                \"%s[\\\\#|^]([^\\\\}]*)%s(.+?)%s/\\\\1%s\", otag, ctag, otag, ctag);\n+        String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;\n         sSection_re = Pattern.compile(section, Pattern.MULTILINE | Pattern.DOTALL);\n \n-        String tag = String.format(Locale.US, \"%s(#|=|&|!|>|\\\\{)?(.+?)\\\\1?%s+\", otag, ctag);\n+        String tag = otag+\"(#|=|&|!|>|\\\\{)?(.+?)\\\\1?\"+ctag+\"+\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "469886b949e99ff94b241713a1c8ce6afb8624c2"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMzNTQ5NQ==", "bodyText": "Corrected.", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r415335495", "createdAt": "2020-04-26T15:29:48Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -107,11 +107,10 @@ private void compile_regexps() {\n         String otag = Pattern.quote(sOtag);\n         String ctag = Pattern.quote(sCtag);\n \n-        String section = String.format(Locale.US,\n-                \"%s[\\\\#|^]([^\\\\}]*)%s(.+?)%s/\\\\1%s\", otag, ctag, otag, ctag);\n+        String section = otag + \"[\\\\#|^]([^\\\\}]*)\" + ctag +\"(.+?)\"+otag+\"/\\\\1\" + ctag;\n         sSection_re = Pattern.compile(section, Pattern.MULTILINE | Pattern.DOTALL);\n \n-        String tag = String.format(Locale.US, \"%s(#|=|&|!|>|\\\\{)?(.+?)\\\\1?%s+\", otag, ctag);\n+        String tag = otag+\"(#|=|&|!|>|\\\\{)?(.+?)\\\\1?\"+ctag+\"+\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxMjc3Mg=="}, "originalCommit": {"oid": "469886b949e99ff94b241713a1c8ce6afb8624c2"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU3MjY1MDIzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTo1MzowNFrOGKvcpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNjozODowM1rOGKxlvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxNjMyNQ==", "bodyText": "StringBuilder might be even faster, only safe for single thread use but I believe it fits here https://developer.android.com/reference/java/lang/StringBuilder", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413916325", "createdAt": "2020-04-23T15:53:04Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -118,31 +118,32 @@ private void compile_regexps() {\n      * Expands sections.\n      */\n     private String render_sections(String template, Map<String, String> context) {\n-        while (true) {\n-            Matcher match = sSection_re.matcher(template);\n-            if (!match.find()) {\n-                break;\n-            }\n-\n+        StringBuffer sb = new StringBuffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ce89ce620e6ee8e31fa87db4d2ad694cc080718"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzk1MTQyMw==", "bodyText": "The trouble is that the class Matcher takes a StringBuffer. And it seems those two types are incompatible.\nOf course, I could just copy the code from the library and replace the string buffer by a string builder. It would increase the complexity of the PR, but not a lot. And actually, it would even do one nice thing: it would allow to use a single buffer, instead of creating a new buffer at each level of the recursion (i.e. for each {{#...}}...{{/...}} and each {{^...}}...{{/...}})", "url": "https://github.com/ankidroid/Anki-Android/pull/6073#discussion_r413951423", "createdAt": "2020-04-23T16:38:03Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/template/Template.java", "diffHunk": "@@ -118,31 +118,32 @@ private void compile_regexps() {\n      * Expands sections.\n      */\n     private String render_sections(String template, Map<String, String> context) {\n-        while (true) {\n-            Matcher match = sSection_re.matcher(template);\n-            if (!match.find()) {\n-                break;\n-            }\n-\n+        StringBuffer sb = new StringBuffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzkxNjMyNQ=="}, "originalCommit": {"oid": "1ce89ce620e6ee8e31fa87db4d2ad694cc080718"}, "originalPosition": 10}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 379, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}