{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNDcwNzgy", "number": 5949, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyNTo1N1rODvv2_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0MDoxNFrODxELeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzkzNzkxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyNTo1N1rOGCWvmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyNTo1N1rOGCWvmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyMjk2OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Timber.i(\"Found %d decks with no home deck\", cardIds.size());\n          \n          \n            \n                    Timber.i(\"Found %d cards with no home deck\", cardIds.size());", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405122968", "createdAt": "2020-04-07T21:25:57Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1604,11 +1604,66 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         file = new File(mPath);\n         long newSize = file.length();\n         // if any problems were found, force a full sync\n-        if (problems.size() > 0) {\n+        if (result.hasProblems()) {\n             modSchemaNoCheck();\n         }\n-        logProblems(problems);\n-        return (oldSize - newSize) / 1024;\n+        logProblems(result.getProblems());\n+        return (result.getOldSize() - newSize) / 1024;\n+    }\n+\n+\n+    private List<String> ensureCardsHaveHomeDeck(Runnable notifyProgress, CheckDatabaseResult result) {\n+        // #5932 - a card may not have a home deck if:\n+        // * It is in a dynamic deck, and has odid = 0.\n+        // * It is in a dynamic deck, and the odid refers to a dynamic deck.\n+        notifyProgress.run();\n+        //Both of these cases can be fixed by setting the odid to 1.\n+\n+        //get the deck Ids to query\n+        Long[] dynDeckIds = getDecks().allDynamicDeckIds();\n+        //make it mutable\n+        List<Long> dynIdsAndZero = new ArrayList<>(Arrays.asList(dynDeckIds));\n+        dynIdsAndZero.add(0L);\n+\n+        ArrayList<Long> cardIds = mDb.queryColumn(Long.class, \"select id from cards where did in \" +\n+                Utils.ids2str(dynDeckIds) +\n+                \"and odid in \" +\n+                Utils.ids2str(dynIdsAndZero)\n+                , 0);\n+\n+        notifyProgress.run();\n+\n+        if (cardIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        //PERF: in debug, 3 seconds for 87 cards.\n+        //So, roughly 30 for 1000 cards\n+        Timber.i(\"Found %d decks with no home deck\", cardIds.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c232d775250a6a1869d429da3c8eee06fffd1b5"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk0NjA0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyODozN1rOGCW0xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTo0OTowOFrOGCXaww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDI5Mw==", "bodyText": "By that PERF comment do you mean it took 3 seconds to execute the query above, where you attempt to get the list of the cards? If that is true, I wonder if you ordered the query opposite so it reduced by odid in dynIdsAndZero it would be smaller - thinking being that in the intersection of the two sets the odid clause should be a smaller initial set thus making for faster execution of the did clause. Pure speculation without numbers, and I may be misattributing the PERf comment. I don't want fixIntegrity to take 30s for each 1000 cards though, it would be orders of magnitude slower than it is now if I understand that correctly?", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405124293", "createdAt": "2020-04-07T21:28:37Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1604,11 +1604,66 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         file = new File(mPath);\n         long newSize = file.length();\n         // if any problems were found, force a full sync\n-        if (problems.size() > 0) {\n+        if (result.hasProblems()) {\n             modSchemaNoCheck();\n         }\n-        logProblems(problems);\n-        return (oldSize - newSize) / 1024;\n+        logProblems(result.getProblems());\n+        return (result.getOldSize() - newSize) / 1024;\n+    }\n+\n+\n+    private List<String> ensureCardsHaveHomeDeck(Runnable notifyProgress, CheckDatabaseResult result) {\n+        // #5932 - a card may not have a home deck if:\n+        // * It is in a dynamic deck, and has odid = 0.\n+        // * It is in a dynamic deck, and the odid refers to a dynamic deck.\n+        notifyProgress.run();\n+        //Both of these cases can be fixed by setting the odid to 1.\n+\n+        //get the deck Ids to query\n+        Long[] dynDeckIds = getDecks().allDynamicDeckIds();\n+        //make it mutable\n+        List<Long> dynIdsAndZero = new ArrayList<>(Arrays.asList(dynDeckIds));\n+        dynIdsAndZero.add(0L);\n+\n+        ArrayList<Long> cardIds = mDb.queryColumn(Long.class, \"select id from cards where did in \" +\n+                Utils.ids2str(dynDeckIds) +\n+                \"and odid in \" +\n+                Utils.ids2str(dynIdsAndZero)\n+                , 0);\n+\n+        notifyProgress.run();\n+\n+        if (cardIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        //PERF: in debug, 3 seconds for 87 cards.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c232d775250a6a1869d429da3c8eee06fffd1b5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzMzAwMg==", "bodyText": "Search is instantaneous, we only hit the PERF case when errors are found as we're performing the modifications individually, rather than batching with SQL. I'll elaborate more in a parent comment, but I think we should rethink the approach and just do purely deck-based", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405133002", "createdAt": "2020-04-07T21:46:55Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1604,11 +1604,66 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         file = new File(mPath);\n         long newSize = file.length();\n         // if any problems were found, force a full sync\n-        if (problems.size() > 0) {\n+        if (result.hasProblems()) {\n             modSchemaNoCheck();\n         }\n-        logProblems(problems);\n-        return (oldSize - newSize) / 1024;\n+        logProblems(result.getProblems());\n+        return (result.getOldSize() - newSize) / 1024;\n+    }\n+\n+\n+    private List<String> ensureCardsHaveHomeDeck(Runnable notifyProgress, CheckDatabaseResult result) {\n+        // #5932 - a card may not have a home deck if:\n+        // * It is in a dynamic deck, and has odid = 0.\n+        // * It is in a dynamic deck, and the odid refers to a dynamic deck.\n+        notifyProgress.run();\n+        //Both of these cases can be fixed by setting the odid to 1.\n+\n+        //get the deck Ids to query\n+        Long[] dynDeckIds = getDecks().allDynamicDeckIds();\n+        //make it mutable\n+        List<Long> dynIdsAndZero = new ArrayList<>(Arrays.asList(dynDeckIds));\n+        dynIdsAndZero.add(0L);\n+\n+        ArrayList<Long> cardIds = mDb.queryColumn(Long.class, \"select id from cards where did in \" +\n+                Utils.ids2str(dynDeckIds) +\n+                \"and odid in \" +\n+                Utils.ids2str(dynIdsAndZero)\n+                , 0);\n+\n+        notifyProgress.run();\n+\n+        if (cardIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        //PERF: in debug, 3 seconds for 87 cards.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDI5Mw=="}, "originalCommit": {"oid": "9c232d775250a6a1869d429da3c8eee06fffd1b5"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEzNDAxOQ==", "bodyText": "Ah - that makes more sense. So if there are 1000 (!!) cards with errors it would take 30 seconds, as a one-off. That doesn't bother me as I think that would be a massive number of homeless cards (nearly unimaginable), for a small number of people, once. But I'll wait for re-thought approach", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405134019", "createdAt": "2020-04-07T21:49:08Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1604,11 +1604,66 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         file = new File(mPath);\n         long newSize = file.length();\n         // if any problems were found, force a full sync\n-        if (problems.size() > 0) {\n+        if (result.hasProblems()) {\n             modSchemaNoCheck();\n         }\n-        logProblems(problems);\n-        return (oldSize - newSize) / 1024;\n+        logProblems(result.getProblems());\n+        return (result.getOldSize() - newSize) / 1024;\n+    }\n+\n+\n+    private List<String> ensureCardsHaveHomeDeck(Runnable notifyProgress, CheckDatabaseResult result) {\n+        // #5932 - a card may not have a home deck if:\n+        // * It is in a dynamic deck, and has odid = 0.\n+        // * It is in a dynamic deck, and the odid refers to a dynamic deck.\n+        notifyProgress.run();\n+        //Both of these cases can be fixed by setting the odid to 1.\n+\n+        //get the deck Ids to query\n+        Long[] dynDeckIds = getDecks().allDynamicDeckIds();\n+        //make it mutable\n+        List<Long> dynIdsAndZero = new ArrayList<>(Arrays.asList(dynDeckIds));\n+        dynIdsAndZero.add(0L);\n+\n+        ArrayList<Long> cardIds = mDb.queryColumn(Long.class, \"select id from cards where did in \" +\n+                Utils.ids2str(dynDeckIds) +\n+                \"and odid in \" +\n+                Utils.ids2str(dynIdsAndZero)\n+                , 0);\n+\n+        notifyProgress.run();\n+\n+        if (cardIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        //PERF: in debug, 3 seconds for 87 cards.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDI5Mw=="}, "originalCommit": {"oid": "9c232d775250a6a1869d429da3c8eee06fffd1b5"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk0ODIzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyOToxMlrOGCW2Dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMToyOToxMlrOGCW2Dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNDYyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    String message = String.format(Locale.US, \"Fixed %d decks with no home deck\", fixed);\n          \n          \n            \n                    String message = String.format(Locale.US, \"Fixed %d cards with no home deck\", fixed);", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405124622", "createdAt": "2020-04-07T21:29:12Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1604,11 +1604,66 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         file = new File(mPath);\n         long newSize = file.length();\n         // if any problems were found, force a full sync\n-        if (problems.size() > 0) {\n+        if (result.hasProblems()) {\n             modSchemaNoCheck();\n         }\n-        logProblems(problems);\n-        return (oldSize - newSize) / 1024;\n+        logProblems(result.getProblems());\n+        return (result.getOldSize() - newSize) / 1024;\n+    }\n+\n+\n+    private List<String> ensureCardsHaveHomeDeck(Runnable notifyProgress, CheckDatabaseResult result) {\n+        // #5932 - a card may not have a home deck if:\n+        // * It is in a dynamic deck, and has odid = 0.\n+        // * It is in a dynamic deck, and the odid refers to a dynamic deck.\n+        notifyProgress.run();\n+        //Both of these cases can be fixed by setting the odid to 1.\n+\n+        //get the deck Ids to query\n+        Long[] dynDeckIds = getDecks().allDynamicDeckIds();\n+        //make it mutable\n+        List<Long> dynIdsAndZero = new ArrayList<>(Arrays.asList(dynDeckIds));\n+        dynIdsAndZero.add(0L);\n+\n+        ArrayList<Long> cardIds = mDb.queryColumn(Long.class, \"select id from cards where did in \" +\n+                Utils.ids2str(dynDeckIds) +\n+                \"and odid in \" +\n+                Utils.ids2str(dynIdsAndZero)\n+                , 0);\n+\n+        notifyProgress.run();\n+\n+        if (cardIds.isEmpty()) {\n+            return Collections.emptyList();\n+        }\n+\n+        //PERF: in debug, 3 seconds for 87 cards.\n+        //So, roughly 30 for 1000 cards\n+        Timber.i(\"Found %d decks with no home deck\", cardIds.size());\n+        int fixed = 0;\n+        for (long cardId : cardIds) {\n+            try {\n+                Card c = getCard(cardId);\n+                c.setDid(Consts.DEFAULT_DECK_ID);\n+                c.setODid(0L);\n+                c.note().addTag(mContext.getString(R.string.missing_home_deck_tag));\n+\n+                c.note().flush();\n+                c.flush();\n+                fixed++;\n+            } catch (Exception e) {\n+                Timber.e(e, \"Failed to fix card '%d'\", cardId);\n+            }\n+        }\n+\n+        result.setCardsWithFixedHomeDeckCount(fixed);\n+\n+        if (fixed == 0) {\n+            return Collections.emptyList();\n+        }\n+        Timber.d(\"Completed\");\n+        String message = String.format(Locale.US, \"Fixed %d decks with no home deck\", fixed);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c232d775250a6a1869d429da3c8eee06fffd1b5"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzk1MjE3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/res/values/03-dialogs.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTozMDo0MFrOGCW4nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMTozMDo0MFrOGCW4nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTEyNTI3Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <string name=\"integrity_check_fixed_no_home_deck\" >%d cards have been moved to the default deck. Please see the manual to locate them.</string>\n          \n          \n            \n                <string name=\"integrity_check_fixed_no_home_deck\">%d cards with incorrect home decks were moved to the default deck. Please see the manual to locate them.</string>", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405125277", "createdAt": "2020-04-07T21:30:40Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/res/values/03-dialogs.xml", "diffHunk": "@@ -159,6 +159,8 @@\n     <string name=\"integrity_check_continue_anyway\">Continue Anyway</string>\n     <string name=\"integrity_check_insufficient_space\">Check Database uses a large amount of temporary storage.\\n\\nIt is strongly recommended that you have at least %s free space on your device before continuing.</string>>\n     <string name=\"integrity_check_insufficient_space_extra_content\">\\n\\nYou currently have %s free.</string>\n+    <string name=\"integrity_check_fixed_no_home_deck\" >%d cards have been moved to the default deck. Please see the manual to locate them.</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c232d775250a6a1869d429da3c8eee06fffd1b5"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODYxNTQyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1MzozNVrOGDDv6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1MzozNVrOGDDv6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2MDMzMA==", "bodyText": "this (int) worries me, but I hope it's not a realistic problem.", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405860330", "createdAt": "2020-04-08T22:53:35Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2386,4 +2352,49 @@ public void onPostExecute(TaskData result) {\n             }\n         });\n     }\n+\n+\n+    private class CheckDatabaseListener extends DeckTask.TaskListener {\n+        @Override\n+        public void onPreExecute() {\n+            mProgressDialog = StyledProgressDialog.show(DeckPicker.this, AnkiDroidApp.getAppResources().getString(R.string.app_name),\n+                    getResources().getString(R.string.check_db_message), false);\n+        }\n+\n+\n+        @Override\n+        public void onPostExecute(TaskData result) {\n+            if (mProgressDialog != null && mProgressDialog.isShowing()) {\n+                mProgressDialog.dismiss();\n+            }\n+            if (result != null && result.getBoolean() && result.getObjArray() != null && result.getObjArray().length > 0) {\n+                String msg;\n+                Collection.CheckDatabaseResult databaseResult = (Collection.CheckDatabaseResult) result.getObjArray()[0];\n+\n+                int count = databaseResult.getCardsWithFixedHomeDeckCount();\n+                if (count != 0) {\n+                    String message = getResources().getString(R.string.integrity_check_fixed_no_home_deck, count);\n+                    UIUtils.showThemedToast(DeckPicker.this,  message, false);\n+                }\n+\n+                long shrunkInMb = Math.round(databaseResult.getSizeChangeInKb() / 1024.0);\n+                if (shrunkInMb > 0.0) {\n+                    msg = String.format(Locale.getDefault(),\n+                    getResources().getString(R.string.check_db_acknowledge_shrunk), (int) shrunkInMb);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab42db81fd471627980d7e9688391a1df6db0265"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxODYyMjA3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Consts.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NjoyNlrOGDDz7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMjo1NjoyNlrOGDDz7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTg2MTM1OQ==", "bodyText": "No longer used, but nice to have", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r405861359", "createdAt": "2020-04-08T22:56:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Consts.java", "diffHunk": "@@ -102,4 +102,6 @@\n     public static final int REVLOG_CRAM = 3;\n \n     // The labels defined in consts.py are in AnkiDroid's resources files.\n+\n+    public static final long DEFAULT_DECK_ID = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab42db81fd471627980d7e9688391a1df6db0265"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc0NDYyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/res/values/03-dialogs.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMToxN1rOGEWY4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTozMToxN1rOGEWY4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNDMwNg==", "bodyText": "This seems like exactly what we discussed - can you add a quick chunk to the manual? A little blurb right around here should be perfect I think: https://github.com/ankidroid/ankidroiddocs/blob/master/manual.asc#L111", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r407214306", "createdAt": "2020-04-12T15:31:17Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/res/values/03-dialogs.xml", "diffHunk": "@@ -159,6 +159,8 @@\n     <string name=\"integrity_check_continue_anyway\">Continue Anyway</string>\n     <string name=\"integrity_check_insufficient_space\">Check Database uses a large amount of temporary storage.\\n\\nIt is strongly recommended that you have at least %s free space on your device before continuing.</string>>\n     <string name=\"integrity_check_insufficient_space_extra_content\">\\n\\nYou currently have %s free.</string>\n+    <string name=\"integrity_check_fixed_no_home_deck\">%d cards with incorrect home decks were recovered. Please see the manual for more information.</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ec68078b15b8a594dc00fe21dc21557f5166c5"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzc1Mjg5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0MDoxNFrOGEWc5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNTo0MDoxNFrOGEWc5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxNTMzMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //Both of these cases can be fixed by setting the odid to 1.\n          \n          \n            \n                    // Both of these cases can be fixed by moving the decks to a known-good deck\n          \n          \n            \n                    // This fix will create a 'Recovered Cards' deck at top of deck list and move\n          \n          \n            \n                    // all cards in dynamic decks with no original deck id to this new deck\n          \n      \n    \n    \n  \n\nThat's a suggestion, but really it would be better as a javadoc at the top of the method", "url": "https://github.com/ankidroid/Anki-Android/pull/5949#discussion_r407215332", "createdAt": "2020-04-12T15:40:14Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1603,12 +1603,67 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         }\n         file = new File(mPath);\n         long newSize = file.length();\n+        result.setNewSize(newSize);\n         // if any problems were found, force a full sync\n-        if (problems.size() > 0) {\n+        if (result.hasProblems()) {\n             modSchemaNoCheck();\n         }\n-        logProblems(problems);\n-        return (oldSize - newSize) / 1024;\n+        logProblems(result.getProblems());\n+        return result;\n+    }\n+\n+\n+    private List<String> ensureCardsHaveHomeDeck(Runnable notifyProgress, CheckDatabaseResult result) {\n+        Timber.d(\"ensureCardsHaveHomeDeck()\");\n+        // #5932 - a card may not have a home deck if:\n+        // * It is in a dynamic deck, and has odid = 0.\n+        // * It is in a dynamic deck, and the odid refers to a dynamic deck.\n+        notifyProgress.run();\n+        //Both of these cases can be fixed by setting the odid to 1.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16ec68078b15b8a594dc00fe21dc21557f5166c5"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 524, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}