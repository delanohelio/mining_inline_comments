{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NDA0MDE1", "number": 6132, "title": "Add Gestures for Flags", "bodyText": "Purpose / Description\nUser Request: They want to be able to set flags via gestures.\nFixes\nFixes #6131\nApproach\nDefine Gestures and map them to a toggle function\nHow Has This Been Tested?\nTested on my phone. Unit Tests incoming\nChecklist\n\n You have not changed whitespace unnecessarily (it makes diffs hard to read)\n You have a descriptive commit message with a short title (first line, max 50 chars).\n Your code follows the style of the project (e.g. never omit braces in if statements)\n You have commented your code, particularly in hard-to-understand areas\n You have performed a self-review of your own code", "createdAt": "2020-05-08T19:51:08Z", "url": "https://github.com/ankidroid/Anki-Android/pull/6132", "merged": true, "mergeCommit": {"oid": "7dfe347580d9938ef42dfebc9588cfcbd9ad1108"}, "closed": true, "closedAt": "2020-05-10T21:53:30Z", "author": {"login": "david-allison-1"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcfW3RWgH2gAyNDE1NDA0MDE1OmNhMmRjZTA5MzU3OGRmMGFmYmFmNzRmZjIxZDU2ZTMwNzczZWE4Y2Q=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcgCT3XAFqTQwODc4NTE1Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ca2dce093578df0afbaf74ff21d56e30773ea8cd", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ca2dce093578df0afbaf74ff21d56e30773ea8cd", "committedDate": "2020-05-08T19:16:01Z", "message": "NF: Add FlagDef interface\n\nAdds validation when flags are expected"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c691f380cdffb9ceee52777d3537e5d2176b24f5", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c691f380cdffb9ceee52777d3537e5d2176b24f5", "committedDate": "2020-05-08T19:42:25Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}, "afterCommit": {"oid": "c9cac0c2140e3cff9d8b181bdc29d9466e81e15c", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c9cac0c2140e3cff9d8b181bdc29d9466e81e15c", "committedDate": "2020-05-08T22:35:20Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9cac0c2140e3cff9d8b181bdc29d9466e81e15c", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c9cac0c2140e3cff9d8b181bdc29d9466e81e15c", "committedDate": "2020-05-08T22:35:20Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}, "afterCommit": {"oid": "055b5732047a8bd1d8217d41d8bdea6036ccbae9", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/055b5732047a8bd1d8217d41d8bdea6036ccbae9", "committedDate": "2020-05-08T22:36:36Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "055b5732047a8bd1d8217d41d8bdea6036ccbae9", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/055b5732047a8bd1d8217d41d8bdea6036ccbae9", "committedDate": "2020-05-08T22:36:36Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}, "afterCommit": {"oid": "59210b4a110455944e87364af01f4ae890ab5b7d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/59210b4a110455944e87364af01f4ae890ab5b7d", "committedDate": "2020-05-09T22:32:25Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "committedDate": "2020-05-09T22:41:07Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59210b4a110455944e87364af01f4ae890ab5b7d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/59210b4a110455944e87364af01f4ae890ab5b7d", "committedDate": "2020-05-09T22:32:25Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}, "afterCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7", "committedDate": "2020-05-09T22:41:07Z", "message": "Enable Flag Gestures\n\nFixes #6131\n\nFairly simple: selecting a flag for a second time toggles it off"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NTYx", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408689561", "createdAt": "2020-05-09T22:43:54Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NFrOGS-vHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NFrOGS-vHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyMg==", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.reviewer.CardMarker'", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555422", "createdAt": "2020-05-09T22:43:54Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/Reviewer.java", "diffHunk": "@@ -55,6 +55,7 @@\n \n import timber.log.Timber;\n \n+import static com.ichi2.anki.reviewer.CardMarker.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NTYz", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408689563", "createdAt": "2020-05-09T22:43:55Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NVrOGS-vIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NVrOGS-vIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNg==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555426", "createdAt": "2020-05-09T22:43:55Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NTY0", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408689564", "createdAt": "2020-05-09T22:43:56Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NlrOGS-vIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1NlrOGS-vIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyNw==", "bodyText": "Issue found: Avoid unused imports such as 'com.ichi2.anki.reviewer.CardMarker'", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555427", "createdAt": "2020-05-09T22:43:56Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -131,6 +132,7 @@\n \n import static com.ichi2.anki.cardviewer.CardAppearance.calculateDynamicFontSize;\n import static com.ichi2.anki.cardviewer.ViewerCommand.*;\n+import static com.ichi2.anki.reviewer.CardMarker.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NTY1", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408689565", "createdAt": "2020-05-09T22:43:57Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1N1rOGS-vJA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1N1rOGS-vJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyOA==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555428", "createdAt": "2020-05-09T22:43:57Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+    }\n+\n+    @Test\n+    public void doubleTapGreenUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+    }\n+\n+    @Test\n+    public void doubleTapBlueUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 141}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NTY2", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408689566", "createdAt": "2020-05-09T22:43:58Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OFrOGS-vJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OFrOGS-vJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQyOQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555429", "createdAt": "2020-05-09T22:43:58Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Njg5NTY4", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408689568", "createdAt": "2020-05-09T22:43:59Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OVrOGS-vJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOVQyMjo0Mzo1OVrOGS-vJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjU1NTQzMQ==", "bodyText": "Issue found: JUnit tests should include assert() or fail()", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#discussion_r422555431", "createdAt": "2020-05-09T22:43:59Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/AbstractFlashcardViewerCommandTest.java", "diffHunk": "@@ -0,0 +1,200 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki;\n+\n+\n+import com.ichi2.anki.cardviewer.ViewerCommand;\n+import com.ichi2.anki.reviewer.CardMarker.FlagDef;\n+import com.ichi2.libanki.Card;\n+\n+import org.junit.Test;\n+\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_BLUE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_GREEN;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_NONE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_ORANGE;\n+import static com.ichi2.anki.reviewer.CardMarker.FLAG_RED;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.mockito.ArgumentMatchers.anyInt;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class AbstractFlashcardViewerCommandTest {\n+\n+    @Test\n+    public void doubleTapSetsNone() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void noneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void doubleNoneDoesNothing() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void flagCanBeChanged() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void unsetUnsets() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+        viewer.executeCommand(ViewerCommand.COMMAND_UNSET_FLAG);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_NONE));\n+    }\n+\n+    @Test\n+    public void tapRedFlagSetsRed() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_RED));\n+    }\n+\n+    @Test\n+    public void tapOrangeFlagSetsOrange() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_ORANGE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_ORANGE));\n+    }\n+\n+    @Test\n+    public void tapGreenFlagSesGreen() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_GREEN);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_GREEN));\n+    }\n+\n+    @Test\n+    public void tapBlueFlagSetsBlue() {\n+        CommandTestCardViewer viewer = getViewer();\n+\n+        viewer.executeCommand(ViewerCommand.COMMAND_TOGGLE_FLAG_BLUE);\n+\n+        assertThat(viewer.getLastFlag(), is(FLAG_BLUE));\n+    }\n+\n+    @Test\n+    public void doubleTapRedUnsets() {\n+        testDoubleTapUnsets(ViewerCommand.COMMAND_TOGGLE_FLAG_RED);\n+    }\n+\n+    @Test\n+    public void doubleTapOrangeUnsets() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "originalPosition": 131}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA4Nzg1MTU3", "url": "https://github.com/ankidroid/Anki-Android/pull/6132#pullrequestreview-408785157", "createdAt": "2020-05-10T21:53:10Z", "commit": {"oid": "c82dcef71b11e703f0ca2d5fd8a66ceda2f8aaa7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3495, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}