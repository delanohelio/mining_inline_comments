{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg1OTM4Mzc5", "number": 7069, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTozNToyOFrOEiyaOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTozNToyOFrOEiyaOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0OTEyOTU0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxNTozNToyOFrOHQ10ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMlQxODozMDowMlrOHQ2uiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTA2Ng==", "bodyText": "AnkiAssert.assertDoesNotThrow(() -> sched.preloadNextCard());", "url": "https://github.com/ankidroid/Anki-Android/pull/7069#discussion_r487421066", "createdAt": "2020-09-12T15:35:28Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -377,4 +377,25 @@ private void addDeckWithExactName(String name) {\n         boolean hasMatch = decks.all().stream().anyMatch(x -> name.equals(x.getString(\"name\")));\n         assertThat(String.format(\"Deck %s should exist\", name), hasMatch, is(true));\n     }\n+\n+\n+\n+    @Test\n+    public void regression_7066() {\n+        Collection col = getCol();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        AbstractSched sched = col.getSched();\n+        addNoteUsingBasicAndReversedModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"plop\", \"foo\");\n+        col.reset();\n+        Card card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        sched.preloadNextCard();\n+        sched.answerCard(card, Consts.BUTTON_THREE);\n+        card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        // Next line was an infinite recursion in 7066. We just want to assert the run halts\n+        sched.preloadNextCard();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "221617876aa2b484a864deb62ffcb1d41c98ee61"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTgxNw==", "bodyText": "May I ask how assertDoesNotThrow test more than running (since it fails if it throws)", "url": "https://github.com/ankidroid/Anki-Android/pull/7069#discussion_r487421817", "createdAt": "2020-09-12T15:44:52Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -377,4 +377,25 @@ private void addDeckWithExactName(String name) {\n         boolean hasMatch = decks.all().stream().anyMatch(x -> name.equals(x.getString(\"name\")));\n         assertThat(String.format(\"Deck %s should exist\", name), hasMatch, is(true));\n     }\n+\n+\n+\n+    @Test\n+    public void regression_7066() {\n+        Collection col = getCol();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        AbstractSched sched = col.getSched();\n+        addNoteUsingBasicAndReversedModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"plop\", \"foo\");\n+        col.reset();\n+        Card card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        sched.preloadNextCard();\n+        sched.answerCard(card, Consts.BUTTON_THREE);\n+        card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        // Next line was an infinite recursion in 7066. We just want to assert the run halts\n+        sched.preloadNextCard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTA2Ng=="}, "originalCommit": {"oid": "221617876aa2b484a864deb62ffcb1d41c98ee61"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMzI1OQ==", "bodyText": "I think it's mostly an optimization vs Codacy saying \"you should assert in a test\"\n\n/** Helper to sort out \"JUnit tests should include assert() or fail()\" quality check */", "url": "https://github.com/ankidroid/Anki-Android/pull/7069#discussion_r487423259", "createdAt": "2020-09-12T16:02:24Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -377,4 +377,25 @@ private void addDeckWithExactName(String name) {\n         boolean hasMatch = decks.all().stream().anyMatch(x -> name.equals(x.getString(\"name\")));\n         assertThat(String.format(\"Deck %s should exist\", name), hasMatch, is(true));\n     }\n+\n+\n+\n+    @Test\n+    public void regression_7066() {\n+        Collection col = getCol();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        AbstractSched sched = col.getSched();\n+        addNoteUsingBasicAndReversedModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"plop\", \"foo\");\n+        col.reset();\n+        Card card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        sched.preloadNextCard();\n+        sched.answerCard(card, Consts.BUTTON_THREE);\n+        card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        // Next line was an infinite recursion in 7066. We just want to assert the run halts\n+        sched.preloadNextCard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTA2Ng=="}, "originalCommit": {"oid": "221617876aa2b484a864deb62ffcb1d41c98ee61"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQzNTkxMg==", "bodyText": "You get an assertion error, rather than a method throwing an exception - which the tools detect differently\nIt's also more explicit that one specific line is under test.", "url": "https://github.com/ankidroid/Anki-Android/pull/7069#discussion_r487435912", "createdAt": "2020-09-12T18:30:02Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -377,4 +377,25 @@ private void addDeckWithExactName(String name) {\n         boolean hasMatch = decks.all().stream().anyMatch(x -> name.equals(x.getString(\"name\")));\n         assertThat(String.format(\"Deck %s should exist\", name), hasMatch, is(true));\n     }\n+\n+\n+\n+    @Test\n+    public void regression_7066() {\n+        Collection col = getCol();\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"bury\", true);\n+        AbstractSched sched = col.getSched();\n+        addNoteUsingBasicAndReversedModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"plop\", \"foo\");\n+        col.reset();\n+        Card card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        sched.preloadNextCard();\n+        sched.answerCard(card, Consts.BUTTON_THREE);\n+        card = sched.getCard();\n+        sched.setCurrentCard(card);\n+        // Next line was an infinite recursion in 7066. We just want to assert the run halts\n+        sched.preloadNextCard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzQyMTA2Ng=="}, "originalCommit": {"oid": "221617876aa2b484a864deb62ffcb1d41c98ee61"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 923, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}