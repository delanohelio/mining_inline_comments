{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMTYzOTg3", "number": 6257, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyMzo0NVrOECErvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyNjoxMlrOEGZrnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjA5MzQxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyMzo0NVrOGeThkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwOToyMzo0NVrOGeThkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQzMDM1NQ==", "bodyText": "Issue found: Avoid long parameter lists.", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r434430355", "createdAt": "2020-06-03T09:23:45Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1007,38 +1007,39 @@ public void updateFieldCache(long[] nids) {\n     /**\n      * Returns hash of id, question, answer.\n      */\n-    public HashMap<String, String> _renderQA(Object[] data) {\n-        return _renderQA(data, false, null, null);\n+    public HashMap<String, String> _renderQA(long cid, long mid, long did, int ord, String tags, String packedFields, int flags) {\n+        return _renderQA(cid, mid, did, ord, tags, packedFields, flags, false, null, null);\n     }\n \n-    public HashMap<String, String> _renderQA(Object[] data, boolean browser, String qfmt, String afmt) {\n+\n+    public HashMap<String, String> _renderQA(long cid, long mid, long did, int ord, String tags, String packedFields, int flags, boolean browser, String qfmt, String afmt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "378024856e7bb75a12fa09049c1c6cf78de79e28"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMzg2MzIyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNDo1OToyMVrOGihSZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxODo1NjoxMlrOGiqoSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDE1MQ==", "bodyText": "String.class should be faster than new String[a.size()] as it removes the array allocation", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r438850151", "createdAt": "2020-06-11T14:59:21Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "diffHunk": "@@ -987,11 +987,13 @@ private void _updateRequired(JSONObject m) {\n             b.add(\"\");\n         }\n         Object[] data;\n-        data = new Object[] {1L, 1L, m.getLong(\"id\"), 1L, t.getInt(\"ord\"), \"\",\n-                             Utils.joinFields(a.toArray(new String[a.size()])), 0};\n+        Long mid = m.getLong(\"id\");\n+        int ord = t.getInt(\"ord\");\n+        String packedFields = Utils.joinFields(a.toArray(new String[a.size()]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b43e8effe2a279133fc07373a4b81b1d044e98b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODk2MDIyNw==", "bodyText": "I don't know what String.class is.\nI should note that the array allocation was already here before, so your remark is probably relevant, whether or not this PR is accepted.", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r438960227", "createdAt": "2020-06-11T17:43:51Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "diffHunk": "@@ -987,11 +987,13 @@ private void _updateRequired(JSONObject m) {\n             b.add(\"\");\n         }\n         Object[] data;\n-        data = new Object[] {1L, 1L, m.getLong(\"id\"), 1L, t.getInt(\"ord\"), \"\",\n-                             Utils.joinFields(a.toArray(new String[a.size()])), 0};\n+        Long mid = m.getLong(\"id\");\n+        int ord = t.getInt(\"ord\");\n+        String packedFields = Utils.joinFields(a.toArray(new String[a.size()]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDE1MQ=="}, "originalCommit": {"oid": "2b43e8effe2a279133fc07373a4b81b1d044e98b"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTAwMzIwOA==", "bodyText": "Hmm... I could have sworn that you could pass in a class instance to obtain a faster array copy.\nAnyway, there's a similar recommended refactoring at the call site which should unintuitively increase performance: https://stackoverflow.com/a/29444594/13121290\nb.toArray(new String[b.size()])\nto:\nb.toArray(new String[0])", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r439003208", "createdAt": "2020-06-11T18:56:12Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "diffHunk": "@@ -987,11 +987,13 @@ private void _updateRequired(JSONObject m) {\n             b.add(\"\");\n         }\n         Object[] data;\n-        data = new Object[] {1L, 1L, m.getLong(\"id\"), 1L, t.getInt(\"ord\"), \"\",\n-                             Utils.joinFields(a.toArray(new String[a.size()])), 0};\n+        Long mid = m.getLong(\"id\");\n+        int ord = t.getInt(\"ord\");\n+        String packedFields = Utils.joinFields(a.toArray(new String[a.size()]));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODg1MDE1MQ=="}, "originalCommit": {"oid": "2b43e8effe2a279133fc07373a4b81b1d044e98b"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNDI2NTU5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNzo1M1rOGilU9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQxNjoyNzo1M1rOGilU9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODkxNjM0Mg==", "bodyText": "Architecturally better as a class, probably bad for performance though.", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r438916342", "createdAt": "2020-06-11T16:27:53Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1007,21 +1007,14 @@ public void updateFieldCache(long[] nids) {\n     /**\n      * Returns hash of id, question, answer.\n      */\n-    public HashMap<String, String> _renderQA(Object[] data) {\n-        return _renderQA(data, false, null, null);\n+    public HashMap<String, String> _renderQA(long cid, long nid, long mid, long did, int ord, String tags, String packedFields, int flags) {\n+        return _renderQA(cid, nid, mid, did, ord, tags, packedFields, flags, false, null, null);\n     }\n \n-    public HashMap<String, String> _renderQA(Object[] data, boolean browser, String qfmt, String afmt) {\n+\n+    public HashMap<String, String> _renderQA(long cid, long nid, long mid, long did, int ord, String tags, String packedFields, int flags, boolean browser, String qfmt, String afmt) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "91fdeb6bcd634fa0c11c18dcc87c4dc32641985b"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTQ3Njc3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNToyNjoxMlrOGlLLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxNjo0ODo1NFrOGlOYmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMzU5Mg==", "bodyText": "The previous code did nothing, which was likely a bug. This performs a mutation.", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r441633592", "createdAt": "2020-06-17T15:26:12Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "diffHunk": "@@ -1060,27 +1052,26 @@ private void _updateRequired(JSONObject m) {\n         type = \"any\";\n         req = new JSONArray();\n         for (int i = 0; i < flds.size(); i++) {\n-            tmp.clear();\n-            tmp.addAll(b);\n-            tmp.set(i, \"1\");\n-            data[6] = Utils.joinFields(tmp.toArray(new String[tmp.size()]));\n+            b[i] = \"1\";\n             // if not the same as empty, this field can make the card non-blank\n-            if (!mCol._renderQA(data).get(\"q\").equals(empty)) {\n+            if (!mCol._renderQA(1L, m, 1L, ord, \"\", b, 0).get(\"q\").equals(empty)) {\n                 req.put(i);\n             }\n+            b[i] = \"\";\n         }\n         return new Object[] { type, req };\n     }\n \n \n     /** Given a joined field string, return available template ordinals */\n-    public ArrayList<Integer> availOrds(JSONObject m, String flds) {\n+    public ArrayList<Integer> availOrds(JSONObject m, String[] sfld) {\n         if (m.getInt(\"type\") == Consts.MODEL_CLOZE) {\n-            return _availClozeOrds(m, flds);\n+            return _availClozeOrds(m, sfld);\n         }\n-        String[] fields = Utils.splitFields(flds);\n-        for (String f : fields) {\n-            f = f.trim();\n+        int nbField = sfld.length;\n+        String[] fields = new String[nbField];\n+        for (int i = 0; i < nbField; i++) {\n+            fields[i] = sfld[i].trim();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6e69a83cf22acbe01e9c4eaa0a8c417c73936f4c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY3NTM5Mw==", "bodyText": "I did not even realized, but yeah, it was clearly a bug. It means that if there was a field which only contained whitespace, new line, etc... it would allow a card to be generated, while upstream would not generate the card. That's interesting that it was never discovered as a problem.\nDo you want me to leave the bug and correct it in another PR ? Do you want me to just remove the \"NF\" since it's not actually NF.\nNice catch anyway.", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r441675393", "createdAt": "2020-06-17T16:31:24Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "diffHunk": "@@ -1060,27 +1052,26 @@ private void _updateRequired(JSONObject m) {\n         type = \"any\";\n         req = new JSONArray();\n         for (int i = 0; i < flds.size(); i++) {\n-            tmp.clear();\n-            tmp.addAll(b);\n-            tmp.set(i, \"1\");\n-            data[6] = Utils.joinFields(tmp.toArray(new String[tmp.size()]));\n+            b[i] = \"1\";\n             // if not the same as empty, this field can make the card non-blank\n-            if (!mCol._renderQA(data).get(\"q\").equals(empty)) {\n+            if (!mCol._renderQA(1L, m, 1L, ord, \"\", b, 0).get(\"q\").equals(empty)) {\n                 req.put(i);\n             }\n+            b[i] = \"\";\n         }\n         return new Object[] { type, req };\n     }\n \n \n     /** Given a joined field string, return available template ordinals */\n-    public ArrayList<Integer> availOrds(JSONObject m, String flds) {\n+    public ArrayList<Integer> availOrds(JSONObject m, String[] sfld) {\n         if (m.getInt(\"type\") == Consts.MODEL_CLOZE) {\n-            return _availClozeOrds(m, flds);\n+            return _availClozeOrds(m, sfld);\n         }\n-        String[] fields = Utils.splitFields(flds);\n-        for (String f : fields) {\n-            f = f.trim();\n+        int nbField = sfld.length;\n+        String[] fields = new String[nbField];\n+        for (int i = 0; i < nbField; i++) {\n+            fields[i] = sfld[i].trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMzU5Mg=="}, "originalCommit": {"oid": "6e69a83cf22acbe01e9c4eaa0a8c417c73936f4c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTY4NjE2OA==", "bodyText": "No need for another PR, I'm happy if you're happy to mark the bugfix", "url": "https://github.com/ankidroid/Anki-Android/pull/6257#discussion_r441686168", "createdAt": "2020-06-17T16:48:54Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Models.java", "diffHunk": "@@ -1060,27 +1052,26 @@ private void _updateRequired(JSONObject m) {\n         type = \"any\";\n         req = new JSONArray();\n         for (int i = 0; i < flds.size(); i++) {\n-            tmp.clear();\n-            tmp.addAll(b);\n-            tmp.set(i, \"1\");\n-            data[6] = Utils.joinFields(tmp.toArray(new String[tmp.size()]));\n+            b[i] = \"1\";\n             // if not the same as empty, this field can make the card non-blank\n-            if (!mCol._renderQA(data).get(\"q\").equals(empty)) {\n+            if (!mCol._renderQA(1L, m, 1L, ord, \"\", b, 0).get(\"q\").equals(empty)) {\n                 req.put(i);\n             }\n+            b[i] = \"\";\n         }\n         return new Object[] { type, req };\n     }\n \n \n     /** Given a joined field string, return available template ordinals */\n-    public ArrayList<Integer> availOrds(JSONObject m, String flds) {\n+    public ArrayList<Integer> availOrds(JSONObject m, String[] sfld) {\n         if (m.getInt(\"type\") == Consts.MODEL_CLOZE) {\n-            return _availClozeOrds(m, flds);\n+            return _availClozeOrds(m, sfld);\n         }\n-        String[] fields = Utils.splitFields(flds);\n-        for (String f : fields) {\n-            f = f.trim();\n+        int nbField = sfld.length;\n+        String[] fields = new String[nbField];\n+        for (int i = 0; i < nbField; i++) {\n+            fields[i] = sfld[i].trim();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTYzMzU5Mg=="}, "originalCommit": {"oid": "6e69a83cf22acbe01e9c4eaa0a8c417c73936f4c"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 283, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}