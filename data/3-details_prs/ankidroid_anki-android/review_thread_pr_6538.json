{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM4NjkwNjU3", "number": 6538, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxOToyNlrOEID_yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxODowOVrOEI9wRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2ODg5NTQ3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoxOToyNlrOGnzEPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxNzoyODo1NlrOGnzZ8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4NDMxNw==", "bodyText": "I like this change a lot I think it makes it more clear to reason about the name, certainly.\nNow I'm going to propose a change that will touch every line of the PR just about, but is also a simple rename refactor in Android Studio :-), \"Splitted\" is not a valid word in English, and the variable really represents an array of the variable's components, so perhaps:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private String[] mSplittedName;\n          \n          \n            \n                    private String[] mNameComponents;", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r444384317", "createdAt": "2020-06-23T17:19:26Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,25 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private String[] mSplittedName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36a754b4f1d682289b428833019933435818a3c2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4OTg3NA==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r444389874", "createdAt": "2020-06-23T17:28:56Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,25 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private String[] mSplittedName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDM4NDMxNw=="}, "originalCommit": {"oid": "36a754b4f1d682289b428833019933435818a3c2"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDA3ODE4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDoxMzo0NlrOGn-uYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMDoyMDowMVrOGn-0vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3NTMzMQ==", "bodyText": "mName is final, and this is the only place we set it\nmNameComponents is built off mName, implying that it can be final as well, and should be set right here\nThen you don't need a method setNameComponents with a null check and worry about whether it is set or not", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r444575331", "createdAt": "2020-06-24T00:13:46Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +177,25 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private String[] mNameComponents;\n         private long mDid;\n-        private int mDepth;\n         private int mRevCount;\n         private int mLrnCount;\n         private int mNewCount;\n         private List<DeckDueTreeNode> mChildren = new ArrayList<>();\n \n-        public DeckDueTreeNode(String[] mName, long mDid, int mRevCount, int mLrnCount, int mNewCount) {\n+        public DeckDueTreeNode(String mName, long mDid, int mRevCount, int mLrnCount, int mNewCount) {\n             this.mName = mName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1423bb175853f8cadbc83ffca7dd2b37684271bb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3Njg5NA==", "bodyText": "The list of deck is used in CardContentProvider and in sync. In both cases, we never need to access the splited name. Splitting string is kind of slow so I want to avoid doing it unless it's need, to speed up those actions.", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r444576894", "createdAt": "2020-06-24T00:19:44Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +177,25 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private String[] mNameComponents;\n         private long mDid;\n-        private int mDepth;\n         private int mRevCount;\n         private int mLrnCount;\n         private int mNewCount;\n         private List<DeckDueTreeNode> mChildren = new ArrayList<>();\n \n-        public DeckDueTreeNode(String[] mName, long mDid, int mRevCount, int mLrnCount, int mNewCount) {\n+        public DeckDueTreeNode(String mName, long mDid, int mRevCount, int mLrnCount, int mNewCount) {\n             this.mName = mName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3NTMzMQ=="}, "originalCommit": {"oid": "1423bb175853f8cadbc83ffca7dd2b37684271bb"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3Njk1OA==", "bodyText": "Never mind, I just recalled I have a method caching splits, so this was a useless optimization", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r444576958", "createdAt": "2020-06-24T00:20:01Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +177,25 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private String[] mNameComponents;\n         private long mDid;\n-        private int mDepth;\n         private int mRevCount;\n         private int mLrnCount;\n         private int mNewCount;\n         private List<DeckDueTreeNode> mChildren = new ArrayList<>();\n \n-        public DeckDueTreeNode(String[] mName, long mDid, int mRevCount, int mLrnCount, int mNewCount) {\n+        public DeckDueTreeNode(String mName, long mDid, int mRevCount, int mLrnCount, int mNewCount) {\n             this.mName = mName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDU3NTMzMQ=="}, "originalCommit": {"oid": "1423bb175853f8cadbc83ffca7dd2b37684271bb"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODA1MjI0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMTo0Nzo0MFrOGpM-PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMzo1MDowMlrOGpPdOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NzM0MA==", "bodyText": "(this comment was duplicated below in your commit for Sched, for SchedV2 it was missing before so nothing to do there)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        // Compose the \"children\" node list. The children is a list of all the nodes that proceed\n          \n          \n            \n                        // the current one that contain the same name[0], except for the current one itself.\n          \n          \n            \n                        // I.e., they are subdecks that stem from this node.\n          \n          \n            \n                        // This is our version of python's itertools.groupby.", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445857340", "createdAt": "2020-06-25T21:47:40Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -245,21 +245,27 @@ private void unburyCardsForDeck(List<Long> allDecks) {\n \n \n     @Override\n-    protected List<DeckDueTreeNode> _groupChildrenMain(List<DeckDueTreeNode> grps) {\n+    protected List<DeckDueTreeNode> _groupChildrenMain(List<DeckDueTreeNode> grps, int depth) {\n         List<DeckDueTreeNode> tree = new ArrayList<>();\n         // group and recurse\n         ListIterator<DeckDueTreeNode> it = grps.listIterator();\n         while (it.hasNext()) {\n             DeckDueTreeNode node = it.next();\n-            String head = node.getDeckNameComponent(0);\n+            String head = node.getDeckNameComponent(depth);\n             // Compose the \"children\" node list. The children is a list of all the nodes that proceed\n             // the current one that contain the same name[0], except for the current one itself.\n             // I.e., they are subdecks that stem from this node.\n             // This is our version of python's itertools.groupby.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bbf24faff866340d6cc2729499f0620f0ee736f9"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg5ODA0Mw==", "bodyText": "Corrected", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445898043", "createdAt": "2020-06-25T23:50:02Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -245,21 +245,27 @@ private void unburyCardsForDeck(List<Long> allDecks) {\n \n \n     @Override\n-    protected List<DeckDueTreeNode> _groupChildrenMain(List<DeckDueTreeNode> grps) {\n+    protected List<DeckDueTreeNode> _groupChildrenMain(List<DeckDueTreeNode> grps, int depth) {\n         List<DeckDueTreeNode> tree = new ArrayList<>();\n         // group and recurse\n         ListIterator<DeckDueTreeNode> it = grps.listIterator();\n         while (it.hasNext()) {\n             DeckDueTreeNode node = it.next();\n-            String head = node.getDeckNameComponent(0);\n+            String head = node.getDeckNameComponent(depth);\n             // Compose the \"children\" node list. The children is a list of all the nodes that proceed\n             // the current one that contain the same name[0], except for the current one itself.\n             // I.e., they are subdecks that stem from this node.\n             // This is our version of python's itertools.groupby.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg1NzM0MA=="}, "originalCommit": {"oid": "bbf24faff866340d6cc2729499f0620f0ee736f9"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODA5MzQ2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowMzowN1rOGpNXvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMzo0MzozOFrOGpPWcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mzg2OQ==", "bodyText": "Wold be nice to have a comment on both of these methods giving an example of what they return", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445863869", "createdAt": "2020-06-25T22:03:07Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -230,32 +228,28 @@ public int compareTo(Object other) {\n \n         @Override\n         public String toString() {\n-            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %d, %s\",\n-                    Arrays.toString(mName), mDid, mDepth, mRevCount, mLrnCount, mNewCount, mChildren);\n+            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %s\",\n+                    mName, mDid, mRevCount, mLrnCount, mNewCount, mChildren);\n         }\n \n-        public String[] getNames() {\n+        public String getFullDeckName() {\n             return mName;\n         }\n \n-        public String getNamePart(int part) {\n-            return mName[part];\n+        public String getDeckNameComponent(int part) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg5NjMwNQ==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445896305", "createdAt": "2020-06-25T23:43:38Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -230,32 +228,28 @@ public int compareTo(Object other) {\n \n         @Override\n         public String toString() {\n-            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %d, %s\",\n-                    Arrays.toString(mName), mDid, mDepth, mRevCount, mLrnCount, mNewCount, mChildren);\n+            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %s\",\n+                    mName, mDid, mRevCount, mLrnCount, mNewCount, mChildren);\n         }\n \n-        public String[] getNames() {\n+        public String getFullDeckName() {\n             return mName;\n         }\n \n-        public String getNamePart(int part) {\n-            return mName[part];\n+        public String getDeckNameComponent(int part) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Mzg2OQ=="}, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODEwODgzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjowOTozNlrOGpNhYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoyMjo1NVrOGpP-0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjMzOQ==", "bodyText": "Could you @NonNull this", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445866339", "createdAt": "2020-06-25T22:09:36Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,26 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private final String[] mNameComponents;\n         private long mDid;\n-        private int mDepth;\n         private int mRevCount;\n         private int mLrnCount;\n         private int mNewCount;\n         private List<DeckDueTreeNode> mChildren = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg5Njk5Mw==", "bodyText": "I could, and this would be true with current code. However, I believe that it is actually a bad idea. Because children are not always set, and I believe that until we actually know whether there are children or not, it would make more sens to let the value be null than be an empty list. I didn't make this change in the code mostly because I didn't need it in any way for my goal of loading the deck picker faster on launch", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445896993", "createdAt": "2020-06-25T23:46:05Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,26 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private final String[] mNameComponents;\n         private long mDid;\n-        private int mDepth;\n         private int mRevCount;\n         private int mLrnCount;\n         private int mNewCount;\n         private List<DeckDueTreeNode> mChildren = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjMzOQ=="}, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNjY0Mw==", "bodyText": "I thought it was set implicitly in both constructors?", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445906643", "createdAt": "2020-06-26T00:22:55Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,26 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {\n-        private String[] mName;\n+        private final String mName;\n+        private final String[] mNameComponents;\n         private long mDid;\n-        private int mDepth;\n         private int mRevCount;\n         private int mLrnCount;\n         private int mNewCount;\n         private List<DeckDueTreeNode> mChildren = new ArrayList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2NjMzOQ=="}, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODExMTc5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQyMjoxMDo0M1rOGpNjEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoyMDoyNFrOGpP8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Njc3MQ==", "bodyText": "Do we have the Android API to use Comparable<T> here?", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445866771", "createdAt": "2020-06-25T22:10:43Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,26 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg5NzY0NA==", "bodyText": "I don't understand why you're referencing the android API.\nThe scheduler sorts a list of DeckDueTreeNode and uses the fact that the nodes are comparable.\nI can write Comparable<DeckDueTreeNode> if you prefer. I have not touched this line but it would not be hard to add it", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445897644", "createdAt": "2020-06-25T23:48:29Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,26 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Njc3MQ=="}, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNjAzOA==", "bodyText": "I don't understand why you're referencing the android API.\nThe scheduler sorts a list of DeckDueTreeNode and uses the fact that the nodes are comparable.\nI can write Comparable<DeckDueTreeNode> if you prefer. I have not touched this line but it would not be hard to add it\n\nUsually the reason we're not using a \"better\" API is due to us referencing API 16. I was wondering if this was the rationale behind not using the correct Comparable", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445906038", "createdAt": "2020-06-26T00:20:24Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -178,29 +178,26 @@\n      * this field and use getNamePart(0) for those cases.\n      */\n     public class DeckDueTreeNode implements Comparable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTg2Njc3MQ=="}, "originalCommit": {"oid": "fe384112ffda10d7b3de54190495f7affe51ac58"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM1NzIyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxNzoxN1rOGpP5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMToxMjo0NVrOGpQsjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTM0MA==", "bodyText": "The *s in the comment seems irregular", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445905340", "createdAt": "2020-06-26T00:17:17Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -270,10 +286,17 @@ public int getLrnCount() {\n             return mLrnCount;\n         }\n \n+        /** \n+         * @return The children of this deck. Note that they are set\n+         in the * data structure returned by DeckDueTree but are", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46fb40b4fd6f6f83d4386653c895f1e995d6ec10"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxODM1MA==", "bodyText": "Thanks", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445918350", "createdAt": "2020-06-26T01:12:45Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -270,10 +286,17 @@ public int getLrnCount() {\n             return mLrnCount;\n         }\n \n+        /** \n+         * @return The children of this deck. Note that they are set\n+         in the * data structure returned by DeckDueTree but are", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTM0MA=="}, "originalCommit": {"oid": "46fb40b4fd6f6f83d4386653c895f1e995d6ec10"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODM1ODQ2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMDoxODowOVrOGpP6fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwMToxMzoxNlrOGpQs9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUzNQ==", "bodyText": "A doccomment is for one method, so try to avoid referencing other methods", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445905535", "createdAt": "2020-06-26T00:18:09Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -230,34 +228,52 @@ public int compareTo(Object other) {\n \n         @Override\n         public String toString() {\n-            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %d, %s\",\n-                    Arrays.toString(mName), mDid, mDepth, mRevCount, mLrnCount, mNewCount, mChildren);\n+            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %s\",\n+                    mName, mDid, mRevCount, mLrnCount, mNewCount, mChildren);\n         }\n \n-        public String[] getNames() {\n+        /** \n+         * @return The full deck name, e.g. \"A::B::C\"\n+         * */\n+        public String getFullDeckName() {\n             return mName;\n         }\n \n-        public String getNamePart(int part) {\n-            return mName[part];\n+        /** \n+         * For deck \"A::B::C\", `getDeckNameComponent(0)` returns \"A\",\n+         * `getDeckNameComponent(1)` returns \"B\", etc...\n+         */\n+        public String getDeckNameComponent(int part) {\n+            return mNameComponents[part];\n         }\n-        \n-        public void setNames(String[] mName) {\n-            this.mName = mName;\n+\n+        /** \n+         * The part of the name displayed in deck picker, i.e. the\n+         * part that does not belong to its parents. E.g.  for deck\n+         * \"A::B::C\", returns \"C\".\n+         */\n+        public String getLastDeckNameComponent() {\n+            return getDeckNameComponent(getDepth());\n         }\n \n         public long getDid() {\n             return mDid;\n         }\n \n+        /** \n+         * @return The depth of a deck. Top level decks have depth 0,\n+         * their children have depth 1, etc... So \"A::B::C\" would have\n+         * depth 2.\n+         */\n         public int getDepth() {\n-            return mDepth;\n-        }\n-\n-        public void setDepth(int mDepth) {\n-            this.mDepth = mDepth;\n+            return mNameComponents.length - 1;\n         }\n \n+        /** The three following methods return the numbers to be", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46fb40b4fd6f6f83d4386653c895f1e995d6ec10"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTU4Ng==", "bodyText": "Not relevant to the PR, let's remove it", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445905586", "createdAt": "2020-06-26T00:18:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -230,34 +228,52 @@ public int compareTo(Object other) {\n \n         @Override\n         public String toString() {\n-            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %d, %s\",\n-                    Arrays.toString(mName), mDid, mDepth, mRevCount, mLrnCount, mNewCount, mChildren);\n+            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %s\",\n+                    mName, mDid, mRevCount, mLrnCount, mNewCount, mChildren);\n         }\n \n-        public String[] getNames() {\n+        /** \n+         * @return The full deck name, e.g. \"A::B::C\"\n+         * */\n+        public String getFullDeckName() {\n             return mName;\n         }\n \n-        public String getNamePart(int part) {\n-            return mName[part];\n+        /** \n+         * For deck \"A::B::C\", `getDeckNameComponent(0)` returns \"A\",\n+         * `getDeckNameComponent(1)` returns \"B\", etc...\n+         */\n+        public String getDeckNameComponent(int part) {\n+            return mNameComponents[part];\n         }\n-        \n-        public void setNames(String[] mName) {\n-            this.mName = mName;\n+\n+        /** \n+         * The part of the name displayed in deck picker, i.e. the\n+         * part that does not belong to its parents. E.g.  for deck\n+         * \"A::B::C\", returns \"C\".\n+         */\n+        public String getLastDeckNameComponent() {\n+            return getDeckNameComponent(getDepth());\n         }\n \n         public long getDid() {\n             return mDid;\n         }\n \n+        /** \n+         * @return The depth of a deck. Top level decks have depth 0,\n+         * their children have depth 1, etc... So \"A::B::C\" would have\n+         * depth 2.\n+         */\n         public int getDepth() {\n-            return mDepth;\n-        }\n-\n-        public void setDepth(int mDepth) {\n-            this.mDepth = mDepth;\n+            return mNameComponents.length - 1;\n         }\n \n+        /** The three following methods return the numbers to be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUzNQ=="}, "originalCommit": {"oid": "46fb40b4fd6f6f83d4386653c895f1e995d6ec10"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkxODQ1Mw==", "bodyText": "Okay", "url": "https://github.com/ankidroid/Anki-Android/pull/6538#discussion_r445918453", "createdAt": "2020-06-26T01:13:16Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/AbstractSched.java", "diffHunk": "@@ -230,34 +228,52 @@ public int compareTo(Object other) {\n \n         @Override\n         public String toString() {\n-            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %d, %s\",\n-                    Arrays.toString(mName), mDid, mDepth, mRevCount, mLrnCount, mNewCount, mChildren);\n+            return String.format(Locale.US, \"%s, %d, %d, %d, %d, %s\",\n+                    mName, mDid, mRevCount, mLrnCount, mNewCount, mChildren);\n         }\n \n-        public String[] getNames() {\n+        /** \n+         * @return The full deck name, e.g. \"A::B::C\"\n+         * */\n+        public String getFullDeckName() {\n             return mName;\n         }\n \n-        public String getNamePart(int part) {\n-            return mName[part];\n+        /** \n+         * For deck \"A::B::C\", `getDeckNameComponent(0)` returns \"A\",\n+         * `getDeckNameComponent(1)` returns \"B\", etc...\n+         */\n+        public String getDeckNameComponent(int part) {\n+            return mNameComponents[part];\n         }\n-        \n-        public void setNames(String[] mName) {\n-            this.mName = mName;\n+\n+        /** \n+         * The part of the name displayed in deck picker, i.e. the\n+         * part that does not belong to its parents. E.g.  for deck\n+         * \"A::B::C\", returns \"C\".\n+         */\n+        public String getLastDeckNameComponent() {\n+            return getDeckNameComponent(getDepth());\n         }\n \n         public long getDid() {\n             return mDid;\n         }\n \n+        /** \n+         * @return The depth of a deck. Top level decks have depth 0,\n+         * their children have depth 1, etc... So \"A::B::C\" would have\n+         * depth 2.\n+         */\n         public int getDepth() {\n-            return mDepth;\n-        }\n-\n-        public void setDepth(int mDepth) {\n-            this.mDepth = mDepth;\n+            return mNameComponents.length - 1;\n         }\n \n+        /** The three following methods return the numbers to be", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTkwNTUzNQ=="}, "originalCommit": {"oid": "46fb40b4fd6f6f83d4386653c895f1e995d6ec10"}, "originalPosition": 129}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 15, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}