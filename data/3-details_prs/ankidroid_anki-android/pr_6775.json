{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU5MDk0MDEw", "number": 6775, "title": "NF:\u00a0Listeners do not leak contexts", "bodyText": "David did mention in another PR that some background tasks were leaking activities. My first reaction was \"and so\u00a0? All tasks listener leaks activities, and they have the same life duration\"...\nThen I realized that actually this was probably a problem. Not a big problem as I've never heard of it creating any bug, but still, that's a useless risk.\nSo I transformed each anonymous listener into a static class. Since the listener still needs to have access to the UI in order to change it, I kept the access to the UI, however, I only use a weak reference. This way, if the activity can be freed, it will be freed.\nThat is, currently, if we start a background task and ends it, we are still updating the UI, even if the UI is not displayed anymore. With this change, the background task still occurs, but the UI is ignored\nThere are case where the UI action is \"add an undo button\", and we are not going to add it anymore. However, this is not actually new, because currently, if the screen is changed/closed, then the \"undo\" button is theoretically added to the UI, but not actually seen by the user.\nThis means I'm convinced by this question of leaks, and I'll change #6758 to use static inner class instead of anonymous class.\nWhat is going to be a lot of work for me later is to merge with #6758, because I foresee that those two PR will conflict as two of my PRs have never conflicted before.", "createdAt": "2020-07-30T11:31:00Z", "url": "https://github.com/ankidroid/Anki-Android/pull/6775", "merged": true, "mergeCommit": {"oid": "6bef741d7f465b31284c1df54beb2913b15d03c2"}, "closed": true, "closedAt": "2020-08-18T15:21:01Z", "author": {"login": "Arthur-Milchior"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc5-Dh0ABqjM2MDM0MDM2MDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAIopCAFqTQ2OTU2MzEyNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "167e802ec7e87c53001abac83ed9ad1ee41acd6d", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/167e802ec7e87c53001abac83ed9ad1ee41acd6d", "committedDate": "2020-07-30T11:23:49Z", "message": "NF: TaskListener do not leak context\n\nAlmost all task listener leaks context. The main problem is that they should make an action on the context, such as\nchanging a card displayed, writting a message... so they need access to the context. However, listener may be kept in\nthe static CollectionTask for a long time if many action should be done and the cleaning was not done properly (I'm not\nsure that it is done properly currently).\n\nIt should be noted that, actually, if the UI disappear, the listener's action does not have any purpose anymore, so it\nmakes sens to just not doing it. In order to do so, I changed the implicit context to an explicit one using a weak\nreference.\n\nIn one case, an action may make an undo button appear; this action won't occur if the window disappear. That's not\nactually a change in behaviour since it currently would not appear anyway"}, "afterCommit": {"oid": "e12d4d11b545d58419ec7961d80553dc6530858c", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/e12d4d11b545d58419ec7961d80553dc6530858c", "committedDate": "2020-07-30T11:37:37Z", "message": "NF: TaskListener do not leak context\n\nAlmost all task listener leaks context. The main problem is that they should make an action on the context, such as\nchanging a card displayed, writting a message... so they need access to the context. However, listener may be kept in\nthe static CollectionTask for a long time if many action should be done and the cleaning was not done properly (I'm not\nsure that it is done properly currently).\n\nIt should be noted that, actually, if the UI disappear, the listener's action does not have any purpose anymore, so it\nmakes sens to just not doing it. In order to do so, I changed the implicit context to an explicit one using a weak\nreference.\n\nIn one case, an action may make an undo button appear; this action won't occur if the window disappear. That's not\nactually a change in behaviour since it currently would not appear anyway"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e12d4d11b545d58419ec7961d80553dc6530858c", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/e12d4d11b545d58419ec7961d80553dc6530858c", "committedDate": "2020-07-30T11:37:37Z", "message": "NF: TaskListener do not leak context\n\nAlmost all task listener leaks context. The main problem is that they should make an action on the context, such as\nchanging a card displayed, writting a message... so they need access to the context. However, listener may be kept in\nthe static CollectionTask for a long time if many action should be done and the cleaning was not done properly (I'm not\nsure that it is done properly currently).\n\nIt should be noted that, actually, if the UI disappear, the listener's action does not have any purpose anymore, so it\nmakes sens to just not doing it. In order to do so, I changed the implicit context to an explicit one using a weak\nreference.\n\nIn one case, an action may make an undo button appear; this action won't occur if the window disappear. That's not\nactually a change in behaviour since it currently would not appear anyway"}, "afterCommit": {"oid": "b48f6214c54261468d40b11389c33bff2832d217", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b48f6214c54261468d40b11389c33bff2832d217", "committedDate": "2020-07-30T12:23:06Z", "message": "NF: NextCardHandler with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b48f6214c54261468d40b11389c33bff2832d217", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b48f6214c54261468d40b11389c33bff2832d217", "committedDate": "2020-07-30T12:23:06Z", "message": "NF: NextCardHandler with context"}, "afterCommit": {"oid": "eff971ad4c552ab5c41072b87603f3f3a5d23da3", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/eff971ad4c552ab5c41072b87603f3f3a5d23da3", "committedDate": "2020-07-30T12:26:17Z", "message": "NF: NextCardHandler with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "eff971ad4c552ab5c41072b87603f3f3a5d23da3", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/eff971ad4c552ab5c41072b87603f3f3a5d23da3", "committedDate": "2020-07-30T12:26:17Z", "message": "NF: NextCardHandler with context"}, "afterCommit": {"oid": "846cf33c32f41717b502c107406e61d6aa54ed5c", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/846cf33c32f41717b502c107406e61d6aa54ed5c", "committedDate": "2020-08-04T18:44:04Z", "message": "NF: NextCardHandler with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "846cf33c32f41717b502c107406e61d6aa54ed5c", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/846cf33c32f41717b502c107406e61d6aa54ed5c", "committedDate": "2020-08-04T18:44:04Z", "message": "NF: NextCardHandler with context"}, "afterCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc", "committedDate": "2020-08-05T12:30:05Z", "message": "NF: NextCardHandler with context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjM1OTQ5", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#pullrequestreview-462635949", "createdAt": "2020-08-06T15:34:48Z", "commit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozNDo0OFrOG848iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo1NDoxNlrOG85xmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMDc0NA==", "bodyText": "This could be a functional change - as we change the result code.\nNot sure how to handle it", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466500744", "createdAt": "2020-08-06T15:34:48Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -501,157 +503,174 @@ void processCardAction(Consumer<WebView> cardConsumer) {\n     }\n \n \n-    protected final CollectionTask.TaskListener mDismissCardHandler = new NextCardHandler() { /* superclass is sufficient */ };\n+    protected final TaskListener mDismissCardHandler = new NextCardHandler(this) { /* superclass is sufficient */ };\n \n-\n-    private final CollectionTask.TaskListener mUpdateCardHandler = new CollectionTask.TaskListener() {\n+    // Need a function, because each listener has its mNoMoreCards\n+    private UpdateCardHandler updateCardHandler() {\n+        return new UpdateCardHandler(this);\n+    }\n+    /** This listener does not leak the Activity. If the activity is destroyed, the background action occurs but no UI action.*/\n+    private static class UpdateCardHandler extends TaskListenerWithContext<AbstractFlashcardViewer> {\n         private boolean mNoMoreCards;\n+        public UpdateCardHandler(AbstractFlashcardViewer viewer) {\n+            super(viewer);\n+        }\n \n \n         @Override\n-        public void onPreExecute() {\n-            showProgressBar();\n+        public void actualOnPreExecute(@NonNull AbstractFlashcardViewer viewer) {\n+            viewer.showProgressBar();\n         }\n \n \n         @Override\n-        public void onProgressUpdate(TaskData value) {\n+        public void actualOnProgressUpdate(@NonNull AbstractFlashcardViewer viewer, TaskData value) {\n             boolean cardChanged = false;\n-            if (mCurrentCard != value.getCard()) {\n+            if (viewer.mCurrentCard != value.getCard()) {\n                 /*\n                  * Before updating mCurrentCard, we check whether it is changing or not. If the current card changes,\n                  * then we need to display it as a new card, without showing the answer.\n                  */\n                 sDisplayAnswer = false;\n                 cardChanged = true;  // Keep track of that so we can run a bit of new-card code\n             }\n-            mCurrentCard = value.getCard();\n-            if (mCurrentCard == null) {\n+            viewer.mCurrentCard = value.getCard();\n+            if (viewer.mCurrentCard == null) {\n                 // If the card is null means that there are no more cards scheduled for review.\n                 mNoMoreCards = true;\n-                showProgressBar();\n+                viewer.showProgressBar();\n                 return;\n             }\n-            if (mPrefWhiteboard && mWhiteboard != null) {\n-                mWhiteboard.clear();\n+            if (viewer.mPrefWhiteboard && viewer.mWhiteboard != null) {\n+                viewer.mWhiteboard.clear();\n             }\n \n             if (sDisplayAnswer) {\n-                mSoundPlayer.resetSounds(); // load sounds from scratch, to expose any edit changes\n-                mAnswerSoundsAdded = false; // causes answer sounds to be reloaded\n-                generateQuestionSoundList(); // questions must be intentionally regenerated\n-                displayCardAnswer();\n+                viewer.mSoundPlayer.resetSounds(); // load sounds from scratch, to expose any edit changes\n+                viewer.mAnswerSoundsAdded = false; // causes answer sounds to be reloaded\n+                viewer.generateQuestionSoundList(); // questions must be intentionally regenerated\n+                viewer.displayCardAnswer();\n             } else {\n                 if (cardChanged) {\n-                    updateTypeAnswerInfo();\n+                    viewer.updateTypeAnswerInfo();\n                 }\n-                displayCardQuestion();\n-                mCurrentCard.startTimer();\n-                initTimer();\n+                viewer.displayCardQuestion();\n+                viewer.mCurrentCard.startTimer();\n+                viewer.initTimer();\n             }\n-            hideProgressBar();\n+            viewer.hideProgressBar();\n         }\n \n \n         @Override\n-        public void onPostExecute(TaskData result) {\n+        public void actualOnPostExecute(@NonNull AbstractFlashcardViewer viewer, TaskData result) {\n             if (!result.getBoolean()) {\n                 // RuntimeException occurred on update cards\n-                closeReviewer(DeckPicker.RESULT_DB_ERROR, false);\n+                viewer.closeReviewer(DeckPicker.RESULT_DB_ERROR, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMTMwMQ==", "bodyText": "This will likely be a functional change", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466501301", "createdAt": "2020-08-06T15:35:28Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -501,157 +503,174 @@ void processCardAction(Consumer<WebView> cardConsumer) {\n     }\n \n \n-    protected final CollectionTask.TaskListener mDismissCardHandler = new NextCardHandler() { /* superclass is sufficient */ };\n+    protected final TaskListener mDismissCardHandler = new NextCardHandler(this) { /* superclass is sufficient */ };\n \n-\n-    private final CollectionTask.TaskListener mUpdateCardHandler = new CollectionTask.TaskListener() {\n+    // Need a function, because each listener has its mNoMoreCards\n+    private UpdateCardHandler updateCardHandler() {\n+        return new UpdateCardHandler(this);\n+    }\n+    /** This listener does not leak the Activity. If the activity is destroyed, the background action occurs but no UI action.*/\n+    private static class UpdateCardHandler extends TaskListenerWithContext<AbstractFlashcardViewer> {\n         private boolean mNoMoreCards;\n+        public UpdateCardHandler(AbstractFlashcardViewer viewer) {\n+            super(viewer);\n+        }\n \n \n         @Override\n-        public void onPreExecute() {\n-            showProgressBar();\n+        public void actualOnPreExecute(@NonNull AbstractFlashcardViewer viewer) {\n+            viewer.showProgressBar();\n         }\n \n \n         @Override\n-        public void onProgressUpdate(TaskData value) {\n+        public void actualOnProgressUpdate(@NonNull AbstractFlashcardViewer viewer, TaskData value) {\n             boolean cardChanged = false;\n-            if (mCurrentCard != value.getCard()) {\n+            if (viewer.mCurrentCard != value.getCard()) {\n                 /*\n                  * Before updating mCurrentCard, we check whether it is changing or not. If the current card changes,\n                  * then we need to display it as a new card, without showing the answer.\n                  */\n                 sDisplayAnswer = false;\n                 cardChanged = true;  // Keep track of that so we can run a bit of new-card code\n             }\n-            mCurrentCard = value.getCard();\n-            if (mCurrentCard == null) {\n+            viewer.mCurrentCard = value.getCard();\n+            if (viewer.mCurrentCard == null) {\n                 // If the card is null means that there are no more cards scheduled for review.\n                 mNoMoreCards = true;\n-                showProgressBar();\n+                viewer.showProgressBar();\n                 return;\n             }\n-            if (mPrefWhiteboard && mWhiteboard != null) {\n-                mWhiteboard.clear();\n+            if (viewer.mPrefWhiteboard && viewer.mWhiteboard != null) {\n+                viewer.mWhiteboard.clear();\n             }\n \n             if (sDisplayAnswer) {\n-                mSoundPlayer.resetSounds(); // load sounds from scratch, to expose any edit changes\n-                mAnswerSoundsAdded = false; // causes answer sounds to be reloaded\n-                generateQuestionSoundList(); // questions must be intentionally regenerated\n-                displayCardAnswer();\n+                viewer.mSoundPlayer.resetSounds(); // load sounds from scratch, to expose any edit changes\n+                viewer.mAnswerSoundsAdded = false; // causes answer sounds to be reloaded\n+                viewer.generateQuestionSoundList(); // questions must be intentionally regenerated\n+                viewer.displayCardAnswer();\n             } else {\n                 if (cardChanged) {\n-                    updateTypeAnswerInfo();\n+                    viewer.updateTypeAnswerInfo();\n                 }\n-                displayCardQuestion();\n-                mCurrentCard.startTimer();\n-                initTimer();\n+                viewer.displayCardQuestion();\n+                viewer.mCurrentCard.startTimer();\n+                viewer.initTimer();\n             }\n-            hideProgressBar();\n+            viewer.hideProgressBar();\n         }\n \n \n         @Override\n-        public void onPostExecute(TaskData result) {\n+        public void actualOnPostExecute(@NonNull AbstractFlashcardViewer viewer, TaskData result) {\n             if (!result.getBoolean()) {\n                 // RuntimeException occurred on update cards\n-                closeReviewer(DeckPicker.RESULT_DB_ERROR, false);\n+                viewer.closeReviewer(DeckPicker.RESULT_DB_ERROR, false);\n                 return;\n             }\n             if (mNoMoreCards) {\n-                closeReviewer(RESULT_NO_MORE_CARDS, true);\n+                viewer.closeReviewer(RESULT_NO_MORE_CARDS, true);\n             }\n         }\n     };\n \n-    abstract class NextCardHandler extends CollectionTask.TaskListener {\n+    protected abstract static class NextCardHandler<T extends AbstractFlashcardViewer> extends TaskListenerWithContext<T>{\n         private boolean mNoMoreCards;\n \n+        public NextCardHandler(T viewer) {\n+            super(viewer);\n+        }\n \n         @Override\n-        public void onPreExecute() { /* do nothing */}\n+        public void actualOnPreExecute(@NonNull AbstractFlashcardViewer viewer) { /* do nothing */}\n \n \n         @Override\n-        public void onProgressUpdate(TaskData value) {\n-            displayNext(value.getCard());\n+        public void actualOnProgressUpdate(@NonNull AbstractFlashcardViewer viewer, TaskData value) {\n+            displayNext(viewer, value.getCard());\n         }\n \n-        protected void displayNext(Card nextCard) {\n+        protected void displayNext(AbstractFlashcardViewer viewer, Card nextCard) {\n \n-            Resources res = getResources();\n+            Resources res = viewer.getResources();\n \n-            if (mSched == null) {\n+            if (viewer.mSched == null) {\n                 // TODO: proper testing for restored activity\n-                finishWithoutAnimation();\n+                viewer.finishWithoutAnimation();\n                 return;\n             }\n \n-            mCurrentCard = nextCard;\n-            if (mCurrentCard == null) {\n+            viewer.mCurrentCard = nextCard;\n+            if (viewer.mCurrentCard == null) {\n                 // If the card is null means that there are no more cards scheduled for review.\n                 mNoMoreCards = true; // other handlers use this, toggle state every time through\n             } else {\n                 mNoMoreCards = false; // other handlers use this, toggle state every time through\n                 // Start reviewing next card\n-                updateTypeAnswerInfo();\n-                hideProgressBar();\n-                AbstractFlashcardViewer.this.unblockControls();\n-                AbstractFlashcardViewer.this.displayCardQuestion();\n+                viewer.updateTypeAnswerInfo();\n+                viewer.hideProgressBar();\n+                viewer.unblockControls();\n+                viewer.displayCardQuestion();\n             }\n \n             // Since reps are incremented on fetch of next card, we will miss counting the\n             // last rep since there isn't a next card. We manually account for it here.\n             if (mNoMoreCards) {\n-                mSched.setReps(mSched.getReps() + 1);\n+                viewer.mSched.setReps(viewer.mSched.getReps() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMjkyNA==", "bodyText": "Confirm that this can still be undone in the Deck Picker - should be fine", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466502924", "createdAt": "2020-08-06T15:37:45Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1610,68 +1646,95 @@ private void removeNotesView(java.util.Collection<Long> cardsIds, boolean reorde\n         updateList();\n     }\n \n-    private CollectionTask.TaskListener mSuspendCardHandler = new ListenerWithProgressBarCloseOnFalse() {\n+    private SuspendCardHandler mSuspendCardHandler = new SuspendCardHandler(this);\n+    private static class SuspendCardHandler extends ListenerWithProgressBarCloseOnFalse {\n+        public SuspendCardHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        protected void actualPostExecute(TaskData result) {\n+        protected void actualActualOnPostExecute(CardBrowser browser, TaskData result) {\n             Card[] cards = (Card[]) result.getObjArray();\n-            updateCardsInList(Arrays.asList(cards), null);\n-            hideProgressBar();\n-            invalidateOptionsMenu();    // maybe the availability of undo changed\n+            browser.updateCardsInList(Arrays.asList(cards), null);\n+            browser.hideProgressBar();\n+            browser.invalidateOptionsMenu();    // maybe the availability of undo changed\n         }\n     };\n-    private CollectionTask.TaskListener mFlagCardHandler = mSuspendCardHandler;\n \n-    private CollectionTask.TaskListener mMarkCardHandler = new ListenerWithProgressBarCloseOnFalse() {\n+    private final FlagCardHandler mFlagCardHandler = new FlagCardHandler(this);\n+    private static class FlagCardHandler extends SuspendCardHandler{public FlagCardHandler(CardBrowser browser) {super(browser);}};\n+\n+    private MarkCardHandler mMarkCardHandler = new MarkCardHandler(this);\n+    private static class MarkCardHandler extends ListenerWithProgressBarCloseOnFalse {\n+        public MarkCardHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        protected void actualPostExecute(TaskData result) {\n+        protected void actualActualOnPostExecute(CardBrowser browser, TaskData result) {\n             Card[] cards = (Card[]) result.getObjArray();\n-            updateCardsInList(CardUtils.getAllCards(CardUtils.getNotes(Arrays.asList(cards))), null);\n-            hideProgressBar();\n-            invalidateOptionsMenu();    // maybe the availability of undo changed\n+            browser.updateCardsInList(CardUtils.getAllCards(CardUtils.getNotes(Arrays.asList(cards))), null);\n+            browser.hideProgressBar();\n+            browser.invalidateOptionsMenu();    // maybe the availability of undo changed\n         }\n     };\n \n-    private CollectionTask.TaskListener mDeleteNoteHandler = new ListenerWithProgressBarCloseOnFalse() {\n+    private DeleteNoteHandler mDeleteNoteHandler = new DeleteNoteHandler(this);\n+    private static class DeleteNoteHandler extends ListenerWithProgressBarCloseOnFalse {\n+        public DeleteNoteHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        public void onProgressUpdate(TaskData value) {\n+        public void actualOnProgressUpdate(@NonNull CardBrowser browser, TaskData value) {\n             Card[] cards = (Card[]) value.getObjArray();\n             //we don't need to reorder cards here as we've already deselected all notes,\n-            removeNotesView(cards, false);\n+            browser.removeNotesView(cards, false);\n         }\n \n \n         @Override\n-        protected void actualPostExecute(TaskData result) {\n-            hideProgressBar();\n-            mActionBarTitle.setText(Integer.toString(mCheckedCardPositions.size()));\n-            invalidateOptionsMenu();    // maybe the availability of undo changed\n+        protected void actualActualOnPostExecute(CardBrowser browser, TaskData result) {\n+            browser.hideProgressBar();\n+            browser.mActionBarTitle.setText(Integer.toString(browser.mCheckedCardPositions.size()));\n+            browser.invalidateOptionsMenu();    // maybe the availability of undo changed\n             // snackbar to offer undo\n-            mUndoSnackbar = UIUtils.showSnackbar(CardBrowser.this, getString(R.string.deleted_message), SNACKBAR_DURATION, R.string.undo, new View.OnClickListener() {\n+            browser.mUndoSnackbar = UIUtils.showSnackbar(browser, browser.getString(R.string.deleted_message), SNACKBAR_DURATION, R.string.undo, new View.OnClickListener() {\n                 @Override\n                 public void onClick(View v) {\n-                    CollectionTask.launchCollectionTask(UNDO, mUndoHandler);\n+                    CollectionTask.launchCollectionTask(UNDO, browser.mUndoHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM2OQ==", "bodyText": "cacheValues seems like IO - might just be local", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466506369", "createdAt": "2020-08-06T15:42:30Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckOptions.java", "diffHunk": "@@ -625,6 +617,29 @@ public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeL\n \n     }\n \n+    private static class ConfChangeHandler extends TaskListenerWithContext<DeckPreferenceHack.Editor> {\n+        public ConfChangeHandler(DeckPreferenceHack.Editor editor) {\n+            super(editor);\n+        }\n+\n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPreferenceHack.Editor editor) {\n+            Resources res = editor.getDeckPreferenceHack().getDeckOptions().getResources();\n+            editor.getDeckPreferenceHack().mProgressDialog = StyledProgressDialog.show(editor.getDeckPreferenceHack().getDeckOptions(), \"\",\n+                    res.getString(R.string.reordering_cards), false);\n+        }\n+\n+\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPreferenceHack.Editor editor, TaskData result) {\n+            editor.getDeckPreferenceHack().cacheValues();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwODk4NQ==", "bodyText": "This is an interesting one - might be problematic as it's such a long-running operation. Are we stopping onDestroy() currently with the AsyncTask?", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466508985", "createdAt": "2020-08-06T15:46:15Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -1463,34 +1499,40 @@ public void integrityCheck() {\n \n     private void performIntegrityCheck() {\n         Timber.i(\"performIntegrityCheck()\");\n-        CollectionTask.launchCollectionTask(CHECK_DATABASE, new CheckDatabaseListener());\n+        CollectionTask.launchCollectionTask(CHECK_DATABASE, mCheckDatabaseListener);\n     }\n \n \n-    @Override\n-    public void mediaCheck() {\n-        CollectionTask.TaskListener listener = new CollectionTask.TaskListener() {\n-            @Override\n-            public void onPreExecute() {\n-                mProgressDialog = StyledProgressDialog.show(DeckPicker.this, \"\",\n-                        getResources().getString(R.string.check_media_message), false);\n-            }\n+    private final MediaCheckListener mMediaCheckListener = new MediaCheckListener(this);\n+    private static class MediaCheckListener extends TaskListenerWithContext<DeckPicker>{\n+        public MediaCheckListener (DeckPicker deckPicker) {\n+            super(deckPicker);\n+        }\n \n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPicker deckPicker) {\n+            deckPicker.mProgressDialog = StyledProgressDialog.show(deckPicker, \"\",\n+                    deckPicker.getResources().getString(R.string.check_media_message), false);\n+        }\n \n-            @Override\n-            public void onPostExecute(TaskData result) {\n-                if (mProgressDialog != null && mProgressDialog.isShowing()) {\n-                    mProgressDialog.dismiss();\n-                }\n-                if (result != null && result.getBoolean()) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    List<List<String>> checkList = (List<List<String>>) result.getObjArray()[0];\n-                    showMediaCheckDialog(MediaCheckDialog.DIALOG_MEDIA_CHECK_RESULTS, checkList);\n-                } else {\n-                    showSimpleMessageDialog(getResources().getString(R.string.check_media_failed));\n-                }\n+\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPicker deckPicker, TaskData result) {\n+            if (deckPicker.mProgressDialog != null && deckPicker.mProgressDialog.isShowing()) {\n+                deckPicker.mProgressDialog.dismiss();\n+            }\n+            if (result != null && result.getBoolean()) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<List<String>> checkList = (List<List<String>>) result.getObjArray()[0];\n+                deckPicker.showMediaCheckDialog(MediaCheckDialog.DIALOG_MEDIA_CHECK_RESULTS, checkList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTk3Nw==", "bodyText": "Non-UI-specific change", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466509977", "createdAt": "2020-08-06T15:47:43Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2383,63 +2431,78 @@ public void deleteContextMenuDeck() {\n         deleteDeck(mContextMenuDid);\n     }\n     public void deleteDeck(final long did) {\n-        CollectionTask.TaskListener listener = new CollectionTask.TaskListener() {\n-            // Flag to indicate if the deck being deleted is the current deck.\n-            private boolean removingCurrent;\n-\n-            @Override\n-            public void onPreExecute() {\n-                mProgressDialog = StyledProgressDialog.show(DeckPicker.this, \"\",\n-                        getResources().getString(R.string.delete_deck), false);\n-                if (did == getCol().getDecks().current().optLong(\"id\")) {\n-                    removingCurrent = true;\n-                }\n+        TaskListener listener = deleteDeckListener(did);\n+        CollectionTask.launchCollectionTask(DELETE_DECK, listener, new TaskData(did));\n+    }\n+    private DeleteDeckListener deleteDeckListener(long did) {\n+        return new DeleteDeckListener(did, this);\n+    }\n+    private static class DeleteDeckListener extends TaskListenerWithContext<DeckPicker>{\n+        private final long did;\n+        // Flag to indicate if the deck being deleted is the current deck.\n+        private boolean removingCurrent;\n+\n+        public DeleteDeckListener(long did, DeckPicker deckPicker) {\n+            super(deckPicker);\n+            this.did = did;\n+        }\n+\n+\n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPicker deckPicker) {\n+            deckPicker.mProgressDialog = StyledProgressDialog.show(deckPicker, \"\",\n+                    deckPicker.getResources().getString(R.string.delete_deck), false);\n+            if (did == deckPicker.getCol().getDecks().current().optLong(\"id\")) {\n+                removingCurrent = true;\n             }\n+        }\n \n \n-            @SuppressWarnings(\"unchecked\")\n-            @Override\n-            public void onPostExecute(@Nullable TaskData result) {\n-                // In fragmented mode, if the deleted deck was the current deck, we need to reload\n-                // the study options fragment with a valid deck and re-center the deck list to the\n-                // new current deck. Otherwise we just update the list normally.\n-                if (mFragmented && removingCurrent) {\n-                    updateDeckList();\n-                    openStudyOptions(false);\n-                } else {\n-                    updateDeckList();\n-                }\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPicker deckPicker, @Nullable TaskData result) {\n+            // In fragmented mode, if the deleted deck was the current deck, we need to reload\n+            // the study options fragment with a valid deck and re-center the deck list to the\n+            // new current deck. Otherwise we just update the list normally.\n+            if (deckPicker.mFragmented && removingCurrent) {\n+                deckPicker.updateDeckList();\n+                deckPicker.openStudyOptions(false);\n+            } else {\n+                deckPicker.updateDeckList();\n+            }\n \n-                if (mProgressDialog != null && mProgressDialog.isShowing()) {\n-                    try {\n-                        mProgressDialog.dismiss();\n-                    } catch (Exception e) {\n-                        Timber.e(e, \"onPostExecute - Exception dismissing dialog\");\n-                    }\n+            if (deckPicker.mProgressDialog != null && deckPicker.mProgressDialog.isShowing()) {\n+                try {\n+                    deckPicker.mProgressDialog.dismiss();\n+                } catch (Exception e) {\n+                    Timber.e(e, \"onPostExecute - Exception dismissing dialog\");\n                 }\n-                // TODO: if we had \"undo delete note\" like desktop client then we won't need this.\n-                getCol().clearUndo();\n             }\n-        };\n-        CollectionTask.launchCollectionTask(DELETE_DECK, listener, new TaskData(did));\n+            // TODO: if we had \"undo delete note\" like desktop client then we won't need this.\n+            deckPicker.getCol().clearUndo();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 528}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxMDcyNA==", "bodyText": "Questionable whether we still want to signal to the UI on a different activity", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466510724", "createdAt": "2020-08-06T15:48:50Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2594,35 +2668,35 @@ public void onPostExecute(TaskData result) {\n \n             if (!result.getBoolean() || databaseResult.getFailed()) {\n                 if (databaseResult.getDatabaseLocked()) {\n-                    handleDbLocked();\n+                    deckPicker.handleDbLocked();\n                 } else {\n-                    handleDbError();\n+                    deckPicker.handleDbError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 688}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxMzY4Nw==", "bodyText": "Maybe use CTX or TContext instead of Context here so it doesn't get mistaken for the class name", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466513687", "createdAt": "2020-08-06T15:53:17Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/TaskListenerWithContext.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.ichi2.async;\n+\n+import java.lang.ref.WeakReference;\n+\n+import androidx.annotation.NonNull;\n+\n+/** Similar to task listener, but if the context disappear, no action are executed.\n+ * We ensure that the context can't disappear during the execution of the methods. */\n+public abstract class TaskListenerWithContext<Context> extends TaskListener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxNDMzMQ==", "bodyText": "I feel these methods should be final so they can't be overridden, and should have an @Override", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466514331", "createdAt": "2020-08-06T15:54:16Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/TaskListenerWithContext.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.ichi2.async;\n+\n+import java.lang.ref.WeakReference;\n+\n+import androidx.annotation.NonNull;\n+\n+/** Similar to task listener, but if the context disappear, no action are executed.\n+ * We ensure that the context can't disappear during the execution of the methods. */\n+public abstract class TaskListenerWithContext<Context> extends TaskListener {\n+    private WeakReference<Context> mContext;\n+    protected TaskListenerWithContext(Context context) {\n+        mContext = new WeakReference<>(context);\n+    }\n+\n+    public void onPreExecute() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjg3MDUw", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#pullrequestreview-462687050", "createdAt": "2020-08-06T16:37:24Z", "commit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjozNzoyNFrOG87ZbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjo1NToxNlrOG88ClA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MDkwOA==", "bodyText": "I don't understand. If the code is not executed, it means the viewer is closed, so closing it makes no sens in the first place. What is the point of cosing with a DB_error something already closed ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466540908", "createdAt": "2020-08-06T16:37:24Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/AbstractFlashcardViewer.java", "diffHunk": "@@ -501,157 +503,174 @@ void processCardAction(Consumer<WebView> cardConsumer) {\n     }\n \n \n-    protected final CollectionTask.TaskListener mDismissCardHandler = new NextCardHandler() { /* superclass is sufficient */ };\n+    protected final TaskListener mDismissCardHandler = new NextCardHandler(this) { /* superclass is sufficient */ };\n \n-\n-    private final CollectionTask.TaskListener mUpdateCardHandler = new CollectionTask.TaskListener() {\n+    // Need a function, because each listener has its mNoMoreCards\n+    private UpdateCardHandler updateCardHandler() {\n+        return new UpdateCardHandler(this);\n+    }\n+    /** This listener does not leak the Activity. If the activity is destroyed, the background action occurs but no UI action.*/\n+    private static class UpdateCardHandler extends TaskListenerWithContext<AbstractFlashcardViewer> {\n         private boolean mNoMoreCards;\n+        public UpdateCardHandler(AbstractFlashcardViewer viewer) {\n+            super(viewer);\n+        }\n \n \n         @Override\n-        public void onPreExecute() {\n-            showProgressBar();\n+        public void actualOnPreExecute(@NonNull AbstractFlashcardViewer viewer) {\n+            viewer.showProgressBar();\n         }\n \n \n         @Override\n-        public void onProgressUpdate(TaskData value) {\n+        public void actualOnProgressUpdate(@NonNull AbstractFlashcardViewer viewer, TaskData value) {\n             boolean cardChanged = false;\n-            if (mCurrentCard != value.getCard()) {\n+            if (viewer.mCurrentCard != value.getCard()) {\n                 /*\n                  * Before updating mCurrentCard, we check whether it is changing or not. If the current card changes,\n                  * then we need to display it as a new card, without showing the answer.\n                  */\n                 sDisplayAnswer = false;\n                 cardChanged = true;  // Keep track of that so we can run a bit of new-card code\n             }\n-            mCurrentCard = value.getCard();\n-            if (mCurrentCard == null) {\n+            viewer.mCurrentCard = value.getCard();\n+            if (viewer.mCurrentCard == null) {\n                 // If the card is null means that there are no more cards scheduled for review.\n                 mNoMoreCards = true;\n-                showProgressBar();\n+                viewer.showProgressBar();\n                 return;\n             }\n-            if (mPrefWhiteboard && mWhiteboard != null) {\n-                mWhiteboard.clear();\n+            if (viewer.mPrefWhiteboard && viewer.mWhiteboard != null) {\n+                viewer.mWhiteboard.clear();\n             }\n \n             if (sDisplayAnswer) {\n-                mSoundPlayer.resetSounds(); // load sounds from scratch, to expose any edit changes\n-                mAnswerSoundsAdded = false; // causes answer sounds to be reloaded\n-                generateQuestionSoundList(); // questions must be intentionally regenerated\n-                displayCardAnswer();\n+                viewer.mSoundPlayer.resetSounds(); // load sounds from scratch, to expose any edit changes\n+                viewer.mAnswerSoundsAdded = false; // causes answer sounds to be reloaded\n+                viewer.generateQuestionSoundList(); // questions must be intentionally regenerated\n+                viewer.displayCardAnswer();\n             } else {\n                 if (cardChanged) {\n-                    updateTypeAnswerInfo();\n+                    viewer.updateTypeAnswerInfo();\n                 }\n-                displayCardQuestion();\n-                mCurrentCard.startTimer();\n-                initTimer();\n+                viewer.displayCardQuestion();\n+                viewer.mCurrentCard.startTimer();\n+                viewer.initTimer();\n             }\n-            hideProgressBar();\n+            viewer.hideProgressBar();\n         }\n \n \n         @Override\n-        public void onPostExecute(TaskData result) {\n+        public void actualOnPostExecute(@NonNull AbstractFlashcardViewer viewer, TaskData result) {\n             if (!result.getBoolean()) {\n                 // RuntimeException occurred on update cards\n-                closeReviewer(DeckPicker.RESULT_DB_ERROR, false);\n+                viewer.closeReviewer(DeckPicker.RESULT_DB_ERROR, false);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMDc0NA=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MTg1NA==", "bodyText": "This change means that the undo option is not shown to a non-existing screen. Since it was not adding anythingi n the list of undo, it does not forbid to undo the normal way.", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466541854", "createdAt": "2020-08-06T16:39:06Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1610,68 +1646,95 @@ private void removeNotesView(java.util.Collection<Long> cardsIds, boolean reorde\n         updateList();\n     }\n \n-    private CollectionTask.TaskListener mSuspendCardHandler = new ListenerWithProgressBarCloseOnFalse() {\n+    private SuspendCardHandler mSuspendCardHandler = new SuspendCardHandler(this);\n+    private static class SuspendCardHandler extends ListenerWithProgressBarCloseOnFalse {\n+        public SuspendCardHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        protected void actualPostExecute(TaskData result) {\n+        protected void actualActualOnPostExecute(CardBrowser browser, TaskData result) {\n             Card[] cards = (Card[]) result.getObjArray();\n-            updateCardsInList(Arrays.asList(cards), null);\n-            hideProgressBar();\n-            invalidateOptionsMenu();    // maybe the availability of undo changed\n+            browser.updateCardsInList(Arrays.asList(cards), null);\n+            browser.hideProgressBar();\n+            browser.invalidateOptionsMenu();    // maybe the availability of undo changed\n         }\n     };\n-    private CollectionTask.TaskListener mFlagCardHandler = mSuspendCardHandler;\n \n-    private CollectionTask.TaskListener mMarkCardHandler = new ListenerWithProgressBarCloseOnFalse() {\n+    private final FlagCardHandler mFlagCardHandler = new FlagCardHandler(this);\n+    private static class FlagCardHandler extends SuspendCardHandler{public FlagCardHandler(CardBrowser browser) {super(browser);}};\n+\n+    private MarkCardHandler mMarkCardHandler = new MarkCardHandler(this);\n+    private static class MarkCardHandler extends ListenerWithProgressBarCloseOnFalse {\n+        public MarkCardHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        protected void actualPostExecute(TaskData result) {\n+        protected void actualActualOnPostExecute(CardBrowser browser, TaskData result) {\n             Card[] cards = (Card[]) result.getObjArray();\n-            updateCardsInList(CardUtils.getAllCards(CardUtils.getNotes(Arrays.asList(cards))), null);\n-            hideProgressBar();\n-            invalidateOptionsMenu();    // maybe the availability of undo changed\n+            browser.updateCardsInList(CardUtils.getAllCards(CardUtils.getNotes(Arrays.asList(cards))), null);\n+            browser.hideProgressBar();\n+            browser.invalidateOptionsMenu();    // maybe the availability of undo changed\n         }\n     };\n \n-    private CollectionTask.TaskListener mDeleteNoteHandler = new ListenerWithProgressBarCloseOnFalse() {\n+    private DeleteNoteHandler mDeleteNoteHandler = new DeleteNoteHandler(this);\n+    private static class DeleteNoteHandler extends ListenerWithProgressBarCloseOnFalse {\n+        public DeleteNoteHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        public void onProgressUpdate(TaskData value) {\n+        public void actualOnProgressUpdate(@NonNull CardBrowser browser, TaskData value) {\n             Card[] cards = (Card[]) value.getObjArray();\n             //we don't need to reorder cards here as we've already deselected all notes,\n-            removeNotesView(cards, false);\n+            browser.removeNotesView(cards, false);\n         }\n \n \n         @Override\n-        protected void actualPostExecute(TaskData result) {\n-            hideProgressBar();\n-            mActionBarTitle.setText(Integer.toString(mCheckedCardPositions.size()));\n-            invalidateOptionsMenu();    // maybe the availability of undo changed\n+        protected void actualActualOnPostExecute(CardBrowser browser, TaskData result) {\n+            browser.hideProgressBar();\n+            browser.mActionBarTitle.setText(Integer.toString(browser.mCheckedCardPositions.size()));\n+            browser.invalidateOptionsMenu();    // maybe the availability of undo changed\n             // snackbar to offer undo\n-            mUndoSnackbar = UIUtils.showSnackbar(CardBrowser.this, getString(R.string.deleted_message), SNACKBAR_DURATION, R.string.undo, new View.OnClickListener() {\n+            browser.mUndoSnackbar = UIUtils.showSnackbar(browser, browser.getString(R.string.deleted_message), SNACKBAR_DURATION, R.string.undo, new View.OnClickListener() {\n                 @Override\n                 public void onClick(View v) {\n-                    CollectionTask.launchCollectionTask(UNDO, mUndoHandler);\n+                    CollectionTask.launchCollectionTask(UNDO, browser.mUndoHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwMjkyNA=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 320}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NDUzMw==", "bodyText": "Nice catch. I should have used DeckPreferenceHack as context. We never need access to the actual Editor class", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466544533", "createdAt": "2020-08-06T16:43:22Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckOptions.java", "diffHunk": "@@ -625,6 +617,29 @@ public void unregisterOnSharedPreferenceChangeListener(OnSharedPreferenceChangeL\n \n     }\n \n+    private static class ConfChangeHandler extends TaskListenerWithContext<DeckPreferenceHack.Editor> {\n+        public ConfChangeHandler(DeckPreferenceHack.Editor editor) {\n+            super(editor);\n+        }\n+\n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPreferenceHack.Editor editor) {\n+            Resources res = editor.getDeckPreferenceHack().getDeckOptions().getResources();\n+            editor.getDeckPreferenceHack().mProgressDialog = StyledProgressDialog.show(editor.getDeckPreferenceHack().getDeckOptions(), \"\",\n+                    res.getString(R.string.reordering_cards), false);\n+        }\n+\n+\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPreferenceHack.Editor editor, TaskData result) {\n+            editor.getDeckPreferenceHack().cacheValues();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM2OQ=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0NzY4OQ==", "bodyText": "No idea what current occurs in practice.  I don't expect it to make any difference with this PR. Afterall, if the deckpicker is not shown on screen, whether we show the check dialog or not on the non-existing screen does not matter", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466547689", "createdAt": "2020-08-06T16:48:58Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -1463,34 +1499,40 @@ public void integrityCheck() {\n \n     private void performIntegrityCheck() {\n         Timber.i(\"performIntegrityCheck()\");\n-        CollectionTask.launchCollectionTask(CHECK_DATABASE, new CheckDatabaseListener());\n+        CollectionTask.launchCollectionTask(CHECK_DATABASE, mCheckDatabaseListener);\n     }\n \n \n-    @Override\n-    public void mediaCheck() {\n-        CollectionTask.TaskListener listener = new CollectionTask.TaskListener() {\n-            @Override\n-            public void onPreExecute() {\n-                mProgressDialog = StyledProgressDialog.show(DeckPicker.this, \"\",\n-                        getResources().getString(R.string.check_media_message), false);\n-            }\n+    private final MediaCheckListener mMediaCheckListener = new MediaCheckListener(this);\n+    private static class MediaCheckListener extends TaskListenerWithContext<DeckPicker>{\n+        public MediaCheckListener (DeckPicker deckPicker) {\n+            super(deckPicker);\n+        }\n \n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPicker deckPicker) {\n+            deckPicker.mProgressDialog = StyledProgressDialog.show(deckPicker, \"\",\n+                    deckPicker.getResources().getString(R.string.check_media_message), false);\n+        }\n \n-            @Override\n-            public void onPostExecute(TaskData result) {\n-                if (mProgressDialog != null && mProgressDialog.isShowing()) {\n-                    mProgressDialog.dismiss();\n-                }\n-                if (result != null && result.getBoolean()) {\n-                    @SuppressWarnings(\"unchecked\")\n-                    List<List<String>> checkList = (List<List<String>>) result.getObjArray()[0];\n-                    showMediaCheckDialog(MediaCheckDialog.DIALOG_MEDIA_CHECK_RESULTS, checkList);\n-                } else {\n-                    showSimpleMessageDialog(getResources().getString(R.string.check_media_failed));\n-                }\n+\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPicker deckPicker, TaskData result) {\n+            if (deckPicker.mProgressDialog != null && deckPicker.mProgressDialog.isShowing()) {\n+                deckPicker.mProgressDialog.dismiss();\n+            }\n+            if (result != null && result.getBoolean()) {\n+                @SuppressWarnings(\"unchecked\")\n+                List<List<String>> checkList = (List<List<String>>) result.getObjArray()[0];\n+                deckPicker.showMediaCheckDialog(MediaCheckDialog.DIALOG_MEDIA_CHECK_RESULTS, checkList);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwODk4NQ=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 348}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0ODA3Mw==", "bodyText": "Nice catch. not sure what it is doing in UI. Probably should be moved to background (in another PR)", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466548073", "createdAt": "2020-08-06T16:49:37Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2383,63 +2431,78 @@ public void deleteContextMenuDeck() {\n         deleteDeck(mContextMenuDid);\n     }\n     public void deleteDeck(final long did) {\n-        CollectionTask.TaskListener listener = new CollectionTask.TaskListener() {\n-            // Flag to indicate if the deck being deleted is the current deck.\n-            private boolean removingCurrent;\n-\n-            @Override\n-            public void onPreExecute() {\n-                mProgressDialog = StyledProgressDialog.show(DeckPicker.this, \"\",\n-                        getResources().getString(R.string.delete_deck), false);\n-                if (did == getCol().getDecks().current().optLong(\"id\")) {\n-                    removingCurrent = true;\n-                }\n+        TaskListener listener = deleteDeckListener(did);\n+        CollectionTask.launchCollectionTask(DELETE_DECK, listener, new TaskData(did));\n+    }\n+    private DeleteDeckListener deleteDeckListener(long did) {\n+        return new DeleteDeckListener(did, this);\n+    }\n+    private static class DeleteDeckListener extends TaskListenerWithContext<DeckPicker>{\n+        private final long did;\n+        // Flag to indicate if the deck being deleted is the current deck.\n+        private boolean removingCurrent;\n+\n+        public DeleteDeckListener(long did, DeckPicker deckPicker) {\n+            super(deckPicker);\n+            this.did = did;\n+        }\n+\n+\n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPicker deckPicker) {\n+            deckPicker.mProgressDialog = StyledProgressDialog.show(deckPicker, \"\",\n+                    deckPicker.getResources().getString(R.string.delete_deck), false);\n+            if (did == deckPicker.getCol().getDecks().current().optLong(\"id\")) {\n+                removingCurrent = true;\n             }\n+        }\n \n \n-            @SuppressWarnings(\"unchecked\")\n-            @Override\n-            public void onPostExecute(@Nullable TaskData result) {\n-                // In fragmented mode, if the deleted deck was the current deck, we need to reload\n-                // the study options fragment with a valid deck and re-center the deck list to the\n-                // new current deck. Otherwise we just update the list normally.\n-                if (mFragmented && removingCurrent) {\n-                    updateDeckList();\n-                    openStudyOptions(false);\n-                } else {\n-                    updateDeckList();\n-                }\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPicker deckPicker, @Nullable TaskData result) {\n+            // In fragmented mode, if the deleted deck was the current deck, we need to reload\n+            // the study options fragment with a valid deck and re-center the deck list to the\n+            // new current deck. Otherwise we just update the list normally.\n+            if (deckPicker.mFragmented && removingCurrent) {\n+                deckPicker.updateDeckList();\n+                deckPicker.openStudyOptions(false);\n+            } else {\n+                deckPicker.updateDeckList();\n+            }\n \n-                if (mProgressDialog != null && mProgressDialog.isShowing()) {\n-                    try {\n-                        mProgressDialog.dismiss();\n-                    } catch (Exception e) {\n-                        Timber.e(e, \"onPostExecute - Exception dismissing dialog\");\n-                    }\n+            if (deckPicker.mProgressDialog != null && deckPicker.mProgressDialog.isShowing()) {\n+                try {\n+                    deckPicker.mProgressDialog.dismiss();\n+                } catch (Exception e) {\n+                    Timber.e(e, \"onPostExecute - Exception dismissing dialog\");\n                 }\n-                // TODO: if we had \"undo delete note\" like desktop client then we won't need this.\n-                getCol().clearUndo();\n             }\n-        };\n-        CollectionTask.launchCollectionTask(DELETE_DECK, listener, new TaskData(did));\n+            // TODO: if we had \"undo delete note\" like desktop client then we won't need this.\n+            deckPicker.getCol().clearUndo();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTk3Nw=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 528}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MDgzMA==", "bodyText": "I don't understand. Are you making a comment about current behavior or are you noticing a change of behavior ? In the first case, it should probably be considered in another PR. In the second, I don't see how it makes a differenc, since both methods just Timber and then showDatabaseErrorDialog which opens a fragment on top of deck picker.\nSo if there was a DB error, if deckPicker has been left, it can't be to another activity, so it should be ankidroid closed, and so it's not really a change. If we were able to open another activity and display it without problem, there is something quite strange and that should be considered elsewhere", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466550830", "createdAt": "2020-08-06T16:54:15Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2594,35 +2668,35 @@ public void onPostExecute(TaskData result) {\n \n             if (!result.getBoolean() || databaseResult.getFailed()) {\n                 if (databaseResult.getDatabaseLocked()) {\n-                    handleDbLocked();\n+                    deckPicker.handleDbLocked();\n                 } else {\n-                    handleDbError();\n+                    deckPicker.handleDbError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxMDcyNA=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 688}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU1MTQ0NA==", "bodyText": "Ok", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r466551444", "createdAt": "2020-08-06T16:55:16Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/TaskListenerWithContext.java", "diffHunk": "@@ -0,0 +1,66 @@\n+package com.ichi2.async;\n+\n+import java.lang.ref.WeakReference;\n+\n+import androidx.annotation.NonNull;\n+\n+/** Similar to task listener, but if the context disappear, no action are executed.\n+ * We ensure that the context can't disappear during the execution of the methods. */\n+public abstract class TaskListenerWithContext<Context> extends TaskListener {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUxMzY4Nw=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc", "committedDate": "2020-08-05T12:30:05Z", "message": "NF: NextCardHandler with context"}, "afterCommit": {"oid": "b9e6512213b424471cef2b4fd9800616eeab511d", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b9e6512213b424471cef2b4fd9800616eeab511d", "committedDate": "2020-08-06T19:40:43Z", "message": "NF: NextCardHandler with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9e6512213b424471cef2b4fd9800616eeab511d", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b9e6512213b424471cef2b4fd9800616eeab511d", "committedDate": "2020-08-06T19:40:43Z", "message": "NF: NextCardHandler with context"}, "afterCommit": {"oid": "122bc0f8839da027f4afdcd39b93bfbd367173f9", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/122bc0f8839da027f4afdcd39b93bfbd367173f9", "committedDate": "2020-08-06T23:11:44Z", "message": "NF: NextCardHandler with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "122bc0f8839da027f4afdcd39b93bfbd367173f9", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/122bc0f8839da027f4afdcd39b93bfbd367173f9", "committedDate": "2020-08-06T23:11:44Z", "message": "NF: NextCardHandler with context"}, "afterCommit": {"oid": "c81bc9a595e86d31e57a03509f86913a1522abef", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c81bc9a595e86d31e57a03509f86913a1522abef", "committedDate": "2020-08-06T23:14:07Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c81bc9a595e86d31e57a03509f86913a1522abef", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c81bc9a595e86d31e57a03509f86913a1522abef", "committedDate": "2020-08-06T23:14:07Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "7dd25e38af4800c4170a653054f0daa15c10a5d1", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/7dd25e38af4800c4170a653054f0daa15c10a5d1", "committedDate": "2020-08-07T19:55:02Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7dd25e38af4800c4170a653054f0daa15c10a5d1", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/7dd25e38af4800c4170a653054f0daa15c10a5d1", "committedDate": "2020-08-07T19:55:02Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/d284908f7213ee0c88ab6ac67605cb7e449f6f2e", "committedDate": "2020-08-08T18:46:30Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0OTI3MDU0", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#pullrequestreview-464927054", "createdAt": "2020-08-11T10:07:37Z", "commit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDowNzozN1rOG-xKeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMDoxNzo0MlrOG-xeCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MDM5NA==", "bodyText": "nit: might be more readable to extract these two lines to a method - becomes more complex with the additional variable", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468470394", "createdAt": "2020-08-11T10:07:37Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1794,44 +1861,49 @@ public void onPostExecute(TaskData result) {\n \n \n         @Override\n-        public void onCancelled() {\n-            hideProgressBar();\n+        public void actualOnCancelled(@NonNull CardBrowser browser) {\n+            browser.hideProgressBar();\n         }\n     };\n \n-    private TaskListener mCheckSelectedCardsHandler = new ListenerWithProgressBar() {\n+    private final CheckSelectedCardsHandler mCheckSelectedCardsHandler = new CheckSelectedCardsHandler(this);\n+    private static class CheckSelectedCardsHandler extends ListenerWithProgressBar {\n+        public CheckSelectedCardsHandler(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        public void onPostExecute(TaskData result) {\n-            hideProgressBar();\n+        public void actualOnPostExecute(@NonNull CardBrowser browser, TaskData result) {\n+            browser.hideProgressBar();\n \n             Object[] resultArr = result.getObjArray();\n             boolean hasUnsuspended = (boolean) resultArr[0];\n             boolean hasUnmarked = (boolean) resultArr[1];\n \n             if (hasUnsuspended) {\n-                mActionBarMenu.findItem(R.id.action_suspend_card).setTitle(getString(R.string.card_browser_suspend_card));\n-                mActionBarMenu.findItem(R.id.action_suspend_card).setIcon(R.drawable.ic_action_suspend);\n+                browser.mActionBarMenu.findItem(R.id.action_suspend_card).setTitle(browser.getString(R.string.card_browser_suspend_card));\n+                browser.mActionBarMenu.findItem(R.id.action_suspend_card).setIcon(R.drawable.ic_action_suspend);\n             } else {\n-                mActionBarMenu.findItem(R.id.action_suspend_card).setTitle(getString(R.string.card_browser_unsuspend_card));\n-                mActionBarMenu.findItem(R.id.action_suspend_card).setIcon(R.drawable.ic_action_unsuspend);\n+                browser.mActionBarMenu.findItem(R.id.action_suspend_card).setTitle(browser.getString(R.string.card_browser_unsuspend_card));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e"}, "originalPosition": 468}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3MTMwNA==", "bodyText": "Nit: inconsistent use of getResources()", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468471304", "createdAt": "2020-08-11T10:09:31Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardTemplateEditor.java", "diffHunk": "@@ -628,35 +629,40 @@ private void onCardBrowserAppearanceResult(int resultCode, @Nullable Intent data\n         }\n \n         /* Used for updating the collection when a model has been edited */\n-        private TaskListener mSaveModelAndExitHandler = new TaskListener() {\n+        private final SaveModelAndExitHandler mSaveModelAndExitHandler = new SaveModelAndExitHandler(this);\n+        private static class SaveModelAndExitHandler extends TaskListenerWithContext<CardTemplateFragment> {\n+            public SaveModelAndExitHandler(CardTemplateFragment templateFragment) {\n+                super(templateFragment);\n+            }\n+\n             private MaterialDialog mProgressDialog = null;\n             @Override\n-            public void onPreExecute() {\n+            public void actualOnPreExecute(@NonNull CardTemplateFragment templateFragment) {\n                 Timber.d(\"mSaveModelAndExitHandler::preExecute called\");\n-                mProgressDialog = StyledProgressDialog.show(mTemplateEditor, AnkiDroidApp.getAppResources().getString(R.string.saving_model),\n-                        getResources().getString(R.string.saving_changes), false);\n+                mProgressDialog = StyledProgressDialog.show(templateFragment.mTemplateEditor, AnkiDroidApp.getAppResources().getString(R.string.saving_model),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3Mzc3MQ==", "bodyText": "This appears to still be in actualOnPostExecute? I don't understand why it's safe", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468473771", "createdAt": "2020-08-11T10:14:40Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/DeckPicker.java", "diffHunk": "@@ -2383,63 +2431,78 @@ public void deleteContextMenuDeck() {\n         deleteDeck(mContextMenuDid);\n     }\n     public void deleteDeck(final long did) {\n-        CollectionTask.TaskListener listener = new CollectionTask.TaskListener() {\n-            // Flag to indicate if the deck being deleted is the current deck.\n-            private boolean removingCurrent;\n-\n-            @Override\n-            public void onPreExecute() {\n-                mProgressDialog = StyledProgressDialog.show(DeckPicker.this, \"\",\n-                        getResources().getString(R.string.delete_deck), false);\n-                if (did == getCol().getDecks().current().optLong(\"id\")) {\n-                    removingCurrent = true;\n-                }\n+        TaskListener listener = deleteDeckListener(did);\n+        CollectionTask.launchCollectionTask(DELETE_DECK, listener, new TaskData(did));\n+    }\n+    private DeleteDeckListener deleteDeckListener(long did) {\n+        return new DeleteDeckListener(did, this);\n+    }\n+    private static class DeleteDeckListener extends TaskListenerWithContext<DeckPicker>{\n+        private final long did;\n+        // Flag to indicate if the deck being deleted is the current deck.\n+        private boolean removingCurrent;\n+\n+        public DeleteDeckListener(long did, DeckPicker deckPicker) {\n+            super(deckPicker);\n+            this.did = did;\n+        }\n+\n+\n+        @Override\n+        public void actualOnPreExecute(@NonNull DeckPicker deckPicker) {\n+            deckPicker.mProgressDialog = StyledProgressDialog.show(deckPicker, \"\",\n+                    deckPicker.getResources().getString(R.string.delete_deck), false);\n+            if (did == deckPicker.getCol().getDecks().current().optLong(\"id\")) {\n+                removingCurrent = true;\n             }\n+        }\n \n \n-            @SuppressWarnings(\"unchecked\")\n-            @Override\n-            public void onPostExecute(@Nullable TaskData result) {\n-                // In fragmented mode, if the deleted deck was the current deck, we need to reload\n-                // the study options fragment with a valid deck and re-center the deck list to the\n-                // new current deck. Otherwise we just update the list normally.\n-                if (mFragmented && removingCurrent) {\n-                    updateDeckList();\n-                    openStudyOptions(false);\n-                } else {\n-                    updateDeckList();\n-                }\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public void actualOnPostExecute(@NonNull DeckPicker deckPicker, @Nullable TaskData result) {\n+            // In fragmented mode, if the deleted deck was the current deck, we need to reload\n+            // the study options fragment with a valid deck and re-center the deck list to the\n+            // new current deck. Otherwise we just update the list normally.\n+            if (deckPicker.mFragmented && removingCurrent) {\n+                deckPicker.updateDeckList();\n+                deckPicker.openStudyOptions(false);\n+            } else {\n+                deckPicker.updateDeckList();\n+            }\n \n-                if (mProgressDialog != null && mProgressDialog.isShowing()) {\n-                    try {\n-                        mProgressDialog.dismiss();\n-                    } catch (Exception e) {\n-                        Timber.e(e, \"onPostExecute - Exception dismissing dialog\");\n-                    }\n+            if (deckPicker.mProgressDialog != null && deckPicker.mProgressDialog.isShowing()) {\n+                try {\n+                    deckPicker.mProgressDialog.dismiss();\n+                } catch (Exception e) {\n+                    Timber.e(e, \"onPostExecute - Exception dismissing dialog\");\n                 }\n-                // TODO: if we had \"undo delete note\" like desktop client then we won't need this.\n-                getCol().clearUndo();\n             }\n-        };\n-        CollectionTask.launchCollectionTask(DELETE_DECK, listener, new TaskData(did));\n+            // TODO: if we had \"undo delete note\" like desktop client then we won't need this.\n+            deckPicker.getCol().clearUndo();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwOTk3Nw=="}, "originalCommit": {"oid": "027d1f8a704f8c28b944ac9ca6b88b9fc5a447cc"}, "originalPosition": 528}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NDUyNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private  AnkiActivity activity;\n          \n          \n            \n                    private AnkiActivity activity;", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468474527", "createdAt": "2020-08-11T10:16:03Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/CustomStudyDialog.java", "diffHunk": "@@ -512,4 +502,30 @@ private void onLimitsExtended(boolean jumpToReviewer) {\n     protected AnkiActivity getAnkiActivity() {\n         return (AnkiActivity) getActivity();\n     }\n+\n+\n+    private CreateCustomStudySessionListener createCustomStudySessionListener(AnkiActivity activity){\n+        return new CreateCustomStudySessionListener(this, activity);\n+    }\n+    private static class CreateCustomStudySessionListener extends TaskListenerWithContext<CustomStudyDialog> {\n+        private  AnkiActivity activity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NTA3Ng==", "bodyText": "activity is a context leak, you might be able to do dialog.getActivity() which is nullable", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468475076", "createdAt": "2020-08-11T10:17:05Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/CustomStudyDialog.java", "diffHunk": "@@ -512,4 +502,30 @@ private void onLimitsExtended(boolean jumpToReviewer) {\n     protected AnkiActivity getAnkiActivity() {\n         return (AnkiActivity) getActivity();\n     }\n+\n+\n+    private CreateCustomStudySessionListener createCustomStudySessionListener(AnkiActivity activity){\n+        return new CreateCustomStudySessionListener(this, activity);\n+    }\n+    private static class CreateCustomStudySessionListener extends TaskListenerWithContext<CustomStudyDialog> {\n+        private  AnkiActivity activity;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQ3NTQwMQ==", "bodyText": "insignificant whitespace change", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468475401", "createdAt": "2020-08-11T10:17:42Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/RobolectricTest.java", "diffHunk": "@@ -40,6 +40,7 @@\n import com.ichi2.utils.JSONObject;\n \n import org.hamcrest.Matcher;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e"}, "originalPosition": 4}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d284908f7213ee0c88ab6ac67605cb7e449f6f2e", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/d284908f7213ee0c88ab6ac67605cb7e449f6f2e", "committedDate": "2020-08-08T18:46:30Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "5e39484331819df00801f66a6dfb37317bd89a4b", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/5e39484331819df00801f66a6dfb37317bd89a4b", "committedDate": "2020-08-11T16:24:43Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5e39484331819df00801f66a6dfb37317bd89a4b", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/5e39484331819df00801f66a6dfb37317bd89a4b", "committedDate": "2020-08-11T16:24:43Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "62ec4a264d5f41b8a9ddf7dd4186afc1492effd8", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/62ec4a264d5f41b8a9ddf7dd4186afc1492effd8", "committedDate": "2020-08-11T17:59:52Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62ec4a264d5f41b8a9ddf7dd4186afc1492effd8", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/62ec4a264d5f41b8a9ddf7dd4186afc1492effd8", "committedDate": "2020-08-11T17:59:52Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "46a824f5910cdf41745bcfd9248d97639a8060c4", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/46a824f5910cdf41745bcfd9248d97639a8060c4", "committedDate": "2020-08-11T21:43:10Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1NDU1NTc1", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#pullrequestreview-465455575", "createdAt": "2020-08-11T21:54:28Z", "commit": {"oid": "46a824f5910cdf41745bcfd9248d97639a8060c4"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1NDoyOFrOG_KkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQyMTo1ODoyOFrOG_Kq0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4NjYwNQ==", "bodyText": "Maybe? Sounds better than actual actual\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            actualActualOnPostExecute(browser, result);\n          \n          \n            \n                            actualOnValidPostExecute(browser, result);", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468886605", "createdAt": "2020-08-11T21:54:28Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/CardBrowser.java", "diffHunk": "@@ -1369,35 +1391,41 @@ private void filterByTag(List<String> selectedTags, int option) {\n     }\n \n \n-    private abstract class ListenerWithProgressBar extends TaskListener {\n+    private static abstract class ListenerWithProgressBar extends TaskListenerWithContext<CardBrowser>{\n+        public ListenerWithProgressBar(CardBrowser browser) {\n+            super(browser);\n+        }\n+\n         @Override\n-        public void onPreExecute() {\n-            showProgressBar();\n+        public void actualOnPreExecute(@NonNull CardBrowser browser) {\n+            browser.showProgressBar();\n         }\n     }\n \n-    private abstract class ListenerWithProgressBarCloseOnFalse extends ListenerWithProgressBar {\n-        private String timber = null;\n-\n-        public ListenerWithProgressBarCloseOnFalse(String timber) {\n-            this.timber = timber;\n+    /** Does not leak Card Browser. */\n+    private static abstract class ListenerWithProgressBarCloseOnFalse extends ListenerWithProgressBar {\n+        private final String mTimber;\n+        public ListenerWithProgressBarCloseOnFalse(String timber, CardBrowser browser) {\n+            super(browser);\n+            mTimber = timber;\n         }\n \n-        public ListenerWithProgressBarCloseOnFalse() {\n+        public ListenerWithProgressBarCloseOnFalse(CardBrowser browser) {\n+            this(null, browser);\n \t\t}\n \n-        public void onPostExecute(TaskData result) {\n-            if (timber != null) {\n-                Timber.d(timber);\n+        public void actualOnPostExecute(@NonNull CardBrowser browser, TaskData result) {\n+            if (mTimber != null) {\n+                Timber.d(mTimber);\n             }\n             if (result.getBoolean()) {\n-                actualPostExecute(result);\n+                actualActualOnPostExecute(browser, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a824f5910cdf41745bcfd9248d97639a8060c4"}, "originalPosition": 217}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODg4ODI3NA==", "bodyText": "maybe rename to changeHandler", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#discussion_r468888274", "createdAt": "2020-08-11T21:58:28Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/ModelFieldEditor.java", "diffHunk": "@@ -180,9 +183,10 @@ private void addFieldDialog() {\n                         UIUtils.showThemedToast(this, getResources().getString(R.string.toast_duplicate_field), true);\n                     } else {\n                         //Name is valid, now field is added\n+                        ChangeFieldHandler listener = changeFieldHandler();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46a824f5910cdf41745bcfd9248d97639a8060c4"}, "originalPosition": 21}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "46a824f5910cdf41745bcfd9248d97639a8060c4", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/46a824f5910cdf41745bcfd9248d97639a8060c4", "committedDate": "2020-08-11T21:43:10Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "a4680379d6dce0a78afc779632f80ed8bf511a6d", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a4680379d6dce0a78afc779632f80ed8bf511a6d", "committedDate": "2020-08-11T22:04:38Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4680379d6dce0a78afc779632f80ed8bf511a6d", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a4680379d6dce0a78afc779632f80ed8bf511a6d", "committedDate": "2020-08-11T22:04:38Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "841946839f8b45f2b6a190f7284eceb1d0a85b55", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/841946839f8b45f2b6a190f7284eceb1d0a85b55", "committedDate": "2020-08-15T23:25:45Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "841946839f8b45f2b6a190f7284eceb1d0a85b55", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/841946839f8b45f2b6a190f7284eceb1d0a85b55", "committedDate": "2020-08-15T23:25:45Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "c30a742b0bd3b0762bcd4970775dfbd4529cfb21", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c30a742b0bd3b0762bcd4970775dfbd4529cfb21", "committedDate": "2020-08-16T23:45:22Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b72f32381ac529e99a5f2713066380d96e58bb6", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/6b72f32381ac529e99a5f2713066380d96e58bb6", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ConfChangeHandler static\n\nThis will mostly be useful in next commits, to avoid leaking context. Right now, context is in a variable, so it leaks\nas before"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "984a085aa9f7e440bf922fec87cfaaa040b0ce62", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/984a085aa9f7e440bf922fec87cfaaa040b0ce62", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: TaskListenerWithContext"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75e7b3dcf7f3f3577731ea88e0d7c2741444d8f9", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/75e7b3dcf7f3f3577731ea88e0d7c2741444d8f9", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: CustomStudyDialog with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3760fe2222d5897a89ad1b6c84c2f1f9742f27c7", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/3760fe2222d5897a89ad1b6c84c2f1f9742f27c7", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: CardTemplateEditor with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e450c67f7311c074aec3380ee2276f1a7cb8876", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/1e450c67f7311c074aec3380ee2276f1a7cb8876", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ModelFieldEditor with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4d3a2c83af384bd0c7db145c0f55a9a700cedae7", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/4d3a2c83af384bd0c7db145c0f55a9a700cedae7", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: DeckOption with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0469a193b4b837518f043f51a2bf62e879366da1", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/0469a193b4b837518f043f51a2bf62e879366da1", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: LoadingModelsHandler with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4227d9e6624283cd4cbe7371fe92c3dfcb28d98", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a4227d9e6624283cd4cbe7371fe92c3dfcb28d98", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: DeleteModelHandler with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d9eb43cb9d0be6a2466f52b582b52e59fa289e8", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/2d9eb43cb9d0be6a2466f52b582b52e59fa289e8", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: NoteEditor with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7cf1fce6e73466a5dd4ff216952ba14b92c8c71f", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/7cf1fce6e73466a5dd4ff216952ba14b92c8c71f", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: RepositionCardHandler with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6fa6ec03fa3e48d3b564158e7bba0709e0f832eb", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/6fa6ec03fa3e48d3b564158e7bba0709e0f832eb", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ResetCardHandler with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1458a1953365def17f7138aee7af7e7ec283cfad", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/1458a1953365def17f7138aee7af7e7ec283cfad", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: RescheduleCardHandler with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9a3d9eeabda41384b18602ee2c9c2999c8cc146", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a9a3d9eeabda41384b18602ee2c9c2999c8cc146", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: factorize mCheckSelectedCardsHandler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59544465f97d8a63cad092e39fbfd40210b8ab07", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/59544465f97d8a63cad092e39fbfd40210b8ab07", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: Factorize selected card handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e2452350abf106ed155fe8dfef039b8d85819162", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/e2452350abf106ed155fe8dfef039b8d85819162", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ListenerWithProgressBar with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568692d30c60cf69d47b2aa5d90d88a93f9aefc8", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/568692d30c60cf69d47b2aa5d90d88a93f9aefc8", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: Undo with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb2482b4168f1aec14460730576db8d150dbe492", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/fb2482b4168f1aec14460730576db8d150dbe492", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: RepairCollection with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05ee885ef403e067e9541690cf7823a4ce8d02ab", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/05ee885ef403e067e9541690cf7823a4ce8d02ab", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: MediaCheckListener with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa47d5bdda2d415ae40ac6e5b2ec5f7cfa13d320", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/fa47d5bdda2d415ae40ac6e5b2ec5f7cfa13d320", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ImportReplaceListener with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3eed84806fce0bb2cfc0a863551586fdc78e5cf", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a3eed84806fce0bb2cfc0a863551586fdc78e5cf", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: UpdateDeckList with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f72f7c346382cab36b162db39a30fa6bbf24071", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/3f72f7c346382cab36b162db39a30fa6bbf24071", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: SimpleProgressListener with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad3bb5b6cd864f0726ba03e99c36bf384d24bd35", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ad3bb5b6cd864f0726ba03e99c36bf384d24bd35", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: HandleEmptyCards with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "985bfa11aca4c3a8971db66824a61ea5ce05b2ed", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/985bfa11aca4c3a8971db66824a61ea5ce05b2ed", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ImportAddListener with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfa5cd9583aafd2efdd2f9d9cc256f20f03e98eb", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/bfa5cd9583aafd2efdd2f9d9cc256f20f03e98eb", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: ExportListener with context"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b42ecb5ec578ca537974e20c07a4ff6c3efb29a2", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b42ecb5ec578ca537974e20c07a4ff6c3efb29a2", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c30a742b0bd3b0762bcd4970775dfbd4529cfb21", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c30a742b0bd3b0762bcd4970775dfbd4529cfb21", "committedDate": "2020-08-16T23:45:22Z", "message": "NF: DeleteDeckListener with context"}, "afterCommit": {"oid": "b42ecb5ec578ca537974e20c07a4ff6c3efb29a2", "author": {"user": {"login": "Arthur-Milchior", "name": "Arthur Milchior"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/b42ecb5ec578ca537974e20c07a4ff6c3efb29a2", "committedDate": "2020-08-18T01:48:01Z", "message": "NF: DeleteDeckListener with context"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY5NTYzMTI1", "url": "https://github.com/ankidroid/Anki-Android/pull/6775#pullrequestreview-469563125", "createdAt": "2020-08-18T15:20:52Z", "commit": {"oid": "b42ecb5ec578ca537974e20c07a4ff6c3efb29a2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3076, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}