{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyMjc1ODQ2", "number": 6594, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoxNDo0OVrOEKUaBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo1Njo0M1rOEKU2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjU1NTU4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoxNDo0OVrOGrSpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDoxNDo0OVrOGrSpPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA0NzQyMA==", "bodyText": "Love the multi-scheduler running @david-allison-1 !", "url": "https://github.com/ankidroid/Anki-Android/pull/6594#discussion_r448047420", "createdAt": "2020-07-01T00:14:49Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.sched;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.async.CollectionTask;\n+import com.ichi2.libanki.Card;\n+import com.ichi2.libanki.Consts;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.ParameterizedRobolectricTestRunner;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameter;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameters;\n+\n+import java.util.Arrays;\n+\n+import static com.ichi2.anki.AbstractFlashcardViewer.EASE_3;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+// Note: These tests can't be run individually but can from the class-level\n+// gradlew AnkiDroid:testDebug --tests \"com.ichi2.libanki.sched.AbstractSchedTest.*\"\n+@RunWith(ParameterizedRobolectricTestRunner.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90020b19391875826460d63eeecc1be01b361e49"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjYyNTM4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo1NTozMFrOGrTSJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTowMjowM1rOGrTYsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1Nzg5NA==", "bodyText": "Does this block wait until the task is completed?", "url": "https://github.com/ankidroid/Anki-Android/pull/6594#discussion_r448057894", "createdAt": "2020-07-01T00:55:30Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.sched;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.async.CollectionTask;\n+import com.ichi2.libanki.Card;\n+import com.ichi2.libanki.Consts;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.ParameterizedRobolectricTestRunner;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameter;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameters;\n+\n+import java.util.Arrays;\n+\n+import static com.ichi2.anki.AbstractFlashcardViewer.EASE_3;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+// Note: These tests can't be run individually but can from the class-level\n+// gradlew AnkiDroid:testDebug --tests \"com.ichi2.libanki.sched.AbstractSchedTest.*\"\n+@RunWith(ParameterizedRobolectricTestRunner.class)\n+public class AbstractSchedTest extends RobolectricTest {\n+\n+    @Parameter\n+    public int schedVersion;\n+\n+    @Parameters(name = \"SchedV{0}\")\n+    public static java.util.Collection<Object[]> initParameters() {\n+        // This does one run with schedVersion injected as 1, and one run as 2\n+        return Arrays.asList(new Object[][] { { 1 }, { 2 } });\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        try {\n+            getCol().changeSchedulerVer(schedVersion);\n+        } catch (ConfirmModSchemaException e) {\n+            throw new RuntimeException(\"Could not change schedVer\", e);\n+        }\n+    }\n+\n+    @Test\n+    public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException {\n+        // #6587\n+        addNoteUsingBasicModel(\"Hello\", \"World\");\n+\n+        AbstractSched sched = getCol().getSched();\n+        sched.reset();\n+\n+        Card cardBeforeUndo = sched.getCard();\n+        sched.setCurrentCard(cardBeforeUndo);\n+        int[] countsBeforeUndo = sched.counts();\n+        // Not shown in the UI, but there is a state where the card has been removed from the queue, but not answered\n+        // where the counts are decremented.\n+        assertThat(countsBeforeUndo, is(new int[] { 0, 0, 0 }));\n+\n+        sched.answerCard(cardBeforeUndo, EASE_3);\n+\n+        CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_UNDO,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f42a70f6e7a42d1a3fe56b36750fef593f93f0d"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1OTU2OA==", "bodyText": "The actual test is done when the task is completed. Don't know whether it is your question", "url": "https://github.com/ankidroid/Anki-Android/pull/6594#discussion_r448059568", "createdAt": "2020-07-01T01:02:03Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.sched;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.async.CollectionTask;\n+import com.ichi2.libanki.Card;\n+import com.ichi2.libanki.Consts;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.ParameterizedRobolectricTestRunner;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameter;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameters;\n+\n+import java.util.Arrays;\n+\n+import static com.ichi2.anki.AbstractFlashcardViewer.EASE_3;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+// Note: These tests can't be run individually but can from the class-level\n+// gradlew AnkiDroid:testDebug --tests \"com.ichi2.libanki.sched.AbstractSchedTest.*\"\n+@RunWith(ParameterizedRobolectricTestRunner.class)\n+public class AbstractSchedTest extends RobolectricTest {\n+\n+    @Parameter\n+    public int schedVersion;\n+\n+    @Parameters(name = \"SchedV{0}\")\n+    public static java.util.Collection<Object[]> initParameters() {\n+        // This does one run with schedVersion injected as 1, and one run as 2\n+        return Arrays.asList(new Object[][] { { 1 }, { 2 } });\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        try {\n+            getCol().changeSchedulerVer(schedVersion);\n+        } catch (ConfirmModSchemaException e) {\n+            throw new RuntimeException(\"Could not change schedVer\", e);\n+        }\n+    }\n+\n+    @Test\n+    public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException {\n+        // #6587\n+        addNoteUsingBasicModel(\"Hello\", \"World\");\n+\n+        AbstractSched sched = getCol().getSched();\n+        sched.reset();\n+\n+        Card cardBeforeUndo = sched.getCard();\n+        sched.setCurrentCard(cardBeforeUndo);\n+        int[] countsBeforeUndo = sched.counts();\n+        // Not shown in the UI, but there is a state where the card has been removed from the queue, but not answered\n+        // where the counts are decremented.\n+        assertThat(countsBeforeUndo, is(new int[] { 0, 0, 0 }));\n+\n+        sched.answerCard(cardBeforeUndo, EASE_3);\n+\n+        CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_UNDO,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1Nzg5NA=="}, "originalCommit": {"oid": "9f42a70f6e7a42d1a3fe56b36750fef593f93f0d"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MjYyNzQ5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMDo1Njo0M1rOGrTTYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwMTowMDo1NlrOGrTXfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1ODIxMA==", "bodyText": "Why is this not done in the background in the task?", "url": "https://github.com/ankidroid/Anki-Android/pull/6594#discussion_r448058210", "createdAt": "2020-07-01T00:56:43Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.sched;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.async.CollectionTask;\n+import com.ichi2.libanki.Card;\n+import com.ichi2.libanki.Consts;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.ParameterizedRobolectricTestRunner;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameter;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameters;\n+\n+import java.util.Arrays;\n+\n+import static com.ichi2.anki.AbstractFlashcardViewer.EASE_3;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+// Note: These tests can't be run individually but can from the class-level\n+// gradlew AnkiDroid:testDebug --tests \"com.ichi2.libanki.sched.AbstractSchedTest.*\"\n+@RunWith(ParameterizedRobolectricTestRunner.class)\n+public class AbstractSchedTest extends RobolectricTest {\n+\n+    @Parameter\n+    public int schedVersion;\n+\n+    @Parameters(name = \"SchedV{0}\")\n+    public static java.util.Collection<Object[]> initParameters() {\n+        // This does one run with schedVersion injected as 1, and one run as 2\n+        return Arrays.asList(new Object[][] { { 1 }, { 2 } });\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        try {\n+            getCol().changeSchedulerVer(schedVersion);\n+        } catch (ConfirmModSchemaException e) {\n+            throw new RuntimeException(\"Could not change schedVer\", e);\n+        }\n+    }\n+\n+    @Test\n+    public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException {\n+        // #6587\n+        addNoteUsingBasicModel(\"Hello\", \"World\");\n+\n+        AbstractSched sched = getCol().getSched();\n+        sched.reset();\n+\n+        Card cardBeforeUndo = sched.getCard();\n+        sched.setCurrentCard(cardBeforeUndo);\n+        int[] countsBeforeUndo = sched.counts();\n+        // Not shown in the UI, but there is a state where the card has been removed from the queue, but not answered\n+        // where the counts are decremented.\n+        assertThat(countsBeforeUndo, is(new int[] { 0, 0, 0 }));\n+\n+        sched.answerCard(cardBeforeUndo, EASE_3);\n+\n+        CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_UNDO,\n+                new CollectionTask.Listener() {\n+                    @Override\n+                    public void onPreExecute(CollectionTask task) {\n+\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(CollectionTask task, CollectionTask.TaskData result) {\n+                        int[] countsAfterUndo = sched.counts();\n+                        assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n+\n+                    }\n+\n+\n+                    @Override\n+                    public void onProgressUpdate(CollectionTask task, CollectionTask.TaskData... values) {\n+                        Card undoneCard = (Card)values[0].getCard();\n+                        sched.setCurrentCard(undoneCard);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f42a70f6e7a42d1a3fe56b36750fef593f93f0d"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1OTI2Mg==", "bodyText": "This is simulating the reviewer. The reviewer does this in onProgessUpdate.", "url": "https://github.com/ankidroid/Anki-Android/pull/6594#discussion_r448059262", "createdAt": "2020-07-01T01:00:56Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+\n+ This program is free software; you can redistribute it and/or modify it under\n+ the terms of the GNU General Public License as published by the Free Software\n+ Foundation; either version 3 of the License, or (at your option) any later\n+ version.\n+\n+ This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+\n+ You should have received a copy of the GNU General Public License along with\n+ this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.libanki.sched;\n+\n+import com.ichi2.anki.RobolectricTest;\n+import com.ichi2.anki.exception.ConfirmModSchemaException;\n+import com.ichi2.async.CollectionTask;\n+import com.ichi2.libanki.Card;\n+import com.ichi2.libanki.Consts;\n+\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.robolectric.ParameterizedRobolectricTestRunner;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameter;\n+import org.robolectric.ParameterizedRobolectricTestRunner.Parameters;\n+\n+import java.util.Arrays;\n+\n+import static com.ichi2.anki.AbstractFlashcardViewer.EASE_3;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+\n+// Note: These tests can't be run individually but can from the class-level\n+// gradlew AnkiDroid:testDebug --tests \"com.ichi2.libanki.sched.AbstractSchedTest.*\"\n+@RunWith(ParameterizedRobolectricTestRunner.class)\n+public class AbstractSchedTest extends RobolectricTest {\n+\n+    @Parameter\n+    public int schedVersion;\n+\n+    @Parameters(name = \"SchedV{0}\")\n+    public static java.util.Collection<Object[]> initParameters() {\n+        // This does one run with schedVersion injected as 1, and one run as 2\n+        return Arrays.asList(new Object[][] { { 1 }, { 2 } });\n+    }\n+\n+    @Before\n+    @Override\n+    public void setUp() {\n+        super.setUp();\n+        try {\n+            getCol().changeSchedulerVer(schedVersion);\n+        } catch (ConfirmModSchemaException e) {\n+            throw new RuntimeException(\"Could not change schedVer\", e);\n+        }\n+    }\n+\n+    @Test\n+    public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException {\n+        // #6587\n+        addNoteUsingBasicModel(\"Hello\", \"World\");\n+\n+        AbstractSched sched = getCol().getSched();\n+        sched.reset();\n+\n+        Card cardBeforeUndo = sched.getCard();\n+        sched.setCurrentCard(cardBeforeUndo);\n+        int[] countsBeforeUndo = sched.counts();\n+        // Not shown in the UI, but there is a state where the card has been removed from the queue, but not answered\n+        // where the counts are decremented.\n+        assertThat(countsBeforeUndo, is(new int[] { 0, 0, 0 }));\n+\n+        sched.answerCard(cardBeforeUndo, EASE_3);\n+\n+        CollectionTask.launchCollectionTask(CollectionTask.TASK_TYPE_UNDO,\n+                new CollectionTask.Listener() {\n+                    @Override\n+                    public void onPreExecute(CollectionTask task) {\n+\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(CollectionTask task, CollectionTask.TaskData result) {\n+                        int[] countsAfterUndo = sched.counts();\n+                        assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n+\n+                    }\n+\n+\n+                    @Override\n+                    public void onProgressUpdate(CollectionTask task, CollectionTask.TaskData... values) {\n+                        Card undoneCard = (Card)values[0].getCard();\n+                        sched.setCurrentCard(undoneCard);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODA1ODIxMA=="}, "originalCommit": {"oid": "9f42a70f6e7a42d1a3fe56b36750fef593f93f0d"}, "originalPosition": 100}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 59, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}