{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzNTI0NTI0", "number": 7592, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyMjoxMFrOE0K3_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNTowMjozMFrOE2TZjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTM5NTgwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyMjoxMFrOHrxC6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDozOTo0MlrOHrzkEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDM3OQ==", "bodyText": "You don't need n. here", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515654379", "createdAt": "2020-11-01T18:22:10Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -217,7 +229,7 @@ private void _importNotes() {\n         int dupes = 0;\n         ArrayList<String> dupesIgnored = new ArrayList<>();\n         mDst.getDb().getDatabase().beginTransaction();\n-        try (Cursor cur = mSrc.getDb().getDatabase().query(\"select * from notes\", null)) {\n+        try (Cursor cur = mSrc.getDb().getDatabase().query(\"select n.id, n.guid, n.mid, n.mod, n.tags, n.flds, n.sfld, n.csum, n.flags, n.data  from notes n\", null)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTYzNQ==", "bodyText": "Removed", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695635", "createdAt": "2020-11-02T00:39:42Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -217,7 +229,7 @@ private void _importNotes() {\n         int dupes = 0;\n         ArrayList<String> dupesIgnored = new ArrayList<>();\n         mDst.getDb().getDatabase().beginTransaction();\n-        try (Cursor cur = mSrc.getDb().getDatabase().query(\"select * from notes\", null)) {\n+        try (Cursor cur = mSrc.getDb().getDatabase().query(\"select n.id, n.guid, n.mid, n.mod, n.tags, n.flds, n.sfld, n.csum, n.flags, n.data  from notes n\", null)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDM3OQ=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTM5NjYxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyMzozMFrOHrxDSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDozOTo0N1rOHrzkJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDQ3NQ==", "bodyText": "is private static final int GUID = 1; still used?", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515654475", "createdAt": "2020-11-01T18:23:30Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -71,7 +73,17 @@\n     private final boolean mAllowUpdate;\n     private boolean mDupeOnSchemaChange;\n \n-    private Map<String, Object[]> mNotes;\n+    private static class NoteTriple {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTY1NQ==", "bodyText": "Not", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695655", "createdAt": "2020-11-02T00:39:47Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -71,7 +73,17 @@\n     private final boolean mAllowUpdate;\n     private boolean mDupeOnSchemaChange;\n \n-    private Map<String, Object[]> mNotes;\n+    private static class NoteTriple {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDQ3NQ=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwMDQ4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyNzoxOVrOHrxFFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDozOTo1NVrOHrzkPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDkzMg==", "bodyText": "Use a char here - should be much faster (needs testing)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                                    flds.replace(\"\\u001f\", \",\")));\n          \n          \n            \n                                                    flds.replace('\\u001f', ',')));", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515654932", "createdAt": "2020-11-01T18:27:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -226,48 +238,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long id = cur.getLong(0);\n+                String guid = cur.getString(1);\n+                long mid = cur.getLong(2);\n+                long mod = cur.getLong(3);\n+                String tags = cur.getString(4);\n+                String flds = cur.getString(5);\n+                String sfld = cur.getString(6);\n+                long csum = cur.getLong(7);\n+                int flag = cur.getInt(8);\n+                String data = cur.getString(9);\n+\n+                Pair<Boolean, Long> shouldAddAndNewMid = _uniquifyNote(guid, mid);\n+                boolean shouldAdd = shouldAddAndNewMid.first;\n+                mid = shouldAddAndNewMid.second;\n                 if (shouldAdd) {\n                     // ensure id is unique\n-                    while (existing.contains(note[0])) {\n-                        note[0] = ((Long) note[0]) + 999;\n+                    while (existing.contains(id)) {\n+                        id += 999;\n                     }\n-                    existing.add((Long) note[0]);\n+                    existing.add(id);\n                     // bump usn\n-                    note[4] = usn;\n                     // update media references in case of dupes\n-                    note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                    add.add(note);\n-                    dirty.add((Long) note[0]);\n+                    flds = _mungeMedia(mid, flds);\n+                    add.add(new Object[]{id, guid, mid, mod, usn, tags, flds, sfld, csum, flag, data});\n+                    dirty.add(id);\n                     // note we have the added guid\n-                    mNotes.put((String) note[GUID], new Object[]{note[0], note[3], note[MID]});\n+                    mNotes.put(guid, new NoteTriple(id, mod, mid));\n                 } else {\n                     // a duplicate or changed schema - safe to update?\n                     dupes += 1;\n                     if (mAllowUpdate) {\n-                        Object[] n = mNotes.get(note[GUID]);\n-                        //todo: oldNid could be Long instead of long.\n-                        long oldNid = (Long) n[0];\n-                        long oldMod = (Long) n[1];\n-                        @NonNull Long oldMid = (Long) n[2];\n+                        NoteTriple n = mNotes.get(guid);\n+                        long oldNid = n.mNid;\n+                        long oldMod = n.mMod;\n+                        long oldMid = n.mMid;\n                         // will update if incoming note more recent\n-                        if (oldMod < (Long) note[MOD]) {\n+                        if (oldMod < mod) {\n                             // safe if note types identical\n-                            if (Utils.equals(oldMid, note[MID])) {\n+                            if (Utils.equals(oldMid, mid)) {\n                                 // incoming note should use existing id\n-                                note[0] = oldNid;\n-                                note[4] = usn;\n-                                note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                                update.add(note);\n-                                dirty.add((Long) note[0]);\n+                                id = oldNid;\n+                                flds = _mungeMedia(mid, flds);\n+                                update.add(new Object[]{id, guid, mid, mod, usn, tags, flds, sfld, csum, flag, data});\n+                                dirty.add(id);\n                             } else {\n                                 dupesIgnored.add(String.format(\"%s: %s\",\n                                         mCol.getModels().get(oldMid).getString(\"name\"),\n-                                        ((String) note[6]).replace(\"\\u001f\", \",\")));\n-                                mIgnoredGuids.put((String) note[GUID], true);\n+                                        flds.replace(\"\\u001f\", \",\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTY3OA==", "bodyText": "#7598", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695678", "createdAt": "2020-11-02T00:39:55Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -226,48 +238,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long id = cur.getLong(0);\n+                String guid = cur.getString(1);\n+                long mid = cur.getLong(2);\n+                long mod = cur.getLong(3);\n+                String tags = cur.getString(4);\n+                String flds = cur.getString(5);\n+                String sfld = cur.getString(6);\n+                long csum = cur.getLong(7);\n+                int flag = cur.getInt(8);\n+                String data = cur.getString(9);\n+\n+                Pair<Boolean, Long> shouldAddAndNewMid = _uniquifyNote(guid, mid);\n+                boolean shouldAdd = shouldAddAndNewMid.first;\n+                mid = shouldAddAndNewMid.second;\n                 if (shouldAdd) {\n                     // ensure id is unique\n-                    while (existing.contains(note[0])) {\n-                        note[0] = ((Long) note[0]) + 999;\n+                    while (existing.contains(id)) {\n+                        id += 999;\n                     }\n-                    existing.add((Long) note[0]);\n+                    existing.add(id);\n                     // bump usn\n-                    note[4] = usn;\n                     // update media references in case of dupes\n-                    note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                    add.add(note);\n-                    dirty.add((Long) note[0]);\n+                    flds = _mungeMedia(mid, flds);\n+                    add.add(new Object[]{id, guid, mid, mod, usn, tags, flds, sfld, csum, flag, data});\n+                    dirty.add(id);\n                     // note we have the added guid\n-                    mNotes.put((String) note[GUID], new Object[]{note[0], note[3], note[MID]});\n+                    mNotes.put(guid, new NoteTriple(id, mod, mid));\n                 } else {\n                     // a duplicate or changed schema - safe to update?\n                     dupes += 1;\n                     if (mAllowUpdate) {\n-                        Object[] n = mNotes.get(note[GUID]);\n-                        //todo: oldNid could be Long instead of long.\n-                        long oldNid = (Long) n[0];\n-                        long oldMod = (Long) n[1];\n-                        @NonNull Long oldMid = (Long) n[2];\n+                        NoteTriple n = mNotes.get(guid);\n+                        long oldNid = n.mNid;\n+                        long oldMod = n.mMod;\n+                        long oldMid = n.mMid;\n                         // will update if incoming note more recent\n-                        if (oldMod < (Long) note[MOD]) {\n+                        if (oldMod < mod) {\n                             // safe if note types identical\n-                            if (Utils.equals(oldMid, note[MID])) {\n+                            if (Utils.equals(oldMid, mid)) {\n                                 // incoming note should use existing id\n-                                note[0] = oldNid;\n-                                note[4] = usn;\n-                                note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                                update.add(note);\n-                                dirty.add((Long) note[0]);\n+                                id = oldNid;\n+                                flds = _mungeMedia(mid, flds);\n+                                update.add(new Object[]{id, guid, mid, mod, usn, tags, flds, sfld, csum, flag, data});\n+                                dirty.add(id);\n                             } else {\n                                 dupesIgnored.add(String.format(\"%s: %s\",\n                                         mCol.getModels().get(oldMid).getString(\"name\"),\n-                                        ((String) note[6]).replace(\"\\u001f\", \",\")));\n-                                mIgnoredGuids.put((String) note[GUID], true);\n+                                        flds.replace(\"\\u001f\", \",\")));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDkzMg=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwMDg3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyNzo0OVrOHrxFRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDo0MDowNVrOHrzkTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDk4Mw==", "bodyText": "I'd prefer nid here, but implementer's choice", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515654983", "createdAt": "2020-11-01T18:27:49Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -226,48 +238,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long id = cur.getLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NDU0NA==", "bodyText": "I prefered to use the database column\u2019s name out of consistency", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515674544", "createdAt": "2020-11-01T21:31:52Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -226,48 +238,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long id = cur.getLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDk4Mw=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTY5NQ==", "bodyText": "changed to nid actually.", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695695", "createdAt": "2020-11-02T00:40:05Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -226,48 +238,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long id = cur.getLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NDk4Mw=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwMjI1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyOTozMVrOHrxF9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODoyOTozMVrOHrxF9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTE1Ng==", "bodyText": "Reviewer note: note[4] = usn; is missing, but this is OK as we use the correct value", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655156", "createdAt": "2020-11-01T18:29:31Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -226,48 +238,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long id = cur.getLong(0);\n+                String guid = cur.getString(1);\n+                long mid = cur.getLong(2);\n+                long mod = cur.getLong(3);\n+                String tags = cur.getString(4);\n+                String flds = cur.getString(5);\n+                String sfld = cur.getString(6);\n+                long csum = cur.getLong(7);\n+                int flag = cur.getInt(8);\n+                String data = cur.getString(9);\n+\n+                Pair<Boolean, Long> shouldAddAndNewMid = _uniquifyNote(guid, mid);\n+                boolean shouldAdd = shouldAddAndNewMid.first;\n+                mid = shouldAddAndNewMid.second;\n                 if (shouldAdd) {\n                     // ensure id is unique\n-                    while (existing.contains(note[0])) {\n-                        note[0] = ((Long) note[0]) + 999;\n+                    while (existing.contains(id)) {\n+                        id += 999;\n                     }\n-                    existing.add((Long) note[0]);\n+                    existing.add(id);\n                     // bump usn\n-                    note[4] = usn;\n                     // update media references in case of dupes\n-                    note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                    add.add(note);\n-                    dirty.add((Long) note[0]);\n+                    flds = _mungeMedia(mid, flds);\n+                    add.add(new Object[]{id, guid, mid, mod, usn, tags, flds, sfld, csum, flag, data});\n+                    dirty.add(id);\n                     // note we have the added guid\n-                    mNotes.put((String) note[GUID], new Object[]{note[0], note[3], note[MID]});\n+                    mNotes.put(guid, new NoteTriple(id, mod, mid));\n                 } else {\n                     // a duplicate or changed schema - safe to update?\n                     dupes += 1;\n                     if (mAllowUpdate) {\n-                        Object[] n = mNotes.get(note[GUID]);\n-                        //todo: oldNid could be Long instead of long.\n-                        long oldNid = (Long) n[0];\n-                        long oldMod = (Long) n[1];\n-                        @NonNull Long oldMid = (Long) n[2];\n+                        NoteTriple n = mNotes.get(guid);\n+                        long oldNid = n.mNid;\n+                        long oldMod = n.mMod;\n+                        long oldMid = n.mMid;\n                         // will update if incoming note more recent\n-                        if (oldMod < (Long) note[MOD]) {\n+                        if (oldMod < mod) {\n                             // safe if note types identical\n-                            if (Utils.equals(oldMid, note[MID])) {\n+                            if (Utils.equals(oldMid, mid)) {\n                                 // incoming note should use existing id\n-                                note[0] = oldNid;\n-                                note[4] = usn;\n-                                note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                                update.add(note);\n-                                dirty.add((Long) note[0]);\n+                                id = oldNid;\n+                                flds = _mungeMedia(mid, flds);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwNDk1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMjowMVrOHrxHLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDo0MDoyNVrOHrzkig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTQ3MQ==", "bodyText": "much nicer!", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655471", "createdAt": "2020-11-01T18:32:01Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -532,7 +548,7 @@ private void _importCards() {\n         try {\n             mDst.getDb().getDatabase().beginTransaction();\n             cur = mSrc.getDb().getDatabase().query(\n-                    \"select f.guid, f.mid, c.* from cards c, notes f \" +\n+                    \"select f.guid, c.id, c.did, c.ord, c.type, c.queue, c.due, c.ivl, c.factor, c.reps, c.lapses, c.left, c.odue, c.odid, c.flags, c.data from cards c, notes f \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 169}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTc1NA==", "bodyText": "I do agree", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695754", "createdAt": "2020-11-02T00:40:25Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -532,7 +548,7 @@ private void _importCards() {\n         try {\n             mDst.getDb().getDatabase().beginTransaction();\n             cur = mSrc.getDb().getDatabase().query(\n-                    \"select f.guid, f.mid, c.* from cards c, notes f \" +\n+                    \"select f.guid, c.id, c.did, c.ord, c.type, c.queue, c.due, c.ivl, c.factor, c.reps, c.lapses, c.left, c.odue, c.odid, c.flags, c.data from cards c, notes f \" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTQ3MQ=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 169}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwNTM3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMjoyNFrOHrxHYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTozOToyMlrOHsA7FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTUyMA==", "bodyText": "What's a scid?", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655520", "createdAt": "2020-11-01T18:32:24Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NzU0Ng==", "bodyText": "The variable was named scid before and upstream, so I kept this name even if I don't understand it. I can change it", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515677546", "createdAt": "2020-11-01T21:59:27Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTUyMA=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTgwMg==", "bodyText": "My bad. scid was Source Card id, and as the name state, it should not have changed. So I separate it in scid and cid", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695802", "createdAt": "2020-11-02T00:40:52Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTUyMA=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNDUxNg==", "bodyText": "a comment might be useful", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515914516", "createdAt": "2020-11-02T11:39:22Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTUyMA=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwNTcxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMjo1NlrOHrxHiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQyMTo0Mzo1M1rOHryWPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTU2MQ==", "bodyText": "Use the constants", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655561", "createdAt": "2020-11-01T18:32:56Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NDY0Mg==", "bodyText": "Done in another PR that can be merged first", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515674642", "createdAt": "2020-11-01T21:33:04Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTU2MQ=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 239}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NTcwOA==", "bodyText": "#7590", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515675708", "createdAt": "2020-11-01T21:43:53Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTU2MQ=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 239}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwNTgwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMzowOVrOHrxHlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMzowOVrOHrxHlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTU3Mw==", "bodyText": "ditto", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655573", "createdAt": "2020-11-01T18:33:09Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {\n+                    due -= aheadBy;\n                 }\n                 // odue needs updating too\n-                if ((Long) card[14] != 0) {\n-                    card[14] = (Long) card[14] - aheadBy;\n+                if (odue != 0) {\n+                    odue -= aheadBy;\n                 }\n                 // if odid true, convert card from filtered to normal\n-                if ((Long) card[15] != 0) {\n+                if (odid != 0) {\n                     // odid\n-                    card[15] = 0;\n+                    odid = 0;\n                     // odue\n-                    card[8] = card[14];\n-                    card[14] = 0;\n+                    due = odue;\n+                    odue = 0;\n                     // queue\n-                    if ((Integer) card[6] == 1) { // type\n-                        card[7] = 0;\n+                    if (type == 1) { // type", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 262}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwNTg2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMzoxNVrOHrxHoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozMzoxNVrOHrxHoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTU4NA==", "bodyText": "ditto", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655584", "createdAt": "2020-11-01T18:33:15Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {\n+                    due -= aheadBy;\n                 }\n                 // odue needs updating too\n-                if ((Long) card[14] != 0) {\n-                    card[14] = (Long) card[14] - aheadBy;\n+                if (odue != 0) {\n+                    odue -= aheadBy;\n                 }\n                 // if odid true, convert card from filtered to normal\n-                if ((Long) card[15] != 0) {\n+                if (odid != 0) {\n                     // odid\n-                    card[15] = 0;\n+                    odid = 0;\n                     // odue\n-                    card[8] = card[14];\n-                    card[14] = 0;\n+                    due = odue;\n+                    odue = 0;\n                     // queue\n-                    if ((Integer) card[6] == 1) { // type\n-                        card[7] = 0;\n+                    if (type == 1) { // type\n+                        queue = 0;\n                     } else {\n-                        card[7] = card[6];\n+                        queue = type;\n                     }\n                     // type\n-                    if ((Integer) card[6] == 1) {\n-                        card[6] = 0;\n+                    if (type == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 271}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTQwNzI2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMVQxODozNDozNVrOHrxIQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMDo0MTo0OFrOHrzlIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTc0Nw==", "bodyText": "Needs second review - looks correct, but there's a lot going on here.", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515655747", "createdAt": "2020-11-01T18:34:35Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {\n+                    due -= aheadBy;\n                 }\n                 // odue needs updating too\n-                if ((Long) card[14] != 0) {\n-                    card[14] = (Long) card[14] - aheadBy;\n+                if (odue != 0) {\n+                    odue -= aheadBy;\n                 }\n                 // if odid true, convert card from filtered to normal\n-                if ((Long) card[15] != 0) {\n+                if (odid != 0) {\n                     // odid\n-                    card[15] = 0;\n+                    odid = 0;\n                     // odue\n-                    card[8] = card[14];\n-                    card[14] = 0;\n+                    due = odue;\n+                    odue = 0;\n                     // queue\n-                    if ((Integer) card[6] == 1) { // type\n-                        card[7] = 0;\n+                    if (type == 1) { // type\n+                        queue = 0;\n                     } else {\n-                        card[7] = card[6];\n+                        queue = type;\n                     }\n                     // type\n-                    if ((Integer) card[6] == 1) {\n-                        card[6] = 0;\n+                    if (type == 1) {\n+                        type = 0;\n                     }\n                 }\n-                cards.add(card);\n+                cards.add(new Object[]{scid, nid, did, ord, mod, usn, type, queue, due, ivl, factor, reps, lapses, left, odue, odid, flags, data});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY3NDc5OQ==", "bodyText": "You may prefer to look commit by commit, where it should be easier to see why it\u2019s correct", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515674799", "createdAt": "2020-11-01T21:34:30Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {\n+                    due -= aheadBy;\n                 }\n                 // odue needs updating too\n-                if ((Long) card[14] != 0) {\n-                    card[14] = (Long) card[14] - aheadBy;\n+                if (odue != 0) {\n+                    odue -= aheadBy;\n                 }\n                 // if odid true, convert card from filtered to normal\n-                if ((Long) card[15] != 0) {\n+                if (odid != 0) {\n                     // odid\n-                    card[15] = 0;\n+                    odid = 0;\n                     // odue\n-                    card[8] = card[14];\n-                    card[14] = 0;\n+                    due = odue;\n+                    odue = 0;\n                     // queue\n-                    if ((Integer) card[6] == 1) { // type\n-                        card[7] = 0;\n+                    if (type == 1) { // type\n+                        queue = 0;\n                     } else {\n-                        card[7] = card[6];\n+                        queue = type;\n                     }\n                     // type\n-                    if ((Integer) card[6] == 1) {\n-                        card[6] = 0;\n+                    if (type == 1) {\n+                        type = 0;\n                     }\n                 }\n-                cards.add(card);\n+                cards.add(new Object[]{scid, nid, did, ord, mod, usn, type, queue, due, ivl, factor, reps, lapses, left, odue, odid, flags, data});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTc0Nw=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 276}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY5NTkwNw==", "bodyText": "@mikehardy , I guess it'll be for you.\nYou may be happy, I provided stats to explain time gain here", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515695907", "createdAt": "2020-11-02T00:41:48Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -542,74 +558,78 @@ private void _importCards() {\n             int i = 0;\n \n             while (cur.moveToNext()) {\n-                Object[] card = new Object[] { cur.getString(0), cur.getLong(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getLong(4), cur.getInt(5), cur.getLong(6), cur.getInt(7),\n-                        cur.getInt(8), cur.getInt(9), cur.getLong(10), cur.getLong(11), cur.getLong(12),\n-                        cur.getInt(13), cur.getInt(14), cur.getInt(15), cur.getLong(16),\n-                        cur.getLong(17), cur.getInt(18), cur.getString(19) };\n-                String guid = (String) card[0];\n+                String guid = cur.getString(0);\n+                long scid = cur.getLong(1);\n+                long did = cur.getLong(2);\n+                int ord = cur.getInt(3);\n+                @Consts.CARD_TYPE int type = cur.getInt(4);\n+                @Consts.CARD_QUEUE int queue = cur.getInt(5);\n+                long due = cur.getLong(6);\n+                long ivl = cur.getLong(7);\n+                long factor = cur.getLong(8);\n+                int reps = cur.getInt(9);\n+                int lapses = cur.getInt(10);\n+                int left = cur.getInt(11);\n+                long odue = cur.getLong(12);\n+                long odid = cur.getLong(13);\n+                int flags = cur.getInt(14);\n+                String data = cur.getString(15);\n+\n                 if (mIgnoredGuids.containsKey(guid)) {\n                     continue;\n                 }\n                 // does the card's note exist in dst col?\n                 if (!mNotes.containsKey(guid)) {\n                     continue;\n                 }\n-                Object[] dnid = mNotes.get(guid);\n+                NoteTriple dnid = mNotes.get(guid);\n                 // does the card already exist in the dst col?\n-                int ord = (Integer) card[5];\n                 if (mCards.containsKey(guid) && mCards.get(guid).containsKey(ord)) {\n                     // fixme: in future, could update if newer mod time\n                     continue;\n                 }\n-                // doesn't exist. strip off note info, and save src id for later\n-                Object[] oc = card;\n-                card = new Object[oc.length - 2];\n-                System.arraycopy(oc, 2, card, 0, card.length);\n-                long scid = (Long) card[0];\n                 // ensure the card id is unique\n-                while (existing.containsKey(card[0])) {\n-                    card[0] = (Long) card[0] + 999;\n+                while (existing.containsKey(scid)) {\n+                    scid += 999;\n                 }\n-                existing.put((Long) card[0], true);\n+                existing.put(scid, true);\n                 // update cid, nid, etc\n-                card[1] = mNotes.get(guid)[0];\n-                card[2] = _did((Long) card[2]);\n-                card[4] = mCol.getTime().intTime();\n-                card[5] = usn;\n+                long nid = mNotes.get(guid).mNid;\n+                did = _did(did);\n+                long mod = mCol.getTime().intTime();\n                 // review cards have a due date relative to collection\n-                if ((Integer) card[7] == 2 || (Integer) card[7] == 3 || (Integer) card[6] == 2) {\n-                    card[8] = (Long) card[8] - aheadBy;\n+                if (queue == 2 || queue == 3 || type == 2) {\n+                    due -= aheadBy;\n                 }\n                 // odue needs updating too\n-                if ((Long) card[14] != 0) {\n-                    card[14] = (Long) card[14] - aheadBy;\n+                if (odue != 0) {\n+                    odue -= aheadBy;\n                 }\n                 // if odid true, convert card from filtered to normal\n-                if ((Long) card[15] != 0) {\n+                if (odid != 0) {\n                     // odid\n-                    card[15] = 0;\n+                    odid = 0;\n                     // odue\n-                    card[8] = card[14];\n-                    card[14] = 0;\n+                    due = odue;\n+                    odue = 0;\n                     // queue\n-                    if ((Integer) card[6] == 1) { // type\n-                        card[7] = 0;\n+                    if (type == 1) { // type\n+                        queue = 0;\n                     } else {\n-                        card[7] = card[6];\n+                        queue = type;\n                     }\n                     // type\n-                    if ((Integer) card[6] == 1) {\n-                        card[6] = 0;\n+                    if (type == 1) {\n+                        type = 0;\n                     }\n                 }\n-                cards.add(card);\n+                cards.add(new Object[]{scid, nid, did, ord, mod, usn, type, queue, due, ivl, factor, reps, lapses, left, odue, odid, flags, data});", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTY1NTc0Nw=="}, "originalCommit": {"oid": "ef146fae50fca42eed94ce8dd0187d954c770dcc"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMTgzNTM0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjoxNzoxMFrOHr0dpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwMjoxNzoxMFrOHr0dpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTcxMDM3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            g                    mNotes.put(guid, new NoteTriple(nid, mod, mid));\n          \n          \n            \n                                 mNotes.put(guid, new NoteTriple(nid, mod, mid));", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515710373", "createdAt": "2020-11-02T02:17:10Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -233,48 +244,55 @@ private void _importNotes() {\n \n             while (cur.moveToNext()) {\n                 // turn the db result into a mutable list\n-                Object[] note = new Object[]{cur.getLong(0), cur.getString(1), cur.getLong(2),\n-                        cur.getLong(3), cur.getInt(4), cur.getString(5), cur.getString(6),\n-                        cur.getString(7), cur.getLong(8), cur.getInt(9), cur.getString(10)};\n-                boolean shouldAdd = _uniquifyNote(note);\n+                long nid = cur.getLong(0);\n+                String guid = cur.getString(1);\n+                long mid = cur.getLong(2);\n+                long mod = cur.getLong(3);\n+                String tags = cur.getString(4);\n+                String flds = cur.getString(5);\n+                String sfld = cur.getString(6);\n+                long csum = cur.getLong(7);\n+                int flag = cur.getInt(8);\n+                String data = cur.getString(9);\n+\n+                Pair<Boolean, Long> shouldAddAndNewMid = _uniquifyNote(guid, mid);\n+                boolean shouldAdd = shouldAddAndNewMid.first;\n+                mid = shouldAddAndNewMid.second;\n                 if (shouldAdd) {\n-                    // ensure id is unique\n-                    while (existing.contains(note[0])) {\n-                        note[0] = ((Long) note[0]) + 999;\n+                    // ensure nid is unique\n+                    while (existing.contains(nid)) {\n+                        nid += 999;\n                     }\n-                    existing.add((Long) note[0]);\n+                    existing.add(nid);\n                     // bump usn\n-                    note[4] = usn;\n                     // update media references in case of dupes\n-                    note[6] = _mungeMedia((Long) note[MID], (String) note[6]);\n-                    add.add(note);\n-                    dirty.add((Long) note[0]);\n+                    flds = _mungeMedia(mid, flds);\n+                    add.add(new Object[]{nid, guid, mid, mod, usn, tags, flds, sfld, csum, flag, data});\n+                    dirty.add(nid);\n                     // note we have the added guid\n-                    mNotes.put((String) note[GUID], new Object[]{note[0], note[3], note[MID]});\n+g                    mNotes.put(guid, new NoteTriple(nid, mod, mid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3374077c1da1e06edd372cb1c8ccc0f2df96fa1e"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc2OTc2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0MjoyMlrOHr83JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMToxNjoyOFrOHsAOPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0Nzk3Mw==", "bodyText": "Are these two used?", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515847973", "createdAt": "2020-11-02T09:42:22Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -68,7 +70,6 @@\n         \"PMD.SwitchStmtsShouldHaveDefault\",\"PMD.CollapsibleIfStatements\",\"PMD.EmptyIfStmt\"})\n public class Anki2Importer extends Importer {\n \n-    private static final int GUID = 1;\n     private static final int MID = 2;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "47624e718804198f11318052b2e24bacfdb027be"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkwMzAzNw==", "bodyText": "Removed", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515903037", "createdAt": "2020-11-02T11:16:28Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/importer/Anki2Importer.java", "diffHunk": "@@ -68,7 +70,6 @@\n         \"PMD.SwitchStmtsShouldHaveDefault\",\"PMD.CollapsibleIfStatements\",\"PMD.EmptyIfStmt\"})\n public class Anki2Importer extends Importer {\n \n-    private static final int GUID = 1;\n     private static final int MID = 2;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0Nzk3Mw=="}, "originalCommit": {"oid": "47624e718804198f11318052b2e24bacfdb027be"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMzIwNDU1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTozODo1NFrOHsA6Jg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxMTo1MjoyN1rOHsBVEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNDI3OA==", "bodyText": "?", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515914278", "createdAt": "2020-11-02T11:38:54Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java", "diffHunk": "@@ -435,7 +435,7 @@ public static String ids2str(JSONArray ids) {\n                         str.append(ids.getLong(i)).append(\",\");\n                     }\n                 } catch (JSONException e) {\n-                    Timber.e(e, \"ids2str :: JSONException\");\n+                    Timber.e(e, \"MIids2str :: JSONException\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a414ae9914b734a8c03216b67a401f93388c57da"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkyMTE2OQ==", "bodyText": "No idea how I added those lines", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r515921169", "createdAt": "2020-11-02T11:52:27Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java", "diffHunk": "@@ -435,7 +435,7 @@ public static String ids2str(JSONArray ids) {\n                         str.append(ids.getLong(i)).append(\",\");\n                     }\n                 } catch (JSONException e) {\n-                    Timber.e(e, \"ids2str :: JSONException\");\n+                    Timber.e(e, \"MIids2str :: JSONException\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTkxNDI3OA=="}, "originalCommit": {"oid": "a414ae9914b734a8c03216b67a401f93388c57da"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1Mzc2Mzk4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNTowMjozMFrOHvDYfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wN1QwNToxMjoxMlrOHvDgPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEwMDU0MQ==", "bodyText": "This is limited to API 24", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r519100541", "createdAt": "2020-11-07T05:02:30Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java", "diffHunk": "@@ -706,21 +706,26 @@ public static void unzipAllFiles(ZipFile zipFile, String targetDirectory) throws\n \n     }\n \n+\n+    /**\n+     * @param zipFile A zip file\n+     * @param targetDirectory Directory in which to unzip some of the zipped field\n+     * @param zipEntries files of the zip folder to unzip\n+     * @param zipEntryToFilenameMap Renaming rules from name in zip file to name in the device\n+     * @throws IOException if the directory can't be created\n+     */\n     public static void unzipFiles(ZipFile zipFile, String targetDirectory, @NonNull String[] zipEntries,\n                                   @Nullable Map<String, String> zipEntryToFilenameMap) throws IOException {\n         File dir = new File(targetDirectory);\n         if (!dir.exists() && !dir.mkdirs()) {\n             throw new IOException(\"Failed to create target directory: \" + targetDirectory);\n         }\n-        if (zipEntryToFilenameMap == null) {\n-            zipEntryToFilenameMap = new HashMap<>();\n-        }\n         for (String requestedEntry : zipEntries) {\n             ZipArchiveEntry ze = zipFile.getEntry(requestedEntry);\n             if (ze != null) {\n                 String name = ze.getName();\n-                if (zipEntryToFilenameMap.containsKey(name)) {\n-                    name = zipEntryToFilenameMap.get(name);\n+                if (zipEntryToFilenameMap != null) {\n+                    name = zipEntryToFilenameMap.getOrDefault(name, name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "250693315826fd22f4326a8afe97e675d4d91390"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEwMjUyNg==", "bodyText": "Removed", "url": "https://github.com/ankidroid/Anki-Android/pull/7592#discussion_r519102526", "createdAt": "2020-11-07T05:12:12Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Utils.java", "diffHunk": "@@ -706,21 +706,26 @@ public static void unzipAllFiles(ZipFile zipFile, String targetDirectory) throws\n \n     }\n \n+\n+    /**\n+     * @param zipFile A zip file\n+     * @param targetDirectory Directory in which to unzip some of the zipped field\n+     * @param zipEntries files of the zip folder to unzip\n+     * @param zipEntryToFilenameMap Renaming rules from name in zip file to name in the device\n+     * @throws IOException if the directory can't be created\n+     */\n     public static void unzipFiles(ZipFile zipFile, String targetDirectory, @NonNull String[] zipEntries,\n                                   @Nullable Map<String, String> zipEntryToFilenameMap) throws IOException {\n         File dir = new File(targetDirectory);\n         if (!dir.exists() && !dir.mkdirs()) {\n             throw new IOException(\"Failed to create target directory: \" + targetDirectory);\n         }\n-        if (zipEntryToFilenameMap == null) {\n-            zipEntryToFilenameMap = new HashMap<>();\n-        }\n         for (String requestedEntry : zipEntries) {\n             ZipArchiveEntry ze = zipFile.getEntry(requestedEntry);\n             if (ze != null) {\n                 String name = ze.getName();\n-                if (zipEntryToFilenameMap.containsKey(name)) {\n-                    name = zipEntryToFilenameMap.get(name);\n+                if (zipEntryToFilenameMap != null) {\n+                    name = zipEntryToFilenameMap.getOrDefault(name, name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTEwMDU0MQ=="}, "originalCommit": {"oid": "250693315826fd22f4326a8afe97e675d4d91390"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 701, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}