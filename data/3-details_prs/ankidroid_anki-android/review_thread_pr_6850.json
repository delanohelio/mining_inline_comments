{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0OTI4NjE5", "number": 6850, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTo1OToyN1rOEX-9Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1MToxNVrOEYO04g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNTg0MjEwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QwOTo1OToyN1rOHAEr1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxMzo0N1rOHAZ-Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgzODgwNA==", "bodyText": "On failure, what do we want to do here?", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r469838804", "createdAt": "2020-08-13T09:59:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -1875,6 +1880,10 @@ public TaskData doInBackgroundCheckCardSelection(TaskData param) {\n         return new TaskData(new Object[] { hasUnsuspended, hasUnmarked});\n     }\n \n+    public void doInBackgroundPreloadNextCard() {\n+        getCol().getSched().preloadNextCard();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0136f169f66c2795b68b93eb2007abc9b09811c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2MDg1NQ==", "bodyText": "Is there any reason to expect a failure here specifically ?\nIf there is no col or no sched there is no reason to do anything specifically that is not done everywhere else.\nI can't imagine any reason to fear that preloadNextCard would fail more than getCard, and we are not specifically looking for errors elsewhere. We try to precompute the next card by potentially pre-filling the queues and fetching the first card's question. If we can't find any non-empty queue, then we won't do anything. If there was actually a new card to consider and we didn't see it because of counts or something similar, then loading the next card will be potentially slow, but there is nothing I can do to prevent it", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470160855", "createdAt": "2020-08-13T18:29:02Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -1875,6 +1880,10 @@ public TaskData doInBackgroundCheckCardSelection(TaskData param) {\n         return new TaskData(new Object[] { hasUnsuspended, hasUnmarked});\n     }\n \n+    public void doInBackgroundPreloadNextCard() {\n+        getCol().getSched().preloadNextCard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgzODgwNA=="}, "originalCommit": {"oid": "a0136f169f66c2795b68b93eb2007abc9b09811c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE2NjI1Mg==", "bodyText": "I think this is an operation where if getCol.getSched() fails for example, then we're fine to log & ignore it, as answerCard will return the same card, just without caching.\nI'm not sure about the actual operation itself and how it handles exceptions.", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470166252", "createdAt": "2020-08-13T18:37:59Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -1875,6 +1880,10 @@ public TaskData doInBackgroundCheckCardSelection(TaskData param) {\n         return new TaskData(new Object[] { hasUnsuspended, hasUnmarked});\n     }\n \n+    public void doInBackgroundPreloadNextCard() {\n+        getCol().getSched().preloadNextCard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgzODgwNA=="}, "originalCommit": {"oid": "a0136f169f66c2795b68b93eb2007abc9b09811c"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE4NzYxNA==", "bodyText": "I added the same protection than the one on answer_card", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470187614", "createdAt": "2020-08-13T19:13:47Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/async/CollectionTask.java", "diffHunk": "@@ -1875,6 +1880,10 @@ public TaskData doInBackgroundCheckCardSelection(TaskData param) {\n         return new TaskData(new Object[] { hasUnsuspended, hasUnmarked});\n     }\n \n+    public void doInBackgroundPreloadNextCard() {\n+        getCol().getSched().preloadNextCard();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTgzODgwNA=="}, "originalCommit": {"oid": "a0136f169f66c2795b68b93eb2007abc9b09811c"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzk4NTEwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo0NzozNlrOHAZAjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDozMDozOFrOHAcjNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MTc4OQ==", "bodyText": "Why has this been added? What has been added that needs to be protected against?", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470171789", "createdAt": "2020-08-13T18:47:36Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -719,7 +746,7 @@ protected void _resetRevQueue() {\n \n \n     @Override\n-    protected boolean _fillRev(boolean allowSibling) {\n+    protected synchronized boolean _fillRev(boolean allowSibling) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MDU2MQ==", "bodyText": "In practice, this \"synchronized\" is as useles as almost all other \"synchronized\" because we can never have multiple tasks in background simultaneously. And I believe the scheduler is only called in background.\nIn theory, _fillRev check if the rev queue is empty or not, if it is empty, it fills it, otherwise it states \"It's not empty, there is nothing to do here\". So you do not want two instances of _fillRev to be called simultaneously, because it would mean we are potentially filling it twice. Since they are really filling the same object, cards would be duplicate in the queue. That would not be a real trouble because they would be discarded due to self-day -spacing, but still, that's better avoided.\nI would agree that synchronizing on the queue would be better. That's actually feasible here, because the queue object never change. Do you want me to do it ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470190561", "createdAt": "2020-08-13T19:18:34Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -719,7 +746,7 @@ protected void _resetRevQueue() {\n \n \n     @Override\n-    protected boolean _fillRev(boolean allowSibling) {\n+    protected synchronized boolean _fillRev(boolean allowSibling) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MTc4OQ=="}, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIwNzI0OA==", "bodyText": "I think we should remove it, until we hit the point that we need to think about multithreading. I think we're taking on a performance loss and complexity gain for no material gain, and that's the opposite of what this PR should accomplish.", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470207248", "createdAt": "2020-08-13T19:49:05Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -719,7 +746,7 @@ protected void _resetRevQueue() {\n \n \n     @Override\n-    protected boolean _fillRev(boolean allowSibling) {\n+    protected synchronized boolean _fillRev(boolean allowSibling) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MTc4OQ=="}, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIyOTgxNQ==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470229815", "createdAt": "2020-08-13T20:30:38Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -719,7 +746,7 @@ protected void _resetRevQueue() {\n \n \n     @Override\n-    protected boolean _fillRev(boolean allowSibling) {\n+    protected synchronized boolean _fillRev(boolean allowSibling) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MTc4OQ=="}, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzk5ODIwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo1MToxN1rOHAZIeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToxOTo0OVrOHAaMjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MzgxOA==", "bodyText": "I don't get this logic? If cache 1 is empty, why would you not want to reload cache 2?", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470173818", "createdAt": "2020-08-13T18:51:17Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -674,6 +671,60 @@ protected Card _getCard() {\n         return _getLrnCard(true);\n     }\n \n+    /** similar to _getCard but only fill the queues without taking the card.\n+     * Returns lists that may contain the next cards.\n+     */\n+    protected List<? extends Card.Cache>[] _fillNextCard() {\n+        // learning card due?\n+        if (_preloadLrnCard(false)) {\n+            return new List[]{mLrnQueue};\n+        }\n+        // new first, or time for one?\n+        if (_timeForNewCard()) {\n+            if (_fillNew()) {\n+                return new List[]{mLrnQueue, mNewQueue};\n+            }\n+        }\n+        // Day learning first and card due?\n+        boolean dayLearnFirst = mCol.getConf().optBoolean(\"dayLearnFirst\", false);\n+        if (dayLearnFirst) {\n+            if (_fillLrnDay()) {\n+                return new List[]{mLrnQueue, mLrnDayQueue};\n+            }\n+        }\n+        // Card due for review?\n+        if (_fillRev()) {\n+            return new List[]{mLrnQueue, mRevQueue};\n+        }\n+        // day learning card due?\n+        if (!dayLearnFirst) {\n+            if (_fillLrnDay()) {\n+                return new List[]{mLrnQueue, mLrnDayQueue};\n+            }\n+        }\n+        // New cards left?\n+        if (_fillNew()) {\n+            return new List[]{mLrnQueue, mNewQueue};\n+        }\n+        // collapse or finish\n+        if (_preloadLrnCard(true)) {\n+            return new List[]{mLrnQueue};\n+        }\n+        return new List[]{};\n+    }\n+\n+    /** pre load the potential next card. It may loads many card because, depending on the time taken, the next card may\n+     * be a card in review or not. */\n+    public void preloadNextCard() {\n+        for (List<? extends Card.Cache> caches: _fillNextCard()) {\n+            if (caches.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MTI0Ng==", "bodyText": "Thanks. My bad. In this case, it should have been \"continue\". I wrote it when I expected to return a single queue.\nCorrected", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470191246", "createdAt": "2020-08-13T19:19:49Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -674,6 +671,60 @@ protected Card _getCard() {\n         return _getLrnCard(true);\n     }\n \n+    /** similar to _getCard but only fill the queues without taking the card.\n+     * Returns lists that may contain the next cards.\n+     */\n+    protected List<? extends Card.Cache>[] _fillNextCard() {\n+        // learning card due?\n+        if (_preloadLrnCard(false)) {\n+            return new List[]{mLrnQueue};\n+        }\n+        // new first, or time for one?\n+        if (_timeForNewCard()) {\n+            if (_fillNew()) {\n+                return new List[]{mLrnQueue, mNewQueue};\n+            }\n+        }\n+        // Day learning first and card due?\n+        boolean dayLearnFirst = mCol.getConf().optBoolean(\"dayLearnFirst\", false);\n+        if (dayLearnFirst) {\n+            if (_fillLrnDay()) {\n+                return new List[]{mLrnQueue, mLrnDayQueue};\n+            }\n+        }\n+        // Card due for review?\n+        if (_fillRev()) {\n+            return new List[]{mLrnQueue, mRevQueue};\n+        }\n+        // day learning card due?\n+        if (!dayLearnFirst) {\n+            if (_fillLrnDay()) {\n+                return new List[]{mLrnQueue, mLrnDayQueue};\n+            }\n+        }\n+        // New cards left?\n+        if (_fillNew()) {\n+            return new List[]{mLrnQueue, mNewQueue};\n+        }\n+        // collapse or finish\n+        if (_preloadLrnCard(true)) {\n+            return new List[]{mLrnQueue};\n+        }\n+        return new List[]{};\n+    }\n+\n+    /** pre load the potential next card. It may loads many card because, depending on the time taken, the next card may\n+     * be a card in review or not. */\n+    public void preloadNextCard() {\n+        for (List<? extends Card.Cache> caches: _fillNextCard()) {\n+            if (caches.isEmpty()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3MzgxOA=="}, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzk5OTc3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo1MTo0NVrOHAZJeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMToxMVrOHAaP5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDA3NA==", "bodyText": "Why was this changed?", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470174074", "createdAt": "2020-08-13T18:51:45Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -708,7 +759,7 @@ private void _resetNew() {\n     }\n \n     private void _resetNewQueue() {\n-        mNewDids = new LinkedList<>(mCol.getDecks().active());\n+        mNewDids = new LinkedList(mCol.getDecks().active());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MjEwMA==", "bodyText": "No reason I can remember.", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470192100", "createdAt": "2020-08-13T19:21:11Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -708,7 +759,7 @@ private void _resetNew() {\n     }\n \n     private void _resetNewQueue() {\n-        mNewDids = new LinkedList<>(mCol.getDecks().active());\n+        mNewDids = new LinkedList(mCol.getDecks().active());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDA3NA=="}, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODAwNDgwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxODo1MzoyMFrOHAZMvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxOToyMjoxNFrOHAaSrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDkwOQ==", "bodyText": "Alternate implementation: Bake the caching into the data structure, and then you don't complicate the API calls here", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470174909", "createdAt": "2020-08-13T18:53:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3128,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5MjgxMw==", "bodyText": "Which data structure ? The queue ?  I don't understand what change you want here", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470192813", "createdAt": "2020-08-13T19:22:14Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3128,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE3NDkwOQ=="}, "originalCommit": {"oid": "c2c92013146a70f97afa98a709b01e48d22e964e"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODM5Njg2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDozOTo0MFrOHAc0_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTowNzowMVrOHAds4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNDM2NQ==", "bodyText": "This should also be implemented in the card queue.\nWe need to assume that this does not return false. I'm not sure how", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470234365", "createdAt": "2020-08-13T20:39:40Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3149,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb255d37a1620c87f90f0ca7752466fb6bf40561"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODc1Mw==", "bodyText": "Why do you need to assume it does not return false ?", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470238753", "createdAt": "2020-08-13T20:47:25Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3149,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNDM2NQ=="}, "originalCommit": {"oid": "fb255d37a1620c87f90f0ca7752466fb6bf40561"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzODkyNA==", "bodyText": "Added in the queue class", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470238924", "createdAt": "2020-08-13T20:47:45Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3149,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNDM2NQ=="}, "originalCommit": {"oid": "fb255d37a1620c87f90f0ca7752466fb6bf40561"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0NDE5Ng==", "bodyText": "If it returns false, it's very likely a bug in the scheduler's logic - we shouldn't try to remove a card that doesn't exist.", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470244196", "createdAt": "2020-08-13T20:57:31Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3149,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNDM2NQ=="}, "originalCommit": {"oid": "fb255d37a1620c87f90f0ca7752466fb6bf40561"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0ODY3NA==", "bodyText": "I disagree. We are trying to remove the cards from both new and review queue. The current card may well be in the daily lrn queue or in the subday lrn queue. We don't want to remove cards in learning from the queue, so if we don't find the cards in the queue it only means that it is in learning.\nIt could also means that the queue had been reset in background and that setCurrentCard was executed after the reset and before the queue is filled", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470248674", "createdAt": "2020-08-13T21:07:01Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -3063,8 +3149,8 @@ public void setCurrentCard(@NonNull Card card) {\n         mCurrentCardParentsDid = currentCardParentsDid;\n         _burySiblings(card);\n         // if current card is next card or in the queue\n-        mRevQueue.remove(card.getId());\n-        mNewQueue.remove(card.getId());\n+        mRevQueue.remove(mCol.getCardCache(card.getId()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDIzNDM2NQ=="}, "originalCommit": {"oid": "fb255d37a1620c87f90f0ca7752466fb6bf40561"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzODQ0MTk0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1MToxNVrOHAdOpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMDo1NjoyMVrOHAdZLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDkzNQ==", "bodyText": "I think this is the final one", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470240935", "createdAt": "2020-08-13T20:51:15Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -2514,7 +2605,7 @@ protected void _burySiblings(Card card) {\n                 }\n                 // even if burying disabled, we still discard to give\n                 // same-day spacing\n-                queue_object.remove(cid);\n+                queue_object.remove(mCol.getCardCache(cid));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf8cd0f5666b5c5f2c74731af6f556719c5a60fd"}, "originalPosition": 227}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MzYyOA==", "bodyText": "Done", "url": "https://github.com/ankidroid/Anki-Android/pull/6850#discussion_r470243628", "createdAt": "2020-08-13T20:56:21Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -2514,7 +2605,7 @@ protected void _burySiblings(Card card) {\n                 }\n                 // even if burying disabled, we still discard to give\n                 // same-day spacing\n-                queue_object.remove(cid);\n+                queue_object.remove(mCol.getCardCache(cid));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI0MDkzNQ=="}, "originalCommit": {"oid": "bf8cd0f5666b5c5f2c74731af6f556719c5a60fd"}, "originalPosition": 227}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4822, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}