{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODk0NTg4", "number": 7358, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxNDoxNVrOEtiNvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNzo0M1rOEyBpXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTgxOTUwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/res/values/constants.xml", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxNDoxNVrOHhYJOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjo0Mjo1MlrOHjIHfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MDYzMw==", "bodyText": "Interesting - so the idea here is that this will actually be translated now? If that's the case then when these are translated there's no QA to know if someone didn't just put a dangling pointer in to some non-existing translation (thinking they needed to translate it but not realizing they need to translate the whole manual in ankidroiddocs as well). We need a fallback mechanism somehow if the manual is 404, or some way to handle this", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504760633", "createdAt": "2020-10-14T15:14:15Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/res/values/constants.xml", "diffHunk": "@@ -139,12 +139,7 @@\n     <string name=\"link_contribution\">https://github.com/ankidroid/Anki-Android/wiki/Contributing</string>\n     <string name=\"link_help\">https://docs.ankidroid.org/help.html</string>\n     <string name=\"link_manual\">https://docs.ankidroid.org/manual.html</string>\n-    <string name=\"link_help_ja\">https://docs.ankidroid.org/help-ja.html</string>\n-    <string name=\"link_manual_ja\">https://docs.ankidroid.org/manual-ja.html</string>\n-    <string name=\"link_help_zh\">https://docs.ankidroid.org/help-zh.html</string>\n-    <string name=\"link_manual_zh\">https://docs.ankidroid.org/manual-zh.html</string>\n-    <string name=\"link_help_ar\">https://docs.ankidroid.org/help-ar.html</string>\n-    <string name=\"link_manual_ar\">https://docs.ankidroid.org/manual-ar.html</string>\n+    <string name=\"link_manual_importing\">https://docs.ankidroid.org/manual.html#importing</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fcfdc6213c3dcedd6eaca8fd76661c65e015228"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MjY4MA==", "bodyText": "This might be the time to render the manuals in as well, so it is a file-based check. The release script chunk that does the render is trivial, might be easy to tick that one off? #6829", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504762680", "createdAt": "2020-10-14T15:16:52Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/res/values/constants.xml", "diffHunk": "@@ -139,12 +139,7 @@\n     <string name=\"link_contribution\">https://github.com/ankidroid/Anki-Android/wiki/Contributing</string>\n     <string name=\"link_help\">https://docs.ankidroid.org/help.html</string>\n     <string name=\"link_manual\">https://docs.ankidroid.org/manual.html</string>\n-    <string name=\"link_help_ja\">https://docs.ankidroid.org/help-ja.html</string>\n-    <string name=\"link_manual_ja\">https://docs.ankidroid.org/manual-ja.html</string>\n-    <string name=\"link_help_zh\">https://docs.ankidroid.org/help-zh.html</string>\n-    <string name=\"link_manual_zh\">https://docs.ankidroid.org/manual-zh.html</string>\n-    <string name=\"link_help_ar\">https://docs.ankidroid.org/help-ar.html</string>\n-    <string name=\"link_manual_ar\">https://docs.ankidroid.org/manual-ar.html</string>\n+    <string name=\"link_manual_importing\">https://docs.ankidroid.org/manual.html#importing</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MDYzMw=="}, "originalCommit": {"oid": "1fcfdc6213c3dcedd6eaca8fd76661c65e015228"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5NTE5OA==", "bodyText": "I think I misunderstood, constants.xml should be translated only by developers - it shouldn't hit CrowdIn.", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r506595198", "createdAt": "2020-10-16T16:42:52Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/res/values/constants.xml", "diffHunk": "@@ -139,12 +139,7 @@\n     <string name=\"link_contribution\">https://github.com/ankidroid/Anki-Android/wiki/Contributing</string>\n     <string name=\"link_help\">https://docs.ankidroid.org/help.html</string>\n     <string name=\"link_manual\">https://docs.ankidroid.org/manual.html</string>\n-    <string name=\"link_help_ja\">https://docs.ankidroid.org/help-ja.html</string>\n-    <string name=\"link_manual_ja\">https://docs.ankidroid.org/manual-ja.html</string>\n-    <string name=\"link_help_zh\">https://docs.ankidroid.org/help-zh.html</string>\n-    <string name=\"link_manual_zh\">https://docs.ankidroid.org/manual-zh.html</string>\n-    <string name=\"link_help_ar\">https://docs.ankidroid.org/help-ar.html</string>\n-    <string name=\"link_manual_ar\">https://docs.ankidroid.org/manual-ar.html</string>\n+    <string name=\"link_manual_importing\">https://docs.ankidroid.org/manual.html#importing</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MDYzMw=="}, "originalCommit": {"oid": "1fcfdc6213c3dcedd6eaca8fd76661c65e015228"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTgzODY1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxODoxMlrOHhYVCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxODoxMlrOHhYVCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2MzY1OA==", "bodyText": "I blew you up with the switch -> if/else change here sorry", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504763658", "createdAt": "2020-10-14T15:18:12Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/NavigationDrawerActivity.java", "diffHunk": "@@ -327,11 +327,11 @@ public boolean onNavigationItemSelected(final MenuItem item) {\n                     break;\n                 case R.id.nav_help:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dc803a3aa0fbcf5994064c64f1cab1e739af174"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTg0MzgwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToxOToyMlrOHhYYZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozMDo1MFrOHhY7Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDUxOQ==", "bodyText": "just out of curiosity, what is that 1 argument in the lambda?", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504764519", "createdAt": "2020-10-14T15:19:22Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.app.Dialog;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import com.afollestad.materialdialogs.MaterialDialog;\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.R;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+/** A Dialog displaying The various options for \"Help\" in a nested structure */\n+public class RecursivePictureMenu extends DialogFragment {\n+\n+    public RecursivePictureMenu() {\n+        // required for a fragment - must be no args\n+    }\n+\n+    @CheckResult\n+    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n+        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n+        Bundle args = new Bundle();\n+        args.putParcelableArrayList(\"bundle\", itemList);\n+        helpDialog.setArguments(args);\n+        return helpDialog;\n+    }\n+\n+\n+    public static void removeFrom(List<Item> allItems, Item toRemove) {\n+        // Note: currently doesn't remove the top-level elements.\n+        for (Item i : allItems) {\n+            i.remove(toRemove);\n+        }\n+    }\n+\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+\n+        @NonNull\n+        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n+\n+        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n+\n+\n+            @NonNull\n+            @Override\n+            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n+                return new RecyclerView.ViewHolder(root) { };\n+            }\n+\n+\n+            @Override\n+            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n+                TextView textView = (TextView) holder.itemView;\n+                Item val = items.get(position);\n+                textView.setText(val.mText);\n+                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dc803a3aa0fbcf5994064c64f1cab1e739af174"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3MzQ2Ng==", "bodyText": "L, not, 1.\nBut: Should be a discard (sadly unsupported by Java), or \"view\"", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504773466", "createdAt": "2020-10-14T15:30:50Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.app.Dialog;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import com.afollestad.materialdialogs.MaterialDialog;\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.R;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+/** A Dialog displaying The various options for \"Help\" in a nested structure */\n+public class RecursivePictureMenu extends DialogFragment {\n+\n+    public RecursivePictureMenu() {\n+        // required for a fragment - must be no args\n+    }\n+\n+    @CheckResult\n+    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n+        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n+        Bundle args = new Bundle();\n+        args.putParcelableArrayList(\"bundle\", itemList);\n+        helpDialog.setArguments(args);\n+        return helpDialog;\n+    }\n+\n+\n+    public static void removeFrom(List<Item> allItems, Item toRemove) {\n+        // Note: currently doesn't remove the top-level elements.\n+        for (Item i : allItems) {\n+            i.remove(toRemove);\n+        }\n+    }\n+\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+\n+        @NonNull\n+        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n+\n+        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n+\n+\n+            @NonNull\n+            @Override\n+            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n+                return new RecyclerView.ViewHolder(root) { };\n+            }\n+\n+\n+            @Override\n+            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n+                TextView textView = (TextView) holder.itemView;\n+                Item val = items.get(position);\n+                textView.setText(val.mText);\n+                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NDUxOQ=="}, "originalCommit": {"oid": "4dc803a3aa0fbcf5994064c64f1cab1e739af174"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MTg1MzU3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNToyMToxMVrOHhYeGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxNTozMToyMFrOHhY86w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NTk3OQ==", "bodyText": "anytime I see parcellable things and Bundles now I'm afraid of size limits \ud83d\ude05  - I don't think that's really a concern here, this is just a request to look carefully one more time and attest \"this is a fixed amount of data going in, and no way it will be more than 1MB\", correct?", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504765979", "createdAt": "2020-10-14T15:21:11Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.app.Dialog;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import com.afollestad.materialdialogs.MaterialDialog;\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.R;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+/** A Dialog displaying The various options for \"Help\" in a nested structure */\n+public class RecursivePictureMenu extends DialogFragment {\n+\n+    public RecursivePictureMenu() {\n+        // required for a fragment - must be no args\n+    }\n+\n+    @CheckResult\n+    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n+        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n+        Bundle args = new Bundle();\n+        args.putParcelableArrayList(\"bundle\", itemList);\n+        helpDialog.setArguments(args);\n+        return helpDialog;\n+    }\n+\n+\n+    public static void removeFrom(List<Item> allItems, Item toRemove) {\n+        // Note: currently doesn't remove the top-level elements.\n+        for (Item i : allItems) {\n+            i.remove(toRemove);\n+        }\n+    }\n+\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+\n+        @NonNull\n+        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n+\n+        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n+\n+\n+            @NonNull\n+            @Override\n+            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n+                return new RecyclerView.ViewHolder(root) { };\n+            }\n+\n+\n+            @Override\n+            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n+                TextView textView = (TextView) holder.itemView;\n+                Item val = items.get(position);\n+                textView.setText(val.mText);\n+                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));\n+                int mIcon = val.mIcon;\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                    textView.setCompoundDrawablesRelativeWithIntrinsicBounds(mIcon, 0, 0, 0);\n+                } else {\n+                    textView.setCompoundDrawablesWithIntrinsicBounds(mIcon, 0, 0, 0);\n+                }\n+            }\n+\n+\n+            @Override\n+            public int getItemCount() {\n+                return items.size();\n+            }\n+        };\n+\n+        return new MaterialDialog.Builder(requireContext())\n+                .adapter(adapter, null)\n+                .show();\n+    }\n+\n+    public abstract static class Item implements Parcelable {\n+\n+        private final @StringRes int mText;\n+        private final @DrawableRes int mIcon;\n+\n+        public Item(@StringRes int titleString, @DrawableRes int iconDrawable) {\n+            this.mText = titleString;\n+            this.mIcon = iconDrawable;\n+        }\n+\n+        public List<Item> getChildren() {\n+            return new ArrayList<>();\n+        }\n+\n+        protected Item(Parcel in) {\n+            mText = in.readInt();\n+            mIcon = in.readInt();\n+        }\n+\n+        @Override\n+        public int describeContents() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel dest, int flags) {\n+            dest.writeInt(mText);\n+            dest.writeInt(mIcon);\n+        }\n+\n+        public abstract void execute(AnkiActivity activity);\n+\n+        public abstract void remove(Item toRemove);\n+    }\n+\n+    public static class ItemHeader extends Item implements Parcelable {\n+\n+        private final List<Item> mChildren;\n+\n+\n+        public ItemHeader(@StringRes int titleString, int i, Item... children) {\n+            super(titleString, i);\n+            mChildren = new ArrayList<>(Arrays.asList(children));\n+        }\n+\n+\n+        @Override\n+        public List<Item> getChildren() {\n+            return new ArrayList<>(mChildren);\n+        }\n+\n+\n+        @Override\n+        public void execute(AnkiActivity activity) {\n+            DialogFragment nextFragment = RecursivePictureMenu.createInstance(new ArrayList<>(this.getChildren()));\n+            activity.showDialogFragment(nextFragment);\n+        }\n+\n+\n+        @Override\n+        public void remove(Item toRemove) {\n+            mChildren.remove(toRemove);\n+            for (Item i : mChildren) {\n+                i.remove(toRemove);\n+            }\n+        }\n+\n+\n+        protected ItemHeader(Parcel in) {\n+            super(in);\n+            if (in.readByte() == 0x01) {\n+                mChildren = new ArrayList<>();\n+                in.readList(mChildren, Item.class.getClassLoader());\n+            } else {\n+                mChildren = new ArrayList<>();\n+            }\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel dest, int flags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4dc803a3aa0fbcf5994064c64f1cab1e739af174"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc3Mzg2Nw==", "bodyText": "Definitely fine - arrayList of < 100 elements.", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r504773867", "createdAt": "2020-10-14T15:31:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/RecursivePictureMenu.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.app.Dialog;\n+import android.os.Build;\n+import android.os.Bundle;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.TextView;\n+\n+import com.afollestad.materialdialogs.MaterialDialog;\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.R;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+/** A Dialog displaying The various options for \"Help\" in a nested structure */\n+public class RecursivePictureMenu extends DialogFragment {\n+\n+    public RecursivePictureMenu() {\n+        // required for a fragment - must be no args\n+    }\n+\n+    @CheckResult\n+    public static RecursivePictureMenu createInstance(ArrayList<Item> itemList) {\n+        RecursivePictureMenu helpDialog = new RecursivePictureMenu();\n+        Bundle args = new Bundle();\n+        args.putParcelableArrayList(\"bundle\", itemList);\n+        helpDialog.setArguments(args);\n+        return helpDialog;\n+    }\n+\n+\n+    public static void removeFrom(List<Item> allItems, Item toRemove) {\n+        // Note: currently doesn't remove the top-level elements.\n+        for (Item i : allItems) {\n+            i.remove(toRemove);\n+        }\n+    }\n+\n+\n+    @NonNull\n+    @Override\n+    public Dialog onCreateDialog(@Nullable Bundle savedInstanceState) {\n+\n+        @NonNull\n+        final List<Item> items = getArguments().getParcelableArrayList(\"bundle\");\n+\n+        RecyclerView.Adapter<?> adapter = new RecyclerView.Adapter<RecyclerView.ViewHolder>() {\n+\n+\n+            @NonNull\n+            @Override\n+            public RecyclerView.ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {\n+                View root = getLayoutInflater().inflate(R.layout.material_dialog_list_item, parent, false);\n+                return new RecyclerView.ViewHolder(root) { };\n+            }\n+\n+\n+            @Override\n+            public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder, int position) {\n+                TextView textView = (TextView) holder.itemView;\n+                Item val = items.get(position);\n+                textView.setText(val.mText);\n+                textView.setOnClickListener((l) -> val.execute((AnkiActivity) requireActivity()));\n+                int mIcon = val.mIcon;\n+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {\n+                    textView.setCompoundDrawablesRelativeWithIntrinsicBounds(mIcon, 0, 0, 0);\n+                } else {\n+                    textView.setCompoundDrawablesWithIntrinsicBounds(mIcon, 0, 0, 0);\n+                }\n+            }\n+\n+\n+            @Override\n+            public int getItemCount() {\n+                return items.size();\n+            }\n+        };\n+\n+        return new MaterialDialog.Builder(requireContext())\n+                .adapter(adapter, null)\n+                .show();\n+    }\n+\n+    public abstract static class Item implements Parcelable {\n+\n+        private final @StringRes int mText;\n+        private final @DrawableRes int mIcon;\n+\n+        public Item(@StringRes int titleString, @DrawableRes int iconDrawable) {\n+            this.mText = titleString;\n+            this.mIcon = iconDrawable;\n+        }\n+\n+        public List<Item> getChildren() {\n+            return new ArrayList<>();\n+        }\n+\n+        protected Item(Parcel in) {\n+            mText = in.readInt();\n+            mIcon = in.readInt();\n+        }\n+\n+        @Override\n+        public int describeContents() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel dest, int flags) {\n+            dest.writeInt(mText);\n+            dest.writeInt(mIcon);\n+        }\n+\n+        public abstract void execute(AnkiActivity activity);\n+\n+        public abstract void remove(Item toRemove);\n+    }\n+\n+    public static class ItemHeader extends Item implements Parcelable {\n+\n+        private final List<Item> mChildren;\n+\n+\n+        public ItemHeader(@StringRes int titleString, int i, Item... children) {\n+            super(titleString, i);\n+            mChildren = new ArrayList<>(Arrays.asList(children));\n+        }\n+\n+\n+        @Override\n+        public List<Item> getChildren() {\n+            return new ArrayList<>(mChildren);\n+        }\n+\n+\n+        @Override\n+        public void execute(AnkiActivity activity) {\n+            DialogFragment nextFragment = RecursivePictureMenu.createInstance(new ArrayList<>(this.getChildren()));\n+            activity.showDialogFragment(nextFragment);\n+        }\n+\n+\n+        @Override\n+        public void remove(Item toRemove) {\n+            mChildren.remove(toRemove);\n+            for (Item i : mChildren) {\n+                i.remove(toRemove);\n+            }\n+        }\n+\n+\n+        protected ItemHeader(Parcel in) {\n+            super(in);\n+            if (in.readByte() == 0x01) {\n+                mChildren = new ArrayList<>();\n+                in.readList(mChildren, Item.class.getClassLoader());\n+            } else {\n+                mChildren = new ArrayList<>();\n+            }\n+        }\n+\n+        @Override\n+        public void writeToParcel(Parcel dest, int flags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDc2NTk3OQ=="}, "originalCommit": {"oid": "4dc803a3aa0fbcf5994064c64f1cab1e739af174"}, "originalPosition": 192}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwODkxMjI5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNzo0M1rOHocM5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODo1OTozNFrOHoeHVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw==", "bodyText": "Sorry to seemingly waffle on this, I think we should attempt a 'Donate' to https://opencollective.com/ankidroid - silly to have it and not promote at all. Could use a link to the same actually on the contributions/help documents in FAQ / manual, and as a preliminary look it appears finding an SVG should not be hard https://duckduckgo.com/?q=black+24dp+usd+icon+svg&t=ffab&atb=v201-1&iar=images&iax=images&ia=images", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512167143", "createdAt": "2020-10-26T18:07:43Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.Item;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.ItemHeader;\n+import com.ichi2.utils.IntentUtil;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+\n+public class HelpDialog {\n+\n+    private static void openManual(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getManualUrl()));\n+    }\n+\n+    private static void openFeedback(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getFeedbackUrl()));\n+    }\n+\n+    public static DialogFragment createInstance(Context context) {\n+\n+        RateAppItem rateAppItem = new RateAppItem(R.string.help_item_support_rate_ankidroid, R.drawable.ic_star_black_24);\n+        Item[] allItems = {\n+                new ItemHeader(R.string.help_title_using_ankidroid, R.drawable.ic_manual_black_24dp,\n+                        new FunctionItem(R.string.help_item_ankidroid_manual, R.drawable.ic_manual_black_24dp, HelpDialog::openManual),\n+                        new LinkItem(R.string.help_item_anki_manual, R.drawable.ic_manual_black_24dp, R.string.link_anki_manual),\n+                        new LinkItem(R.string.help_item_ankidroid_faq, R.drawable.ic_help_black_24dp, R.string.link_ankidroid_faq)\n+                ),\n+                new ItemHeader(R.string.help_title_get_help, R.drawable.ic_help_black_24dp,\n+                        new LinkItem(R.string.help_item_mailing_list, R.drawable.ic_email_black_24dp, R.string.link_forum),\n+                        new FunctionItem(R.string.help_item_report_bug, R.drawable.ic_bug_report_black_24dp, HelpDialog::openFeedback)\n+                ),\n+                new ItemHeader(R.string.help_title_support_ankidroid, R.drawable.ic_heart_black_24dp,\n+                        new LinkItem(R.string.help_item_support_translate_ankidroid, R.drawable.ic_language_black_24dp, R.string.link_translation),\n+                        new LinkItem(R.string.help_item_support_develop_ankidroid, R.drawable.ic_build_black_24, R.string.link_ankidroid_development_guide),\n+                        rateAppItem,\n+                        new LinkItem(R.string.help_item_support_other_ankidroid, R.drawable.ic_help_black_24dp, R.string.link_contribution),\n+                        new FunctionItem(R.string.send_feedback, R.drawable.ic_email_black_24dp, HelpDialog::openFeedback)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2ODU2MA==", "bodyText": "I wasn't sure whether we'd confirmed or not - no problem at all", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512168560", "createdAt": "2020-10-26T18:09:58Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.Item;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.ItemHeader;\n+import com.ichi2.utils.IntentUtil;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+\n+public class HelpDialog {\n+\n+    private static void openManual(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getManualUrl()));\n+    }\n+\n+    private static void openFeedback(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getFeedbackUrl()));\n+    }\n+\n+    public static DialogFragment createInstance(Context context) {\n+\n+        RateAppItem rateAppItem = new RateAppItem(R.string.help_item_support_rate_ankidroid, R.drawable.ic_star_black_24);\n+        Item[] allItems = {\n+                new ItemHeader(R.string.help_title_using_ankidroid, R.drawable.ic_manual_black_24dp,\n+                        new FunctionItem(R.string.help_item_ankidroid_manual, R.drawable.ic_manual_black_24dp, HelpDialog::openManual),\n+                        new LinkItem(R.string.help_item_anki_manual, R.drawable.ic_manual_black_24dp, R.string.link_anki_manual),\n+                        new LinkItem(R.string.help_item_ankidroid_faq, R.drawable.ic_help_black_24dp, R.string.link_ankidroid_faq)\n+                ),\n+                new ItemHeader(R.string.help_title_get_help, R.drawable.ic_help_black_24dp,\n+                        new LinkItem(R.string.help_item_mailing_list, R.drawable.ic_email_black_24dp, R.string.link_forum),\n+                        new FunctionItem(R.string.help_item_report_bug, R.drawable.ic_bug_report_black_24dp, HelpDialog::openFeedback)\n+                ),\n+                new ItemHeader(R.string.help_title_support_ankidroid, R.drawable.ic_heart_black_24dp,\n+                        new LinkItem(R.string.help_item_support_translate_ankidroid, R.drawable.ic_language_black_24dp, R.string.link_translation),\n+                        new LinkItem(R.string.help_item_support_develop_ankidroid, R.drawable.ic_build_black_24, R.string.link_ankidroid_development_guide),\n+                        rateAppItem,\n+                        new LinkItem(R.string.help_item_support_other_ankidroid, R.drawable.ic_help_black_24dp, R.string.link_contribution),\n+                        new FunctionItem(R.string.send_feedback, R.drawable.ic_email_black_24dp, HelpDialog::openFeedback)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw=="}, "originalCommit": {"oid": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MTk0NQ==", "bodyText": "SVG is available in the Android Vector Assets", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512171945", "createdAt": "2020-10-26T18:15:44Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.Item;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.ItemHeader;\n+import com.ichi2.utils.IntentUtil;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+\n+public class HelpDialog {\n+\n+    private static void openManual(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getManualUrl()));\n+    }\n+\n+    private static void openFeedback(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getFeedbackUrl()));\n+    }\n+\n+    public static DialogFragment createInstance(Context context) {\n+\n+        RateAppItem rateAppItem = new RateAppItem(R.string.help_item_support_rate_ankidroid, R.drawable.ic_star_black_24);\n+        Item[] allItems = {\n+                new ItemHeader(R.string.help_title_using_ankidroid, R.drawable.ic_manual_black_24dp,\n+                        new FunctionItem(R.string.help_item_ankidroid_manual, R.drawable.ic_manual_black_24dp, HelpDialog::openManual),\n+                        new LinkItem(R.string.help_item_anki_manual, R.drawable.ic_manual_black_24dp, R.string.link_anki_manual),\n+                        new LinkItem(R.string.help_item_ankidroid_faq, R.drawable.ic_help_black_24dp, R.string.link_ankidroid_faq)\n+                ),\n+                new ItemHeader(R.string.help_title_get_help, R.drawable.ic_help_black_24dp,\n+                        new LinkItem(R.string.help_item_mailing_list, R.drawable.ic_email_black_24dp, R.string.link_forum),\n+                        new FunctionItem(R.string.help_item_report_bug, R.drawable.ic_bug_report_black_24dp, HelpDialog::openFeedback)\n+                ),\n+                new ItemHeader(R.string.help_title_support_ankidroid, R.drawable.ic_heart_black_24dp,\n+                        new LinkItem(R.string.help_item_support_translate_ankidroid, R.drawable.ic_language_black_24dp, R.string.link_translation),\n+                        new LinkItem(R.string.help_item_support_develop_ankidroid, R.drawable.ic_build_black_24, R.string.link_ankidroid_development_guide),\n+                        rateAppItem,\n+                        new LinkItem(R.string.help_item_support_other_ankidroid, R.drawable.ic_help_black_24dp, R.string.link_contribution),\n+                        new FunctionItem(R.string.send_feedback, R.drawable.ic_email_black_24dp, HelpDialog::openFeedback)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw=="}, "originalCommit": {"oid": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE5ODQ4NQ==", "bodyText": "yeah I just prodded them for final confirmation since I haven't heard back yet but this is okay to tee up in the meanwhile and I'll mark pending merge", "url": "https://github.com/ankidroid/Anki-Android/pull/7358#discussion_r512198485", "createdAt": "2020-10-26T18:59:34Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/dialogs/HelpDialog.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ *  Copyright (c) 2020 David Allison <davidallisongithub@gmail.com>\n+ *\n+ *  This program is free software; you can redistribute it and/or modify it under\n+ *  the terms of the GNU General Public License as published by the Free Software\n+ *  Foundation; either version 3 of the License, or (at your option) any later\n+ *  version.\n+ *\n+ *  This program is distributed in the hope that it will be useful, but WITHOUT ANY\n+ *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n+ *  PARTICULAR PURPOSE. See the GNU General Public License for more details.\n+ *\n+ *  You should have received a copy of the GNU General Public License along with\n+ *  this program.  If not, see <http://www.gnu.org/licenses/>.\n+ */\n+\n+package com.ichi2.anki.dialogs;\n+\n+import android.content.Context;\n+import android.net.Uri;\n+import android.os.Parcel;\n+import android.os.Parcelable;\n+\n+import com.ichi2.anki.AnkiActivity;\n+import com.ichi2.anki.AnkiDroidApp;\n+import com.ichi2.anki.R;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.Item;\n+import com.ichi2.anki.dialogs.RecursivePictureMenu.ItemHeader;\n+import com.ichi2.utils.IntentUtil;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.StringRes;\n+import androidx.fragment.app.DialogFragment;\n+\n+public class HelpDialog {\n+\n+    private static void openManual(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getManualUrl()));\n+    }\n+\n+    private static void openFeedback(AnkiActivity ankiActivity) {\n+        ankiActivity.openUrl(Uri.parse(AnkiDroidApp.getFeedbackUrl()));\n+    }\n+\n+    public static DialogFragment createInstance(Context context) {\n+\n+        RateAppItem rateAppItem = new RateAppItem(R.string.help_item_support_rate_ankidroid, R.drawable.ic_star_black_24);\n+        Item[] allItems = {\n+                new ItemHeader(R.string.help_title_using_ankidroid, R.drawable.ic_manual_black_24dp,\n+                        new FunctionItem(R.string.help_item_ankidroid_manual, R.drawable.ic_manual_black_24dp, HelpDialog::openManual),\n+                        new LinkItem(R.string.help_item_anki_manual, R.drawable.ic_manual_black_24dp, R.string.link_anki_manual),\n+                        new LinkItem(R.string.help_item_ankidroid_faq, R.drawable.ic_help_black_24dp, R.string.link_ankidroid_faq)\n+                ),\n+                new ItemHeader(R.string.help_title_get_help, R.drawable.ic_help_black_24dp,\n+                        new LinkItem(R.string.help_item_mailing_list, R.drawable.ic_email_black_24dp, R.string.link_forum),\n+                        new FunctionItem(R.string.help_item_report_bug, R.drawable.ic_bug_report_black_24dp, HelpDialog::openFeedback)\n+                ),\n+                new ItemHeader(R.string.help_title_support_ankidroid, R.drawable.ic_heart_black_24dp,\n+                        new LinkItem(R.string.help_item_support_translate_ankidroid, R.drawable.ic_language_black_24dp, R.string.link_translation),\n+                        new LinkItem(R.string.help_item_support_develop_ankidroid, R.drawable.ic_build_black_24, R.string.link_ankidroid_development_guide),\n+                        rateAppItem,\n+                        new LinkItem(R.string.help_item_support_other_ankidroid, R.drawable.ic_help_black_24dp, R.string.link_contribution),\n+                        new FunctionItem(R.string.send_feedback, R.drawable.ic_email_black_24dp, HelpDialog::openFeedback)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2NzE0Mw=="}, "originalCommit": {"oid": "c0414fa4147aa308d62f1ea10a1a03cd22d328f7"}, "originalPosition": 67}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 824, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}