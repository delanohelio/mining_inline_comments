{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzQ3ODcy", "number": 6925, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0MDoxMVrOEad5Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0Mjo0M1rOEad9rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTg4MTcxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0MDoxMVrOHD6uoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0MDoxMVrOHD6uoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg2OTk4NA==", "bodyText": "Could you rename this to assertNewCountIs. having test in the name implies that it's a test.", "url": "https://github.com/ankidroid/Anki-Android/pull/6925#discussion_r473869984", "createdAt": "2020-08-20T10:40:11Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -203,4 +205,108 @@ public void siblingCorrectlyBuried() {\n         Card card = sched.getCard();\n         assertNull(card);\n     }\n+    private void testNewCount(long did, int expected) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60453f2f842388530ef8036060e85953be4d2fb"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTg4OTUwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0MTo0OVrOHD6zbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo1NzoxOVrOHD7gMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3MTIxNA==", "bodyText": "(Optional) I find it to be a good idea to move the private methods in a test class to below the tests - I'm not sure if we've formalised the rule, but I find it helps readability.", "url": "https://github.com/ankidroid/Anki-Android/pull/6925#discussion_r473871214", "createdAt": "2020-08-20T10:41:49Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -203,4 +205,108 @@ public void siblingCorrectlyBuried() {\n         Card card = sched.getCard();\n         assertNull(card);\n     }\n+    private void testNewCount(long did, int expected) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().resetCounts();\n+        assertThat(getCol().getSched().counts()[0], is(expected));\n+    }\n+\n+    private void extendNew(long did) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60453f2f842388530ef8036060e85953be4d2fb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NjQzOA==", "bodyText": "You want me to create an internal class ? I don't get your point.\nI would have thought it made things more complex.\nThe upside would be that it would allow to share variables without needing to sending them through the method call each time.", "url": "https://github.com/ankidroid/Anki-Android/pull/6925#discussion_r473876438", "createdAt": "2020-08-20T10:48:51Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -203,4 +205,108 @@ public void siblingCorrectlyBuried() {\n         Card card = sched.getCard();\n         assertNull(card);\n     }\n+    private void testNewCount(long did, int expected) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().resetCounts();\n+        assertThat(getCol().getSched().counts()[0], is(expected));\n+    }\n+\n+    private void extendNew(long did) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3MTIxNA=="}, "originalCommit": {"oid": "b60453f2f842388530ef8036060e85953be4d2fb"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4MjY3NA==", "bodyText": "Just moving the methods inside the class, no need for something internal.", "url": "https://github.com/ankidroid/Anki-Android/pull/6925#discussion_r473882674", "createdAt": "2020-08-20T10:57:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -203,4 +205,108 @@ public void siblingCorrectlyBuried() {\n         Card card = sched.getCard();\n         assertNull(card);\n     }\n+    private void testNewCount(long did, int expected) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().resetCounts();\n+        assertThat(getCol().getSched().counts()[0], is(expected));\n+    }\n+\n+    private void extendNew(long did) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3MTIxNA=="}, "originalCommit": {"oid": "b60453f2f842388530ef8036060e85953be4d2fb"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTg5MzU5OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0Mjo0M1rOHD62Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo1ODoyMFrOHD7jMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3MTg4Mw==", "bodyText": "Could you explain in the comment what Anki Desktop does at this point?", "url": "https://github.com/ankidroid/Anki-Android/pull/6925#discussion_r473871883", "createdAt": "2020-08-20T10:42:43Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -203,4 +205,108 @@ public void siblingCorrectlyBuried() {\n         Card card = sched.getCard();\n         assertNull(card);\n     }\n+    private void testNewCount(long did, int expected) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().resetCounts();\n+        assertThat(getCol().getSched().counts()[0], is(expected));\n+    }\n+\n+    private void extendNew(long did) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().extendLimits(1, 0);\n+    }\n+\n+    @Test\n+    public void increaseToday() {\n+        Collection col = getCol();\n+        Decks decks = col.getDecks();\n+        Models models = col.getModels();\n+        AbstractSched sched = col.getSched();\n+\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 0);\n+        long aId = decks.id(\"A\");\n+        long bId = decks.id(\"A::B\");\n+        long cId = decks.id(\"A::B::C\");\n+        long dId = decks.id(\"A::B::D\");\n+\n+\n+        Model model = models.byName(\"Basic\");\n+        // The note is added in model's did. So change model's did.\n+        model.put(\"did\", cId);\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        model.put(\"did\", dId);\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+\n+        testNewCount(aId, 0);\n+        testNewCount(bId, 0);\n+        testNewCount(cId, 0);\n+        testNewCount(dId, 0);\n+\n+        extendNew(cId);\n+        testNewCount(aId, 1);\n+        testNewCount(bId, 1);\n+        testNewCount(cId, 1);\n+        testNewCount(dId, 0);\n+\n+        extendNew(aId);\n+        testNewCount(aId, 2);\n+        testNewCount(bId, 2);\n+        testNewCount(cId, 2);\n+        testNewCount(dId, 1);\n+\n+        extendNew(bId);\n+        testNewCount(aId, 3);\n+        testNewCount(bId, 3);\n+        testNewCount(cId, 3);\n+        testNewCount(dId, 2);\n+\n+        extendNew(dId);\n+        testNewCount(aId, 4);\n+        testNewCount(bId, 4);\n+        testNewCount(cId, 3);\n+        testNewCount(dId, 3);\n+\n+        extendNew(dId);\n+        testNewCount(aId, 5);\n+        testNewCount(bId, 5);\n+        testNewCount(cId, 3);\n+        testNewCount(dId, 4);\n+\n+        extendNew(cId);\n+        testNewCount(aId, 6);\n+        testNewCount(bId, 6);\n+        // I would have expected :\n+        // testNewCount(aId, 5);\n+        // But it seems that applying \"increase c\", while not actually increasing c (because there are no more new card)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b60453f2f842388530ef8036060e85953be4d2fb"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg4MzQ0Mw==", "bodyText": "If you directly call those methods, it does exactly the same thing.\u00a0Not surprising, since we use the same code base.\nI should note that the GUI does not allow to add new card in a deck which have no more new card.\nSo to actually reproduce it, I need to either do:\nfrom aqt import mw\nc = mw.col.decks.byName(\"A::B::C\")\nmw.col.sched.extendLimits(1, 0)\nin the debugger\nOr to add a new card in A::B::C, increase limit, and then delete the card.\nWe apply no such restriction ourself", "url": "https://github.com/ankidroid/Anki-Android/pull/6925#discussion_r473883443", "createdAt": "2020-08-20T10:58:20Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -203,4 +205,108 @@ public void siblingCorrectlyBuried() {\n         Card card = sched.getCard();\n         assertNull(card);\n     }\n+    private void testNewCount(long did, int expected) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().resetCounts();\n+        assertThat(getCol().getSched().counts()[0], is(expected));\n+    }\n+\n+    private void extendNew(long did) {\n+        getCol().getDecks().select(did);\n+        getCol().getSched().extendLimits(1, 0);\n+    }\n+\n+    @Test\n+    public void increaseToday() {\n+        Collection col = getCol();\n+        Decks decks = col.getDecks();\n+        Models models = col.getModels();\n+        AbstractSched sched = col.getSched();\n+\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 0);\n+        long aId = decks.id(\"A\");\n+        long bId = decks.id(\"A::B\");\n+        long cId = decks.id(\"A::B::C\");\n+        long dId = decks.id(\"A::B::D\");\n+\n+\n+        Model model = models.byName(\"Basic\");\n+        // The note is added in model's did. So change model's did.\n+        model.put(\"did\", cId);\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        model.put(\"did\", dId);\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+        addNoteUsingBasicModel(\"foo\", \"bar\");\n+\n+        testNewCount(aId, 0);\n+        testNewCount(bId, 0);\n+        testNewCount(cId, 0);\n+        testNewCount(dId, 0);\n+\n+        extendNew(cId);\n+        testNewCount(aId, 1);\n+        testNewCount(bId, 1);\n+        testNewCount(cId, 1);\n+        testNewCount(dId, 0);\n+\n+        extendNew(aId);\n+        testNewCount(aId, 2);\n+        testNewCount(bId, 2);\n+        testNewCount(cId, 2);\n+        testNewCount(dId, 1);\n+\n+        extendNew(bId);\n+        testNewCount(aId, 3);\n+        testNewCount(bId, 3);\n+        testNewCount(cId, 3);\n+        testNewCount(dId, 2);\n+\n+        extendNew(dId);\n+        testNewCount(aId, 4);\n+        testNewCount(bId, 4);\n+        testNewCount(cId, 3);\n+        testNewCount(dId, 3);\n+\n+        extendNew(dId);\n+        testNewCount(aId, 5);\n+        testNewCount(bId, 5);\n+        testNewCount(cId, 3);\n+        testNewCount(dId, 4);\n+\n+        extendNew(cId);\n+        testNewCount(aId, 6);\n+        testNewCount(bId, 6);\n+        // I would have expected :\n+        // testNewCount(aId, 5);\n+        // But it seems that applying \"increase c\", while not actually increasing c (because there are no more new card)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3MTg4Mw=="}, "originalCommit": {"oid": "b60453f2f842388530ef8036060e85953be4d2fb"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4867, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}