{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYxODI2NTAw", "number": 6800, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNjo1OFrOEUq1WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1MDozNVrOEVKdRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA4NzYwOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNjo1OFrOG6_4dg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoyNTozMVrOG7ALIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzIzOA==", "bodyText": "Why has this been added?", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464517238", "createdAt": "2020-08-03T16:16:58Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -451,6 +451,7 @@ public int getQueue() {\n \n \n     public void setQueue(@Consts.CARD_QUEUE int queue) {\n+        Assert.that(queue != Consts.QUEUE_TYPE_DAY_LEARN_RELEARN, \"Day\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODYzOA==", "bodyText": "I thought I added it in another branch. I don't know how it ended here. Clearly I should remove it", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464518638", "createdAt": "2020-08-03T16:19:31Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -451,6 +451,7 @@ public int getQueue() {\n \n \n     public void setQueue(@Consts.CARD_QUEUE int queue) {\n+        Assert.that(queue != Consts.QUEUE_TYPE_DAY_LEARN_RELEARN, \"Day\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzIzOA=="}, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMjAxNw==", "bodyText": "Removed. I used it to try to debug #6768 but it seems it was useless anyway", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464522017", "createdAt": "2020-08-03T16:25:31Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Card.java", "diffHunk": "@@ -451,6 +451,7 @@ public int getQueue() {\n \n \n     public void setQueue(@Consts.CARD_QUEUE int queue) {\n+        Assert.that(queue != Consts.QUEUE_TYPE_DAY_LEARN_RELEARN, \"Day\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzIzOA=="}, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA5MDAxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxNzo0NVrOG6_6Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1Nzo0NlrOG7BPbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzY1MQ==", "bodyText": "Nit: These refactorings don't seem relevant to the change", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464517651", "createdAt": "2020-08-03T16:17:45Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -481,13 +483,15 @@ protected void _answerLrnCard(Card card, int ease) {\n                 card.setQueue(Consts.QUEUE_TYPE_LRN);\n                 if (!mLrnQueue.isEmpty() && mRevCount == 0 && mNewCount == 0) {\n                     long smallestDue = mLrnQueue.getFirst().getDue();\n-                    card.setDue(Math.max(card.getDue(), smallestDue + 1));\n+                    long maxDue = Math.max(card.getDue(), smallestDue + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUzOTUwMw==", "bodyText": "I removed all the changes that were due to another branch. I don't really understand how they made it to this branch", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464539503", "createdAt": "2020-08-03T16:57:46Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/Sched.java", "diffHunk": "@@ -481,13 +483,15 @@ protected void _answerLrnCard(Card card, int ease) {\n                 card.setQueue(Consts.QUEUE_TYPE_LRN);\n                 if (!mLrnQueue.isEmpty() && mRevCount == 0 && mNewCount == 0) {\n                     long smallestDue = mLrnQueue.getFirst().getDue();\n-                    card.setDue(Math.max(card.getDue(), smallestDue + 1));\n+                    long maxDue = Math.max(card.getDue(), smallestDue + 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzY1MQ=="}, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA5MTk3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxODoxOVrOG6_7SA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjo1OTozMVrOG7BTMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzk2MA==", "bodyText": "This seems to have changed since the last time I reviewed. Is this part of the bugfix?", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464517960", "createdAt": "2020-08-03T16:18:19Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -2898,6 +2926,16 @@ protected boolean currentCardIsInQueueWithDeck(int queue, long did) {\n         // mCurrentCard may be set to null when the reviewer gets closed. So we copy it to be sure to avoid NullPointerException\n         Card currentCard = mCurrentCard;\n         List<Long> currentCardParentsDid = mCurrentCardParentsDid;\n-        return currentCard != null && currentCard.getQueue() == queue && currentCardParentsDid != null && currentCardParentsDid.contains(did);\n+        if (currentCard == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MDQ2Nw==", "bodyText": "Absolutely not.\u00a0It's part of the branch I used to debug another problem. I didn't think it would split unto multiple commit. I don't get it", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464540467", "createdAt": "2020-08-03T16:59:31Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/sched/SchedV2.java", "diffHunk": "@@ -2898,6 +2926,16 @@ protected boolean currentCardIsInQueueWithDeck(int queue, long did) {\n         // mCurrentCard may be set to null when the reviewer gets closed. So we copy it to be sure to avoid NullPointerException\n         Card currentCard = mCurrentCard;\n         List<Long> currentCardParentsDid = mCurrentCardParentsDid;\n-        return currentCard != null && currentCard.getQueue() == queue && currentCardParentsDid != null && currentCardParentsDid.contains(did);\n+        if (currentCard == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxNzk2MA=="}, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTA5NzQ3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoxOTo1MVrOG6_-sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowMjoyOFrOG7BZqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODgzNQ==", "bodyText": "For future: I've added addNoteUsingBasicModel inside RobolectricTest", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464518835", "createdAt": "2020-08-03T16:19:51Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -142,4 +149,47 @@ public void ensureDeckTree() {\n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MjEyMw==", "bodyText": "Thanks. Used it while I was making the changes", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464542123", "createdAt": "2020-08-03T17:02:28Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedTest.java", "diffHunk": "@@ -142,4 +149,47 @@ public void ensureDeckTree() {\n     private void selectDefaultDeck() {\n         getCol().getDecks().select(Consts.DEFAULT_DECK_ID);\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUxODgzNQ=="}, "originalCommit": {"oid": "17f4e4536ac735de104e9482c271e377c1bbe23b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwMTEwNzU1OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNjoyMjozOVrOG7AE4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QxNzowNDoyNlrOG7BdjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDQxOQ==", "bodyText": "I've added waitForTask(UNDO, timeout); which should cut down on code here", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464520419", "createdAt": "2020-08-03T16:22:39Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -156,5 +161,48 @@ public void ensureDeckTree() {\n         Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n     }\n \n+    // Regression test for 6770\n+    @Test\n+    public void ensureUndoCorrectCounts() throws InterruptedException {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9825d61b31ee671b8970dbe8a945b6f3a9230fba"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MTE2Ng==", "bodyText": "I don't think it fit. I actually want to take the card in onProgressUpdate and it does not seems there is a way to do it using only waitForTask", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464541166", "createdAt": "2020-08-03T17:00:40Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -156,5 +161,48 @@ public void ensureDeckTree() {\n         Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n     }\n \n+    // Regression test for 6770\n+    @Test\n+    public void ensureUndoCorrectCounts() throws InterruptedException {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDQxOQ=="}, "originalCommit": {"oid": "9825d61b31ee671b8970dbe8a945b6f3a9230fba"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDU0MzExNg==", "bodyText": "For context, when you undo, progressUpdate is used to send a card to the reviewer. Then the reviewer uses this card and send it to counts() to get the counts it actually displays. So it is actually required to do onProgressUpdate to check whether the code actually works", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r464543116", "createdAt": "2020-08-03T17:04:26Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/SchedV2Test.java", "diffHunk": "@@ -156,5 +161,48 @@ public void ensureDeckTree() {\n         Assert.assertEquals(\"Tree has not the expected structure\", expectedTree(sched, true), tree);\n     }\n \n+    // Regression test for 6770\n+    @Test\n+    public void ensureUndoCorrectCounts() throws InterruptedException {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDUyMDQxOQ=="}, "originalCommit": {"oid": "9825d61b31ee671b8970dbe8a945b6f3a9230fba"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwNjI2ODg0OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMDo1MDozNlrOG7xBmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQyMjowMzoyNFrOG7zDsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw==", "bodyText": "Can you add an assertion that this code is executed? Guarantees about how multithreaded code execute can change over time with testing framework changes, and knowing explicitly that a test is broken gives value in this case", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465322393", "createdAt": "2020-08-04T20:50:36Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyNzE1MQ==", "bodyText": "Interesting - you mean like, a member variable that starts false, you set it to true in onPostExecute and then assert it is true... where?", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465327151", "createdAt": "2020-08-04T20:59:52Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw=="}, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMTk1Mg==", "bodyText": "It was executed on my computer, that is sure because the test did fail when it was applied before the fix. That does not mean it also works on travis.\nI guess I can copy the code from waitForTask and wait one second and see whether the inner code was executed. It means that one second will be lost each times test are executed, which is quite often. I would hope for better way to exists", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465331952", "createdAt": "2020-08-04T21:09:38Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw=="}, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMzMzYyNA==", "bodyText": "I added a method: waitForAsyncTasksToComplete - it has more semantic meaning and may be helpful, although the current implementation isn't good", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465333624", "createdAt": "2020-08-04T21:13:06Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw=="}, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MTc4NQ==", "bodyText": "What should I do ?\u00a0Call it twice to ensure that two tests are exectued ? The code does not seems clear to me right now", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465351785", "createdAt": "2020-08-04T21:53:49Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw=="}, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1MzU2NA==", "bodyText": "Hmm... leave a boolean as a local: boolean onPostExecuteCalled = false, set it at the end of onPostExecute()\nCall waitForAsyncTasksToComplete  then assert the boolean has been set.\nUse Android Studio auto refactorings to convert the boolean into an AtomicBoolean to remove the compile errors", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465353564", "createdAt": "2020-08-04T21:58:06Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw=="}, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTM1NTY5Ng==", "bodyText": "Done. Thanks", "url": "https://github.com/ankidroid/Anki-Android/pull/6800#discussion_r465355696", "createdAt": "2020-08-04T22:03:24Z", "author": {"login": "Arthur-Milchior"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/sched/AbstractSchedTest.java", "diffHunk": "@@ -85,4 +90,47 @@ public void testUndoResetsCardCountsToCorrectValue() throws InterruptedException\n \n         assertThat(\"Counts after an undo should be the same as before an undo\", countsAfterUndo, is(countsBeforeUndo));\n     }\n+\n+    @Test\n+    public void ensureUndoCorrectCounts() {\n+        Collection col = getCol();\n+        AbstractSched sched = col.getSched();\n+        Deck deck = col.getDecks().get(1);\n+        DeckConfig dconf = col.getDecks().getConf(1);\n+        dconf.getJSONObject(\"new\").put(\"perDay\", 10);\n+        JSONArray newCount = deck.getJSONArray(\"newToday\");\n+        for (int i = 0; i < 20; i++) {\n+            Note note = col.newNote();\n+            note.setField(0, \"a\");\n+            col.addNote(note);\n+        }\n+        sched.reset();\n+        assertThat(col.cardCount(), is(20));\n+        assertThat(sched.counts()[0], is(10));\n+        Card card = sched.getCard();\n+        assertThat(sched.counts()[0], is(9));\n+        assertThat(sched.counts(card)[0], is(10));\n+        sched.answerCard(card, 3);\n+        sched.getCard();\n+        CollectionTask.launchCollectionTask(UNDO,\n+                new CollectionTask.TaskListener() {\n+                    Card card;\n+                    @Override\n+                    public void onPreExecute() {\n+\n+                    }\n+\n+                    @Override\n+                    public void onProgressUpdate(TaskData data) {\n+                        card = data.getCard();\n+                    }\n+\n+\n+                    @Override\n+                    public void onPostExecute(TaskData result) {\n+                        assertThat(sched.counts()[0], is(9));\n+                        assertThat(sched.counts(card)[0], is(10));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTMyMjM5Mw=="}, "originalCommit": {"oid": "2df8d2f7ec2ea7da15e86d1a3b5d4ff2d5f0c6b0"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4974, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}