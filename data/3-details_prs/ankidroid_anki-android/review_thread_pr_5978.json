{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMjQ2MTQy", "number": 5978, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo0Mjo1MlrODw_4cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoxNTowOVrODxDpfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzA0ODgyOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Note.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo0Mjo1MlrOGERH2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo0Mjo1MlrOGERH2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODAyNw==", "bodyText": "why not have the comment actually be javadoc? I actually like javadoc", "url": "https://github.com/ankidroid/Anki-Android/pull/5978#discussion_r407128027", "createdAt": "2020-04-12T00:42:52Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Note.java", "diffHunk": "@@ -389,4 +391,27 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return (int) (mId ^ (mId >>> 32));\n     }\n+\n+\n+    public static class ClozeUtils {\n+        private static final Pattern mClozeRegexPattern = Pattern.compile(\"\\\\{\\\\{c(\\\\d+)::\");\n+\n+        public static int getNextClozeIndex(Iterable<String> fieldValues) {\n+            // Search in all fields of the current note for the cloze reference with the highest value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ea2325f062dce80403a6a6949d64de78526576"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzA1MDI4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/libanki/NoteTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo0NTowNlrOGERIgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQwMDo0NTowNlrOGERIgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzEyODE5NQ==", "bodyText": "this would be more interesting if they were out of order, I'm sure it works based on the code but as long as I\"m nit-picking on javadoc up above and you're in here anyway, maybe swap c2 and c1 for grins", "url": "https://github.com/ankidroid/Anki-Android/pull/5978#discussion_r407128195", "createdAt": "2020-04-12T00:45:06Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/libanki/NoteTest.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package com.ichi2.libanki;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import androidx.test.ext.junit.runners.AndroidJUnit4;\n+\n+import static com.ichi2.libanki.Note.ClozeUtils.getNextClozeIndex;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+\n+@RunWith(AndroidJUnit4.class)\n+public class NoteTest {\n+    @Test\n+    public void noFieldDataReturnsFirstClozeIndex() {\n+        int expected = getNextClozeIndex(Collections.emptyList());\n+\n+        assertThat(\"No data should return a cloze index of 1 the next.\", expected, is(1));\n+    }\n+\n+    @Test\n+    public void negativeFieldIsIgnored() {\n+        String fieldValue = \"{{c-1::foo}}\";\n+        int actual = getNextClozeIndex(Collections.singletonList(fieldValue));\n+\n+        assertThat(\"The next consecutive value should be returned.\", actual, is(1));\n+    }\n+\n+    @Test\n+    public void singleFieldReturnsNextValue() {\n+        String fieldValue = \"{{c1::foo}}{{c2::bar}}\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0ea2325f062dce80403a6a6949d64de78526576"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyNzY2NTkxOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Note.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoxNTowOVrOGEVxnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNDoyMzo1NFrOGEV2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDI1Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    /*\n          \n          \n            \n                    Returns the next index that a cloze should be inserted at, given a list of fields.\n          \n          \n            \n                    Per the manual, cloze references are the name of the delimiters for cloze deletions e.g. {{c1::text}}\n          \n          \n            \n                    The next index is index after the highest existing cloze deletion, gaps are not considered.\n          \n          \n            \n                     */\n          \n          \n            \n                    /**\n          \n          \n            \n                     * Calculate the next number that should be used if inserting a new cloze deletion.\n          \n          \n            \n                     * Per the manual the next number should be greater than any existing cloze deletion\n          \n          \n            \n                     * even if there are gaps in the sequence, and regardless of existing cloze ordering\n          \n          \n            \n                     *\n          \n          \n            \n                     * @param fieldValues Iterable of field values that may contain existing cloze deletions\n          \n          \n            \n                     * @return the next index that a cloze should be inserted at\n          \n          \n            \n                     */\n          \n      \n    \n    \n  \n\nThat's javadoc - it un-muddles the param and return by pulling them out in a specific format, and starts with a double-asterisk", "url": "https://github.com/ankidroid/Anki-Android/pull/5978#discussion_r407204253", "createdAt": "2020-04-12T14:15:09Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Note.java", "diffHunk": "@@ -389,4 +391,31 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return (int) (mId ^ (mId >>> 32));\n     }\n+\n+\n+    public static class ClozeUtils {\n+        private static final Pattern mClozeRegexPattern = Pattern.compile(\"\\\\{\\\\{c(\\\\d+)::\");\n+\n+        /*\n+        Returns the next index that a cloze should be inserted at, given a list of fields.\n+        Per the manual, cloze references are the name of the delimiters for cloze deletions e.g. {{c1::text}}\n+        The next index is index after the highest existing cloze deletion, gaps are not considered.\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6078569067ef34264144b3dd698cbcc9d4016f7"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNTM5NQ==", "bodyText": "Wasn't aware. Thanks! LGTM", "url": "https://github.com/ankidroid/Anki-Android/pull/5978#discussion_r407205395", "createdAt": "2020-04-12T14:23:54Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Note.java", "diffHunk": "@@ -389,4 +391,31 @@ public boolean equals(Object o) {\n     public int hashCode() {\n         return (int) (mId ^ (mId >>> 32));\n     }\n+\n+\n+    public static class ClozeUtils {\n+        private static final Pattern mClozeRegexPattern = Pattern.compile(\"\\\\{\\\\{c(\\\\d+)::\");\n+\n+        /*\n+        Returns the next index that a cloze should be inserted at, given a list of fields.\n+        Per the manual, cloze references are the name of the delimiters for cloze deletions e.g. {{c1::text}}\n+        The next index is index after the highest existing cloze deletion, gaps are not considered.\n+         */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIwNDI1Mw=="}, "originalCommit": {"oid": "a6078569067ef34264144b3dd698cbcc9d4016f7"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 554, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}