{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkyMDg5NDI2", "number": 5854, "title": "fixIntegrity Refactor / Instrument+continue if field count fix fails", "bodyText": "Purpose / Description\nWe added an additional database check inside fixIntegrity, which required that all users perform a database check.\nThis flagged that there were crash bugs in fixIntegrity\nFixes\nFixes #5852\nApproach\nWe modify each check into tasks, and perform each task in its own transaction, rather than running all in the same transaction.\nHow Has This Been Tested?\n\n\nCheck Integrity still works for me\n\n\nAdded in an additional task which threw an exception. Exception was caught, logged and the process continued as expected.\n\n\nChecklist\n\n You have not changed whitespace unnecessarily (it makes diffs hard to read)\n You have a descriptive commit message with a short title (first line, max 50 chars).\n Your code follows the style of the project (e.g. never omit braces in if statements)\n You have commented your code, particularly in hard-to-understand areas\n You have performed a self-review of your own code", "createdAt": "2020-03-22T23:17:47Z", "url": "https://github.com/ankidroid/Anki-Android/pull/5854", "merged": true, "mergeCommit": {"oid": "42b33d1b4e1dab9ba948b5a3ef317de209d0513e"}, "closed": true, "closedAt": "2020-03-24T19:22:57Z", "author": {"login": "david-allison-1"}, "timelineItems": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcQPlDTgH2gAyMzkyMDg5NDI2OmEwYmVhZGQ0MTYzOWYwN2FkODkzYmEwNThhYWE1NTQwNzRiNTU5NzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcQ38jDgFqTM4MDYyNTM2Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a0beadd41639f07ad893ba058aaa554074b55970", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a0beadd41639f07ad893ba058aaa554074b55970", "committedDate": "2020-03-22T20:17:55Z", "message": "Refactor: notifyProgress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e5b07bc40ff7e7e6036118b30ca3eb49e06ee5c", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/8e5b07bc40ff7e7e6036118b30ca3eb49e06ee5c", "committedDate": "2020-03-22T20:33:25Z", "message": "Extract: deleteNotesWithMissingModel"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d003f0f87612e1d481ad2f70fc6991f566dd9538", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/d003f0f87612e1d481ad2f70fc6991f566dd9538", "committedDate": "2020-03-22T20:34:54Z", "message": "Extract: deleteCardsWithInvalidModelOrdinals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bda7d3ec824b17f5414ff164457d3f6cf612aa62", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/bda7d3ec824b17f5414ff164457d3f6cf612aa62", "committedDate": "2020-03-22T20:36:35Z", "message": "Extract: deleteNotesWithWrongFieldCounts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1638479ac35bae36dbea24f54c8f37520b379476", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/1638479ac35bae36dbea24f54c8f37520b379476", "committedDate": "2020-03-22T20:40:10Z", "message": "Extract: deleteNotesWithMissingCards"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07e66af19e9e97fd5e59ccbcfef7b3e0af1107bc", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/07e66af19e9e97fd5e59ccbcfef7b3e0af1107bc", "committedDate": "2020-03-22T20:40:37Z", "message": "Extract: deleteCardsWithMissingNotes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9981a80f4edcd2985e0ca126e0349ac24ba18e99", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/9981a80f4edcd2985e0ca126e0349ac24ba18e99", "committedDate": "2020-03-22T20:42:41Z", "message": "Extract: removeOriginalDuePropertyWhereInvalid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88caab879b31f6168617c1718d0311d41172c97d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/88caab879b31f6168617c1718d0311d41172c97d", "committedDate": "2020-03-22T20:43:27Z", "message": "Extract: removeDynamicPropertyFromNonDynamicDecks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c7d361637a4942050feea76e9b986b95940ae6b", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/0c7d361637a4942050feea76e9b986b95940ae6b", "committedDate": "2020-03-22T20:44:12Z", "message": "Extract: removeDeckOptionsFromDynamicDecks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0b26e7ea4e37bcff60e8b7206ada88eb61c595e9", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/0b26e7ea4e37bcff60e8b7206ada88eb61c595e9", "committedDate": "2020-03-22T20:45:18Z", "message": "Extract: rebuildTags"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ab3c55f67744b807952010caa899c7e4cc64bd6a", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ab3c55f67744b807952010caa899c7e4cc64bd6a", "committedDate": "2020-03-22T20:45:52Z", "message": "Extract: updateFieldCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99db7f9f09b7df3b261827705f567f073bfc84e4", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/99db7f9f09b7df3b261827705f567f073bfc84e4", "committedDate": "2020-03-22T20:47:05Z", "message": "Extract: fixNewCardDuePositionOverflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "be0c1f402fbde36969867ae45b364e3065ae9875", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/be0c1f402fbde36969867ae45b364e3065ae9875", "committedDate": "2020-03-22T20:57:21Z", "message": "Extract: fixNewCardDuePositionOverflow"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d7c06f6d91ed88f052d647fa9048f1912dc251d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/5d7c06f6d91ed88f052d647fa9048f1912dc251d", "committedDate": "2020-03-22T20:58:30Z", "message": "Extract: fixExcessiveReviewDueDates"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4ca59421868cef53bc6ff41973466c31f8eccba", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/a4ca59421868cef53bc6ff41973466c31f8eccba", "committedDate": "2020-03-22T21:00:35Z", "message": "Extract: fixDecimalIntervals"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "336d5db25b04885da70f71da968c3cfbf57ea428", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/336d5db25b04885da70f71da968c3cfbf57ea428", "committedDate": "2020-03-22T21:24:03Z", "message": "Extract: restoreMissingDatabaseIndices"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df0177b63d08508c30bda857bbffb783c7691431", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/df0177b63d08508c30bda857bbffb783c7691431", "committedDate": "2020-03-22T21:25:27Z", "message": "Extract: ensureModelsAreNotEmpty"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d1058ed6cfbf220da3e3aa55fa7448c1d8182af", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/2d1058ed6cfbf220da3e3aa55fa7448c1d8182af", "committedDate": "2020-03-22T21:31:05Z", "message": "Refactor: Remove unused variable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1333af1235b9c5fccb97c54b536958add8bcd3a7", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/1333af1235b9c5fccb97c54b536958add8bcd3a7", "committedDate": "2020-03-22T21:54:26Z", "message": "Refactor: return integrity `problems` from checks"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56a56726d6ccf838618ee1a9787305f02c78828b", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/56a56726d6ccf838618ee1a9787305f02c78828b", "committedDate": "2020-03-22T22:39:54Z", "message": "Refactor: abstract to executeIntegrityTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c30a3440ef38a5271d59d1958fa421369d7937d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/5c30a3440ef38a5271d59d1958fa421369d7937d", "committedDate": "2020-03-22T22:52:32Z", "message": "Refactor: abstract additional integrity methods"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "442128983578751f02c990e8ee238483ca3794b5", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/442128983578751f02c990e8ee238483ca3794b5", "committedDate": "2020-03-22T23:07:28Z", "message": "Refactor: abstract integrity methods which throw"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc5MDY2Mzk0", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#pullrequestreview-379066394", "createdAt": "2020-03-22T23:23:32Z", "commit": {"oid": "442128983578751f02c990e8ee238483ca3794b5"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzoyMzozMlrOF5zm-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yMlQyMzoyMzozMlrOF5zm-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NjE1ODcxMw==", "bodyText": "This allows us to perform pre, and post- actions around any check.", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#discussion_r396158713", "createdAt": "2020-03-22T23:23:32Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1606,182 +1608,44 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         File file = new File(mPath);\n         ArrayList<String> problems = new ArrayList<>();\n         long oldSize = file.length();\n-        int currentTask = 1;\n+        final int[] currentTask = {1};\n         int totalTasks = (mModels.all().size() * 4) + 21; // a few fixes are in all-models loops, the rest are one-offs\n+        Runnable notifyProgress = () -> fixIntegrityProgress(progressCallback, currentTask[0]++, totalTasks);\n+        FunctionalInterfaces.Consumer<FunctionalInterfaces.FunctionThrowable<Runnable, List<String>, JSONException>> executeIntegrityTask =\n+                (FunctionalInterfaces.FunctionThrowable<Runnable, List<String>, JSONException> function) -> {\n+                    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "442128983578751f02c990e8ee238483ca3794b5"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "191cfa0a81dae809017eab213112061663c09879", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/191cfa0a81dae809017eab213112061663c09879", "committedDate": "2020-03-23T20:30:22Z", "message": "deleteNotesWithWrongFieldCounts: Handle exception\n\nWe discuss a badly understood exception in #5852.\n\nFor now, we can catch the specific exception and attempt to understand\nit better without crashing or stopping the check."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac058b68c9cbc2c145784c376b907e9b1ef58a4d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/ac058b68c9cbc2c145784c376b907e9b1ef58a4d", "committedDate": "2020-03-23T20:34:10Z", "message": "deleteNotesWithWrongFieldCounts: Add Logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc5096ac4fc98fa19104b933138a4fa8eceae57c", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/fc5096ac4fc98fa19104b933138a4fa8eceae57c", "committedDate": "2020-03-23T20:35:58Z", "message": "NF: convert `optimize` to IntegrityTask"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb1cc96c9ccc71b3031d46c8e0f51d1fbae0919c", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/fb1cc96c9ccc71b3031d46c8e0f51d1fbae0919c", "committedDate": "2020-03-24T08:49:18Z", "message": "Refactor: Split fixDecimalIntervals"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwMjY1MTAy", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#pullrequestreview-380265102", "createdAt": "2020-03-24T12:35:38Z", "commit": {"oid": "fc5096ac4fc98fa19104b933138a4fa8eceae57c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozNTozOFrOF6uLgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxMjozNTozOFrOF6uLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzExODMzNg==", "bodyText": "I don't think this will advance us on the \"it's an OOM / fields value greater than limit\" theory unless you include the total row count and the row you are on. Idea being that if it's a non-zero row count but we are on the first row every time, there's something structural going on, but if any of them are non-zero it indicates that things are mostly working but there are problematic rows out there and it's much more likely it's the overflow similar to the templates which needed a conversion to chunk loading", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#discussion_r397118336", "createdAt": "2020-03-24T12:35:38Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1852,25 +1852,35 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n \n \n     private ArrayList<String> deleteNotesWithWrongFieldCounts(Runnable notifyProgress, JSONObject m) throws JSONException {\n+        Timber.d(\"deleteNotesWithWrongFieldCounts\");\n         ArrayList<String> problems = new ArrayList<>();\n         ArrayList<Long> ids;// notes with invalid field counts\n         ids = new ArrayList<>();\n         Cursor cur = null;\n         try {\n             notifyProgress.run();\n             cur = mDb.getDatabase().query(\"select id, flds from notes where mid = \" + m.getLong(\"id\"), null);\n+            Timber.d(\"cursor size: %d\", cur.getCount());\n+            int rowCount = 0;\n             while (cur.moveToNext()) {\n-                String flds = cur.getString(1);\n-                long id = cur.getLong(0);\n-                int fldsCount = 0;\n-                for (int i = 0; i < flds.length(); i++) {\n-                    if (flds.charAt(i) == 0x1f) {\n-                        fldsCount++;\n+                try {\n+                    Timber.d(\"Handling row: %d. Columns: %d\", rowCount, cur.getColumnCount());\n+                    String flds = cur.getString(1);\n+                    long id = cur.getLong(0);\n+                    int fldsCount = 0;\n+                    for (int i = 0; i < flds.length(); i++) {\n+                        if (flds.charAt(i) == 0x1f) {\n+                            fldsCount++;\n+                        }\n                     }\n+                    if (fldsCount + 1 != m.getJSONArray(\"flds\").length()) {\n+                        ids.add(id);\n+                    }\n+                } catch (IllegalStateException ex) {\n+                    // DEFECT: Theory that is this an OOM is discussed in #5852\n+                    AnkiDroidApp.sendExceptionReport(ex, \"deleteNotesWithWrongFieldCounts\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc5096ac4fc98fa19104b933138a4fa8eceae57c"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09236bfb3c439b9460c2a53014ff0a7a5c4b8252", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/09236bfb3c439b9460c2a53014ff0a7a5c4b8252", "committedDate": "2020-03-24T13:26:27Z", "message": "deleteNotesWithWrongFieldCount: Debugging\n\nAdded additional exception details"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "414054e7a5783eba561b5946bbf39bcd040abb94", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/414054e7a5783eba561b5946bbf39bcd040abb94", "committedDate": "2020-03-24T13:27:05Z", "message": "fixIntegrity: report any exceptions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3247b5b869f884ec2b35ddbccccd6c54c91b489d", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/3247b5b869f884ec2b35ddbccccd6c54c91b489d", "committedDate": "2020-03-24T13:52:13Z", "message": "ensureModelsAreNotEmpty: add recovery"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0f4892de856014a789f431cbc33e5d9c6a7313b", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/f0f4892de856014a789f431cbc33e5d9c6a7313b", "committedDate": "2020-03-24T14:03:23Z", "message": "fixIntegrity: removed main transaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c12a9e6078f7635ad772e7bfb7d52b90924bb16e", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c12a9e6078f7635ad772e7bfb7d52b90924bb16e", "committedDate": "2020-03-24T14:09:32Z", "message": "fixIntegrity: removed early return"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c85bcef8c6d99d167423f4938047c01181d68fcd", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c85bcef8c6d99d167423f4938047c01181d68fcd", "committedDate": "2020-03-24T14:21:57Z", "message": "fix call to optimize\n\nCan't be called inside a transaction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c57b2382e57af6dc66f5d5a4a9354895867cadfc", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/c57b2382e57af6dc66f5d5a4a9354895867cadfc", "committedDate": "2020-03-24T14:27:10Z", "message": "fixIntegrity: Run each check in transaction\n\nThis fixes #5852 - Previously a crash in fixIntegrity would crash, or\nor stop the process. Now, we perform as many idempotent tasks as we can."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "64277060754c4aff0e4d78bc3512d18345c2b90f", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/64277060754c4aff0e4d78bc3512d18345c2b90f", "committedDate": "2020-03-24T15:03:27Z", "message": "deleteNotesWithWrongFieldCounts improve logging"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21ed675a78eb287a79218de5ac3b0eb80570c56e", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/21ed675a78eb287a79218de5ac3b0eb80570c56e", "committedDate": "2020-03-24T15:10:58Z", "message": "fixIntegrity: debug logging"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTA4OTA3", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#pullrequestreview-380508907", "createdAt": "2020-03-24T16:53:43Z", "commit": {"oid": "21ed675a78eb287a79218de5ac3b0eb80570c56e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1Mzo0M1rOF654Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNjo1Mzo0M1rOF654Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxMDAyMw==", "bodyText": "this one and ensureModelsAreNotEmpty stood out to me because they did not actually use the callback and did not seem to advance progress at all - is that correct? slightly larger question - is progress advancing correctly and terminating on a complete ratio still? (that was manually balanced before and I got it wrong the first couple times, myself", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#discussion_r397310023", "createdAt": "2020-03-24T16:53:43Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1606,196 +1609,71 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         File file = new File(mPath);\n         ArrayList<String> problems = new ArrayList<>();\n         long oldSize = file.length();\n-        int currentTask = 1;\n+        final int[] currentTask = {1};\n         int totalTasks = (mModels.all().size() * 4) + 21; // a few fixes are in all-models loops, the rest are one-offs\n-        try {\n-            mDb.getDatabase().beginTransaction();\n-            try {\n-                save();\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (!\"ok\".equals(mDb.queryString(\"PRAGMA integrity_check\"))) {\n-                    return -1;\n-                }\n-                // note types with a missing model\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ArrayList<Long> ids = mDb.queryColumn(Long.class,\n-                        \"SELECT id FROM notes WHERE mid NOT IN \" + Utils.ids2str(mModels.ids()), 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                \tproblems.add(\"Deleted \" + ids.size() + \" note(s) with missing note type.\");\n-\t                _remNotes(Utils.arrayList2array(ids));\n-                }\n-                // for each model\n-                for (JSONObject m : mModels.all()) {\n-                    // cards with invalid ordinal\n-                    fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                    if (m.getInt(\"type\") == Consts.MODEL_STD) {\n-                        ArrayList<Integer> ords = new ArrayList<>();\n-                        JSONArray tmpls = m.getJSONArray(\"tmpls\");\n-                        for (int t = 0; t < tmpls.length(); t++) {\n-                            ords.add(tmpls.getJSONObject(t).getInt(\"ord\"));\n-                        }\n-                        ids = mDb.queryColumn(Long.class,\n-                                \"SELECT id FROM cards WHERE ord NOT IN \" + Utils.ids2str(ords) + \" AND nid IN ( \" +\n-                                \"SELECT id FROM notes WHERE mid = \" + m.getLong(\"id\") + \")\", 0);\n-                        if (ids.size() > 0) {\n-                            problems.add(\"Deleted \" + ids.size() + \" card(s) with missing template.\");\n-                            remCards(Utils.arrayList2array(ids));\n-                        }\n-                    }\n-                    // notes with invalid field counts\n-                    ids = new ArrayList<>();\n-                    Cursor cur = null;\n+        Runnable notifyProgress = () -> fixIntegrityProgress(progressCallback, currentTask[0]++, totalTasks);\n+        FunctionalInterfaces.Consumer<FunctionalInterfaces.FunctionThrowable<Runnable, List<String>, JSONException>> executeIntegrityTask =\n+                (FunctionalInterfaces.FunctionThrowable<Runnable, List<String>, JSONException> function) -> {\n                     try {\n-                        fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                        cur = mDb.getDatabase().query(\"select id, flds from notes where mid = \" + m.getLong(\"id\"), null);\n-                        while (cur.moveToNext()) {\n-                            String flds = cur.getString(1);\n-                            long id = cur.getLong(0);\n-                            int fldsCount = 0;\n-                            for (int i = 0; i < flds.length(); i++) {\n-                                if (flds.charAt(i) == 0x1f) {\n-                                    fldsCount++;\n-                                }\n-                            }\n-                            if (fldsCount + 1 != m.getJSONArray(\"flds\").length()) {\n-                                ids.add(id);\n-                            }\n-                        }\n-                        fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                        if (ids.size() > 0) {\n-                            problems.add(\"Deleted \" + ids.size() + \" note(s) with wrong field count.\");\n-                            _remNotes(Utils.arrayList2array(ids));\n-                        }\n+                        mDb.getDatabase().beginTransaction();\n+                        problems.addAll(function.apply(notifyProgress));\n+                        mDb.getDatabase().setTransactionSuccessful();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Failed to execute integrity check\");\n+                        AnkiDroidApp.sendExceptionReport(e, \"fixIntegrity\");\n                     } finally {\n-                        if (cur != null && !cur.isClosed()) {\n-                            cur.close();\n-                        }\n-                    }\n-                }\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                // delete any notes with missing cards\n-                ids = mDb.queryColumn(Long.class,\n-                        \"SELECT id FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                \tproblems.add(\"Deleted \" + ids.size() + \" note(s) with missing no cards.\");\n-\t                _remNotes(Utils.arrayList2array(ids));\n-                }\n-                // cards with missing notes\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class,\n-                        \"SELECT id FROM cards WHERE nid NOT IN (SELECT id FROM notes)\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                    problems.add(\"Deleted \" + ids.size() + \" card(s) with missing note.\");\n-                    remCards(Utils.arrayList2array(ids));\n-                }\n-                // cards with odue set when it shouldn't be\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class,\n-                        \"select id from cards where odue > 0 and (type=1 or queue=2) and not odid\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                    problems.add(\"Fixed \" + ids.size() + \" card(s) with invalid properties.\");\n-                    mDb.execute(\"update cards set odue=0 where id in \" + Utils.ids2str(ids));\n-                }\n-                // cards with odid set when not in a dyn deck\n-                ArrayList<Long> dids = new ArrayList<>();\n-                for (long id : mDecks.allIds()) {\n-                    if (!mDecks.isDyn(id)) {\n-                        dids.add(id);\n-                    }\n-                }\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class,\n-                        \"select id from cards where odid > 0 and did in \" + Utils.ids2str(dids), 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                    problems.add(\"Fixed \" + ids.size() + \" card(s) with invalid properties.\");\n-                    mDb.execute(\"update cards set odid=0, odue=0 where id in \" + Utils.ids2str(ids));\n-                }\n-                {\n-                    //#5708 - a dynamic deck should not have \"Deck Options\"\n-                    fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                    int fixCount = 0;\n-                    for (long id : mDecks.allDynamicDeckIds()) {\n                         try {\n-                            if (mDecks.hasDeckOptions(id)) {\n-                                mDecks.removeDeckOptions(id);\n-                                fixCount++;\n-                            }\n-                        } catch (NoSuchDeckException e) {\n-                            Timber.e(\"Unable to find dynamic deck %d\", id);\n+                            mDb.getDatabase().endTransaction();\n+                        } catch (Exception e) {\n+                            Timber.e(e, \"Failed to end integrity check transaction\");\n+                            AnkiDroidApp.sendExceptionReport(e, \"fixIntegrity - endTransaction\");\n                         }\n                     }\n-                    if (fixCount > 0) {\n-                        mDecks.save();\n-                        problems.add(String.format(Locale.US, \"%d dynamic deck(s) had deck options.\", fixCount));\n-                    }\n-                }\n-                // tags\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                mTags.registerNotes();\n-                // field cache\n-                for (JSONObject m : mModels.all()) {\n-                    fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                    updateFieldCache(Utils.arrayList2array(mModels.nids(m)));\n-                }\n-                // new cards can't have a due position > 32 bits\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                mDb.execute(\"UPDATE cards SET due = 1000000, mod = \" + Utils.intTime() + \", usn = \" + usn()\n-                        + \" WHERE due > 1000000 AND type = 0\");\n-                // new card position\n-                mConf.put(\"nextPos\", mDb.queryScalar(\"SELECT max(due) + 1 FROM cards WHERE type = 0\"));\n-                // reviews should have a reasonable due #\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class, \"SELECT id FROM cards WHERE queue = 2 AND due > 100000\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() > 0) {\n-                \tproblems.add(\"Reviews had incorrect due date.\");\n-                    mDb.execute(\"UPDATE cards SET due = \" + mSched.getToday() + \", ivl = 1, mod = \" +  Utils.intTime() +\n-                            \", usn = \" + usn() + \" WHERE id IN \" + Utils.ids2str(Utils.arrayList2array(ids)));\n-                }\n-                // v2 sched had a bug that could create decimal intervals\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                SupportSQLiteStatement s = mDb.getDatabase().compileStatement(\n-                        \"update cards set ivl=round(ivl),due=round(due) where ivl!=round(ivl) or due!=round(due)\");\n-                int rowCount = s.executeUpdateDelete();\n-                if (rowCount > 0) {\n-                    problems.add(\"Fixed \" + rowCount + \" cards with v2 scheduler bug.\");\n-                }\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                s = mDb.getDatabase().compileStatement(\n-                        \"update revlog set ivl=round(ivl),lastIvl=round(lastIvl) where ivl!=round(ivl) or lastIvl!=round(lastIvl)\");\n-                rowCount = s.executeUpdateDelete();\n-                if (rowCount > 0) {\n-                    problems.add(\"Fixed \" + rowCount + \" review history entries with v2 scheduler bug.\");\n-                }\n-                mDb.getDatabase().setTransactionSuccessful();\n-                // DB must have indices. Older versions of AnkiDroid didn't create them for new collections.\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                int ixs = mDb.queryScalar(\"select count(name) from sqlite_master where type = 'index'\");\n-                if (ixs < 7) {\n-                    problems.add(\"Indices were missing.\");\n-                    Storage.addIndices(mDb);\n-                }\n-            } catch (JSONException e) {\n-                throw new RuntimeException(e);\n-            } finally {\n-                mDb.getDatabase().endTransaction();\n+                };\n+        try {\n+            mDb.getDatabase().beginTransaction();\n+            save();\n+            notifyProgress.run();\n+            if (!\"ok\".equals(mDb.queryString(\"PRAGMA integrity_check\"))) {\n+                return -1;\n             }\n+            mDb.getDatabase().setTransactionSuccessful();\n         } catch (RuntimeException e) {\n             Timber.e(e, \"doInBackgroundCheckDatabase - RuntimeException on marking card\");\n             AnkiDroidApp.sendExceptionReport(e, \"doInBackgroundCheckDatabase\");\n             return -1;\n+        } finally {\n+            mDb.getDatabase().endTransaction();\n         }\n-        // models\n-        if (mModels.ensureNotEmpty()) {\n-            problems.add(\"Added missing note type.\");\n+\n+        executeIntegrityTask.consume(this::deleteNotesWithMissingModel);\n+        // for each model\n+        for (JSONObject m : mModels.all()) {\n+            executeIntegrityTask.consume((callback) -> deleteCardsWithInvalidModelOrdinals(callback, m));\n+            executeIntegrityTask.consume((callback) -> deleteNotesWithWrongFieldCounts(callback, m));\n+        }\n+        executeIntegrityTask.consume(this::deleteNotesWithMissingCards);\n+        executeIntegrityTask.consume(this::deleteCardsWithMissingNotes);\n+        executeIntegrityTask.consume(this::removeOriginalDuePropertyWhereInvalid);\n+        executeIntegrityTask.consume(this::removeDynamicPropertyFromNonDynamicDecks);\n+        executeIntegrityTask.consume(this::removeDeckOptionsFromDynamicDecks);\n+        executeIntegrityTask.consume(this::rebuildTags);\n+        executeIntegrityTask.consume(this::updateFieldCache);\n+        executeIntegrityTask.consume(this::fixNewCardDuePositionOverflow);\n+        executeIntegrityTask.consume((callback) -> resetNewCardInsertionPosition());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ed675a78eb287a79218de5ac3b0eb80570c56e"}, "originalPosition": 254}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE4NzA0", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#pullrequestreview-380518704", "createdAt": "2020-03-24T17:04:22Z", "commit": {"oid": "21ed675a78eb287a79218de5ac3b0eb80570c56e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNDoyMlrOF66VxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQxNzowNDoyMlrOF66VxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzMxNzU3Mw==", "bodyText": "Just saw that nowadays we can probably use this instead https://developer.android.com/reference/androidx/sqlite/db/SupportSQLiteDatabase#isDatabaseIntegrityOk() - not sure it existed before?", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#discussion_r397317573", "createdAt": "2020-03-24T17:04:22Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/libanki/Collection.java", "diffHunk": "@@ -1606,196 +1609,71 @@ public long fixIntegrity(DeckTask.ProgressCallback progressCallback) {\n         File file = new File(mPath);\n         ArrayList<String> problems = new ArrayList<>();\n         long oldSize = file.length();\n-        int currentTask = 1;\n+        final int[] currentTask = {1};\n         int totalTasks = (mModels.all().size() * 4) + 21; // a few fixes are in all-models loops, the rest are one-offs\n-        try {\n-            mDb.getDatabase().beginTransaction();\n-            try {\n-                save();\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (!\"ok\".equals(mDb.queryString(\"PRAGMA integrity_check\"))) {\n-                    return -1;\n-                }\n-                // note types with a missing model\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ArrayList<Long> ids = mDb.queryColumn(Long.class,\n-                        \"SELECT id FROM notes WHERE mid NOT IN \" + Utils.ids2str(mModels.ids()), 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                \tproblems.add(\"Deleted \" + ids.size() + \" note(s) with missing note type.\");\n-\t                _remNotes(Utils.arrayList2array(ids));\n-                }\n-                // for each model\n-                for (JSONObject m : mModels.all()) {\n-                    // cards with invalid ordinal\n-                    fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                    if (m.getInt(\"type\") == Consts.MODEL_STD) {\n-                        ArrayList<Integer> ords = new ArrayList<>();\n-                        JSONArray tmpls = m.getJSONArray(\"tmpls\");\n-                        for (int t = 0; t < tmpls.length(); t++) {\n-                            ords.add(tmpls.getJSONObject(t).getInt(\"ord\"));\n-                        }\n-                        ids = mDb.queryColumn(Long.class,\n-                                \"SELECT id FROM cards WHERE ord NOT IN \" + Utils.ids2str(ords) + \" AND nid IN ( \" +\n-                                \"SELECT id FROM notes WHERE mid = \" + m.getLong(\"id\") + \")\", 0);\n-                        if (ids.size() > 0) {\n-                            problems.add(\"Deleted \" + ids.size() + \" card(s) with missing template.\");\n-                            remCards(Utils.arrayList2array(ids));\n-                        }\n-                    }\n-                    // notes with invalid field counts\n-                    ids = new ArrayList<>();\n-                    Cursor cur = null;\n+        Runnable notifyProgress = () -> fixIntegrityProgress(progressCallback, currentTask[0]++, totalTasks);\n+        FunctionalInterfaces.Consumer<FunctionalInterfaces.FunctionThrowable<Runnable, List<String>, JSONException>> executeIntegrityTask =\n+                (FunctionalInterfaces.FunctionThrowable<Runnable, List<String>, JSONException> function) -> {\n                     try {\n-                        fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                        cur = mDb.getDatabase().query(\"select id, flds from notes where mid = \" + m.getLong(\"id\"), null);\n-                        while (cur.moveToNext()) {\n-                            String flds = cur.getString(1);\n-                            long id = cur.getLong(0);\n-                            int fldsCount = 0;\n-                            for (int i = 0; i < flds.length(); i++) {\n-                                if (flds.charAt(i) == 0x1f) {\n-                                    fldsCount++;\n-                                }\n-                            }\n-                            if (fldsCount + 1 != m.getJSONArray(\"flds\").length()) {\n-                                ids.add(id);\n-                            }\n-                        }\n-                        fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                        if (ids.size() > 0) {\n-                            problems.add(\"Deleted \" + ids.size() + \" note(s) with wrong field count.\");\n-                            _remNotes(Utils.arrayList2array(ids));\n-                        }\n+                        mDb.getDatabase().beginTransaction();\n+                        problems.addAll(function.apply(notifyProgress));\n+                        mDb.getDatabase().setTransactionSuccessful();\n+                    } catch (Exception e) {\n+                        Timber.e(e, \"Failed to execute integrity check\");\n+                        AnkiDroidApp.sendExceptionReport(e, \"fixIntegrity\");\n                     } finally {\n-                        if (cur != null && !cur.isClosed()) {\n-                            cur.close();\n-                        }\n-                    }\n-                }\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                // delete any notes with missing cards\n-                ids = mDb.queryColumn(Long.class,\n-                        \"SELECT id FROM notes WHERE id NOT IN (SELECT DISTINCT nid FROM cards)\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                \tproblems.add(\"Deleted \" + ids.size() + \" note(s) with missing no cards.\");\n-\t                _remNotes(Utils.arrayList2array(ids));\n-                }\n-                // cards with missing notes\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class,\n-                        \"SELECT id FROM cards WHERE nid NOT IN (SELECT id FROM notes)\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                    problems.add(\"Deleted \" + ids.size() + \" card(s) with missing note.\");\n-                    remCards(Utils.arrayList2array(ids));\n-                }\n-                // cards with odue set when it shouldn't be\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class,\n-                        \"select id from cards where odue > 0 and (type=1 or queue=2) and not odid\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                    problems.add(\"Fixed \" + ids.size() + \" card(s) with invalid properties.\");\n-                    mDb.execute(\"update cards set odue=0 where id in \" + Utils.ids2str(ids));\n-                }\n-                // cards with odid set when not in a dyn deck\n-                ArrayList<Long> dids = new ArrayList<>();\n-                for (long id : mDecks.allIds()) {\n-                    if (!mDecks.isDyn(id)) {\n-                        dids.add(id);\n-                    }\n-                }\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class,\n-                        \"select id from cards where odid > 0 and did in \" + Utils.ids2str(dids), 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() != 0) {\n-                    problems.add(\"Fixed \" + ids.size() + \" card(s) with invalid properties.\");\n-                    mDb.execute(\"update cards set odid=0, odue=0 where id in \" + Utils.ids2str(ids));\n-                }\n-                {\n-                    //#5708 - a dynamic deck should not have \"Deck Options\"\n-                    fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                    int fixCount = 0;\n-                    for (long id : mDecks.allDynamicDeckIds()) {\n                         try {\n-                            if (mDecks.hasDeckOptions(id)) {\n-                                mDecks.removeDeckOptions(id);\n-                                fixCount++;\n-                            }\n-                        } catch (NoSuchDeckException e) {\n-                            Timber.e(\"Unable to find dynamic deck %d\", id);\n+                            mDb.getDatabase().endTransaction();\n+                        } catch (Exception e) {\n+                            Timber.e(e, \"Failed to end integrity check transaction\");\n+                            AnkiDroidApp.sendExceptionReport(e, \"fixIntegrity - endTransaction\");\n                         }\n                     }\n-                    if (fixCount > 0) {\n-                        mDecks.save();\n-                        problems.add(String.format(Locale.US, \"%d dynamic deck(s) had deck options.\", fixCount));\n-                    }\n-                }\n-                // tags\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                mTags.registerNotes();\n-                // field cache\n-                for (JSONObject m : mModels.all()) {\n-                    fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                    updateFieldCache(Utils.arrayList2array(mModels.nids(m)));\n-                }\n-                // new cards can't have a due position > 32 bits\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                mDb.execute(\"UPDATE cards SET due = 1000000, mod = \" + Utils.intTime() + \", usn = \" + usn()\n-                        + \" WHERE due > 1000000 AND type = 0\");\n-                // new card position\n-                mConf.put(\"nextPos\", mDb.queryScalar(\"SELECT max(due) + 1 FROM cards WHERE type = 0\"));\n-                // reviews should have a reasonable due #\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                ids = mDb.queryColumn(Long.class, \"SELECT id FROM cards WHERE queue = 2 AND due > 100000\", 0);\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                if (ids.size() > 0) {\n-                \tproblems.add(\"Reviews had incorrect due date.\");\n-                    mDb.execute(\"UPDATE cards SET due = \" + mSched.getToday() + \", ivl = 1, mod = \" +  Utils.intTime() +\n-                            \", usn = \" + usn() + \" WHERE id IN \" + Utils.ids2str(Utils.arrayList2array(ids)));\n-                }\n-                // v2 sched had a bug that could create decimal intervals\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                SupportSQLiteStatement s = mDb.getDatabase().compileStatement(\n-                        \"update cards set ivl=round(ivl),due=round(due) where ivl!=round(ivl) or due!=round(due)\");\n-                int rowCount = s.executeUpdateDelete();\n-                if (rowCount > 0) {\n-                    problems.add(\"Fixed \" + rowCount + \" cards with v2 scheduler bug.\");\n-                }\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                s = mDb.getDatabase().compileStatement(\n-                        \"update revlog set ivl=round(ivl),lastIvl=round(lastIvl) where ivl!=round(ivl) or lastIvl!=round(lastIvl)\");\n-                rowCount = s.executeUpdateDelete();\n-                if (rowCount > 0) {\n-                    problems.add(\"Fixed \" + rowCount + \" review history entries with v2 scheduler bug.\");\n-                }\n-                mDb.getDatabase().setTransactionSuccessful();\n-                // DB must have indices. Older versions of AnkiDroid didn't create them for new collections.\n-                fixIntegrityProgress(progressCallback, currentTask++, totalTasks);\n-                int ixs = mDb.queryScalar(\"select count(name) from sqlite_master where type = 'index'\");\n-                if (ixs < 7) {\n-                    problems.add(\"Indices were missing.\");\n-                    Storage.addIndices(mDb);\n-                }\n-            } catch (JSONException e) {\n-                throw new RuntimeException(e);\n-            } finally {\n-                mDb.getDatabase().endTransaction();\n+                };\n+        try {\n+            mDb.getDatabase().beginTransaction();\n+            save();\n+            notifyProgress.run();\n+            if (!\"ok\".equals(mDb.queryString(\"PRAGMA integrity_check\"))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "21ed675a78eb287a79218de5ac3b0eb80570c56e"}, "originalPosition": 225}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNTE5OTM3", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#pullrequestreview-380519937", "createdAt": "2020-03-24T17:05:45Z", "commit": {"oid": "21ed675a78eb287a79218de5ac3b0eb80570c56e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "18a41b8053dc3ffe6ab38c2aaa05810ed2d7c399", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/18a41b8053dc3ffe6ab38c2aaa05810ed2d7c399", "committedDate": "2020-03-24T19:04:33Z", "message": "NF: Convert to isDatabaseIntegrityOk"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7b6256aad9ae00d61417d332176602a049d09d50", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/7b6256aad9ae00d61417d332176602a049d09d50", "committedDate": "2020-03-24T19:05:31Z", "message": "fixIntegrity: marked notifyProgress defect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48f3e728edb0e2753fe0566f582730dd90b5d523", "author": {"user": {"login": "david-allison-1", "name": "David Allison"}}, "url": "https://github.com/ankidroid/Anki-Android/commit/48f3e728edb0e2753fe0566f582730dd90b5d523", "committedDate": "2020-03-24T19:07:09Z", "message": "fixIntegrity: notified more progress steps"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgwNjI1MzY2", "url": "https://github.com/ankidroid/Anki-Android/pull/5854#pullrequestreview-380625366", "createdAt": "2020-03-24T19:19:47Z", "commit": {"oid": "48f3e728edb0e2753fe0566f582730dd90b5d523"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3542, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}