{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwNDQxNDQx", "number": 6682, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowMzozOVrOEPSRcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowNDowMVrOEPSR7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDYzNDczOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/ProductionCrashReportingTreeTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowMzozOVrOGy6y-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDozNTowOFrOGy7zXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NTMwNg==", "bodyText": "Optional: AnkiAssert.doesNotThrow", "url": "https://github.com/ankidroid/Anki-Android/pull/6682#discussion_r456045306", "createdAt": "2020-07-16T20:03:39Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/ProductionCrashReportingTreeTest.java", "diffHunk": "@@ -55,20 +54,30 @@ public void setUp() {\n     @Test\n     public void testProductionDebugVerboseIgnored() {\n \n-        // set up the platform log so that if anyone calls these 2 methods at all, it throws\n-        Mockito.when(Log.v(anyString(), anyString(), any()))\n-                .thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\n-        Mockito.when(Log.d(anyString(), anyString(), any()))\n-                .thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\n-\n-        // now call our wrapper - if it hits the platform logger it will throw\n-        try {\n-            Timber.v(\"verbose\");\n-            Timber.d(\"debug\");\n-        } catch (Exception e) {\n-            Assert.fail(\"we were unable to log without exception?\");\n+        try (MockedStatic<Log> ignored = mockStatic(Log.class)) {\n+            // set up the platform log so that if anyone calls these 2 methods at all, it throws\n+            when(Log.v(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\n+            when(Log.d(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\n+            when(Log.i(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Info logging should throw!\"));\n+\n+            // now call our wrapper - if it hits the platform logger it will throw\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb742f2cc32143aa2c5972d97e2d22f1b9a828a1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA2MTc5MQ==", "bodyText": "Yes! when I saw the codacy report saying I need to assert I vaguely remembered this facility but not enough to implement. I'd like it to become regular practice so I altered to use it in both cases", "url": "https://github.com/ankidroid/Anki-Android/pull/6682#discussion_r456061791", "createdAt": "2020-07-16T20:35:08Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/ProductionCrashReportingTreeTest.java", "diffHunk": "@@ -55,20 +54,30 @@ public void setUp() {\n     @Test\n     public void testProductionDebugVerboseIgnored() {\n \n-        // set up the platform log so that if anyone calls these 2 methods at all, it throws\n-        Mockito.when(Log.v(anyString(), anyString(), any()))\n-                .thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\n-        Mockito.when(Log.d(anyString(), anyString(), any()))\n-                .thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\n-\n-        // now call our wrapper - if it hits the platform logger it will throw\n-        try {\n-            Timber.v(\"verbose\");\n-            Timber.d(\"debug\");\n-        } catch (Exception e) {\n-            Assert.fail(\"we were unable to log without exception?\");\n+        try (MockedStatic<Log> ignored = mockStatic(Log.class)) {\n+            // set up the platform log so that if anyone calls these 2 methods at all, it throws\n+            when(Log.v(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\n+            when(Log.d(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\n+            when(Log.i(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Info logging should throw!\"));\n+\n+            // now call our wrapper - if it hits the platform logger it will throw\n+            try {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NTMwNg=="}, "originalCommit": {"oid": "bb742f2cc32143aa2c5972d97e2d22f1b9a828a1"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDYzNTk2OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/test/java/com/ichi2/anki/ProductionCrashReportingTreeTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowNDowMVrOGy6zvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDowNDowMVrOGy6zvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA0NTUwMg==", "bodyText": "Optional: Consider moving to AnkiAssert", "url": "https://github.com/ankidroid/Anki-Android/pull/6682#discussion_r456045502", "createdAt": "2020-07-16T20:04:01Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/test/java/com/ichi2/anki/ProductionCrashReportingTreeTest.java", "diffHunk": "@@ -55,20 +54,30 @@ public void setUp() {\n     @Test\n     public void testProductionDebugVerboseIgnored() {\n \n-        // set up the platform log so that if anyone calls these 2 methods at all, it throws\n-        Mockito.when(Log.v(anyString(), anyString(), any()))\n-                .thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\n-        Mockito.when(Log.d(anyString(), anyString(), any()))\n-                .thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\n-\n-        // now call our wrapper - if it hits the platform logger it will throw\n-        try {\n-            Timber.v(\"verbose\");\n-            Timber.d(\"debug\");\n-        } catch (Exception e) {\n-            Assert.fail(\"we were unable to log without exception?\");\n+        try (MockedStatic<Log> ignored = mockStatic(Log.class)) {\n+            // set up the platform log so that if anyone calls these 2 methods at all, it throws\n+            when(Log.v(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Verbose logging should have been ignored\"));\n+            when(Log.d(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Debug logging should be ignored\"));\n+            when(Log.i(anyString(), anyString(), any()))\n+                    .thenThrow(new RuntimeException(\"Info logging should throw!\"));\n+\n+            // now call our wrapper - if it hits the platform logger it will throw\n+            try {\n+                Timber.v(\"verbose\");\n+                Timber.d(\"debug\");\n+            } catch (Exception e) {\n+                Assert.fail(\"we were unable to log without exception?\");\n+            }\n+\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb742f2cc32143aa2c5972d97e2d22f1b9a828a1"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 125, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}