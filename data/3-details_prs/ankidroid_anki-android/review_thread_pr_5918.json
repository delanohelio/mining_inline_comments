{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk4MzcyODIz", "number": 5918, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDozODoyOFrODulHpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNDo1NzowOVrODzaQRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUwMTY5MjUzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/anki/reviewer/CardMarker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDozODoyOFrOGAoghQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wM1QyMDozODoyOFrOGAoghQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMzMxNjg2OQ==", "bodyText": "Name might do with work. CardIcons?", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r403316869", "createdAt": "2020-04-03T20:38:28Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/anki/reviewer/CardMarker.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.ichi2.anki.reviewer;\n+\n+import android.view.View;\n+import android.widget.ImageView;\n+\n+import com.ichi2.anki.R;\n+\n+import androidx.annotation.DrawableRes;\n+import androidx.annotation.NonNull;\n+\n+/** Handles the star and flag marker for the card viewer */\n+public class CardMarker {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67a2087765a098e92786ab0211b16275d4966e10"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNjQ4MDc3OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxMzoyMTo1OFrOGCu-BQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxNDo1MToyMFrOGCy7Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw==", "bodyText": "This is on the API grey list for Android 9 and 10 (at least) https://android.googlesource.com/platform/frameworks/base/+/pie-release/config/hiddenapi-light-greylist.txt#8509\nHasn't moved to blacklist but it's a warning for the future. Error handling during access needs to be different: https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\nAnd we should have some sort of a test that serves as a canary for this in CI as I expect it will start throwing on higher APIs at some point\nI am unsure how the support libraries are handling graylisting but I expect it may be the same\nPerhaps since the only difference in the 3 blocks are the class name they could be somehow generalized as well, since the error handling will be semi-special having it coded once only would be a plus", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405519877", "createdAt": "2020-04-08T13:21:58Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyMzg4NQ==", "bodyText": "I'll do some reading. I wasn't at all aware of this.", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405523885", "createdAt": "2020-04-08T13:27:39Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyNjIxNQ==", "bodyText": "Yeah - semi-new and only for people reflecting on internals. Might actually do with a comment on the source stack overflow post as it's a nice heads up for people, free internet points available. I only know because I have the nerdy habit of reading the entire \"we have a new API!\" notes google releases for each platform (they're quite illuminating actually?). I checked through the app before #4910 and we seemed pretty clean pending upgrades to the androidx dependencies so I just want to make sure that stays the case", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405526215", "createdAt": "2020-04-08T13:30:55Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyNzUwNg==", "bodyText": "The VM on the device will shut you down no matter how you attempt to touch off-limits APIs if they further restrict and I read correctly.", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405527506", "createdAt": "2020-04-08T13:32:48Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyODExOQ==", "bodyText": "oh - if you mean to generalize things, that's a preference suggestion only really - nothing compared to handling API limits - falls into my \"implementors choice\" bucket", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405528119", "createdAt": "2020-04-08T13:33:36Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUyODc2Mg==", "bodyText": "Error handling is all done via catch (Exception), so we're fine on this aspect", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405528762", "createdAt": "2020-04-08T13:34:26Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU0MDIwNw==", "bodyText": "Nope, the API restrictions throw Errors...they'd bubble out as of now\nI exposed the latest API (R) in CI with #5953 so a test to tickle this just in case although I think it's still fine on R. In the future S might all the sudden be 'S'urprising though, unknown", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405540207", "createdAt": "2020-04-08T13:50:29Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTU4NDczMQ==", "bodyText": "I'll call that an Unknown Unknown until today \ud83d\ude09. Haven't done Java before (sans university projects). That's a massive gotcha, thanks!", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r405584731", "createdAt": "2020-04-08T14:51:20Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.Nullable;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTUxOTg3Nw=="}, "originalCommit": {"oid": "d7d3f749fddfaa7dc9d764d934ca1fafd1b224d5"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMTgxMzIzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxNzozMjowNVrOGDifew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOFQyMTo0MzoxN1rOGHuevg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDAyNw==", "bodyText": "Yeah - I don't like this structure really either, feels convoluted and fluffy at the same time\nDefinitely not a fall through, and might somehow throw an Error here as well?\nHow is it we will potentially have all 3 of these classes actually? Isn't it the case we will only have one of these classes? I would be curious to see which one of these is actually hit on API16 and API30 emulators as a quick check on the hypothesis that really only one class is ever in play", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r406364027", "createdAt": "2020-04-09T17:32:05Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String ANDROIDX_CLASS = \"androidx.appcompat.view.menu.MenuItemImpl\";\n+\n+    protected static Method sSupportIsActionButton;\n+\n+    protected static Method sNativeIsActionButton;\n+\n+    protected static Method sAndroidXIsActionButton;\n+\n+    static {\n+        setupMethods(ActionBarOverflow::getPrivateMethodHandleSystemErrors);\n+    }\n+\n+    @VisibleForTesting\n+    static void setupMethods(PrivateMethodAccessor accessor) {\n+        //Note: Multiple of these can succeed.\n+        sNativeIsActionButton = accessor.getPrivateMethod(NATIVE_CLASS, \"isActionButton\");\n+        sSupportIsActionButton = accessor.getPrivateMethod(SUPPORT_CLASS, \"isActionButton\");\n+        sAndroidXIsActionButton = accessor.getPrivateMethod(ANDROIDX_CLASS, \"isActionButton\");\n+    }\n+\n+\n+    @CheckResult\n+    private static Method getPrivateMethodHandleSystemErrors(String className, String methodName) {\n+        Method action = null;\n+        try {\n+            //We know this won't always work, we'll log if this isn't the case.\n+            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(className);\n+            action = MenuItemImpl.getDeclaredMethod(methodName);\n+            action.setAccessible(true);\n+            Timber.d(\"Setup ActionBarOverflow: %s\", className);\n+        } catch (Exception | NoSuchFieldError | NoSuchMethodError ignoreAndLogEx) {\n+            //See: #5806. MenuItemImpl;->isActionButton is on the light greylist\n+            //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\n+            Timber.d(ignoreAndLogEx, \"Failed to handle: %s\", className);\n+        }\n+\n+        return action;\n+    }\n+\n+    /**\n+     * Check if an item is showing (not in the overflow menu).\n+     *\n+     * @param item\n+     *            the MenuItem.\n+     * @return {@code true} if the MenuItem is visible on the ActionBar. {@code false} if not. {@code null if unknown}\n+     */\n+    public static @Nullable Boolean isActionButton(MenuItem item) {\n+        //I don't think falling through is the right action here.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be386e0a62d44242589074a5bc5ef4fc4b93c3a1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDcyOTkxNg==", "bodyText": "Two of the objects above are valid on my Android. I want to say that the support class is legacy and won't ever be loaded since we've moved to AndroidX.\nI expect the other case would be hit if we don't extend AppCompatActivity.\nBut there's no inheritance between either of the MenuImpl classes that I can see (only a shared interface). Both should be impossible.\nHow would you propose a test for this? I'm tempted to go for:\n\nGenerate a new test-only activity\n\nExtend AnkiActivity\nExtend Activity\n\n\nExpand the menu, pass it in, and see if it returns non-null.\n\nDoes that work for you?\n\nI'll also want to change the code to use reflection to check for subclasses, rather than solely working off the type name. We could introduce a bug if we pass in a subclass of MenuItemImpl right now, which isn't typical, but is possible in the future.", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410729916", "createdAt": "2020-04-18T17:59:49Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String ANDROIDX_CLASS = \"androidx.appcompat.view.menu.MenuItemImpl\";\n+\n+    protected static Method sSupportIsActionButton;\n+\n+    protected static Method sNativeIsActionButton;\n+\n+    protected static Method sAndroidXIsActionButton;\n+\n+    static {\n+        setupMethods(ActionBarOverflow::getPrivateMethodHandleSystemErrors);\n+    }\n+\n+    @VisibleForTesting\n+    static void setupMethods(PrivateMethodAccessor accessor) {\n+        //Note: Multiple of these can succeed.\n+        sNativeIsActionButton = accessor.getPrivateMethod(NATIVE_CLASS, \"isActionButton\");\n+        sSupportIsActionButton = accessor.getPrivateMethod(SUPPORT_CLASS, \"isActionButton\");\n+        sAndroidXIsActionButton = accessor.getPrivateMethod(ANDROIDX_CLASS, \"isActionButton\");\n+    }\n+\n+\n+    @CheckResult\n+    private static Method getPrivateMethodHandleSystemErrors(String className, String methodName) {\n+        Method action = null;\n+        try {\n+            //We know this won't always work, we'll log if this isn't the case.\n+            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(className);\n+            action = MenuItemImpl.getDeclaredMethod(methodName);\n+            action.setAccessible(true);\n+            Timber.d(\"Setup ActionBarOverflow: %s\", className);\n+        } catch (Exception | NoSuchFieldError | NoSuchMethodError ignoreAndLogEx) {\n+            //See: #5806. MenuItemImpl;->isActionButton is on the light greylist\n+            //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\n+            Timber.d(ignoreAndLogEx, \"Failed to handle: %s\", className);\n+        }\n+\n+        return action;\n+    }\n+\n+    /**\n+     * Check if an item is showing (not in the overflow menu).\n+     *\n+     * @param item\n+     *            the MenuItem.\n+     * @return {@code true} if the MenuItem is visible on the ActionBar. {@code false} if not. {@code null if unknown}\n+     */\n+    public static @Nullable Boolean isActionButton(MenuItem item) {\n+        //I don't think falling through is the right action here.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDAyNw=="}, "originalCommit": {"oid": "be386e0a62d44242589074a5bc5ef4fc4b93c3a1"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDc1NDc1MA==", "bodyText": "That sounds like a plan!", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410754750", "createdAt": "2020-04-18T21:43:17Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,127 @@\n+package com.ichi2.ui;\n+\n+import android.annotation.SuppressLint;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {\n+    //Idea from: https://stackoverflow.com/a/29208483\n+\n+    protected static final String SUPPORT_CLASS = \"android.support.v7.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String NATIVE_CLASS = \"com.android.internal.view.menu.MenuItemImpl\";\n+\n+    protected static final String ANDROIDX_CLASS = \"androidx.appcompat.view.menu.MenuItemImpl\";\n+\n+    protected static Method sSupportIsActionButton;\n+\n+    protected static Method sNativeIsActionButton;\n+\n+    protected static Method sAndroidXIsActionButton;\n+\n+    static {\n+        setupMethods(ActionBarOverflow::getPrivateMethodHandleSystemErrors);\n+    }\n+\n+    @VisibleForTesting\n+    static void setupMethods(PrivateMethodAccessor accessor) {\n+        //Note: Multiple of these can succeed.\n+        sNativeIsActionButton = accessor.getPrivateMethod(NATIVE_CLASS, \"isActionButton\");\n+        sSupportIsActionButton = accessor.getPrivateMethod(SUPPORT_CLASS, \"isActionButton\");\n+        sAndroidXIsActionButton = accessor.getPrivateMethod(ANDROIDX_CLASS, \"isActionButton\");\n+    }\n+\n+\n+    @CheckResult\n+    private static Method getPrivateMethodHandleSystemErrors(String className, String methodName) {\n+        Method action = null;\n+        try {\n+            //We know this won't always work, we'll log if this isn't the case.\n+            @SuppressLint(\"PrivateApi\") Class<?> MenuItemImpl = Class.forName(className);\n+            action = MenuItemImpl.getDeclaredMethod(methodName);\n+            action.setAccessible(true);\n+            Timber.d(\"Setup ActionBarOverflow: %s\", className);\n+        } catch (Exception | NoSuchFieldError | NoSuchMethodError ignoreAndLogEx) {\n+            //See: #5806. MenuItemImpl;->isActionButton is on the light greylist\n+            //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces#results-of-keeping-non-sdk\n+            Timber.d(ignoreAndLogEx, \"Failed to handle: %s\", className);\n+        }\n+\n+        return action;\n+    }\n+\n+    /**\n+     * Check if an item is showing (not in the overflow menu).\n+     *\n+     * @param item\n+     *            the MenuItem.\n+     * @return {@code true} if the MenuItem is visible on the ActionBar. {@code false} if not. {@code null if unknown}\n+     */\n+    public static @Nullable Boolean isActionButton(MenuItem item) {\n+        //I don't think falling through is the right action here.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjM2NDAyNw=="}, "originalCommit": {"oid": "be386e0a62d44242589074a5bc5ef4fc4b93c3a1"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjMyNjgzOnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNDo0NzoxOFrOGH4pjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNDo1NTowM1rOGH4vDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMTM1OA==", "bodyText": "So the way to get rid of the codacy issue is to put this in a try/catch, and instead of having comments that take you out of the code, you put those in the fail message inside the catch", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410921358", "createdAt": "2020-04-19T14:47:18Z", "author": {"login": "mikehardy"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.ichi2.ui;\n+\n+import android.content.Context;\n+import android.view.MenuItem;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import androidx.appcompat.view.menu.MenuBuilder;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(androidx.test.ext.junit.runners.AndroidJUnit4.class)\n+public class ActionBarOverflowTest {\n+\n+    @Test\n+    public void hasValidActionBarReflectionMethod() {\n+        assertThat(\"Ensures that there is a valid way to obtain a listener\",\n+                ActionBarOverflow.hasUsableMethod(), is(true));\n+    }\n+\n+    @Test\n+    public void errorsAreBeingThrownCanary() {\n+        //See discussion on #5806\n+        //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces\n+        //Once this throws, errors are being thrown on a currently graylisted method\n+        ActionBarOverflow.setupMethods(ActionBarOverflow::getPrivateMethodOnlyHandleExceptions);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62bcc85d2e1932987225c0d0f2eb9b0eb776270b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMjE3Mg==", "bodyText": "Codacy doesn't support my AnkiAssert class which would allow that as an extension.\nWill do anyway.", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410922172", "createdAt": "2020-04-19T14:51:27Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.ichi2.ui;\n+\n+import android.content.Context;\n+import android.view.MenuItem;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import androidx.appcompat.view.menu.MenuBuilder;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(androidx.test.ext.junit.runners.AndroidJUnit4.class)\n+public class ActionBarOverflowTest {\n+\n+    @Test\n+    public void hasValidActionBarReflectionMethod() {\n+        assertThat(\"Ensures that there is a valid way to obtain a listener\",\n+                ActionBarOverflow.hasUsableMethod(), is(true));\n+    }\n+\n+    @Test\n+    public void errorsAreBeingThrownCanary() {\n+        //See discussion on #5806\n+        //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces\n+        //Once this throws, errors are being thrown on a currently graylisted method\n+        ActionBarOverflow.setupMethods(ActionBarOverflow::getPrivateMethodOnlyHandleExceptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMTM1OA=="}, "originalCommit": {"oid": "62bcc85d2e1932987225c0d0f2eb9b0eb776270b"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMjc2NQ==", "bodyText": "And done", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410922765", "createdAt": "2020-04-19T14:55:03Z", "author": {"login": "david-allison-1"}, "path": "AnkiDroid/src/androidTest/java/com/ichi2/ui/ActionBarOverflowTest.java", "diffHunk": "@@ -0,0 +1,68 @@\n+package com.ichi2.ui;\n+\n+import android.content.Context;\n+import android.view.MenuItem;\n+\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import java.lang.reflect.Constructor;\n+import java.lang.reflect.InvocationTargetException;\n+import java.lang.reflect.Method;\n+\n+import androidx.appcompat.view.menu.MenuBuilder;\n+import androidx.test.platform.app.InstrumentationRegistry;\n+\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.notNullValue;\n+\n+@RunWith(androidx.test.ext.junit.runners.AndroidJUnit4.class)\n+public class ActionBarOverflowTest {\n+\n+    @Test\n+    public void hasValidActionBarReflectionMethod() {\n+        assertThat(\"Ensures that there is a valid way to obtain a listener\",\n+                ActionBarOverflow.hasUsableMethod(), is(true));\n+    }\n+\n+    @Test\n+    public void errorsAreBeingThrownCanary() {\n+        //See discussion on #5806\n+        //https://developer.android.com/distribute/best-practices/develop/restrictions-non-sdk-interfaces\n+        //Once this throws, errors are being thrown on a currently graylisted method\n+        ActionBarOverflow.setupMethods(ActionBarOverflow::getPrivateMethodOnlyHandleExceptions);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMTM1OA=="}, "originalCommit": {"oid": "62bcc85d2e1932987225c0d0f2eb9b0eb776270b"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1MjM0MTE4OnYy", "diffSide": "RIGHT", "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNDo1NzowOVrOGH4wdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xOVQxNDo1NzowOVrOGH4wdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDkyMzEyNQ==", "bodyText": "Issue found: The utility class name 'ActionBarOverflow' doesn't match '[A-Z][a-zA-Z0-9]+(Utils?|Helper)'", "url": "https://github.com/ankidroid/Anki-Android/pull/5918#discussion_r410923125", "createdAt": "2020-04-19T14:57:09Z", "author": {"login": "timrae"}, "path": "AnkiDroid/src/main/java/com/ichi2/ui/ActionBarOverflow.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package com.ichi2.ui;\n+\n+import android.util.Pair;\n+import android.view.MenuItem;\n+\n+import java.lang.reflect.Method;\n+\n+import androidx.annotation.CheckResult;\n+import androidx.annotation.Nullable;\n+import androidx.annotation.VisibleForTesting;\n+import timber.log.Timber;\n+\n+/**\n+ * Detection of whether an item is in the ActionBar overflow\n+ * WARN: When making changes to this code, also test with Proguard\n+ * */\n+public class ActionBarOverflow {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "823cb8faf577c554f64f06a1cd72feaabc9d0f22"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 500, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}