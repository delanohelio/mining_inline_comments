{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NTc2ODM1", "number": 1818, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzowODoxOVrODg9bWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozNjozMlrODhggvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODg3NDUxOnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzowODoxOVrOFrdEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwOToxNzoyOVrOFsLmwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTQ1Mw==", "bodyText": "Maybe it is to be done in a next commit, but the style has somehow broken... Functions should have a JavaDoc description and the blocks an ending // comment.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381109453", "createdAt": "2020-02-19T07:08:19Z", "author": {"login": "fgalan"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "diffHunk": "@@ -73,225 +49,282 @@\n     private String attribute;\n     private String dbName;\n     private String tableName;\n+    private String collectionName;\n+    private String orgName;\n+    private String pkgName;\n+    private String resName;\n+    private String hdfsFolder;\n+    private String hdfsFile;\n+    private String hiveFields;\n+    private String csvString;\n+    private boolean attrNativeTypes;\n+    private boolean enableGrouping;\n+    private boolean enableEncoding;\n+    private boolean enableNameMappings;\n+    private boolean enableGeoParse;\n+    private boolean attrMetadataStore;\n+    private boolean enableUTCRecvTime;\n \n-    /**\n-     * Instantiates a new Ngsi generic aggregator.\n-     *\n-     * @param enableGrouping     the enable grouping\n-     * @param enableNameMappings the enable name mappings\n-     * @param enableEncoding     the enable encoding\n-     * @param enableGeoParse     the enable geo parse\n-     * @param attrNativeTypes    the attr native types\n-     */\n-    NGSIGenericAggregator(boolean enableGrouping, boolean enableNameMappings, boolean enableEncoding, boolean enableGeoParse, boolean attrNativeTypes) {\n-        this.enableEncoding = enableEncoding;\n-        this.enableNameMappings = enableNameMappings;\n-        this.enableEncoding = enableEncoding;\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n+        if (aggregation == null) {\n+            return new LinkedHashMap<>();\n+        } else {\n+            return aggregation;\n+        }\n+    }\n+\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregationToPersist() {\n+        if (aggregation == null) {\n+            return new LinkedHashMap<>();\n+        } else {\n+            return NGSIUtils.linkedHashMapWithoutDefaultFields(aggregation, attrMetadataStore);\n+        }\n+    }\n+\n+    public void setAggregation(LinkedHashMap<String, ArrayList<JsonElement>> aggregation) {\n+        this.aggregation = aggregation;\n+    }\n+\n+    public String getCollectionName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return collectionName.toLowerCase();\n+        } else {\n+            return collectionName;\n+        }\n+    }\n+\n+    public Map<String, String> getMdAggregations() {\n+        if (mdAggregations == null) {\n+            return new HashMap<>();\n+        } else {\n+            return mdAggregations;\n+        }\n+    }\n+\n+    public String getCsvString() {\n+        return csvString;\n+    }\n+\n+    public void setCsvString(String csvString) {\n+        this.csvString = csvString;\n+    }\n+\n+    public String getHdfsFolder(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return hdfsFolder.toLowerCase();\n+        } else {\n+            return hdfsFolder;\n+        }\n+    }\n+\n+    public void setHdfsFolder(String hdfsFolder) {\n+        this.hdfsFolder = hdfsFolder;\n+    }\n+\n+    public String getHdfsFile(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return hdfsFile.toLowerCase();\n+        } else {\n+            return hdfsFile;\n+        }\n+    }\n+\n+    public boolean isEnableUTCRecvTime() {\n+        return enableUTCRecvTime;\n+    }\n+\n+    public void setEnableUTCRecvTime(boolean enableUTCRecvTime) {\n+        this.enableUTCRecvTime = enableUTCRecvTime;\n+    }\n+\n+    public void setHdfsFile(String hdfsFile) {\n+        this.hdfsFile = hdfsFile;\n+    }\n+\n+    public void setMdAggregations(Map<String, String> mdAggregations) {\n+        this.mdAggregations = mdAggregations;\n+    }\n+\n+    public void setAttrMetadataStore(boolean attrMetadataStore) {\n+        this.attrMetadataStore = attrMetadataStore;\n+    }\n+\n+    public boolean isAttrMetadataStore() {\n+        return attrMetadataStore;\n+    }\n+\n+    public boolean isEnableGeoParse() {\n+        return enableGeoParse;\n+    }\n+\n+    public void setEnableGeoParse(boolean enableGeoParse) {\n         this.enableGeoParse = enableGeoParse;\n-        this.attrNativeTypes = attrNativeTypes;\n-        aggregation = new LinkedHashMap<>();\n-    } // MySQLAggregator\n+    }\n \n-    /**\n-     * Gets aggregation.\n-     *\n-     * @return the aggregation\n-     */\n-    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n-        return aggregation;\n-    } //getAggregation\n+    public void setCollectionName(String collectionName) {\n+        this.collectionName = collectionName;\n+    }\n \n-    /**\n-     * Gets service path for data.\n-     *\n-     * @return the service path for data\n-     */\n-    protected String getServicePathForData() {\n+    public String getService() {\n+        return service;\n+    }\n+\n+    public String getHiveFields() {\n+        return hiveFields;\n+    }\n+\n+    public void setHiveFields(String hiveFields) {\n+        this.hiveFields = hiveFields;\n+    }\n+\n+    public void setService(String service) {\n+        this.service = service;\n+    }\n+\n+    public String getServicePathForData() {\n         return servicePathForData;\n-    } //getServicePathForData\n+    }\n+\n+    public void setServicePathForData(String servicePathForData) {\n+        this.servicePathForData = servicePathForData;\n+    }\n+\n+    public String getServicePathForNaming() {\n+        return servicePathForNaming;\n+    }\n+\n+    public void setServicePathForNaming(String servicePathForNaming) {\n+        this.servicePathForNaming = servicePathForNaming;\n+    }\n+\n+    public String getEntityForNaming() {\n+        return entityForNaming;\n+    }\n+\n+    public void setEntityForNaming(String entityForNaming) {\n+        this.entityForNaming = entityForNaming;\n+    }\n+\n+    public String getEntityType() {\n+        return entityType;\n+    }\n+\n+    public void setEntityType(String entityType) {\n+        this.entityType = entityType;\n+    }\n+\n+    public String getAttribute() {\n+        return attribute;\n+    }\n+\n+    public void setAttribute(String attribute) {\n+        this.attribute = attribute;\n+    }\n \n-    /**\n-     * Gets db name.\n-     *\n-     * @param enableLowercase the enable lowercase\n-     * @return the db name\n-     */\n     public String getDbName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return dbName.toLowerCase();\n         } else {\n             return dbName;\n-        } // if else\n-    } // getDbName\n+        }\n+    }\n+\n+    public void setDbName(String dbName) {\n+        this.dbName = dbName;\n+    }\n \n-    /**\n-     * Gets table name.\n-     *\n-     * @param enableLowercase the enable lowercase\n-     * @return the table name\n-     */\n     public String getTableName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return tableName.toLowerCase();\n         } else {\n             return tableName;\n-        } // if else\n-    } // getTableName\n-\n-\n-    /**\n-     * Sets db name.\n-     *\n-     * @param dbName the db name\n-     */\n-    public void setDbName(String dbName) {\n-        this.dbName = dbName;\n+        }\n     }\n \n-    /**\n-     * Sets table name.\n-     *\n-     * @param tableName the table name\n-     */\n     public void setTableName(String tableName) {\n         this.tableName = tableName;\n     }\n \n-    /**\n-     * Gets string value for json element.\n-     *\n-     * @param value the value\n-     * @return the string value for json element\n-     */\n-    public String getStringValueForJsonElement(JsonElement value) {\n-        String stringValue;\n-        if (attrNativeTypes) {\n-            if (value == null || value.isJsonNull()) {\n-                stringValue = \"NULL\";\n-            } else if (value.isJsonPrimitive()) {\n-                if (value.getAsJsonPrimitive().isBoolean()) {\n-                    stringValue = value.getAsString().toUpperCase();\n-                } else if (value.getAsJsonPrimitive().isNumber()) {\n-                    stringValue = value.getAsString();\n-                }else {\n-                    if (value.toString().contains(\"ST_GeomFromGeoJSON\") || value.toString().contains(\"ST_SetSRID\")) {\n-                        stringValue = value.getAsString().replace(\"\\\\\", \"\");\n-                    } else {\n-                        stringValue = \"'\" + value.getAsString() + \"'\";\n-                    }\n-                }\n-            } else {\n-                stringValue = \"'\" + value.toString() + \"'\";\n-            }\n+    public String getOrgName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return orgName.toLowerCase();\n         } else {\n-            if (value.isJsonPrimitive()) {\n-                stringValue = \"'\" + value.getAsString() + \"'\";\n-            } else {\n-                stringValue = \"'\" + value.toString() + \"'\";\n-            }\n+            return orgName;\n         }\n-        LOGGER.debug(\"[\" + getName() + \"] aggregation entry = \"  + stringValue);\n-        return stringValue;\n     }\n \n-    /**\n-     * Gets values for insert.\n-     *\n-     * @return the values for insert\n-     */\n-    public String getValuesForInsert() {\n-        String valuesForInsert = \"\";\n-        int numEvents = aggregation.get(NGSIConstants.FIWARE_SERVICE_PATH).size();\n-\n-        for (int i = 0; i < numEvents; i++) {\n-            if (i == 0) {\n-                valuesForInsert += \"(\";\n-            } else {\n-                valuesForInsert += \",(\";\n-            } // if else\n-            boolean first = true;\n-            Iterator<String> it = aggregation.keySet().iterator();\n-            while (it.hasNext()) {\n-                String entry = (String) it.next();\n-                ArrayList<JsonElement> values = (ArrayList<JsonElement>) aggregation.get(entry);\n-                JsonElement value = values.get(i);\n-                String stringValue = getStringValueForJsonElement(value);\n-                if (first) {\n-                    valuesForInsert += stringValue;\n-                    first = false;\n-                } else {\n-                    valuesForInsert += \",\" + stringValue;\n-                } // if else\n-            } // while\n-            valuesForInsert += \")\";\n-        } // for\n-        return valuesForInsert;\n-    } // getValuesForInsert\n-\n-    private String getName() {\n-        return \"NGSIUtils.GenericAggregator\";\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n     }\n \n-    /**\n-     * Gets fields for create.\n-     *\n-     * @return the fields for create\n-     */\n-    public String getFieldsForCreate() {\n-        String fieldsForCreate = \"(\";\n-        boolean first = true;\n-        Iterator<String> it = aggregation.keySet().iterator();\n-\n-        while (it.hasNext()) {\n-            if (first) {\n-                fieldsForCreate += (String) it.next() + \" text\";\n-                first = false;\n-            } else {\n-                fieldsForCreate += \",\" + (String) it.next() + \" text\";\n-            } // if else\n-        } // while\n-\n-        return fieldsForCreate + \")\";\n-    } // getFieldsForCreate\n+    public String getPkgName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return pkgName.toLowerCase();\n+        } else {\n+            return pkgName;\n+        }\n+    }\n \n-    /**\n-     * Gets fields for insert.\n-     *\n-     * @return the fields for insert\n-     */\n-    public String getFieldsForInsert() {\n-        String fieldsForInsert = \"(\";\n-        boolean first = true;\n-        Iterator<String> it = aggregation.keySet().iterator();\n-        while (it.hasNext()) {\n-            if (first) {\n-                fieldsForInsert += (String) it.next();\n-                first = false;\n-            } else {\n-                fieldsForInsert += \",\" + (String) it.next();\n-            } // if else\n-        } // while\n-        return fieldsForInsert + \")\";\n-    } // getFieldsForInsert\n+    public void setPkgName(String pkgName) {\n+        this.pkgName = pkgName;\n+    }\n+\n+    public String getResName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return resName.toLowerCase();\n+        } else {\n+            return resName;\n+        }\n+    }\n+\n+    public void setResName(String resName) {\n+        this.resName = resName;\n+    }\n+\n+    public boolean isAttrNativeTypes() {\n+        return attrNativeTypes;\n+    }\n+\n+    public void setAttrNativeTypes(boolean attrNativeTypes) {\n+        this.attrNativeTypes = attrNativeTypes;\n+    }\n+\n+    public boolean isEnableGrouping() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab"}, "originalPosition": 472}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg3MTgwOQ==", "bodyText": "Fixed in 683ab07", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381871809", "createdAt": "2020-02-20T09:17:29Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericAggregator.java", "diffHunk": "@@ -73,225 +49,282 @@\n     private String attribute;\n     private String dbName;\n     private String tableName;\n+    private String collectionName;\n+    private String orgName;\n+    private String pkgName;\n+    private String resName;\n+    private String hdfsFolder;\n+    private String hdfsFile;\n+    private String hiveFields;\n+    private String csvString;\n+    private boolean attrNativeTypes;\n+    private boolean enableGrouping;\n+    private boolean enableEncoding;\n+    private boolean enableNameMappings;\n+    private boolean enableGeoParse;\n+    private boolean attrMetadataStore;\n+    private boolean enableUTCRecvTime;\n \n-    /**\n-     * Instantiates a new Ngsi generic aggregator.\n-     *\n-     * @param enableGrouping     the enable grouping\n-     * @param enableNameMappings the enable name mappings\n-     * @param enableEncoding     the enable encoding\n-     * @param enableGeoParse     the enable geo parse\n-     * @param attrNativeTypes    the attr native types\n-     */\n-    NGSIGenericAggregator(boolean enableGrouping, boolean enableNameMappings, boolean enableEncoding, boolean enableGeoParse, boolean attrNativeTypes) {\n-        this.enableEncoding = enableEncoding;\n-        this.enableNameMappings = enableNameMappings;\n-        this.enableEncoding = enableEncoding;\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n+        if (aggregation == null) {\n+            return new LinkedHashMap<>();\n+        } else {\n+            return aggregation;\n+        }\n+    }\n+\n+    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregationToPersist() {\n+        if (aggregation == null) {\n+            return new LinkedHashMap<>();\n+        } else {\n+            return NGSIUtils.linkedHashMapWithoutDefaultFields(aggregation, attrMetadataStore);\n+        }\n+    }\n+\n+    public void setAggregation(LinkedHashMap<String, ArrayList<JsonElement>> aggregation) {\n+        this.aggregation = aggregation;\n+    }\n+\n+    public String getCollectionName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return collectionName.toLowerCase();\n+        } else {\n+            return collectionName;\n+        }\n+    }\n+\n+    public Map<String, String> getMdAggregations() {\n+        if (mdAggregations == null) {\n+            return new HashMap<>();\n+        } else {\n+            return mdAggregations;\n+        }\n+    }\n+\n+    public String getCsvString() {\n+        return csvString;\n+    }\n+\n+    public void setCsvString(String csvString) {\n+        this.csvString = csvString;\n+    }\n+\n+    public String getHdfsFolder(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return hdfsFolder.toLowerCase();\n+        } else {\n+            return hdfsFolder;\n+        }\n+    }\n+\n+    public void setHdfsFolder(String hdfsFolder) {\n+        this.hdfsFolder = hdfsFolder;\n+    }\n+\n+    public String getHdfsFile(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return hdfsFile.toLowerCase();\n+        } else {\n+            return hdfsFile;\n+        }\n+    }\n+\n+    public boolean isEnableUTCRecvTime() {\n+        return enableUTCRecvTime;\n+    }\n+\n+    public void setEnableUTCRecvTime(boolean enableUTCRecvTime) {\n+        this.enableUTCRecvTime = enableUTCRecvTime;\n+    }\n+\n+    public void setHdfsFile(String hdfsFile) {\n+        this.hdfsFile = hdfsFile;\n+    }\n+\n+    public void setMdAggregations(Map<String, String> mdAggregations) {\n+        this.mdAggregations = mdAggregations;\n+    }\n+\n+    public void setAttrMetadataStore(boolean attrMetadataStore) {\n+        this.attrMetadataStore = attrMetadataStore;\n+    }\n+\n+    public boolean isAttrMetadataStore() {\n+        return attrMetadataStore;\n+    }\n+\n+    public boolean isEnableGeoParse() {\n+        return enableGeoParse;\n+    }\n+\n+    public void setEnableGeoParse(boolean enableGeoParse) {\n         this.enableGeoParse = enableGeoParse;\n-        this.attrNativeTypes = attrNativeTypes;\n-        aggregation = new LinkedHashMap<>();\n-    } // MySQLAggregator\n+    }\n \n-    /**\n-     * Gets aggregation.\n-     *\n-     * @return the aggregation\n-     */\n-    public LinkedHashMap<String, ArrayList<JsonElement>> getAggregation() {\n-        return aggregation;\n-    } //getAggregation\n+    public void setCollectionName(String collectionName) {\n+        this.collectionName = collectionName;\n+    }\n \n-    /**\n-     * Gets service path for data.\n-     *\n-     * @return the service path for data\n-     */\n-    protected String getServicePathForData() {\n+    public String getService() {\n+        return service;\n+    }\n+\n+    public String getHiveFields() {\n+        return hiveFields;\n+    }\n+\n+    public void setHiveFields(String hiveFields) {\n+        this.hiveFields = hiveFields;\n+    }\n+\n+    public void setService(String service) {\n+        this.service = service;\n+    }\n+\n+    public String getServicePathForData() {\n         return servicePathForData;\n-    } //getServicePathForData\n+    }\n+\n+    public void setServicePathForData(String servicePathForData) {\n+        this.servicePathForData = servicePathForData;\n+    }\n+\n+    public String getServicePathForNaming() {\n+        return servicePathForNaming;\n+    }\n+\n+    public void setServicePathForNaming(String servicePathForNaming) {\n+        this.servicePathForNaming = servicePathForNaming;\n+    }\n+\n+    public String getEntityForNaming() {\n+        return entityForNaming;\n+    }\n+\n+    public void setEntityForNaming(String entityForNaming) {\n+        this.entityForNaming = entityForNaming;\n+    }\n+\n+    public String getEntityType() {\n+        return entityType;\n+    }\n+\n+    public void setEntityType(String entityType) {\n+        this.entityType = entityType;\n+    }\n+\n+    public String getAttribute() {\n+        return attribute;\n+    }\n+\n+    public void setAttribute(String attribute) {\n+        this.attribute = attribute;\n+    }\n \n-    /**\n-     * Gets db name.\n-     *\n-     * @param enableLowercase the enable lowercase\n-     * @return the db name\n-     */\n     public String getDbName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return dbName.toLowerCase();\n         } else {\n             return dbName;\n-        } // if else\n-    } // getDbName\n+        }\n+    }\n+\n+    public void setDbName(String dbName) {\n+        this.dbName = dbName;\n+    }\n \n-    /**\n-     * Gets table name.\n-     *\n-     * @param enableLowercase the enable lowercase\n-     * @return the table name\n-     */\n     public String getTableName(boolean enableLowercase) {\n         if (enableLowercase) {\n             return tableName.toLowerCase();\n         } else {\n             return tableName;\n-        } // if else\n-    } // getTableName\n-\n-\n-    /**\n-     * Sets db name.\n-     *\n-     * @param dbName the db name\n-     */\n-    public void setDbName(String dbName) {\n-        this.dbName = dbName;\n+        }\n     }\n \n-    /**\n-     * Sets table name.\n-     *\n-     * @param tableName the table name\n-     */\n     public void setTableName(String tableName) {\n         this.tableName = tableName;\n     }\n \n-    /**\n-     * Gets string value for json element.\n-     *\n-     * @param value the value\n-     * @return the string value for json element\n-     */\n-    public String getStringValueForJsonElement(JsonElement value) {\n-        String stringValue;\n-        if (attrNativeTypes) {\n-            if (value == null || value.isJsonNull()) {\n-                stringValue = \"NULL\";\n-            } else if (value.isJsonPrimitive()) {\n-                if (value.getAsJsonPrimitive().isBoolean()) {\n-                    stringValue = value.getAsString().toUpperCase();\n-                } else if (value.getAsJsonPrimitive().isNumber()) {\n-                    stringValue = value.getAsString();\n-                }else {\n-                    if (value.toString().contains(\"ST_GeomFromGeoJSON\") || value.toString().contains(\"ST_SetSRID\")) {\n-                        stringValue = value.getAsString().replace(\"\\\\\", \"\");\n-                    } else {\n-                        stringValue = \"'\" + value.getAsString() + \"'\";\n-                    }\n-                }\n-            } else {\n-                stringValue = \"'\" + value.toString() + \"'\";\n-            }\n+    public String getOrgName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return orgName.toLowerCase();\n         } else {\n-            if (value.isJsonPrimitive()) {\n-                stringValue = \"'\" + value.getAsString() + \"'\";\n-            } else {\n-                stringValue = \"'\" + value.toString() + \"'\";\n-            }\n+            return orgName;\n         }\n-        LOGGER.debug(\"[\" + getName() + \"] aggregation entry = \"  + stringValue);\n-        return stringValue;\n     }\n \n-    /**\n-     * Gets values for insert.\n-     *\n-     * @return the values for insert\n-     */\n-    public String getValuesForInsert() {\n-        String valuesForInsert = \"\";\n-        int numEvents = aggregation.get(NGSIConstants.FIWARE_SERVICE_PATH).size();\n-\n-        for (int i = 0; i < numEvents; i++) {\n-            if (i == 0) {\n-                valuesForInsert += \"(\";\n-            } else {\n-                valuesForInsert += \",(\";\n-            } // if else\n-            boolean first = true;\n-            Iterator<String> it = aggregation.keySet().iterator();\n-            while (it.hasNext()) {\n-                String entry = (String) it.next();\n-                ArrayList<JsonElement> values = (ArrayList<JsonElement>) aggregation.get(entry);\n-                JsonElement value = values.get(i);\n-                String stringValue = getStringValueForJsonElement(value);\n-                if (first) {\n-                    valuesForInsert += stringValue;\n-                    first = false;\n-                } else {\n-                    valuesForInsert += \",\" + stringValue;\n-                } // if else\n-            } // while\n-            valuesForInsert += \")\";\n-        } // for\n-        return valuesForInsert;\n-    } // getValuesForInsert\n-\n-    private String getName() {\n-        return \"NGSIUtils.GenericAggregator\";\n+    public void setOrgName(String orgName) {\n+        this.orgName = orgName;\n     }\n \n-    /**\n-     * Gets fields for create.\n-     *\n-     * @return the fields for create\n-     */\n-    public String getFieldsForCreate() {\n-        String fieldsForCreate = \"(\";\n-        boolean first = true;\n-        Iterator<String> it = aggregation.keySet().iterator();\n-\n-        while (it.hasNext()) {\n-            if (first) {\n-                fieldsForCreate += (String) it.next() + \" text\";\n-                first = false;\n-            } else {\n-                fieldsForCreate += \",\" + (String) it.next() + \" text\";\n-            } // if else\n-        } // while\n-\n-        return fieldsForCreate + \")\";\n-    } // getFieldsForCreate\n+    public String getPkgName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return pkgName.toLowerCase();\n+        } else {\n+            return pkgName;\n+        }\n+    }\n \n-    /**\n-     * Gets fields for insert.\n-     *\n-     * @return the fields for insert\n-     */\n-    public String getFieldsForInsert() {\n-        String fieldsForInsert = \"(\";\n-        boolean first = true;\n-        Iterator<String> it = aggregation.keySet().iterator();\n-        while (it.hasNext()) {\n-            if (first) {\n-                fieldsForInsert += (String) it.next();\n-                first = false;\n-            } else {\n-                fieldsForInsert += \",\" + (String) it.next();\n-            } // if else\n-        } // while\n-        return fieldsForInsert + \")\";\n-    } // getFieldsForInsert\n+    public void setPkgName(String pkgName) {\n+        this.pkgName = pkgName;\n+    }\n+\n+    public String getResName(boolean enableLowercase) {\n+        if (enableLowercase) {\n+            return resName.toLowerCase();\n+        } else {\n+            return resName;\n+        }\n+    }\n+\n+    public void setResName(String resName) {\n+        this.resName = resName;\n+    }\n+\n+    public boolean isAttrNativeTypes() {\n+        return attrNativeTypes;\n+    }\n+\n+    public void setAttrNativeTypes(boolean attrNativeTypes) {\n+        this.attrNativeTypes = attrNativeTypes;\n+    }\n+\n+    public boolean isEnableGrouping() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTQ1Mw=="}, "originalCommit": {"oid": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab"}, "originalPosition": 472}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1ODg3Nzc1OnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzowOTo1OVrOFrdGvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNzozOTowNlrOFrdsNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTk1MQ==", "bodyText": "License header in new files", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381109951", "createdAt": "2020-02-19T07:09:59Z", "author": {"login": "fgalan"}, "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.telefonica.iot.cygnus.sinks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTExOTU0MA==", "bodyText": "Fixed in 25f98f6", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381119540", "createdAt": "2020-02-19T07:39:06Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIMongoSinkTest.java", "diffHunk": "@@ -0,0 +1,259 @@\n+package com.telefonica.iot.cygnus.sinks;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwOTk1MQ=="}, "originalCommit": {"oid": "fbf6848c023b5832b6bd8a9f87ebbe20fb5b60ab"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDU2Mzk0OnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjoxNjowMFrOFsRKrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0OTo1NlrOFsWSUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2MjkyNw==", "bodyText": "Used by? Is there any new dependence in pom.xml ?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381962927", "createdAt": "2020-02-20T12:16:00Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java", "diffHunk": "@@ -18,6 +18,12 @@\n \n package com.telefonica.iot.cygnus.sinks;\n \n+import com.amazonaws.services.dynamodbv2.xspec.S;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683ab076f020f01987369925c4e9091d083b7560"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjgwMw==", "bodyText": "No, there isn't any new dependency, not very sure why I added it, but it's never used.\nFixed in bf42de0", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r382046803", "createdAt": "2020-02-20T14:49:56Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSink.java", "diffHunk": "@@ -18,6 +18,12 @@\n \n package com.telefonica.iot.cygnus.sinks;\n \n+import com.amazonaws.services.dynamodbv2.xspec.S;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk2MjkyNw=="}, "originalCommit": {"oid": "683ab076f020f01987369925c4e9091d083b7560"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NDYyMjY4OnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMjozNjozMlrOFsRu1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDo0OTo1N1rOFsWSXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MjE4Mw==", "bodyText": "leftover?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r381972183", "createdAt": "2020-02-20T12:36:32Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java", "diffHunk": "@@ -1533,76 +1615,101 @@ public void testNativeTypeRowBatchCsvNotMetadata() throws CygnusBadConfiguration\n \n     @Test\n     public void testNativeTypeRowBatchJson() throws CygnusBadConfiguration, CygnusRuntimeError, CygnusPersistenceError, CygnusBadContextData {\n-        String attr_native_types = \"true\";\n-        NGSIHDFSSink ngsihdfsSink= new NGSIHDFSSink();\n-        ngsihdfsSink.configure(createContextforNativeTypes(\"json-row\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, attr_native_types, \"true\"));\n         NGSIBatch batch = prepaireBatch();\n         String destination = \"someDestination\";\n+        String file_format = \"json-row\";\n+        NGSIHDFSSink ngsihdfsSink = new NGSIHDFSSink();\n+        ngsihdfsSink.configure(createContextforNativeTypes(null, null, null, null, null, null, null, null, null, null, null, file_format, null, null, null, null, null, null, null, null, null, null));\n         try {\n             batch.startIterator();\n+            //NGSIGenericAggregator aggregator = new NGSIGenericColumnAggregator();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "683ab076f020f01987369925c4e9091d083b7560"}, "originalPosition": 350}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjA0NjgxMw==", "bodyText": "Fixed in bf42de0", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1818#discussion_r382046813", "createdAt": "2020-02-20T14:49:57Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/sinks/NGSIHDFSSinkTest.java", "diffHunk": "@@ -1533,76 +1615,101 @@ public void testNativeTypeRowBatchCsvNotMetadata() throws CygnusBadConfiguration\n \n     @Test\n     public void testNativeTypeRowBatchJson() throws CygnusBadConfiguration, CygnusRuntimeError, CygnusPersistenceError, CygnusBadContextData {\n-        String attr_native_types = \"true\";\n-        NGSIHDFSSink ngsihdfsSink= new NGSIHDFSSink();\n-        ngsihdfsSink.configure(createContextforNativeTypes(\"json-row\", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, attr_native_types, \"true\"));\n         NGSIBatch batch = prepaireBatch();\n         String destination = \"someDestination\";\n+        String file_format = \"json-row\";\n+        NGSIHDFSSink ngsihdfsSink = new NGSIHDFSSink();\n+        ngsihdfsSink.configure(createContextforNativeTypes(null, null, null, null, null, null, null, null, null, null, null, file_format, null, null, null, null, null, null, null, null, null, null));\n         try {\n             batch.startIterator();\n+            //NGSIGenericAggregator aggregator = new NGSIGenericColumnAggregator();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk3MjE4Mw=="}, "originalCommit": {"oid": "683ab076f020f01987369925c4e9091d083b7560"}, "originalPosition": 350}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2420, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}