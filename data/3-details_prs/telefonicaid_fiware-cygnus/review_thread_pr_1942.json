{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NDAzMzc3", "number": 1942, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo1NDo0MlrOEo-fPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo1NToyNVrOEo-gJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDAyMzAyOnYy", "diffSide": "RIGHT", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo1NDo0MlrOHaYCXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo1NDo0MlrOHaYCXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxODg0Ng==", "bodyText": "upsertQuery should be printed, not only  connection", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1942#discussion_r497418846", "createdAt": "2020-09-30T10:54:42Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "diffHunk": "@@ -516,38 +541,91 @@ public void createErrorTable(String destination)\n     } // createErrorTable\n \n     /**\n-     * Gets an SQL connection from the driver\n+     * Upsert transaction.\n      *\n-     * @param destination the destination\n-     * @return the sql connection\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param destination     the destination\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param attrNativeTypes the attr native types\n      * @throws CygnusPersistenceError the cygnus persistence error\n+     * @throws CygnusBadContextData   the cygnus bad context data\n      * @throws CygnusRuntimeError     the cygnus runtime error\n-     */\n-\n-    public Connection getSQLConnection (String destination) throws CygnusPersistenceError, CygnusRuntimeError {\n-        return driver.getConnection(destination);\n-    }\n-\n-    /**\n-     * Execute prepared statement.\n-     *\n-     * @param preparedStatement the prepared statement\n-     * @throws SQLException           the sql exception\n      * @throws CygnusPersistenceError the cygnus persistence error\n-     * @throws CygnusRuntimeError     the cygnus runtime error\n-     * @throws CygnusBadContextData   the cygnus bad context data\n      */\n+    public void upsertTransaction (LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                   LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                   String destination,\n+                                   String tableName,\n+                                   String tableSuffix,\n+                                   String uniqueKey,\n+                                   String timestampKey,\n+                                   String timestampFormat,\n+                                   boolean attrNativeTypes) throws CygnusPersistenceError, CygnusBadContextData, CygnusRuntimeError,  CygnusPersistenceError{\n+\n+        Connection connection = null;\n+        PreparedStatement upsertPreparedStatement = null;\n+        PreparedStatement insertPreparedStatement = null;\n+\n+        int insertedRows[];\n \n-    public void executePreparedStatement (PreparedStatement preparedStatement) throws SQLException, CygnusPersistenceError, CygnusRuntimeError, CygnusBadContextData {\n         try {\n-            preparedStatement.executeBatch();\n+\n+            connection = driver.getConnection(destination);\n+            connection.setAutoCommit(false);\n+\n+            String insertQuery = SQLQueryUtils.sqlInsertQuery(aggregation,\n+                    tableName,\n+                    sqlInstance,\n+                    destination).toString();\n+\n+            PreparedStatement insertStatement = null;\n+            insertStatement = connection.prepareStatement(insertQuery);\n+            insertPreparedStatement = SQLQueryUtils.addJsonValues(insertStatement, aggregation, attrNativeTypes);\n+            insertedRows = insertPreparedStatement.executeBatch();\n+\n+            String upsertQuery = SQLQueryUtils.sqlUpsertQuery(aggregation,\n+                    lastData,\n+                    tableName,\n+                    tableSuffix,\n+                    uniqueKey,\n+                    timestampKey,\n+                    timestampFormat,\n+                    sqlInstance,\n+                    destination).toString();\n+\n+            PreparedStatement upsertStatement = null;\n+            upsertStatement = connection.prepareStatement(upsertQuery);\n+            upsertPreparedStatement = SQLQueryUtils.addJsonValues(upsertStatement, lastData, attrNativeTypes);\n+            upsertPreparedStatement.executeBatch();\n+\n+            connection.commit();\n+            LOGGER.info(\"Finished transaction: \\n\" + upsertPreparedStatement + \"\\n Inserted ROWS: \" + insertedRows.length + \" \" + upsertQuery);\n+\n         } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(sqlInstance.toUpperCase() + \" Data insertion error. Query: `\" + preparedStatement, \"SQLTimeoutException\", e.getMessage());\n+            cygnusSQLRollback(connection);\n+            throw new CygnusPersistenceError(sqlInstance.toUpperCase() + \" \" + e.getNextException() + \" Data insertion error. Query: `\" + connection, \"SQLTimeoutException\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ac81959b1eb458f81c66a956e7affabcdcd843"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDAyNTM0OnYy", "diffSide": "RIGHT", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo1NToyNlrOHaYD5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMDo1NToyNlrOHaYD5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzQxOTIzNw==", "bodyText": "the same upper comment: upsertQuery should be printed, not only connection", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1942#discussion_r497419237", "createdAt": "2020-09-30T10:55:26Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "diffHunk": "@@ -516,38 +541,91 @@ public void createErrorTable(String destination)\n     } // createErrorTable\n \n     /**\n-     * Gets an SQL connection from the driver\n+     * Upsert transaction.\n      *\n-     * @param destination the destination\n-     * @return the sql connection\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param destination     the destination\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param attrNativeTypes the attr native types\n      * @throws CygnusPersistenceError the cygnus persistence error\n+     * @throws CygnusBadContextData   the cygnus bad context data\n      * @throws CygnusRuntimeError     the cygnus runtime error\n-     */\n-\n-    public Connection getSQLConnection (String destination) throws CygnusPersistenceError, CygnusRuntimeError {\n-        return driver.getConnection(destination);\n-    }\n-\n-    /**\n-     * Execute prepared statement.\n-     *\n-     * @param preparedStatement the prepared statement\n-     * @throws SQLException           the sql exception\n      * @throws CygnusPersistenceError the cygnus persistence error\n-     * @throws CygnusRuntimeError     the cygnus runtime error\n-     * @throws CygnusBadContextData   the cygnus bad context data\n      */\n+    public void upsertTransaction (LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                   LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                   String destination,\n+                                   String tableName,\n+                                   String tableSuffix,\n+                                   String uniqueKey,\n+                                   String timestampKey,\n+                                   String timestampFormat,\n+                                   boolean attrNativeTypes) throws CygnusPersistenceError, CygnusBadContextData, CygnusRuntimeError,  CygnusPersistenceError{\n+\n+        Connection connection = null;\n+        PreparedStatement upsertPreparedStatement = null;\n+        PreparedStatement insertPreparedStatement = null;\n+\n+        int insertedRows[];\n \n-    public void executePreparedStatement (PreparedStatement preparedStatement) throws SQLException, CygnusPersistenceError, CygnusRuntimeError, CygnusBadContextData {\n         try {\n-            preparedStatement.executeBatch();\n+\n+            connection = driver.getConnection(destination);\n+            connection.setAutoCommit(false);\n+\n+            String insertQuery = SQLQueryUtils.sqlInsertQuery(aggregation,\n+                    tableName,\n+                    sqlInstance,\n+                    destination).toString();\n+\n+            PreparedStatement insertStatement = null;\n+            insertStatement = connection.prepareStatement(insertQuery);\n+            insertPreparedStatement = SQLQueryUtils.addJsonValues(insertStatement, aggregation, attrNativeTypes);\n+            insertedRows = insertPreparedStatement.executeBatch();\n+\n+            String upsertQuery = SQLQueryUtils.sqlUpsertQuery(aggregation,\n+                    lastData,\n+                    tableName,\n+                    tableSuffix,\n+                    uniqueKey,\n+                    timestampKey,\n+                    timestampFormat,\n+                    sqlInstance,\n+                    destination).toString();\n+\n+            PreparedStatement upsertStatement = null;\n+            upsertStatement = connection.prepareStatement(upsertQuery);\n+            upsertPreparedStatement = SQLQueryUtils.addJsonValues(upsertStatement, lastData, attrNativeTypes);\n+            upsertPreparedStatement.executeBatch();\n+\n+            connection.commit();\n+            LOGGER.info(\"Finished transaction: \\n\" + upsertPreparedStatement + \"\\n Inserted ROWS: \" + insertedRows.length + \" \" + upsertQuery);\n+\n         } catch (SQLTimeoutException e) {\n-            throw new CygnusPersistenceError(sqlInstance.toUpperCase() + \" Data insertion error. Query: `\" + preparedStatement, \"SQLTimeoutException\", e.getMessage());\n+            cygnusSQLRollback(connection);\n+            throw new CygnusPersistenceError(sqlInstance.toUpperCase() + \" \" + e.getNextException() + \" Data insertion error. Query: `\" + connection, \"SQLTimeoutException\", e.getMessage());\n         } catch (SQLException e) {\n-            throw new CygnusBadContextData(sqlInstance.toUpperCase() + \" Data insertion error. Query: `\" + preparedStatement, \"SQLException\", e.getMessage());\n+            cygnusSQLRollback(connection);\n+            throw new CygnusBadContextData(sqlInstance.toUpperCase() + \" \" + e.getNextException() + \" Data insertion error. Query: `\" + connection, \"SQLException\", e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69ac81959b1eb458f81c66a956e7affabcdcd843"}, "originalPosition": 165}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2515, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}