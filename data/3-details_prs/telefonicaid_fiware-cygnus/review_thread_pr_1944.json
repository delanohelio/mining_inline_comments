{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk3ODYwNDY5", "number": 1944, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0MTowOVrOEqUsiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowODowNFrOEqVblg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE0NzMxOnYy", "diffSide": "RIGHT", "path": "CHANGES_NEXT_RELEASE", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0MTowOVrOHcdl1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0NTo1NFrOHcdybA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNjk5Ng==", "bodyText": "Maybe both lines could be joined:\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            [cygnus-ngsi, cygnus-common][MySQLSQLSink] Use of the upsert transaction (#1806, #1936)\n          \n          \n            \n            [cygnus-ngsi, cygnus-common][PosgtgreSQLSink, PostgisSink] Create upsert transaction (#1806, #1936)\n          \n          \n            \n            [cygnus-ngsi, cygnus-common][PosgtgreSQLSink, PostgisSink, MySQLSQLSink] Create upsert transaction (#1806, #1936)", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499606996", "createdAt": "2020-10-05T13:41:09Z", "author": {"login": "fgalan"}, "path": "CHANGES_NEXT_RELEASE", "diffHunk": "@@ -1,3 +1,4 @@\n+[cygnus-ngsi, cygnus-common][MySQLSQLSink] Use of the upsert transaction (#1806, #1936)\n [cygnus-ngsi, cygnus-common][PosgtgreSQLSink, PostgisSink] Create upsert transaction (#1806, #1936)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8923a472d4a9f011e9fa4bd764276056b035ecb0"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDIyMA==", "bodyText": "I agreee.\nFixed in 803356b", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499610220", "createdAt": "2020-10-05T13:45:54Z", "author": {"login": "IvanHdzC"}, "path": "CHANGES_NEXT_RELEASE", "diffHunk": "@@ -1,3 +1,4 @@\n+[cygnus-ngsi, cygnus-common][MySQLSQLSink] Use of the upsert transaction (#1806, #1936)\n [cygnus-ngsi, cygnus-common][PosgtgreSQLSink, PostgisSink] Create upsert transaction (#1806, #1936)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYwNjk5Ng=="}, "originalCommit": {"oid": "8923a472d4a9f011e9fa4bd764276056b035ecb0"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODE3MTM3OnYy", "diffSide": "RIGHT", "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxMzo0Njo1MlrOHcd1EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDozNDowOFrOHcf6pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDg5Ng==", "bodyText": "Should last_data_function.md linked from mysql sink documentation (as Postgresql/PostGIS sink doc I think do)?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499610896", "createdAt": "2020-10-05T13:46:52Z", "author": {"login": "fgalan"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -97,8 +97,12 @@ All this process happens per each NGSIEvent aggregated.\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMjI2NA==", "bodyText": "Fixed in 3a6ef257", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499622264", "createdAt": "2020-10-05T14:02:46Z", "author": {"login": "IvanHdzC"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -97,8 +97,12 @@ All this process happens per each NGSIEvent aggregated.\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDg5Ng=="}, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzMjUzOA==", "bodyText": "What about a link also in doc/cygnus-ngsi/flume_extensions_catalogue/README.md ?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499632538", "createdAt": "2020-10-05T14:17:33Z", "author": {"login": "fgalan"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -97,8 +97,12 @@ All this process happens per each NGSIEvent aggregated.\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDg5Ng=="}, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NTA5Mw==", "bodyText": "My mistake.\nFixed in e1fc9bf.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499645093", "createdAt": "2020-10-05T14:34:08Z", "author": {"login": "IvanHdzC"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -97,8 +97,12 @@ All this process happens per each NGSIEvent aggregated.\n ", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYxMDg5Ng=="}, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI1NTU0OnYy", "diffSide": "RIGHT", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowNToxMFrOHceoGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNTowMFrOHcff0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMzk2Mw==", "bodyText": "not sure if indentation is fine.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499623963", "createdAt": "2020-10-05T14:05:10Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtils.java", "diffHunk": "@@ -52,52 +52,44 @@\n      * @param timestampFormat the timestamp format\n      * @param sqlInstance     the sql instance\n      * @param destination     the destination\n-     * @param connection      the connection\n-     * @param attrNativeTypes the attr native types\n-     * @return the prepared statement\n-     * @throws SQLException the sql exception\n+     * @return the string buffer\n      */\n-    public static PreparedStatement upsertStatement (LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n-                                            LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n-                                            String tableName,\n-                                            String tableSuffix,\n-                                            String uniqueKey,\n-                                            String timestampKey,\n-                                            String timestampFormat,\n-                                            String sqlInstance,\n-                                            String destination,\n-                                            Connection connection,\n-                                            boolean attrNativeTypes) throws SQLException {\n-\n-\n-        String query = sqlUpsertQuery(aggregation,\n-                lastData,\n-                tableName,\n-                tableSuffix,\n-                uniqueKey,\n-                timestampKey,\n-                timestampFormat,\n-                sqlInstance,\n-                destination).toString();\n+    protected static StringBuffer sqlUpsertQuery(LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                                        LinkedHashMap<String, ArrayList<JsonElement>> lastData,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODIyNA==", "bodyText": "Fixed in e0aa884", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499638224", "createdAt": "2020-10-05T14:25:00Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtils.java", "diffHunk": "@@ -52,52 +52,44 @@\n      * @param timestampFormat the timestamp format\n      * @param sqlInstance     the sql instance\n      * @param destination     the destination\n-     * @param connection      the connection\n-     * @param attrNativeTypes the attr native types\n-     * @return the prepared statement\n-     * @throws SQLException the sql exception\n+     * @return the string buffer\n      */\n-    public static PreparedStatement upsertStatement (LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n-                                            LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n-                                            String tableName,\n-                                            String tableSuffix,\n-                                            String uniqueKey,\n-                                            String timestampKey,\n-                                            String timestampFormat,\n-                                            String sqlInstance,\n-                                            String destination,\n-                                            Connection connection,\n-                                            boolean attrNativeTypes) throws SQLException {\n-\n-\n-        String query = sqlUpsertQuery(aggregation,\n-                lastData,\n-                tableName,\n-                tableSuffix,\n-                uniqueKey,\n-                timestampKey,\n-                timestampFormat,\n-                sqlInstance,\n-                destination).toString();\n+    protected static StringBuffer sqlUpsertQuery(LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                                        LinkedHashMap<String, ArrayList<JsonElement>> lastData,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyMzk2Mw=="}, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI2MTQxOnYy", "diffSide": "RIGHT", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowNjozM1rOHcerxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNTowNFrOHcfgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNDkwMg==", "bodyText": "Not sure if indentation is right", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499624902", "createdAt": "2020-10-05T14:06:33Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtils.java", "diffHunk": "@@ -140,19 +132,114 @@ protected static StringBuffer sqlUpsertQuery(LinkedHashMap<String, ArrayList<Jso\n                 sqlInstance,\n                 destination);\n \n-        if (sqlInstance.equals(\"postgresql\")) {\n-            query.append(insertQuery).\n-                    append(\"ON CONFLICT \").append(\"(\").append(uniqueKey).append(\") \").\n-                    append(\"DO \").\n-                    append(\"UPDATE SET \").append(updateSet).append(\" \").\n-                    append(\"WHERE \").append(postgisDestination).append(\".\").append(uniqueKey).append(\"=\").append(postgisTempReference).append(\".\").append(uniqueKey).append(\" \").\n-                    append(\"AND \").append(\"to_timestamp(\").append(postgisDestination).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"') \").\n-                    append(\"< \").append(\"to_timestamp(\").append(postgisTempReference).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"')\");\n+        query.append(insertQuery).\n+                append(\"ON CONFLICT \").append(\"(\").append(uniqueKey).append(\") \").\n+                append(\"DO \").\n+                append(\"UPDATE SET \").append(updateSet).append(\" \").\n+                append(\"WHERE \").append(postgisDestination).append(\".\").append(uniqueKey).append(\"=\").append(postgisTempReference).append(\".\").append(uniqueKey).append(\" \").\n+                append(\"AND \").append(\"to_timestamp(\").append(postgisDestination).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"') \").\n+                append(\"< \").append(\"to_timestamp(\").append(postgisTempReference).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"')\");\n+\n+        LOGGER.debug(\"[NGSISQLUtils.sqlUpsertQuery] Preparing Upsert query: \" + query.toString());\n+        return query;\n+    }\n+\n+    /**\n+     * Sql upsert query for MySQL string buffer.\n+     *\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param sqlInstance     the sql instance\n+     * @param destination     the destination\n+     * @return the string buffer\n+     */\n+    protected static StringBuffer mySqlUpsertQuery(LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                                        LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                                        String tableName,\n+                                                        String tableSuffix,\n+                                                        String uniqueKey,\n+                                                        String timestampKey,\n+                                                        String timestampFormat,\n+                                                        String sqlInstance,\n+                                                        String destination) {\n+\n+        StringBuffer updateSet = new StringBuffer();\n+        StringBuffer query = new StringBuffer();\n+        StringBuffer dateKeyUpdate = new StringBuffer();\n+        boolean first = true;\n+\n+        for (String key : lastData.keySet()) {\n+            if (!key.equals(timestampKey)) {\n+                if (!key.equals(uniqueKey) && first) {\n+                    first = false;\n+                } else if (!key.equals(uniqueKey)) {\n+                    updateSet.append(\", \");\n+                }\n+                if (!key.equals(uniqueKey)) {\n+                    updateSet.append(mySQLUpdateRecordQuery(key, uniqueKey, timestampKey, timestampFormat));\n+                }\n+            } else {\n+                dateKeyUpdate.append(mySQLUpdateRecordQuery(key, uniqueKey, timestampKey, timestampFormat));\n+            }\n+        }\n+        // The key that corresponds to the timestampKey must be updated at the end, if it is updated before any other key.\n+        // The subsecuent timestamp validations will be allways false, because the date would already be updated.\n+        if (first) {\n+            updateSet.append(dateKeyUpdate);\n+        } else {\n+            updateSet.append(\", \").append(dateKeyUpdate);\n         }\n+\n+        StringBuffer insertQuery = sqlInsertQuery(lastData,\n+                tableName.concat(tableSuffix),\n+                sqlInstance,\n+                destination);\n+\n+        query.append(insertQuery).\n+                append(\"ON DUPLICATE KEY \").\n+                append(\"UPDATE \").append(updateSet);\n+\n         LOGGER.debug(\"[NGSISQLUtils.sqlUpsertQuery] Preparing Upsert query: \" + query.toString());\n         return query;\n     }\n \n+    /**\n+     * Creates a update statement for an upsert query\n+     *\n+     * @param key     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @return the string buffer like the following one\n+     * recvTime=IF((entityId=VALUES(entityId)) AND (STR_TO_DATE(recvTime, '%Y-%m-%d %H:%i:%s.%f') < (STR_TO_DATE(VALUES(recvTime), '%Y-%m-%d %H:%i:%s.%f'))), VALUES(recvTime), recvTime)\n+     */\n+\n+    protected static StringBuffer mySQLUpdateRecordQuery(String key,\n+                                                       String uniqueKey,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzODI5NA==", "bodyText": "Fixed in e0aa884", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499638294", "createdAt": "2020-10-05T14:25:04Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtils.java", "diffHunk": "@@ -140,19 +132,114 @@ protected static StringBuffer sqlUpsertQuery(LinkedHashMap<String, ArrayList<Jso\n                 sqlInstance,\n                 destination);\n \n-        if (sqlInstance.equals(\"postgresql\")) {\n-            query.append(insertQuery).\n-                    append(\"ON CONFLICT \").append(\"(\").append(uniqueKey).append(\") \").\n-                    append(\"DO \").\n-                    append(\"UPDATE SET \").append(updateSet).append(\" \").\n-                    append(\"WHERE \").append(postgisDestination).append(\".\").append(uniqueKey).append(\"=\").append(postgisTempReference).append(\".\").append(uniqueKey).append(\" \").\n-                    append(\"AND \").append(\"to_timestamp(\").append(postgisDestination).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"') \").\n-                    append(\"< \").append(\"to_timestamp(\").append(postgisTempReference).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"')\");\n+        query.append(insertQuery).\n+                append(\"ON CONFLICT \").append(\"(\").append(uniqueKey).append(\") \").\n+                append(\"DO \").\n+                append(\"UPDATE SET \").append(updateSet).append(\" \").\n+                append(\"WHERE \").append(postgisDestination).append(\".\").append(uniqueKey).append(\"=\").append(postgisTempReference).append(\".\").append(uniqueKey).append(\" \").\n+                append(\"AND \").append(\"to_timestamp(\").append(postgisDestination).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"') \").\n+                append(\"< \").append(\"to_timestamp(\").append(postgisTempReference).append(\".\").append(timestampKey).append(\", '\").append(timestampFormat).append(\"')\");\n+\n+        LOGGER.debug(\"[NGSISQLUtils.sqlUpsertQuery] Preparing Upsert query: \" + query.toString());\n+        return query;\n+    }\n+\n+    /**\n+     * Sql upsert query for MySQL string buffer.\n+     *\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param sqlInstance     the sql instance\n+     * @param destination     the destination\n+     * @return the string buffer\n+     */\n+    protected static StringBuffer mySqlUpsertQuery(LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                                        LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                                        String tableName,\n+                                                        String tableSuffix,\n+                                                        String uniqueKey,\n+                                                        String timestampKey,\n+                                                        String timestampFormat,\n+                                                        String sqlInstance,\n+                                                        String destination) {\n+\n+        StringBuffer updateSet = new StringBuffer();\n+        StringBuffer query = new StringBuffer();\n+        StringBuffer dateKeyUpdate = new StringBuffer();\n+        boolean first = true;\n+\n+        for (String key : lastData.keySet()) {\n+            if (!key.equals(timestampKey)) {\n+                if (!key.equals(uniqueKey) && first) {\n+                    first = false;\n+                } else if (!key.equals(uniqueKey)) {\n+                    updateSet.append(\", \");\n+                }\n+                if (!key.equals(uniqueKey)) {\n+                    updateSet.append(mySQLUpdateRecordQuery(key, uniqueKey, timestampKey, timestampFormat));\n+                }\n+            } else {\n+                dateKeyUpdate.append(mySQLUpdateRecordQuery(key, uniqueKey, timestampKey, timestampFormat));\n+            }\n+        }\n+        // The key that corresponds to the timestampKey must be updated at the end, if it is updated before any other key.\n+        // The subsecuent timestamp validations will be allways false, because the date would already be updated.\n+        if (first) {\n+            updateSet.append(dateKeyUpdate);\n+        } else {\n+            updateSet.append(\", \").append(dateKeyUpdate);\n         }\n+\n+        StringBuffer insertQuery = sqlInsertQuery(lastData,\n+                tableName.concat(tableSuffix),\n+                sqlInstance,\n+                destination);\n+\n+        query.append(insertQuery).\n+                append(\"ON DUPLICATE KEY \").\n+                append(\"UPDATE \").append(updateSet);\n+\n         LOGGER.debug(\"[NGSISQLUtils.sqlUpsertQuery] Preparing Upsert query: \" + query.toString());\n         return query;\n     }\n \n+    /**\n+     * Creates a update statement for an upsert query\n+     *\n+     * @param key     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @return the string buffer like the following one\n+     * recvTime=IF((entityId=VALUES(entityId)) AND (STR_TO_DATE(recvTime, '%Y-%m-%d %H:%i:%s.%f') < (STR_TO_DATE(VALUES(recvTime), '%Y-%m-%d %H:%i:%s.%f'))), VALUES(recvTime), recvTime)\n+     */\n+\n+    protected static StringBuffer mySQLUpdateRecordQuery(String key,\n+                                                       String uniqueKey,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNDkwMg=="}, "originalCommit": {"oid": "803356bc6288c2273ffb39529151d556fb54ba58"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyODI2Nzc0OnYy", "diffSide": "RIGHT", "path": "cygnus-common/src/test/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDowODowNFrOHcevvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQxNDoyNjowNFrOHcfjIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTkxOA==", "bodyText": "Should this new dependence be added to pom.xml ?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499625918", "createdAt": "2020-10-05T14:08:04Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-common/src/test/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtilsTest.java", "diffHunk": "@@ -18,9 +18,9 @@\n \n package com.telefonica.iot.cygnus.backends.sql;\n \n+import com.amazonaws.services.dynamodbv2.xspec.L;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a6ef257335bcb2c419b38e841d7a683dfeabe76"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYzOTA3Mw==", "bodyText": "Not really. Not sure why I added it, may be an auto suggestion from IntelliJ. Anyway, I removed it.\nFixed in e0aa884", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1944#discussion_r499639073", "createdAt": "2020-10-05T14:26:04Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-common/src/test/java/com/telefonica/iot/cygnus/backends/sql/SQLQueryUtilsTest.java", "diffHunk": "@@ -18,9 +18,9 @@\n \n package com.telefonica.iot.cygnus.backends.sql;\n \n+import com.amazonaws.services.dynamodbv2.xspec.L;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTYyNTkxOA=="}, "originalCommit": {"oid": "3a6ef257335bcb2c419b38e841d7a683dfeabe76"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2370, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}