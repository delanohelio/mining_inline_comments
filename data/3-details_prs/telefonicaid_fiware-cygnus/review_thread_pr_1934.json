{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDMyNzky", "number": 1934, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxMjo0NVrOEnCWNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzozODo0M1rOEnV_nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MzY4MzczOnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericColumnAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxMjo0NVrOHXZ_MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzoxMjo0NVrOHXZ_MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMwNTA3Mg==", "bodyText": "Maybe add a comment with the link doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md ?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494305072", "createdAt": "2020-09-24T13:12:45Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericColumnAggregator.java", "diffHunk": "@@ -149,6 +150,35 @@ public void aggregate(NGSIEvent event) {\n             } // if\n         } // for\n         setAggregation(aggregation);\n+        if (isEnableLastData()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzk2MTU5OnYy", "diffSide": "RIGHT", "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowNzoyNlrOHXcsww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowNzoxNVrOHXfhRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTUwNw==", "bodyText": "CNR entry corresponding to this PR should be added.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494349507", "createdAt": "2020-09-24T14:07:26Z", "author": {"login": "fgalan"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "diffHunk": "@@ -38,6 +38,9 @@\n import java.util.Date;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NTcxNg==", "bodyText": "Fixed in 155a1ab", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494395716", "createdAt": "2020-09-24T15:07:15Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-common/src/main/java/com/telefonica/iot/cygnus/backends/sql/SQLBackendImpl.java", "diffHunk": "@@ -38,6 +38,9 @@\n import java.util.Date;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM0OTUwNw=="}, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzk2ODM0OnYy", "diffSide": "RIGHT", "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDowOTowNFrOHXcxKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowODowNVrOHXfjnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MDYzMg==", "bodyText": "Maybe an explicit list of which sinks supporting this feature should be included.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494350632", "createdAt": "2020-09-24T14:09:04Z", "author": {"login": "fgalan"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.\n+\n+Cygnus is capable to perform an `upsert` operation on given SQL Sinks.  This Operation doesn't overrides the usual inserts on the usual way.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM2NjU5NQ==", "bodyText": "I added the reference to this document on the PostgreSQLSink document. To keep a little more open this document. IMHO that's more clear.\nBut sure, I can add an explicit list of the sinks. Do you want me to do it?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494366595", "createdAt": "2020-09-24T14:29:41Z", "author": {"login": "IvanHdzC"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.\n+\n+Cygnus is capable to perform an `upsert` operation on given SQL Sinks.  This Operation doesn't overrides the usual inserts on the usual way.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MDYzMg=="}, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM3MzA3MQ==", "bodyText": "But sure, I can add an explicit list of the sinks. Do you want me to do it?\n\nNot 100% sure, but I think is a good idea :) Note that the user could land directly in last_data_function.md so it's a good idea to know at a first glance at the top of the document which sinks support this functionality.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494373071", "createdAt": "2020-09-24T14:38:02Z", "author": {"login": "fgalan"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.\n+\n+Cygnus is capable to perform an `upsert` operation on given SQL Sinks.  This Operation doesn't overrides the usual inserts on the usual way.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MDYzMg=="}, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NjMxNg==", "bodyText": "Fixed in 3be5654", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494396316", "createdAt": "2020-09-24T15:08:05Z", "author": {"login": "IvanHdzC"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.\n+\n+Cygnus is capable to perform an `upsert` operation on given SQL Sinks.  This Operation doesn't overrides the usual inserts on the usual way.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MDYzMg=="}, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Mzk3NzE1OnYy", "diffSide": "RIGHT", "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNDoxMDo1MlrOHXc2mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNDo0N1rOHXgT6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjAyNg==", "bodyText": "Nice and comprehensive description of the functionality :)\nHowever, let's try to avoid having a \"orphan\" documention. In particular:\n\nInclude a link to it in the corresponding .md indexes files\nInclude it in mkdocs.yml", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494352026", "createdAt": "2020-09-24T14:10:52Z", "author": {"login": "fgalan"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NzU0OA==", "bodyText": "Include a link to it in the corresponding .md indexes files\n\nThe postgresql sink document references this new document. Do you thing it should be included in any other document?\n\n mkdocs Fixed in 5a1e3dd", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494397548", "createdAt": "2020-09-24T15:09:47Z", "author": {"login": "IvanHdzC"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjAyNg=="}, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwODY4Mg==", "bodyText": "The postgresql sink document references this new document. Do you thing it should be included in any other document?\n\nYou are right (I missed that in my first review :) and I that plus mkdocs.yml is enough.\nNTC from my point of view", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494408682", "createdAt": "2020-09-24T15:24:47Z", "author": {"login": "fgalan"}, "path": "doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md", "diffHunk": "@@ -0,0 +1,161 @@\n+# Last Data functionality.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM1MjAyNg=="}, "originalCommit": {"oid": "714d1b454687b6b096b1dd83fe6837ecdf9e43b8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDI0NzI5OnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/utils/NGSISQLUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTowNjo0OVrOHXff5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMDo1MTo1MlrOHX-xnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NTM2Ng==", "bodyText": "Including both (postgresql and postgis) ?", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494395366", "createdAt": "2020-09-24T15:06:49Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/utils/NGSISQLUtils.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.telefonica.iot.cygnus.utils;\n+\n+import com.google.gson.JsonElement;\n+import com.telefonica.iot.cygnus.log.CygnusLogger;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+\n+/**\n+ * The type Ngsisql utils.\n+ */\n+public class NGSISQLUtils {\n+\n+    private static final CygnusLogger LOGGER = new CygnusLogger(NGSISQLUtils.class);\n+\n+    private static final String POSTGRES_FIELDS_MARK = \"\";\n+    private static final String MYSQL_FIELDS_MARK = \"'\";\n+    private static final String SEPARATION_MARK = \",\";\n+\n+    /**\n+     * Upsert statement prepared statement.\n+     *\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param sqlInstance     the sql instance\n+     * @param destination     the destination\n+     * @param connection      the connection\n+     * @param attrNativeTypes the attr native types\n+     * @return the prepared statement\n+     * @throws SQLException the sql exception\n+     */\n+    public static PreparedStatement upsertStatement (LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                            LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                            String tableName,\n+                                            String tableSuffix,\n+                                            String uniqueKey,\n+                                            String timestampKey,\n+                                            String timestampFormat,\n+                                            String sqlInstance,\n+                                            String destination,\n+                                            Connection connection,\n+                                            boolean attrNativeTypes) throws SQLException {\n+\n+\n+        String query = sqlUpsertQuery(aggregation,\n+                lastData,\n+                tableName,\n+                tableSuffix,\n+                uniqueKey,\n+                timestampKey,\n+                timestampFormat,\n+                sqlInstance,\n+                destination).toString();\n+\n+        PreparedStatement previousStatement = connection.prepareStatement(query);\n+        PreparedStatement preparedStatement = null;\n+        try {\n+            preparedStatement = addJsonValues(previousStatement,\n+                    lastData,\n+                    attrNativeTypes);\n+        } catch (SQLException e) {\n+            LOGGER.error(sqlInstance + \" SQLEXCEPTION Error creating upsert statement \" + e);\n+        } catch (Exception e) {\n+            LOGGER.error(sqlInstance + \" GENERICEXCEPTION Error creating upsert statement \" + e);\n+        }\n+        LOGGER.info(\"[NGSISQLUtils.upsertStatement] PreparedStatement for upsert created successfully, all batches added. \" + query);\n+        return preparedStatement;\n+\n+    }\n+\n+    /**\n+     * Sql upsert query string buffer.\n+     *\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param sqlInstance     the sql instance\n+     * @param destination     the destination\n+     * @return the string buffer\n+     */\n+    protected static StringBuffer sqlUpsertQuery(LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                              LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                              String tableName,\n+                                              String tableSuffix,\n+                                              String uniqueKey,\n+                                              String timestampKey,\n+                                              String timestampFormat,\n+                                              String sqlInstance,\n+                                              String destination) {\n+\n+        StringBuffer fieldsForInsert;\n+        StringBuffer valuesForInsert = sqlQuestionValues(lastData.keySet());\n+        StringBuffer updateSet = new StringBuffer();\n+        StringBuffer postgisTempReference = new StringBuffer(\"EXCLUDED\");\n+        StringBuffer postgisDestination = new StringBuffer(destination).append(\".\").append(tableName).append(tableSuffix);\n+        StringBuffer query = new StringBuffer();\n+        boolean first = true;\n+\n+        for (String key : lastData.keySet()) {\n+            if (!key.equals(uniqueKey) && first) {\n+                updateSet.append(key).append(\"=\").append(postgisTempReference).append(\".\").append(key);\n+                first = false;\n+            } else if (!key.equals(uniqueKey)) {\n+                updateSet.append(\", \").append(key).append(\"=\").append(postgisTempReference).append(\".\").append(key);\n+            }\n+        }\n+\n+        if (sqlInstance.equals(\"postgresql\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3be56543ed106087a647eac3cb71c863780a03fb"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDkwNzgwNQ==", "bodyText": "That's correct. In both cases this String sqlInstance is provided by the sink. In Postgis and PostgreSQL is handled as postgresql . This is because the driver used to connect to the database is the same one.", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494907805", "createdAt": "2020-09-25T10:51:52Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/utils/NGSISQLUtils.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.telefonica.iot.cygnus.utils;\n+\n+import com.google.gson.JsonElement;\n+import com.telefonica.iot.cygnus.log.CygnusLogger;\n+\n+import java.sql.Connection;\n+import java.sql.PreparedStatement;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Set;\n+\n+/**\n+ * The type Ngsisql utils.\n+ */\n+public class NGSISQLUtils {\n+\n+    private static final CygnusLogger LOGGER = new CygnusLogger(NGSISQLUtils.class);\n+\n+    private static final String POSTGRES_FIELDS_MARK = \"\";\n+    private static final String MYSQL_FIELDS_MARK = \"'\";\n+    private static final String SEPARATION_MARK = \",\";\n+\n+    /**\n+     * Upsert statement prepared statement.\n+     *\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param sqlInstance     the sql instance\n+     * @param destination     the destination\n+     * @param connection      the connection\n+     * @param attrNativeTypes the attr native types\n+     * @return the prepared statement\n+     * @throws SQLException the sql exception\n+     */\n+    public static PreparedStatement upsertStatement (LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                            LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                            String tableName,\n+                                            String tableSuffix,\n+                                            String uniqueKey,\n+                                            String timestampKey,\n+                                            String timestampFormat,\n+                                            String sqlInstance,\n+                                            String destination,\n+                                            Connection connection,\n+                                            boolean attrNativeTypes) throws SQLException {\n+\n+\n+        String query = sqlUpsertQuery(aggregation,\n+                lastData,\n+                tableName,\n+                tableSuffix,\n+                uniqueKey,\n+                timestampKey,\n+                timestampFormat,\n+                sqlInstance,\n+                destination).toString();\n+\n+        PreparedStatement previousStatement = connection.prepareStatement(query);\n+        PreparedStatement preparedStatement = null;\n+        try {\n+            preparedStatement = addJsonValues(previousStatement,\n+                    lastData,\n+                    attrNativeTypes);\n+        } catch (SQLException e) {\n+            LOGGER.error(sqlInstance + \" SQLEXCEPTION Error creating upsert statement \" + e);\n+        } catch (Exception e) {\n+            LOGGER.error(sqlInstance + \" GENERICEXCEPTION Error creating upsert statement \" + e);\n+        }\n+        LOGGER.info(\"[NGSISQLUtils.upsertStatement] PreparedStatement for upsert created successfully, all batches added. \" + query);\n+        return preparedStatement;\n+\n+    }\n+\n+    /**\n+     * Sql upsert query string buffer.\n+     *\n+     * @param aggregation     the aggregation\n+     * @param lastData        the last data\n+     * @param tableName       the table name\n+     * @param tableSuffix     the table suffix\n+     * @param uniqueKey       the unique key\n+     * @param timestampKey    the timestamp key\n+     * @param timestampFormat the timestamp format\n+     * @param sqlInstance     the sql instance\n+     * @param destination     the destination\n+     * @return the string buffer\n+     */\n+    protected static StringBuffer sqlUpsertQuery(LinkedHashMap<String, ArrayList<JsonElement>> aggregation,\n+                                              LinkedHashMap<String, ArrayList<JsonElement>> lastData,\n+                                              String tableName,\n+                                              String tableSuffix,\n+                                              String uniqueKey,\n+                                              String timestampKey,\n+                                              String timestampFormat,\n+                                              String sqlInstance,\n+                                              String destination) {\n+\n+        StringBuffer fieldsForInsert;\n+        StringBuffer valuesForInsert = sqlQuestionValues(lastData.keySet());\n+        StringBuffer updateSet = new StringBuffer();\n+        StringBuffer postgisTempReference = new StringBuffer(\"EXCLUDED\");\n+        StringBuffer postgisDestination = new StringBuffer(destination).append(\".\").append(tableName).append(tableSuffix);\n+        StringBuffer query = new StringBuffer();\n+        boolean first = true;\n+\n+        for (String key : lastData.keySet()) {\n+            if (!key.equals(uniqueKey) && first) {\n+                updateSet.append(key).append(\"=\").append(postgisTempReference).append(\".\").append(key);\n+                first = false;\n+            } else if (!key.equals(uniqueKey)) {\n+                updateSet.append(\", \").append(key).append(\"=\").append(postgisTempReference).append(\".\").append(key);\n+            }\n+        }\n+\n+        if (sqlInstance.equals(\"postgresql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDM5NTM2Ng=="}, "originalCommit": {"oid": "3be56543ed106087a647eac3cb71c863780a03fb"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMzNzI3OnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/utils/NGSISQLUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNjowNFrOHXgX3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozMDo1MlrOHXgmhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwOTY5NQ==", "bodyText": "License header missing", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494409695", "createdAt": "2020-09-24T15:26:04Z", "author": {"login": "fgalan"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/utils/NGSISQLUtils.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.telefonica.iot.cygnus.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1e3ddd765e6fc1e1b7e85efd5d80d98ea10cea"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzQ0Ng==", "bodyText": "Fixed in 527c45f", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494413446", "createdAt": "2020-09-24T15:30:52Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/utils/NGSISQLUtils.java", "diffHunk": "@@ -0,0 +1,268 @@\n+package com.telefonica.iot.cygnus.utils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQwOTY5NQ=="}, "originalCommit": {"oid": "5a1e3ddd765e6fc1e1b7e85efd5d80d98ea10cea"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NDMzOTU3OnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/utils/NGSISQLUtilsTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNToyNjozMlrOHXgZSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNTozMDo1N1rOHXgm1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMDA1Ng==", "bodyText": "License header missing", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494410056", "createdAt": "2020-09-24T15:26:32Z", "author": {"login": "fgalan"}, "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/utils/NGSISQLUtilsTest.java", "diffHunk": "@@ -0,0 +1,379 @@\n+package com.telefonica.iot.cygnus.utils;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a1e3ddd765e6fc1e1b7e85efd5d80d98ea10cea"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMzUyNg==", "bodyText": "Fixed in 527c45f", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494413526", "createdAt": "2020-09-24T15:30:57Z", "author": {"login": "IvanHdzC"}, "path": "cygnus-ngsi/src/test/java/com/telefonica/iot/cygnus/utils/NGSISQLUtilsTest.java", "diffHunk": "@@ -0,0 +1,379 @@\n+package com.telefonica.iot.cygnus.utils;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDQxMDA1Ng=="}, "originalCommit": {"oid": "5a1e3ddd765e6fc1e1b7e85efd5d80d98ea10cea"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5NjkwMjcxOnYy", "diffSide": "RIGHT", "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericColumnAggregator.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzozODo0M1rOHX4eXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQwNzozODo0M1rOHX4eXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDgwNDU3NA==", "bodyText": "some few comments are welcome", "url": "https://github.com/telefonicaid/fiware-cygnus/pull/1934#discussion_r494804574", "createdAt": "2020-09-25T07:38:43Z", "author": {"login": "AlvaroVega"}, "path": "cygnus-ngsi/src/main/java/com/telefonica/iot/cygnus/aggregation/NGSIGenericColumnAggregator.java", "diffHunk": "@@ -149,6 +150,35 @@ public void aggregate(NGSIEvent event) {\n             } // if\n         } // for\n         setAggregation(aggregation);\n+        if (isEnableLastData()) { // More detail in doc/cygnus-ngsi/flume_extensions_catalogue/last_data_function.md\n+            boolean updateLastData = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "527c45fe9eb4d2a49441ed9532fa068876872000"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2513, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}