{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1MDE0NDcy", "number": 3757, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTozNjo0NlrODy1alA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTozNjo0NlrODy1alA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NjMwNTQ4OnYy", "diffSide": "RIGHT", "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwOTozNjo0NlrOGHHFtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMzo1Mjo0N1rOGHO5ZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTM2Nw==", "bodyText": "A question, is the check of !client.getUri().equals(prepareStorageBlobUri(exchange, cfg) even needed? I mean if this is out, you don't need even to have extra configs to disable the URI validation. What others here think? Because the Azure URI segment could change in the future, we never know", "url": "https://github.com/apache/camel/pull/3757#discussion_r410109367", "createdAt": "2020-04-17T09:36:46Z", "author": {"login": "omarsmak"}, "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "diffHunk": "@@ -178,7 +179,7 @@ public static CloudBlob getConfiguredClient(Exchange exchange, BlobServiceConfig\n             if (client.getClass() != expectedCls) {\n                 throw new IllegalArgumentException(\"Invalid Client Type\");\n             }\n-            if (!client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {\n+            if (validateURI && !client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9393862092bbc944e606b9bdcbe906e3ccaf5f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExMjc5Mg==", "bodyText": "Yeah I did consider that. But, even if you're using a custom client, it may still be desirable to do some validation, hence I added a new URI param to control it.", "url": "https://github.com/apache/camel/pull/3757#discussion_r410112792", "createdAt": "2020-04-17T09:43:01Z", "author": {"login": "jamesnetherton"}, "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "diffHunk": "@@ -178,7 +179,7 @@ public static CloudBlob getConfiguredClient(Exchange exchange, BlobServiceConfig\n             if (client.getClass() != expectedCls) {\n                 throw new IllegalArgumentException(\"Invalid Client Type\");\n             }\n-            if (!client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {\n+            if (validateURI && !client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTM2Nw=="}, "originalCommit": {"oid": "d9393862092bbc944e606b9bdcbe906e3ccaf5f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDExNTQxOA==", "bodyText": "I see, but for the me the whole point of using a custom client (inherited from the main CloudBlob) clients to bypass these kind of validations, isn't?", "url": "https://github.com/apache/camel/pull/3757#discussion_r410115418", "createdAt": "2020-04-17T09:48:07Z", "author": {"login": "omarsmak"}, "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "diffHunk": "@@ -178,7 +179,7 @@ public static CloudBlob getConfiguredClient(Exchange exchange, BlobServiceConfig\n             if (client.getClass() != expectedCls) {\n                 throw new IllegalArgumentException(\"Invalid Client Type\");\n             }\n-            if (!client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {\n+            if (validateURI && !client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTM2Nw=="}, "originalCommit": {"oid": "d9393862092bbc944e606b9bdcbe906e3ccaf5f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEyMzk4OA==", "bodyText": "I'm not the author of the component so I can't be sure what the original intent was.\nIn theory, there are some customizations that you can set on the client without changing the service URL (E.g blob snapshot ID) etc. So in that case the validation logic would still be valid.\nI'm not too bothered which solution we opt for. I don't think we do such validation in the new camel-azure-storage-blob component do we? So maybe it does make sense to remove it from camel-azure for consistency.", "url": "https://github.com/apache/camel/pull/3757#discussion_r410123988", "createdAt": "2020-04-17T10:04:05Z", "author": {"login": "jamesnetherton"}, "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "diffHunk": "@@ -178,7 +179,7 @@ public static CloudBlob getConfiguredClient(Exchange exchange, BlobServiceConfig\n             if (client.getClass() != expectedCls) {\n                 throw new IllegalArgumentException(\"Invalid Client Type\");\n             }\n-            if (!client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {\n+            if (validateURI && !client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTM2Nw=="}, "originalCommit": {"oid": "d9393862092bbc944e606b9bdcbe906e3ccaf5f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEzMTUxNQ==", "bodyText": "Nope we don't, when we ported this component to the new v12 APIs, we omitted this part for now as we didn't see the the need to include such checks, IMHO a client if provided, should be agnostic as much as possible from such checks and allows some flexibility. IMHO I am in favour of removing it and simplify the configurations, what others think? e.g @oscerd ?", "url": "https://github.com/apache/camel/pull/3757#discussion_r410131515", "createdAt": "2020-04-17T10:19:30Z", "author": {"login": "omarsmak"}, "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "diffHunk": "@@ -178,7 +179,7 @@ public static CloudBlob getConfiguredClient(Exchange exchange, BlobServiceConfig\n             if (client.getClass() != expectedCls) {\n                 throw new IllegalArgumentException(\"Invalid Client Type\");\n             }\n-            if (!client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {\n+            if (validateURI && !client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTM2Nw=="}, "originalCommit": {"oid": "d9393862092bbc944e606b9bdcbe906e3ccaf5f6"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDIzNzI4NQ==", "bodyText": "I think, until you don't modify the client, but just doing some validation it is ok. The problem is when you modify the state of the provided client eventually. So to me this is ok.", "url": "https://github.com/apache/camel/pull/3757#discussion_r410237285", "createdAt": "2020-04-17T13:52:47Z", "author": {"login": "oscerd"}, "path": "components/camel-azure/src/main/java/org/apache/camel/component/azure/blob/BlobServiceUtil.java", "diffHunk": "@@ -178,7 +179,7 @@ public static CloudBlob getConfiguredClient(Exchange exchange, BlobServiceConfig\n             if (client.getClass() != expectedCls) {\n                 throw new IllegalArgumentException(\"Invalid Client Type\");\n             }\n-            if (!client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {\n+            if (validateURI && !client.getUri().equals(prepareStorageBlobUri(exchange, cfg))) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDEwOTM2Nw=="}, "originalCommit": {"oid": "d9393862092bbc944e606b9bdcbe906e3ccaf5f6"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4982, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}