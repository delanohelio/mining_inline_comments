{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUyMTQ5NTIz", "number": 4016, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDowNlrOEP_aEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxOTo1MFrOESryEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAyOTYxOnYy", "diffSide": "RIGHT", "path": "components/camel-opentelemetry/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDowNlrOGz69Ug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDowNlrOGz69Ug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjUzMA==", "bodyText": "you should use the version from parent POM", "url": "https://github.com/apache/camel/pull/4016#discussion_r457096530", "createdAt": "2020-07-20T06:34:06Z", "author": {"login": "oscerd"}, "path": "components/camel-opentelemetry/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.camel</groupId>\n+    <artifactId>components</artifactId>\n+    <version>3.5.0-SNAPSHOT</version>\n+  </parent>\n+\n+\n+  <artifactId>camel-opentelemetry</artifactId>\n+  <packaging>jar</packaging>\n+  <name>Camel :: OpenTelemetry</name>\n+  <description>Distributed tracing using OpenTelemetry</description>\n+\n+  <properties>\n+    <firstVersion>3.5.0</firstVersion>\n+    <label>monitoring,microservice</label>\n+    <title>OpenTelemetry</title>\n+    <opentracing-agent.lib>${project.build.directory}/lib</opentracing-agent.lib>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-support</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-tracing</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-netty-shaded</artifactId>\n+      <version>1.28.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c225d92cd45382730829d3200ec63c9fe5acbdb1"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAzMDI1OnYy", "diffSide": "RIGHT", "path": "components/camel-opentelemetry/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDoyMFrOGz69xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDoyMFrOGz69xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NjY0NA==", "bodyText": "It should be declared in the parent POM", "url": "https://github.com/apache/camel/pull/4016#discussion_r457096644", "createdAt": "2020-07-20T06:34:20Z", "author": {"login": "oscerd"}, "path": "components/camel-opentelemetry/pom.xml", "diffHunk": "@@ -0,0 +1,73 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.camel</groupId>\n+    <artifactId>components</artifactId>\n+    <version>3.5.0-SNAPSHOT</version>\n+  </parent>\n+\n+\n+  <artifactId>camel-opentelemetry</artifactId>\n+  <packaging>jar</packaging>\n+  <name>Camel :: OpenTelemetry</name>\n+  <description>Distributed tracing using OpenTelemetry</description>\n+\n+  <properties>\n+    <firstVersion>3.5.0</firstVersion>\n+    <label>monitoring,microservice</label>\n+    <title>OpenTelemetry</title>\n+    <opentracing-agent.lib>${project.build.directory}/lib</opentracing-agent.lib>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-support</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-tracing</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-netty-shaded</artifactId>\n+      <version>1.28.0</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentelemetry</groupId>\n+      <artifactId>opentelemetry-sdk</artifactId>\n+      <version>0.6.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c225d92cd45382730829d3200ec63c9fe5acbdb1"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAzMjA5OnYy", "diffSide": "RIGHT", "path": "components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/OpenTelemetrySpanWrapper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDo0NVrOGz6-sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNDo0NVrOGz6-sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5Njg4Mg==", "bodyText": "Please use the explicit imports, no * operator", "url": "https://github.com/apache/camel/pull/4016#discussion_r457096882", "createdAt": "2020-07-20T06:34:45Z", "author": {"login": "oscerd"}, "path": "components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/OpenTelemetrySpanWrapper.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.opentelemetry;\n+\n+import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c225d92cd45382730829d3200ec63c9fe5acbdb1"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjAzNzE4OnYy", "diffSide": "RIGHT", "path": "components/camel-opentracing/src/main/java/org/apache/camel/opentracing/GetBaggageProcessor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNTo1N1rOGz7BRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNjozOTo1MlrOG0Wblw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzU0MQ==", "bodyText": "This will probably create conflicts with this #4001 once we merge it", "url": "https://github.com/apache/camel/pull/4016#discussion_r457097541", "createdAt": "2020-07-20T06:35:57Z", "author": {"login": "oscerd"}, "path": "components/camel-opentracing/src/main/java/org/apache/camel/opentracing/GetBaggageProcessor.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.apache.camel.spi.IdAware;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c225d92cd45382730829d3200ec63c9fe5acbdb1"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzU0NjY0Nw==", "bodyText": "I see :( I'll fix those conflicts.", "url": "https://github.com/apache/camel/pull/4016#discussion_r457546647", "createdAt": "2020-07-20T16:39:52Z", "author": {"login": "rubenvp8510"}, "path": "components/camel-opentracing/src/main/java/org/apache/camel/opentracing/GetBaggageProcessor.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.apache.camel.spi.IdAware;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5NzU0MQ=="}, "originalCommit": {"oid": "c225d92cd45382730829d3200ec63c9fe5acbdb1"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1MjA0MDUyOnYy", "diffSide": "RIGHT", "path": "components/camel-opentracing/src/test/java/org/apache/camel/opentracing/CamelOpenTracingTestSupport.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjo0NlrOGz7DEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwNjozNjo0NlrOGz7DEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzA5ODAwMA==", "bodyText": "Please use the explicit imports.", "url": "https://github.com/apache/camel/pull/4016#discussion_r457098000", "createdAt": "2020-07-20T06:36:46Z", "author": {"login": "oscerd"}, "path": "components/camel-opentracing/src/test/java/org/apache/camel/opentracing/CamelOpenTracingTestSupport.java", "diffHunk": "@@ -14,16 +14,11 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package org.apache.camel.opentracing;\n \n-import java.net.URI;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n+import java.net.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c225d92cd45382730829d3200ec63c9fe5acbdb1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI1MDY4OnYy", "diffSide": "RIGHT", "path": "components/camel-opentelemetry/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMzozN1rOG3_mIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxMzozN1rOG3_mIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NjgxNw==", "bodyText": "Use version placeholder", "url": "https://github.com/apache/camel/pull/4016#discussion_r461366817", "createdAt": "2020-07-28T07:13:37Z", "author": {"login": "davsclaus"}, "path": "components/camel-opentelemetry/pom.xml", "diffHunk": "@@ -0,0 +1,89 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.camel</groupId>\n+    <artifactId>components</artifactId>\n+    <version>3.5.0-SNAPSHOT</version>\n+  </parent>\n+\n+\n+  <artifactId>camel-opentelemetry</artifactId>\n+  <packaging>jar</packaging>\n+  <name>Camel :: OpenTelemetry</name>\n+  <description>Distributed tracing using OpenTelemetry</description>\n+\n+  <properties>\n+    <firstVersion>3.5.0</firstVersion>\n+    <label>monitoring,microservice</label>\n+    <title>OpenTelemetry</title>\n+    <opentracing-agent.lib>${project.build.directory}/lib</opentracing-agent.lib>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-support</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-tracing</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.grpc</groupId>\n+      <artifactId>grpc-netty-shaded</artifactId>\n+      <version>${grpc-version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentelemetry</groupId>\n+      <artifactId>opentelemetry-sdk</artifactId>\n+      <version>${opentelemetry-version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentelemetry</groupId>\n+      <artifactId>opentelemetry-api</artifactId>\n+      <version>${opentelemetry-version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentelemetry</groupId>\n+      <artifactId>opentelemetry-exporters-otlp</artifactId>\n+      <version>${opentelemetry-version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.logging.log4j</groupId>\n+      <artifactId>log4j-slf4j-impl</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.camel</groupId>\n+      <artifactId>camel-test-spring-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.opentelemetry</groupId>\n+      <artifactId>opentelemetry-exporters-inmemory</artifactId>\n+      <version>0.6.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bae0052d78ef2858bcd328d7268baf3a7e98b3a"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI1MzQzOnYy", "diffSide": "RIGHT", "path": "components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/OpenTelemetrySpanAdapter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNDoyOVrOG3_ntg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNDoyOVrOG3_ntg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NzIyMg==", "bodyText": "Remove empty line", "url": "https://github.com/apache/camel/pull/4016#discussion_r461367222", "createdAt": "2020-07-28T07:14:29Z", "author": {"login": "davsclaus"}, "path": "components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/OpenTelemetrySpanAdapter.java", "diffHunk": "@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.opentelemetry;\n+\n+import java.util.EnumMap;\n+import java.util.Map;\n+\n+import io.opentelemetry.common.AttributeValue;\n+import io.opentelemetry.common.Attributes;\n+import io.opentelemetry.trace.attributes.SemanticAttributes;\n+import org.apache.camel.tracing.SpanAdapter;\n+import org.apache.camel.tracing.Tag;\n+\n+public class OpenTelemetrySpanAdapter implements SpanAdapter {\n+    private static final String DEFAULT_EVENT_NAME = \"log\";\n+\n+    private static EnumMap<Tag, String> tagMap = new EnumMap<>(Tag.class);\n+\n+    static {\n+        tagMap.put(Tag.COMPONENT, \"component\");\n+        tagMap.put(Tag.DB_TYPE, SemanticAttributes.DB_TYPE.key());\n+        tagMap.put(Tag.DB_STATEMENT, SemanticAttributes.DB_STATEMENT.key());\n+        tagMap.put(Tag.DB_INSTANCE, SemanticAttributes.DB_INSTANCE.key());\n+        tagMap.put(Tag.HTTP_METHOD, SemanticAttributes.HTTP_METHOD.key());\n+        tagMap.put(Tag.HTTP_STATUS, SemanticAttributes.HTTP_STATUS_CODE.key());\n+        tagMap.put(Tag.HTTP_URL, SemanticAttributes.HTTP_URL.key());\n+        tagMap.put(Tag.MESSAGE_BUS_DESTINATION, \"message_bus.destination\");\n+    }\n+\n+\n+    io.opentelemetry.trace.Span span;\n+\n+    OpenTelemetrySpanAdapter(io.opentelemetry.trace.Span span) {\n+        this.span = span;\n+    }\n+\n+    io.opentelemetry.trace.Span getOpenTelemetrySpan() {\n+        return this.span;\n+    }\n+\n+    @Override public void setComponent(String component) {\n+        this.span.setAttribute(\"component\", component);\n+    }\n+\n+    @Override public void setError(boolean error) {\n+        this.span.setAttribute(\"error\", error);\n+    }\n+\n+    @Override public void setTag(Tag key, String value) {\n+        this.span.setAttribute(tagMap.get(key), value);\n+    }\n+\n+    @Override public void setTag(Tag key, Number value) {\n+        this.span.setAttribute(tagMap.get(key), value.intValue());\n+    }\n+\n+    @Override public void setTag(String key, String value) {\n+        this.span.setAttribute(key, value);\n+    }\n+\n+    @Override public void setTag(String key, Number value) {\n+        this.span.setAttribute(key, value.intValue());\n+    }\n+\n+    @Override public void setTag(String key, Boolean value) {\n+        this.span.setAttribute(key, value);\n+    }\n+\n+    @Override public void log(Map<String, String> fields) {\n+        span.addEvent(getEventNameFromFields(fields), convertToAttributes(fields));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bae0052d78ef2858bcd328d7268baf3a7e98b3a"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI1NzgzOnYy", "diffSide": "RIGHT", "path": "components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/propagators/OpenTelemetryGetter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNTo1N1rOG3_qfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxNTo1N1rOG3_qfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2NzkzMw==", "bodyText": "We do not use Nullable annotations in camel (yet)", "url": "https://github.com/apache/camel/pull/4016#discussion_r461367933", "createdAt": "2020-07-28T07:15:57Z", "author": {"login": "davsclaus"}, "path": "components/camel-opentelemetry/src/main/java/org/apache/camel/opentelemetry/propagators/OpenTelemetryGetter.java", "diffHunk": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.opentelemetry.propagators;\n+\n+import javax.annotation.Nullable;\n+\n+import io.opentelemetry.context.propagation.HttpTextFormat;\n+import org.apache.camel.tracing.ExtractAdapter;\n+\n+public class OpenTelemetryGetter implements HttpTextFormat.Getter<ExtractAdapter> {\n+\n+    @Nullable @Override public String get(ExtractAdapter adapter, String key) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bae0052d78ef2858bcd328d7268baf3a7e98b3a"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDI3MTU0OnYy", "diffSide": "RIGHT", "path": "components/camel-tracing/src/main/java/org/apache/camel/tracing/Tracer.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxOTo1MFrOG3_yWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwNzoxOTo1MFrOG3_yWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTM2OTk0NA==", "bodyText": "In the logging below change OpenTracing to Tracing", "url": "https://github.com/apache/camel/pull/4016#discussion_r461369944", "createdAt": "2020-07-28T07:19:50Z", "author": {"login": "davsclaus"}, "path": "components/camel-tracing/src/main/java/org/apache/camel/tracing/Tracer.java", "diffHunk": "@@ -0,0 +1,345 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.tracing;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.CamelContextAware;\n+import org.apache.camel.Component;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExtendedCamelContext;\n+import org.apache.camel.NamedNode;\n+import org.apache.camel.Route;\n+import org.apache.camel.RuntimeCamelException;\n+import org.apache.camel.StaticService;\n+import org.apache.camel.spi.CamelEvent;\n+import org.apache.camel.spi.CamelLogger;\n+import org.apache.camel.spi.InterceptStrategy;\n+import org.apache.camel.spi.LogListener;\n+import org.apache.camel.spi.RoutePolicy;\n+import org.apache.camel.spi.RoutePolicyFactory;\n+import org.apache.camel.support.DefaultEndpoint;\n+import org.apache.camel.support.EndpointHelper;\n+import org.apache.camel.support.EventNotifierSupport;\n+import org.apache.camel.support.RoutePolicySupport;\n+import org.apache.camel.support.service.ServiceHelper;\n+import org.apache.camel.support.service.ServiceSupport;\n+import org.apache.camel.tracing.decorators.AbstractInternalSpanDecorator;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.StringHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class Tracer extends ServiceSupport implements RoutePolicyFactory, StaticService, CamelContextAware {\n+    protected static final Map<String, SpanDecorator> DECORATORS = new HashMap<>();\n+    private static final Logger LOG = LoggerFactory.getLogger(Tracer.class);\n+\n+    static {\n+        ServiceLoader.load(SpanDecorator.class).forEach(d -> {\n+            SpanDecorator existing = DECORATORS.get(d.getComponent());\n+            // Add span decorator if no existing decorator for the component,\n+            // or if derived from the existing decorator's class, allowing\n+            // custom decorators to be added if they extend the standard\n+            // decorators\n+            if (existing == null || existing.getClass().isInstance(d)) {\n+                DECORATORS.put(d.getComponent(), d);\n+            }\n+        });\n+    }\n+\n+    private final TracingLogListener logListener = new TracingLogListener();\n+    private final TracingEventNotifier eventNotifier = new TracingEventNotifier();\n+    private Set<String> excludePatterns = new HashSet<>(0);\n+    private InterceptStrategy tracingStrategy;\n+    private boolean encoding;\n+    private CamelContext camelContext;\n+\n+    protected abstract void initTracer();\n+\n+    protected abstract SpanAdapter startSendingEventSpan(String operationName, SpanKind kind, SpanAdapter parent);\n+\n+    protected abstract SpanAdapter startExchangeBeginSpan(String operationName, SpanKind kind, SpanAdapter parent);\n+\n+    protected abstract void finishSpan(SpanAdapter span);\n+\n+    protected abstract void inject(SpanAdapter span, InjectAdapter adapter);\n+\n+    /**\n+     * Returns the currently used tracing strategy which is responsible for tracking invoked EIP or\n+     * beans.\n+     *\n+     * @return The currently used tracing strategy\n+     */\n+    public InterceptStrategy getTracingStrategy() {\n+        return tracingStrategy;\n+    }\n+\n+    /**\n+     * Specifies the instance responsible for tracking invoked EIP and beans with OpenTracing.\n+     *\n+     * @param tracingStrategy The instance which tracks invoked EIP and beans\n+     */\n+    public void setTracingStrategy(InterceptStrategy tracingStrategy) {\n+        this.tracingStrategy = tracingStrategy;\n+    }\n+\n+    public void addDecorator(SpanDecorator decorator) {\n+        DECORATORS.put(decorator.getComponent(), decorator);\n+    }\n+\n+    @Override\n+    public CamelContext getCamelContext() {\n+        return camelContext;\n+    }\n+\n+    @Override\n+    public void setCamelContext(CamelContext camelContext) {\n+        this.camelContext = camelContext;\n+    }\n+\n+    public Set<String> getExcludePatterns() {\n+        return excludePatterns;\n+    }\n+\n+    public void setExcludePatterns(Set<String> excludePatterns) {\n+        this.excludePatterns = excludePatterns;\n+    }\n+\n+    public boolean isEncoding() {\n+        return encoding;\n+    }\n+\n+    public void setEncoding(boolean encoding) {\n+        this.encoding = encoding;\n+    }\n+\n+    /**\n+     * Adds an exclude pattern that will disable tracing for Camel messages that\n+     * matches the pattern.\n+     *\n+     * @param pattern the pattern such as route id, endpoint url\n+     */\n+    public void addExcludePattern(String pattern) {\n+        excludePatterns.add(pattern);\n+    }\n+\n+    @Override public RoutePolicy createRoutePolicy(CamelContext camelContext, String routeId, NamedNode route) {\n+        init(camelContext);\n+        return new TracingRoutePolicy();\n+\n+    }\n+\n+    /**\n+     * Registers this {@link Tracer} on the {@link CamelContext} if\n+     * not already registered.\n+     */\n+    public void init(CamelContext camelContext) {\n+        if (!camelContext.hasService(this)) {\n+            try {\n+                // start this service eager so we init before Camel is starting up\n+                camelContext.addService(this, true, true);\n+            } catch (Exception e) {\n+                throw RuntimeCamelException.wrapRuntimeCamelException(e);\n+            }\n+        }\n+    }\n+\n+    @Override protected void doInit() throws Exception {\n+        ObjectHelper.notNull(camelContext, \"CamelContext\", this);\n+\n+        camelContext.getManagementStrategy().addEventNotifier(eventNotifier);\n+        if (!camelContext.getRoutePolicyFactories().contains(this)) {\n+            camelContext.addRoutePolicyFactory(this);\n+        }\n+        camelContext.adapt(ExtendedCamelContext.class).addLogListener(logListener);\n+\n+        if (tracingStrategy != null) {\n+            camelContext.adapt(ExtendedCamelContext.class).addInterceptStrategy(tracingStrategy);\n+        }\n+        initTracer();\n+        ServiceHelper.startService(eventNotifier);\n+    }\n+\n+    @Override\n+    protected void doShutdown() throws Exception {\n+        // stop event notifier\n+        camelContext.getManagementStrategy().removeEventNotifier(eventNotifier);\n+        ServiceHelper.stopService(eventNotifier);\n+\n+        // remove route policy\n+        camelContext.getRoutePolicyFactories().remove(this);\n+    }\n+\n+    protected SpanDecorator getSpanDecorator(Endpoint endpoint) {\n+        SpanDecorator sd = null;\n+\n+        String uri = endpoint.getEndpointUri();\n+        String splitURI[] = StringHelper.splitOnCharacter(uri, \":\", 2);\n+        if (splitURI[1] != null) {\n+            String scheme = splitURI[0];\n+            sd = DECORATORS.get(scheme);\n+        }\n+        if (sd == null) {\n+            // okay there was no decorator found via component name (scheme), then try FQN\n+            if (endpoint instanceof DefaultEndpoint) {\n+                Component comp = ((DefaultEndpoint) endpoint).getComponent();\n+                String fqn = comp.getClass().getName();\n+                // lookup via FQN\n+                sd = DECORATORS.values().stream().filter(d -> fqn.equals(d.getComponentClassName())).findFirst()\n+                .orElse(null);\n+            }\n+        }\n+        if (sd == null) {\n+            sd = SpanDecorator.DEFAULT;\n+        }\n+\n+        return sd;\n+    }\n+\n+    private boolean isExcluded(Exchange exchange, Endpoint endpoint) {\n+        String url = endpoint.getEndpointUri();\n+        if (url != null && !excludePatterns.isEmpty()) {\n+            for (String pattern : excludePatterns) {\n+                if (EndpointHelper.matchEndpoint(exchange.getContext(), url, pattern)) {\n+                    return true;\n+                }\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private final class TracingEventNotifier extends EventNotifierSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3bae0052d78ef2858bcd328d7268baf3a7e98b3a"}, "originalPosition": 231}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4891, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}