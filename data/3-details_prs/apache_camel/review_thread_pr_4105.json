{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDQ2MDk5", "number": 4105, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1ODoxNlrOEaJbAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjowN1rOEafMzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1ODUyODAzOnYy", "diffSide": "RIGHT", "path": "components/camel-http-base/src/main/java/org/apache/camel/http/base/HttpSendDynamicAware.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1ODoxNlrOHDY1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMToxOTozOVrOHDZ3Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNDY1OA==", "bodyText": "Please use ObjectHelper", "url": "https://github.com/apache/camel/pull/4105#discussion_r473314658", "createdAt": "2020-08-19T20:58:16Z", "author": {"login": "oscerd"}, "path": "components/camel-http-base/src/main/java/org/apache/camel/http/base/HttpSendDynamicAware.java", "diffHunk": "@@ -100,6 +100,10 @@ public Processor createPreProcessor(Exchange exchange, DynamicAwareEntry entry)\n             query = URISupport.createQueryString(new LinkedHashMap<>(entry.getLenientProperties()));\n         }\n \n+        if (query == null && exchange.getIn().getHeader(Exchange.HTTP_QUERY) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b863a71cff485a4ef58e63b50f63c0e34f6cfb1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMzMTU0Mw==", "bodyText": "Thanks for the suggestion, Used ObjectHelper to check the Header", "url": "https://github.com/apache/camel/pull/4105#discussion_r473331543", "createdAt": "2020-08-19T21:19:39Z", "author": {"login": "chandra-h-bitd"}, "path": "components/camel-http-base/src/main/java/org/apache/camel/http/base/HttpSendDynamicAware.java", "diffHunk": "@@ -100,6 +100,10 @@ public Processor createPreProcessor(Exchange exchange, DynamicAwareEntry entry)\n             query = URISupport.createQueryString(new LinkedHashMap<>(entry.getLenientProperties()));\n         }\n \n+        if (query == null && exchange.getIn().getHeader(Exchange.HTTP_QUERY) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNDY1OA=="}, "originalCommit": {"oid": "1b863a71cff485a4ef58e63b50f63c0e34f6cfb1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MjA5NjEyOnYy", "diffSide": "RIGHT", "path": "components/camel-http/src/test/java/org/apache/camel/component/http/HttpSendDynamicAwareHeadersTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjowN1rOHD8yGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjo1NFrOHD8zvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMzY0Mg==", "bodyText": "No this just checks that the headers was set via Camel, not really that the HTTP server received those headers. Its something up in your setup you need to add this check", "url": "https://github.com/apache/camel/pull/4105#discussion_r473903642", "createdAt": "2020-08-20T11:36:07Z", "author": {"login": "davsclaus"}, "path": "components/camel-http/src/test/java/org/apache/camel/component/http/HttpSendDynamicAwareHeadersTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.http;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.RoutesBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.http.handler.BasicValidationHandler;\n+import org.apache.http.impl.bootstrap.HttpServer;\n+import org.apache.http.impl.bootstrap.ServerBootstrap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.component.http.HttpMethods.GET;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class HttpSendDynamicAwareHeadersTest extends BaseHttpTest {\n+\n+    private HttpServer localServer;\n+\n+    @BeforeEach\n+    @Override\n+    public void setUp() throws Exception {\n+        localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor())\n+                .setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory())\n+                .setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext())\n+                .registerHandler(\"/dynamicAware\", new BasicValidationHandler(GET.name(), null, null, null)).create();\n+        localServer.start();\n+\n+        super.setUp();\n+    }\n+\n+    @AfterEach\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        if (localServer != null) {\n+            localServer.stop();\n+        }\n+    }\n+\n+    @Override\n+    protected RoutesBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:dynamicAwareWithoutPathHeader\")\n+                        .setHeader(Exchange.HTTP_QUERY, constant(\"par1=val1&par2=val2\"))\n+                        .toD(\"http://localhost:\" + localServer.getLocalPort() + \"/dynamicAware\");\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testDynamicAwareHeadersQuery() throws Exception {\n+        Exchange e = fluentTemplate.to(\"direct:dynamicAwareWithoutPathHeader\").send();\n+        assertEquals(\"/dynamicAware\", e.getIn().getHeader(Exchange.HTTP_PATH));\n+        assertEquals(\"par1=val1&par2=val2\", e.getIn().getHeader(Exchange.HTTP_QUERY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNDA2MQ==", "bodyText": "See something like: https://github.com/apache/camel/blob/master/components/camel-http/src/test/java/org/apache/camel/component/http/HttpCamelHeadersTest.java#L48", "url": "https://github.com/apache/camel/pull/4105#discussion_r473904061", "createdAt": "2020-08-20T11:36:54Z", "author": {"login": "davsclaus"}, "path": "components/camel-http/src/test/java/org/apache/camel/component/http/HttpSendDynamicAwareHeadersTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.http;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.RoutesBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.http.handler.BasicValidationHandler;\n+import org.apache.http.impl.bootstrap.HttpServer;\n+import org.apache.http.impl.bootstrap.ServerBootstrap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.component.http.HttpMethods.GET;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class HttpSendDynamicAwareHeadersTest extends BaseHttpTest {\n+\n+    private HttpServer localServer;\n+\n+    @BeforeEach\n+    @Override\n+    public void setUp() throws Exception {\n+        localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor())\n+                .setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory())\n+                .setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext())\n+                .registerHandler(\"/dynamicAware\", new BasicValidationHandler(GET.name(), null, null, null)).create();\n+        localServer.start();\n+\n+        super.setUp();\n+    }\n+\n+    @AfterEach\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        if (localServer != null) {\n+            localServer.stop();\n+        }\n+    }\n+\n+    @Override\n+    protected RoutesBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:dynamicAwareWithoutPathHeader\")\n+                        .setHeader(Exchange.HTTP_QUERY, constant(\"par1=val1&par2=val2\"))\n+                        .toD(\"http://localhost:\" + localServer.getLocalPort() + \"/dynamicAware\");\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testDynamicAwareHeadersQuery() throws Exception {\n+        Exchange e = fluentTemplate.to(\"direct:dynamicAwareWithoutPathHeader\").send();\n+        assertEquals(\"/dynamicAware\", e.getIn().getHeader(Exchange.HTTP_PATH));\n+        assertEquals(\"par1=val1&par2=val2\", e.getIn().getHeader(Exchange.HTTP_QUERY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMzY0Mg=="}, "originalCommit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4876, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}