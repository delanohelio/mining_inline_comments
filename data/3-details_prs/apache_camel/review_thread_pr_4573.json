{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NDYxOTM4", "number": 4573, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODo1Nzo0MFrOE1_7OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODo1Nzo0MFrOE1_7OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MDU3MzM3OnYy", "diffSide": "RIGHT", "path": "components/camel-file/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODo1Nzo0MFrOHulV_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNTozMDoxM1rOHuyqkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwODM4MA==", "bodyText": "I see some of this logic to check the name being repeated across the three strategies, can we somehow unify this logic into a common function to ease maintainability?", "url": "https://github.com/apache/camel/pull/4573#discussion_r518608380", "createdAt": "2020-11-06T08:57:40Z", "author": {"login": "omarsmak"}, "path": "components/camel-file/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java", "diffHunk": "@@ -49,14 +49,24 @@ public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperati\n         dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);\n \n         String to = endpoint.getMoveExisting().evaluate(dummy, String.class);\n-        // we must normalize it (to avoid having both \\ and / in the name which\n-        // confuses java.io.File)\n-        to = FileUtil.normalizePath(to);\n+\n         if (ObjectHelper.isEmpty(to)) {\n             throw new GenericFileOperationFailedException(\n                     \"moveExisting evaluated as empty String, cannot move existing file: \" + fileName);\n         }\n \n+        if (to.length() > 1 && to.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1a93eaf9432f328edceeb4e3940d8b09dcce90c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgxNjI5Mw==", "bodyText": "the problem is where to put the common logic, FileUtils doesn't seem a good fit.", "url": "https://github.com/apache/camel/pull/4573#discussion_r518816293", "createdAt": "2020-11-06T15:15:27Z", "author": {"login": "luigidemasi"}, "path": "components/camel-file/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java", "diffHunk": "@@ -49,14 +49,24 @@ public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperati\n         dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);\n \n         String to = endpoint.getMoveExisting().evaluate(dummy, String.class);\n-        // we must normalize it (to avoid having both \\ and / in the name which\n-        // confuses java.io.File)\n-        to = FileUtil.normalizePath(to);\n+\n         if (ObjectHelper.isEmpty(to)) {\n             throw new GenericFileOperationFailedException(\n                     \"moveExisting evaluated as empty String, cannot move existing file: \" + fileName);\n         }\n \n+        if (to.length() > 1 && to.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwODM4MA=="}, "originalCommit": {"oid": "f1a93eaf9432f328edceeb4e3940d8b09dcce90c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODgyNjY0MQ==", "bodyText": "By creating a singleton utility class in the component perhaps?", "url": "https://github.com/apache/camel/pull/4573#discussion_r518826641", "createdAt": "2020-11-06T15:30:13Z", "author": {"login": "omarsmak"}, "path": "components/camel-file/src/main/java/org/apache/camel/component/file/GenericFileDefaultMoveExistingFileStrategy.java", "diffHunk": "@@ -49,14 +49,24 @@ public boolean moveExistingFile(GenericFileEndpoint endpoint, GenericFileOperati\n         dummy.getIn().setHeader(Exchange.FILE_PARENT, parent);\n \n         String to = endpoint.getMoveExisting().evaluate(dummy, String.class);\n-        // we must normalize it (to avoid having both \\ and / in the name which\n-        // confuses java.io.File)\n-        to = FileUtil.normalizePath(to);\n+\n         if (ObjectHelper.isEmpty(to)) {\n             throw new GenericFileOperationFailedException(\n                     \"moveExisting evaluated as empty String, cannot move existing file: \" + fileName);\n         }\n \n+        if (to.length() > 1 && to.endsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODYwODM4MA=="}, "originalCommit": {"oid": "f1a93eaf9432f328edceeb4e3940d8b09dcce90c"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4793, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}