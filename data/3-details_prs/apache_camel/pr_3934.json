{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2NzczNzYw", "number": 3934, "title": "[CAMEL-15253] camel-oaipmh - basic implementation", "bodyText": "Google Summer of Code 2020:\nImplementation of a camel-oaipmh component.\nStudent: Juan Segarra\nMentors:\nDenis Istomin\nZoran Regvart\nAndrea Cosentino\nDocumentation:\nhttps://camel.apache.org/components/latest/oaipmh-component.html\nCamel Examples:\napache/camel-examples#13\nSpring Boot Starter:\napache/camel-spring-boot#143\nJira:\nhttps://issues.apache.org/jira/browse/CAMEL-15253\nProposal:\nhttps://docs.google.com/document/d/1zrPhEnhj5gc3VIPRWYXz7n6kJqrIjLbDHRRrCa5wwsg/edit?usp=sharing\nBlog:\nhttps://medium.com/@juanksegarraf/implementation-of-a-component-for-the-oai-pmh-protocol-in-apache-camel-94d98ca6908f\nMail threads:\nhttp://camel.465427.n5.nabble.com/camel-oaipmh-quirks-mode-tp5878543.html\nhttp://camel.465427.n5.nabble.com/camel-oaipmh-HTTPS-and-endpoint-schema-tp5871118.html\nhttp://camel.465427.n5.nabble.com/GSoC-2020-Project-suggestion-OAI-PMH-tp5858089.html\n*Part of this code was imported from: https://github.com/cbadenes/camel-oaipmh\n[ ] Make sure there is a JIRA issue filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.\n[ ] Each commit in the pull request should have a meaningful subject line and body.\n[ ] If you're unsure, you can format the pull request title like [CAMEL-XXX] Fixes bug in camel-file component, where you replace CAMEL-XXX with the appropriate JIRA issue.\n[ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n[ ] Run mvn clean install -Psourcecheck in your module with source check enabled to make sure basic checks pass and there are no checkstyle violations. A more thorough check will be performed on your pull request automatically.\nBelow are the contribution guidelines:\nhttps://github.com/apache/camel/blob/master/CONTRIBUTING.md", "createdAt": "2020-06-18T21:32:21Z", "url": "https://github.com/apache/camel/pull/3934", "merged": true, "mergeCommit": {"oid": "92c4b757709d111f5caf989f7407f29fb5d92c90"}, "closed": true, "closedAt": "2020-08-13T10:28:54Z", "author": {"login": "juanksega"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc40AcDgH2gAyNDM2NzczNzYwOjNjYzhjYTRmMDI3YTljMTlmYjMyZGY0MmVhYWRkMDU4M2U5ODNmZmU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9dQIqAFqTQ2NDAxMjU2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3cc8ca4f027a9c19fb32df42eaadd0583e983ffe", "author": {"user": {"login": "juanksega", "name": null}}, "url": "https://github.com/apache/camel/commit/3cc8ca4f027a9c19fb32df42eaadd0583e983ffe", "committedDate": "2020-07-26T21:21:23Z", "message": "[CAMEL-15253] camel-oaipmh - implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c23cdec6dc8115cfbf03636145ef9ea53fbc2a1", "author": {"user": {"login": "juanksega", "name": null}}, "url": "https://github.com/apache/camel/commit/2c23cdec6dc8115cfbf03636145ef9ea53fbc2a1", "committedDate": "2020-07-27T01:20:56Z", "message": "Documentation fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16", "author": {"user": {"login": "juanksega", "name": null}}, "url": "https://github.com/apache/camel/commit/2b1bdc9e44f1190caea333240d9b0469733a2a16", "committedDate": "2020-07-30T23:38:54Z", "message": "Improvements:\n\n- Implement HTTPS test.\n- Add parameter: ignoreSSLWarnings\n- Regen"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDA1NTc3", "url": "https://github.com/apache/camel/pull/3934#pullrequestreview-459005577", "createdAt": "2020-07-31T08:32:55Z", "commit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwODozMjo1NVrOG6AfDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOToxODoxMlrOG6B1ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3ODU0Mw==", "bodyText": "You don't need this plugin, is already included in the parent pom of the components.", "url": "https://github.com/apache/camel/pull/3934#discussion_r463478543", "createdAt": "2020-07-31T08:32:55Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/pom.xml", "diffHunk": "@@ -0,0 +1,140 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>components</artifactId>\n+        <groupId>org.apache.camel</groupId>\n+        <version>3.5.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-oaipmh</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: OAIPMH</name>\n+    <description>Camel OAI-PMH support</description>\n+\n+    <properties>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <!-- Camel BOM -->\n+            <dependency>\n+                <groupId>org.apache.camel</groupId>\n+                <artifactId>camel-bom</artifactId>\n+                <version>3.5.0-SNAPSHOT</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+\n+        <!-- camel -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>joda-time</groupId>\n+            <artifactId>joda-time</artifactId>\n+            <version>${jodatime2-bundle-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jsoup</groupId>\n+            <artifactId>jsoup</artifactId>\n+            <version>${jsoup-version}</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-servlet</artifactId>\n+            <version>${jetty-version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <defaultGoal>install</defaultGoal>\n+\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                </configuration>\n+            </plugin>\n+      \n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>3.1.0</version>\n+                <configuration>\n+                    <encoding>UTF-8</encoding>\n+                </configuration>\n+            </plugin>\n+\n+            <!-- generate camel meta-data -->\n+            <plugin>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3OTIwMQ==", "bodyText": "As well here", "url": "https://github.com/apache/camel/pull/3934#discussion_r463479201", "createdAt": "2020-07-31T08:34:27Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/pom.xml", "diffHunk": "@@ -0,0 +1,140 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>components</artifactId>\n+        <groupId>org.apache.camel</groupId>\n+        <version>3.5.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-oaipmh</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: OAIPMH</name>\n+    <description>Camel OAI-PMH support</description>\n+\n+    <properties>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <!-- Camel BOM -->\n+            <dependency>\n+                <groupId>org.apache.camel</groupId>\n+                <artifactId>camel-bom</artifactId>\n+                <version>3.5.0-SNAPSHOT</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+\n+        <!-- camel -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>joda-time</groupId>\n+            <artifactId>joda-time</artifactId>\n+            <version>${jodatime2-bundle-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jsoup</groupId>\n+            <artifactId>jsoup</artifactId>\n+            <version>${jsoup-version}</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-servlet</artifactId>\n+            <version>${jetty-version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <defaultGoal>install</defaultGoal>\n+\n+        <plugins>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-compiler-plugin</artifactId>\n+                <version>3.8.1</version>\n+                <configuration>\n+                    <source>1.8</source>\n+                    <target>1.8</target>\n+                </configuration>\n+            </plugin>\n+      \n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-resources-plugin</artifactId>\n+                <version>3.1.0</version>\n+                <configuration>\n+                    <encoding>UTF-8</encoding>\n+                </configuration>\n+            </plugin>\n+\n+            <!-- generate camel meta-data -->\n+            <plugin>\n+                <groupId>org.apache.camel</groupId>\n+                <artifactId>camel-component-maven-plugin</artifactId>\n+                <version>3.5.0-SNAPSHOT</version>\n+                <executions>\n+                    <execution>\n+                        <id>generate</id>\n+                        <goals>\n+                            <goal>generate</goal>\n+                        </goals>\n+                        <phase>process-classes</phase>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.codehaus.mojo</groupId>\n+                <artifactId>build-helper-maven-plugin</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ3OTcwNQ==", "bodyText": "You already having the parent dependency, I don't think you need to add the Camel BOM here", "url": "https://github.com/apache/camel/pull/3934#discussion_r463479705", "createdAt": "2020-07-31T08:35:29Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/pom.xml", "diffHunk": "@@ -0,0 +1,140 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>components</artifactId>\n+        <groupId>org.apache.camel</groupId>\n+        <version>3.5.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-oaipmh</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: OAIPMH</name>\n+    <description>Camel OAI-PMH support</description>\n+\n+    <properties>\n+    </properties>\n+\n+    <dependencyManagement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4MTA1OQ==", "bodyText": "and here", "url": "https://github.com/apache/camel/pull/3934#discussion_r463481059", "createdAt": "2020-07-31T08:38:27Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/pom.xml", "diffHunk": "@@ -0,0 +1,140 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n+\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <artifactId>components</artifactId>\n+        <groupId>org.apache.camel</groupId>\n+        <version>3.5.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-oaipmh</artifactId>\n+    <packaging>jar</packaging>\n+    <name>Camel :: OAIPMH</name>\n+    <description>Camel OAI-PMH support</description>\n+\n+    <properties>\n+    </properties>\n+\n+    <dependencyManagement>\n+        <dependencies>\n+            <!-- Camel BOM -->\n+            <dependency>\n+                <groupId>org.apache.camel</groupId>\n+                <artifactId>camel-bom</artifactId>\n+                <version>3.5.0-SNAPSHOT</version>\n+                <scope>import</scope>\n+                <type>pom</type>\n+            </dependency>\n+        </dependencies>\n+    </dependencyManagement>\n+\n+    <dependencies>\n+\n+        <!-- camel -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>joda-time</groupId>\n+            <artifactId>joda-time</artifactId>\n+            <version>${jodatime2-bundle-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.jsoup</groupId>\n+            <artifactId>jsoup</artifactId>\n+            <version>${jsoup-version}</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.eclipse.jetty</groupId>\n+            <artifactId>jetty-servlet</artifactId>\n+            <version>${jetty-version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <build>\n+        <defaultGoal>install</defaultGoal>\n+\n+        <plugins>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4NDQzMA==", "bodyText": "I see these imports are not used here", "url": "https://github.com/apache/camel/pull/3934#discussion_r463484430", "createdAt": "2020-07-31T08:45:12Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.handler;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyManagementException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4NDcwNA==", "bodyText": "I don't think you need to throw all these exception since you are throwing Exception.", "url": "https://github.com/apache/camel/pull/3934#discussion_r463484704", "createdAt": "2020-07-31T08:45:40Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/handler/Harvester.java", "diffHunk": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.handler;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.security.KeyManagementException;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.xml.parsers.ParserConfigurationException;\n+\n+import org.xml.sax.SAXException;\n+\n+import org.apache.camel.oaipmh.component.model.OAIPMHVerb;\n+import org.apache.camel.oaipmh.model.OAIPMHResponse;\n+import org.apache.camel.oaipmh.utils.OAIPMHHttpClient;\n+\n+public class Harvester {\n+\n+    private static final String NO_TOKEN = null;\n+    private String resumptionToken = NO_TOKEN;\n+    private URI baseURI;\n+    private String verb;\n+    private String metadata;\n+    private String until;\n+    private String from;\n+    private String set;\n+    private String identifier;\n+    private OAIPMHHttpClient httpClient;\n+    private ResponseHandler oaipmhResponseHandler;\n+\n+    private boolean empty;\n+\n+    public Harvester(ResponseHandler oaipmhResponseHandler, URI baseURI, String verb, String metadata, String until, String from, String set, String identifier) {\n+        this.baseURI = baseURI;\n+        this.verb = verb;\n+        this.metadata = metadata;\n+        this.until = until;\n+        this.from = from;\n+        this.set = set;\n+        this.identifier = identifier;\n+        this.httpClient = new OAIPMHHttpClient();\n+        this.oaipmhResponseHandler = oaipmhResponseHandler;\n+\n+        if (OAIPMHVerb.valueOf(verb) == OAIPMHVerb.Identify) {\n+            this.metadata = null;\n+            this.until = null;\n+            this.from = null;\n+            this.set = null;\n+            this.identifier = null;\n+        }\n+\n+    }\n+\n+    private boolean harvest() throws IOException, URISyntaxException, ParserConfigurationException, SAXException, Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ4NzE2NA==", "bodyText": "I'd prefer to put all headers key string constants in a different class, example", "url": "https://github.com/apache/camel/pull/3934#discussion_r463487164", "createdAt": "2020-07-31T08:50:33Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.component;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.oaipmh.handler.Harvester;\n+import org.apache.camel.oaipmh.handler.ProducerResponseHandler;\n+import org.apache.camel.support.DefaultProducer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The OAIPMH producer.\n+ */\n+public class OAIPMHProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHProducer.class);\n+    private OAIPMHEndpoint endpoint;\n+\n+    public OAIPMHProducer(OAIPMHEndpoint endpoint) {\n+        super(endpoint);\n+        this.endpoint = endpoint;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Harvester harvester = new Harvester(\n+                new ProducerResponseHandler(),\n+                endpoint.getUrl(),\n+                endpoint.getVerb(),\n+                endpoint.getMetadataPrefix(),\n+                endpoint.getUntil(),\n+                endpoint.getFrom(),\n+                endpoint.getSet(),\n+                endpoint.getIdentitier());\n+        overrideHarvesterConfigs(exchange.getIn(), harvester);\n+        if (endpoint.isIgnoreSSLWarnings()) {\n+            harvester.getHttpClient().setIgnoreSSLWarnings(true);\n+        }\n+        List<String> synHarvest = harvester.synHarvest(endpoint.isOnlyFirst());\n+        exchange.getMessage().setBody(synHarvest);\n+        if (endpoint.isOnlyFirst() && harvester.getResumptionToken() != null) {\n+            exchange.getMessage().setHeader(\"CamelOaimphResumptionToken\", harvester.getResumptionToken());\n+        } else {\n+            exchange.getMessage().removeHeader(\"CamelOaimphResumptionToken\");\n+        }\n+    }\n+\n+    private void overrideHarvesterConfigs(Message msg, Harvester harvester) {\n+        String header = msg.getHeader(\"CamelOaimphUrl\", String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NTc2NA==", "bodyText": "I think these kind of validations, could be simplified into a function that takes lambda as argument, example:\nprivate <T> void checkAndSetConfigs(final Message message, final String key, final Consumer<T> fn, final Class<T> type) {\n        final T header = message.getHeader(key, type);\n        if (!ObjectHelper.isEmpty(header)) {\n            fn.accept(header);\n        }\n    }\n\nto call it:\ncheckAndSetConfigs(msg, \"CamelOaimphVerb\", harvester::setVerb, String.class);\n\nFor the URI, you may need to add the a wrapper from URI to String somewhere that creates URI.create(header)", "url": "https://github.com/apache/camel/pull/3934#discussion_r463495764", "createdAt": "2020-07-31T09:08:12Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/component/OAIPMHProducer.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.component;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.oaipmh.handler.Harvester;\n+import org.apache.camel.oaipmh.handler.ProducerResponseHandler;\n+import org.apache.camel.support.DefaultProducer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The OAIPMH producer.\n+ */\n+public class OAIPMHProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHProducer.class);\n+    private OAIPMHEndpoint endpoint;\n+\n+    public OAIPMHProducer(OAIPMHEndpoint endpoint) {\n+        super(endpoint);\n+        this.endpoint = endpoint;\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Harvester harvester = new Harvester(\n+                new ProducerResponseHandler(),\n+                endpoint.getUrl(),\n+                endpoint.getVerb(),\n+                endpoint.getMetadataPrefix(),\n+                endpoint.getUntil(),\n+                endpoint.getFrom(),\n+                endpoint.getSet(),\n+                endpoint.getIdentitier());\n+        overrideHarvesterConfigs(exchange.getIn(), harvester);\n+        if (endpoint.isIgnoreSSLWarnings()) {\n+            harvester.getHttpClient().setIgnoreSSLWarnings(true);\n+        }\n+        List<String> synHarvest = harvester.synHarvest(endpoint.isOnlyFirst());\n+        exchange.getMessage().setBody(synHarvest);\n+        if (endpoint.isOnlyFirst() && harvester.getResumptionToken() != null) {\n+            exchange.getMessage().setHeader(\"CamelOaimphResumptionToken\", harvester.getResumptionToken());\n+        } else {\n+            exchange.getMessage().removeHeader(\"CamelOaimphResumptionToken\");\n+        }\n+    }\n+\n+    private void overrideHarvesterConfigs(Message msg, Harvester harvester) {\n+        String header = msg.getHeader(\"CamelOaimphUrl\", String.class);\n+        if (header != null) {\n+            harvester.setBaseURI(URI.create(header));\n+        }\n+\n+        header = msg.getHeader(\"CamelOaimphEndpointUrl\", String.class);\n+        if (header != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5NzMyMw==", "bodyText": "You can replace it with:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    try {\n          \n          \n            \n                   try (CloseableHttpClient httpclient = getCloseableHttpClient()) {", "url": "https://github.com/apache/camel/pull/3934#discussion_r463497323", "createdAt": "2020-07-31T09:11:13Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5ODQyNQ==", "bodyText": "I am just wondering, do we need to check that we really have two params split with =?", "url": "https://github.com/apache/camel/pull/3934#discussion_r463498425", "createdAt": "2020-07-31T09:13:36Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzQ5OTIxMg==", "bodyText": "unnecessary comments here", "url": "https://github.com/apache/camel/pull/3934#discussion_r463499212", "createdAt": "2020-07-31T09:15:12Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);\n+                }\n+            }\n+\n+            if (identifier != null) {\n+                builder.addParameter(\"identifier\", identifier);\n+            }\n+\n+            if (token != null) {\n+                builder.addParameter(\"resumptionToken\", token);\n+            } else {\n+                if (metadataPrefix != null) {\n+                    builder.addParameter(\"metadataPrefix\", metadataPrefix);\n+                }\n+                if (set != null) {\n+                    builder.addParameter(\"set\", set);\n+                }\n+                if (from != null) {\n+                    builder.addParameter(\"from\", from);\n+                }\n+                if (until != null) {\n+                    builder.addParameter(\"until\", until);\n+                }\n+            }\n+\n+            HttpGet httpget = new HttpGet(builder.build());\n+\n+            RequestLine requestLine = httpget.getRequestLine();\n+\n+            LOG.info(\"Executing request: {} \", requestLine);\n+\n+            // Create a custom response handler\n+            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {\n+\n+                @Override\n+                public String handleResponse(final HttpResponse response) throws IOException {\n+                    int status = response.getStatusLine().getStatusCode();\n+                    if (status >= 200 && status < 300) {\n+                        HttpEntity entity = response.getEntity();\n+                        if (entity == null) {\n+                            throw new IOException(\"No response received\");\n+                        }\n+                        return EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n+                    } else {\n+                        throw new ClientProtocolException(\"Unexpected response status: \" + status);\n+                    }\n+                }\n+\n+            };\n+            String responseBody = httpclient.execute(httpget, responseHandler);\n+\n+//            String uri = requestLine.getUri();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMDIzMA==", "bodyText": "If you are catching the exception and then throw it again, makes no sense. However, I don't feel comfortable of throwing generic Exception here, please be specific on which exception you want to throw here", "url": "https://github.com/apache/camel/pull/3934#discussion_r463500230", "createdAt": "2020-07-31T09:17:19Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);\n+                }\n+            }\n+\n+            if (identifier != null) {\n+                builder.addParameter(\"identifier\", identifier);\n+            }\n+\n+            if (token != null) {\n+                builder.addParameter(\"resumptionToken\", token);\n+            } else {\n+                if (metadataPrefix != null) {\n+                    builder.addParameter(\"metadataPrefix\", metadataPrefix);\n+                }\n+                if (set != null) {\n+                    builder.addParameter(\"set\", set);\n+                }\n+                if (from != null) {\n+                    builder.addParameter(\"from\", from);\n+                }\n+                if (until != null) {\n+                    builder.addParameter(\"until\", until);\n+                }\n+            }\n+\n+            HttpGet httpget = new HttpGet(builder.build());\n+\n+            RequestLine requestLine = httpget.getRequestLine();\n+\n+            LOG.info(\"Executing request: {} \", requestLine);\n+\n+            // Create a custom response handler\n+            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {\n+\n+                @Override\n+                public String handleResponse(final HttpResponse response) throws IOException {\n+                    int status = response.getStatusLine().getStatusCode();\n+                    if (status >= 200 && status < 300) {\n+                        HttpEntity entity = response.getEntity();\n+                        if (entity == null) {\n+                            throw new IOException(\"No response received\");\n+                        }\n+                        return EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n+                    } else {\n+                        throw new ClientProtocolException(\"Unexpected response status: \" + status);\n+                    }\n+                }\n+\n+            };\n+            String responseBody = httpclient.execute(httpget, responseHandler);\n+\n+//            String uri = requestLine.getUri();\n+//            System.out.println(uri);\n+//            String sha256Hex = DigestUtils.sha256Hex(uri.split(\".org\")[1]);\n+//            System.out.println (\"File:\"+sha256Hex);\n+//            BufferedWriter writer = new BufferedWriter(new FileWriter(\"/tmp/tests/test4/\" + sha256Hex + \".xml\"));\n+//            writer.write(responseBody);\n+//            writer.close();\n+            LOG.debug(\"Response received: {}\", responseBody);\n+\n+            return responseBody;\n+        } finally {\n+            httpclient.close();\n+        }\n+    }\n+\n+    protected CloseableHttpClient getCloseableHttpClient() throws Exception {\n+        if (isIgnoreSSLWarnings()) {\n+            try {\n+                SSLContextBuilder builder = new SSLContextBuilder();\n+                builder.loadTrustMaterial(null, new TrustSelfSignedStrategy());\n+                SSLConnectionSocketFactory sslsf = new SSLConnectionSocketFactory(\n+                        builder.build());\n+                return HttpClients.custom().setSSLSocketFactory(\n+                        sslsf).build();\n+            } catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwMDcwMg==", "bodyText": "This looks deprecated.", "url": "https://github.com/apache/camel/pull/3934#discussion_r463500702", "createdAt": "2020-07-31T09:18:12Z", "author": {"login": "omarsmak"}, "path": "components/camel-oaipmh/src/main/java/org/apache/camel/oaipmh/utils/OAIPMHHttpClient.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.oaipmh.utils;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.charset.Charset;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.RequestLine;\n+import org.apache.http.client.ClientProtocolException;\n+import org.apache.http.client.ResponseHandler;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.conn.ssl.SSLContextBuilder;\n+import org.apache.http.conn.ssl.TrustSelfSignedStrategy;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.util.EntityUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class OAIPMHHttpClient {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(OAIPMHHttpClient.class);\n+\n+    private boolean ignoreSSLWarnings;\n+\n+    public String doRequest(URI baseURI, String verb, String set, String from, String until, String metadataPrefix, String token, String identifier) throws IOException, URISyntaxException, Exception {\n+        CloseableHttpClient httpclient = getCloseableHttpClient();\n+        try {\n+\n+            URIBuilder builder = new URIBuilder();\n+            builder.setScheme(baseURI.getScheme())\n+                    .setHost(baseURI.getHost())\n+                    .setPort(baseURI.getPort())\n+                    .setPath(baseURI.getPath())\n+                    .addParameter(\"verb\", verb);\n+\n+            if (baseURI.getQuery() != null && !baseURI.getQuery().isEmpty()) {\n+                for (String param : baseURI.getQuery().split(\"&\")) {\n+                    builder.addParameter(param.split(\"=\")[0], param.split(\"=\")[1]);\n+                }\n+            }\n+\n+            if (identifier != null) {\n+                builder.addParameter(\"identifier\", identifier);\n+            }\n+\n+            if (token != null) {\n+                builder.addParameter(\"resumptionToken\", token);\n+            } else {\n+                if (metadataPrefix != null) {\n+                    builder.addParameter(\"metadataPrefix\", metadataPrefix);\n+                }\n+                if (set != null) {\n+                    builder.addParameter(\"set\", set);\n+                }\n+                if (from != null) {\n+                    builder.addParameter(\"from\", from);\n+                }\n+                if (until != null) {\n+                    builder.addParameter(\"until\", until);\n+                }\n+            }\n+\n+            HttpGet httpget = new HttpGet(builder.build());\n+\n+            RequestLine requestLine = httpget.getRequestLine();\n+\n+            LOG.info(\"Executing request: {} \", requestLine);\n+\n+            // Create a custom response handler\n+            ResponseHandler<String> responseHandler = new ResponseHandler<String>() {\n+\n+                @Override\n+                public String handleResponse(final HttpResponse response) throws IOException {\n+                    int status = response.getStatusLine().getStatusCode();\n+                    if (status >= 200 && status < 300) {\n+                        HttpEntity entity = response.getEntity();\n+                        if (entity == null) {\n+                            throw new IOException(\"No response received\");\n+                        }\n+                        return EntityUtils.toString(entity, Charset.forName(\"UTF-8\"));\n+                    } else {\n+                        throw new ClientProtocolException(\"Unexpected response status: \" + status);\n+                    }\n+                }\n+\n+            };\n+            String responseBody = httpclient.execute(httpget, responseHandler);\n+\n+//            String uri = requestLine.getUri();\n+//            System.out.println(uri);\n+//            String sha256Hex = DigestUtils.sha256Hex(uri.split(\".org\")[1]);\n+//            System.out.println (\"File:\"+sha256Hex);\n+//            BufferedWriter writer = new BufferedWriter(new FileWriter(\"/tmp/tests/test4/\" + sha256Hex + \".xml\"));\n+//            writer.write(responseBody);\n+//            writer.close();\n+            LOG.debug(\"Response received: {}\", responseBody);\n+\n+            return responseBody;\n+        } finally {\n+            httpclient.close();\n+        }\n+    }\n+\n+    protected CloseableHttpClient getCloseableHttpClient() throws Exception {\n+        if (isIgnoreSSLWarnings()) {\n+            try {\n+                SSLContextBuilder builder = new SSLContextBuilder();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b1bdc9e44f1190caea333240d9b0469733a2a16"}, "originalPosition": 128}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "305b642f123c96b4523b89b249ea7df5357e8061", "author": {"user": {"login": "juanksega", "name": null}}, "url": "https://github.com/apache/camel/commit/305b642f123c96b4523b89b249ea7df5357e8061", "committedDate": "2020-08-07T04:59:24Z", "message": "Improvements:\n\n- Remove unnecessary comments.\n- Add constants file.\n- Remove deprecated code."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDE4NjIw", "url": "https://github.com/apache/camel/pull/3934#pullrequestreview-463418620", "createdAt": "2020-08-07T15:48:21Z", "commit": {"oid": "305b642f123c96b4523b89b249ea7df5357e8061"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNDQ5MDM4", "url": "https://github.com/apache/camel/pull/3934#pullrequestreview-463449038", "createdAt": "2020-08-07T16:33:51Z", "commit": {"oid": "305b642f123c96b4523b89b249ea7df5357e8061"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzNTAyMjMx", "url": "https://github.com/apache/camel/pull/3934#pullrequestreview-463502231", "createdAt": "2020-08-07T18:00:00Z", "commit": {"oid": "305b642f123c96b4523b89b249ea7df5357e8061"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MDEyNTYz", "url": "https://github.com/apache/camel/pull/3934#pullrequestreview-464012563", "createdAt": "2020-08-10T07:40:21Z", "commit": {"oid": "305b642f123c96b4523b89b249ea7df5357e8061"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3015, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}