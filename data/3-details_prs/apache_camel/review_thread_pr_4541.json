{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyOTgxMDIx", "number": 4541, "reviewThreads": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyNToyNFrOEzyo2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNDo1NlrOE0s9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQyNDg5OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyNToyNFrOHrO2OQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyNzoxMVrOHrUI1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NDA3Mw==", "bodyText": "Please avoid using org.json:json, the license is not complaint with ASF, remove this.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515094073", "createdAt": "2020-10-30T13:25:24Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/pom.xml", "diffHunk": "@@ -47,6 +47,15 @@\n             <groupId>org.apache.camel</groupId>\n             <artifactId>camel-cluster</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-util-json</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>\n+            <artifactId>json</artifactId>\n+            <version>20200518</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4MDc1Ng==", "bodyText": "I'll change not to use this package.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515180756", "createdAt": "2020-10-30T15:27:11Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/pom.xml", "diffHunk": "@@ -47,6 +47,15 @@\n             <groupId>org.apache.camel</groupId>\n             <artifactId>camel-cluster</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-util-json</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.json</groupId>\n+            <artifactId>json</artifactId>\n+            <version>20200518</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NDA3Mw=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ0MDE1OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyOTowNVrOHrO_zA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNToyOTo0NlrOHrURCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NjUyNA==", "bodyText": "Is there a reason for commented part?", "url": "https://github.com/apache/camel/pull/4541#discussion_r515096524", "createdAt": "2020-10-30T13:29:05Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+/*\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentList;\n+import io.fabric8.kubernetes.api.model.apps.DoneableDeployment;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.RollableScalableResource;\n+*/\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesConsumer.class);\n+\n+    private final Processor processor;\n+    private ExecutorService executor;\n+    private CustomResourcesConsumerTask customResourcesWatcher;\n+\n+    public KubernetesCustomResourcesConsumer(AbstractKubernetesEndpoint endpoint, Processor processor) {\n+        super(endpoint, processor);\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        executor = getEndpoint().createExecutor();\n+\n+        customResourcesWatcher = new CustomResourcesConsumerTask();\n+        executor.submit(customResourcesWatcher);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+\n+        LOG.debug(\"Stopping Kubernetes Custom Resources Consumer\");\n+        if (executor != null) {\n+            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);\n+            } else {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                executor.shutdownNow();\n+            }\n+        }\n+        executor = null;\n+    }\n+\n+    class CustomResourcesConsumerTask implements Runnable {\n+\n+        private Watch watch;\n+\n+        @Override\n+        public void run() {\n+            RawCustomResourceOperationsImpl w = getEndpoint().getKubernetesClient()\n+                    .customResource(getCRDContext(getEndpoint().getKubernetesConfiguration()));\n+            if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+                LOG.error(\"namespace is not specified.\");\n+            }\n+            String namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+            try {\n+                w.watch(namespace, new Watcher<String>() {\n+\n+                    @Override\n+                    public void eventReceived(Action action, String resource) {\n+                        Exchange exchange = getEndpoint().createExchange();\n+                        exchange.getIn().setBody(resource);\n+                        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CRD_EVENT_ACTION, action);\n+                        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CRD_EVENT_TIMESTAMP,\n+                                System.currentTimeMillis());\n+                        try {\n+                            processor.process(exchange);\n+                        } catch (Exception e) {\n+                            getExceptionHandler().handleException(\"Error during processing\", exchange, e);\n+                        }\n+                    }\n+\n+                    @Override\n+                    public void onClose(KubernetesClientException cause) {\n+                        if (cause != null) {\n+                            LOG.error(cause.getMessage(), cause);\n+                        }\n+\n+                    }\n+                });\n+            } catch (Exception e) {\n+                LOG.error(\"Exception in handling githubsource instance change\", e);\n+            }\n+\n+            /*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4Mjg1OA==", "bodyText": "No, I forgot to clean up.  I take it out.  Thanks.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515182858", "createdAt": "2020-10-30T15:29:46Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+/*\n+import io.fabric8.kubernetes.api.model.apps.Deployment;\n+import io.fabric8.kubernetes.api.model.apps.DeploymentList;\n+import io.fabric8.kubernetes.api.model.apps.DoneableDeployment;\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.NonNamespaceOperation;\n+import io.fabric8.kubernetes.client.dsl.RollableScalableResource;\n+*/\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesConsumer.class);\n+\n+    private final Processor processor;\n+    private ExecutorService executor;\n+    private CustomResourcesConsumerTask customResourcesWatcher;\n+\n+    public KubernetesCustomResourcesConsumer(AbstractKubernetesEndpoint endpoint, Processor processor) {\n+        super(endpoint, processor);\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        executor = getEndpoint().createExecutor();\n+\n+        customResourcesWatcher = new CustomResourcesConsumerTask();\n+        executor.submit(customResourcesWatcher);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+\n+        LOG.debug(\"Stopping Kubernetes Custom Resources Consumer\");\n+        if (executor != null) {\n+            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);\n+            } else {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                executor.shutdownNow();\n+            }\n+        }\n+        executor = null;\n+    }\n+\n+    class CustomResourcesConsumerTask implements Runnable {\n+\n+        private Watch watch;\n+\n+        @Override\n+        public void run() {\n+            RawCustomResourceOperationsImpl w = getEndpoint().getKubernetesClient()\n+                    .customResource(getCRDContext(getEndpoint().getKubernetesConfiguration()));\n+            if (ObjectHelper.isNotEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+                LOG.error(\"namespace is not specified.\");\n+            }\n+            String namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+            try {\n+                w.watch(namespace, new Watcher<String>() {\n+\n+                    @Override\n+                    public void eventReceived(Action action, String resource) {\n+                        Exchange exchange = getEndpoint().createExchange();\n+                        exchange.getIn().setBody(resource);\n+                        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CRD_EVENT_ACTION, action);\n+                        exchange.getIn().setHeader(KubernetesConstants.KUBERNETES_CRD_EVENT_TIMESTAMP,\n+                                System.currentTimeMillis());\n+                        try {\n+                            processor.process(exchange);\n+                        } catch (Exception e) {\n+                            getExceptionHandler().handleException(\"Error during processing\", exchange, e);\n+                        }\n+                    }\n+\n+                    @Override\n+                    public void onClose(KubernetesClientException cause) {\n+                        if (cause != null) {\n+                            LOG.error(cause.getMessage(), cause);\n+                        }\n+\n+                    }\n+                });\n+            } catch (Exception e) {\n+                LOG.error(\"Exception in handling githubsource instance change\", e);\n+            }\n+\n+            /*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NjUyNA=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ0MTI0OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesEndpoint.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoyOToyMFrOHrPAbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozMDo1N1rOHrUVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NjY4NQ==", "bodyText": "firstVersion is wrong", "url": "https://github.com/apache/camel/pull/4541#discussion_r515096685", "createdAt": "2020-10-30T13:29:20Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesEndpoint.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import org.apache.camel.Category;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.spi.UriEndpoint;\n+\n+/**\n+ * Perform operations on Kubernetes Custom Resources and get notified on Deployment changes.\n+ */\n+@UriEndpoint(firstVersion = \"2.20.0\", scheme = \"kubernetes-custom-resources\", title = \"Kubernetes Custom Resources\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4Mzg4Ng==", "bodyText": "Thanks!  I change it to 3.7.0.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515183886", "createdAt": "2020-10-30T15:30:57Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesEndpoint.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import org.apache.camel.Category;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.spi.UriEndpoint;\n+\n+/**\n+ * Perform operations on Kubernetes Custom Resources and get notified on Deployment changes.\n+ */\n+@UriEndpoint(firstVersion = \"2.20.0\", scheme = \"kubernetes-custom-resources\", title = \"Kubernetes Custom Resources\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5NjY4NQ=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1NDQ2OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMjozNVrOHrPIkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNTozNDowNFrOHrUh8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5ODc2OQ==", "bodyText": "Please remove commented imports", "url": "https://github.com/apache/camel/pull/4541#discussion_r515098769", "createdAt": "2020-10-30T13:32:35Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTE4NzE4Ng==", "bodyText": "Yes, I do.  Thanks!", "url": "https://github.com/apache/camel/pull/4541#discussion_r515187186", "createdAt": "2020-10-30T15:34:04Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5ODc2OQ=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1NjAyOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzowMVrOHrPJlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyMDowOVrOHrWZrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTAyOA==", "bodyText": "Please use crdGroup cRDGroup is really ugly to read and see :-)", "url": "https://github.com/apache/camel/pull/4541#discussion_r515099028", "createdAt": "2020-10-30T13:33:01Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzgzOQ==", "bodyText": "I change.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515217839", "createdAt": "2020-10-30T16:20:09Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTAyOA=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1NjUzOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzoxMVrOHrPJ9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoyMDowMFrOHrWZZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTEyNw==", "bodyText": "crdName", "url": "https://github.com/apache/camel/pull/4541#discussion_r515099127", "createdAt": "2020-10-30T13:33:11Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzc2Ng==", "bodyText": "I change.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515217766", "createdAt": "2020-10-30T16:20:00Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTEyNw=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1NzEyOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzoyMFrOHrPKUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxOTo1M1rOHrWZIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTIxNg==", "bodyText": "crdScope", "url": "https://github.com/apache/camel/pull/4541#discussion_r515099216", "createdAt": "2020-10-30T13:33:20Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDScope;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzY5OQ==", "bodyText": "I change.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515217699", "createdAt": "2020-10-30T16:19:53Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDScope;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTIxNg=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1NzYzOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzoyN1rOHrPKnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxOTo0NlrOHrWY3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTI5NQ==", "bodyText": "crdVersion", "url": "https://github.com/apache/camel/pull/4541#discussion_r515099295", "createdAt": "2020-10-30T13:33:27Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDScope;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDVersion;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzYyOQ==", "bodyText": "I change.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515217629", "createdAt": "2020-10-30T16:19:46Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDScope;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDVersion;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTI5NQ=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ1ODEwOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozMzozNFrOHrPK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxOTozNlrOHrWYfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTM3OA==", "bodyText": "crdPlural", "url": "https://github.com/apache/camel/pull/4541#discussion_r515099378", "createdAt": "2020-10-30T13:33:34Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDScope;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDVersion;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDPlural;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzUzMg==", "bodyText": "I change.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515217532", "createdAt": "2020-10-30T16:19:36Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/KubernetesConfiguration.java", "diffHunk": "@@ -105,6 +105,21 @@\n     @UriParam(label = \"advanced\")\n     private Integer connectionTimeout;\n \n+    @UriParam(label = \"consumer\")\n+    private String cRDName;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDGroup;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDScope;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDVersion;\n+\n+    @UriParam(label = \"consumer\")\n+    private String cRDPlural;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA5OTM3OA=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzQ2Mzg1OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzozNDozNVrOHrPOnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjoxOToxMlrOHrWXbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMDMxNw==", "bodyText": "No need for this log at info level. Too noisy. At least use debug level.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515100317", "createdAt": "2020-10-30T13:34:35Z", "author": {"login": "oscerd"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");\n+            throw new IllegalArgumentException(\"Get a specific Deployment require specify a Deployment name\");\n+        }\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).get(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        LOG.info(customResourceJSON.toString());\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doDelete(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a deployment name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a deployment name\");\n+        }\n+        if (ObjectHelper.isEmpty(namespaceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a namespace name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a namespace name\");\n+        }\n+\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).delete(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doCreate(Exchange exchange, String operation) throws Exception {\n+        String customResourceInstance = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+\n+        JsonObject gitHubSourceJSON = new JsonObject();\n+        try {\n+            gitHubSourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).create(namespaceName,\n+                            customResourceInstance));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 409) {\n+                LOG.info(\"Custom resoure instance already exists\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(gitHubSourceJSON);\n+    }\n+\n+    private CustomResourceDefinitionContext getCRDContext(Message message) {\n+        LOG.info(\"getCRDContext:\" + message.getHeader(KubernetesConstants.KUBERNETES_CRD_NAME, String.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 184}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIxNzI2MA==", "bodyText": "Yes, it's too much.  I take them out.  Thanks!", "url": "https://github.com/apache/camel/pull/4541#discussion_r515217260", "createdAt": "2020-10-30T16:19:12Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");\n+            throw new IllegalArgumentException(\"Get a specific Deployment require specify a Deployment name\");\n+        }\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).get(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        LOG.info(customResourceJSON.toString());\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doDelete(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a deployment name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a deployment name\");\n+        }\n+        if (ObjectHelper.isEmpty(namespaceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a namespace name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a namespace name\");\n+        }\n+\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).delete(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doCreate(Exchange exchange, String operation) throws Exception {\n+        String customResourceInstance = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+\n+        JsonObject gitHubSourceJSON = new JsonObject();\n+        try {\n+            gitHubSourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).create(namespaceName,\n+                            customResourceInstance));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 409) {\n+                LOG.info(\"Custom resoure instance already exists\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(gitHubSourceJSON);\n+    }\n+\n+    private CustomResourceDefinitionContext getCRDContext(Message message) {\n+        LOG.info(\"getCRDContext:\" + message.getHeader(KubernetesConstants.KUBERNETES_CRD_NAME, String.class));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTEwMDMxNw=="}, "originalCommit": {"oid": "22400c387df6c0392f85dea22f4aa138639db788"}, "originalPosition": 184}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjY0Njc5OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxMTowNFrOHr7u0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNToyNzowNFrOHsJLrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTQ1Ng==", "bodyText": "IMHO I'd stop the camel context last after stopping the executor", "url": "https://github.com/apache/camel/pull/4541#discussion_r515829456", "createdAt": "2020-11-02T09:11:04Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesConsumer.class);\n+\n+    private final Processor processor;\n+    private ExecutorService executor;\n+    private CustomResourcesConsumerTask customResourcesWatcher;\n+\n+    public KubernetesCustomResourcesConsumer(AbstractKubernetesEndpoint endpoint, Processor processor) {\n+        super(endpoint, processor);\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        executor = getEndpoint().createExecutor();\n+\n+        customResourcesWatcher = new CustomResourcesConsumerTask();\n+        executor.submit(customResourcesWatcher);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA0OTgzOA==", "bodyText": "Thanks!  I move the call.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516049838", "createdAt": "2020-11-02T15:27:04Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesConsumer.class);\n+\n+    private final Processor processor;\n+    private ExecutorService executor;\n+    private CustomResourcesConsumerTask customResourcesWatcher;\n+\n+    public KubernetesCustomResourcesConsumer(AbstractKubernetesEndpoint endpoint, Processor processor) {\n+        super(endpoint, processor);\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        executor = getEndpoint().createExecutor();\n+\n+        customResourcesWatcher = new CustomResourcesConsumerTask();\n+        executor.submit(customResourcesWatcher);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTQ1Ng=="}, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjY0OTk3OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToxMTo1NlrOHr7wsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTozMTo0OVrOHsJZlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTkzNg==", "bodyText": "Can we have more meaningful name instead of w?", "url": "https://github.com/apache/camel/pull/4541#discussion_r515829936", "createdAt": "2020-11-02T09:11:56Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesConsumer.class);\n+\n+    private final Processor processor;\n+    private ExecutorService executor;\n+    private CustomResourcesConsumerTask customResourcesWatcher;\n+\n+    public KubernetesCustomResourcesConsumer(AbstractKubernetesEndpoint endpoint, Processor processor) {\n+        super(endpoint, processor);\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        executor = getEndpoint().createExecutor();\n+\n+        customResourcesWatcher = new CustomResourcesConsumerTask();\n+        executor.submit(customResourcesWatcher);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+\n+        LOG.debug(\"Stopping Kubernetes Custom Resources Consumer\");\n+        if (executor != null) {\n+            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);\n+            } else {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                executor.shutdownNow();\n+            }\n+        }\n+        executor = null;\n+    }\n+\n+    class CustomResourcesConsumerTask implements Runnable {\n+\n+        private Watch watch;\n+\n+        @Override\n+        public void run() {\n+            RawCustomResourceOperationsImpl w = getEndpoint().getKubernetesClient()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA1MzM5Nw==", "bodyText": "I change it to operations.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516053397", "createdAt": "2020-11-02T15:31:49Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesConsumer.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.concurrent.ExecutorService;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.Watch;\n+import io.fabric8.kubernetes.client.Watcher;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import io.fabric8.kubernetes.client.dsl.internal.RawCustomResourceOperationsImpl;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConfiguration;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.support.DefaultConsumer;\n+import org.apache.camel.util.ObjectHelper;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesConsumer extends DefaultConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesConsumer.class);\n+\n+    private final Processor processor;\n+    private ExecutorService executor;\n+    private CustomResourcesConsumerTask customResourcesWatcher;\n+\n+    public KubernetesCustomResourcesConsumer(AbstractKubernetesEndpoint endpoint, Processor processor) {\n+        super(endpoint, processor);\n+        this.processor = processor;\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        executor = getEndpoint().createExecutor();\n+\n+        customResourcesWatcher = new CustomResourcesConsumerTask();\n+        executor.submit(customResourcesWatcher);\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+\n+        LOG.debug(\"Stopping Kubernetes Custom Resources Consumer\");\n+        if (executor != null) {\n+            if (getEndpoint() != null && getEndpoint().getCamelContext() != null) {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                getEndpoint().getCamelContext().getExecutorServiceManager().shutdownNow(executor);\n+            } else {\n+                if (customResourcesWatcher != null) {\n+                    customResourcesWatcher.getWatch().close();\n+                }\n+                executor.shutdownNow();\n+            }\n+        }\n+        executor = null;\n+    }\n+\n+    class CustomResourcesConsumerTask implements Runnable {\n+\n+        private Watch watch;\n+\n+        @Override\n+        public void run() {\n+            RawCustomResourceOperationsImpl w = getEndpoint().getKubernetesClient()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgyOTkzNg=="}, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjcxMzY2OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOToyODowMFrOHr8V1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo0Mjo0OVrOHsJ5qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzOTQ0NA==", "bodyText": "The namespace here is essential for the operation, isn't? If so, can we add checks for the required options (in this operation and the other operation) that being obtained from the headers and throw an exception with meaningful message to the user?", "url": "https://github.com/apache/camel/pull/4541#discussion_r515839444", "createdAt": "2020-11-02T09:28:00Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2MTYwOA==", "bodyText": "All operations require the namespace argument so I add check the check in the process mentod.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516061608", "createdAt": "2020-11-02T15:42:49Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTgzOTQ0NA=="}, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc1NTAzOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTozODozMlrOHr8uIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNTo1Mzo1MFrOHsKZCg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NTY2NQ==", "bodyText": "Apart from my other comment, I think these configurations can be obtained either from the endpoint configurations or the exchange headers, not only the exchange headers, isn't? If so, IMHO, I'd add a logic to first check if these options being set in the exchange headers first and fall back to the endpoint options aka KubernetesConfiguration.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515845665", "createdAt": "2020-11-02T09:38:32Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA2OTY0Mg==", "bodyText": "Thanks!  I'll add it.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516069642", "createdAt": "2020-11-02T15:53:50Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NTY2NQ=="}, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjc2NjkyOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwOTo0MTozNlrOHr81aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQxNjoxNTowMlrOHsLUiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NzUyOQ==", "bodyText": "Also here, if not mistaken, all these options are required for the CRD context, isn't? Then checks here would help if this option is set or not and throw an exception with meaningful message to the user.", "url": "https://github.com/apache/camel/pull/4541#discussion_r515847529", "createdAt": "2020-11-02T09:41:36Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");\n+            throw new IllegalArgumentException(\"Get a specific Deployment require specify a Deployment name\");\n+        }\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).get(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        LOG.info(customResourceJSON.toString());\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doDelete(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a deployment name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a deployment name\");\n+        }\n+        if (ObjectHelper.isEmpty(namespaceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a namespace name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a namespace name\");\n+        }\n+\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).delete(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doCreate(Exchange exchange, String operation) throws Exception {\n+        String customResourceInstance = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+\n+        JsonObject gitHubSourceJSON = new JsonObject();\n+        try {\n+            gitHubSourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).create(namespaceName,\n+                            customResourceInstance));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 409) {\n+                LOG.info(\"Custom resoure instance already exists\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(gitHubSourceJSON);\n+    }\n+\n+    private CustomResourceDefinitionContext getCRDContext(Message message) {\n+        CustomResourceDefinitionContext cRDContext = new CustomResourceDefinitionContext.Builder()\n+                .withName(message.getHeader(KubernetesConstants.KUBERNETES_CRD_NAME, String.class))       // example: \"githubsources.sources.knative.dev\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjA4NDg3NQ==", "bodyText": "Thanks!  I add check for these arguments.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516084875", "createdAt": "2020-11-02T16:15:02Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,194 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");\n+            throw new IllegalArgumentException(\"Get a specific Deployment require specify a Deployment name\");\n+        }\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).get(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        LOG.info(customResourceJSON.toString());\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doDelete(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a deployment name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a deployment name\");\n+        }\n+        if (ObjectHelper.isEmpty(namespaceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a namespace name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a namespace name\");\n+        }\n+\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).delete(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doCreate(Exchange exchange, String operation) throws Exception {\n+        String customResourceInstance = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+\n+        JsonObject gitHubSourceJSON = new JsonObject();\n+        try {\n+            gitHubSourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).create(namespaceName,\n+                            customResourceInstance));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 409) {\n+                LOG.info(\"Custom resoure instance already exists\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(gitHubSourceJSON);\n+    }\n+\n+    private CustomResourceDefinitionContext getCRDContext(Message message) {\n+        CustomResourceDefinitionContext cRDContext = new CustomResourceDefinitionContext.Builder()\n+                .withName(message.getHeader(KubernetesConstants.KUBERNETES_CRD_NAME, String.class))       // example: \"githubsources.sources.knative.dev\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTg0NzUyOQ=="}, "originalCommit": {"oid": "f1e9931a7bbc7e9f42a61bf623d1eae6cb6ebce9"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk1NjE4OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODoyNzo1NVrOHskK3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzoxNzoyN1rOHsuT8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MTk5OA==", "bodyText": "You can remove LOG.error instances since you are already throwing an exception.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516491998", "createdAt": "2020-11-03T08:27:55Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+        String namespace;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+            namespace = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        } else {\n+            namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+        }\n+        if (ObjectHelper.isEmpty(namespace)) {\n+            throw new IllegalArgumentException(\"Custom Resource producer requires a namespace argument\");\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+\n+        JsonArray customResourcesListItems;\n+        if (customResourcesListJSON.getCollection(\"items\") != null) {\n+            customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+        } else {\n+            customResourcesListItems = new JsonArray();\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b3fd3e5ff7558d3d579a3f30d122336fdcaddd"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1ODE2Mg==", "bodyText": "OK. I take it out.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516658162", "createdAt": "2020-11-03T13:17:27Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+        String namespace;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+            namespace = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        } else {\n+            namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+        }\n+        if (ObjectHelper.isEmpty(namespace)) {\n+            throw new IllegalArgumentException(\"Custom Resource producer requires a namespace argument\");\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+\n+        JsonArray customResourcesListItems;\n+        if (customResourcesListJSON.getCollection(\"items\") != null) {\n+            customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+        } else {\n+            customResourcesListItems = new JsonArray();\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5MTk5OA=="}, "originalCommit": {"oid": "54b3fd3e5ff7558d3d579a3f30d122336fdcaddd"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk3MjcwOnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozMjo0NlrOHskUtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzoxODo0NFrOHsuXIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDUxNg==", "bodyText": "Since you are already obtaining the namespace here, would it be more efficient to just pass the obtained namespace to the functions instead of re-obtaining the namespace again?", "url": "https://github.com/apache/camel/pull/4541#discussion_r516494516", "createdAt": "2020-11-03T08:32:46Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+        String namespace;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+            namespace = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        } else {\n+            namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+        }\n+        if (ObjectHelper.isEmpty(namespace)) {\n+            throw new IllegalArgumentException(\"Custom Resource producer requires a namespace argument\");\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+\n+        JsonArray customResourcesListItems;\n+        if (customResourcesListJSON.getCollection(\"items\") != null) {\n+            customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+        } else {\n+            customResourcesListItems = new JsonArray();\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b3fd3e5ff7558d3d579a3f30d122336fdcaddd"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1ODk3Nw==", "bodyText": "OK.  I make changes.  Thanks!", "url": "https://github.com/apache/camel/pull/4541#discussion_r516658977", "createdAt": "2020-11-03T13:18:44Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+        String namespace;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+            namespace = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        } else {\n+            namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+        }\n+        if (ObjectHelper.isEmpty(namespace)) {\n+            throw new IllegalArgumentException(\"Custom Resource producer requires a namespace argument\");\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+\n+        JsonArray customResourcesListItems;\n+        if (customResourcesListJSON.getCollection(\"items\") != null) {\n+            customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+        } else {\n+            customResourcesListItems = new JsonArray();\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NDUxNg=="}, "originalCommit": {"oid": "54b3fd3e5ff7558d3d579a3f30d122336fdcaddd"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzNjk3OTc0OnYy", "diffSide": "RIGHT", "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QwODozNDo1NlrOHskY9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxMzoxNzoxNFrOHsuTZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTYwNw==", "bodyText": "I think this check here is not needed since you are already checking for the namespace in the process method", "url": "https://github.com/apache/camel/pull/4541#discussion_r516495607", "createdAt": "2020-11-03T08:34:56Z", "author": {"login": "omarsmak"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+        String namespace;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+            namespace = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        } else {\n+            namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+        }\n+        if (ObjectHelper.isEmpty(namespace)) {\n+            throw new IllegalArgumentException(\"Custom Resource producer requires a namespace argument\");\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+\n+        JsonArray customResourcesListItems;\n+        if (customResourcesListJSON.getCollection(\"items\") != null) {\n+            customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+        } else {\n+            customResourcesListItems = new JsonArray();\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");\n+            throw new IllegalArgumentException(\"Get a specific Deployment require specify a Deployment name\");\n+        }\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).get(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        LOG.info(customResourceJSON.toString());\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doDelete(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a deployment name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a deployment name\");\n+        }\n+        if (ObjectHelper.isEmpty(namespaceName)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54b3fd3e5ff7558d3d579a3f30d122336fdcaddd"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjY1ODAyMw==", "bodyText": "OK.  I take it out.", "url": "https://github.com/apache/camel/pull/4541#discussion_r516658023", "createdAt": "2020-11-03T13:17:14Z", "author": {"login": "akihikokuroda"}, "path": "components/camel-kubernetes/src/main/java/org/apache/camel/component/kubernetes/customresources/KubernetesCustomResourcesProducer.java", "diffHunk": "@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.kubernetes.customresources;\n+\n+import java.util.Map;\n+\n+import io.fabric8.kubernetes.client.KubernetesClientException;\n+import io.fabric8.kubernetes.client.dsl.base.CustomResourceDefinitionContext;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.component.kubernetes.AbstractKubernetesEndpoint;\n+import org.apache.camel.component.kubernetes.KubernetesConstants;\n+import org.apache.camel.component.kubernetes.KubernetesOperations;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.json.JsonArray;\n+import org.apache.camel.util.json.JsonObject;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class KubernetesCustomResourcesProducer extends DefaultProducer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(KubernetesCustomResourcesProducer.class);\n+\n+    public KubernetesCustomResourcesProducer(AbstractKubernetesEndpoint endpoint) {\n+        super(endpoint);\n+    }\n+\n+    @Override\n+    public AbstractKubernetesEndpoint getEndpoint() {\n+        return (AbstractKubernetesEndpoint) super.getEndpoint();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        String operation;\n+        String namespace;\n+\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getOperation())) {\n+            operation = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_OPERATION, String.class);\n+        } else {\n+            operation = getEndpoint().getKubernetesConfiguration().getOperation();\n+        }\n+        if (ObjectHelper.isEmpty(getEndpoint().getKubernetesConfiguration().getNamespace())) {\n+            namespace = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        } else {\n+            namespace = getEndpoint().getKubernetesConfiguration().getNamespace();\n+        }\n+        if (ObjectHelper.isEmpty(namespace)) {\n+            throw new IllegalArgumentException(\"Custom Resource producer requires a namespace argument\");\n+        }\n+\n+        switch (operation) {\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES:\n+                doList(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.LIST_CUSTOMRESOURCES_BY_LABELS_OPERATION:\n+                doListByLabels(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.GET_CUSTOMRESOURCE:\n+                doGet(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.DELETE_CUSTOMRESOURCE:\n+                doDelete(exchange, operation);\n+                break;\n+\n+            case KubernetesOperations.CREATE_CUSTOMRESOURCE:\n+                doCreate(exchange, operation);\n+                break;\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unsupported operation \" + operation);\n+        }\n+    }\n+\n+    protected void doList(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+\n+        JsonArray customResourcesListItems;\n+        if (customResourcesListJSON.getCollection(\"items\") != null) {\n+            customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+        } else {\n+            customResourcesListItems = new JsonArray();\n+        }\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doListByLabels(Exchange exchange, String operation) throws Exception {\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        Map<String, String> labels = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_LABELS, Map.class);\n+        JsonObject customResourcesListJSON = new JsonObject(\n+                getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).list(namespaceName));\n+        LOG.info(customResourcesListJSON.toString());\n+        JsonArray customResourcesListItems = new JsonArray(customResourcesListJSON.getCollection(\"items\"));\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourcesListItems);\n+    }\n+\n+    protected void doGet(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Get a specific Deployment require specify a Deployment name\");\n+            throw new IllegalArgumentException(\"Get a specific Deployment require specify a Deployment name\");\n+        }\n+        JsonObject customResourceJSON = new JsonObject();\n+        try {\n+            customResourceJSON = new JsonObject(\n+                    getEndpoint().getKubernetesClient().customResource(getCRDContext(exchange.getIn())).get(namespaceName,\n+                            customResourceName));\n+        } catch (KubernetesClientException e) {\n+            if (e.getCode() == 404) {\n+                LOG.info(\"Custom resource instance not found\", e);\n+            } else {\n+                throw e;\n+            }\n+        }\n+        LOG.info(customResourceJSON.toString());\n+\n+        MessageHelper.copyHeaders(exchange.getIn(), exchange.getOut(), true);\n+        exchange.getOut().setBody(customResourceJSON);\n+    }\n+\n+    protected void doDelete(Exchange exchange, String operation) throws Exception {\n+        String customResourceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_CRD_INSTANCE_NAME, String.class);\n+        String namespaceName = exchange.getIn().getHeader(KubernetesConstants.KUBERNETES_NAMESPACE_NAME, String.class);\n+        if (ObjectHelper.isEmpty(customResourceName)) {\n+            LOG.error(\"Delete a specific deployment require specify a deployment name\");\n+            throw new IllegalArgumentException(\"Delete a specific deployment require specify a deployment name\");\n+        }\n+        if (ObjectHelper.isEmpty(namespaceName)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjQ5NTYwNw=="}, "originalCommit": {"oid": "54b3fd3e5ff7558d3d579a3f30d122336fdcaddd"}, "originalPosition": 156}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4776, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}