{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTYyMDM2", "number": 4561, "title": "[CAMEL-15804] - DataSonnet Expression Language Support", "bodyText": "Hey guys, as we had mentioned at some point, we wanted to see about adding support for DataSonnet as a camel expression language. To that effect we've implemented a camel-datasonnet component.\nFor the most part we feel it's about ready to go. There may be some documentation that needs to be revised, or we might decide to rename a method, but there won't be major changes from what we have now. Our idea was to get the work in front of you guys early in case our implementation approach was incorrect or something has changed from when we first started, considering the work that's been ongoing as part as the last release or two. We already saw some changes in the reifier, for example, when rebasing to 3.7-snapshot.\nOne thing that we should note is that currently the maven datasonnet dependency points to a version off our maven repository. This is temporary while finalize our v2 release into maven central, shortly. The version currently used should still be publicly available though if you wanted ro run the code locally.\nLet us know if you have any questions or feedback on this. Otherwise we hope to mark the PR as ready relatively soon.", "createdAt": "2020-11-04T06:23:05Z", "url": "https://github.com/apache/camel/pull/4561", "merged": true, "mergeCommit": {"oid": "892e2259cc90ae8ffded74a7b7bc02b34f2ba9dc"}, "closed": true, "closedAt": "2020-12-05T10:04:50Z", "author": {"login": "jam01"}, "timelineItems": {"totalCount": 47, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZCWoIAH2gAyNTE1MTYyMDM2OjkzYTk3ODEyMmVlMjY4ZGRmZDVlMzc5MDk4M2UxYTVkYmFlODk5NzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdjJYGLgFqTU0NTU3NDc0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "93a978122ee268ddfd5e3790983e1a5dbae89974", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/93a978122ee268ddfd5e3790983e1a5dbae89974", "committedDate": "2020-11-04T00:09:52Z", "message": "datasonnet: adds language"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "909682168f7249c38d5449aec27508eca89fda78", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/909682168f7249c38d5449aec27508eca89fda78", "committedDate": "2020-11-04T00:11:54Z", "message": "sets up cml library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2ae4eafc9b4e8a2174312f26e9f709f475f9d42a", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/2ae4eafc9b4e8a2174312f26e9f709f475f9d42a", "committedDate": "2020-11-04T00:11:55Z", "message": "upgrade datasonnet mapper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "155d9bec01ad6a026ad874f1ff87bec2fa0ce3b3", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/155d9bec01ad6a026ad874f1ff87bec2fa0ce3b3", "committedDate": "2020-11-04T00:11:55Z", "message": "formatting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5211dfdef78b17428c43667461e481deb4e285ea", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/5211dfdef78b17428c43667461e481deb4e285ea", "committedDate": "2020-11-04T00:11:55Z", "message": "refactors valuebuilder optional params"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bfb2438a8e5fdae9f9a9bc5e844bafa4d5d525d", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/9bfb2438a8e5fdae9f9a9bc5e844bafa4d5d525d", "committedDate": "2020-11-04T00:11:55Z", "message": "renames mimetype to mediatype\n\nalso moves datasonnet builder to camel-datasonnet"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed17ed8ad1f2888aa6c4a1659267ce03a8447b41", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/ed17ed8ad1f2888aa6c4a1659267ce03a8447b41", "committedDate": "2020-11-04T00:11:55Z", "message": "Revert delegating ValueBuilder to camel-datasonnet\n\nThis partially reverts commit d2202f7ee78daccacec2cec3f85925f4e8b8411e."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7aa2167f6ef1e41c9dc23eb5c1de7a3f93d00317", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/7aa2167f6ef1e41c9dc23eb5c1de7a3f93d00317", "committedDate": "2020-11-04T00:11:55Z", "message": "refactor headers and exchange properties to functions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b238092b08bfca6844890fe3b94c275e278ff5c6", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/b238092b08bfca6844890fe3b94c275e278ff5c6", "committedDate": "2020-11-04T00:11:55Z", "message": "defaults to output Document unless result specified"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4533b75414e625bfd2ca6b8ba1db3922c7d073bf", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/4533b75414e625bfd2ca6b8ba1db3922c7d073bf", "committedDate": "2020-11-04T00:11:56Z", "message": "bump datasonnet-mapper ver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b623272c4e6dfb988d7f1b66fc22c887e3390dec", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/b623272c4e6dfb988d7f1b66fc22c887e3390dec", "committedDate": "2020-11-04T00:11:56Z", "message": "bump ds mapper version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5beffbc844814a0e7f513b07e3628333f570c9e7", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/5beffbc844814a0e7f513b07e3628333f570c9e7", "committedDate": "2020-11-04T00:11:56Z", "message": "add dep"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ef083017b764850af7098b995466aa1d6cf2746", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/8ef083017b764850af7098b995466aa1d6cf2746", "committedDate": "2020-11-04T00:11:56Z", "message": "fix scala directory"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70a8d6cc187f19e71e72effffed0669da6ff45a3", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/70a8d6cc187f19e71e72effffed0669da6ff45a3", "committedDate": "2020-11-04T00:11:56Z", "message": "rebase 3.7.0-SNAPSHOT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c8c615f86847728aba3863056613b364ef2dcd5", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/4c8c615f86847728aba3863056613b364ef2dcd5", "committedDate": "2020-11-04T00:11:56Z", "message": "fix cml library"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1863c60b2ac835bcb6e93d7b391af4415842d72", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/d1863c60b2ac835bcb6e93d7b391af4415842d72", "committedDate": "2020-11-04T00:11:57Z", "message": "adds docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48e36a45da67c4bb0ac19abf76479a145e10105c", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/48e36a45da67c4bb0ac19abf76479a145e10105c", "committedDate": "2020-11-04T00:11:57Z", "message": "bump last ms3 ds version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/c96b0639c08232ff5e9737ffe66959566815cbe8", "committedDate": "2020-11-04T00:11:57Z", "message": "Refactor reifier and language"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MjY2NjEy", "url": "https://github.com/apache/camel/pull/4561#pullrequestreview-524266612", "createdAt": "2020-11-05T13:38:13Z", "commit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozODoxM1rOHuDoRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NjoyNlrOHuD96Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjAwNQ==", "bodyText": "What is this library here?", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056005", "createdAt": "2020-11-05T13:38:13Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjI1Mg==", "bodyText": "If we need this, we need to move the property version placeholder in parent/pom", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056252", "createdAt": "2020-11-05T13:38:35Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjM5MQ==", "bodyText": "There is a placeholder in parent/pom", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056391", "createdAt": "2020-11-05T13:38:49Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjY4NA==", "bodyText": "It should go as a placeholder in parent/pom", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056684", "createdAt": "2020-11-05T13:39:14Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Njc5NQ==", "bodyText": "ditto", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056795", "createdAt": "2020-11-05T13:39:22Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Njg3MQ==", "bodyText": "ditto", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056871", "createdAt": "2020-11-05T13:39:30Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Njk3MQ==", "bodyText": "ditto", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056971", "createdAt": "2020-11-05T13:39:40Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>1.5.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 128}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzU0MA==", "bodyText": "We essentially avoid external repository for multiple reasons: our experience with 3rd parties repository was really bad, so if possible please release in maven central.", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057540", "createdAt": "2020-11-05T13:40:28Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>1.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ms3-nexus</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Nzc3Nw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057777", "createdAt": "2020-11-05T13:40:50Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzkwMg==", "bodyText": "remove TODO", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057902", "createdAt": "2020-11-05T13:41:01Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.apache.camel.language.datasonnet;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.camel.support.language.LanguageAnnotation;\n+\n+/**\n+ * Datasonnet TODO: 7/21/20 docs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Nzk5Nw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057997", "createdAt": "2020-11-05T13:41:10Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODA1OQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058059", "createdAt": "2020-11-05T13:41:16Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODMyMA==", "bodyText": "Remove TODO", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058320", "createdAt": "2020-11-05T13:41:37Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");\n+        try (ScanResult scanResult = new ClassGraph().whitelistPaths(\"/\").scan()) {\n+            scanResult.getResourcesWithExtension(\"libsonnet\")\n+                    .forEachByteArray((resource, bytes) -> {\n+                        LOGGER.debug(\"Loading DataSonnet library: \" + resource.getPath());\n+                        CLASSPATH_IMPORTS.put(resource.getPath(), new String(bytes, StandardCharsets.UTF_8));\n+                    });\n+        }\n+    }\n+\n+    private String expression;\n+    private Expression metaExpression;\n+    private MediaType bodyMediaType;\n+    private MediaType outputMediaType;\n+    private Class<?> resultType;\n+    private Collection<String> libraryPaths;\n+\n+    public DatasonnetExpression(String expression) {\n+        this.expression = expression;\n+    }\n+\n+    public DatasonnetExpression(Expression expression) {\n+        this.metaExpression = expression;\n+    }\n+\n+    @Override\n+    public boolean matches(Exchange exchange) {\n+        this.outputMediaType = MediaTypes.APPLICATION_JAVA;\n+        return evaluate(exchange, Boolean.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T> T evaluate(Exchange exchange, Class<T> type) {\n+        try {\n+            if (metaExpression != null) {\n+                expression = metaExpression.evaluate(exchange, String.class);\n+            }\n+\n+            Objects.requireNonNull(expression, \"String expression property must be set!\");\n+\n+            Document<?> result = doEvaluate(exchange);\n+            // TODO: 9/8/20 see if we can offload some of this to a Document specific custom type converter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODU0MA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058540", "createdAt": "2020-11-05T13:42:00Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODY4Mg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058682", "createdAt": "2020-11-05T13:42:12Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/scala/org/apache/camel/language/datasonnet/CML.scala", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.apache.camel.language.datasonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODc2MQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058761", "createdAt": "2020-11-05T13:42:20Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODg2NA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058864", "createdAt": "2020-11-05T13:42:29Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODk4NQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058985", "createdAt": "2020-11-05T13:42:39Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTEwNg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059106", "createdAt": "2020-11-05T13:42:48Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTE5Ng==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059196", "createdAt": "2020-11-05T13:42:58Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTU0Ng==", "bodyText": "I guess a license should be good here to", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059546", "createdAt": "2020-11-05T13:43:27Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/javaTest.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTg3OA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059878", "createdAt": "2020-11-05T13:43:57Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/namedImports.ds", "diffHunk": "@@ -0,0 +1,11 @@\n+local testlib1 = import 'testlib.libsonnet';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTkzMg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059932", "createdAt": "2020-11-05T13:44:02Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/namedImportsFS.ds", "diffHunk": "@@ -0,0 +1,7 @@\n+local testlib3 = import 'testlib3.libsonnet';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDAxNA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060014", "createdAt": "2020-11-05T13:44:09Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/namedImports_result.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"Lib1JAR\":\"Hello, World\",\"Lib2JAR\":\"Bye, World\",\"Lib3FS\":\"Hello, World : TestLib3\",\"Lib4FS\":\"Bye, World : TestLib4\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDA3MQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060071", "createdAt": "2020-11-05T13:44:13Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/org/apache/camel/language.datasonnet/camel-context.xml", "diffHunk": "@@ -0,0 +1,155 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDE5Mg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060192", "createdAt": "2020-11-05T13:44:23Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/payload.csv", "diffHunk": "@@ -0,0 +1,2 @@\n+account,firstName,lastName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDI2OA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060268", "createdAt": "2020-11-05T13:44:27Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/payload.xml", "diffHunk": "@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDMxNA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060314", "createdAt": "2020-11-05T13:44:32Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readCSVTest.ds", "diffHunk": "@@ -0,0 +1,3 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDM2Ng==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060366", "createdAt": "2020-11-05T13:44:38Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readJavaTest.ds", "diffHunk": "@@ -0,0 +1,12 @@\n+/** DataSonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDQzNw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060437", "createdAt": "2020-11-05T13:44:45Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readXMLExtTest.ds", "diffHunk": "@@ -0,0 +1,6 @@\n+/** DataSonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDQ5NQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060495", "createdAt": "2020-11-05T13:44:50Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readXMLExtTest.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDU4MQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060581", "createdAt": "2020-11-05T13:44:58Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping.ds", "diffHunk": "@@ -0,0 +1,8 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDYyOQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060629", "createdAt": "2020-11-05T13:45:02Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping_payload.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDcwNg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060706", "createdAt": "2020-11-05T13:45:08Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping_result.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"count\":1,\"isActive\":true,\"testVar\":\"HelloWorld\",\"uid\":123,\"uname\":\"JavaDuke\",\"fullName\": \"DataSonnet\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDc3Nw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060777", "createdAt": "2020-11-05T13:45:14Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/testlib3.libsonnet", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDgyNg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060826", "createdAt": "2020-11-05T13:45:19Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/writeJavaTest.ds", "diffHunk": "@@ -0,0 +1,12 @@\n+/** DataSonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MTA2OA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518061068", "createdAt": "2020-11-05T13:45:41Z", "author": {"login": "oscerd"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.apache.camel.model.language;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MTU0NQ==", "bodyText": "No need for the dep here, it has already been added on line 1255", "url": "https://github.com/apache/camel/pull/4561#discussion_r518061545", "createdAt": "2020-11-05T13:46:26Z", "author": {"login": "oscerd"}, "path": "parent/pom.xml", "diffHunk": "@@ -2642,6 +2647,11 @@\n \t\t\t\t<artifactId>camel-zookeeper</artifactId>\n \t\t\t\t<version>${project.version}</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-datasonnet</artifactId>\n+        <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 19}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/aadaa19fca2c2e116d90a1303831f8dcafd3efbd", "committedDate": "2020-11-05T16:57:27Z", "message": "adds ASF license where possible"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "30a86bd33865a8d3e0a8601c8447ad3186a1db88", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/30a86bd33865a8d3e0a8601c8447ad3186a1db88", "committedDate": "2020-11-05T17:06:34Z", "message": "uses parent/pom for dep versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7385ff51b85cc6d89dfb99f381a90d3cc0c5124", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/b7385ff51b85cc6d89dfb99f381a90d3cc0c5124", "committedDate": "2020-11-05T17:30:56Z", "message": "adds licenses in core-model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "704e851cfa7846ce33a5ad6da4d594128c86446f", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/704e851cfa7846ce33a5ad6da4d594128c86446f", "committedDate": "2020-11-05T17:32:38Z", "message": "addresses checkstyle"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43533afb0e4c725965dac4863df5cb6b124c5390", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/43533afb0e4c725965dac4863df5cb6b124c5390", "committedDate": "2020-11-05T19:34:05Z", "message": "align scala deps"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c8efb72c7de33835c85dcd0db14d43d719316bd2", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/c8efb72c7de33835c85dcd0db14d43d719316bd2", "committedDate": "2020-11-05T23:00:29Z", "message": "uses parent/pom for dep versions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a7c3b5b19e378230c78fadedd46826f21c83fe3", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/3a7c3b5b19e378230c78fadedd46826f21c83fe3", "committedDate": "2020-11-18T15:23:10Z", "message": "maven central mapper version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ecb6a4a7a3fc1246cc82a2fad01afbfa2c10045", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/9ecb6a4a7a3fc1246cc82a2fad01afbfa2c10045", "committedDate": "2020-11-18T15:24:10Z", "message": "supportlevel preview"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/1497845418aabedb89081403140d4f08fefb32cf", "committedDate": "2020-11-18T15:29:01Z", "message": "remvoe todos"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM1OTUwOTk3", "url": "https://github.com/apache/camel/pull/4561#pullrequestreview-535950997", "createdAt": "2020-11-21T08:41:09Z", "commit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MToxMFrOH3s3_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MTo1OFrOH3s8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2ODk1OA==", "bodyText": "In XML I think > needs to be escaped", "url": "https://github.com/apache/camel/pull/4561#discussion_r528168958", "createdAt": "2020-11-21T08:41:10Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2ODk4OA==", "bodyText": "I assume this 3rd party maven repo can be removed", "url": "https://github.com/apache/camel/pull/4561#discussion_r528168988", "createdAt": "2020-11-21T08:41:27Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <version>4.4.0</version>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>${scala-datasonnet-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.ms3-inc</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>${datasonnet-mapper-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>${classgraph-version}</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>${jsonassert-version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ms3-nexus</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTAzNQ==", "bodyText": "Can we avoid having scala source code. We want everyone to be able to maintain the code and for that we prefer Java", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169035", "createdAt": "2020-11-21T08:42:01Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTA5Nw==", "bodyText": "Remove these as this is configured in some parent/root pom file", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169097", "createdAt": "2020-11-21T08:42:22Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTEyNQ==", "bodyText": "Same as before", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169125", "createdAt": "2020-11-21T08:42:51Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTE1Ng==", "bodyText": "Spring DSL -> XML DSL (that is the term we favour)", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169156", "createdAt": "2020-11-21T08:43:36Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTQ2OQ==", "bodyText": "I wonder if we can make a better example as using datasonnet to set the body via a property is not something you would do. I assume you can use these functions in those previous example. For example the value of 100 can be a property", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169469", "createdAt": "2020-11-21T08:45:36Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully\n+qualified classname:\n+\n+[source,xml]\n+----\n+<datasonnet resultType=\"java.lang.String\">body.foo</datasonnet>\n+----\n+\n+If the expression results in an array, or an object, you can instruct the expression to return you `List.class`\n+or `Map.class`, respectively. However, you must also set the output media type to `application/x-java-object`.\n+\n+NOTE: The default `Document` object is useful in situations where there are intermediate transformation steps, and so\n+retaining the content metadata through a route execution is valuable.\n+\n+== Specifying Media Types\n+\n+Traditionally the input and output media types are specified through the\n+https://datasonnet.s3-us-west-2.amazonaws.com/docs-ci/primary/master/datasonnet/1.0-SNAPSHOT/headers.html[DataSonnet Header]\n+The xref:datasonnet-language.adoc[DataSonnet] expression provides convenience options for specifying the body and output\n+media types without the need for a Header, this is useful if the transformation is a one-liner, for example.\n+\n+The DataSonnet expression will look for a body media type in the following order:\n+\n+1. If the body is a `Document` it will use the metadata in the object\n+2. If the convenience bodyMediaType method was used, it will use its value\n+3. A \"CamelDatasonnetBodyMediaType\" exchange property\n+4. A \"Content-Type\" message header\n+5. The DataSonnet Header payload media type directive\n+6. `application/x-java-object`\n+\n+And for output media type:\n+\n+1. If the convenience outputMediaType method was used, it will use its value\n+2. A \"CamelDatasonnetOutputMediaType\" exchange property\n+3. A \"CamelDatasonnetOutputMediaType\" message header\n+4. The DataSonnet Header output media type directive\n+5. `application/x-java-object`\n+\n+== Functions\n+\n+Camel adds the following DataSonnet functions that can be used to access the\n+exchange:\n+\n+[width=\"100%\",cols=\"10%,10%,10%,70%\",options=\"header\",]\n+|===\n+|Function |Argument |Type |Description\n+\n+|cml.properties |key for property |String |To lookup a property using the\n+xref:ROOT:properties-component.adoc[Properties] component (property placeholders).\n+\n+|cml.header |the header name |String |Will return the message header.\n+\n+|cml.exchangeProperty |key for property |String |Will return the exchange property.\n+|===\n+\n+Here's an example showing some of these functions in use:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTQ5MA==", "bodyText": "Very good documentation - thank you", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169490", "createdAt": "2020-11-21T08:46:00Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully\n+qualified classname:\n+\n+[source,xml]\n+----\n+<datasonnet resultType=\"java.lang.String\">body.foo</datasonnet>\n+----\n+\n+If the expression results in an array, or an object, you can instruct the expression to return you `List.class`\n+or `Map.class`, respectively. However, you must also set the output media type to `application/x-java-object`.\n+\n+NOTE: The default `Document` object is useful in situations where there are intermediate transformation steps, and so\n+retaining the content metadata through a route execution is valuable.\n+\n+== Specifying Media Types\n+\n+Traditionally the input and output media types are specified through the\n+https://datasonnet.s3-us-west-2.amazonaws.com/docs-ci/primary/master/datasonnet/1.0-SNAPSHOT/headers.html[DataSonnet Header]\n+The xref:datasonnet-language.adoc[DataSonnet] expression provides convenience options for specifying the body and output\n+media types without the need for a Header, this is useful if the transformation is a one-liner, for example.\n+\n+The DataSonnet expression will look for a body media type in the following order:\n+\n+1. If the body is a `Document` it will use the metadata in the object\n+2. If the convenience bodyMediaType method was used, it will use its value\n+3. A \"CamelDatasonnetBodyMediaType\" exchange property\n+4. A \"Content-Type\" message header\n+5. The DataSonnet Header payload media type directive\n+6. `application/x-java-object`\n+\n+And for output media type:\n+\n+1. If the convenience outputMediaType method was used, it will use its value\n+2. A \"CamelDatasonnetOutputMediaType\" exchange property\n+3. A \"CamelDatasonnetOutputMediaType\" message header\n+4. The DataSonnet Header output media type directive\n+5. `application/x-java-object`\n+\n+== Functions\n+\n+Camel adds the following DataSonnet functions that can be used to access the\n+exchange:\n+\n+[width=\"100%\",cols=\"10%,10%,10%,70%\",options=\"header\",]\n+|===\n+|Function |Argument |Type |Description\n+\n+|cml.properties |key for property |String |To lookup a property using the\n+xref:ROOT:properties-component.adoc[Properties] component (property placeholders).\n+\n+|cml.header |the header name |String |Will return the message header.\n+\n+|cml.exchangeProperty |key for property |String |Will return the exchange property.\n+|===\n+\n+Here's an example showing some of these functions in use:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"direct:in\")\n+    .setBody(datasonnet(\"cml.properties('foo')\", String.class))\n+    .to(\"mock:camel\");\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"direct:in\"/>\n+    <setBody>\n+        <datasonnet resultTypeName=\"java.lang.String\">cml.properties('foo')</datasonnet>\n+    </setBody>\n+    <to uri=\"mock:camel\"/>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Loading script from external resource\n+\n+You can externalize the script and have Camel load it from a resource\n+such as `\"classpath:\"`, `\"file:\"`, or `\"http:\"`. +\n+This is done using the following syntax: `\"resource:scheme:location\"`,\n+eg to refer to a file on the classpath you can do:\n+\n+[source,java]\n+-------------------------------------------------------------------\n+.setHeader(\"myHeader\").datasonnet(\"resource:classpath:mydatasonnet.ds\")\n+-------------------------------------------------------------------\n+\n+== Dependencies\n+\n+To use scripting languages in your camel routes you need to add a\n+dependency on *camel-datasonnet*.\n+\n+If you use Maven you could just add the following to your `pom.xml`,\n+substituting the version number for the latest and greatest release (see\n+the download page for the latest versions).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTY0OA==", "bodyText": "I would like to see this moved to the Language class, and do this in its doInit method.", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169648", "createdAt": "2020-11-21T08:47:31Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTk2OQ==", "bodyText": "Port this to plain Java code so everyone can maintain it", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169969", "createdAt": "2020-11-21T08:51:15Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/scala/org/apache/camel/language/datasonnet/CML.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet\n+\n+import com.datasonnet.document.{DefaultDocument, Document, MediaTypes}\n+import com.datasonnet.spi.{DataFormatService, Library, PluginException}\n+import org.apache.camel.Exchange\n+import sjsonnet.Std.builtin\n+import sjsonnet.{Materializer, Val}\n+\n+object CML extends Library {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3MDAxNA==", "bodyText": "Fix this TODO", "url": "https://github.com/apache/camel/pull/4561#discussion_r528170014", "createdAt": "2020-11-21T08:51:42Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language.datasonnet/camel-context.xml\");\n+    }\n+\n+    @Test\n+    public void testTransform() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:basicTransform\");\n+    }\n+\n+    @Test\n+    public void testTransformXML() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.xml\"),\n+                loadResourceAsString(\"readXMLExtTest.json\"),\n+                \"direct:transformXML\");\n+    }\n+\n+    @Test\n+    public void testTransformCSV() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.csv\"),\n+                \"{\\\"account\\\":\\\"123\\\"}\",\n+                \"direct:transformCSV\");\n+    }\n+\n+    @Test\n+    public void testDatasonnetScript() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:datasonnetScript\");\n+    }\n+\n+    @Test\n+    public void testNamedImports() throws Exception {\n+        runCamelTest(\"{}\",\n+                loadResourceAsString(\"namedImports_result.json\"),\n+                \"direct:namedImports\");\n+    }\n+\n+    // TODO: 9/8/20 need to pass result type param to language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3MDA0Nw==", "bodyText": "Remove system out or do a LOG", "url": "https://github.com/apache/camel/pull/4561#discussion_r528170047", "createdAt": "2020-11-21T08:51:58Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language.datasonnet/camel-context.xml\");\n+    }\n+\n+    @Test\n+    public void testTransform() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:basicTransform\");\n+    }\n+\n+    @Test\n+    public void testTransformXML() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.xml\"),\n+                loadResourceAsString(\"readXMLExtTest.json\"),\n+                \"direct:transformXML\");\n+    }\n+\n+    @Test\n+    public void testTransformCSV() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.csv\"),\n+                \"{\\\"account\\\":\\\"123\\\"}\",\n+                \"direct:transformCSV\");\n+    }\n+\n+    @Test\n+    public void testDatasonnetScript() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:datasonnetScript\");\n+    }\n+\n+    @Test\n+    public void testNamedImports() throws Exception {\n+        runCamelTest(\"{}\",\n+                loadResourceAsString(\"namedImports_result.json\"),\n+                \"direct:namedImports\");\n+    }\n+\n+    // TODO: 9/8/20 need to pass result type param to language\n+    @Disabled\n+    @Test\n+    public void testExpressionLanguage() throws Exception {\n+        runCamelTest(\"World\",\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:expressionLanguage\");\n+    }\n+\n+    @Test\n+    public void testNullInput() throws Exception {\n+        runCamelTest(\"\",\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:nullInput\");\n+        runCamelTest(null,\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:nullInput\");\n+    }\n+\n+    @Test\n+    public void testReadJava() throws Exception {\n+        Gizmo theGizmo = new Gizmo();\n+        theGizmo.setName(\"gizmo\");\n+        theGizmo.setQuantity(123);\n+        theGizmo.setInStock(true);\n+        theGizmo.setColors(Arrays.asList(\"red\", \"white\", \"blue\"));\n+\n+        Manufacturer manufacturer = new Manufacturer();\n+        manufacturer.setManufacturerName(\"ACME Corp.\");\n+        manufacturer.setManufacturerCode(\"ACME123\");\n+        theGizmo.setManufacturer(manufacturer);\n+\n+        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        theGizmo.setDate(df.parse(\"2020-01-06\"));\n+\n+        runCamelTest(theGizmo,\n+                loadResourceAsString(\"javaTest.json\"),\n+                \"direct:readJava\");\n+    }\n+\n+    @Test\n+    public void testWriteJava() throws Exception {\n+        Gizmo theGizmo = new Gizmo();\n+        theGizmo.setName(\"gizmo\");\n+        theGizmo.setQuantity(123);\n+        theGizmo.setInStock(true);\n+        theGizmo.setColors(Arrays.asList(\"red\", \"white\", \"blue\"));\n+\n+        Manufacturer manufacturer = new Manufacturer();\n+        manufacturer.setManufacturerName(\"ACME Corp.\");\n+        manufacturer.setManufacturerCode(\"ACME123\");\n+        theGizmo.setManufacturer(manufacturer);\n+\n+        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        theGizmo.setDate(df.parse(\"2020-01-06\"));\n+\n+        String payload = loadResourceAsString(\"javaTest.json\");\n+\n+        template.sendBody(\"direct:writeJava\", payload);\n+        mock = getMockEndpoint(\"mock:direct:end\");\n+        Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n+        Object response = exchange.getIn().getBody();\n+\n+        assertEquals(theGizmo, response);\n+    }\n+\n+    private void runCamelTest(Object payload, String expectedJson, String uri) throws Exception {\n+        template.sendBody(uri, payload);\n+        mock = getMockEndpoint(\"mock:direct:end\");\n+        Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n+        String response = exchange.getIn().getBody().toString();\n+        System.out.println(\"RESPONSE IS \" + response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d0feb15a6ac52f5eae04d49850dc8bec0dfd4db", "author": {"user": {"login": "JakeMHughes", "name": "Jake"}}, "url": "https://github.com/apache/camel/commit/3d0feb15a6ac52f5eae04d49850dc8bec0dfd4db", "committedDate": "2020-11-25T17:20:55Z", "message": "Removed System print line in test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eddb4d3ac5d130314de0ce510e98db8a90df4d0b", "author": {"user": {"login": "JakeMHughes", "name": "Jake"}}, "url": "https://github.com/apache/camel/commit/eddb4d3ac5d130314de0ce510e98db8a90df4d0b", "committedDate": "2020-11-25T17:21:04Z", "message": "Replaced Spring DSL with XML DSL"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40701a24e8e642b670a6c8193dffad0efe80788d", "author": {"user": {"login": "JakeMHughes", "name": "Jake"}}, "url": "https://github.com/apache/camel/commit/40701a24e8e642b670a6c8193dffad0efe80788d", "committedDate": "2020-11-25T17:21:14Z", "message": "Removed ms3inc repository from camel-datasonnet pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fa2576f6d573ff44735a290f389f45cdff89aa4", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/1fa2576f6d573ff44735a290f389f45cdff89aa4", "committedDate": "2020-11-25T17:35:39Z", "message": "clarify use of cml.properties in docs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9e47486dd680856ba4af59c0412e3a94d16d61c5", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/9e47486dd680856ba4af59c0412e3a94d16d61c5", "committedDate": "2020-11-25T18:19:31Z", "message": "fixes issues with mapper version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b997dc1c66ec074a0b4b58f36e97686e2f6819b0", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/b997dc1c66ec074a0b4b58f36e97686e2f6819b0", "committedDate": "2020-11-25T18:22:14Z", "message": "remove maven compiler properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ae50f51d6fc04a730898b892b7c927434104c79", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/8ae50f51d6fc04a730898b892b7c927434104c79", "committedDate": "2020-11-25T18:33:36Z", "message": "fix language test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bea79a6d14527eb0ac3ccd0e8465775334667249", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/bea79a6d14527eb0ac3ccd0e8465775334667249", "committedDate": "2020-11-25T18:40:42Z", "message": "moves classpath scanning to language"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "58ff22669d023fb8ea9cf2847401aaf60e2e9e23", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/58ff22669d023fb8ea9cf2847401aaf60e2e9e23", "committedDate": "2020-12-02T22:31:03Z", "message": "converts CML.scala to java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "972f4d14ffb947987854ce0f00b4961084f62787", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/972f4d14ffb947987854ce0f00b4961084f62787", "committedDate": "2020-12-02T22:48:03Z", "message": "reverts scala deps changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "60814387fda6af057f677f6ee403914fe31fa129", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/60814387fda6af057f677f6ee403914fe31fa129", "committedDate": "2020-12-02T22:55:26Z", "message": "Merge branch 'master' into datasonnet-3.7"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/e60b159ffdaa6bc0269b045ac0763447ac109cc3", "committedDate": "2020-12-02T23:28:43Z", "message": "address checkstyle errors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNzcwODUw", "url": "https://github.com/apache/camel/pull/4561#pullrequestreview-543770850", "createdAt": "2020-12-03T09:43:05Z", "commit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0MzowNVrOH-O5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0NToyMlrOH-PCrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng==", "bodyText": "I dont see any extra value of having its own Builder class, we do not really do this for other data formats - only xml and xpath have a special builder etc. Can this be removed", "url": "https://github.com/apache/camel/pull/4561#discussion_r535017776", "createdAt": "2020-12-03T09:43:05Z", "author": {"login": "davsclaus"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyMDIwNg==", "bodyText": "remove the left over code in the comment", "url": "https://github.com/apache/camel/pull/4561#discussion_r535020206", "createdAt": "2020-12-03T09:45:22Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.TimeZone;\n+\n+import com.datasonnet.document.Document;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e5f3bc54d9bee7f2624fe27542932a3f5c37eab", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/8e5f3bc54d9bee7f2624fe27542932a3f5c37eab", "committedDate": "2020-12-04T05:09:25Z", "message": "fixed scala dep issue"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc505df8100530ff5c90a70bfe261fab606595ea", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/cc505df8100530ff5c90a70bfe261fab606595ea", "committedDate": "2020-12-04T05:29:06Z", "message": "move datasonnet expression builder"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "860f98aae60dd03d0aeccb0ed9dddb1a08bc2543", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/860f98aae60dd03d0aeccb0ed9dddb1a08bc2543", "committedDate": "2020-12-04T05:29:06Z", "message": "remove comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02a6a8508319c3c9438a5ea94c5291ea16013401", "author": {"user": {"login": "jam01", "name": "Jose Montoya"}}, "url": "https://github.com/apache/camel/commit/02a6a8508319c3c9438a5ea94c5291ea16013401", "committedDate": "2020-12-04T17:08:14Z", "message": "bump ds mapper version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NTc0NzQ4", "url": "https://github.com/apache/camel/pull/4561#pullrequestreview-545574748", "createdAt": "2020-12-05T10:00:03Z", "commit": {"oid": "02a6a8508319c3c9438a5ea94c5291ea16013401"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2821, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}