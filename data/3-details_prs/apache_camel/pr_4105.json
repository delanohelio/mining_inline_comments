{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNDQ2MDk5", "number": 4105, "title": "CAMEL-15420 camel-http dynamic aware removes Exchange.HTTP_QUERY head\u2026", "bodyText": "\u2026er if Exchange.HTTP_PATH header not specified\n[ ] Make sure there is a JIRA issue filed for the change (usually before you start working on it).  Trivial changes like typos do not require a JIRA issue.  Your pull request should address just this issue, without pulling in other changes.\n[ ] Each commit in the pull request should have a meaningful subject line and body.\n[ ] If you're unsure, you can format the pull request title like [CAMEL-XXX] Fixes bug in camel-file component, where you replace CAMEL-XXX with the appropriate JIRA issue.\n[ ] Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n[ ] Run mvn clean install -Psourcecheck in your module with source check enabled to make sure basic checks pass and there are no checkstyle violations. A more thorough check will be performed on your pull request automatically.\nBelow are the contribution guidelines:\nhttps://github.com/apache/camel/blob/master/CONTRIBUTING.md", "createdAt": "2020-08-19T20:44:41Z", "url": "https://github.com/apache/camel/pull/4105", "merged": true, "mergeCommit": {"oid": "76001f016cb18fd20dec53f055430518b74a0019"}, "closed": true, "closedAt": "2020-08-23T15:17:06Z", "author": {"login": "chandra-h-bitd"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdAh2YVAH2gAyNDcwNDQ2MDk5OjFiODYzYTcxY2ZmNDg1YTRlZjU4ZTYzYjUwZjYzYzBlMzRmNmNmYjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdAuoY3gFqTQ3MTUwNzM5Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1b863a71cff485a4ef58e63b50f63c0e34f6cfb1", "author": {"user": null}, "url": "https://github.com/apache/camel/commit/1b863a71cff485a4ef58e63b50f63c0e34f6cfb1", "committedDate": "2020-08-19T20:43:30Z", "message": "CAMEL-15420 camel-http dynamic aware removes Exchange.HTTP_QUERY header if Exchange.HTTP_PATH header not specified"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwOTUxMDA1", "url": "https://github.com/apache/camel/pull/4105#pullrequestreview-470951005", "createdAt": "2020-08-19T20:58:16Z", "commit": {"oid": "1b863a71cff485a4ef58e63b50f63c0e34f6cfb1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1ODoxNlrOHDY1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQyMDo1ODoxNlrOHDY1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzMxNDY1OA==", "bodyText": "Please use ObjectHelper", "url": "https://github.com/apache/camel/pull/4105#discussion_r473314658", "createdAt": "2020-08-19T20:58:16Z", "author": {"login": "oscerd"}, "path": "components/camel-http-base/src/main/java/org/apache/camel/http/base/HttpSendDynamicAware.java", "diffHunk": "@@ -100,6 +100,10 @@ public Processor createPreProcessor(Exchange exchange, DynamicAwareEntry entry)\n             query = URISupport.createQueryString(new LinkedHashMap<>(entry.getLenientProperties()));\n         }\n \n+        if (query == null && exchange.getIn().getHeader(Exchange.HTTP_QUERY) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1b863a71cff485a4ef58e63b50f63c0e34f6cfb1"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384", "author": {"user": null}, "url": "https://github.com/apache/camel/commit/993bdb2aec1599c3a5d41f1ffb7f6f1735f93384", "committedDate": "2020-08-20T10:49:36Z", "message": "CAMEL-15420 camel-http dynamic aware removes Exchange.HTTP_QUERY header if Exchange.HTTP_PATH header not specified\n\nUsing ObjectHelper\n\nChecking HTTP_PATH and HTTP_QUERY headers\n\nChecking HTTP_PATH and HTTP_QUERY headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTA2ODUz", "url": "https://github.com/apache/camel/pull/4105#pullrequestreview-471506853", "createdAt": "2020-08-20T11:36:07Z", "commit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjowN1rOHD8yGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjowN1rOHD8yGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMzY0Mg==", "bodyText": "No this just checks that the headers was set via Camel, not really that the HTTP server received those headers. Its something up in your setup you need to add this check", "url": "https://github.com/apache/camel/pull/4105#discussion_r473903642", "createdAt": "2020-08-20T11:36:07Z", "author": {"login": "davsclaus"}, "path": "components/camel-http/src/test/java/org/apache/camel/component/http/HttpSendDynamicAwareHeadersTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.http;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.RoutesBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.http.handler.BasicValidationHandler;\n+import org.apache.http.impl.bootstrap.HttpServer;\n+import org.apache.http.impl.bootstrap.ServerBootstrap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.component.http.HttpMethods.GET;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class HttpSendDynamicAwareHeadersTest extends BaseHttpTest {\n+\n+    private HttpServer localServer;\n+\n+    @BeforeEach\n+    @Override\n+    public void setUp() throws Exception {\n+        localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor())\n+                .setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory())\n+                .setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext())\n+                .registerHandler(\"/dynamicAware\", new BasicValidationHandler(GET.name(), null, null, null)).create();\n+        localServer.start();\n+\n+        super.setUp();\n+    }\n+\n+    @AfterEach\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        if (localServer != null) {\n+            localServer.stop();\n+        }\n+    }\n+\n+    @Override\n+    protected RoutesBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:dynamicAwareWithoutPathHeader\")\n+                        .setHeader(Exchange.HTTP_QUERY, constant(\"par1=val1&par2=val2\"))\n+                        .toD(\"http://localhost:\" + localServer.getLocalPort() + \"/dynamicAware\");\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testDynamicAwareHeadersQuery() throws Exception {\n+        Exchange e = fluentTemplate.to(\"direct:dynamicAwareWithoutPathHeader\").send();\n+        assertEquals(\"/dynamicAware\", e.getIn().getHeader(Exchange.HTTP_PATH));\n+        assertEquals(\"par1=val1&par2=val2\", e.getIn().getHeader(Exchange.HTTP_QUERY));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcxNTA3Mzk3", "url": "https://github.com/apache/camel/pull/4105#pullrequestreview-471507397", "createdAt": "2020-08-20T11:36:54Z", "commit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjo1NFrOHD8zvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMTozNjo1NFrOHD8zvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwNDA2MQ==", "bodyText": "See something like: https://github.com/apache/camel/blob/master/components/camel-http/src/test/java/org/apache/camel/component/http/HttpCamelHeadersTest.java#L48", "url": "https://github.com/apache/camel/pull/4105#discussion_r473904061", "createdAt": "2020-08-20T11:36:54Z", "author": {"login": "davsclaus"}, "path": "components/camel-http/src/test/java/org/apache/camel/component/http/HttpSendDynamicAwareHeadersTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.http;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.RoutesBuilder;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.http.handler.BasicValidationHandler;\n+import org.apache.http.impl.bootstrap.HttpServer;\n+import org.apache.http.impl.bootstrap.ServerBootstrap;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.apache.camel.component.http.HttpMethods.GET;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class HttpSendDynamicAwareHeadersTest extends BaseHttpTest {\n+\n+    private HttpServer localServer;\n+\n+    @BeforeEach\n+    @Override\n+    public void setUp() throws Exception {\n+        localServer = ServerBootstrap.bootstrap().setHttpProcessor(getBasicHttpProcessor())\n+                .setConnectionReuseStrategy(getConnectionReuseStrategy()).setResponseFactory(getHttpResponseFactory())\n+                .setExpectationVerifier(getHttpExpectationVerifier()).setSslContext(getSSLContext())\n+                .registerHandler(\"/dynamicAware\", new BasicValidationHandler(GET.name(), null, null, null)).create();\n+        localServer.start();\n+\n+        super.setUp();\n+    }\n+\n+    @AfterEach\n+    @Override\n+    public void tearDown() throws Exception {\n+        super.tearDown();\n+\n+        if (localServer != null) {\n+            localServer.stop();\n+        }\n+    }\n+\n+    @Override\n+    protected RoutesBuilder createRouteBuilder() throws Exception {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() throws Exception {\n+                from(\"direct:dynamicAwareWithoutPathHeader\")\n+                        .setHeader(Exchange.HTTP_QUERY, constant(\"par1=val1&par2=val2\"))\n+                        .toD(\"http://localhost:\" + localServer.getLocalPort() + \"/dynamicAware\");\n+            }\n+        };\n+    }\n+\n+    @Test\n+    public void testDynamicAwareHeadersQuery() throws Exception {\n+        Exchange e = fluentTemplate.to(\"direct:dynamicAwareWithoutPathHeader\").send();\n+        assertEquals(\"/dynamicAware\", e.getIn().getHeader(Exchange.HTTP_PATH));\n+        assertEquals(\"par1=val1&par2=val2\", e.getIn().getHeader(Exchange.HTTP_QUERY));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzkwMzY0Mg=="}, "originalCommit": {"oid": "993bdb2aec1599c3a5d41f1ffb7f6f1735f93384"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2939, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}