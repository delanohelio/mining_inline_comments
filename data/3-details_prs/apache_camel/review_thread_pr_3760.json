{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA1NzY2ODQy", "number": 3760, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo1NjowN1rODzkvxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo1Mjo1OFrOD0CsHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDA2MDIxOnYy", "diffSide": "RIGHT", "path": "core/camel-componentdsl/src/generated/resources/metadata.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjo1NjowN1rOGIF1Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjo1ODoyNVrOGIeX7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzNzM0Ng==", "bodyText": "Firstversion is 3.3.0", "url": "https://github.com/apache/camel/pull/3760#discussion_r411137346", "createdAt": "2020-04-20T06:56:07Z", "author": {"login": "oscerd"}, "path": "core/camel-componentdsl/src/generated/resources/metadata.json", "diffHunk": "@@ -6612,6 +6612,28 @@\n     \"producerOnly\": false,\n     \"lenientProperties\": false\n   },\n+  \"SplunkHecComponentBuilderFactory\": {\n+    \"kind\": \"component\",\n+    \"name\": \"splunk-hec\",\n+    \"title\": \"Splunk HEC\",\n+    \"description\": \"The splunk component allows to publish events in Splunk using the HTTP Event Collector.\",\n+    \"deprecated\": false,\n+    \"deprecationNote\": \"log,monitoring\",\n+    \"firstVersion\": \"3.2.0\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d681dd5d29aea54297ab1327a3f93fbd82ba11f1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzOTQzOA==", "bodyText": "Fixed.", "url": "https://github.com/apache/camel/pull/3760#discussion_r411539438", "createdAt": "2020-04-20T16:58:25Z", "author": {"login": "atoulme"}, "path": "core/camel-componentdsl/src/generated/resources/metadata.json", "diffHunk": "@@ -6612,6 +6612,28 @@\n     \"producerOnly\": false,\n     \"lenientProperties\": false\n   },\n+  \"SplunkHecComponentBuilderFactory\": {\n+    \"kind\": \"component\",\n+    \"name\": \"splunk-hec\",\n+    \"title\": \"Splunk HEC\",\n+    \"description\": \"The splunk component allows to publish events in Splunk using the HTTP Event Collector.\",\n+    \"deprecated\": false,\n+    \"deprecationNote\": \"log,monitoring\",\n+    \"firstVersion\": \"3.2.0\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEzNzM0Ng=="}, "originalCommit": {"oid": "d681dd5d29aea54297ab1327a3f93fbd82ba11f1"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDI0MDk5OnYy", "diffSide": "RIGHT", "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECProducer.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNzo0NDo1M1rOGIHcog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjo1NDo1NVrOGIeOnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2MzgxMA==", "bodyText": "Isn't better to have httpClient.close before super.doStop()?", "url": "https://github.com/apache/camel/pull/3760#discussion_r411163810", "createdAt": "2020-04-20T07:44:53Z", "author": {"login": "omarsmak"}, "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECProducer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.splunkhec;\n+\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.ssl.NoopHostnameVerifier;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.EntityTemplate;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.ssl.SSLContextBuilder;\n+\n+/**\n+ * The Splunk HEC producer.\n+ */\n+public class SplunkHECProducer extends DefaultProducer {\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private SplunkHECEndpoint endpoint;\n+    private CloseableHttpClient httpClient;\n+\n+\n+    public SplunkHECProducer(SplunkHECEndpoint endpoint) {\n+        super(endpoint);\n+        this.endpoint = endpoint;\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        HttpClientBuilder builder = HttpClients.custom().\n+                setUserAgent(\"Camel Splunk HEC/\" + getEndpoint().getCamelContext().getVersion()).\n+                setMaxConnTotal(10);\n+        if (endpoint.getConfiguration().isSkiptlsverify()) {\n+            SSLContextBuilder sslbuilder = new SSLContextBuilder();\n+            sslbuilder.loadTrustMaterial(null, (chain, authType) -> true);\n+            SSLConnectionSocketFactory sslsf = new\n+                    SSLConnectionSocketFactory(sslbuilder.build(), NoopHostnameVerifier.INSTANCE);\n+            builder.setSSLSocketFactory(sslsf);\n+        }\n+        httpClient = builder.build();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Map<String, Object> payload = createPayload(exchange.getIn());\n+\n+        HttpPost httppost = new HttpPost((endpoint.getConfiguration().isHttps() ? \"https\" : \"http\") + \"://\" + endpoint.getSplunkURL() + \"/services/collector/event\");\n+        httppost.addHeader(\"Authorization\", \" Splunk \" + endpoint.getToken());\n+\n+        EntityTemplate entityTemplate = new EntityTemplate(outputStream -> MAPPER.writer().writeValue(outputStream, payload));\n+        entityTemplate.setContentType(ContentType.APPLICATION_JSON.getMimeType());\n+\n+        httppost.setEntity(entityTemplate);\n+        try (CloseableHttpResponse response = httpClient.execute(httppost)) {\n+            if (response.getStatusLine().getStatusCode() != 200) {\n+                ByteArrayOutputStream output = new ByteArrayOutputStream();\n+                response.getEntity().writeTo(output);\n+\n+                throw new RuntimeException(response.getStatusLine().toString() + \"\\n\" + new String(output.toByteArray(), StandardCharsets.UTF_8));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+        httpClient.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d681dd5d29aea54297ab1327a3f93fbd82ba11f1"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzNzA1Mw==", "bodyText": "I'm seeing file and seda behave differently there. I think super.doStop() should be first so it logs the stop operation. If the client throws an exception, at least you get the log before.", "url": "https://github.com/apache/camel/pull/3760#discussion_r411537053", "createdAt": "2020-04-20T16:54:55Z", "author": {"login": "atoulme"}, "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECProducer.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.splunkhec;\n+\n+\n+import java.io.ByteArrayOutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Message;\n+import org.apache.camel.support.DefaultProducer;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.conn.ssl.NoopHostnameVerifier;\n+import org.apache.http.conn.ssl.SSLConnectionSocketFactory;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.EntityTemplate;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.impl.client.HttpClients;\n+import org.apache.http.ssl.SSLContextBuilder;\n+\n+/**\n+ * The Splunk HEC producer.\n+ */\n+public class SplunkHECProducer extends DefaultProducer {\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    private SplunkHECEndpoint endpoint;\n+    private CloseableHttpClient httpClient;\n+\n+\n+    public SplunkHECProducer(SplunkHECEndpoint endpoint) {\n+        super(endpoint);\n+        this.endpoint = endpoint;\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        HttpClientBuilder builder = HttpClients.custom().\n+                setUserAgent(\"Camel Splunk HEC/\" + getEndpoint().getCamelContext().getVersion()).\n+                setMaxConnTotal(10);\n+        if (endpoint.getConfiguration().isSkiptlsverify()) {\n+            SSLContextBuilder sslbuilder = new SSLContextBuilder();\n+            sslbuilder.loadTrustMaterial(null, (chain, authType) -> true);\n+            SSLConnectionSocketFactory sslsf = new\n+                    SSLConnectionSocketFactory(sslbuilder.build(), NoopHostnameVerifier.INSTANCE);\n+            builder.setSSLSocketFactory(sslsf);\n+        }\n+        httpClient = builder.build();\n+    }\n+\n+    @Override\n+    public void process(Exchange exchange) throws Exception {\n+        Map<String, Object> payload = createPayload(exchange.getIn());\n+\n+        HttpPost httppost = new HttpPost((endpoint.getConfiguration().isHttps() ? \"https\" : \"http\") + \"://\" + endpoint.getSplunkURL() + \"/services/collector/event\");\n+        httppost.addHeader(\"Authorization\", \" Splunk \" + endpoint.getToken());\n+\n+        EntityTemplate entityTemplate = new EntityTemplate(outputStream -> MAPPER.writer().writeValue(outputStream, payload));\n+        entityTemplate.setContentType(ContentType.APPLICATION_JSON.getMimeType());\n+\n+        httppost.setEntity(entityTemplate);\n+        try (CloseableHttpResponse response = httpClient.execute(httppost)) {\n+            if (response.getStatusLine().getStatusCode() != 200) {\n+                ByteArrayOutputStream output = new ByteArrayOutputStream();\n+                response.getEntity().writeTo(output);\n+\n+                throw new RuntimeException(response.getStatusLine().toString() + \"\\n\" + new String(output.toByteArray(), StandardCharsets.UTF_8));\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+        httpClient.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTE2MzgxMA=="}, "originalCommit": {"oid": "d681dd5d29aea54297ab1327a3f93fbd82ba11f1"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1NDU3MTA5OnYy", "diffSide": "RIGHT", "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECConfiguration.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOTowMTozN1rOGIKbiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNjo1ODozNlrOGIeYZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMjY4MQ==", "bodyText": "@atoulme it would be nice to use camel case, however it's a little bit tautology for Camel project :)", "url": "https://github.com/apache/camel/pull/3760#discussion_r411212681", "createdAt": "2020-04-20T09:01:37Z", "author": {"login": "dmvolod"}, "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECConfiguration.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.splunkhec;\n+\n+import java.net.UnknownHostException;\n+\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.spi.UriParams;\n+import org.apache.camel.util.HostUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@UriParams\n+public class SplunkHECConfiguration {\n+    private static final transient Logger LOG = LoggerFactory.getLogger(SplunkHECConfiguration.class);\n+\n+    @UriParam(label = \"producer\")\n+    private String index = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String sourceType = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String source = \"camel\";\n+    @UriParam(label = \"host\")\n+    private String host;\n+    @UriParam(label = \"skiptlsverify\")\n+    private boolean skiptlsverify;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d681dd5d29aea54297ab1327a3f93fbd82ba11f1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTUzOTU1OA==", "bodyText": "Sure thing. Fixed!", "url": "https://github.com/apache/camel/pull/3760#discussion_r411539558", "createdAt": "2020-04-20T16:58:36Z", "author": {"login": "atoulme"}, "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECConfiguration.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.splunkhec;\n+\n+import java.net.UnknownHostException;\n+\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.spi.UriParams;\n+import org.apache.camel.util.HostUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@UriParams\n+public class SplunkHECConfiguration {\n+    private static final transient Logger LOG = LoggerFactory.getLogger(SplunkHECConfiguration.class);\n+\n+    @UriParam(label = \"producer\")\n+    private String index = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String sourceType = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String source = \"camel\";\n+    @UriParam(label = \"host\")\n+    private String host;\n+    @UriParam(label = \"skiptlsverify\")\n+    private boolean skiptlsverify;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIxMjY4MQ=="}, "originalCommit": {"oid": "d681dd5d29aea54297ab1327a3f93fbd82ba11f1"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODk2NDM3OnYy", "diffSide": "RIGHT", "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECConfiguration.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo1MTo1NFrOGIyY_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo1MTo1NFrOGIyY_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2NzM4OQ==", "bodyText": "You need to specify default value in @UriParam when it has a value, also for the ones that has camel above.", "url": "https://github.com/apache/camel/pull/3760#discussion_r411867389", "createdAt": "2020-04-21T04:51:54Z", "author": {"login": "davsclaus"}, "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECConfiguration.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.splunkhec;\n+\n+import java.net.UnknownHostException;\n+\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.spi.UriParams;\n+import org.apache.camel.util.HostUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@UriParams\n+public class SplunkHECConfiguration {\n+    private static final transient Logger LOG = LoggerFactory.getLogger(SplunkHECConfiguration.class);\n+\n+    @UriParam(label = \"producer\")\n+    private String index = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String sourceType = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String source = \"camel\";\n+    @UriParam(label = \"producer\")\n+    private String host;\n+    @UriParam(label = \"producer\")\n+    private boolean skipTlsVerify;\n+    @UriParam(label = \"producer\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "839e9d8cfd2181379dbe5a5a16f0b53294562026"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1ODk2NjA2OnYy", "diffSide": "RIGHT", "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECEndpoint.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo1Mjo1OFrOGIyaFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwNDo1Mjo1OFrOGIyaFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTg2NzY2OQ==", "bodyText": "@UriPath must match the syntax splunk-hec:endpoint/token, eg having 2 UriPath named endpoint and token. Otherwise change the syntax to splunk-hec:endpointUri to match the current @UriPath name.", "url": "https://github.com/apache/camel/pull/3760#discussion_r411867669", "createdAt": "2020-04-21T04:52:58Z", "author": {"login": "davsclaus"}, "path": "components/camel-splunk-hec/src/main/java/org/apache/camel/component/splunkhec/SplunkHECEndpoint.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.splunkhec;\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.spi.UriPath;\n+import org.apache.camel.support.DefaultEndpoint;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The splunk component allows to publish events in Splunk using the HTTP Event Collector.\n+ */\n+@UriEndpoint(firstVersion = \"3.3.0\", scheme = \"splunk-hec\", title = \"Splunk HEC\", syntax = \"splunk-hec:endpoint/token\", label = \"log,monitoring\")\n+public class SplunkHECEndpoint extends DefaultEndpoint {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SplunkHECEndpoint.class);\n+    private static final Pattern URI_PARSER = Pattern.compile(\"splunk-hec\\\\:\\\\/?\\\\/?(\\\\w+):(\\\\d+)/(\\\\w{8}-\\\\w{4}-\\\\w{4}-\\\\w{4}-\\\\w{12})\\\\??.*\");\n+\n+    @UriPath", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "839e9d8cfd2181379dbe5a5a16f0b53294562026"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4985, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}