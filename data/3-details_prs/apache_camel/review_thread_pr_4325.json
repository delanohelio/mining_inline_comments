{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTExODUw", "number": 4325, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMTozN1rOEpDzAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMTozN1rOEpDzAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDg5MjgwOnYy", "diffSide": "RIGHT", "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMTozN1rOHagh6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDo0NjozN1rOHahQLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1Nzk5NA==", "bodyText": "You should favour async processor anyway as that makes camel use it where it can", "url": "https://github.com/apache/camel/pull/4325#discussion_r497557994", "createdAt": "2020-09-30T14:31:37Z", "author": {"login": "davsclaus"}, "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "diffHunk": "@@ -163,6 +146,63 @@ private String configureEndpointPath(PlatformHttpEndpoint endpoint) {\n         return PATH_PARAMETER_PATTERN.matcher(path).replaceAll(\":$1\");\n     }\n \n+    private void handleRequest(RoutingContext ctx) {\n+        final Vertx vertx = ctx.vertx();\n+        final Exchange exchange = toExchange(ctx);\n+\n+        //\n+        // We do not know if any of the processing logic of the route is synchronous or not so we\n+        // need to process the request on a thread on the Vert.x worker pool.\n+        //\n+        // As example, assuming the platform-http component is configured as the transport provider\n+        // for the rest dsl, then the following code may result in a blocking operation that could\n+        // block Vert.x event-loop for too long if the target service takes long to respond, as\n+        // example in case the service is a knative service scaled to zero that could take some time\n+        // to be come available:\n+        //\n+        //     rest(\"/results\")\n+        //         .get(\"/{id}\")\n+        //         .route()\n+        //             .removeHeaders(\"*\", \"CamelHttpPath\")\n+        //             .to(\"rest:get:?bridgeEndpoint=true\");\n+        //\n+        vertx.executeBlocking(\n+                promise -> {\n+                    try {\n+                        createUoW(exchange);\n+\n+                        // no need to use an async processor as the processing happen in\n+                        // a dedicated thread ans it won't block the Vert.x event loop\n+                        getProcessor().process(exchange);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b83291ef2b682cf58c2724b238e2e791e4580384"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2MzMxMw==", "bodyText": "@davsclaus something like: getAsyncProcessor().process(exchange, c -> promise.complete()); ?", "url": "https://github.com/apache/camel/pull/4325#discussion_r497563313", "createdAt": "2020-09-30T14:38:30Z", "author": {"login": "lburgazzoli"}, "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "diffHunk": "@@ -163,6 +146,63 @@ private String configureEndpointPath(PlatformHttpEndpoint endpoint) {\n         return PATH_PARAMETER_PATTERN.matcher(path).replaceAll(\":$1\");\n     }\n \n+    private void handleRequest(RoutingContext ctx) {\n+        final Vertx vertx = ctx.vertx();\n+        final Exchange exchange = toExchange(ctx);\n+\n+        //\n+        // We do not know if any of the processing logic of the route is synchronous or not so we\n+        // need to process the request on a thread on the Vert.x worker pool.\n+        //\n+        // As example, assuming the platform-http component is configured as the transport provider\n+        // for the rest dsl, then the following code may result in a blocking operation that could\n+        // block Vert.x event-loop for too long if the target service takes long to respond, as\n+        // example in case the service is a knative service scaled to zero that could take some time\n+        // to be come available:\n+        //\n+        //     rest(\"/results\")\n+        //         .get(\"/{id}\")\n+        //         .route()\n+        //             .removeHeaders(\"*\", \"CamelHttpPath\")\n+        //             .to(\"rest:get:?bridgeEndpoint=true\");\n+        //\n+        vertx.executeBlocking(\n+                promise -> {\n+                    try {\n+                        createUoW(exchange);\n+\n+                        // no need to use an async processor as the processing happen in\n+                        // a dedicated thread ans it won't block the Vert.x event loop\n+                        getProcessor().process(exchange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1Nzk5NA=="}, "originalCommit": {"oid": "b83291ef2b682cf58c2724b238e2e791e4580384"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2Mzg5Nw==", "bodyText": "Yes exactly", "url": "https://github.com/apache/camel/pull/4325#discussion_r497563897", "createdAt": "2020-09-30T14:39:16Z", "author": {"login": "davsclaus"}, "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "diffHunk": "@@ -163,6 +146,63 @@ private String configureEndpointPath(PlatformHttpEndpoint endpoint) {\n         return PATH_PARAMETER_PATTERN.matcher(path).replaceAll(\":$1\");\n     }\n \n+    private void handleRequest(RoutingContext ctx) {\n+        final Vertx vertx = ctx.vertx();\n+        final Exchange exchange = toExchange(ctx);\n+\n+        //\n+        // We do not know if any of the processing logic of the route is synchronous or not so we\n+        // need to process the request on a thread on the Vert.x worker pool.\n+        //\n+        // As example, assuming the platform-http component is configured as the transport provider\n+        // for the rest dsl, then the following code may result in a blocking operation that could\n+        // block Vert.x event-loop for too long if the target service takes long to respond, as\n+        // example in case the service is a knative service scaled to zero that could take some time\n+        // to be come available:\n+        //\n+        //     rest(\"/results\")\n+        //         .get(\"/{id}\")\n+        //         .route()\n+        //             .removeHeaders(\"*\", \"CamelHttpPath\")\n+        //             .to(\"rest:get:?bridgeEndpoint=true\");\n+        //\n+        vertx.executeBlocking(\n+                promise -> {\n+                    try {\n+                        createUoW(exchange);\n+\n+                        // no need to use an async processor as the processing happen in\n+                        // a dedicated thread ans it won't block the Vert.x event loop\n+                        getProcessor().process(exchange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1Nzk5NA=="}, "originalCommit": {"oid": "b83291ef2b682cf58c2724b238e2e791e4580384"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NTk5NQ==", "bodyText": "or maybe better\ngetAsyncProcessor().process(exchange, c -> {\n    if (!exchange.isFailed()) {\n        promise.complete();\n    } else {\n        promise.fail(exchange.getException());\n    }\n});", "url": "https://github.com/apache/camel/pull/4325#discussion_r497565995", "createdAt": "2020-09-30T14:41:47Z", "author": {"login": "lburgazzoli"}, "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "diffHunk": "@@ -163,6 +146,63 @@ private String configureEndpointPath(PlatformHttpEndpoint endpoint) {\n         return PATH_PARAMETER_PATTERN.matcher(path).replaceAll(\":$1\");\n     }\n \n+    private void handleRequest(RoutingContext ctx) {\n+        final Vertx vertx = ctx.vertx();\n+        final Exchange exchange = toExchange(ctx);\n+\n+        //\n+        // We do not know if any of the processing logic of the route is synchronous or not so we\n+        // need to process the request on a thread on the Vert.x worker pool.\n+        //\n+        // As example, assuming the platform-http component is configured as the transport provider\n+        // for the rest dsl, then the following code may result in a blocking operation that could\n+        // block Vert.x event-loop for too long if the target service takes long to respond, as\n+        // example in case the service is a knative service scaled to zero that could take some time\n+        // to be come available:\n+        //\n+        //     rest(\"/results\")\n+        //         .get(\"/{id}\")\n+        //         .route()\n+        //             .removeHeaders(\"*\", \"CamelHttpPath\")\n+        //             .to(\"rest:get:?bridgeEndpoint=true\");\n+        //\n+        vertx.executeBlocking(\n+                promise -> {\n+                    try {\n+                        createUoW(exchange);\n+\n+                        // no need to use an async processor as the processing happen in\n+                        // a dedicated thread ans it won't block the Vert.x event loop\n+                        getProcessor().process(exchange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1Nzk5NA=="}, "originalCommit": {"oid": "b83291ef2b682cf58c2724b238e2e791e4580384"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2NjU3MA==", "bodyText": "@davsclaus ^", "url": "https://github.com/apache/camel/pull/4325#discussion_r497566570", "createdAt": "2020-09-30T14:42:32Z", "author": {"login": "lburgazzoli"}, "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "diffHunk": "@@ -163,6 +146,63 @@ private String configureEndpointPath(PlatformHttpEndpoint endpoint) {\n         return PATH_PARAMETER_PATTERN.matcher(path).replaceAll(\":$1\");\n     }\n \n+    private void handleRequest(RoutingContext ctx) {\n+        final Vertx vertx = ctx.vertx();\n+        final Exchange exchange = toExchange(ctx);\n+\n+        //\n+        // We do not know if any of the processing logic of the route is synchronous or not so we\n+        // need to process the request on a thread on the Vert.x worker pool.\n+        //\n+        // As example, assuming the platform-http component is configured as the transport provider\n+        // for the rest dsl, then the following code may result in a blocking operation that could\n+        // block Vert.x event-loop for too long if the target service takes long to respond, as\n+        // example in case the service is a knative service scaled to zero that could take some time\n+        // to be come available:\n+        //\n+        //     rest(\"/results\")\n+        //         .get(\"/{id}\")\n+        //         .route()\n+        //             .removeHeaders(\"*\", \"CamelHttpPath\")\n+        //             .to(\"rest:get:?bridgeEndpoint=true\");\n+        //\n+        vertx.executeBlocking(\n+                promise -> {\n+                    try {\n+                        createUoW(exchange);\n+\n+                        // no need to use an async processor as the processing happen in\n+                        // a dedicated thread ans it won't block the Vert.x event loop\n+                        getProcessor().process(exchange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1Nzk5NA=="}, "originalCommit": {"oid": "b83291ef2b682cf58c2724b238e2e791e4580384"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU2OTgzNg==", "bodyText": "Yeah just be sure that when promise.fail will also trigger the result block (I dont know what it does) as the UoW must be done as it does below in the finally block", "url": "https://github.com/apache/camel/pull/4325#discussion_r497569836", "createdAt": "2020-09-30T14:46:37Z", "author": {"login": "davsclaus"}, "path": "components/camel-platform-http-vertx/src/main/java/org/apache/camel/component/platform/http/vertx/VertxPlatformHttpConsumer.java", "diffHunk": "@@ -163,6 +146,63 @@ private String configureEndpointPath(PlatformHttpEndpoint endpoint) {\n         return PATH_PARAMETER_PATTERN.matcher(path).replaceAll(\":$1\");\n     }\n \n+    private void handleRequest(RoutingContext ctx) {\n+        final Vertx vertx = ctx.vertx();\n+        final Exchange exchange = toExchange(ctx);\n+\n+        //\n+        // We do not know if any of the processing logic of the route is synchronous or not so we\n+        // need to process the request on a thread on the Vert.x worker pool.\n+        //\n+        // As example, assuming the platform-http component is configured as the transport provider\n+        // for the rest dsl, then the following code may result in a blocking operation that could\n+        // block Vert.x event-loop for too long if the target service takes long to respond, as\n+        // example in case the service is a knative service scaled to zero that could take some time\n+        // to be come available:\n+        //\n+        //     rest(\"/results\")\n+        //         .get(\"/{id}\")\n+        //         .route()\n+        //             .removeHeaders(\"*\", \"CamelHttpPath\")\n+        //             .to(\"rest:get:?bridgeEndpoint=true\");\n+        //\n+        vertx.executeBlocking(\n+                promise -> {\n+                    try {\n+                        createUoW(exchange);\n+\n+                        // no need to use an async processor as the processing happen in\n+                        // a dedicated thread ans it won't block the Vert.x event loop\n+                        getProcessor().process(exchange);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1Nzk5NA=="}, "originalCommit": {"oid": "b83291ef2b682cf58c2724b238e2e791e4580384"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4810, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}