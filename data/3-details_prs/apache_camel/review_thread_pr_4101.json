{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDU2MTY0", "number": 4101, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxOToyM1rOEZ6WuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMjo0NzoyNlrOEbXH-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjA1OTQ0OnYy", "diffSide": "RIGHT", "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/testContainers/MinioComponentIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDoxOToyM1rOHDA2QA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDozMDo0MlrOHDKLZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMTY2NA==", "bodyText": "Please don't add credentials to the source code files", "url": "https://github.com/apache/camel/pull/4101#discussion_r472921664", "createdAt": "2020-08-19T10:19:23Z", "author": {"login": "omarsmak"}, "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/testContainers/MinioComponentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.minio.integration.testContainers;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Properties;\n+\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Message;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.minio.MinioConstants;\n+import org.apache.camel.component.minio.integration.MinioTestUtils;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.testcontainers.junit5.ContainerAwareTestSupport;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class MinioComponentIntegrationTest extends ContainerAwareTestSupport {\n+\n+    final Properties properties = MinioTestUtils.loadMinioPropertiesFile();\n+    final int port = 9000;\n+\n+    @EndpointInject(\"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @EndpointInject(\"mock:result\")\n+    private MockEndpoint result;\n+\n+    public MinioComponentIntegrationTest() throws IOException {\n+    }\n+\n+    @Test\n+    public void sendInOnly() throws Exception {\n+        result.expectedMessageCount(1);\n+\n+        Exchange exchange1 = template.send(\"direct:start\", ExchangePattern.InOnly, exchange -> {\n+            exchange.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        Exchange exchange2 = template.send(\"direct:start\", ExchangePattern.InOnly, exchange -> {\n+            exchange.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        assertMockEndpointsSatisfied();\n+\n+        assertResultExchange(result.getExchanges().get(0));\n+\n+        assertResponseMessage(exchange1.getIn());\n+        assertResponseMessage(exchange2.getIn());\n+    }\n+\n+    @Test\n+    public void sendInOut() throws Exception {\n+        result.expectedMessageCount(1);\n+\n+        Exchange exchange = template.send(\"direct:start\", ExchangePattern.InOut, exchange1 -> {\n+            exchange1.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange1.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        assertMockEndpointsSatisfied();\n+\n+        assertResultExchange(result.getExchanges().get(0));\n+\n+        assertResponseMessage(exchange.getMessage());\n+    }\n+\n+    private void assertResultExchange(Exchange resultExchange) {\n+        assertEquals(\"This is my bucket content.\", resultExchange.getIn().getBody(String.class));\n+        assertEquals(\"mycamelbucket\", resultExchange.getIn().getHeader(MinioConstants.BUCKET_NAME));\n+        assertTrue(resultExchange.getIn().getHeader(MinioConstants.OBJECT_NAME, String.class).startsWith(\"CamelUnitTest\"));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.VERSION_ID)); // not enabled on this bucket\n+        assertNotNull(resultExchange.getIn().getHeader(MinioConstants.LAST_MODIFIED));\n+        assertEquals(\"application/octet-stream\", resultExchange.getIn().getHeader(MinioConstants.CONTENT_TYPE));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_ENCODING));\n+        assertEquals(26L, resultExchange.getIn().getHeader(MinioConstants.CONTENT_LENGTH));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_DISPOSITION));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_MD5));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CACHE_CONTROL));\n+    }\n+\n+    private void assertResponseMessage(Message message) {\n+        assertNull(message.getHeader(MinioConstants.VERSION_ID));\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() {\n+                String minioEndpointUri =\n+                        \"minio://mycamelbucket?accessKey=Q3AM3UQ867SPQQA43P2F&secretKey=RAW(zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG)&region=us-west-1&autoCreateBucket=true&endpoint=http://127.0.0.1&proxyPort=9000\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "107125cd629c91b175030b4fd650af039684a013"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA2NDE5Nw==", "bodyText": "@omarsmak sure I'll import them from a resource file, Any suggestions regarding above error?", "url": "https://github.com/apache/camel/pull/4101#discussion_r473064197", "createdAt": "2020-08-19T14:17:25Z", "author": {"login": "Nayananga"}, "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/testContainers/MinioComponentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.minio.integration.testContainers;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Properties;\n+\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Message;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.minio.MinioConstants;\n+import org.apache.camel.component.minio.integration.MinioTestUtils;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.testcontainers.junit5.ContainerAwareTestSupport;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class MinioComponentIntegrationTest extends ContainerAwareTestSupport {\n+\n+    final Properties properties = MinioTestUtils.loadMinioPropertiesFile();\n+    final int port = 9000;\n+\n+    @EndpointInject(\"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @EndpointInject(\"mock:result\")\n+    private MockEndpoint result;\n+\n+    public MinioComponentIntegrationTest() throws IOException {\n+    }\n+\n+    @Test\n+    public void sendInOnly() throws Exception {\n+        result.expectedMessageCount(1);\n+\n+        Exchange exchange1 = template.send(\"direct:start\", ExchangePattern.InOnly, exchange -> {\n+            exchange.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        Exchange exchange2 = template.send(\"direct:start\", ExchangePattern.InOnly, exchange -> {\n+            exchange.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        assertMockEndpointsSatisfied();\n+\n+        assertResultExchange(result.getExchanges().get(0));\n+\n+        assertResponseMessage(exchange1.getIn());\n+        assertResponseMessage(exchange2.getIn());\n+    }\n+\n+    @Test\n+    public void sendInOut() throws Exception {\n+        result.expectedMessageCount(1);\n+\n+        Exchange exchange = template.send(\"direct:start\", ExchangePattern.InOut, exchange1 -> {\n+            exchange1.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange1.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        assertMockEndpointsSatisfied();\n+\n+        assertResultExchange(result.getExchanges().get(0));\n+\n+        assertResponseMessage(exchange.getMessage());\n+    }\n+\n+    private void assertResultExchange(Exchange resultExchange) {\n+        assertEquals(\"This is my bucket content.\", resultExchange.getIn().getBody(String.class));\n+        assertEquals(\"mycamelbucket\", resultExchange.getIn().getHeader(MinioConstants.BUCKET_NAME));\n+        assertTrue(resultExchange.getIn().getHeader(MinioConstants.OBJECT_NAME, String.class).startsWith(\"CamelUnitTest\"));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.VERSION_ID)); // not enabled on this bucket\n+        assertNotNull(resultExchange.getIn().getHeader(MinioConstants.LAST_MODIFIED));\n+        assertEquals(\"application/octet-stream\", resultExchange.getIn().getHeader(MinioConstants.CONTENT_TYPE));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_ENCODING));\n+        assertEquals(26L, resultExchange.getIn().getHeader(MinioConstants.CONTENT_LENGTH));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_DISPOSITION));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_MD5));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CACHE_CONTROL));\n+    }\n+\n+    private void assertResponseMessage(Message message) {\n+        assertNull(message.getHeader(MinioConstants.VERSION_ID));\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() {\n+                String minioEndpointUri =\n+                        \"minio://mycamelbucket?accessKey=Q3AM3UQ867SPQQA43P2F&secretKey=RAW(zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG)&region=us-west-1&autoCreateBucket=true&endpoint=http://127.0.0.1&proxyPort=9000\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMTY2NA=="}, "originalCommit": {"oid": "107125cd629c91b175030b4fd650af039684a013"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA3NDUzNA==", "bodyText": "@Nayananga Try to use something similar to this as I think testcontainer will generate dynamic IP but then needs to be mapped and then something like getContainer(CONTAINER_NAME).getContainerIpAddress(); to access your container's IP", "url": "https://github.com/apache/camel/pull/4101#discussion_r473074534", "createdAt": "2020-08-19T14:30:42Z", "author": {"login": "omarsmak"}, "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/testContainers/MinioComponentIntegrationTest.java", "diffHunk": "@@ -0,0 +1,139 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.minio.integration.testContainers;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.Properties;\n+\n+import org.apache.camel.EndpointInject;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.ExchangePattern;\n+import org.apache.camel.Message;\n+import org.apache.camel.ProducerTemplate;\n+import org.apache.camel.builder.RouteBuilder;\n+import org.apache.camel.component.minio.MinioConstants;\n+import org.apache.camel.component.minio.integration.MinioTestUtils;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.testcontainers.junit5.ContainerAwareTestSupport;\n+import org.junit.jupiter.api.Test;\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.HttpWaitStrategy;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+public class MinioComponentIntegrationTest extends ContainerAwareTestSupport {\n+\n+    final Properties properties = MinioTestUtils.loadMinioPropertiesFile();\n+    final int port = 9000;\n+\n+    @EndpointInject(\"direct:start\")\n+    private ProducerTemplate template;\n+\n+    @EndpointInject(\"mock:result\")\n+    private MockEndpoint result;\n+\n+    public MinioComponentIntegrationTest() throws IOException {\n+    }\n+\n+    @Test\n+    public void sendInOnly() throws Exception {\n+        result.expectedMessageCount(1);\n+\n+        Exchange exchange1 = template.send(\"direct:start\", ExchangePattern.InOnly, exchange -> {\n+            exchange.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        Exchange exchange2 = template.send(\"direct:start\", ExchangePattern.InOnly, exchange -> {\n+            exchange.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        assertMockEndpointsSatisfied();\n+\n+        assertResultExchange(result.getExchanges().get(0));\n+\n+        assertResponseMessage(exchange1.getIn());\n+        assertResponseMessage(exchange2.getIn());\n+    }\n+\n+    @Test\n+    public void sendInOut() throws Exception {\n+        result.expectedMessageCount(1);\n+\n+        Exchange exchange = template.send(\"direct:start\", ExchangePattern.InOut, exchange1 -> {\n+            exchange1.getIn().setHeader(MinioConstants.OBJECT_NAME, \"CamelUnitTest\");\n+            exchange1.getIn().setBody(\"This is my bucket content.\");\n+        });\n+\n+        assertMockEndpointsSatisfied();\n+\n+        assertResultExchange(result.getExchanges().get(0));\n+\n+        assertResponseMessage(exchange.getMessage());\n+    }\n+\n+    private void assertResultExchange(Exchange resultExchange) {\n+        assertEquals(\"This is my bucket content.\", resultExchange.getIn().getBody(String.class));\n+        assertEquals(\"mycamelbucket\", resultExchange.getIn().getHeader(MinioConstants.BUCKET_NAME));\n+        assertTrue(resultExchange.getIn().getHeader(MinioConstants.OBJECT_NAME, String.class).startsWith(\"CamelUnitTest\"));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.VERSION_ID)); // not enabled on this bucket\n+        assertNotNull(resultExchange.getIn().getHeader(MinioConstants.LAST_MODIFIED));\n+        assertEquals(\"application/octet-stream\", resultExchange.getIn().getHeader(MinioConstants.CONTENT_TYPE));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_ENCODING));\n+        assertEquals(26L, resultExchange.getIn().getHeader(MinioConstants.CONTENT_LENGTH));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_DISPOSITION));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CONTENT_MD5));\n+        assertNull(resultExchange.getIn().getHeader(MinioConstants.CACHE_CONTROL));\n+    }\n+\n+    private void assertResponseMessage(Message message) {\n+        assertNull(message.getHeader(MinioConstants.VERSION_ID));\n+    }\n+\n+    @Override\n+    protected RouteBuilder createRouteBuilder() {\n+        return new RouteBuilder() {\n+            @Override\n+            public void configure() {\n+                String minioEndpointUri =\n+                        \"minio://mycamelbucket?accessKey=Q3AM3UQ867SPQQA43P2F&secretKey=RAW(zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG)&region=us-west-1&autoCreateBucket=true&endpoint=http://127.0.0.1&proxyPort=9000\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkyMTY2NA=="}, "originalCommit": {"oid": "107125cd629c91b175030b4fd650af039684a013"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTI1Nzk1OnYy", "diffSide": "RIGHT", "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/MinioComponentIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMjo0NjoxOFrOHFQlSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMjo0NjoxOFrOHFQlSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI3NjYxNw==", "bodyText": "Junit5 is used, would be better to remove public access modifier in all test classes and all tests methods. So they will have default access modifier:\nclass MinioComponentIntegrationTest extends CamelTestSupport {", "url": "https://github.com/apache/camel/pull/4101#discussion_r475276617", "createdAt": "2020-08-23T22:46:18Z", "author": {"login": "DenisIstomin"}, "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/MinioComponentIntegrationTest.java", "diffHunk": "@@ -33,18 +36,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-@Disabled(\"Must be manually tested. Provide your own accessKey and secretKey!\")\n+@Disabled(\"Goto https://play.min.io and search for 'mycamelbucket'. If bucket(s) does not exist, set 'autoCreateBucket=true' in route(s)\")\n public class MinioComponentIntegrationTest extends CamelTestSupport {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208a14a671e767e684ce1cb7e35dacbc0b66608b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTI1ODgzOnYy", "diffSide": "RIGHT", "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/MinioComponentIntegrationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMjo0NzoyNlrOHFQltQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QyMjo0NzoyNlrOHFQltQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI3NjcyNQ==", "bodyText": "Junit5 is used, would be better to remove public access modifier in all test classes and all tests methods. So they will have default access modifier:\nvoid sendInOnly() throws Exception {", "url": "https://github.com/apache/camel/pull/4101#discussion_r475276725", "createdAt": "2020-08-23T22:47:26Z", "author": {"login": "DenisIstomin"}, "path": "components/camel-minio/src/test/java/org/apache/camel/component/minio/integration/MinioComponentIntegrationTest.java", "diffHunk": "@@ -33,18 +36,22 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n-@Disabled(\"Must be manually tested. Provide your own accessKey and secretKey!\")\n+@Disabled(\"Goto https://play.min.io and search for 'mycamelbucket'. If bucket(s) does not exist, set 'autoCreateBucket=true' in route(s)\")\n public class MinioComponentIntegrationTest extends CamelTestSupport {\n+    final Properties properties = MinioTestUtils.loadMinioPropertiesFile();\n \n     @EndpointInject(\"direct:start\")\n     private ProducerTemplate template;\n \n     @EndpointInject(\"mock:result\")\n     private MockEndpoint result;\n \n+    public MinioComponentIntegrationTest() throws IOException {\n+    }\n+\n     @Test\n     public void sendInOnly() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "208a14a671e767e684ce1cb7e35dacbc0b66608b"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4874, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}