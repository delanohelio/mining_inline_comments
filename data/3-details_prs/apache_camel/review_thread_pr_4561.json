{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE1MTYyMDM2", "number": 4561, "reviewThreads": {"totalCount": 52, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozODoxM1rOE1qQbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0NToyMlrOFAHxdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyMzE3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozODoxM1rOHuDoRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNTozMTowMVrOH1zcDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjAwNQ==", "bodyText": "What is this library here?", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056005", "createdAt": "2020-11-05T13:38:13Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3OTM0Mw==", "bodyText": "It's there to test that we can find supporting library files even within a jar. I'm not sure how much of an use case this is to be honest, if it's not good with you guys we can remove it...", "url": "https://github.com/apache/camel/pull/4561#discussion_r526179343", "createdAt": "2020-11-18T15:31:01Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjAwNQ=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyNDYzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozODozNVrOHuDpPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxOTo1MzowNlrOHuUFww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjI1Mg==", "bodyText": "If we need this, we need to move the property version placeholder in parent/pom", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056252", "createdAt": "2020-11-05T13:38:35Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxNjE0OA==", "bodyText": "Oh I see... I think that might break some things. I ran into this PR some time ago #2060", "url": "https://github.com/apache/camel/pull/4561#discussion_r518216148", "createdAt": "2020-11-05T17:10:41Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjI1Mg=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzMDU0Ng==", "bodyText": "You can also specify a single property placeholder in parent/pom only for camel-datasonnet", "url": "https://github.com/apache/camel/pull/4561#discussion_r518230546", "createdAt": "2020-11-05T17:32:08Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjI1Mg=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMxNzY1MA==", "bodyText": "OK so it seems camel-flink is the only other component using scala-library, unfortunately it depends on an earlier version than what datasonnet-mapper requires. I bumped the parent/pom version to the latest that camel-flink can use (2.12.12) and added a scala-datasonnet-version placeholder in parent/pom that's a few later (2.13.3). If the camel-flink dependency catches up to 2.13 then we could then make a single placeholder. Let me know if this is ok.", "url": "https://github.com/apache/camel/pull/4561#discussion_r518317650", "createdAt": "2020-11-05T19:38:37Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjI1Mg=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODMyNTY5OQ==", "bodyText": "BTW the commit is 704e851 and I ran mvn clean install -P fastinstall at the root and everything checks out green", "url": "https://github.com/apache/camel/pull/4561#discussion_r518325699", "createdAt": "2020-11-05T19:53:06Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjI1Mg=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyNTQ3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozODo0OVrOHuDpxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozODo0OVrOHuDpxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjM5MQ==", "bodyText": "There is a placeholder in parent/pom", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056391", "createdAt": "2020-11-05T13:38:49Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyNzI0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOToxNFrOHuDq7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOToxNFrOHuDq7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NjY4NA==", "bodyText": "It should go as a placeholder in parent/pom", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056684", "createdAt": "2020-11-05T13:39:14Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyODA5OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOToyMlrOHuDrWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOToyMlrOHuDrWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Njc5NQ==", "bodyText": "ditto", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056795", "createdAt": "2020-11-05T13:39:22Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyODU4OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOTozMFrOHuDrpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOTozMFrOHuDrpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Njg3MQ==", "bodyText": "ditto", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056871", "createdAt": "2020-11-05T13:39:30Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAyOTE3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOTo0MFrOHuDsCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzozOTo0MFrOHuDsCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Njk3MQ==", "bodyText": "ditto", "url": "https://github.com/apache/camel/pull/4561#discussion_r518056971", "createdAt": "2020-11-05T13:39:40Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>1.5.0</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzMjgxOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MDoyOFrOHuDuRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxNToyOTo0MFrOH1zXtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzU0MA==", "bodyText": "We essentially avoid external repository for multiple reasons: our experience with 3rd parties repository was really bad, so if possible please release in maven central.", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057540", "createdAt": "2020-11-05T13:40:28Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>1.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ms3-nexus</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODQyMjg5NA==", "bodyText": "Completely understood. We should be releasing the version we need in the next few days.", "url": "https://github.com/apache/camel/pull/4561#discussion_r518422894", "createdAt": "2020-11-05T23:02:49Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>1.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ms3-nexus</id>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzU0MA=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjE3ODIzMQ==", "bodyText": "released :)", "url": "https://github.com/apache/camel/pull/4561#discussion_r526178231", "createdAt": "2020-11-18T15:29:40Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,142 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <!-- todo: confirm the scala incompatbility is with datasonnet -->\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>2.13.3</version>\n+        </dependency>\n+        <!-- apparently scala compiler needs this -->\n+        <dependency>\n+            <groupId>org.hamcrest</groupId>\n+            <artifactId>hamcrest</artifactId>\n+            <version>2.2</version>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.datasonnet</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>0.6.0-MS3</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+            <version>2.4</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>4.8.52</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>1.5.0</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ms3-nexus</id>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzU0MA=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzNDI4OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MDo1MFrOHuDvMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MDo1MFrOHuDvMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Nzc3Nw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057777", "createdAt": "2020-11-05T13:40:50Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzNTA5OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MTowMVrOHuDvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MTowMVrOHuDvrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1NzkwMg==", "bodyText": "remove TODO", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057902", "createdAt": "2020-11-05T13:41:01Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/Datasonnet.java", "diffHunk": "@@ -0,0 +1,20 @@\n+package org.apache.camel.language.datasonnet;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import org.apache.camel.support.language.LanguageAnnotation;\n+\n+/**\n+ * Datasonnet TODO: 7/21/20 docs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzNTYyOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MToxMFrOHuDwDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MToxMFrOHuDwDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1Nzk5Nw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518057997", "createdAt": "2020-11-05T13:41:10Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetConstants.java", "diffHunk": "@@ -0,0 +1,6 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzNjEzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MToxNlrOHuDwSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MToxNlrOHuDwSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODA1OQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058059", "createdAt": "2020-11-05T13:41:16Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzNzYyOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MTozN1rOHuDxUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MTozN1rOHuDxUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODMyMA==", "bodyText": "Remove TODO", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058320", "createdAt": "2020-11-05T13:41:37Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");\n+        try (ScanResult scanResult = new ClassGraph().whitelistPaths(\"/\").scan()) {\n+            scanResult.getResourcesWithExtension(\"libsonnet\")\n+                    .forEachByteArray((resource, bytes) -> {\n+                        LOGGER.debug(\"Loading DataSonnet library: \" + resource.getPath());\n+                        CLASSPATH_IMPORTS.put(resource.getPath(), new String(bytes, StandardCharsets.UTF_8));\n+                    });\n+        }\n+    }\n+\n+    private String expression;\n+    private Expression metaExpression;\n+    private MediaType bodyMediaType;\n+    private MediaType outputMediaType;\n+    private Class<?> resultType;\n+    private Collection<String> libraryPaths;\n+\n+    public DatasonnetExpression(String expression) {\n+        this.expression = expression;\n+    }\n+\n+    public DatasonnetExpression(Expression expression) {\n+        this.metaExpression = expression;\n+    }\n+\n+    @Override\n+    public boolean matches(Exchange exchange) {\n+        this.outputMediaType = MediaTypes.APPLICATION_JAVA;\n+        return evaluate(exchange, Boolean.class);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public <T> T evaluate(Exchange exchange, Class<T> type) {\n+        try {\n+            if (metaExpression != null) {\n+                expression = metaExpression.evaluate(exchange, String.class);\n+            }\n+\n+            Objects.requireNonNull(expression, \"String expression property must be set!\");\n+\n+            Document<?> result = doEvaluate(exchange);\n+            // TODO: 9/8/20 see if we can offload some of this to a Document specific custom type converter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzODg5OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjowMFrOHuDyLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjowMFrOHuDyLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODU0MA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058540", "createdAt": "2020-11-05T13:42:00Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetLanguage.java", "diffHunk": "@@ -0,0 +1,130 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzAzOTg2OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/scala/org/apache/camel/language/datasonnet/CML.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjoxMlrOHuDyug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjoxMlrOHuDyug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODY4Mg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058682", "createdAt": "2020-11-05T13:42:12Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/main/scala/org/apache/camel/language/datasonnet/CML.scala", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.apache.camel.language.datasonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0MDIxOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjoyMFrOHuDzCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjoyMFrOHuDzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODc2MQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058761", "createdAt": "2020-11-05T13:42:20Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,141 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0MDkzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjoyOVrOHuDzcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjoyOVrOHuDzcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODg2NA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058864", "createdAt": "2020-11-05T13:42:29Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/ExpressionsInJavaTest.java", "diffHunk": "@@ -0,0 +1,64 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0MTcyOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjozOVrOHuDz6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MjozOVrOHuDz6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1ODk4NQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518058985", "createdAt": "2020-11-05T13:42:39Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Gizmo.java", "diffHunk": "@@ -0,0 +1,94 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0MjUzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0Mjo0OFrOHuD0Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0Mjo0OFrOHuD0Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTEwNg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059106", "createdAt": "2020-11-05T13:42:48Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/Manufacturer.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0Mjk5OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0Mjo1OFrOHuD0vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0Mjo1OFrOHuD0vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTE5Ng==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059196", "createdAt": "2020-11-05T13:42:58Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/PropertiesTest.java", "diffHunk": "@@ -0,0 +1,36 @@\n+package org.apache.camel.language.datasonnet;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0NTEzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/javaTest.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MzoyN1rOHuD2Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0MzoyN1rOHuD2Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTU0Ng==", "bodyText": "I guess a license should be good here to", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059546", "createdAt": "2020-11-05T13:43:27Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/javaTest.json", "diffHunk": "@@ -0,0 +1,15 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0NzEwOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/namedImports.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0Mzo1N1rOHuD3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0Mzo1N1rOHuD3Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTg3OA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059878", "createdAt": "2020-11-05T13:43:57Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/namedImports.ds", "diffHunk": "@@ -0,0 +1,11 @@\n+local testlib1 = import 'testlib.libsonnet';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0NzQ3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/namedImportsFS.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDowMlrOHuD3nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDowMlrOHuD3nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA1OTkzMg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518059932", "createdAt": "2020-11-05T13:44:02Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/namedImportsFS.ds", "diffHunk": "@@ -0,0 +1,7 @@\n+local testlib3 = import 'testlib3.libsonnet';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0ODAzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/namedImports_result.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDowOVrOHuD37g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDowOVrOHuD37g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDAxNA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060014", "createdAt": "2020-11-05T13:44:09Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/namedImports_result.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"Lib1JAR\":\"Hello, World\",\"Lib2JAR\":\"Bye, World\",\"Lib3FS\":\"Hello, World : TestLib3\",\"Lib4FS\":\"Bye, World : TestLib4\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0ODQxOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/org/apache/camel/language.datasonnet/camel-context.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDoxM1rOHuD4Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDoxM1rOHuD4Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDA3MQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060071", "createdAt": "2020-11-05T13:44:13Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/org/apache/camel/language.datasonnet/camel-context.xml", "diffHunk": "@@ -0,0 +1,155 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0OTE3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/payload.csv", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDoyM1rOHuD4oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDoyM1rOHuD4oA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDE5Mg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060192", "createdAt": "2020-11-05T13:44:23Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/payload.csv", "diffHunk": "@@ -0,0 +1,2 @@\n+account,firstName,lastName", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0OTY1OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/payload.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDoyN1rOHuD47A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDoyN1rOHuD47A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDI2OA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060268", "createdAt": "2020-11-05T13:44:27Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/payload.xml", "diffHunk": "@@ -0,0 +1,4 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA0OTkxOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/readCSVTest.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDozMlrOHuD5Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDozMlrOHuD5Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDMxNA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060314", "createdAt": "2020-11-05T13:44:32Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readCSVTest.ds", "diffHunk": "@@ -0,0 +1,3 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MDIzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/readJavaTest.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDozOFrOHuD5Tg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDozOFrOHuD5Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDM2Ng==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060366", "createdAt": "2020-11-05T13:44:38Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readJavaTest.ds", "diffHunk": "@@ -0,0 +1,12 @@\n+/** DataSonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MDY4OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/readXMLExtTest.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDo0NVrOHuD5lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDo0NVrOHuD5lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDQzNw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060437", "createdAt": "2020-11-05T13:44:45Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readXMLExtTest.ds", "diffHunk": "@@ -0,0 +1,6 @@\n+/** DataSonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MTAyOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/readXMLExtTest.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDo1MFrOHuD5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDo1MFrOHuD5zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDQ5NQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060495", "createdAt": "2020-11-05T13:44:50Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/readXMLExtTest.json", "diffHunk": "@@ -0,0 +1,11 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MTY0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/simpleMapping.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDo1OFrOHuD6JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NDo1OFrOHuD6JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDU4MQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060581", "createdAt": "2020-11-05T13:44:58Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping.ds", "diffHunk": "@@ -0,0 +1,8 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MTk0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/simpleMapping_payload.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NTowMlrOHuD6VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NTowMlrOHuD6VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDYyOQ==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060629", "createdAt": "2020-11-05T13:45:02Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping_payload.json", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MjQ3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/simpleMapping_result.json", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NTowOFrOHuD6og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNzozMTozNVrOHuOQkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDcwNg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060706", "createdAt": "2020-11-05T13:45:08Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping_result.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"count\":1,\"isActive\":true,\"testVar\":\"HelloWorld\",\"uid\":123,\"uname\":\"JavaDuke\",\"fullName\": \"DataSonnet\"}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIxNDg4Ng==", "bodyText": "Oh is there a way to add license to JSON files?", "url": "https://github.com/apache/camel/pull/4561#discussion_r518214886", "createdAt": "2020-11-05T17:08:57Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping_result.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"count\":1,\"isActive\":true,\"testVar\":\"HelloWorld\",\"uid\":123,\"uname\":\"JavaDuke\",\"fullName\": \"DataSonnet\"}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDcwNg=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODIzMDE2MQ==", "bodyText": "Not sure if it is feasible, probably not :-)", "url": "https://github.com/apache/camel/pull/4561#discussion_r518230161", "createdAt": "2020-11-05T17:31:35Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/simpleMapping_result.json", "diffHunk": "@@ -0,0 +1 @@\n+{\"count\":1,\"isActive\":true,\"testVar\":\"HelloWorld\",\"uid\":123,\"uname\":\"JavaDuke\",\"fullName\": \"DataSonnet\"}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDcwNg=="}, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MjkwOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/testlib3.libsonnet", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NToxNFrOHuD66Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NToxNFrOHuD66Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDc3Nw==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060777", "createdAt": "2020-11-05T13:45:14Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/testlib3.libsonnet", "diffHunk": "@@ -0,0 +1,4 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1MzI0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/resources/writeJavaTest.ds", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NToxOVrOHuD7Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NToxOVrOHuD7Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MDgyNg==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518060826", "createdAt": "2020-11-05T13:45:19Z", "author": {"login": "oscerd"}, "path": "components/camel-datasonnet/src/test/resources/writeJavaTest.ds", "diffHunk": "@@ -0,0 +1,12 @@\n+/** DataSonnet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1NDc4OnYy", "diffSide": "RIGHT", "path": "core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NTo0MVrOHuD8DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NTo0MVrOHuD8DA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MTA2OA==", "bodyText": "Add ASF license please", "url": "https://github.com/apache/camel/pull/4561#discussion_r518061068", "createdAt": "2020-11-05T13:45:41Z", "author": {"login": "oscerd"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/model/language/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.apache.camel.model.language;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzA1Nzc2OnYy", "diffSide": "RIGHT", "path": "parent/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NjoyNlrOHuD96Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxMzo0NjoyNlrOHuD96Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODA2MTU0NQ==", "bodyText": "No need for the dep here, it has already been added on line 1255", "url": "https://github.com/apache/camel/pull/4561#discussion_r518061545", "createdAt": "2020-11-05T13:46:26Z", "author": {"login": "oscerd"}, "path": "parent/pom.xml", "diffHunk": "@@ -2642,6 +2647,11 @@\n \t\t\t\t<artifactId>camel-zookeeper</artifactId>\n \t\t\t\t<version>${project.version}</version>\n \t\t\t</dependency>\n+\t\t\t<dependency>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>camel-datasonnet</artifactId>\n+        <version>${project.version}</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c96b0639c08232ff5e9737ffe66959566815cbe8"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc2NTk1OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MToxMFrOH3s3_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwNToxMjozNFrOH5jfIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2ODk1OA==", "bodyText": "In XML I think > needs to be escaped", "url": "https://github.com/apache/camel/pull/4561#discussion_r528168958", "createdAt": "2020-11-21T08:41:10Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTYyNjMwMQ==", "bodyText": "I dont think it does ( unless this ones doing something special that im not aware of)\nThe soap component docs has some XML in it which is not escaped\nAnd if you meant the > inside the value then it looks like groovy docs has an example of that", "url": "https://github.com/apache/camel/pull/4561#discussion_r529626301", "createdAt": "2020-11-24T15:19:34Z", "author": {"login": "JakeMHughes"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2ODk1OA=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDExMjI4OA==", "bodyText": "Ah yeah there may be some mistakes in other parts of the docs. However you need to escape this in XML, but then they are harder to read, > vs > - but we can leave this as-is.\nHow is it going with all the other review comments?", "url": "https://github.com/apache/camel/pull/4561#discussion_r530112288", "createdAt": "2020-11-25T05:12:34Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2ODk1OA=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc2NjIwOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MToyN1rOH3s4HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MToyN1rOH3s4HA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2ODk4OA==", "bodyText": "I assume this 3rd party maven repo can be removed", "url": "https://github.com/apache/camel/pull/4561#discussion_r528168988", "createdAt": "2020-11-21T08:41:27Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>\n+                <artifactId>scala-maven-plugin</artifactId>\n+                <version>4.4.0</version>\n+                <executions>\n+                    <execution>\n+                        <id>scala-compile-first</id>\n+                        <phase>process-resources</phase>\n+                        <goals>\n+                            <goal>add-source</goal>\n+                            <goal>compile</goal>\n+                        </goals>\n+                    </execution>\n+                    <execution>\n+                        <id>scala-test-compile</id>\n+                        <phase>process-test-resources</phase>\n+                        <goals>\n+                            <goal>testCompile</goal>\n+                        </goals>\n+                    </execution>\n+                </executions>\n+            </plugin>\n+            <plugin>\n+                <groupId>org.apache.maven.plugins</groupId>\n+                <artifactId>maven-surefire-plugin</artifactId>\n+                <configuration>\n+                    <additionalClasspathElements>\n+                        <additionalClasspathElement>${project.basedir}/src/test/resources/dslibs.jar</additionalClasspathElement>\n+                    </additionalClasspathElements>\n+                </configuration>\n+            </plugin>\n+        </plugins>\n+    </build>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.scala-lang</groupId>\n+            <artifactId>scala-library</artifactId>\n+            <version>${scala-datasonnet-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-support</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>com.ms3-inc</groupId>\n+            <artifactId>datasonnet-mapper</artifactId>\n+            <version>${datasonnet-mapper-version}</version>\n+        </dependency>\n+        <dependency>\n+            <groupId>commons-io</groupId>\n+            <artifactId>commons-io</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.github.classgraph</groupId>\n+            <artifactId>classgraph</artifactId>\n+            <version>${classgraph-version}</version>\n+        </dependency>\n+\n+        <!-- testing -->\n+        <dependency>\n+            <groupId>org.apache.camel</groupId>\n+            <artifactId>camel-test-spring-junit5</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.apache.logging.log4j</groupId>\n+            <artifactId>log4j-slf4j-impl</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.junit.jupiter</groupId>\n+            <artifactId>junit-jupiter</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.skyscreamer</groupId>\n+            <artifactId>jsonassert</artifactId>\n+            <version>${jsonassert-version}</version>\n+            <scope>test</scope>\n+        </dependency>\n+    </dependencies>\n+\n+    <repositories>\n+        <repository>\n+            <id>ms3-nexus</id>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc2NjU0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MjowMVrOH3s4Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQyMjozNDoyN1rOH9w-dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTAzNQ==", "bodyText": "Can we avoid having scala source code. We want everyone to be able to maintain the code and for that we prefer Java", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169035", "createdAt": "2020-11-21T08:42:01Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDUyNzYwNw==", "bodyText": "addressed :)", "url": "https://github.com/apache/camel/pull/4561#discussion_r534527607", "createdAt": "2020-12-02T22:34:27Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>\n+        <maven.compiler.source>1.8</maven.compiler.source>\n+        <maven.compiler.target>1.8</maven.compiler.target>\n+    </properties>\n+\n+    <build>\n+        <plugins>\n+            <plugin>\n+                <groupId>net.alchim31.maven</groupId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTAzNQ=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc2NzEwOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/pom.xml", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MjoyMlrOH3s4iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODowNzo0N1rOH5-2sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTA5Nw==", "bodyText": "Remove these as this is configured in some parent/root pom file", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169097", "createdAt": "2020-11-21T08:42:22Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NTA4Ng==", "bodyText": "Hey Claus, by 'these' you mean the maven compiler properties, correct? The way github shows comments can be confusing sometimes...", "url": "https://github.com/apache/camel/pull/4561#discussion_r530545086", "createdAt": "2020-11-25T17:39:29Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTA5Nw=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU2MDY5MA==", "bodyText": "Yes its the <properties> that can be removed", "url": "https://github.com/apache/camel/pull/4561#discussion_r530560690", "createdAt": "2020-11-25T18:07:47Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/pom.xml", "diffHunk": "@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one or more\n+    contributor license agreements.  See the NOTICE file distributed with\n+    this work for additional information regarding copyright ownership.\n+    The ASF licenses this file to You under the Apache License, Version 2.0\n+    (the \"License\"); you may not use this file except in compliance with\n+    the License.  You may obtain a copy of the License at\n+\n+         http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing, software\n+    distributed under the License is distributed on an \"AS IS\" BASIS,\n+    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+    See the License for the specific language governing permissions and\n+    limitations under the License.\n+\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <parent>\n+        <groupId>org.apache.camel</groupId>\n+        <artifactId>components</artifactId>\n+        <version>3.7.0-SNAPSHOT</version>\n+    </parent>\n+\n+    <artifactId>camel-datasonnet</artifactId>\n+    <packaging>jar</packaging>\n+\n+    <name>Camel :: DataSonnet</name>\n+    <description>Camel DataSonnet support</description>\n+\n+    <properties>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTA5Nw=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc2NzM0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0Mjo1MVrOH3s4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzo0MDo1MVrOH599Dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTEyNQ==", "bodyText": "Same as before", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169125", "createdAt": "2020-11-21T08:42:51Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0NTkzNQ==", "bodyText": "marking as resolved for legibility as stated previously", "url": "https://github.com/apache/camel/pull/4561#discussion_r530545935", "createdAt": "2020-11-25T17:40:51Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTEyNQ=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc2NzU3OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MzozNlrOH3s4xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0MzozNlrOH3s4xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTE1Ng==", "bodyText": "Spring DSL -> XML DSL (that is the term we favour)", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169156", "createdAt": "2020-11-21T08:43:36Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc3MDQ2OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0NTozNlrOH3s5_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNzozNzoxOVrOH591GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTQ2OQ==", "bodyText": "I wonder if we can make a better example as using datasonnet to set the body via a property is not something you would do. I assume you can use these functions in those previous example. For example the value of 100 can be a property", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169469", "createdAt": "2020-11-21T08:45:36Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully\n+qualified classname:\n+\n+[source,xml]\n+----\n+<datasonnet resultType=\"java.lang.String\">body.foo</datasonnet>\n+----\n+\n+If the expression results in an array, or an object, you can instruct the expression to return you `List.class`\n+or `Map.class`, respectively. However, you must also set the output media type to `application/x-java-object`.\n+\n+NOTE: The default `Document` object is useful in situations where there are intermediate transformation steps, and so\n+retaining the content metadata through a route execution is valuable.\n+\n+== Specifying Media Types\n+\n+Traditionally the input and output media types are specified through the\n+https://datasonnet.s3-us-west-2.amazonaws.com/docs-ci/primary/master/datasonnet/1.0-SNAPSHOT/headers.html[DataSonnet Header]\n+The xref:datasonnet-language.adoc[DataSonnet] expression provides convenience options for specifying the body and output\n+media types without the need for a Header, this is useful if the transformation is a one-liner, for example.\n+\n+The DataSonnet expression will look for a body media type in the following order:\n+\n+1. If the body is a `Document` it will use the metadata in the object\n+2. If the convenience bodyMediaType method was used, it will use its value\n+3. A \"CamelDatasonnetBodyMediaType\" exchange property\n+4. A \"Content-Type\" message header\n+5. The DataSonnet Header payload media type directive\n+6. `application/x-java-object`\n+\n+And for output media type:\n+\n+1. If the convenience outputMediaType method was used, it will use its value\n+2. A \"CamelDatasonnetOutputMediaType\" exchange property\n+3. A \"CamelDatasonnetOutputMediaType\" message header\n+4. The DataSonnet Header output media type directive\n+5. `application/x-java-object`\n+\n+== Functions\n+\n+Camel adds the following DataSonnet functions that can be used to access the\n+exchange:\n+\n+[width=\"100%\",cols=\"10%,10%,10%,70%\",options=\"header\",]\n+|===\n+|Function |Argument |Type |Description\n+\n+|cml.properties |key for property |String |To lookup a property using the\n+xref:ROOT:properties-component.adoc[Properties] component (property placeholders).\n+\n+|cml.header |the header name |String |Will return the message header.\n+\n+|cml.exchangeProperty |key for property |String |Will return the exchange property.\n+|===\n+\n+Here's an example showing some of these functions in use:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0Mzg5Ng==", "bodyText": "changed to .setBody(datasonnet(\"'hello, ' + cml.properties('toGreet')\", String.class)) let us know if that works", "url": "https://github.com/apache/camel/pull/4561#discussion_r530543896", "createdAt": "2020-11-25T17:37:19Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully\n+qualified classname:\n+\n+[source,xml]\n+----\n+<datasonnet resultType=\"java.lang.String\">body.foo</datasonnet>\n+----\n+\n+If the expression results in an array, or an object, you can instruct the expression to return you `List.class`\n+or `Map.class`, respectively. However, you must also set the output media type to `application/x-java-object`.\n+\n+NOTE: The default `Document` object is useful in situations where there are intermediate transformation steps, and so\n+retaining the content metadata through a route execution is valuable.\n+\n+== Specifying Media Types\n+\n+Traditionally the input and output media types are specified through the\n+https://datasonnet.s3-us-west-2.amazonaws.com/docs-ci/primary/master/datasonnet/1.0-SNAPSHOT/headers.html[DataSonnet Header]\n+The xref:datasonnet-language.adoc[DataSonnet] expression provides convenience options for specifying the body and output\n+media types without the need for a Header, this is useful if the transformation is a one-liner, for example.\n+\n+The DataSonnet expression will look for a body media type in the following order:\n+\n+1. If the body is a `Document` it will use the metadata in the object\n+2. If the convenience bodyMediaType method was used, it will use its value\n+3. A \"CamelDatasonnetBodyMediaType\" exchange property\n+4. A \"Content-Type\" message header\n+5. The DataSonnet Header payload media type directive\n+6. `application/x-java-object`\n+\n+And for output media type:\n+\n+1. If the convenience outputMediaType method was used, it will use its value\n+2. A \"CamelDatasonnetOutputMediaType\" exchange property\n+3. A \"CamelDatasonnetOutputMediaType\" message header\n+4. The DataSonnet Header output media type directive\n+5. `application/x-java-object`\n+\n+== Functions\n+\n+Camel adds the following DataSonnet functions that can be used to access the\n+exchange:\n+\n+[width=\"100%\",cols=\"10%,10%,10%,70%\",options=\"header\",]\n+|===\n+|Function |Argument |Type |Description\n+\n+|cml.properties |key for property |String |To lookup a property using the\n+xref:ROOT:properties-component.adoc[Properties] component (property placeholders).\n+\n+|cml.header |the header name |String |Will return the message header.\n+\n+|cml.exchangeProperty |key for property |String |Will return the exchange property.\n+|===\n+\n+Here's an example showing some of these functions in use:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTQ2OQ=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc3MDY1OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0NjowMFrOH3s6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0NjowMFrOH3s6Eg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTQ5MA==", "bodyText": "Very good documentation - thank you", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169490", "createdAt": "2020-11-21T08:46:00Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/docs/datasonnet-language.adoc", "diffHunk": "@@ -0,0 +1,193 @@\n+[[datasonnet-language]]\n+= DataSonnet Language\n+:docTitle: DataSonnet\n+:artifactId: camel-datasonnet\n+:description: To use DataSonnet scripts in Camel expressions or predicates.\n+:since: 3.7\n+:supportLevel: Preview\n+include::{cq-version}@camel-quarkus:ROOT:partial$reference/languages/datasonnet.adoc[opts=optional]\n+\n+*Since Camel {since}*\n+\n+Camel supports https://datasonnet.com/[DataSonnet] transformations to allow an Expression or Predicate to be used in the Java DSL or  xref:manual::xml-configuration.adoc[XML\n+Configuration].\n+\n+To use a DataSonnet expression use the following Java code:\n+[source,java]\n+---------------------------------------\n+... datasonnet(\"someDSExpression\") ...\n+---------------------------------------\n+\n+== Example\n+\n+Here is a simple example using a DataSonnet expression as a predicate in a Message Filter:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+// lets route if a line item is over $100\n+from(\"queue:foo\")\n+    .filter(datasonnet(\"ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null\"))\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet>ds.arrays.firstWith(body.lineItems, function(item) item > 100) != null</datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+Here is an example of a simple DataSonnet expression as a transformation EIP. This example will transform an XML body with\n+`lineItems` into JSON while filtering out lines that are under 100.\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"queue:foo\")\n+    .transform(datasonnet(\"ds.filter(body.lineItems, function(item) item > 100)\", String.class)\n+        .bodyMediaType(\"application/xml\").outputMediaType(\"application/json\")\n+    )\n+    .to(\"queue:bar\")\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"queue:foo\"/>\n+    <filter>\n+        <datasonnet bodyMediaType=\"application/xml\" outputMediaType=\"application/json\" resultTypeName=\"java.lang.String\" >\n+            ds.filter(body.lineItems, function(item) item > 100)\n+        </datasonnet>\n+        <to uri=\"queue:bar\"/>\n+    </filter>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Setting result type\n+\n+The xref:datasonnet-language.adoc[DataSonnet] expression will return a `com.datasonnet.document.Document` by default. The\n+document preserves the content type metadata along with the contents of the result of the transformation. In predicates,\n+however, the Document will be automatically unwrapped and the boolean content will be returned. Similarly any times you\n+want the content in a specific result type like a String. To do this you have to instruct the\n+xref:datasonnet-language.adoc[DataSonnet] which result type to return.\n+\n+In Java DSL:\n+\n+[source,java]\n+----\n+datasonnet(\"body.foo\", String.class)\n+----\n+\n+In Spring DSL you use the *resultType* attribute to provide a fully\n+qualified classname:\n+\n+[source,xml]\n+----\n+<datasonnet resultType=\"java.lang.String\">body.foo</datasonnet>\n+----\n+\n+If the expression results in an array, or an object, you can instruct the expression to return you `List.class`\n+or `Map.class`, respectively. However, you must also set the output media type to `application/x-java-object`.\n+\n+NOTE: The default `Document` object is useful in situations where there are intermediate transformation steps, and so\n+retaining the content metadata through a route execution is valuable.\n+\n+== Specifying Media Types\n+\n+Traditionally the input and output media types are specified through the\n+https://datasonnet.s3-us-west-2.amazonaws.com/docs-ci/primary/master/datasonnet/1.0-SNAPSHOT/headers.html[DataSonnet Header]\n+The xref:datasonnet-language.adoc[DataSonnet] expression provides convenience options for specifying the body and output\n+media types without the need for a Header, this is useful if the transformation is a one-liner, for example.\n+\n+The DataSonnet expression will look for a body media type in the following order:\n+\n+1. If the body is a `Document` it will use the metadata in the object\n+2. If the convenience bodyMediaType method was used, it will use its value\n+3. A \"CamelDatasonnetBodyMediaType\" exchange property\n+4. A \"Content-Type\" message header\n+5. The DataSonnet Header payload media type directive\n+6. `application/x-java-object`\n+\n+And for output media type:\n+\n+1. If the convenience outputMediaType method was used, it will use its value\n+2. A \"CamelDatasonnetOutputMediaType\" exchange property\n+3. A \"CamelDatasonnetOutputMediaType\" message header\n+4. The DataSonnet Header output media type directive\n+5. `application/x-java-object`\n+\n+== Functions\n+\n+Camel adds the following DataSonnet functions that can be used to access the\n+exchange:\n+\n+[width=\"100%\",cols=\"10%,10%,10%,70%\",options=\"header\",]\n+|===\n+|Function |Argument |Type |Description\n+\n+|cml.properties |key for property |String |To lookup a property using the\n+xref:ROOT:properties-component.adoc[Properties] component (property placeholders).\n+\n+|cml.header |the header name |String |Will return the message header.\n+\n+|cml.exchangeProperty |key for property |String |Will return the exchange property.\n+|===\n+\n+Here's an example showing some of these functions in use:\n+\n+[source,java]\n+------------------------------------------------------------------------------------------------\n+from(\"direct:in\")\n+    .setBody(datasonnet(\"cml.properties('foo')\", String.class))\n+    .to(\"mock:camel\");\n+------------------------------------------------------------------------------------------------\n+\n+And the Spring DSL:\n+\n+[source,xml]\n+-----------------------------------------------------------------------------\n+<route>\n+    <from uri=\"direct:in\"/>\n+    <setBody>\n+        <datasonnet resultTypeName=\"java.lang.String\">cml.properties('foo')</datasonnet>\n+    </setBody>\n+    <to uri=\"mock:camel\"/>\n+</route>\n+-----------------------------------------------------------------------------\n+\n+== Loading script from external resource\n+\n+You can externalize the script and have Camel load it from a resource\n+such as `\"classpath:\"`, `\"file:\"`, or `\"http:\"`. +\n+This is done using the following syntax: `\"resource:scheme:location\"`,\n+eg to refer to a file on the classpath you can do:\n+\n+[source,java]\n+-------------------------------------------------------------------\n+.setHeader(\"myHeader\").datasonnet(\"resource:classpath:mydatasonnet.ds\")\n+-------------------------------------------------------------------\n+\n+== Dependencies\n+\n+To use scripting languages in your camel routes you need to add a\n+dependency on *camel-datasonnet*.\n+\n+If you use Maven you could just add the following to your `pom.xml`,\n+substituting the version number for the latest and greatest release (see\n+the download page for the latest versions).\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc3MjA0OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo0NzozMVrOH3s6sA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxODo0MTo0NFrOH5_4EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTY0OA==", "bodyText": "I would like to see this moved to the Language class, and do this in its doInit method.", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169648", "createdAt": "2020-11-21T08:47:31Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU3NzQyNQ==", "bodyText": "moved :)", "url": "https://github.com/apache/camel/pull/4561#discussion_r530577425", "createdAt": "2020-11-25T18:41:44Z", "author": {"login": "jam01"}, "path": "components/camel-datasonnet/src/main/java/org/apache/camel/language/datasonnet/DatasonnetExpression.java", "diffHunk": "@@ -0,0 +1,255 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.FileVisitResult;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.SimpleFileVisitor;\n+import java.nio.file.attribute.BasicFileAttributes;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+import com.datasonnet.Mapper;\n+import com.datasonnet.MapperBuilder;\n+import com.datasonnet.document.DefaultDocument;\n+import com.datasonnet.document.Document;\n+import com.datasonnet.document.MediaType;\n+import com.datasonnet.document.MediaTypes;\n+import io.github.classgraph.ClassGraph;\n+import io.github.classgraph.ScanResult;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Expression;\n+import org.apache.camel.RuntimeExpressionException;\n+import org.apache.camel.spi.ExpressionResultTypeAware;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.support.ExpressionAdapter;\n+import org.apache.camel.support.MessageHelper;\n+import org.apache.commons.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class DatasonnetExpression extends ExpressionAdapter implements ExpressionResultTypeAware {\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DatasonnetExpression.class);\n+    private static final Map<String, String> CLASSPATH_IMPORTS = new HashMap<>();\n+\n+    static {\n+        LOGGER.debug(\"One time classpath search...\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTY0OA=="}, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc3NDkzOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/main/scala/org/apache/camel/language/datasonnet/CML.scala", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MToxNVrOH3s78Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MToxNVrOH3s78Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE2OTk2OQ==", "bodyText": "Port this to plain Java code so everyone can maintain it", "url": "https://github.com/apache/camel/pull/4561#discussion_r528169969", "createdAt": "2020-11-21T08:51:15Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/main/scala/org/apache/camel/language/datasonnet/CML.scala", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet\n+\n+import com.datasonnet.document.{DefaultDocument, Document, MediaTypes}\n+import com.datasonnet.spi.{DataFormatService, Library, PluginException}\n+import org.apache.camel.Exchange\n+import sjsonnet.Std.builtin\n+import sjsonnet.{Materializer, Val}\n+\n+object CML extends Library {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc3NTMyOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MTo0MlrOH3s8Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MTo0MlrOH3s8Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3MDAxNA==", "bodyText": "Fix this TODO", "url": "https://github.com/apache/camel/pull/4561#discussion_r528170014", "createdAt": "2020-11-21T08:51:42Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language.datasonnet/camel-context.xml\");\n+    }\n+\n+    @Test\n+    public void testTransform() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:basicTransform\");\n+    }\n+\n+    @Test\n+    public void testTransformXML() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.xml\"),\n+                loadResourceAsString(\"readXMLExtTest.json\"),\n+                \"direct:transformXML\");\n+    }\n+\n+    @Test\n+    public void testTransformCSV() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.csv\"),\n+                \"{\\\"account\\\":\\\"123\\\"}\",\n+                \"direct:transformCSV\");\n+    }\n+\n+    @Test\n+    public void testDatasonnetScript() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:datasonnetScript\");\n+    }\n+\n+    @Test\n+    public void testNamedImports() throws Exception {\n+        runCamelTest(\"{}\",\n+                loadResourceAsString(\"namedImports_result.json\"),\n+                \"direct:namedImports\");\n+    }\n+\n+    // TODO: 9/8/20 need to pass result type param to language", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxMTc3NTYyOnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MTo1OFrOH3s8Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMVQwODo1MTo1OFrOH3s8Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODE3MDA0Nw==", "bodyText": "Remove system out or do a LOG", "url": "https://github.com/apache/camel/pull/4561#discussion_r528170047", "createdAt": "2020-11-21T08:51:58Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,157 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Disabled;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");\n+\n+    @Override\n+    protected AbstractApplicationContext createApplicationContext() {\n+        return new ClassPathXmlApplicationContext(\"org/apache/camel/language.datasonnet/camel-context.xml\");\n+    }\n+\n+    @Test\n+    public void testTransform() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:basicTransform\");\n+    }\n+\n+    @Test\n+    public void testTransformXML() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.xml\"),\n+                loadResourceAsString(\"readXMLExtTest.json\"),\n+                \"direct:transformXML\");\n+    }\n+\n+    @Test\n+    public void testTransformCSV() throws Exception {\n+        runCamelTest(loadResourceAsString(\"payload.csv\"),\n+                \"{\\\"account\\\":\\\"123\\\"}\",\n+                \"direct:transformCSV\");\n+    }\n+\n+    @Test\n+    public void testDatasonnetScript() throws Exception {\n+        runCamelTest(loadResourceAsString(\"simpleMapping_payload.json\"),\n+                loadResourceAsString(\"simpleMapping_result.json\"),\n+                \"direct:datasonnetScript\");\n+    }\n+\n+    @Test\n+    public void testNamedImports() throws Exception {\n+        runCamelTest(\"{}\",\n+                loadResourceAsString(\"namedImports_result.json\"),\n+                \"direct:namedImports\");\n+    }\n+\n+    // TODO: 9/8/20 need to pass result type param to language\n+    @Disabled\n+    @Test\n+    public void testExpressionLanguage() throws Exception {\n+        runCamelTest(\"World\",\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:expressionLanguage\");\n+    }\n+\n+    @Test\n+    public void testNullInput() throws Exception {\n+        runCamelTest(\"\",\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:nullInput\");\n+        runCamelTest(null,\n+                \"{ \\\"test\\\":\\\"Hello, World\\\"}\",\n+                \"direct:nullInput\");\n+    }\n+\n+    @Test\n+    public void testReadJava() throws Exception {\n+        Gizmo theGizmo = new Gizmo();\n+        theGizmo.setName(\"gizmo\");\n+        theGizmo.setQuantity(123);\n+        theGizmo.setInStock(true);\n+        theGizmo.setColors(Arrays.asList(\"red\", \"white\", \"blue\"));\n+\n+        Manufacturer manufacturer = new Manufacturer();\n+        manufacturer.setManufacturerName(\"ACME Corp.\");\n+        manufacturer.setManufacturerCode(\"ACME123\");\n+        theGizmo.setManufacturer(manufacturer);\n+\n+        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        theGizmo.setDate(df.parse(\"2020-01-06\"));\n+\n+        runCamelTest(theGizmo,\n+                loadResourceAsString(\"javaTest.json\"),\n+                \"direct:readJava\");\n+    }\n+\n+    @Test\n+    public void testWriteJava() throws Exception {\n+        Gizmo theGizmo = new Gizmo();\n+        theGizmo.setName(\"gizmo\");\n+        theGizmo.setQuantity(123);\n+        theGizmo.setInStock(true);\n+        theGizmo.setColors(Arrays.asList(\"red\", \"white\", \"blue\"));\n+\n+        Manufacturer manufacturer = new Manufacturer();\n+        manufacturer.setManufacturerName(\"ACME Corp.\");\n+        manufacturer.setManufacturerCode(\"ACME123\");\n+        theGizmo.setManufacturer(manufacturer);\n+\n+        SimpleDateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        theGizmo.setDate(df.parse(\"2020-01-06\"));\n+\n+        String payload = loadResourceAsString(\"javaTest.json\");\n+\n+        template.sendBody(\"direct:writeJava\", payload);\n+        mock = getMockEndpoint(\"mock:direct:end\");\n+        Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n+        Object response = exchange.getIn().getBody();\n+\n+        assertEquals(theGizmo, response);\n+    }\n+\n+    private void runCamelTest(Object payload, String expectedJson, String uri) throws Exception {\n+        template.sendBody(uri, payload);\n+        mock = getMockEndpoint(\"mock:direct:end\");\n+        Exchange exchange = mock.assertExchangeReceived(mock.getReceivedCounter() - 1);\n+        String response = exchange.getIn().getBody().toString();\n+        System.out.println(\"RESPONSE IS \" + response);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1497845418aabedb89081403140d4f08fefb32cf"}, "originalPosition": 149}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjcwMjQwOnYy", "diffSide": "RIGHT", "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0MzowNVrOH-O5MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxOTowNDoxMFrOH-sing==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng==", "bodyText": "I dont see any extra value of having its own Builder class, we do not really do this for other data formats - only xml and xpath have a special builder etc. Can this be removed", "url": "https://github.com/apache/camel/pull/4561#discussion_r535017776", "createdAt": "2020-12-03T09:43:05Z", "author": {"login": "davsclaus"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTMzMTQyMw==", "bodyText": "I think we based this on one of those builders. The reason comes from bodyMediaType and outputMediaType being both individually optional, so we could have any of these:\n// here we don't use the body, and the default output is fine\n.transform(datasonnet(\"hello, world\", String.class))\n\n// here we need to be explicit about the input, maybe the content-type header does not apply, for example\n.transform(datasonnet(\"payload\", String.class).bodyMediaType(\"application/json\")) \n\n// here we want the component to look in other locations for the input (eg. content-type header)\n// but we need a different output than default\n.transform(datasonnet(\"payload\", String.class).outputMediaType(\"application/xml\")))\n\n// here both are needed\n.transform(datasonnet(\"some-expression\", String.class)\n    .outputMediaType(\"application/json\")\n    .bodyMediaType(\"application/xml\")))\n\nSo the value is being able to be selectively explicit with the input and output types. Otherwise we'd have to do\n// we could have a 'all defaults' type of constructor\n.transform(datasonnet(\"hello, world\", String.class))\n\n.transform(datasonnet(\"payload\", String.class, \"application/json\", null)) \n\n.transform(datasonnet(\"payload\", String.class, null, \"application/json\")) \n\n.transform(datasonnet(\"some-expression\", String.class, \"application/json\", \"application/xml\"))\n\nSo I guess ultimately it's about readability since both options are functionally the same. I think a predicate is one particular scenario that might be confusing\n// if we needed to be explicit on the body, do we leave the output as null so the default is used?\n// or do we make it Java as it should be, either way the component forces Java for predicates\n// but the extra null could be confusing to devs, or misleading if they wrote something other than null or Java\n.when(datasonnet(\"payload.predicate == 'yes'\", \"application/json\", null))\n   ...\n// the output type would be ignored\n.when(datasonnet(\"payload.predicate == 'yes'\", \"application/json\", \"application/json\"))\n\nI hope that expresses the value we see in the Builder.\nThis wasn't actually a widely discussed decision internally, I just saw those other Builders you mentioned and seemed like the right way to achieve what I described. So we're all ears :)\nIf there's a more \"camel way\" to achieve this we'd be happy to refactor. Or if the Builder class should be moved to the datasonnet component (I think the XML one is) in order to move maintenance there, we can do that. Or if ultimately this doesn't fit with the Builder's design we can remove it.", "url": "https://github.com/apache/camel/pull/4561#discussion_r535331423", "createdAt": "2020-12-03T15:29:05Z", "author": {"login": "jam01"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQ2Mjk5Mw==", "bodyText": "Well I am afraid thats how the other data formats do it with optional parameters, is that they have a number of methods for different combinations, and that you would have to pass in null for some of them.\nThere is no room for having specialized builders at this moment. The architecture of dataformats and how its too tightly coupled into the model/core is something we want to address in future Camel - such as Camel 4 or sooner if we can make it possible in 3.x.", "url": "https://github.com/apache/camel/pull/4561#discussion_r535462993", "createdAt": "2020-12-03T18:06:52Z", "author": {"login": "davsclaus"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMDQyOA==", "bodyText": "Ah! Copy that. Would it be OK if we alternatively move the extra methods to the camel-datasonnet DatasonnetExpression? I see XPath has support for building expressions from both camel-core-model BuilderSupport and also from camel-xpath's XPathBuilder. The camel-xpath one actually has optional parameter support, just as we were looking for, as showcased in this test. Here's an example of the camel-xpath one being used in a route instead of the RouteBuilder one.\nSo developers could use the BuilderSupport one if they just want default media types, or the camel-datasonnet one if they want to be explicit in either one or both. Additionally this would allow us to user DataSonnet's formal MediaType objects instead of their String representation. I used the String representation in the BuilderSupport as to not have core-model depend on the DataSonnet Mapper. This would translate into some performance gains as the String will not need to be parsed on each expression evaluation.", "url": "https://github.com/apache/camel/pull/4561#discussion_r535500428", "createdAt": "2020-12-03T18:59:08Z", "author": {"login": "jam01"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTUwMzUxOA==", "bodyText": "Yes this is a good idea", "url": "https://github.com/apache/camel/pull/4561#discussion_r535503518", "createdAt": "2020-12-03T19:04:10Z", "author": {"login": "davsclaus"}, "path": "core/camel-core-model/src/main/java/org/apache/camel/builder/DatasonnetBuilder.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.builder;\n+\n+import org.apache.camel.Expression;\n+import org.apache.camel.model.language.DatasonnetExpression;\n+\n+public class DatasonnetBuilder extends ValueBuilder {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAxNzc3Ng=="}, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1NjcxNjY5OnYy", "diffSide": "RIGHT", "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0NToyMlrOH-PCrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwOTo0NToyMlrOH-PCrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTAyMDIwNg==", "bodyText": "remove the left over code in the comment", "url": "https://github.com/apache/camel/pull/4561#discussion_r535020206", "createdAt": "2020-12-03T09:45:22Z", "author": {"login": "davsclaus"}, "path": "components/camel-datasonnet/src/test/java/org/apache/camel/language/datasonnet/CamelDatasonnetTest.java", "diffHunk": "@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.language.datasonnet;\n+\n+import java.io.InputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Arrays;\n+import java.util.TimeZone;\n+\n+import com.datasonnet.document.Document;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.component.mock.MockEndpoint;\n+import org.apache.camel.support.ExchangeHelper;\n+import org.apache.camel.test.spring.junit5.CamelSpringTestSupport;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.Test;\n+import org.skyscreamer.jsonassert.JSONAssert;\n+import org.springframework.context.support.AbstractApplicationContext;\n+import org.springframework.context.support.ClassPathXmlApplicationContext;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CamelDatasonnetTest extends CamelSpringTestSupport {\n+    private MockEndpoint mock;// = getMockEndpoint(\"mock:direct:end\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e60b159ffdaa6bc0269b045ac0763447ac109cc3"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4790, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}