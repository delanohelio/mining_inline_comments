{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzE5Mzg3", "number": 3473, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo1Nzo0OFrODXEz8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTozOToxNlrODXGT7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTIyNjczOnYy", "diffSide": "RIGHT", "path": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo1Nzo0OFrOFcMfig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwNzo1Nzo0OFrOFcMfig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEwOTEzMA==", "bodyText": "Please run the build with the sourcecheck profile enabled, the static part must be at the end of the imports listing.", "url": "https://github.com/apache/camel/pull/3473#discussion_r365109130", "createdAt": "2020-01-10T07:57:48Z", "author": {"login": "oscerd"}, "path": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java", "diffHunk": "@@ -16,6 +16,16 @@\n  */\n package org.apache.camel.component.salesforce.internal.streaming;\n \n+import static java.util.concurrent.TimeUnit.MILLISECONDS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38af6c7f99b00995ad13915138150a4768e0bcd1"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTQ3MjQ1OnYy", "diffSide": "RIGHT", "path": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTozOToxNlrOFcOxHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwOTo1Nzo1MlrOFcPSqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0NjM5Nw==", "bodyText": "What is the reason to add SubscriptionHelper.this for these properties? IMHO it makes the code a bit chaotic, same goes for this.", "url": "https://github.com/apache/camel/pull/3473#discussion_r365146397", "createdAt": "2020-01-10T09:39:16Z", "author": {"login": "omarsmak"}, "path": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java", "diffHunk": "@@ -99,50 +99,51 @@ public SubscriptionHelper(final SalesforceComponent component) throws Salesforce\n \n         this.listenerMap = new ConcurrentHashMap<>();\n \n-        restartBackoff = new AtomicLong(0);\n-        backoffIncrement = component.getConfig().getBackoffIncrement();\n-        maxBackoff = component.getConfig().getMaxBackoff();\n+        this.restartBackoff = new AtomicLong(0);\n+        this.backoffIncrement = component.getConfig().getBackoffIncrement();\n+        this.maxBackoff = component.getConfig().getMaxBackoff();\n     }\n \n     @Override\n     protected void doStart() throws Exception {\n \n         // create CometD client\n-        this.client = createClient(component);\n+        this.client = createClient(this.component);\n \n         // reset all error conditions\n-        handshakeError = null;\n-        handshakeException = null;\n-        connectError = null;\n-        connectException = null;\n+        this.handshakeError = null;\n+        this.handshakeException = null;\n+        this.connectError = null;\n+        this.connectException = null;\n \n         // listener for handshake error or exception\n-        if (handshakeListener == null) {\n+        if (this.handshakeListener == null) {\n             // first start\n-            handshakeListener = new ClientSessionChannel.MessageListener() {\n-                public void onMessage(ClientSessionChannel channel, Message message) {\n+            this.handshakeListener = new ClientSessionChannel.MessageListener() {\n+                @Override\n+                public void onMessage(final ClientSessionChannel channel, final Message message) {\n                     LOG.debug(\"[CHANNEL:META_HANDSHAKE]: {}\", message);\n \n                     if (!message.isSuccessful()) {\n                         LOG.warn(\"Handshake failure: {}\", message);\n-                        handshakeError = (String)message.get(ERROR_FIELD);\n-                        handshakeException = getFailure(message);\n+                        SubscriptionHelper.this.handshakeError = (String)message.get(ERROR_FIELD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "38af6c7f99b00995ad13915138150a4768e0bcd1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1MTYyNQ==", "bodyText": "Sorry is my mistake... (default configuration of my IDE). I fix this.", "url": "https://github.com/apache/camel/pull/3473#discussion_r365151625", "createdAt": "2020-01-10T09:50:22Z", "author": {"login": "jbdefard"}, "path": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java", "diffHunk": "@@ -99,50 +99,51 @@ public SubscriptionHelper(final SalesforceComponent component) throws Salesforce\n \n         this.listenerMap = new ConcurrentHashMap<>();\n \n-        restartBackoff = new AtomicLong(0);\n-        backoffIncrement = component.getConfig().getBackoffIncrement();\n-        maxBackoff = component.getConfig().getMaxBackoff();\n+        this.restartBackoff = new AtomicLong(0);\n+        this.backoffIncrement = component.getConfig().getBackoffIncrement();\n+        this.maxBackoff = component.getConfig().getMaxBackoff();\n     }\n \n     @Override\n     protected void doStart() throws Exception {\n \n         // create CometD client\n-        this.client = createClient(component);\n+        this.client = createClient(this.component);\n \n         // reset all error conditions\n-        handshakeError = null;\n-        handshakeException = null;\n-        connectError = null;\n-        connectException = null;\n+        this.handshakeError = null;\n+        this.handshakeException = null;\n+        this.connectError = null;\n+        this.connectException = null;\n \n         // listener for handshake error or exception\n-        if (handshakeListener == null) {\n+        if (this.handshakeListener == null) {\n             // first start\n-            handshakeListener = new ClientSessionChannel.MessageListener() {\n-                public void onMessage(ClientSessionChannel channel, Message message) {\n+            this.handshakeListener = new ClientSessionChannel.MessageListener() {\n+                @Override\n+                public void onMessage(final ClientSessionChannel channel, final Message message) {\n                     LOG.debug(\"[CHANNEL:META_HANDSHAKE]: {}\", message);\n \n                     if (!message.isSuccessful()) {\n                         LOG.warn(\"Handshake failure: {}\", message);\n-                        handshakeError = (String)message.get(ERROR_FIELD);\n-                        handshakeException = getFailure(message);\n+                        SubscriptionHelper.this.handshakeError = (String)message.get(ERROR_FIELD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0NjM5Nw=="}, "originalCommit": {"oid": "38af6c7f99b00995ad13915138150a4768e0bcd1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE1NDk4Ng==", "bodyText": "I commited a more correct patch", "url": "https://github.com/apache/camel/pull/3473#discussion_r365154986", "createdAt": "2020-01-10T09:57:52Z", "author": {"login": "jbdefard"}, "path": "components/camel-salesforce/camel-salesforce-component/src/main/java/org/apache/camel/component/salesforce/internal/streaming/SubscriptionHelper.java", "diffHunk": "@@ -99,50 +99,51 @@ public SubscriptionHelper(final SalesforceComponent component) throws Salesforce\n \n         this.listenerMap = new ConcurrentHashMap<>();\n \n-        restartBackoff = new AtomicLong(0);\n-        backoffIncrement = component.getConfig().getBackoffIncrement();\n-        maxBackoff = component.getConfig().getMaxBackoff();\n+        this.restartBackoff = new AtomicLong(0);\n+        this.backoffIncrement = component.getConfig().getBackoffIncrement();\n+        this.maxBackoff = component.getConfig().getMaxBackoff();\n     }\n \n     @Override\n     protected void doStart() throws Exception {\n \n         // create CometD client\n-        this.client = createClient(component);\n+        this.client = createClient(this.component);\n \n         // reset all error conditions\n-        handshakeError = null;\n-        handshakeException = null;\n-        connectError = null;\n-        connectException = null;\n+        this.handshakeError = null;\n+        this.handshakeException = null;\n+        this.connectError = null;\n+        this.connectException = null;\n \n         // listener for handshake error or exception\n-        if (handshakeListener == null) {\n+        if (this.handshakeListener == null) {\n             // first start\n-            handshakeListener = new ClientSessionChannel.MessageListener() {\n-                public void onMessage(ClientSessionChannel channel, Message message) {\n+            this.handshakeListener = new ClientSessionChannel.MessageListener() {\n+                @Override\n+                public void onMessage(final ClientSessionChannel channel, final Message message) {\n                     LOG.debug(\"[CHANNEL:META_HANDSHAKE]: {}\", message);\n \n                     if (!message.isSuccessful()) {\n                         LOG.warn(\"Handshake failure: {}\", message);\n-                        handshakeError = (String)message.get(ERROR_FIELD);\n-                        handshakeException = getFailure(message);\n+                        SubscriptionHelper.this.handshakeError = (String)message.get(ERROR_FIELD);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTE0NjM5Nw=="}, "originalCommit": {"oid": "38af6c7f99b00995ad13915138150a4768e0bcd1"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4719, "cost": 1, "resetAt": "2021-11-12T11:18:39Z"}}}