{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NjYzODQw", "number": 4029, "title": "CAMEL-15283: Add Vert.x HTTP client component", "bodyText": "", "createdAt": "2020-07-21T18:07:43Z", "url": "https://github.com/apache/camel/pull/4029", "merged": true, "mergeCommit": {"oid": "b30992e145a2d7669dfecf1c98f4549727692f94"}, "closed": true, "closedAt": "2020-07-22T07:49:04Z", "author": {"login": "jamesnetherton"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3KOV7AH2gAyNDU0NjYzODQwOjAxNjE5YTE1MjNkYzVhNzk5NzUxNWQ0N2YzZjIwNWJlNmRlMDkxMGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3WyMNgFqTQ1MzExNTk4OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f", "author": {"user": {"login": "jamesnetherton", "name": "James Netherton"}}, "url": "https://github.com/apache/camel/commit/01619a1523dc5a7997515d47f3f205be6de0910f", "committedDate": "2020-07-21T18:06:38Z", "message": "CAMEL-15283: Add Vert.x HTTP client component"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNzExMTQy", "url": "https://github.com/apache/camel/pull/4029#pullrequestreview-452711142", "createdAt": "2020-07-21T18:12:44Z", "commit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMDcwNzg2", "url": "https://github.com/apache/camel/pull/4029#pullrequestreview-453070786", "createdAt": "2020-07-22T07:43:20Z", "commit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTEyNjIy", "url": "https://github.com/apache/camel/pull/4029#pullrequestreview-453112622", "createdAt": "2020-07-22T08:40:11Z", "commit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0MDoxMVrOG1Ypjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0MDoxMVrOG1Ypjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzMTU2Nw==", "bodyText": "maybe we need to check for null here ? I don't remember if in case of failures setting up the routes, the doStop method would get invoked", "url": "https://github.com/apache/camel/pull/4029#discussion_r458631567", "createdAt": "2020-07-22T08:40:11Z", "author": {"login": "lburgazzoli"}, "path": "components/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpEndpoint.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.vertx.http;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.net.ProxyOptions;\n+import io.vertx.ext.web.client.WebClient;\n+import io.vertx.ext.web.client.WebClientOptions;\n+import io.vertx.ext.web.client.WebClientSession;\n+import io.vertx.ext.web.client.spi.CookieStore;\n+import org.apache.camel.Category;\n+import org.apache.camel.Consumer;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Producer;\n+import org.apache.camel.spi.UriEndpoint;\n+import org.apache.camel.spi.UriParam;\n+import org.apache.camel.support.DefaultEndpoint;\n+import org.apache.camel.support.jsse.SSLContextParameters;\n+import org.apache.camel.util.ObjectHelper;\n+\n+@UriEndpoint(firstVersion = \"3.5.0\", scheme = \"vertx-http\", title = \"Vert.x HTTP Client\", syntax = \"vertx-http:httpUri\", category = {Category.HTTP}, producerOnly = true, lenientProperties = true)\n+public class VertxHttpEndpoint extends DefaultEndpoint {\n+\n+    @UriParam\n+    private VertxHttpConfiguration configuration;\n+\n+    private WebClient webClient;\n+\n+    public VertxHttpEndpoint(String uri, VertxHttpComponent component, VertxHttpConfiguration configuration) {\n+        super(uri, component);\n+        this.configuration = configuration;\n+    }\n+\n+    @Override\n+    public VertxHttpComponent getComponent() {\n+        return (VertxHttpComponent) super.getComponent();\n+    }\n+\n+    @Override\n+    public Producer createProducer() throws Exception {\n+        return new VertxHttpProducer(this);\n+    }\n+\n+    @Override\n+    public Consumer createConsumer(Processor processor) throws Exception {\n+        throw new UnsupportedOperationException(\"vertx-http consumers are not supported\");\n+    }\n+\n+    @Override\n+    protected void doStart() throws Exception {\n+        super.doStart();\n+        if (webClient == null) {\n+            WebClientOptions options = configuration.getWebClientOptions();\n+            if (options == null) {\n+                options = new WebClientOptions();\n+                options.setTryUseCompression(configuration.isUseCompression());\n+                options.setConnectTimeout(configuration.getConnectTimeout());\n+                configureProxyOptionsIfRequired(options);\n+            }\n+\n+            SSLContextParameters sslContextParameters = configuration.getSslContextParameters();\n+            if (sslContextParameters != null) {\n+                VertxHttpHelper.setupSSLOptions(sslContextParameters, options);\n+            }\n+\n+            webClient = WebClient.create(getVertx(), options);\n+            if (configuration.isSessionManagement()) {\n+                CookieStore cookieStore = configuration.getCookieStore() == null ? CookieStore.build() : configuration.getCookieStore();\n+                webClient = WebClientSession.create(webClient, cookieStore);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {\n+        super.doStop();\n+        webClient.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f"}, "originalPosition": 91}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUzMTE1OTg4", "url": "https://github.com/apache/camel/pull/4029#pullrequestreview-453115988", "createdAt": "2020-07-22T08:44:38Z", "commit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0NDozOFrOG1Y0Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODo0NDozOFrOG1Y0Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYzNDMxNA==", "bodyText": "I think in this case, we need to close/stop the vertx instance once the component stops", "url": "https://github.com/apache/camel/pull/4029#discussion_r458634314", "createdAt": "2020-07-22T08:44:38Z", "author": {"login": "lburgazzoli"}, "path": "components/camel-vertx-http/src/main/java/org/apache/camel/component/vertx/http/VertxHttpComponent.java", "diffHunk": "@@ -0,0 +1,227 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.camel.component.vertx.http;\n+\n+import java.net.URI;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.vertx.core.Vertx;\n+import io.vertx.core.VertxOptions;\n+import org.apache.camel.CamelContext;\n+import org.apache.camel.Endpoint;\n+import org.apache.camel.Producer;\n+import org.apache.camel.SSLContextParametersAware;\n+import org.apache.camel.spi.Metadata;\n+import org.apache.camel.spi.RestConfiguration;\n+import org.apache.camel.spi.RestProducerFactory;\n+import org.apache.camel.spi.annotations.Component;\n+import org.apache.camel.support.CamelContextHelper;\n+import org.apache.camel.support.HeaderFilterStrategyComponent;\n+import org.apache.camel.support.RestProducerFactoryHelper;\n+import org.apache.camel.support.service.ServiceHelper;\n+import org.apache.camel.util.FileUtil;\n+import org.apache.camel.util.ObjectHelper;\n+import org.apache.camel.util.URISupport;\n+import org.apache.camel.util.UnsafeUriCharactersEncoder;\n+\n+@Component(\"vertx-http\")\n+public class VertxHttpComponent extends HeaderFilterStrategyComponent implements RestProducerFactory, SSLContextParametersAware {\n+\n+    @Metadata(label = \"advanced\")\n+    private Vertx vertx;\n+    @Metadata(label = \"advanced\")\n+    private VertxOptions vertxOptions;\n+    @Metadata(label = \"advanced\")\n+    private VertxHttpBinding vertxHttpBinding;\n+    @Metadata(label = \"security\", defaultValue = \"false\")\n+    private boolean useGlobalSslContextParameters;\n+    @Metadata(label = \"advanced\")\n+    private boolean allowJavaSerializedObject;\n+\n+    @Override\n+    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n+        VertxHttpConfiguration configuration = new VertxHttpConfiguration();\n+\n+        URI uriHttpUriAddress = new URI(UnsafeUriCharactersEncoder.encodeHttpURI(remaining));\n+\n+        VertxHttpEndpoint endpoint = new VertxHttpEndpoint(uri, this, configuration);\n+        setProperties(endpoint, parameters);\n+\n+        if (configuration.getSslContextParameters() == null) {\n+            configuration.setSslContextParameters(retrieveGlobalSslContextParameters());\n+        }\n+\n+        if (configuration.getVertxHttpBinding() == null) {\n+            configuration.setVertxHttpBinding(getVertxHttpBinding());\n+        }\n+\n+        if (configuration.getHeaderFilterStrategy() == null) {\n+            configuration.setHeaderFilterStrategy(getHeaderFilterStrategy());\n+        }\n+\n+        // Recreate the http uri with the remaining parameters which the endpoint did not use\n+        URI httpUri = URISupport.createRemainingURI(\n+                new URI(uriHttpUriAddress.getScheme(),\n+                        uriHttpUriAddress.getUserInfo(),\n+                        uriHttpUriAddress.getHost(),\n+                        uriHttpUriAddress.getPort(),\n+                        uriHttpUriAddress.getPath(),\n+                        uriHttpUriAddress.getQuery(),\n+                        uriHttpUriAddress.getFragment()),\n+                        parameters);\n+\n+        configuration.setHttpUri(httpUri);\n+\n+        return endpoint;\n+    }\n+\n+    @Override\n+    public Producer createProducer(CamelContext camelContext, String host,\n+            String verb, String basePath, String uriTemplate, String queryParameters, String consumes,\n+            String produces, RestConfiguration configuration, Map<String, Object> parameters) throws Exception {\n+        // avoid leading slash\n+        basePath = FileUtil.stripLeadingSeparator(basePath);\n+        uriTemplate = FileUtil.stripLeadingSeparator(uriTemplate);\n+\n+        // get the endpoint\n+        String scheme = \"vertx-http:\";\n+        String url = scheme + host;\n+        if (!ObjectHelper.isEmpty(basePath)) {\n+            url += \"/\" + basePath;\n+        }\n+        if (!ObjectHelper.isEmpty(uriTemplate)) {\n+            url += \"/\" + uriTemplate;\n+        }\n+\n+        RestConfiguration config = configuration;\n+        if (config == null) {\n+            config = CamelContextHelper.getRestConfiguration(getCamelContext(), null, scheme);\n+        }\n+\n+        Map<String, Object> map = new HashMap<>();\n+        // build query string, and append any endpoint configuration properties\n+        if (config.getProducerComponent() == null || config.getProducerComponent().equals(scheme)) {\n+            // setup endpoint options\n+            if (config.getEndpointProperties() != null && !config.getEndpointProperties().isEmpty()) {\n+                map.putAll(config.getEndpointProperties());\n+            }\n+        }\n+\n+        // get the endpoint\n+        String query = URISupport.createQueryString(map);\n+        if (!query.isEmpty()) {\n+            url = url + \"?\" + query;\n+        }\n+\n+        parameters = parameters != null ? new HashMap<>(parameters) : new HashMap<>();\n+\n+        // there are cases where we might end up here without component being created beforehand\n+        // we need to abide by the component properties specified in the parameters when creating\n+        // the component, one such case is when we switch from \"http\" to \"https\" component name\n+        RestProducerFactoryHelper.setupComponentFor(url, camelContext, (Map<String, Object>) parameters.remove(\"component\"));\n+\n+        VertxHttpEndpoint endpoint = camelContext.getEndpoint(url, VertxHttpEndpoint.class);\n+        setProperties(endpoint, parameters);\n+        String path = uriTemplate != null ? uriTemplate : basePath;\n+        endpoint.getConfiguration().setHeaderFilterStrategy(new VertxHttpRestHeaderFilterStrategy(path, queryParameters));\n+\n+        // the endpoint must be started before creating the producer\n+        ServiceHelper.startService(endpoint);\n+\n+        return endpoint.createProducer();\n+    }\n+\n+    public Vertx getVertx() {\n+        if (vertx == null) {\n+            Set<Vertx> vertxes = getCamelContext().getRegistry().findByType(Vertx.class);\n+            if (vertxes.size() == 1) {\n+                vertx  = vertxes.iterator().next();\n+            }\n+        }\n+\n+        if (vertx == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "01619a1523dc5a7997515d47f3f205be6de0910f"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2975, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}