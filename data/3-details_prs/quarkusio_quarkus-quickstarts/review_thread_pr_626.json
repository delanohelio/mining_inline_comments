{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTA5ODIw", "number": 626, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxMDoxNFrOEQpDwQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoyMjoxNlrOEStJGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1ODg1Mzc3OnYy", "diffSide": "RIGHT", "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "isResolved": false, "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxMDoxNFrOG052BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwODoyODoxOFrOG1YNNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg==", "bodyText": "Is ReactiveRoutes.asJsonArray( required now?", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458126852", "createdAt": "2020-07-21T14:10:14Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE0NjQyMg==", "bodyText": "I think that it was required even before but the test does not validate the proper syntax of json array...", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458146422", "createdAt": "2020-07-21T14:35:36Z", "author": {"login": "mkouba"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE3MDk4OQ==", "bodyText": "Yes, it required (For now) to creates an asynchronous json array. Each item is written in the response when ready (and sent to the client).\nWe are improving this by inferring this from the produces attribute. But it's WIP...", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458170989", "createdAt": "2020-07-21T15:07:13Z", "author": {"login": "cescoffier"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODE4Njk3MQ==", "bodyText": "It surprised me because when I write\n    @Route(methods = GET, path = \"/\")\n    public Uni<List<Fruit>> getAll(RoutingContext rc) throws Exception {\n        return session.createNamedQuery( Fruit.FIND_ALL, Fruit.class).getResultList();\n    }\n\nIt works as expected. I'm wondering if it wouldn't look better to return a Uni<List>?", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458186971", "createdAt": "2020-07-21T15:28:19Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNDIzOQ==", "bodyText": "yes it looks better, but the quickstart is supposed to teach to people \"the right way\".\n@cescoffier are you optimistic about your WIP to be doable? If so, maybe it's ok for the example to already show the simpler syntax?  We're not working to win a benchmark war yet ;)", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458204239", "createdAt": "2020-07-21T15:51:15Z", "author": {"login": "Sanne"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIwNjU4Mw==", "bodyText": "The right way is the one that works ;)", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458206583", "createdAt": "2020-07-21T15:54:30Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODIyNzkzMg==", "bodyText": "Multi and Uni<List> don't have the same semantic. Multi writes the X into the response when they are received, avoiding the items to be stored in memory. Uni<List>> builds the list and write it in one \"batch\". We recommend List is it fits in memory and if the items of the list can be retrieved in one batch. In which case are we with Hibernate Reactive?", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458227932", "createdAt": "2020-07-21T16:25:27Z", "author": {"login": "cescoffier"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODI1MzUyMg==", "bodyText": "Hibernate Reactive at the moment only works with Uni<List> and the Multi returned by query.getResults() is just the Uni converted to a Multi.\nThat said, this quickstart is a simple case that returns a bunch of fruits, picking a Multi or a Uni in the API is more a question of what features we want to show.\nThe reason I used Multi<Fruit> is because it looks better and that was my goal for the quickstart.\nBut if it needs extra handling, I would return a Uni and add a comment to explain why it makes sense in this case to use it (instead of a Multi) and maybe create another example that shows when it makes sense to use a Multi.", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458253522", "createdAt": "2020-07-21T17:05:25Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MTAyNg==", "bodyText": "Uni<List<Fruit>> works fine and makes probably more sense for this use case (unless there's a plan to support Multi \"properly\").\n@cescoffier @Sanne Should we change the return type to Uni<List<Fruit>>? And if so what kind of comment should we add? \"Hibernate Reactive does not support this yet\" does not sound good ;-).", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458561026", "createdAt": "2020-07-22T06:23:15Z", "author": {"login": "mkouba"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2MjYyNw==", "bodyText": "From a reactive standpoint, returning a Multi is better.", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458562627", "createdAt": "2020-07-22T06:27:07Z", "author": {"login": "cescoffier"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU2NjY4NQ==", "bodyText": "As I said, there are also good arguments to return a Uni<List> so I don't mind.", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458566685", "createdAt": "2020-07-22T06:37:34Z", "author": {"login": "cescoffier"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMjYyMA==", "bodyText": "thanks @cescoffier , let's use what looks best then.\n\nShould we change the return type to Uni<List<Fruit>>? And if so what kind of comment should we add? \"Hibernate Reactive does not support this yet\" does not sound good ;-).\n\nI don't feel a comment is necessary. What is triggered when using this API is a single SQL statement which expects a reasonably sized result set. For example, here we'll load all of 4 fruits from the DB.. there's no need to use a stream for this, in fact it would be less efficient as it's more chatty to the DB, while the whole resultset is likely to fit in a single network packet.\nFor streaming results, Hibernate offers different APIs which people are encouraged to use when the expected size of the results is significant. (while getResultsList() is intentionally returning a Uni<List<R>> ).", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458612620", "createdAt": "2020-07-22T08:08:42Z", "author": {"login": "Sanne"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxMzczNw==", "bodyText": "P.S. I see that the alternative API which I referred to - one which produces a \"real Multi\" - isn't around yet, but I expect we'll be able to make one based on the scrollable API of ORM - wich is backed by server side cursors.", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458613737", "createdAt": "2020-07-22T08:10:34Z", "author": {"login": "Sanne"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxNDE3NA==", "bodyText": "@gavinking ^", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458614174", "createdAt": "2020-07-22T08:11:21Z", "author": {"login": "Sanne"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYxNzcyOQ==", "bodyText": "let's use what looks best then.\n\nUni<List<Fruit>> then? ;-)", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458617729", "createdAt": "2020-07-22T08:17:20Z", "author": {"login": "mkouba"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyMTIyNg==", "bodyText": "\"Hibernate Reactive does not support this yet\" does not sound good\n\nI don't think this is a Hibernate Reactive issue, it's a general issue when designing the API. Not saying that we need to add a comment but something similar to this would tell the user the differences:\nIn this case it makes sense to return a Uni<List<Fruit>> because we return a reasonable amount of results.\n\nConsider returning a Multi<Fruit> for streaming results (link to example).\n\nThe example doesn't even have to be a Hibernate Reactive one.", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458621226", "createdAt": "2020-07-22T08:23:17Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODYyNDMxMQ==", "bodyText": "For everybody interested, this is the issue explaining why Hibernate Reactive hasn't a proper Multi return method: hibernate/hibernate-reactive#153\nHaving some feedback is always nice.", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458624311", "createdAt": "2020-07-22T08:28:18Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg=="}, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MDQ5NDM1OnYy", "diffSide": "RIGHT", "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoyMjoxNlrOG4B6bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODo0MDowMFrOG4Cj5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwNDc4MA==", "bodyText": "A curiosity, does it have to be a Uni in this case? Can't we just throw the exception?", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r461404780", "createdAt": "2020-07-28T08:22:16Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,113 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n-import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Uni<List<Fruit>> getAll() throws Exception {\n+        // In this case, it makes sense to return a Uni<List<Fruit>> because we return a reasonable amount of results\n+        // Consider returning a Multi<Fruit> for result streams \n+        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResultList();\n     }\n \n     @Route(methods = GET, path = \"/:id\")\n-    public Uni<Fruit> getSingle(RoutingContext rc) {\n-        final Integer id = Integer.valueOf(rc.request().getParam(\"id\"));\n-\n-        return session.find(Fruit.class, id);\n+    public Uni<Fruit> getSingle(@Param String id) {\n+        return session.find(Fruit.class, Integer.valueOf(id));\n     }\n \n     @Route(methods = POST, path = \"/\")\n-    public Uni<HttpServerResponse> create(RoutingContext rc) {\n-        final String name = rc.getBodyAsJson().getString(\"name\");\n-        final Fruit entity = new Fruit(name);\n-\n-        return session.persist(entity)\n-                        .onItem().produceUni(s -> session.flush())\n-                        .onItem().apply(ignore -> httpResponse(rc, 201, entity));\n+    public Uni<Fruit> create(@Body Fruit fruit, HttpServerResponse response) {\n+        if (fruit == null || fruit.getId() != null) {\n+            return Uni.createFrom().failure(new IllegalArgumentException(\"Fruit id invalidly set on request.\"));\n+        }\n+        return session.persist(fruit)\n+                .onItem().transformToUni(session -> session.flush())\n+                .onItem().transform(ignore -> {\n+                    response.setStatusCode(201);\n+                    return fruit;\n+                });\n     }\n \n     @Route(methods = PUT, path = \"/:id\")\n-    public Uni<HttpServerResponse> update(RoutingContext rc) {\n-        final Integer id = Integer.valueOf(rc.request().getParam(\"id\"));\n-        final String name = rc.getBodyAsJson().getString(\"name\");\n-\n-        return session.find(Fruit.class, id)\n-                // if entity exists\n-                .onItem().ifNotNull()\n-                        .produceUni(entity -> {\n-                                // Update the entity\n-                                entity.setName(name);\n-                                return session.flush()\n-                                        .onItem().apply(ignore -> httpResponse(rc, 200, entity));\n-                        })\n-                // if entity doesn't exist\n-                .onItem().ifNull()\n-                        // Not found response code\n-                        .continueWith(httpResponse(rc, 404));\n+    public Uni<Fruit> update(@Body Fruit fruit, @Param String id) {\n+        if (fruit == null || fruit.getName() == null) {\n+            return Uni.createFrom().failure(new IllegalArgumentException(\"Fruit name was not set on request.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQxNTM5OQ==", "bodyText": "We can. But I think that it's better to avoid throwing an exception unless we have to...", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r461415399", "createdAt": "2020-07-28T08:40:00Z", "author": {"login": "mkouba"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,113 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n-import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Uni<List<Fruit>> getAll() throws Exception {\n+        // In this case, it makes sense to return a Uni<List<Fruit>> because we return a reasonable amount of results\n+        // Consider returning a Multi<Fruit> for result streams \n+        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResultList();\n     }\n \n     @Route(methods = GET, path = \"/:id\")\n-    public Uni<Fruit> getSingle(RoutingContext rc) {\n-        final Integer id = Integer.valueOf(rc.request().getParam(\"id\"));\n-\n-        return session.find(Fruit.class, id);\n+    public Uni<Fruit> getSingle(@Param String id) {\n+        return session.find(Fruit.class, Integer.valueOf(id));\n     }\n \n     @Route(methods = POST, path = \"/\")\n-    public Uni<HttpServerResponse> create(RoutingContext rc) {\n-        final String name = rc.getBodyAsJson().getString(\"name\");\n-        final Fruit entity = new Fruit(name);\n-\n-        return session.persist(entity)\n-                        .onItem().produceUni(s -> session.flush())\n-                        .onItem().apply(ignore -> httpResponse(rc, 201, entity));\n+    public Uni<Fruit> create(@Body Fruit fruit, HttpServerResponse response) {\n+        if (fruit == null || fruit.getId() != null) {\n+            return Uni.createFrom().failure(new IllegalArgumentException(\"Fruit id invalidly set on request.\"));\n+        }\n+        return session.persist(fruit)\n+                .onItem().transformToUni(session -> session.flush())\n+                .onItem().transform(ignore -> {\n+                    response.setStatusCode(201);\n+                    return fruit;\n+                });\n     }\n \n     @Route(methods = PUT, path = \"/:id\")\n-    public Uni<HttpServerResponse> update(RoutingContext rc) {\n-        final Integer id = Integer.valueOf(rc.request().getParam(\"id\"));\n-        final String name = rc.getBodyAsJson().getString(\"name\");\n-\n-        return session.find(Fruit.class, id)\n-                // if entity exists\n-                .onItem().ifNotNull()\n-                        .produceUni(entity -> {\n-                                // Update the entity\n-                                entity.setName(name);\n-                                return session.flush()\n-                                        .onItem().apply(ignore -> httpResponse(rc, 200, entity));\n-                        })\n-                // if entity doesn't exist\n-                .onItem().ifNull()\n-                        // Not found response code\n-                        .continueWith(httpResponse(rc, 404));\n+    public Uni<Fruit> update(@Body Fruit fruit, @Param String id) {\n+        if (fruit == null || fruit.getName() == null) {\n+            return Uni.createFrom().failure(new IllegalArgumentException(\"Fruit name was not set on request.\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwNDc4MA=="}, "originalCommit": {"oid": "7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2333, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}