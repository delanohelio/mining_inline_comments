{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NTA5ODIw", "number": 626, "title": "Hibernate reactive routes quickstart improvements", "bodyText": "quarkusio/quarkus#10871 must be merged first...", "createdAt": "2020-07-21T13:35:18Z", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626", "merged": true, "mergeCommit": {"oid": "b2281dfa32b41c6bbc5917fc233ee36751fed7cc"}, "closed": true, "closedAt": "2020-07-28T11:45:22Z", "author": {"login": "mkouba"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3GVaSAH2gAyNDU0NTA5ODIwOjM0MjFmYmU3MjEyMzkwNThjNTlmNDRjNjUyOWEwYzFkMmE2YjA4Nzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5SD3qgFqTQ1NjQwODYxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/3421fbe721239058c59f44c6529a0c1d2a6b0877", "committedDate": "2020-07-21T13:34:44Z", "message": "Hibernate reactive routes quickstart improvements\n\n- based on the latest reactive routes API improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDY3NTkx", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#pullrequestreview-452467591", "createdAt": "2020-07-21T13:40:41Z", "commit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyNDk2NTky", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#pullrequestreview-452496592", "createdAt": "2020-07-21T14:10:14Z", "commit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxMDoxNFrOG052BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxNDoxMDoxNFrOG052BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODEyNjg1Mg==", "bodyText": "Is ReactiveRoutes.asJsonArray( required now?", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r458126852", "createdAt": "2020-07-21T14:10:14Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,112 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n+import io.quarkus.vertx.web.ReactiveRoutes;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Multi<Fruit> getAll() throws Exception {\n+        return ReactiveRoutes.asJsonArray(session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3421fbe721239058c59f44c6529a0c1d2a6b0877"}, "originalPosition": 64}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc", "committedDate": "2020-07-24T10:47:48Z", "message": "Replace Multi<Fruit> with Uni<List<Fruit>>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "14bb2c82ad657969438e5cd1fec396aecab282c7", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/14bb2c82ad657969438e5cd1fec396aecab282c7", "committedDate": "2020-07-24T10:45:28Z", "message": "Replace Multi<Fruit> with Uni<List<Fruit>>"}, "afterCommit": {"oid": "7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc", "author": {"user": {"login": "mkouba", "name": "Martin Kouba"}}, "url": "https://github.com/quarkusio/quarkus-quickstarts/commit/7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc", "committedDate": "2020-07-24T10:47:48Z", "message": "Replace Multi<Fruit> with Uni<List<Fruit>>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2NDA4NjEx", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#pullrequestreview-456408611", "createdAt": "2020-07-28T08:22:16Z", "commit": {"oid": "7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoyMjoxNlrOG4B6bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQwODoyMjoxNlrOG4B6bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTQwNDc4MA==", "bodyText": "A curiosity, does it have to be a Uni in this case? Can't we just throw the exception?", "url": "https://github.com/quarkusio/quarkus-quickstarts/pull/626#discussion_r461404780", "createdAt": "2020-07-28T08:22:16Z", "author": {"login": "DavideD"}, "path": "hibernate-reactive-routes-quickstart/src/main/java/org/acme/hibernate/reactive/FruitsRoutes.java", "diffHunk": "@@ -1,123 +1,113 @@\n package org.acme.hibernate.reactive;\n \n-import javax.enterprise.context.ApplicationScoped;\n+import static io.quarkus.vertx.web.Route.HandlerType.FAILURE;\n+import static io.vertx.core.http.HttpMethod.DELETE;\n+import static io.vertx.core.http.HttpMethod.GET;\n+import static io.vertx.core.http.HttpMethod.POST;\n+import static io.vertx.core.http.HttpMethod.PUT;\n+\n+import java.util.List;\n+import java.util.NoSuchElementException;\n+\n import javax.inject.Inject;\n \n import org.hibernate.reactive.mutiny.Mutiny;\n+import org.jboss.logging.Logger;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.quarkus.vertx.web.Body;\n+import io.quarkus.vertx.web.Param;\n import io.quarkus.vertx.web.Route;\n import io.quarkus.vertx.web.RouteBase;\n-import io.smallrye.mutiny.Multi;\n import io.smallrye.mutiny.Uni;\n import io.vertx.core.http.HttpServerResponse;\n+import io.vertx.core.json.JsonObject;\n import io.vertx.ext.web.RoutingContext;\n \n-import static io.vertx.core.http.HttpMethod.DELETE;\n-import static io.vertx.core.http.HttpMethod.GET;\n-import static io.vertx.core.http.HttpMethod.POST;\n-import static io.vertx.core.http.HttpMethod.PUT;\n-\n /**\n  * An example using Vert.x Web, Hibernate Reactive and Mutiny.\n  */\n-@ApplicationScoped\n @RouteBase(path = \"/fruits\", produces = \"application/json\")\n public class FruitsRoutes {\n \n-    @Inject\n-    ObjectMapper mapper;\n+    private static final Logger LOGGER = Logger.getLogger(FruitsRoutes.class.getName());\n \n     @Inject\n     Mutiny.Session session;\n \n-    /**\n-     * Convert an object into a JSON string.\n-     */\n-    private String toJSON(Object object) {\n-        try {\n-            return mapper.writeValueAsString(object);\n-        } catch (JsonProcessingException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n     @Route(methods = GET, path = \"/\")\n-    public Multi<Fruit> getAll(RoutingContext rc) throws Exception {\n-        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResults();\n+    public Uni<List<Fruit>> getAll() throws Exception {\n+        // In this case, it makes sense to return a Uni<List<Fruit>> because we return a reasonable amount of results\n+        // Consider returning a Multi<Fruit> for result streams \n+        return session.createNamedQuery(Fruit.FIND_ALL, Fruit.class).getResultList();\n     }\n \n     @Route(methods = GET, path = \"/:id\")\n-    public Uni<Fruit> getSingle(RoutingContext rc) {\n-        final Integer id = Integer.valueOf(rc.request().getParam(\"id\"));\n-\n-        return session.find(Fruit.class, id);\n+    public Uni<Fruit> getSingle(@Param String id) {\n+        return session.find(Fruit.class, Integer.valueOf(id));\n     }\n \n     @Route(methods = POST, path = \"/\")\n-    public Uni<HttpServerResponse> create(RoutingContext rc) {\n-        final String name = rc.getBodyAsJson().getString(\"name\");\n-        final Fruit entity = new Fruit(name);\n-\n-        return session.persist(entity)\n-                        .onItem().produceUni(s -> session.flush())\n-                        .onItem().apply(ignore -> httpResponse(rc, 201, entity));\n+    public Uni<Fruit> create(@Body Fruit fruit, HttpServerResponse response) {\n+        if (fruit == null || fruit.getId() != null) {\n+            return Uni.createFrom().failure(new IllegalArgumentException(\"Fruit id invalidly set on request.\"));\n+        }\n+        return session.persist(fruit)\n+                .onItem().transformToUni(session -> session.flush())\n+                .onItem().transform(ignore -> {\n+                    response.setStatusCode(201);\n+                    return fruit;\n+                });\n     }\n \n     @Route(methods = PUT, path = \"/:id\")\n-    public Uni<HttpServerResponse> update(RoutingContext rc) {\n-        final Integer id = Integer.valueOf(rc.request().getParam(\"id\"));\n-        final String name = rc.getBodyAsJson().getString(\"name\");\n-\n-        return session.find(Fruit.class, id)\n-                // if entity exists\n-                .onItem().ifNotNull()\n-                        .produceUni(entity -> {\n-                                // Update the entity\n-                                entity.setName(name);\n-                                return session.flush()\n-                                        .onItem().apply(ignore -> httpResponse(rc, 200, entity));\n-                        })\n-                // if entity doesn't exist\n-                .onItem().ifNull()\n-                        // Not found response code\n-                        .continueWith(httpResponse(rc, 404));\n+    public Uni<Fruit> update(@Body Fruit fruit, @Param String id) {\n+        if (fruit == null || fruit.getName() == null) {\n+            return Uni.createFrom().failure(new IllegalArgumentException(\"Fruit name was not set on request.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7365c7bec75c4d4ee6bd9e1f35c8fc5d7be41adc"}, "originalPosition": 118}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3393, "cost": 1, "resetAt": "2021-11-01T16:37:27Z"}}}