{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3NzE3MjEw", "number": 1835, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjo0NzowM1rODn0dGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjo0NzowM1rODn0dGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMDgwNDczOnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/credentials/CredentialKey.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMjo0NzowM1rOF2CWDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxMzo1MTowOFrOF2EZWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwNTgzOQ==", "bodyText": "I would recommend to name the method credentialKey instead of from. The reason for that is, when using static imports, you will get a name clash with the other from methods.", "url": "https://github.com/eclipse/hono/pull/1835#discussion_r392205839", "createdAt": "2020-03-13T12:47:03Z", "author": {"login": "ctron"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/credentials/CredentialKey.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.service.credentials;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+/**\n+ * Provides a unique key for a <em>Credential</em> resource of Hono's\n+ * <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>.\n+ * It is used for storing and retrieving values from the backend storage and external systems.\n+ */\n+public final class CredentialKey implements Serializable {\n+\n+    private final String tenantId;\n+    private final String authId;\n+    private final String type;\n+\n+    private CredentialKey(final String tenantId, final String authId, final String type) {\n+        this.tenantId = tenantId;\n+        this.authId = authId;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the tenant identifier.\n+     *\n+     * @return The identifier or {@code null} if not set.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Gets the authentication id of the credential.\n+     *\n+     * @return The authentication identifier or {@code null} if not set.\n+     */\n+    public String getAuthId() {\n+        return authId;\n+    }\n+\n+    /**\n+     * Gets the type of the credential.\n+     *\n+     * @return The type or {@code null} if not set.\n+     */\n+    public String getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Creates a credential key from tenant identifier, authentication identifier and type.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param authId The authentication identifier.\n+     * @param type The credential type.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @return The credential key.\n+     */\n+    public static CredentialKey from(final String tenantId, final String authId, final String type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a8b80665dae06096ba7129fdcb70e4cc5aa2ede"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIzOTQ0OQ==", "bodyText": "Static imports are treated as errors by the checkstyle plugin, so we can't use them (except in tests). And we have pattern of using from() methods in these kind of value objects throughout the codebase. Also, there was also of() in TenantHandle, so it should be consistent now.", "url": "https://github.com/eclipse/hono/pull/1835#discussion_r392239449", "createdAt": "2020-03-13T13:51:08Z", "author": {"login": "dejanb"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/credentials/CredentialKey.java", "diffHunk": "@@ -0,0 +1,130 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceregistry.service.credentials;\n+\n+import java.io.Serializable;\n+import java.util.Objects;\n+\n+import org.eclipse.hono.deviceregistry.service.tenant.TenantKey;\n+\n+import com.google.common.base.MoreObjects;\n+import com.google.common.base.MoreObjects.ToStringHelper;\n+\n+/**\n+ * Provides a unique key for a <em>Credential</em> resource of Hono's\n+ * <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>.\n+ * It is used for storing and retrieving values from the backend storage and external systems.\n+ */\n+public final class CredentialKey implements Serializable {\n+\n+    private final String tenantId;\n+    private final String authId;\n+    private final String type;\n+\n+    private CredentialKey(final String tenantId, final String authId, final String type) {\n+        this.tenantId = tenantId;\n+        this.authId = authId;\n+        this.type = type;\n+    }\n+\n+    /**\n+     * Gets the tenant identifier.\n+     *\n+     * @return The identifier or {@code null} if not set.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Gets the authentication id of the credential.\n+     *\n+     * @return The authentication identifier or {@code null} if not set.\n+     */\n+    public String getAuthId() {\n+        return authId;\n+    }\n+\n+    /**\n+     * Gets the type of the credential.\n+     *\n+     * @return The type or {@code null} if not set.\n+     */\n+    public String getType() {\n+        return type;\n+    }\n+\n+    /**\n+     * Creates a credential key from tenant identifier, authentication identifier and type.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param authId The authentication identifier.\n+     * @param type The credential type.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     * @return The credential key.\n+     */\n+    public static CredentialKey from(final String tenantId, final String authId, final String type) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjIwNTgzOQ=="}, "originalCommit": {"oid": "9a8b80665dae06096ba7129fdcb70e4cc5aa2ede"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3263, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}