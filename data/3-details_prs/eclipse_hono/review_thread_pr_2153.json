{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5Mjg3MzAz", "number": 2153, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1MToyMVrOEgR8Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozMzowN1rOEgUGzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjgzODc4OnYy", "diffSide": "RIGHT", "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwNzo1MToyMVrOHNDa3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyODo0MFrOHNEnOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0OTU2NQ==", "bodyText": "FMPOV the cause (Throwable) should be logged here as intended by the OpenTracing spec, i.e. using Fields.ERROR_KIND and Fields.ERROR_OBJECT to be consistent with other cases where we use TracingHelper.log(Throwable). We might want to consider adding Fields.STACK to that method as well ...", "url": "https://github.com/eclipse/hono/pull/2153#discussion_r483449565", "createdAt": "2020-09-04T07:51:21Z", "author": {"login": "sophokles73"}, "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "diffHunk": "@@ -975,24 +974,34 @@ protected void setNonEmptyResponsePayload(final HttpServerResponse response, fin\n             }\n             return Future.succeededFuture();\n         }\n+        uploadMessageSpan.setTag(MessageHelper.APP_PROPERTY_DEVICE_TTD, ttdSecs);\n+\n+        final Span waitForCommandSpan = TracingHelper\n+                .buildChildSpan(tracer, uploadMessageSpan.context(),\n+                        \"wait for command\", getTypeName())\n+                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n+                .withTag(TracingHelper.TAG_TENANT_ID, tenantObject.getTenantId())\n+                .withTag(TracingHelper.TAG_DEVICE_ID, deviceId)\n+                .start();\n \n-        currentSpan.setTag(MessageHelper.APP_PROPERTY_DEVICE_TTD, ttdSecs);\n         final Handler<CommandContext> commandHandler = commandContext -> {\n \n             Tags.COMPONENT.set(commandContext.getTracingSpan(), getTypeName());\n             final Command command = commandContext.getCommand();\n             final Sample commandSample = getMetrics().startTimer();\n-            if (isCommandValid(command, currentSpan)) {\n+            if (isCommandValid(command, waitForCommandSpan)) {\n \n                 if (requestProcessed.compareAndSet(false, true)) {\n-                    checkMessageLimit(tenantObject, command.getPayloadSize(), currentSpan.context())\n+                    CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan);\n+                    checkMessageLimit(tenantObject, command.getPayloadSize(), waitForCommandSpan.context())\n                     .onComplete(result -> {\n                         if (result.succeeded()) {\n                             addMicrometerSample(commandContext, commandSample);\n                             // put command context to routing context and notify\n                             ctx.put(CommandContext.KEY_COMMAND_CONTEXT, commandContext);\n                         } else {\n                             commandContext.reject(getErrorCondition(result.cause()));\n+                            waitForCommandSpan.log(\"rejected command for device: \" + result.cause());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5c68a75cadf4ec47757e9940afb374d6d77dbfff"}, "originalPosition": 164}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2OTExMw==", "bodyText": "I think the stack is not important here. The log message is supposed to contain result.cause().toString().\nConcerning the \"ERROR_KIND\" and \"ERROR_OBJECT\" fields: These would of course be set if  Tracing.logError was used here. I didn't want to use this because I didn't want the HTTP PUT span to be marked as an error span in this case (that wasn't done so before).\nBut thinking again, I think this case should indeed be marked as an error span, reflecting the \"check message limit failed\" error. I have adapted the commit accordingly, also setting an error for the \"received invalid command message\" case.", "url": "https://github.com/eclipse/hono/pull/2153#discussion_r483469113", "createdAt": "2020-09-04T08:28:40Z", "author": {"login": "calohmn"}, "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "diffHunk": "@@ -975,24 +974,34 @@ protected void setNonEmptyResponsePayload(final HttpServerResponse response, fin\n             }\n             return Future.succeededFuture();\n         }\n+        uploadMessageSpan.setTag(MessageHelper.APP_PROPERTY_DEVICE_TTD, ttdSecs);\n+\n+        final Span waitForCommandSpan = TracingHelper\n+                .buildChildSpan(tracer, uploadMessageSpan.context(),\n+                        \"wait for command\", getTypeName())\n+                .withTag(Tags.SPAN_KIND.getKey(), Tags.SPAN_KIND_CLIENT)\n+                .withTag(TracingHelper.TAG_TENANT_ID, tenantObject.getTenantId())\n+                .withTag(TracingHelper.TAG_DEVICE_ID, deviceId)\n+                .start();\n \n-        currentSpan.setTag(MessageHelper.APP_PROPERTY_DEVICE_TTD, ttdSecs);\n         final Handler<CommandContext> commandHandler = commandContext -> {\n \n             Tags.COMPONENT.set(commandContext.getTracingSpan(), getTypeName());\n             final Command command = commandContext.getCommand();\n             final Sample commandSample = getMetrics().startTimer();\n-            if (isCommandValid(command, currentSpan)) {\n+            if (isCommandValid(command, waitForCommandSpan)) {\n \n                 if (requestProcessed.compareAndSet(false, true)) {\n-                    checkMessageLimit(tenantObject, command.getPayloadSize(), currentSpan.context())\n+                    CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan);\n+                    checkMessageLimit(tenantObject, command.getPayloadSize(), waitForCommandSpan.context())\n                     .onComplete(result -> {\n                         if (result.succeeded()) {\n                             addMicrometerSample(commandContext, commandSample);\n                             // put command context to routing context and notify\n                             ctx.put(CommandContext.KEY_COMMAND_CONTEXT, commandContext);\n                         } else {\n                             commandContext.reject(getErrorCondition(result.cause()));\n+                            waitForCommandSpan.log(\"rejected command for device: \" + result.cause());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ0OTU2NQ=="}, "originalCommit": {"oid": "5c68a75cadf4ec47757e9940afb374d6d77dbfff"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzE5MzA4OnYy", "diffSide": "RIGHT", "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozMzowN1rOHNGw0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxOToxOFrOHNLXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDMzNw==", "bodyText": "The command is invalid in this case, isn't it? Shouldn't this result in an error being logged to the span?", "url": "https://github.com/eclipse/hono/pull/2153#discussion_r483504337", "createdAt": "2020-09-04T09:33:07Z", "author": {"login": "sophokles73"}, "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "diffHunk": "@@ -1020,6 +1029,9 @@ protected void setNonEmptyResponsePayload(final HttpServerResponse response, fin\n                 }\n \n             } else {\n+                if (!requestProcessed.get()) {\n+                    CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f187a5b07ba4e9987b0129d2a51c96ff268b8b02"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNTMxNA==", "bodyText": "Yes, logReceivedCommandToSpan does  that.", "url": "https://github.com/eclipse/hono/pull/2153#discussion_r483505314", "createdAt": "2020-09-04T09:34:53Z", "author": {"login": "calohmn"}, "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "diffHunk": "@@ -1020,6 +1029,9 @@ protected void setNonEmptyResponsePayload(final HttpServerResponse response, fin\n                 }\n \n             } else {\n+                if (!requestProcessed.get()) {\n+                    CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDMzNw=="}, "originalCommit": {"oid": "f187a5b07ba4e9987b0129d2a51c96ff268b8b02"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwODIwMg==", "bodyText": "I see. Then FMPOV we should pull up the CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan) invocation before the if (isCommandValid(command, waitForCommandSpan)) statement and explicitly log the fact that the request has already been processed and the command is being released. WDYT?", "url": "https://github.com/eclipse/hono/pull/2153#discussion_r483508202", "createdAt": "2020-09-04T09:40:31Z", "author": {"login": "sophokles73"}, "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "diffHunk": "@@ -1020,6 +1029,9 @@ protected void setNonEmptyResponsePayload(final HttpServerResponse response, fin\n                 }\n \n             } else {\n+                if (!requestProcessed.get()) {\n+                    CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDMzNw=="}, "originalCommit": {"oid": "f187a5b07ba4e9987b0129d2a51c96ff268b8b02"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTgyOQ==", "bodyText": "I've amended the commit accordingly.", "url": "https://github.com/eclipse/hono/pull/2153#discussion_r483579829", "createdAt": "2020-09-04T12:19:18Z", "author": {"login": "calohmn"}, "path": "adapters/http-vertx-base/src/main/java/org/eclipse/hono/adapter/http/AbstractVertxBasedHttpProtocolAdapter.java", "diffHunk": "@@ -1020,6 +1029,9 @@ protected void setNonEmptyResponsePayload(final HttpServerResponse response, fin\n                 }\n \n             } else {\n+                if (!requestProcessed.get()) {\n+                    CommandConsumer.logReceivedCommandToSpan(command, waitForCommandSpan);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwNDMzNw=="}, "originalCommit": {"oid": "f187a5b07ba4e9987b0129d2a51c96ff268b8b02"}, "originalPosition": 173}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}