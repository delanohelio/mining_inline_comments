{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTIxMDUw", "number": 2157, "title": "Refactor base classes to allow other implementations (JDBC)", "bodyText": "", "createdAt": "2020-09-07T07:16:47Z", "url": "https://github.com/eclipse/hono/pull/2157", "merged": true, "mergeCommit": {"oid": "8ed64b19359603ef0d0f7bd8d768e729b3078552"}, "closed": true, "closedAt": "2020-09-11T07:19:30Z", "author": {"login": "ctron"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGzbTtAFqTQ4Mzg5OTU0MA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdHv5EvgFqTQ4NjUyMzQ5Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzODk5NTQw", "url": "https://github.com/eclipse/hono/pull/2157#pullrequestreview-483899540", "createdAt": "2020-09-08T08:16:54Z", "commit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoxNjo1NFrOHOR5lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwODoyNDo1OFrOHOSNyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNTM4Mw==", "bodyText": "how about simply adding these static methods to the existing CommonCredential class?", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484735383", "createdAt": "2020-09-08T08:16:54Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredentials.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Helper methods for {@link CommonCredential}.\n+ */\n+public final class CommonCredentials {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNzczNQ==", "bodyText": "maybe we should add non-null checks for the services as well?", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484737735", "createdAt": "2020-09-08T08:20:27Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/device/AutoProvisioning.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.device;\n+\n+import java.net.HttpURLConnection;\n+import java.security.cert.X509Certificate;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import javax.security.auth.x500.X500Principal;\n+\n+import org.eclipse.hono.service.management.OperationResult;\n+import org.eclipse.hono.service.management.credentials.CredentialsManagementService;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateSecret;\n+\n+import io.opentracing.Span;\n+import io.vertx.core.Future;\n+\n+/**\n+ * Helper to auto-provision devices.\n+ */\n+public final class AutoProvisioning {\n+\n+    private AutoProvisioning() {\n+    }\n+\n+    /**\n+     * Registers a device together with a set of credentials for the given client certificate.\n+     *\n+     * @param deviceManagementService The device management service to use.\n+     * @param credentialsManagementService The credentials service to use.\n+     * @param tenantId The tenant to which the device belongs.\n+     * @param clientCertificate The X.509 certificate of the device to be provisioned.\n+     * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n+     *            implementation should log (error) events on this span and it may set tags and use this span as the\n+     *            parent for any spans created in this method.\n+     * @return A (succeeded) future containing the result of the operation. The <em>status</em> will be\n+     *         <ul>\n+     *         <li><em>201 CREATED</em> if the device has successfully been provisioned.</li>\n+     *         <li><em>4XX</em> if the provisioning failed. The payload may contain an error description.</li>\n+     *         </ul>\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public static Future<OperationResult<String>> provisionDevice(\n+            final DeviceManagementService deviceManagementService,\n+            final CredentialsManagementService credentialsManagementService,\n+            final String tenantId,\n+            final X509Certificate clientCertificate,\n+            final Span span) {\n+\n+        Objects.requireNonNull(tenantId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc0MDU1NA==", "bodyText": "how about adding null checks?", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484740554", "createdAt": "2020-09-08T08:24:58Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/device/AbstractRegistrationService.java", "diffHunk": "@@ -103,11 +104,39 @@ public final void setTenantInformationService(final TenantInformationService ten\n      * @param span The active OpenTracing span for this operation. It is not to be closed in this method! An\n      *            implementation should log (error) events on this span and it may set tags and use this span as the\n      *            parent for any spans created in this method.\n-     * @return A future indicating the outcome of the operation. A failed future with \n+     * @return A future indicating the outcome of the operation. A failed future with\n      *           a {@link ServiceInvocationException} is returned, if there was an error resolving the groups.\n      * @throws NullPointerException if any of the parameters is {@code null}.\n      */\n-    protected abstract Future<JsonArray> resolveGroupMembers(String tenantId, JsonArray viaGroups, Span span);\n+    Future<JsonArray> resolveGroupMembers(final String tenantId, final JsonArray viaGroups, final Span span) {\n+\n+        final var viaGroupsAsString = viaGroups.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "originalPosition": 29}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/9a36ae16e34c4f3602c5a549fb49ad7545dc19d2", "committedDate": "2020-09-07T07:05:00Z", "message": "Refactor base classes to allow other implementations (JDBC)"}, "afterCommit": {"oid": "a911de948a7d00fb9f2620d185ebb38a93226698", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/a911de948a7d00fb9f2620d185ebb38a93226698", "committedDate": "2020-09-08T10:04:08Z", "message": "Refactor base classes to allow other implementations (JDBC)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTcyMTUy", "url": "https://github.com/eclipse/hono/pull/2157#pullrequestreview-483972152", "createdAt": "2020-09-08T09:47:36Z", "commit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0NzozNlrOHOVXUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTo0NzozNlrOHOVXUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc5MjE0NA==", "bodyText": "How about including @throws NullPointerException ... to the JavaDoc?", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484792144", "createdAt": "2020-09-08T09:47:36Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredentials.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Helper methods for {@link CommonCredential}.\n+ */\n+public final class CommonCredentials {\n+\n+    private CommonCredentials() {\n+    }\n+\n+    /**\n+     * Find a credentials object in a set of credentials.\n+     *\n+     * @param credentials The credentials to search.\n+     * @param type The type to search for.\n+     * @param authId The auth id to search for.\n+     * @return The search result.\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTg3OTY2", "url": "https://github.com/eclipse/hono/pull/2157#pullrequestreview-483987966", "createdAt": "2020-09-08T10:07:48Z", "commit": {"oid": "a911de948a7d00fb9f2620d185ebb38a93226698"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDowNzo0OFrOHOWFKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMDowODo0MVrOHOWHDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwMzg4Mg==", "bodyText": "Null check is missing for hashAlgorithmsWhitelist. hashAlgorithmsWhitelist is passed as an argumet to\nDeviceRegistryUtils.checkCredential(...) and it does not allow null value for this argument.", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484803882", "createdAt": "2020-09-08T10:07:48Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/credentials/AbstractCredentialsManagementService.java", "diffHunk": "@@ -41,23 +43,34 @@\n  */\n public abstract class AbstractCredentialsManagementService implements CredentialsManagementService {\n \n-    protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n-    private HonoPasswordEncoder passwordEncoder;\n+    protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n     private final Vertx vertx;\n+    private final HonoPasswordEncoder passwordEncoder;\n+    private final int maxBcryptIteration;\n+    private final Set<String> hashAlgorithmsWhitelist;\n \n     /**\n      * Creates a service for the given Vertx and password encoder instances.\n      *\n      * @param vertx The Vertx instance to use.\n      * @param passwordEncoder The password encoder.\n-     * @throws NullPointerException if any of the parameters is {@code null};\n+     * @param maxBcryptIteration The maximum number of allowed bcrypt iterations.\n+     * @param hashAlgorithmsWhitelist An optional collection of allowed password hashes.\n+     * @throws NullPointerException if any of the required parameters is {@code null};\n      */\n-    @Autowired\n-    public AbstractCredentialsManagementService(final Vertx vertx, final HonoPasswordEncoder passwordEncoder) {\n+    public AbstractCredentialsManagementService(\n+            final Vertx vertx,\n+            final HonoPasswordEncoder passwordEncoder,\n+            final int maxBcryptIteration,\n+            final Set<String> hashAlgorithmsWhitelist) {\n+\n         this.vertx = Objects.requireNonNull(vertx);\n         this.passwordEncoder = Objects.requireNonNull(passwordEncoder);\n+        this.maxBcryptIteration = maxBcryptIteration;\n+        this.hashAlgorithmsWhitelist = hashAlgorithmsWhitelist;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a911de948a7d00fb9f2620d185ebb38a93226698"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgwNDM2NA==", "bodyText": "How about naming this static variable in upper case?", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484804364", "createdAt": "2020-09-08T10:08:41Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/credentials/AbstractCredentialsService.java", "diffHunk": "@@ -32,8 +44,13 @@\n  */\n public abstract class AbstractCredentialsService implements CredentialsService {\n \n+    private static final Logger log = LoggerFactory.getLogger(AbstractCredentialsService.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a911de948a7d00fb9f2620d185ebb38a93226698"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7463b85c22986107a6a4107a7bfc58fceb91a172", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/7463b85c22986107a6a4107a7bfc58fceb91a172", "committedDate": "2020-09-08T10:41:58Z", "message": "Refactor base classes to allow other implementations (JDBC)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a911de948a7d00fb9f2620d185ebb38a93226698", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/a911de948a7d00fb9f2620d185ebb38a93226698", "committedDate": "2020-09-08T10:04:08Z", "message": "Refactor base classes to allow other implementations (JDBC)"}, "afterCommit": {"oid": "7463b85c22986107a6a4107a7bfc58fceb91a172", "author": {"user": {"login": "ctron", "name": "Jens Reimann"}}, "url": "https://github.com/eclipse/hono/commit/7463b85c22986107a6a4107a7bfc58fceb91a172", "committedDate": "2020-09-08T10:41:58Z", "message": "Refactor base classes to allow other implementations (JDBC)"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDIzMTY5", "url": "https://github.com/eclipse/hono/pull/2157#pullrequestreview-484023169", "createdAt": "2020-09-08T11:00:26Z", "commit": {"oid": "7463b85c22986107a6a4107a7bfc58fceb91a172"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowMDoyNlrOHOXw_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMTowMjowOVrOHOX0WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMTQ4NQ==", "bodyText": "FMPOV we should also make sure that the iterations are within the supported value range, in our case [4, 31].\nHaving read throught the bcrypt documentation again, it seems like the parameter should better be called maxBcryptLogRounds as the number of actual iterations is computed as 2^logRounds ...", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484831485", "createdAt": "2020-09-08T11:00:26Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/deviceregistry/service/credentials/AbstractCredentialsManagementService.java", "diffHunk": "@@ -43,21 +46,31 @@\n \n     protected TenantInformationService tenantInformationService = new NoopTenantInformationService();\n \n-    private HonoPasswordEncoder passwordEncoder;\n-\n     private final Vertx vertx;\n+    private final HonoPasswordEncoder passwordEncoder;\n+    private final int maxBcryptIteration;\n+    private final Set<String> hashAlgorithmsWhitelist;\n \n     /**\n      * Creates a service for the given Vertx and password encoder instances.\n      *\n      * @param vertx The Vertx instance to use.\n      * @param passwordEncoder The password encoder.\n-     * @throws NullPointerException if any of the parameters is {@code null};\n+     * @param maxBcryptIteration The maximum number of allowed bcrypt iterations.\n+     * @param hashAlgorithmsWhitelist An optional collection of allowed password hashes.\n+     * @throws NullPointerException if any of the required parameters is {@code null};\n      */\n-    @Autowired\n-    public AbstractCredentialsManagementService(final Vertx vertx, final HonoPasswordEncoder passwordEncoder) {\n+    public AbstractCredentialsManagementService(\n+            final Vertx vertx,\n+            final HonoPasswordEncoder passwordEncoder,\n+            final int maxBcryptIteration,\n+            final Set<String> hashAlgorithmsWhitelist) {\n+\n         this.vertx = Objects.requireNonNull(vertx);\n         this.passwordEncoder = Objects.requireNonNull(passwordEncoder);\n+        this.maxBcryptIteration = maxBcryptIteration;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7463b85c22986107a6a4107a7bfc58fceb91a172"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDgzMjM0NQ==", "bodyText": "I see", "url": "https://github.com/eclipse/hono/pull/2157#discussion_r484832345", "createdAt": "2020-09-08T11:02:09Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredentials.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*******************************************************************************\n+ * Copyright (c) 2019, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.service.management.credentials;\n+\n+import java.util.Collection;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+/**\n+ * Helper methods for {@link CommonCredential}.\n+ */\n+public final class CommonCredentials {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDczNTM4Mw=="}, "originalCommit": {"oid": "9a36ae16e34c4f3602c5a549fb49ad7545dc19d2"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjM2NTQ4", "url": "https://github.com/eclipse/hono/pull/2157#pullrequestreview-484236548", "createdAt": "2020-09-08T15:05:49Z", "commit": {"oid": "7463b85c22986107a6a4107a7bfc58fceb91a172"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NTIzNDk2", "url": "https://github.com/eclipse/hono/pull/2157#pullrequestreview-486523496", "createdAt": "2020-09-11T07:02:35Z", "commit": {"oid": "7463b85c22986107a6a4107a7bfc58fceb91a172"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 548, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}