{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyMzU0Mjcx", "number": 2027, "title": "[#1679] Update admin guide for the MongoDB based device registry", "bodyText": "", "createdAt": "2020-06-10T10:16:00Z", "url": "https://github.com/eclipse/hono/pull/2027", "merged": true, "mergeCommit": {"oid": "8a73ed7e32db61ba3ad9fa250ed345fe723e5670"}, "closed": true, "closedAt": "2020-06-18T07:21:52Z", "author": {"login": "kaniyan"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcp6mgmABqjM0Mjk5NTU5NzU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsZNbxgFqTQzMzAwNDk2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "548d4fe4571b350c0b0956da2f6fed72a08a3edc", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/548d4fe4571b350c0b0956da2f6fed72a08a3edc", "committedDate": "2020-06-10T10:12:13Z", "message": "[#1679] Update admin guide for MongoDB based device registry\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "4db3fc8f6eb802259cd232a4c36835b66666e3fb", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/4db3fc8f6eb802259cd232a4c36835b66666e3fb", "committedDate": "2020-06-10T14:32:35Z", "message": "[#1679] Update admin guide for MongoDB based device registry\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4db3fc8f6eb802259cd232a4c36835b66666e3fb", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/4db3fc8f6eb802259cd232a4c36835b66666e3fb", "committedDate": "2020-06-10T14:32:35Z", "message": "[#1679] Update admin guide for MongoDB based device registry\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "32a891adee75be1425089bf285d7c65329530b98", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/32a891adee75be1425089bf285d7c65329530b98", "committedDate": "2020-06-15T16:17:33Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "32a891adee75be1425089bf285d7c65329530b98", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/32a891adee75be1425089bf285d7c65329530b98", "committedDate": "2020-06-15T16:17:33Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "b96f3adb2c0e8591970a9e4b11a9754497f8fffa", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/b96f3adb2c0e8591970a9e4b11a9754497f8fffa", "committedDate": "2020-06-15T16:59:07Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b96f3adb2c0e8591970a9e4b11a9754497f8fffa", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/b96f3adb2c0e8591970a9e4b11a9754497f8fffa", "committedDate": "2020-06-15T16:59:07Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/ab9aede7ea45c36c8388b3e025b9b1147f575c03", "committedDate": "2020-06-16T07:53:14Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDQ0NTY4", "url": "https://github.com/eclipse/hono/pull/2027#pullrequestreview-431444568", "createdAt": "2020-06-16T12:20:12Z", "commit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjoyMDoxMlrOGkYqgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjoyNzowMFrOGkY4qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNjAxOA==", "bodyText": "this is not a supported property, is it?", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r440806018", "createdAt": "2020-06-16T12:20:12Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mongodb-device-registry-config.md", "diffHunk": "@@ -0,0 +1,90 @@\n++++\n+title = \"MongoDB Based Device Registry Configuration\"\n+weight = 316\n++++\n+\n+The MongoDB based Device Registry component provides an implementation of Eclipse Hono&trade;'s [Device Registration]({{< relref \"/api/device-registration\" >}}),\n+[Credentials]({{< relref \"/api/credentials\" >}}) and [Tenant]({{< relref \"/api/tenant\" >}}) APIs. Protocol adapters use these APIs to determine a device's registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it. In addition to the above, this Device Registry also provides an implementation of [Device Registry Management APIs]({{< relref \"/api/management\" >}}) for managing tenants, registration information and credentials of devices.\n+\n+The Device Registry is implemented as a Spring Boot application, and the data is persisted in a MongoDB database. It can be run either directly from the command line or by means of starting the corresponding [Docker image](https://hub.docker.com/r/eclipse/hono-service-device-registry-mongodb/) created from it.\n+\n+## Service Configuration\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the MongoDB based Device Registry. In addition to the following options, this component also supports the options described in [Common Configuration]({{< relref \"common-config.md\" >}}).\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_CREDENTIALS_SVC_CACHE_MAX_AGE`<br>`--hono.credentials.svc.cacheMaxAge` | no | `180` | The maximum period of time (seconds) that information returned by the service's operations may be cached for. |\n+| `HONO_CREDENTIALS_SVC_COLLECTION_NAME`<br>`--hono.credentials.svc.collectionName` | no | `credentials` | The name of the MongoDB collection where the server stores credentials of devices.|\n+| `HONO_CREDENTIALS_SVC_HASH_ALGORITHMS_WHITELIST`<br>`--hono.credentials.svc.hashAlgorithmsWhitelist` | no | `empty` | An array of supported hashing algorithms to be used with the `hashed-password` type of credentials. When not set, all values will be accepted. |\n+| `HONO_CREDENTIALS_SVC_MAX_BCRYPT_ITERATIONS`<br>`--hono.credentials.svc.maxBcryptIterations` | no | `10` | The maximum number of iterations that are supported in password hashes using the BCrypt hash function. This limit is enforced by the device registry when adding or updating corresponding credentials. Increasing this number allows for potentially more secure password hashes to be used. However, the time required to compute the hash increases exponentially with the number of iterations. |\n+| `HONO_CREDENTIALS_SVC_MODIFICATION_ENABLED`<br>`--hono.credentials.svc.modificationEnabled` | no | `true` | When set to `false` the credentials contained in the registry cannot be updated nor removed. |\n+| `HONO_CREDENTIALS_SVC_RECEIVER_LINK_CREDIT`<br>`--hono.credentials.svc.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the Credentials endpoint. |\n+| `HONO_DEVICE_CONNECTION_SVC_MAX_DEVICES_PER_TENANT`<br>`--hono.deviceConnection.svc.maxDevicesPerTenant` | no | `100` | The number of devices per tenant for which connection related data is stored. It is an error to set this property to a value <= 0. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNjg1OQ==", "bodyText": "What implication does the default value have? Does this mean that an operation will not fail before 300s have passed? If so, I do not think that this is a reasonable default value.", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r440806859", "createdAt": "2020-06-16T12:21:52Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mongodb-device-registry-config.md", "diffHunk": "@@ -0,0 +1,90 @@\n++++\n+title = \"MongoDB Based Device Registry Configuration\"\n+weight = 316\n++++\n+\n+The MongoDB based Device Registry component provides an implementation of Eclipse Hono&trade;'s [Device Registration]({{< relref \"/api/device-registration\" >}}),\n+[Credentials]({{< relref \"/api/credentials\" >}}) and [Tenant]({{< relref \"/api/tenant\" >}}) APIs. Protocol adapters use these APIs to determine a device's registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it. In addition to the above, this Device Registry also provides an implementation of [Device Registry Management APIs]({{< relref \"/api/management\" >}}) for managing tenants, registration information and credentials of devices.\n+\n+The Device Registry is implemented as a Spring Boot application, and the data is persisted in a MongoDB database. It can be run either directly from the command line or by means of starting the corresponding [Docker image](https://hub.docker.com/r/eclipse/hono-service-device-registry-mongodb/) created from it.\n+\n+## Service Configuration\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the MongoDB based Device Registry. In addition to the following options, this component also supports the options described in [Common Configuration]({{< relref \"common-config.md\" >}}).\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_CREDENTIALS_SVC_CACHE_MAX_AGE`<br>`--hono.credentials.svc.cacheMaxAge` | no | `180` | The maximum period of time (seconds) that information returned by the service's operations may be cached for. |\n+| `HONO_CREDENTIALS_SVC_COLLECTION_NAME`<br>`--hono.credentials.svc.collectionName` | no | `credentials` | The name of the MongoDB collection where the server stores credentials of devices.|\n+| `HONO_CREDENTIALS_SVC_HASH_ALGORITHMS_WHITELIST`<br>`--hono.credentials.svc.hashAlgorithmsWhitelist` | no | `empty` | An array of supported hashing algorithms to be used with the `hashed-password` type of credentials. When not set, all values will be accepted. |\n+| `HONO_CREDENTIALS_SVC_MAX_BCRYPT_ITERATIONS`<br>`--hono.credentials.svc.maxBcryptIterations` | no | `10` | The maximum number of iterations that are supported in password hashes using the BCrypt hash function. This limit is enforced by the device registry when adding or updating corresponding credentials. Increasing this number allows for potentially more secure password hashes to be used. However, the time required to compute the hash increases exponentially with the number of iterations. |\n+| `HONO_CREDENTIALS_SVC_MODIFICATION_ENABLED`<br>`--hono.credentials.svc.modificationEnabled` | no | `true` | When set to `false` the credentials contained in the registry cannot be updated nor removed. |\n+| `HONO_CREDENTIALS_SVC_RECEIVER_LINK_CREDIT`<br>`--hono.credentials.svc.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the Credentials endpoint. |\n+| `HONO_DEVICE_CONNECTION_SVC_MAX_DEVICES_PER_TENANT`<br>`--hono.deviceConnection.svc.maxDevicesPerTenant` | no | `100` | The number of devices per tenant for which connection related data is stored. It is an error to set this property to a value <= 0. |\n+| `HONO_MONGODB_CONNECTION_STRING`<br>`--hono.mongodb.connectionString` | no | - | The connection string used by the Device Registry application to connect to the MongoDB database. If `HONO_MONGODB_CONNECTION_STRING` is set, it overrides the other MongoDB connection settings.<br> See [Connection String URI Format](https://docs.mongodb.com/manual/reference/connection-string/) for more information.|\n+| `HONO_MONGODB_CONNECTION_TIMEOUT_IN_MS`<br>`--hono.mongodb.connectionTimeoutInMs` | no | `10000` | The time in milliseconds to attempt a connection before timing out.|\n+| `HONO_MONGODB_DB_NAME`<br>`--hono.mongodb.dbName` | no | - | The name of the MongoDB database that should be used by the Device Registry application. |\n+| `HONO_MONGODB_HOST`<br>`--hono.mongodb.host` | no | `localhost` | The host name or IP address of the MongoDB instance.|\n+| `HONO_MONGODB_PORT`<br>`--hono.mongodb.port` | no | `27017` | The port that the MongoDB instance is listening on.|\n+| `HONO_MONGODB_PASSWORD`<br>`--hono.mongodb.password` | no | - | The password to use for authenticating to the MongoDB instance.|\n+| `HONO_MONGODB_SERVER_SELECTION_TIMEOUT_IN_MS`<br>`--hono.mongodb.serverSelectionTimeoutInMs` | no | `300000` | The time in milliseconds that the mongo driver will wait to select a server for an operation before raising an error.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwODQxMQ==", "bodyText": "Are we using any of these parameters? IMHO we are not including any signed token in the get registration assertion response, do we?", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r440808411", "createdAt": "2020-06-16T12:24:49Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mongodb-device-registry-config.md", "diffHunk": "@@ -0,0 +1,90 @@\n++++\n+title = \"MongoDB Based Device Registry Configuration\"\n+weight = 316\n++++\n+\n+The MongoDB based Device Registry component provides an implementation of Eclipse Hono&trade;'s [Device Registration]({{< relref \"/api/device-registration\" >}}),\n+[Credentials]({{< relref \"/api/credentials\" >}}) and [Tenant]({{< relref \"/api/tenant\" >}}) APIs. Protocol adapters use these APIs to determine a device's registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it. In addition to the above, this Device Registry also provides an implementation of [Device Registry Management APIs]({{< relref \"/api/management\" >}}) for managing tenants, registration information and credentials of devices.\n+\n+The Device Registry is implemented as a Spring Boot application, and the data is persisted in a MongoDB database. It can be run either directly from the command line or by means of starting the corresponding [Docker image](https://hub.docker.com/r/eclipse/hono-service-device-registry-mongodb/) created from it.\n+\n+## Service Configuration\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the MongoDB based Device Registry. In addition to the following options, this component also supports the options described in [Common Configuration]({{< relref \"common-config.md\" >}}).\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_CREDENTIALS_SVC_CACHE_MAX_AGE`<br>`--hono.credentials.svc.cacheMaxAge` | no | `180` | The maximum period of time (seconds) that information returned by the service's operations may be cached for. |\n+| `HONO_CREDENTIALS_SVC_COLLECTION_NAME`<br>`--hono.credentials.svc.collectionName` | no | `credentials` | The name of the MongoDB collection where the server stores credentials of devices.|\n+| `HONO_CREDENTIALS_SVC_HASH_ALGORITHMS_WHITELIST`<br>`--hono.credentials.svc.hashAlgorithmsWhitelist` | no | `empty` | An array of supported hashing algorithms to be used with the `hashed-password` type of credentials. When not set, all values will be accepted. |\n+| `HONO_CREDENTIALS_SVC_MAX_BCRYPT_ITERATIONS`<br>`--hono.credentials.svc.maxBcryptIterations` | no | `10` | The maximum number of iterations that are supported in password hashes using the BCrypt hash function. This limit is enforced by the device registry when adding or updating corresponding credentials. Increasing this number allows for potentially more secure password hashes to be used. However, the time required to compute the hash increases exponentially with the number of iterations. |\n+| `HONO_CREDENTIALS_SVC_MODIFICATION_ENABLED`<br>`--hono.credentials.svc.modificationEnabled` | no | `true` | When set to `false` the credentials contained in the registry cannot be updated nor removed. |\n+| `HONO_CREDENTIALS_SVC_RECEIVER_LINK_CREDIT`<br>`--hono.credentials.svc.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the Credentials endpoint. |\n+| `HONO_DEVICE_CONNECTION_SVC_MAX_DEVICES_PER_TENANT`<br>`--hono.deviceConnection.svc.maxDevicesPerTenant` | no | `100` | The number of devices per tenant for which connection related data is stored. It is an error to set this property to a value <= 0. |\n+| `HONO_MONGODB_CONNECTION_STRING`<br>`--hono.mongodb.connectionString` | no | - | The connection string used by the Device Registry application to connect to the MongoDB database. If `HONO_MONGODB_CONNECTION_STRING` is set, it overrides the other MongoDB connection settings.<br> See [Connection String URI Format](https://docs.mongodb.com/manual/reference/connection-string/) for more information.|\n+| `HONO_MONGODB_CONNECTION_TIMEOUT_IN_MS`<br>`--hono.mongodb.connectionTimeoutInMs` | no | `10000` | The time in milliseconds to attempt a connection before timing out.|\n+| `HONO_MONGODB_DB_NAME`<br>`--hono.mongodb.dbName` | no | - | The name of the MongoDB database that should be used by the Device Registry application. |\n+| `HONO_MONGODB_HOST`<br>`--hono.mongodb.host` | no | `localhost` | The host name or IP address of the MongoDB instance.|\n+| `HONO_MONGODB_PORT`<br>`--hono.mongodb.port` | no | `27017` | The port that the MongoDB instance is listening on.|\n+| `HONO_MONGODB_PASSWORD`<br>`--hono.mongodb.password` | no | - | The password to use for authenticating to the MongoDB instance.|\n+| `HONO_MONGODB_SERVER_SELECTION_TIMEOUT_IN_MS`<br>`--hono.mongodb.serverSelectionTimeoutInMs` | no | `300000` | The time in milliseconds that the mongo driver will wait to select a server for an operation before raising an error.|\n+| `HONO_MONGODB_USERNAME`<br>`--hono.mongodb.username` | no | - | The user name to use for authenticating to the MongoDB instance.|\n+| `HONO_REGISTRY_AMQP_BIND_ADDRESS`<br>`--hono.registry.amqp.bindAddress` | no | `127.0.0.1` | The IP address of the network interface that the secure AMQP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_AMQP_CERT_PATH`<br>`--hono.registry.amqp.certPath` | no | - | The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_REGISTRY_AMQP_KEY_PATH`.<br>Alternatively, the `HONO_REGISTRY_AMQP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_REGISTRY_AMQP_INSECURE_PORT`<br>`--hono.registry.amqp.insecurePort` | no | - | The insecure port the server should listen on for AMQP 1.0 connections.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_AMQP_INSECURE_PORT_BIND_ADDRESS`<br>`--hono.registry.amqp.insecurePortBindAddress` | no | `127.0.0.1` | The IP address of the network interface that the insecure AMQP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_AMQP_INSECURE_PORT_ENABLED`<br>`--hono.registry.amqp.insecurePortEnabled` | no | `false` | If set to `true` the server will open an insecure port (not secured by TLS) using either the port number set via `HONO_REGISTRY_AMQP_INSECURE_PORT` or the default AMQP port number (`5672`) if not set explicitly.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_AMQP_KEY_PATH`<br>`--hono.registry.amqp.keyPath` | no | - | The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_REGISTRY_AMQP_CERT_PATH`. Alternatively, the `HONO_REGISTRY_AMQP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_REGISTRY_AMQP_KEY_STORE_PASSWORD`<br>`--hono.registry.amqp.keyStorePassword` | no | - | The password required to read the contents of the key store. |\n+| `HONO_REGISTRY_AMQP_KEY_STORE_PATH`<br>`--hono.registry.amqp.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the `HONO_REGISTRY_AMQP_KEY_PATH` and `HONO_REGISTRY_AMQP_CERT_PATH` options need to be set in order to enable TLS secured connections with clients. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n+| `HONO_REGISTRY_AMQP_NATIVE_TLS_REQUIRED`<br>`--hono.registry.amqp.nativeTlsRequired` | no | `false` | The server will probe for OpenSLL on startup if a secure port is configured. By default, the server will fall back to the JVM's default SSL engine if not available. However, if set to `true`, the server will fail to start at all in this case. |\n+| `HONO_REGISTRY_AMQP_PORT`<br>`--hono.registry.amqp.port` | no | `5671` | The secure port that the server should listen on for AMQP 1.0 connections.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_AMQP_SECURE_PROTOCOLS`<br>`--hono.registry.amqp.secureProtocols` | no | `TLSv1.2` | A (comma separated) list of secure protocols that are supported when negotiating TLS sessions. Please refer to the [vert.x documentation](https://vertx.io/docs/vertx-core/java/#ssl) for a list of supported protocol names. |\n+| `HONO_REGISTRY_HTTP_AUTHENTICATION_REQUIRED`<br>`--hono.registry.http.authenticationRequired` | no | `true` | If set to `true` the HTTP endpoint of the Device Registry requires clients to authenticate when connecting to the Device Registry. The MongoDB based Device Registry currently supports basic authentication and the user credentials are to be stored in a MongoDB collection with name `user`. <br>For more information on how to manage users please refer to [Mongo Auth Provider](https://vertx.io/docs/vertx-auth-mongo/java/).|\n+| `HONO_REGISTRY_HTTP_BIND_ADDRESS`<br>`--hono.registry.http.bindAddress` | no | `127.0.0.1` | The IP address of the network interface that the secure HTTP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_HTTP_CERT_PATH`<br>`--hono.registry.http.certPath` | no | - | The absolute path to the PEM file containing the certificate that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_REGISTRY_HTTP_KEY_PATH`.<br>Alternatively, the `HONO_REGISTRY_HTTP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_REGISTRY_HTTP_DEVICE_ID_REGEX`<br>`--hono.registry.http.deviceIdRegex` | no | `^[a-zA-Z0-9-_]+$` | The regular expression to use to validate device ID. Please refer to the [java pattern documentation](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html). |\n+| `HONO_REGISTRY_HTTP_INSECURE_PORT`<br>`--hono.registry.http.insecurePort` | no | - | The insecure port the server should listen on for HTTP requests.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_HTTP_INSECURE_PORT_BIND_ADDRESS`<br>`--hono.registry.http.insecurePortBindAddress` | no | `127.0.0.1` | The IP address of the network interface that the insecure HTTP port should be bound to.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_HTTP_INSECURE_PORT_ENABLED`<br>`--hono.registry.http.insecurePortEnabled` | no | `false` | If set to `true` the server will open an insecure port (not secured by TLS) using either the port number set via `HONO_REGISTRY_HTTP_INSECURE_PORT` or the default AMQP port number (`5672`) if not set explicitly.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_HTTP_KEY_PATH`<br>`--hono.registry.http.keyPath` | no | - | The absolute path to the (PKCS8) PEM file containing the private key that the server should use for authenticating to clients. This option must be used in conjunction with `HONO_REGISTRY_HTTP_CERT_PATH`. Alternatively, the `HONO_REGISTRY_HTTP_KEY_STORE_PATH` option can be used to configure a key store containing both the key as well as the certificate. |\n+| `HONO_REGISTRY_HTTP_KEY_STORE_PASSWORD`<br>`--hono.registry.http.keyStorePassword` | no | - | The password required to read the contents of the key store. |\n+| `HONO_REGISTRY_HTTP_KEY_STORE_PATH`<br>`--hono.registry.http.keyStorePath` | no | - | The absolute path to the Java key store containing the private key and certificate that the server should use for authenticating to clients. Either this option or the `HONO_REGISTRY_HTTP_KEY_PATH` and `HONO_REGISTRY_HTTP_CERT_PATH` options need to be set in order to enable TLS secured connections with clients. The key store format can be either `JKS` or `PKCS12` indicated by a `.jks` or `.p12` file suffix respectively. |\n+| `HONO_REGISTRY_HTTP_PORT`<br>`--hono.registry.http.port` | no | `5671` | The secure port that the server should listen on for HTTP requests.<br>See [Port Configuration]({{< relref \"#port-configuration\" >}}) below for details. |\n+| `HONO_REGISTRY_HTTP_TENANT_ID_REGEX`<br>`--hono.registry.http.tenantIdRegex` | no | `^[a-zA-Z0-9-_.]+$` | The regular expression to use to validate tenant ID. Please refer to the [java pattern documentation](https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html). |\n+| `HONO_REGISTRY_SVC_CACHE_MAX_AGE`<br>`--hono.registry.svc.cacheMaxAge` | no | `180` | The maximum period of time (seconds) that information returned by the service's operations may be cached for. |\n+| `HONO_REGISTRY_SVC_COLLECTION_NAME`<br>`--hono.registry.svc.collectionName` | no | `devices` | The name of the MongoDB collection where the server stores registered device information.|\n+| `HONO_REGISTRY_SVC_MAX_DEVICES_PER_TENANT`<br>`--hono.registry.svc.maxDevicesPerTenant` | no | `100` | The number of devices that can be registered for each tenant. It is an error to set this property to a value <= 0. |\n+| `HONO_REGISTRY_SVC_MODIFICATION_ENABLED`<br>`--hono.registry.svc.modificationEnabled` | no | `true` | When set to `false` the device information contained in the registry cannot be updated nor removed from the registry. |\n+| `HONO_REGISTRY_SVC_RECEIVER_LINK_CREDIT`<br>`--hono.registry.svc.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the Device Registration endpoint. |\n+| `HONO_REGISTRY_SVC_SIGNING_KEY_PATH`<br>`--hono.registry.svc.signing.keyPath` | no  | - | The absolute path to the (PKCS8) PEM file containing the private key that the server should use for signing tokens asserting a device's registration status. When using this variable, other services that need to validate the tokens issued by this service need to be configured with the corresponding certificate/public key. Alternatively, a symmetric key can be used for signing (and validating) by setting the `HONO_REGISTRY_SVC_SIGNING_SHARED_SECRET` variable. If none of these variables is set, the server falls back to the key indicated by the `HONO_REGISTRY_AMP_KEY_PATH` variable. If that variable is also not set, startup of the server fails. |\n+| `HONO_REGISTRY_SVC_SIGNING_SHARED_SECRET`<br>`--hono.registry.svc.signing.sharedSecret` | no  | - | A string to derive a symmetric key from that is used for signing tokens asserting a device's registration status. The key is derived from the string by using the bytes of the String's UTF8 encoding. When setting the signing key using this variable, other services that need to validate the tokens issued by this service need to be configured with the same key. Alternatively, an asymmetric key pair can be used for signing (and validating) by setting the `HONO_REGISTRY_SVC_SIGNING_KEY_PATH` variable. If none of these variables is set, startup of the server fails. |\n+| `HONO_REGISTRY_SVC_SIGNING_TOKEN_EXPIRATION`<br>`--hono.registry.svc.signing.tokenExpiration` | no | `10` | The expiration period to use for the tokens asserting the registration status of devices. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwOTY0MA==", "bodyText": "please provide a separate section for both the file based and the MongoDB based registry", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r440809640", "createdAt": "2020-06-16T12:27:00Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/secure_communication.md", "diffHunk": "@@ -49,7 +49,7 @@ The `demo-certs/certs` folder includes the following demo keys and certificates\n ### Device Registry\n \n The Device Registry supports the use of TLS for connections to protocol adapters and the Auth Server.\n-Please refer to the [Device Registry admin guide]({{< relref \"device-registry-config.md\" >}}) for details regarding the required configuration steps.\n+Please refer to the [Device Registry admin guide]({{< relref \"file-based-device-registry-config.md\" >}}) for details regarding the required configuration steps.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77a8fa62462ff60c5c7c997b23072623294b1c1e", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/77a8fa62462ff60c5c7c997b23072623294b1c1e", "committedDate": "2020-06-16T14:06:36Z", "message": "[#1679] Update admin guide for MongoDB based device registry\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aad5b621c70fee151634c1ef598e7cf9a029e631", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/aad5b621c70fee151634c1ef598e7cf9a029e631", "committedDate": "2020-06-16T14:06:36Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "685c3d22a18f7402b5f9b5d70d4bad016d018a7e", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/685c3d22a18f7402b5f9b5d70d4bad016d018a7e", "committedDate": "2020-06-16T14:41:17Z", "message": "Fix server selection timeout default value in JavaDoc\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/ab9aede7ea45c36c8388b3e025b9b1147f575c03", "committedDate": "2020-06-16T07:53:14Z", "message": "[#1679] Rename default device registry configuration to file based device registry configuration\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "07f260ecd0c02e9cc89d0ef312e77d0d8eed9f4a", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/07f260ecd0c02e9cc89d0ef312e77d0d8eed9f4a", "committedDate": "2020-06-16T15:00:00Z", "message": "[#1679] Changes based on feedback\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e999fcb9a9a803dd2664f9caf55e8b96ab606148", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/e999fcb9a9a803dd2664f9caf55e8b96ab606148", "committedDate": "2020-06-16T15:08:53Z", "message": "[#1679] Changes based on feedback\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07f260ecd0c02e9cc89d0ef312e77d0d8eed9f4a", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/07f260ecd0c02e9cc89d0ef312e77d0d8eed9f4a", "committedDate": "2020-06-16T15:00:00Z", "message": "[#1679] Changes based on feedback\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}, "afterCommit": {"oid": "e999fcb9a9a803dd2664f9caf55e8b96ab606148", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/e999fcb9a9a803dd2664f9caf55e8b96ab606148", "committedDate": "2020-06-16T15:08:53Z", "message": "[#1679] Changes based on feedback\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDk2ODU1", "url": "https://github.com/eclipse/hono/pull/2027#pullrequestreview-432096855", "createdAt": "2020-06-17T06:35:13Z", "commit": {"oid": "e999fcb9a9a803dd2664f9caf55e8b96ab606148"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjozNToxM1rOGk3hoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjozNzoxNVrOGk3kxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMTY0OA==", "bodyText": "Do you think that 30 seconds is a reasonable default value? The client's timeout is usually somewhere around 200 - 1000ms so I do not think that it makes a lot of sense to wait for 30 seconds in this case or am I mistaken?", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r441311648", "createdAt": "2020-06-17T06:35:13Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mongodb-device-registry-config.md", "diffHunk": "@@ -27,7 +27,7 @@ The following table provides an overview of the configuration variables and corr\n | `HONO_MONGODB_HOST`<br>`--hono.mongodb.host` | no | `localhost` | The host name or IP address of the MongoDB instance.|\n | `HONO_MONGODB_PORT`<br>`--hono.mongodb.port` | no | `27017` | The port that the MongoDB instance is listening on.|\n | `HONO_MONGODB_PASSWORD`<br>`--hono.mongodb.password` | no | - | The password to use for authenticating to the MongoDB instance.|\n-| `HONO_MONGODB_SERVER_SELECTION_TIMEOUT_IN_MS`<br>`--hono.mongodb.serverSelectionTimeoutInMs` | no | `300000` | The time in milliseconds that the mongo driver will wait to select a server for an operation before raising an error.|\n+| `HONO_MONGODB_SERVER_SELECTION_TIMEOUT_IN_MS`<br>`--hono.mongodb.serverSelectionTimeoutInMs` | no | `30000` | The time in milliseconds that the mongo driver will wait to select a server for an operation before raising an error.|", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e999fcb9a9a803dd2664f9caf55e8b96ab606148"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMjQ1NQ==", "bodyText": "What is this property used for in the MongoDB based implementation? My understanding is that it doesn't implement the Device Connection API, does it?", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r441312455", "createdAt": "2020-06-17T06:37:15Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/admin-guide/mongodb-device-registry-config.md", "diffHunk": "@@ -0,0 +1,90 @@\n++++\n+title = \"MongoDB Based Device Registry Configuration\"\n+weight = 316\n++++\n+\n+The MongoDB based Device Registry component provides an implementation of Eclipse Hono&trade;'s [Device Registration]({{< relref \"/api/device-registration\" >}}),\n+[Credentials]({{< relref \"/api/credentials\" >}}) and [Tenant]({{< relref \"/api/tenant\" >}}) APIs. Protocol adapters use these APIs to determine a device's registration status, e.g. if it is enabled and if it is registered with a particular tenant, and to authenticate a device before accepting any data for processing from it. In addition to the above, this Device Registry also provides an implementation of [Device Registry Management APIs]({{< relref \"/api/management\" >}}) for managing tenants, registration information and credentials of devices.\n+\n+The Device Registry is implemented as a Spring Boot application, and the data is persisted in a MongoDB database. It can be run either directly from the command line or by means of starting the corresponding [Docker image](https://hub.docker.com/r/eclipse/hono-service-device-registry-mongodb/) created from it.\n+\n+## Service Configuration\n+\n+The following table provides an overview of the configuration variables and corresponding command line options for configuring the MongoDB based Device Registry. In addition to the following options, this component also supports the options described in [Common Configuration]({{< relref \"common-config.md\" >}}).\n+\n+| Environment Variable<br>Command Line Option | Mandatory | Default | Description                                                             |\n+| :------------------------------------------ | :-------: | :------ | :-----------------------------------------------------------------------|\n+| `HONO_CREDENTIALS_SVC_CACHE_MAX_AGE`<br>`--hono.credentials.svc.cacheMaxAge` | no | `180` | The maximum period of time (seconds) that information returned by the service's operations may be cached for. |\n+| `HONO_CREDENTIALS_SVC_COLLECTION_NAME`<br>`--hono.credentials.svc.collectionName` | no | `credentials` | The name of the MongoDB collection where the server stores credentials of devices.|\n+| `HONO_CREDENTIALS_SVC_HASH_ALGORITHMS_WHITELIST`<br>`--hono.credentials.svc.hashAlgorithmsWhitelist` | no | `empty` | An array of supported hashing algorithms to be used with the `hashed-password` type of credentials. When not set, all values will be accepted. |\n+| `HONO_CREDENTIALS_SVC_MAX_BCRYPT_ITERATIONS`<br>`--hono.credentials.svc.maxBcryptIterations` | no | `10` | The maximum number of iterations that are supported in password hashes using the BCrypt hash function. This limit is enforced by the device registry when adding or updating corresponding credentials. Increasing this number allows for potentially more secure password hashes to be used. However, the time required to compute the hash increases exponentially with the number of iterations. |\n+| `HONO_CREDENTIALS_SVC_MODIFICATION_ENABLED`<br>`--hono.credentials.svc.modificationEnabled` | no | `true` | When set to `false` the credentials contained in the registry cannot be updated nor removed. |\n+| `HONO_CREDENTIALS_SVC_RECEIVER_LINK_CREDIT`<br>`--hono.credentials.svc.receiverLinkCredit` | no | `100` | The number of credits to flow to a client connecting to the Credentials endpoint. |\n+| `HONO_DEVICE_CONNECTION_SVC_MAX_DEVICES_PER_TENANT`<br>`--hono.deviceConnection.svc.maxDevicesPerTenant` | no | `100` | The number of devices per tenant for which connection related data is stored. It is an error to set this property to a value <= 0. |", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNjAxOA=="}, "originalCommit": {"oid": "ab9aede7ea45c36c8388b3e025b9b1147f575c03"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1c9e65cd11cc6882b8a2e1dfbdc673986577cdf", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/a1c9e65cd11cc6882b8a2e1dfbdc673986577cdf", "committedDate": "2020-06-17T09:13:39Z", "message": "Set default value of MongoDB server selection timeout to 1000 ms\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b5bc15e10d3baeafc4cdc07b8df0a6d8e92358f", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/5b5bc15e10d3baeafc4cdc07b8df0a6d8e92358f", "committedDate": "2020-06-17T09:13:59Z", "message": "Changes based on second round of feedback\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMzQzNDM5", "url": "https://github.com/eclipse/hono/pull/2027#pullrequestreview-432343439", "createdAt": "2020-06-17T12:21:15Z", "commit": {"oid": "5b5bc15e10d3baeafc4cdc07b8df0a6d8e92358f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyMToxNVrOGlDKJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMjoyMToxNVrOGlDKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTUwMjI0NQ==", "bodyText": "you can use the {@value } tag in order to refer to a constant's value. That way you do not need to explicitly spell it out ...", "url": "https://github.com/eclipse/hono/pull/2027#discussion_r441502245", "createdAt": "2020-06-17T12:21:15Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbConfigProperties.java", "diffHunk": "@@ -182,7 +183,7 @@ public MongoDbConfigProperties setConnectionString(final String connectionString\n      * Gets the time in milliseconds that the mongo driver will wait to select a\n      * server for an operation before raising an error.\n      * <p>\n-     * When this property is not set, the Vert.x mongodb client uses a default value of 30000 ms.\n+     * When this property is not set, the Vert.x mongodb client uses a default value of 1000 ms.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5bc15e10d3baeafc4cdc07b8df0a6d8e92358f"}, "originalPosition": 22}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0e5f946288d3a54a9060409fcb9c8eb3908fc0f", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/f0e5f946288d3a54a9060409fcb9c8eb3908fc0f", "committedDate": "2020-06-17T12:33:42Z", "message": "Fix JavaDoc using @value to specify the default server selection timeout\n\nSigned-off-by: Kartheeswaran Kalidass <kartheeswaran.kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDA0OTYw", "url": "https://github.com/eclipse/hono/pull/2027#pullrequestreview-433004960", "createdAt": "2020-06-18T07:21:03Z", "commit": {"oid": "f0e5f946288d3a54a9060409fcb9c8eb3908fc0f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 665, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}