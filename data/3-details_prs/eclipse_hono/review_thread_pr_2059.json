{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxNTQ0ODUx", "number": 2059, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo1MDo0MVrOEKZw1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMToyM1rOELPlgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQzMzE4OnYy", "diffSide": "RIGHT", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo1MDo0MVrOGraz4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNToyOToxNlrOGtJRMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTIxOQ==", "bodyText": "IMHO we should add this method to ExecutionContext because it is a general requirement for all adapters/protocols.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448181219", "createdAt": "2020-07-01T07:50:41Z", "author": {"login": "sophokles73"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.\n+     *\n+     * @return The QoS level requested by the device.\n+     */\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg0NTM5NA==", "bodyText": "Are you working on this? I can't find a corresponding change in your latest push?", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448845394", "createdAt": "2020-07-02T08:44:19Z", "author": {"login": "sophokles73"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.\n+     *\n+     * @return The QoS level requested by the device.\n+     */\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTIxOQ=="}, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg3MzQ4Mg==", "bodyText": "Yes, I do! I will push a separate commit containing the QoS changes soon.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448873482", "createdAt": "2020-07-02T09:30:53Z", "author": {"login": "fkaltner"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.\n+     *\n+     * @return The QoS level requested by the device.\n+     */\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTIxOQ=="}, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5ODgxMQ==", "bodyText": "There you go, see: 9bb5266\nLet me know what you think about the two QoS classes and the NOT_APPLICABLE and the UNKNOWN levels", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448898811", "createdAt": "2020-07-02T10:15:50Z", "author": {"login": "fkaltner"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.\n+     *\n+     * @return The QoS level requested by the device.\n+     */\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTIxOQ=="}, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTk5MDk2MA==", "bodyText": "Since this is the only conversation left unresolved: is there something I missed or are you still reviewing?", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449990960", "createdAt": "2020-07-06T05:29:16Z", "author": {"login": "fkaltner"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.\n+     *\n+     * @return The QoS level requested by the device.\n+     */\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MTIxOQ=="}, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MzQ0MDMwOnYy", "diffSide": "RIGHT", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNzo1Mjo0NFrOGra4UA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwOTo0MToyNVrOGreq3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MjM1Mg==", "bodyText": "Can you please always use present tense active form? In this case\n\nGets the quality of service level corresponding to the delivery semantics specified by the device in its request to upload data.\n\nThis applies to most (all) of your JavaDoc comments ...", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448182352", "createdAt": "2020-07-01T07:52:44Z", "author": {"login": "sophokles73"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI0NDQ0NA==", "bodyText": "Will do.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448244444", "createdAt": "2020-07-01T09:41:25Z", "author": {"login": "fkaltner"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -307,4 +308,13 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n                 .orElse(null);\n     }\n \n+    /**\n+     * Get the QoS level as set in the request by the device.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODE4MjM1Mg=="}, "originalCommit": {"oid": "e399da66a1352f4a2eadf9e93647b7adc3173f0c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODIxMTk2OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTozNTowOFrOGsI98Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTozNTowOFrOGsI98Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzNzQ1Nw==", "bodyText": "This is a new class, thus the date range only contains the date of inception, i.e.\n\nCopyright (c) 2020 Contributors ...", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448937457", "createdAt": "2020-07-02T11:35:08Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODIyMzU0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTozOTowMVrOGsJFNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo0Njo0OFrOGsvToA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTMxNg==", "bodyText": "there is no official mapping of numbers to QoS levels. I would therefore suggest to rename this method to fromMqttQosLevel as that is what the number is expected to be, isn't it? And also update the JavaDocs accordingly ...", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448939316", "createdAt": "2020-07-02T11:39:01Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1NDA5NQ==", "bodyText": "Makes sense, yes this is used for MQTT only.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449154095", "createdAt": "2020-07-02T17:02:42Z", "author": {"login": "fkaltner"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTMxNg=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2NTYwMA==", "bodyText": "After a closer look it turned out that this method was in fact used in the HTTP adapter. The HTTP adapter accidentally (I guess) shares its QoS level definition with MQTT.\nI think it makes more sense to have this in the corresponding Context implementations, since it is protocol specific.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449565600", "createdAt": "2020-07-03T12:46:48Z", "author": {"login": "fkaltner"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTMxNg=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODIyNjQ3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0MDowMlrOGsJHCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo0Nzo1M1rOGsvVaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTc4NQ==", "bodyText": "this is `EXACTLY_ONCE* delivery semantics. Whether or not it is applicable or supported should be determined by the component using this enum, shouldn't it?", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448939785", "createdAt": "2020-07-02T11:40:02Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.\n+     *\n+     * @param number The number denoting the QoS level.\n+     *\n+     * @return The QoS level derived from the given number.\n+     */\n+    public static QoS from(final int number) {\n+        switch (number) {\n+            case 0:\n+                return AT_MOST_ONCE;\n+            case 1:\n+                return AT_LEAST_ONCE;\n+            case 2:\n+                return NOT_APPLICABLE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE1ODQ2Mg==", "bodyText": "Yes, from the ordinal of the enum that's right.\nLet's ignore the ordinal for now: the reason why I introduced this was that I stumbled upon sendTtdEvent() in AbstractProtocolAdapterBase and sendNotificationEvent in AbstractMessageSenderConnectionEventProducer.\nAre TTD and connection events something which will arrive at the northbound application? Should the qos application property be set for those events as well?", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449158462", "createdAt": "2020-07-02T17:11:19Z", "author": {"login": "fkaltner"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.\n+     *\n+     * @param number The number denoting the QoS level.\n+     *\n+     * @return The QoS level derived from the given number.\n+     */\n+    public static QoS from(final int number) {\n+        switch (number) {\n+            case 0:\n+                return AT_MOST_ONCE;\n+            case 1:\n+                return AT_LEAST_ONCE;\n+            case 2:\n+                return NOT_APPLICABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTc4NQ=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NTY0NQ==", "bodyText": "Yes, both are supposed to be consumed by downstream applications. AFAIC they should thus also contain the qos property.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449445645", "createdAt": "2020-07-03T08:18:21Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.\n+     *\n+     * @param number The number denoting the QoS level.\n+     *\n+     * @return The QoS level derived from the given number.\n+     */\n+    public static QoS from(final int number) {\n+        switch (number) {\n+            case 0:\n+                return AT_MOST_ONCE;\n+            case 1:\n+                return AT_LEAST_ONCE;\n+            case 2:\n+                return NOT_APPLICABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTc4NQ=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU2NjA1Ng==", "bodyText": "Alright, set their QoS to AT_LEAST_ONCE, since they use EventSenderImpl which send AMQP messages with ProtonQoS.AT_LEAST_ONCE.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449566056", "createdAt": "2020-07-03T12:47:53Z", "author": {"login": "fkaltner"}, "path": "core/src/main/java/org/eclipse/hono/util/QoS.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*******************************************************************************\n+ * Copyright (c) 2016, 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.util;\n+\n+/**\n+ * Denotes the QoS level with which a message was sent by the device.\n+ */\n+public enum QoS {\n+\n+    AT_MOST_ONCE,\n+    AT_LEAST_ONCE,\n+    /**\n+     * Indicates the QoS is not settable by the device.\n+     */\n+    NOT_APPLICABLE,\n+    /**\n+     * Indicates that the device set a QoS level which is not known or supported.\n+     */\n+    UNKNOWN;\n+\n+    /**\n+     * Derive the QoS level from the given number.\n+     *\n+     * @param number The number denoting the QoS level.\n+     *\n+     * @return The QoS level derived from the given number.\n+     */\n+    public static QoS from(final int number) {\n+        switch (number) {\n+            case 0:\n+                return AT_MOST_ONCE;\n+            case 1:\n+                return AT_LEAST_ONCE;\n+            case 2:\n+                return NOT_APPLICABLE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkzOTc4NQ=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODIzNjg0OnYy", "diffSide": "RIGHT", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0Mzo0MFrOGsJNpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0Mzo0MFrOGsJNpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MTQ3Nw==", "bodyText": "we should support AT_MOST_ONCE and EXACTLY_ONCE explicitly here FMPOV", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448941477", "createdAt": "2020-07-02T11:43:40Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java", "diffHunk": "@@ -45,6 +46,19 @@\n     private MqttContext() {\n     }\n \n+    @Override\n+    public QoS getRequestedQos() {\n+\n+        switch (message.qosLevel()) {\n+            case AT_LEAST_ONCE:\n+                return QoS.AT_LEAST_ONCE;\n+            default:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5ODI0NzU2OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/http/HttpContext.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMTo0NzoxNFrOGsJUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QwODoxNjoyNVrOGsn7Yw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzE5Mw==", "bodyText": "are the public methods supposed to be overridden by subclasses? If not, then either the whole class or the public methods should be final ...", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r448943193", "createdAt": "2020-07-02T11:47:14Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/HttpContext.java", "diffHunk": "@@ -73,4 +89,137 @@ public void setTracingContext(final SpanContext spanContext) {\n     public SpanContext getTracingContext() {\n         return spanContext;\n     }\n+\n+    @Override\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTE2MDA5Mw==", "bodyText": "Based on today's Community call: @ctron mentioned that this will cause problems with Quarkus (native). I see your point (I guess: \"Design for inheritance, or prohibit it\") but wasn't sure anymore after the discussion.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449160093", "createdAt": "2020-07-02T17:14:08Z", "author": {"login": "fkaltner"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/HttpContext.java", "diffHunk": "@@ -73,4 +89,137 @@ public void setTracingContext(final SpanContext spanContext) {\n     public SpanContext getTracingContext() {\n         return spanContext;\n     }\n+\n+    @Override\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzE5Mw=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTQ0NDcwNw==", "bodyText": "Let's wait and see what happens with the Quarkus story ... in the meantime I suggest to follow good design practice here :-)", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449444707", "createdAt": "2020-07-03T08:16:25Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/http/HttpContext.java", "diffHunk": "@@ -73,4 +89,137 @@ public void setTracingContext(final SpanContext spanContext) {\n     public SpanContext getTracingContext() {\n         return spanContext;\n     }\n+\n+    @Override\n+    public QoS getRequestedQos() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk0MzE5Mw=="}, "originalCommit": {"oid": "9bb52667bc40596ac6a5a8770ee2fc65fc0066dc"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjI0NTI3OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/eclipse/hono/util/MessageHelper.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo1OTowOFrOGsvo1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMjo1OTowOFrOGsvo1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MTAzMQ==", "bodyText": "is qos allowed to be null? If yes, then we should mention it here explicitly\n\n... or {@code null} if unknown.\n\nIf not, then we should document this by means of declaring an NPE and also checking for null before starting to process the parameters.", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449571031", "createdAt": "2020-07-03T12:59:08Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/MessageHelper.java", "diffHunk": "@@ -922,9 +927,10 @@ public static Object getCorrelationId(final Message message) {\n      * Creates an AMQP 1.0 message.\n      * <p>\n      * This method simply calls\n-     * {@link #newMessage(ResourceIdentifier, String, String, Buffer, TenantObject, JsonObject, Integer, Duration, String, boolean, boolean)}\n+     * {@link #newMessage(QoS, ResourceIdentifier, String, String, Buffer, TenantObject, JsonObject, Integer, Duration, String, boolean, boolean)}\n      * to create the AMQP 1.0 message.\n      *\n+     * @param qos The QoS level with which the device sent the message to the protocol adapter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3ac2e22f062995f9dad76ff4eedbe94ba3a3e3"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwMjI1MTUzOnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMToyM1rOGsvsoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wM1QxMzowMToyM1rOGsvsoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTU3MjAwMA==", "bodyText": "same here, document null value behavior", "url": "https://github.com/eclipse/hono/pull/2059#discussion_r449572000", "createdAt": "2020-07-03T13:01:23Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -1171,9 +1172,10 @@ private boolean isGatewaySupportedForDevice(final JsonObject registrationAsserti\n      * Subclasses are encouraged to use this method for creating {@code Message} instances to be sent downstream in\n      * order to have required Hono specific properties being set on the message automatically.\n      * <p>\n-     * This method simply delegates to {@link #newMessage(ResourceIdentifier, String, String, Buffer, TenantObject,\n+     * This method simply delegates to {@link #newMessage(QoS, ResourceIdentifier, String, String, Buffer, TenantObject,\n      * JsonObject, Integer, Duration)}.\n      *\n+     * @param qos The QoS level with which the device sent the message to the protocol adapter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b3ac2e22f062995f9dad76ff4eedbe94ba3a3e3"}, "originalPosition": 16}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3182, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}