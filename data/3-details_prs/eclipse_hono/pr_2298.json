{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIwNjc4NjAw", "number": 2298, "title": "[#2029] Add Command Router component", "bodyText": "This is for #2029:\nAdds a new component that implements the new Command Router API and serves as the first-level command message consumer and forwarder.\nThe Command Router implementation delegates to the corresponding Device Connection API methods, implemented using an Infinispan cache, like it is done in the \"hono-service-device-connection\" module.\nThe command consumer part is adopted from the corresponding implementation in the protocol adapters.\nIncoming command messages are analyzed as to which device or gateway and which adapter instance they are targeted at. They are then forwarded on a protocol adapter specific address from where protocol adapters can receive them. The new corresponding consumer logic in the protocol adapters is still to be added, along with usage of the Command Router API there.", "createdAt": "2020-11-13T16:21:16Z", "url": "https://github.com/eclipse/hono/pull/2298", "merged": true, "mergeCommit": {"oid": "47042727b919a6edf77d23b65eefb18faab59f12"}, "closed": true, "closedAt": "2020-11-16T10:55:55Z", "author": {"login": "calohmn"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdcEr5egH2gAyNTIwNjc4NjAwOjMzNGYxMDk0NzlhNGJmNmY1NDllMDU3ZjlhOTU3ZjcxNGE0ZDdmOTI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABddCMxcAFqTUzMTE4MjE2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "334f109479a4bf6f549e057f9a957f714a4d7f92", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/334f109479a4bf6f549e057f9a957f714a4d7f92", "committedDate": "2020-11-13T10:34:41Z", "message": "[#2029] Add certificate for Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1001bda402257eb2b5b58afb8d1b1740a44c22d4", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/1001bda402257eb2b5b58afb8d1b1740a44c22d4", "committedDate": "2020-11-13T16:07:43Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "8181de43b0a85e51c0a0c729f3467492c7027635", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/8181de43b0a85e51c0a0c729f3467492c7027635", "committedDate": "2020-11-13T16:36:12Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8181de43b0a85e51c0a0c729f3467492c7027635", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/8181de43b0a85e51c0a0c729f3467492c7027635", "committedDate": "2020-11-13T16:36:12Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/2ade679c042a2baf31fe10b165988b1b4be5814d", "committedDate": "2020-11-16T06:12:45Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMDIyMDI4", "url": "https://github.com/eclipse/hono/pull/2298#pullrequestreview-531022028", "createdAt": "2020-11-16T07:59:59Z", "commit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwNzo1OTo1OVrOHzrjMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwODoyMToxOFrOHzsLVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1Mjk0NQ==", "bodyText": "it doesn't send messages on the event bus, does it?", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523952945", "createdAt": "2020-11-16T07:59:59Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/commandrouter/DelegatingCommandRouterAmqpEndpoint.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.commandrouter;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.amqp.AbstractDelegatingRequestResponseEndpoint;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CommandRouterConstants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+\n+/**\n+ * An {@code AmqpEndpoint} for managing command router information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router/\">Command\n+ * Router API</a>. It receives AMQP 1.0 messages representing requests and sends them to an address on the vertx\n+ * event bus for processing. The outcome is then returned to the peer in a response message.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1MzY4OQ==", "bodyText": "based on processSetLastKnownGatewayRequest we should also check targetAddress for null or at least handle a null address accordingly in processSetLastKnownGatewayRequest ...", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523953689", "createdAt": "2020-11-16T08:01:41Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/commandrouter/DelegatingCommandRouterAmqpEndpoint.java", "diffHunk": "@@ -0,0 +1,239 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.service.commandrouter;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.Objects;\n+\n+import org.apache.qpid.proton.message.Message;\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.config.ServiceConfigProperties;\n+import org.eclipse.hono.service.amqp.AbstractDelegatingRequestResponseEndpoint;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.CommandRouterConstants;\n+import org.eclipse.hono.util.MessageHelper;\n+import org.eclipse.hono.util.ResourceIdentifier;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.vertx.core.Future;\n+import io.vertx.core.Vertx;\n+\n+/**\n+ * An {@code AmqpEndpoint} for managing command router information.\n+ * <p>\n+ * This endpoint implements Hono's <a href=\"https://www.eclipse.org/hono/docs/api/command-router/\">Command\n+ * Router API</a>. It receives AMQP 1.0 messages representing requests and sends them to an address on the vertx\n+ * event bus for processing. The outcome is then returned to the peer in a response message.\n+ *\n+ * @param <S> The type of service this endpoint delegates to.\n+ */\n+public class DelegatingCommandRouterAmqpEndpoint<S extends CommandRouterService> extends AbstractDelegatingRequestResponseEndpoint<S, ServiceConfigProperties> {\n+\n+    private static final String SPAN_NAME_SET_LAST_GATEWAY = \"set last known gateway\";\n+    private static final String SPAN_NAME_REGISTER_COMMAND_CONSUMER = \"register command consumer\";\n+    private static final String SPAN_NAME_UNREGISTER_COMMAND_CONSUMER = \"unregister command consumer\";\n+\n+    /**\n+     * Creates an endpoint for a service instance.\n+     *\n+     * @param vertx The vert.x instance to use.\n+     * @param service The service to delegate to.\n+     * @throws NullPointerException if any of the parameters is {@code null};\n+     */\n+    public DelegatingCommandRouterAmqpEndpoint(final Vertx vertx, final S service) {\n+        super(vertx, service);\n+    }\n+\n+    @Override\n+    protected Future<Message> handleRequestMessage(final Message requestMessage, final ResourceIdentifier targetAddress,\n+            final SpanContext spanContext) {\n+        Objects.requireNonNull(requestMessage);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk1NDczMQ==", "bodyText": "missing EOL", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523954731", "createdAt": "2020-11-16T08:04:09Z", "author": {"login": "sophokles73"}, "path": "services/command-router/pom.xml", "diffHunk": "@@ -0,0 +1,146 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.eclipse.hono</groupId>\n+    <artifactId>hono-services</artifactId>\n+    <version>1.5.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>hono-service-command-router</artifactId>\n+  <name>Hono Command Router</name>\n+  <description>An implementation of Hono's Command Router API that is using Infinispan for storing data.</description>\n+  <inceptionYear>2020</inceptionYear>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.infinispan</groupId>\n+      <artifactId>infinispan-client-hotrod</artifactId>\n+      <exclusions>\n+        <exclusion>\n+          <groupId>io.netty</groupId>\n+          <artifactId>netty-handler</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.hono</groupId>\n+      <artifactId>client-device-connection-infinispan</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.hono</groupId>\n+      <artifactId>hono-client</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.eclipse.hono</groupId>\n+      <artifactId>hono-client-adapter-amqp</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-dependency-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>build-docker-image</id>\n+      <activation>\n+        <property>\n+          <name>docker.host</name>\n+        </property>\n+      </activation>\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <build>\n+                    <from>${java-base-image.name}</from>\n+                    <labels>\n+                      <implemented.api.1>Command Router</implemented.api.1>\n+                    </labels>\n+                    <ports>\n+                      <port>5671</port>\n+                      <port>5672</port>\n+                      <port>${vertx.health.port}</port>\n+                    </ports>\n+                    <cmd>\n+                      <exec>\n+                        <arg>java</arg>\n+                        <arg>--illegal-access=permit</arg>\n+                        <arg>-Dvertx.cacheDirBase=/tmp</arg>\n+                        <arg>-Dloader.home=/opt/hono</arg>\n+                        <arg>-Dloader.path=extensions</arg>\n+                        <arg>-Dorg.jboss.logging.provider=slf4j</arg>\n+                        <arg>-cp</arg>\n+                        <arg>/opt/hono/${project.artifactId}-${project.version}-${classifier.spring.boot.artifact}.jar</arg>\n+                        <arg>org.springframework.boot.loader.PropertiesLauncher</arg>\n+                      </exec>\n+                    </cmd>\n+                    <assembly>\n+                      <mode>dir</mode>\n+                      <basedir>/</basedir>\n+                      <inline>\n+                        <fileSets>\n+                          <fileSet>\n+                            <directory>${project.build.directory}</directory>\n+                            <outputDirectory>opt/hono</outputDirectory>\n+                            <includes>\n+                              <include>${project.artifactId}-${project.version}-${classifier.spring.boot.artifact}.jar</include>\n+                            </includes>\n+                          </fileSet>\n+                        </fileSets>\n+                      </inline>\n+                    </assembly>\n+                  </build>\n+                </image>\n+              </images>\n+            </configuration>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+\n+    <profile>\n+      <id>jaeger</id>\n+      <dependencies>\n+        <dependency>\n+          <groupId>io.jaegertracing</groupId>\n+          <artifactId>jaeger-client</artifactId>\n+        </dependency>\n+      </dependencies>\n+    </profile>\n+\n+    <profile>\n+      <id>docker-push-image</id>\n+      <build>\n+          <plugins>\n+              <plugin>\n+                  <groupId>io.fabric8</groupId>\n+                  <artifactId>docker-maven-plugin</artifactId>\n+                  <executions>\n+                      <execution>\n+                          <id>docker-push-image</id>\n+                          <phase>install</phase>\n+                          <goals>\n+                              <goal>push</goal>\n+                          </goals>\n+                      </execution>\n+                  </executions>\n+              </plugin>\n+          </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+\n+</project>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MDI1OQ==", "bodyText": "so far we have sorted the modules lexicographically ...", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523960259", "createdAt": "2020-11-16T08:15:23Z", "author": {"login": "sophokles73"}, "path": "services/pom.xml", "diffHunk": "@@ -29,6 +29,7 @@\n     <module>auth</module>\n     <module>base-jdbc</module>\n     <module>device-connection</module>\n+    <module>command-router</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMzk2MzIyMw==", "bodyText": "CacheBasedDeviceConnectionInfo is no longer an instance of ConnectionLifecycle but is an instance of org.eclipse.hono.util.Lifecylce instead ...", "url": "https://github.com/eclipse/hono/pull/2298#discussion_r523963223", "createdAt": "2020-11-16T08:21:18Z", "author": {"login": "sophokles73"}, "path": "services/command-router/src/main/java/org/eclipse/hono/commandrouter/impl/CommandRouterServiceImpl.java", "diffHunk": "@@ -0,0 +1,394 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.commandrouter.impl;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.adapter.client.registry.DeviceRegistrationClient;\n+import org.eclipse.hono.adapter.client.util.ServiceClient;\n+import org.eclipse.hono.client.CommandTargetMapper;\n+import org.eclipse.hono.client.ConnectionLifecycle;\n+import org.eclipse.hono.client.ServiceInvocationException;\n+import org.eclipse.hono.commandrouter.CommandConsumerFactory;\n+import org.eclipse.hono.commandrouter.CommandRouterServiceConfigProperties;\n+import org.eclipse.hono.deviceconnection.infinispan.client.DeviceConnectionInfo;\n+import org.eclipse.hono.service.HealthCheckProvider;\n+import org.eclipse.hono.service.commandrouter.CommandRouterResult;\n+import org.eclipse.hono.service.commandrouter.CommandRouterService;\n+import org.eclipse.hono.tracing.TracingHelper;\n+import org.eclipse.hono.util.ConfigurationSupportingVerticle;\n+import org.eclipse.hono.util.Lifecycle;\n+import org.eclipse.hono.util.RegistrationAssertion;\n+import org.eclipse.hono.util.RegistrationConstants;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Qualifier;\n+\n+import io.opentracing.Span;\n+import io.opentracing.SpanContext;\n+import io.opentracing.Tracer;\n+import io.opentracing.noop.NoopTracerFactory;\n+import io.opentracing.tag.Tags;\n+import io.vertx.core.CompositeFuture;\n+import io.vertx.core.Context;\n+import io.vertx.core.Future;\n+import io.vertx.core.Promise;\n+import io.vertx.core.Vertx;\n+import io.vertx.core.json.JsonObject;\n+import io.vertx.ext.healthchecks.HealthCheckHandler;\n+import io.vertx.ext.healthchecks.Status;\n+\n+/**\n+ * An implementation of Hono's <em>Command Router</em> API.\n+ */\n+public class CommandRouterServiceImpl extends ConfigurationSupportingVerticle<CommandRouterServiceConfigProperties>\n+        implements CommandRouterService, HealthCheckProvider {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(CommandRouterServiceImpl.class);\n+\n+    private DeviceRegistrationClient registrationClient;\n+    private DeviceConnectionInfo deviceConnectionInfo;\n+    private CommandConsumerFactory commandConsumerFactory;\n+    private CommandTargetMapper commandTargetMapper;\n+    private Tracer tracer = NoopTracerFactory.create();\n+\n+    @Autowired\n+    @Override\n+    public void setConfig(final CommandRouterServiceConfigProperties configuration) {\n+        setSpecificConfig(configuration);\n+    }\n+\n+    /**\n+     * Sets the OpenTracing {@code Tracer} to use for tracking the processing\n+     * of messages published by devices across Hono's components.\n+     * <p>\n+     * If not set explicitly, the {@code NoopTracer} from OpenTracing will\n+     * be used.\n+     *\n+     * @param opentracingTracer The tracer.\n+     */\n+    @Autowired(required = false)\n+    public final void setTracer(final Tracer opentracingTracer) {\n+        LOG.info(\"using OpenTracing Tracer implementation [{}]\", opentracingTracer.getClass().getName());\n+        this.tracer = Objects.requireNonNull(opentracingTracer);\n+    }\n+\n+    /**\n+     * Sets the client for accessing device connection data.\n+     *\n+     * @param deviceConnectionInfo The client object.\n+     * @throws NullPointerException if deviceConnectionInfo is {@code null}.\n+     */\n+    @Autowired\n+    public final void setDeviceConnectionInfo(final DeviceConnectionInfo deviceConnectionInfo) {\n+        this.deviceConnectionInfo = Objects.requireNonNull(deviceConnectionInfo);\n+    }\n+\n+    /**\n+     * Sets the client to use for accessing the Device Registration service.\n+     *\n+     * @param client The client.\n+     * @throws NullPointerException if the client is {@code null}.\n+     */\n+    @Qualifier(RegistrationConstants.REGISTRATION_ENDPOINT)\n+    @Autowired\n+    public final void setRegistrationClient(final DeviceRegistrationClient client) {\n+        this.registrationClient = Objects.requireNonNull(client);\n+    }\n+\n+    /**\n+     * Sets the factory to use for creating clients to receive commands.\n+     *\n+     * @param factory The factory.\n+     * @throws NullPointerException if factory is {@code null}.\n+     */\n+    @Autowired\n+    public final void setCommandConsumerFactory(final CommandConsumerFactory factory) {\n+        this.commandConsumerFactory = Objects.requireNonNull(factory);\n+    }\n+\n+    /**\n+     * Sets the component for mapping an incoming command to the gateway (if applicable)\n+     * and protocol adapter instance that can handle it.\n+     *\n+     * @param commandTargetMapper The mapper component.\n+     * @throws NullPointerException if commandTargetMapper is {@code null}.\n+     */\n+    @Autowired\n+    public final void setCommandTargetMapper(final CommandTargetMapper commandTargetMapper) {\n+        this.commandTargetMapper = Objects.requireNonNull(commandTargetMapper);\n+    }\n+\n+    @Override\n+    public void start(final Promise<Void> startPromise) throws Exception {\n+\n+        if (registrationClient == null) {\n+            startPromise.fail(new IllegalStateException(\"Device Registration client must be set\"));\n+        } else if (deviceConnectionInfo == null) {\n+            startPromise.fail(new IllegalStateException(\"Device Connection info client must be set\"));\n+        } else {\n+            startServiceClient(registrationClient, \"Device Registration service\");\n+            if (deviceConnectionInfo instanceof ConnectionLifecycle) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d"}, "originalPosition": 149}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aadc41f784d60169be5e8fb3c42ef5205229a738", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/aadc41f784d60169be5e8fb3c42ef5205229a738", "committedDate": "2020-11-16T09:38:17Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2ade679c042a2baf31fe10b165988b1b4be5814d", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/2ade679c042a2baf31fe10b165988b1b4be5814d", "committedDate": "2020-11-16T06:12:45Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}, "afterCommit": {"oid": "aadc41f784d60169be5e8fb3c42ef5205229a738", "author": {"user": {"login": "calohmn", "name": "Carsten Lohmann"}}, "url": "https://github.com/eclipse/hono/commit/aadc41f784d60169be5e8fb3c42ef5205229a738", "committedDate": "2020-11-16T09:38:17Z", "message": "[#2029] Add Command Router component.\n\nSigned-off-by: Carsten Lohmann <carsten.lohmann@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTMxMTgyMTY1", "url": "https://github.com/eclipse/hono/pull/2298#pullrequestreview-531182165", "createdAt": "2020-11-16T10:14:48Z", "commit": {"oid": "aadc41f784d60169be5e8fb3c42ef5205229a738"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 438, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}