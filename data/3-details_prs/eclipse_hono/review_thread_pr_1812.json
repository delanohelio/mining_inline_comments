{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MTczMDcx", "number": 1812, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNTo1MlrODle75w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNTo1MlrODle75w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMwNzU5OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheConfig.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNTo1MlrOFyZtfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjozNjoyNVrOFya9Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NDM2Ng==", "bodyText": "this will throw a NullPointerException if tracer is null, right? Is there actually a factory method producing an Optional<Tracer>?", "url": "https://github.com/eclipse/hono/pull/1812#discussion_r388394366", "createdAt": "2020-03-05T16:05:52Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheConfig.java", "diffHunk": "@@ -79,12 +83,15 @@ public RemoteCacheManager remoteCacheManager() {\n      * in an Infinispan data grid.\n      *\n      * @param cache The remote cache in the Infinispan data grid.\n+     * @param tracer The OpenTracing {@code Tracer} to use for tracking requests done by clients created by this factory.\n+     *               If an empty Optional is given, the {@code NoopTracer} from OpenTracing will be used.\n      * @return The factory.\n      */\n     @Bean\n     @Qualifier(DeviceConnectionConstants.DEVICE_CONNECTION_ENDPOINT)\n     @ConditionalOnProperty(prefix = \"hono.device-connection\", name = \"server-list\")\n-    public BasicDeviceConnectionClientFactory hotrodBasedDeviceConnectionClientFactory(final HotrodCache<String, String> cache) {\n-        return new HotrodBasedDeviceConnectionClientFactory(cache);\n+    public BasicDeviceConnectionClientFactory hotrodBasedDeviceConnectionClientFactory(\n+            final HotrodCache<String, String> cache, final Optional<Tracer> tracer) {\n+        return new HotrodBasedDeviceConnectionClientFactory(cache, tracer.orElse(NoopTracerFactory.create()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db54d0267221477c1f6405b449eedf25a3696b9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxMjA5NQ==", "bodyText": "The method is supposed to be called by Spring.\nUsing Optional here is a way to tell Spring that such a Tracer bean is optional. In that sense it is an equivalent to using @Autowired(required = false) on a field or method (using Autowired on a method parameter is mostly ignored, as written here. Another alternative would be to use a @Nullable annotation, which I also see as a good solution, which would require an additional dependency though (com.google.code.findbugs:jsr305 I guess we haven't discussed usage of that yet).", "url": "https://github.com/eclipse/hono/pull/1812#discussion_r388412095", "createdAt": "2020-03-05T16:32:24Z", "author": {"login": "calohmn"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheConfig.java", "diffHunk": "@@ -79,12 +83,15 @@ public RemoteCacheManager remoteCacheManager() {\n      * in an Infinispan data grid.\n      *\n      * @param cache The remote cache in the Infinispan data grid.\n+     * @param tracer The OpenTracing {@code Tracer} to use for tracking requests done by clients created by this factory.\n+     *               If an empty Optional is given, the {@code NoopTracer} from OpenTracing will be used.\n      * @return The factory.\n      */\n     @Bean\n     @Qualifier(DeviceConnectionConstants.DEVICE_CONNECTION_ENDPOINT)\n     @ConditionalOnProperty(prefix = \"hono.device-connection\", name = \"server-list\")\n-    public BasicDeviceConnectionClientFactory hotrodBasedDeviceConnectionClientFactory(final HotrodCache<String, String> cache) {\n-        return new HotrodBasedDeviceConnectionClientFactory(cache);\n+    public BasicDeviceConnectionClientFactory hotrodBasedDeviceConnectionClientFactory(\n+            final HotrodCache<String, String> cache, final Optional<Tracer> tracer) {\n+        return new HotrodBasedDeviceConnectionClientFactory(cache, tracer.orElse(NoopTracerFactory.create()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NDM2Ng=="}, "originalCommit": {"oid": "6db54d0267221477c1f6405b449eedf25a3696b9"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQxNDcyMg==", "bodyText": "Ah, I learn something new every day :-) In any case, IMHO you should document the NullPointerException ...", "url": "https://github.com/eclipse/hono/pull/1812#discussion_r388414722", "createdAt": "2020-03-05T16:36:25Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheConfig.java", "diffHunk": "@@ -79,12 +83,15 @@ public RemoteCacheManager remoteCacheManager() {\n      * in an Infinispan data grid.\n      *\n      * @param cache The remote cache in the Infinispan data grid.\n+     * @param tracer The OpenTracing {@code Tracer} to use for tracking requests done by clients created by this factory.\n+     *               If an empty Optional is given, the {@code NoopTracer} from OpenTracing will be used.\n      * @return The factory.\n      */\n     @Bean\n     @Qualifier(DeviceConnectionConstants.DEVICE_CONNECTION_ENDPOINT)\n     @ConditionalOnProperty(prefix = \"hono.device-connection\", name = \"server-list\")\n-    public BasicDeviceConnectionClientFactory hotrodBasedDeviceConnectionClientFactory(final HotrodCache<String, String> cache) {\n-        return new HotrodBasedDeviceConnectionClientFactory(cache);\n+    public BasicDeviceConnectionClientFactory hotrodBasedDeviceConnectionClientFactory(\n+            final HotrodCache<String, String> cache, final Optional<Tracer> tracer) {\n+        return new HotrodBasedDeviceConnectionClientFactory(cache, tracer.orElse(NoopTracerFactory.create()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NDM2Ng=="}, "originalCommit": {"oid": "6db54d0267221477c1f6405b449eedf25a3696b9"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3246, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}