{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEzMTE4MDk1", "number": 2276, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1MToyMlrOEz4C2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMjoyNVrOE0RRrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODMxMDY1OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractAdapterConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1MToyMlrOHrXksA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1MToyMlrOHrXksA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNzA0MA==", "bodyText": "The sender,", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515237040", "createdAt": "2020-10-30T16:51:22Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractAdapterConfig.java", "diffHunk": "@@ -175,33 +180,58 @@ protected ClientConfigProperties getDownstreamSenderFactoryConfigDefaults() {\n     }\n \n     /**\n-     * Exposes a factory for creating clients for the <em>AMQP Messaging Network</em> as a Spring bean.\n+     * Exposes the connection to the <em>AMQP Messaging Network</em> as a Spring bean.\n      * <p>\n-     * The factory is initialized with the connection provided by {@link #downstreamConnection()}.\n+     * The connection is configured with the properties provided by {@link #downstreamSenderFactoryConfig()}\n+     * and is already trying to establish the connection to the configured peer.\n      *\n-     * @param samplerFactory The sampler factory to use. Can re-use adapter metrics, based on {@link org.eclipse.hono.service.metric.MicrometerBasedMetrics}\n-     * out of the box.\n-     * @return The factory.\n+     * @return The connection.\n      */\n     @Qualifier(Constants.QUALIFIER_MESSAGING)\n     @Bean\n     @Scope(\"prototype\")\n-    public DownstreamSenderFactory downstreamSenderFactory(final SendMessageSampler.Factory samplerFactory) {\n-        return DownstreamSenderFactory.create(downstreamConnection(), samplerFactory);\n+    public HonoConnection downstreamConnection() {\n+        return HonoConnection.newConnection(vertx(), downstreamSenderFactoryConfig());\n     }\n \n     /**\n-     * Exposes the connection to the <em>AMQP Messaging Network</em> as a Spring bean.\n+     * Exposes a client for sending telemetry messages via the <em>AMQP Messaging Network</em> as a Spring bean.\n      * <p>\n-     * The connection is configured with the properties provided by {@link #downstreamSenderFactoryConfig()}.\n+     * The client is initialized with the connection provided by {@link #downstreamConnection()}.\n      *\n-     * @return The connection.\n+     * @param samplerFactory The sampler factory to use. Can re-use adapter metrics, based on\n+     *                       {@link org.eclipse.hono.service.metric.MicrometerBasedMetrics}\n+     *                       out of the box.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @return The factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODMxMTQyOnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractAdapterConfig.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1MTozM1rOHrXlJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1MTozM1rOHrXlJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTIzNzE1OQ==", "bodyText": "The sender.", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515237159", "createdAt": "2020-10-30T16:51:33Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractAdapterConfig.java", "diffHunk": "@@ -175,33 +180,58 @@ protected ClientConfigProperties getDownstreamSenderFactoryConfigDefaults() {\n     }\n \n     /**\n-     * Exposes a factory for creating clients for the <em>AMQP Messaging Network</em> as a Spring bean.\n+     * Exposes the connection to the <em>AMQP Messaging Network</em> as a Spring bean.\n      * <p>\n-     * The factory is initialized with the connection provided by {@link #downstreamConnection()}.\n+     * The connection is configured with the properties provided by {@link #downstreamSenderFactoryConfig()}\n+     * and is already trying to establish the connection to the configured peer.\n      *\n-     * @param samplerFactory The sampler factory to use. Can re-use adapter metrics, based on {@link org.eclipse.hono.service.metric.MicrometerBasedMetrics}\n-     * out of the box.\n-     * @return The factory.\n+     * @return The connection.\n      */\n     @Qualifier(Constants.QUALIFIER_MESSAGING)\n     @Bean\n     @Scope(\"prototype\")\n-    public DownstreamSenderFactory downstreamSenderFactory(final SendMessageSampler.Factory samplerFactory) {\n-        return DownstreamSenderFactory.create(downstreamConnection(), samplerFactory);\n+    public HonoConnection downstreamConnection() {\n+        return HonoConnection.newConnection(vertx(), downstreamSenderFactoryConfig());\n     }\n \n     /**\n-     * Exposes the connection to the <em>AMQP Messaging Network</em> as a Spring bean.\n+     * Exposes a client for sending telemetry messages via the <em>AMQP Messaging Network</em> as a Spring bean.\n      * <p>\n-     * The connection is configured with the properties provided by {@link #downstreamSenderFactoryConfig()}.\n+     * The client is initialized with the connection provided by {@link #downstreamConnection()}.\n      *\n-     * @return The connection.\n+     * @param samplerFactory The sampler factory to use. Can re-use adapter metrics, based on\n+     *                       {@link org.eclipse.hono.service.metric.MicrometerBasedMetrics}\n+     *                       out of the box.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @return The factory.\n      */\n-    @Qualifier(Constants.QUALIFIER_MESSAGING)\n+    @Qualifier(TelemetryConstants.TELEMETRY_ENDPOINT)\n     @Bean\n     @Scope(\"prototype\")\n-    public HonoConnection downstreamConnection() {\n-        return HonoConnection.newConnection(vertx(), downstreamSenderFactoryConfig());\n+    public TelemetrySender downstreamTelemetrySender(\n+            final SendMessageSampler.Factory samplerFactory,\n+            final ProtocolAdapterProperties adapterConfig) {\n+        return new ProtonBasedDownstreamSender(downstreamConnection(), samplerFactory, adapterConfig);\n+    }\n+\n+    /**\n+     * Exposes a client for sending events via the <em>AMQP Messaging Network</em> as a Spring bean.\n+     * <p>\n+     * The client is initialized with the connection provided by {@link #downstreamConnection()}.\n+     *\n+     * @param samplerFactory The sampler factory to use. Can re-use adapter metrics, based on\n+     *                       {@link org.eclipse.hono.service.metric.MicrometerBasedMetrics}\n+     *                       out of the box.\n+     * @param adapterConfig The protocol adapter's configuration properties.\n+     * @return The factory.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODMzMjQzOnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NjozMlrOHrXxhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNjo1NjozMlrOHrXxhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI0MDMyNQ==", "bodyText": "I think \"downstream\" instead of \"via the AMQP Messaging Network\" could be used here already.\nSame applies also for the getter and the corresponding EventSender methods.", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515240325", "createdAt": "2020-10-30T16:56:32Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -246,24 +249,45 @@ public final DeviceConnectionClientFactory getDeviceConnectionClientFactory() {\n     }\n \n     /**\n-     * Sets the factory to use for creating a client for the AMQP Messaging Network.\n+     * Sets the client to use for sending telemetry messages via the AMQP Messaging Network.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODQ0MTQ3OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzoyMzoyNVrOHrY1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODowNjowNFrOHr5scw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzY3NQ==", "bodyText": "The \"AMQP Messaging Network\" part could maybe be abstracted away here already by using telemetrySender.toString() and adding a corresponding toString() method in ProtonBasedDownstreamSender (and possibly also splitting that class in separate ProtonBasedTelemetrySender and ProtonBasedEventSender classes).", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515257675", "createdAt": "2020-10-30T17:23:25Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -477,8 +503,9 @@ protected final ConnectionLimitManager getConnectionLimitManager() {\n \n             log.info(\"using ResourceLimitChecks [{}]\", resourceLimitChecks.getClass().getName());\n \n+            startServiceClient(telemetrySender, \"AMQP Messaging Network (Telemetry)\");\n+            startServiceClient(eventSender, \"AMQP Messaging Network (Event)\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc3Njc3OA==", "bodyText": "I had already been wondering whether it would be useful to have completely separate implementations of TelemetrySender and EventSender. However, it would then be harder to share a single AMQP connection to the Messaging Network. WDYT?", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515776778", "createdAt": "2020-11-02T07:18:57Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -477,8 +503,9 @@ protected final ConnectionLimitManager getConnectionLimitManager() {\n \n             log.info(\"using ResourceLimitChecks [{}]\", resourceLimitChecks.getClass().getName());\n \n+            startServiceClient(telemetrySender, \"AMQP Messaging Network (Telemetry)\");\n+            startServiceClient(eventSender, \"AMQP Messaging Network (Event)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzY3NQ=="}, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5NjA4Mw==", "bodyText": "Ok, I see, that's a reason not to separate it then.", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515796083", "createdAt": "2020-11-02T08:06:04Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -477,8 +503,9 @@ protected final ConnectionLimitManager getConnectionLimitManager() {\n \n             log.info(\"using ResourceLimitChecks [{}]\", resourceLimitChecks.getClass().getName());\n \n+            startServiceClient(telemetrySender, \"AMQP Messaging Network (Telemetry)\");\n+            startServiceClient(eventSender, \"AMQP Messaging Network (Event)\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI1NzY3NQ=="}, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyODQ3MDMzOnYy", "diffSide": "RIGHT", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/AbstractVertxBasedCoapAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzozMDoyNFrOHrZGtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxNzozMDoyNFrOHrZGtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTI2MjEzMw==", "bodyText": "Remove \"or originDevice\" also in uploadEventMessage javadoc.", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515262133", "createdAt": "2020-10-30T17:30:24Z", "author": {"login": "calohmn"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/AbstractVertxBasedCoapAdapter.java", "diffHunk": "@@ -627,15 +625,11 @@ protected final String getAuthId(final CoapExchange exchange) {\n      * @param context The context representing the request to be processed.\n      * @return A future containing the response code that has been returned to\n      *         the device.\n-     * @throws NullPointerException if context or originDevice are {@code null}.\n+     * @throws NullPointerException if context is {@code null}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82dbb47d958faa19c4710183c3ae733f6ee29393"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIzMjQ0NDYxOnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMjoyNVrOHr53Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wMlQwODoxMjoyNVrOHr53Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTc5ODgxOA==", "bodyText": "(Leading whitespace in first log)\nHow about changing the serviceName parameter values to \"Event\"/\"Telemetry\" and using\n            log.info(\"{} client '{}' successfully connected\", serviceName, serviceClient);\n            return c;\n        }).recover(t -> {\n            log.warn(\"{} client '{}' failed to connect\", serviceName, serviceClient, t);\n\n? Then the startInternal method already doesn't mention the AMQP messaging network anymore.", "url": "https://github.com/eclipse/hono/pull/2276#discussion_r515798818", "createdAt": "2020-11-02T08:12:25Z", "author": {"login": "calohmn"}, "path": "service-base/src/main/java/org/eclipse/hono/service/AbstractProtocolAdapterBase.java", "diffHunk": "@@ -801,6 +844,30 @@ protected void doStop(final Promise<Void> stopPromise) {\n                 .mapEmpty();\n     }\n \n+    /**\n+     * Starts a service client.\n+     * <p>\n+     * This method invokes the given client's {@link Lifecycle#start()} method.\n+     *\n+     * @param serviceClient The client to start.\n+     * @param serviceName The name of the service that the client is for (used for logging).\n+     * @return A future indicating the outcome of starting the client.\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n+     */\n+    protected final Future<Void> startServiceClient(final Lifecycle serviceClient, final String serviceName) {\n+\n+        Objects.requireNonNull(serviceClient);\n+        Objects.requireNonNull(serviceName);\n+\n+        return serviceClient.start().map(c -> {\n+            log.info(\" {} successfully connected to {}\", serviceClient, serviceName);\n+            return c;\n+        }).recover(t -> {\n+            log.warn(\"{} failed to connect to {}\", serviceClient, serviceName, t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d69dc664ba83ec90e47a9b8ba7d7f5cf1348034"}, "originalPosition": 194}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}