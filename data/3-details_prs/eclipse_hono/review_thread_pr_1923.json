{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4MjM2OTIx", "number": 1923, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozNzowMFrOD3r0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoyMjoyMFrOD5rwgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzE2MTQzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/org/eclipse/hono/client/DownstreamSender.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozNzowMFrOGOE2Ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozNzowMFrOGOE2Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxMjYyNw==", "bodyText": "I'd rather not introduce a new parameter here but instead simply use the MessageSender.send(Message) method for sending the event ...", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417412627", "createdAt": "2020-04-29T15:37:00Z", "author": {"login": "sophokles73"}, "path": "client/src/main/java/org/eclipse/hono/client/DownstreamSender.java", "diffHunk": "@@ -162,6 +166,7 @@\n      * @throws IllegalArgumentException if the content type specifies an unsupported character set.\n      */\n     Future<ProtonDelivery> send(\n+            Long maxTtl,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55afda39249f3194b4f0b53ab891271df907bdd1"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzE3MTM0OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTozOToxMFrOGOE8Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMTozNDowN1rOGPHu-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDI0Mw==", "bodyText": "we can use MessageHelper.newMessage() here to create the message and send it using DownstreamSender.send(Message) ...", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417414243", "createdAt": "2020-04-29T15:39:10Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "diffHunk": "@@ -82,23 +82,29 @@ protected AbstractMessageSenderConnectionEventProducer(\n             return Future.succeededFuture();\n         }\n \n-        return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n-                .compose(sender -> {\n-\n-                    final JsonObject payload = new JsonObject();\n-                    payload.put(\"cause\", cause);\n-                    payload.put(\"remote-id\", remoteId);\n-                    payload.put(\"source\", protocolAdapter);\n-\n-                    if (data != null) {\n-                        payload.put(\"data\", data);\n-                    }\n-\n-                    return sender.send(\n-                            authenticatedDevice.getDeviceId(),\n-                            payload.encode().getBytes(StandardCharsets.UTF_8),\n-                            EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE\n-                            );\n+        return context.getTenantClient().getOrCreateTenantClient()\n+                .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n+                .map(tenantObject -> {\n+                    return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n+                            .compose(sender -> {\n+\n+                                final JsonObject payload = new JsonObject();\n+                                payload.put(\"cause\", cause);\n+                                payload.put(\"remote-id\", remoteId);\n+                                payload.put(\"source\", protocolAdapter);\n+\n+                                if (data != null) {\n+                                    payload.put(\"data\", data);\n+                                }\n+\n+                                final Long maxTtl = tenantObject.result().getResourceLimits().getMaxTtl();\n+                                return sender.send(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55afda39249f3194b4f0b53ab891271df907bdd1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzczNTAxMA==", "bodyText": "MessageHelper.newMessage() sets the message's orig_adapter application property to the name of the adapter forwarding the connection event. however, the name of the adapter is already included in the message's payload. i added a todo comment in the source code to get some feedback", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417735010", "createdAt": "2020-04-30T03:36:12Z", "author": {"login": "Alfusainey"}, "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "diffHunk": "@@ -82,23 +82,29 @@ protected AbstractMessageSenderConnectionEventProducer(\n             return Future.succeededFuture();\n         }\n \n-        return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n-                .compose(sender -> {\n-\n-                    final JsonObject payload = new JsonObject();\n-                    payload.put(\"cause\", cause);\n-                    payload.put(\"remote-id\", remoteId);\n-                    payload.put(\"source\", protocolAdapter);\n-\n-                    if (data != null) {\n-                        payload.put(\"data\", data);\n-                    }\n-\n-                    return sender.send(\n-                            authenticatedDevice.getDeviceId(),\n-                            payload.encode().getBytes(StandardCharsets.UTF_8),\n-                            EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE\n-                            );\n+        return context.getTenantClient().getOrCreateTenantClient()\n+                .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n+                .map(tenantObject -> {\n+                    return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n+                            .compose(sender -> {\n+\n+                                final JsonObject payload = new JsonObject();\n+                                payload.put(\"cause\", cause);\n+                                payload.put(\"remote-id\", remoteId);\n+                                payload.put(\"source\", protocolAdapter);\n+\n+                                if (data != null) {\n+                                    payload.put(\"data\", data);\n+                                }\n+\n+                                final Long maxTtl = tenantObject.result().getResourceLimits().getMaxTtl();\n+                                return sender.send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDI0Mw=="}, "originalCommit": {"oid": "55afda39249f3194b4f0b53ab891271df907bdd1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUwODUzNg==", "bodyText": "@sophokles73 if you have time, can you take a look at rev. 4913146 ?", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r418508536", "createdAt": "2020-05-01T11:34:07Z", "author": {"login": "Alfusainey"}, "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "diffHunk": "@@ -82,23 +82,29 @@ protected AbstractMessageSenderConnectionEventProducer(\n             return Future.succeededFuture();\n         }\n \n-        return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n-                .compose(sender -> {\n-\n-                    final JsonObject payload = new JsonObject();\n-                    payload.put(\"cause\", cause);\n-                    payload.put(\"remote-id\", remoteId);\n-                    payload.put(\"source\", protocolAdapter);\n-\n-                    if (data != null) {\n-                        payload.put(\"data\", data);\n-                    }\n-\n-                    return sender.send(\n-                            authenticatedDevice.getDeviceId(),\n-                            payload.encode().getBytes(StandardCharsets.UTF_8),\n-                            EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE\n-                            );\n+        return context.getTenantClient().getOrCreateTenantClient()\n+                .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n+                .map(tenantObject -> {\n+                    return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n+                            .compose(sender -> {\n+\n+                                final JsonObject payload = new JsonObject();\n+                                payload.put(\"cause\", cause);\n+                                payload.put(\"remote-id\", remoteId);\n+                                payload.put(\"source\", protocolAdapter);\n+\n+                                if (data != null) {\n+                                    payload.put(\"data\", data);\n+                                }\n+\n+                                final Long maxTtl = tenantObject.result().getResourceLimits().getMaxTtl();\n+                                return sender.send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDI0Mw=="}, "originalCommit": {"oid": "55afda39249f3194b4f0b53ab891271df907bdd1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU5NzE3NTc5OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0MDoxMFrOGOE_Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yOVQxNTo0MDoxMFrOGOE_Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNzQxNDk4Mg==", "bodyText": "IMHO this should be called getTenantClientFactory instead", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r417414982", "createdAt": "2020-04-29T15:40:10Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/ConnectionEventProducer.java", "diffHunk": "@@ -52,6 +53,14 @@\n          *         use. This client has to be initialized and started.\n          */\n         DownstreamSenderFactory getMessageSenderClient();\n+        /**\n+         * Provides the tenant client which the {@link ConnectionEventProducer} should use to lookup the tenant\n+         * that the device connecting to a protocol adapter belongs to.\n+         * \n+         * @return The tenant client instance. This client has to be initialized and started.\n+         */\n+        TenantClientFactory getTenantClient();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55afda39249f3194b4f0b53ab891271df907bdd1"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNzE1Nzc4OnYy", "diffSide": "RIGHT", "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTowNzowN1rOGPhuYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMlQwOTowNzowN1rOGPhuYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODkzNDM2OA==", "bodyText": "I don't think so because the Event API defines this as a mandatory property of the message body.", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r418934368", "createdAt": "2020-05-02T09:07:07Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/monitoring/AbstractMessageSenderConnectionEventProducer.java", "diffHunk": "@@ -82,27 +85,45 @@ protected AbstractMessageSenderConnectionEventProducer(\n             return Future.succeededFuture();\n         }\n \n-        return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n-                .compose(sender -> {\n-\n-                    final JsonObject payload = new JsonObject();\n-                    payload.put(\"cause\", cause);\n-                    payload.put(\"remote-id\", remoteId);\n-                    payload.put(\"source\", protocolAdapter);\n-\n-                    if (data != null) {\n-                        payload.put(\"data\", data);\n-                    }\n-\n-                    return sender.send(\n-                            authenticatedDevice.getDeviceId(),\n-                            payload.encode().getBytes(StandardCharsets.UTF_8),\n-                            EventConstants.EVENT_CONNECTION_NOTIFICATION_CONTENT_TYPE\n-                            );\n+        return context.getTenantClientFactory().getOrCreateTenantClient()\n+                .map(tenantClient -> tenantClient.get(authenticatedDevice.getTenantId()))\n+                .map(tenantObjectFuture -> {\n+                    return getOrCreateSender(context.getMessageSenderClient(), authenticatedDevice.getTenantId())\n+                            .compose(sender -> {\n+\n+                                final JsonObject payload = new JsonObject();\n+                                payload.put(\"cause\", cause);\n+                                payload.put(\"remote-id\", remoteId);\n+                                // TODO: can this be removed in favour of 'orig_dapter'?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "491314621515851f8d927b0734116f349fbfb346"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODExNDM0OnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoxODowMlrOGRFVWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoxODowMlrOGRFVWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NjM2MQ==", "bodyText": "applications", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420566361", "createdAt": "2020-05-06T06:18:02Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5098391dc4743fb682c57cc2d0df5ee7153f32c2"}, "originalPosition": 107}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODExNDk3OnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoxODoyMlrOGRFVyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoxODoyMlrOGRFVyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2NjQ3NA==", "bodyText": "testForwarded ...", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420566474", "createdAt": "2020-05-06T06:18:22Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.\n+     * \n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5098391dc4743fb682c57cc2d0df5ee7153f32c2"}, "originalPosition": 112}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODEyMzU0OnYy", "diffSide": "RIGHT", "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwNjoyMjoyMFrOGRFaww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMTo0OToyMVrOGRPSkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2Nzc0Nw==", "bodyText": "there is no need to mock this class, is there?", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420567747", "createdAt": "2020-05-06T06:22:20Z", "author": {"login": "sophokles73"}, "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.\n+     * \n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {\n+\n+        // GIVEN a protocol adapter configured to send connection events\n+        final ConnectionEventProducer connectionEventProducer = new HonoEventConnectionEventProducer();\n+        adapter.setConnectionEventProducer(connectionEventProducer);\n+        final DownstreamSender connectionEventSender = mock(DownstreamSender.class);\n+        when(connectionEventSender.send(any(Message.class))).thenReturn(Future.succeededFuture());\n+        when(downstreamSenderFactory.getOrCreateEventSender(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(connectionEventSender));\n+\n+        // WHEN a device, belonging to a tenant for which a max TTL is configured, connects to such an adapter\n+        final Device authenticatedDevice = new Device(Constants.DEFAULT_TENANT, \"4711\");\n+        final TenantClient tenantClient = mock(TenantClient.class);\n+        when(tenantClientFactory.getOrCreateTenantClient()).thenReturn(Future.succeededFuture(tenantClient));\n+        final TenantObject tenantObject = TenantObject.from(Constants.DEFAULT_TENANT, true);\n+        final ResourceLimits tenantLimits = mock(ResourceLimits.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5098391dc4743fb682c57cc2d0df5ee7153f32c2"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDcyOTQ4OA==", "bodyText": "no, not really. will be fixed", "url": "https://github.com/eclipse/hono/pull/1923#discussion_r420729488", "createdAt": "2020-05-06T11:49:21Z", "author": {"login": "Alfusainey"}, "path": "service-base/src/test/java/org/eclipse/hono/service/AbstractProtocolAdapterBaseTest.java", "diffHunk": "@@ -686,6 +696,44 @@ public void verifyConnectionDurationLimitIsReached(final VertxTestContext ctx) {\n                 }));\n     }\n \n+    /**\n+     * Verifies that the (default) ConnectionEvent API configured for a protocol adapter\n+     * sets the connection event message's TTL header value before forwarding the message\n+     * to downstream aoplications.\n+     * \n+     * @param ctx The vert.x test context.\n+     */\n+    @Test\n+    public void tesForwardedConnectionEventMessageHasTtlHeaderSet(final VertxTestContext ctx) {\n+\n+        // GIVEN a protocol adapter configured to send connection events\n+        final ConnectionEventProducer connectionEventProducer = new HonoEventConnectionEventProducer();\n+        adapter.setConnectionEventProducer(connectionEventProducer);\n+        final DownstreamSender connectionEventSender = mock(DownstreamSender.class);\n+        when(connectionEventSender.send(any(Message.class))).thenReturn(Future.succeededFuture());\n+        when(downstreamSenderFactory.getOrCreateEventSender(Constants.DEFAULT_TENANT)).thenReturn(Future.succeededFuture(connectionEventSender));\n+\n+        // WHEN a device, belonging to a tenant for which a max TTL is configured, connects to such an adapter\n+        final Device authenticatedDevice = new Device(Constants.DEFAULT_TENANT, \"4711\");\n+        final TenantClient tenantClient = mock(TenantClient.class);\n+        when(tenantClientFactory.getOrCreateTenantClient()).thenReturn(Future.succeededFuture(tenantClient));\n+        final TenantObject tenantObject = TenantObject.from(Constants.DEFAULT_TENANT, true);\n+        final ResourceLimits tenantLimits = mock(ResourceLimits.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDU2Nzc0Nw=="}, "originalCommit": {"oid": "5098391dc4743fb682c57cc2d0df5ee7153f32c2"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3367, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}