{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1NjkzMDAz", "number": 2320, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0OToxOVrOE8Rvng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNDoyMlrOE8SlaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjQwNzM0OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNTo0OToxOVrOH4TijA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzoyMDoyOFrOH4u5Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMjQ0NA==", "bodyText": "Note that there was a code change which leads to a different behaviour in Hono's AMQP adapter in 1.5.:\nPreviously the message was accepted (and the QoS was ignored), now it is rejected.\nIt's not specified as far as I can see how the adapter will react on this, but this may impact clients if they had accidentally set a qos-level HTTP header for events to AT_MOST_ONCE.", "url": "https://github.com/eclipse/hono/pull/2320#discussion_r528802444", "createdAt": "2020-11-23T15:49:19Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,37 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks an event with an unsupported device QoS level is rejected.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testEventIsRejectedForUnsupportedQosLevel(final VertxTestContext ctx) throws InterruptedException {\n+        final VertxTestContext setup = new VertxTestContext();\n+        final Tenant tenant = new Tenant();\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                .add(HttpHeaders.AUTHORIZATION, authorization)\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI)\n+                .add(Constants.HEADER_QOS_LEVEL, String.valueOf(QoS.AT_MOST_ONCE.ordinal()));\n+\n+        helper.registry.addDeviceForTenant(tenantId, tenant, deviceId, PWD).onComplete(setup.completing());\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        httpClient.create(\n+                getEndpointUri(),\n+                Buffer.buffer(\"hello\"),\n+                requestHeaders,\n+                ResponsePredicate.status(HttpURLConnection.HTTP_BAD_REQUEST))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e3ff7059707b89e796039f9cfc881d04bcdac9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyMzgwMg==", "bodyText": "you mean HTTP adapter, right?", "url": "https://github.com/eclipse/hono/pull/2320#discussion_r528823802", "createdAt": "2020-11-23T16:13:19Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,37 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks an event with an unsupported device QoS level is rejected.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testEventIsRejectedForUnsupportedQosLevel(final VertxTestContext ctx) throws InterruptedException {\n+        final VertxTestContext setup = new VertxTestContext();\n+        final Tenant tenant = new Tenant();\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                .add(HttpHeaders.AUTHORIZATION, authorization)\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI)\n+                .add(Constants.HEADER_QOS_LEVEL, String.valueOf(QoS.AT_MOST_ONCE.ordinal()));\n+\n+        helper.registry.addDeviceForTenant(tenantId, tenant, deviceId, PWD).onComplete(setup.completing());\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        httpClient.create(\n+                getEndpointUri(),\n+                Buffer.buffer(\"hello\"),\n+                requestHeaders,\n+                ResponsePredicate.status(HttpURLConnection.HTTP_BAD_REQUEST))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMjQ0NA=="}, "originalCommit": {"oid": "11e3ff7059707b89e796039f9cfc881d04bcdac9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI1MDYxOQ==", "bodyText": "Yes, of course \ud83d\ude05 Sorry for the confusion.", "url": "https://github.com/eclipse/hono/pull/2320#discussion_r529250619", "createdAt": "2020-11-24T07:20:28Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,37 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks an event with an unsupported device QoS level is rejected.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testEventIsRejectedForUnsupportedQosLevel(final VertxTestContext ctx) throws InterruptedException {\n+        final VertxTestContext setup = new VertxTestContext();\n+        final Tenant tenant = new Tenant();\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                .add(HttpHeaders.AUTHORIZATION, authorization)\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI)\n+                .add(Constants.HEADER_QOS_LEVEL, String.valueOf(QoS.AT_MOST_ONCE.ordinal()));\n+\n+        helper.registry.addDeviceForTenant(tenantId, tenant, deviceId, PWD).onComplete(setup.completing());\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        httpClient.create(\n+                getEndpointUri(),\n+                Buffer.buffer(\"hello\"),\n+                requestHeaders,\n+                ResponsePredicate.status(HttpURLConnection.HTTP_BAD_REQUEST))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgwMjQ0NA=="}, "originalCommit": {"oid": "11e3ff7059707b89e796039f9cfc881d04bcdac9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNjU0NTA1OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNDoyMlrOH4U48Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNjoxNDoyMlrOH4U48Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODgyNDU2MQ==", "bodyText": "please revert this change, we are already applying a factor > 1 to this value when running on test environment", "url": "https://github.com/eclipse/hono/pull/2320#discussion_r528824561", "createdAt": "2020-11-23T16:14:22Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/IntegrationTestSupport.java", "diffHunk": "@@ -73,7 +73,7 @@\n     /**\n      * The default number of milliseconds to wait for a response to an AMQP 1.0 performative.\n      */\n-    public static final int DEFAULT_AMQP_TIMEOUT = 400;\n+    public static final int DEFAULT_AMQP_TIMEOUT = 1000;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "11e3ff7059707b89e796039f9cfc881d04bcdac9"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2909, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}