{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxODM0NDk0", "number": 2203, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyNDoxMFrOEm7mKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyNDoxMFrOEm7mKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5MjU3NzY5OnYy", "diffSide": "RIGHT", "path": "adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQwODoyNDoxMFrOHXPTCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxMzo0NDoxNVrOHXbbjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyOTkzMQ==", "bodyText": "FMPOV we should not rely on the internal structure of the SaslResponseContext here but instead simply invoke something like SaslResponseContext.setTraceSamplingPriority(TenantObject) to improve encapsulation ...", "url": "https://github.com/eclipse/hono/pull/2203#discussion_r494129931", "createdAt": "2020-09-24T08:24:10Z", "author": {"login": "sophokles73"}, "path": "adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapter.java", "diffHunk": "@@ -197,6 +196,37 @@ protected void doStart(final Promise<Void> startPromise) {\n         .onComplete(startPromise);\n     }\n \n+    /**\n+     * Handles any operations that should be invoked as part of the authentication process after the credentials got\n+     * determined and before they get validated. Can be used to perform checks using the credentials and tenant\n+     * information before the potentially expensive credentials validation is done\n+     * <p>\n+     * The default implementation updates the trace sampling priority in the execution context tracing span.\n+     * <p>\n+     * Subclasses should override this method in order to perform additional operations after calling this super method.\n+     *\n+     * @param credentials The credentials.\n+     * @param executionContext The execution context, including the TenantObject.\n+     * @return A future indicating the outcome of the operation. A failed future will fail the authentication attempt.\n+     */\n+    protected Future<Void> handleBeforeCredentialsValidation(final DeviceCredentials credentials,\n+            final SaslResponseContext executionContext) {\n+\n+        final String tenantId = credentials.getTenantId();\n+        final Span span = executionContext.getTracingSpan();\n+        final String authId = credentials.getAuthId();\n+\n+        return getTenantConfiguration(tenantId, span.context())\n+                .compose(tenantObject -> {\n+                    TracingHelper.setDeviceTags(span, tenantId, null, authId);\n+                    final OptionalInt traceSamplingPriority = TenantTraceSamplingHelper.applyTraceSamplingPriority(\n+                            tenantObject, authId, span);\n+                    executionContext.getProtonConnection().attachments().set(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff505f99e91a1c939d2f29da00a361d7e557a3c8"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDMyODcxOA==", "bodyText": "Yes, however it's not so straightforward at the moment because the places where you would want to call getTraceSamplingPriority don't have the SaslResponseContext object available.\nI wanted to replace the various different objects being put into the connection attachments with one single \"ConnectionContext\" object anyway. I would rather do this in a follow-up PR then though.", "url": "https://github.com/eclipse/hono/pull/2203#discussion_r494328718", "createdAt": "2020-09-24T13:44:15Z", "author": {"login": "calohmn"}, "path": "adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/VertxBasedAmqpProtocolAdapter.java", "diffHunk": "@@ -197,6 +196,37 @@ protected void doStart(final Promise<Void> startPromise) {\n         .onComplete(startPromise);\n     }\n \n+    /**\n+     * Handles any operations that should be invoked as part of the authentication process after the credentials got\n+     * determined and before they get validated. Can be used to perform checks using the credentials and tenant\n+     * information before the potentially expensive credentials validation is done\n+     * <p>\n+     * The default implementation updates the trace sampling priority in the execution context tracing span.\n+     * <p>\n+     * Subclasses should override this method in order to perform additional operations after calling this super method.\n+     *\n+     * @param credentials The credentials.\n+     * @param executionContext The execution context, including the TenantObject.\n+     * @return A future indicating the outcome of the operation. A failed future will fail the authentication attempt.\n+     */\n+    protected Future<Void> handleBeforeCredentialsValidation(final DeviceCredentials credentials,\n+            final SaslResponseContext executionContext) {\n+\n+        final String tenantId = credentials.getTenantId();\n+        final Span span = executionContext.getTracingSpan();\n+        final String authId = credentials.getAuthId();\n+\n+        return getTenantConfiguration(tenantId, span.context())\n+                .compose(tenantObject -> {\n+                    TracingHelper.setDeviceTags(span, tenantId, null, authId);\n+                    final OptionalInt traceSamplingPriority = TenantTraceSamplingHelper.applyTraceSamplingPriority(\n+                            tenantObject, authId, span);\n+                    executionContext.getProtonConnection().attachments().set(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDEyOTkzMQ=="}, "originalCommit": {"oid": "ff505f99e91a1c939d2f29da00a361d7e557a3c8"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3077, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}