{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEyODIyNzcw", "number": 2275, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTowNjo1MFrOEztHmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0OTozMlrOEzwjxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjUyMDU2OnYy", "diffSide": "LEFT", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/AbstractVertxBasedCoapAdapter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTowNjo1MFrOHrGeUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTowNjo1MFrOHrGeUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1Njg4MQ==", "bodyText": "The waitForOutcome method parameter is now not used anymore in the method.", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r514956881", "createdAt": "2020-10-30T09:06:50Z", "author": {"login": "calohmn"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/AbstractVertxBasedCoapAdapter.java", "diffHunk": "@@ -695,7 +695,7 @@ protected final String getAuthId(final CoapExchange exchange) {\n             final String gatewayId = context.getGatewayId();\n             final String tenantId = context.getOriginDevice().getTenantId();\n             final String deviceId = context.getOriginDevice().getDeviceId();\n-            final MetricsTags.QoS qos = waitForOutcome ? MetricsTags.QoS.AT_LEAST_ONCE : MetricsTags.QoS.AT_MOST_ONCE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjUzNjI0OnYy", "diffSide": "RIGHT", "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMTozN1rOHrGn2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOToxMTozN1rOHrGn2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1OTMyMA==", "bodyText": "Optional.ofNullable not really needed here since exchange.getRequestOptions().getUriPathString() doesn't return null.", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r514959320", "createdAt": "2020-10-30T09:11:37Z", "author": {"login": "calohmn"}, "path": "adapters/coap-vertx-base/src/main/java/org/eclipse/hono/adapter/coap/CoapContext.java", "diffHunk": "@@ -416,4 +417,26 @@ private Integer getIntegerQueryParameter(final String parameterName) {\n     public QoS getRequestedQos() {\n         return isConfirmable() ? QoS.AT_LEAST_ONCE : QoS.AT_MOST_ONCE;\n     }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return An empty optional.\n+     */\n+    @Override\n+    public Optional<Duration> getTimeToLive() {\n+        return Optional.empty();\n+    }\n+\n+    /**\n+     * {@inheritDoc}\n+     *\n+     * @return The <em>Uri-Path</em> request option prefixed with a <em>/</em> character.\n+     */\n+    @Override\n+    public String getOrigAddress() {\n+        return Optional.ofNullable(exchange.getRequestOptions().getUriPathString())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNjc5MjkxOnYy", "diffSide": "RIGHT", "path": "adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNToyNVrOHrJEBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMDoyNToyNVrOHrJEBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk5OTMwMA==", "bodyText": "Always adding a second seems a bit strange here (would also cause \"limiting device provided TTL [{}ms] to max TTL\" log output if client always uses the maxTtl value here). In my view, using\nmessage.getTtl() >= 1000 ? message.getTtl() : 1000\nwould be better.", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r514999300", "createdAt": "2020-10-30T10:25:25Z", "author": {"login": "calohmn"}, "path": "adapters/amqp-vertx/src/main/java/org/eclipse/hono/adapter/amqp/impl/AmqpContext.java", "diffHunk": "@@ -106,6 +108,18 @@ final String getMessageContentType() {\n         return message.getContentType();\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public final Optional<Duration> getTimeToLive() {\n+        if (endpoint == EndpointType.EVENT && message.getTtl() > 0) {\n+            // make sure it is at least one second\n+            return Optional.of(Duration.ofMillis(message.getTtl() + 1000L));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyNzA4NDIxOnYy", "diffSide": "RIGHT", "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo0OTozMlrOHrLt2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjowNzozNFrOHrMSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Mjc3Ng==", "bodyText": "(Redundant String cast.)\nThe extra propertyBag check looks superfluous here since all MqttContext fields except timer are effectively final. (And there is a different content-type constant being used compared to the constructor code.)", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r515042776", "createdAt": "2020-10-30T11:49:32Z", "author": {"login": "calohmn"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java", "diffHunk": "@@ -152,11 +156,22 @@ public Device authenticatedDevice() {\n \n     /**\n      * Gets the content type of the message payload.\n+     * <p>\n+     * The type is the value set via {@link #setContentType(String)}.\n+     * Otherwise, the type is determined from the message topic's property\n+     * bag, if if contains a content type.\n+     * Otherwise, the {@linkplain MessageHelper#CONTENT_TYPE_OCTET_STREAM default\n+     * content type} is used.\n      *\n-     * @return The type or {@code null} if the content type is unknown.\n+     * @return The type of the message payload.\n      */\n     public String contentType() {\n-        return contentType;\n+        if (contentType != null) {\n+            return contentType;\n+        }\n+        return Optional.ofNullable(propertyBag)\n+                .flatMap(bag -> Optional.ofNullable((String) bag.getProperty(HttpHeaders.CONTENT_TYPE.toString())))\n+                .orElse(MessageHelper.CONTENT_TYPE_OCTET_STREAM);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1MjA1MA==", "bodyText": "Yes, I stumbled across that as well during the refactoring. I will remove the setContentType method and make the contentType field final, initializing it from the property bag during creation ...", "url": "https://github.com/eclipse/hono/pull/2275#discussion_r515052050", "createdAt": "2020-10-30T12:07:34Z", "author": {"login": "sophokles73"}, "path": "adapters/mqtt-vertx-base/src/main/java/org/eclipse/hono/adapter/mqtt/MqttContext.java", "diffHunk": "@@ -152,11 +156,22 @@ public Device authenticatedDevice() {\n \n     /**\n      * Gets the content type of the message payload.\n+     * <p>\n+     * The type is the value set via {@link #setContentType(String)}.\n+     * Otherwise, the type is determined from the message topic's property\n+     * bag, if if contains a content type.\n+     * Otherwise, the {@linkplain MessageHelper#CONTENT_TYPE_OCTET_STREAM default\n+     * content type} is used.\n      *\n-     * @return The type or {@code null} if the content type is unknown.\n+     * @return The type of the message payload.\n      */\n     public String contentType() {\n-        return contentType;\n+        if (contentType != null) {\n+            return contentType;\n+        }\n+        return Optional.ofNullable(propertyBag)\n+                .flatMap(bag -> Optional.ofNullable((String) bag.getProperty(HttpHeaders.CONTENT_TYPE.toString())))\n+                .orElse(MessageHelper.CONTENT_TYPE_OCTET_STREAM);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Mjc3Ng=="}, "originalCommit": {"oid": "227e38a04f5e87e50a8fd2c66a0c0c02a42bb8f0"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2842, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}