{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxMzE4NTQ5", "number": 1700, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODozNzoxOFrODXFTlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODozNzoxOFrODXFTlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1NTMwNzczOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/org/eclipse/hono/tracing/TracingHelper.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xMFQwODozNzoxOFrOFcNPAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xM1QxNjoyMzoxNlrOFc8hzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyMTI4MA==", "bodyText": "where is this used?", "url": "https://github.com/eclipse/hono/pull/1700#discussion_r365121280", "createdAt": "2020-01-10T08:37:18Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/tracing/TracingHelper.java", "diffHunk": "@@ -308,6 +312,71 @@ public static SpanContext extractSpanContext(final Tracer tracer, final MultiMap\n         return tracer.extract(Format.Builtin.TEXT_MAP, new MultiMapExtractAdapter(headers));\n     }\n \n+    /**\n+     * Injects a {@code SpanContext} as key-value pairs into a given operation.\n+     * <p>\n+     * This provides a generic way to serialize a span context in any kind of textual data.\n+     * See {@link #extractSpanContext(Tracer, Supplier)} for the corresponding method to deserialize the\n+     * context from that data.\n+     *\n+     * @param tracer The Tracer to use for injecting the context.\n+     * @param spanContext The context to inject.\n+     * @param keyValueConsumer The operation that will receive the key-value pairs representing the context.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public static void injectSpanContext(final Tracer tracer, final SpanContext spanContext,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2312ba43eef534427ea82509932d5ac0f786ae34"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyODE4NQ==", "bodyText": "Currently nowhere. But that method makes sense as the counterpart to the extractSpanContext(tracer, supplier) method and may be useful in external code using TracingHelper.", "url": "https://github.com/eclipse/hono/pull/1700#discussion_r365128185", "createdAt": "2020-01-10T08:54:49Z", "author": {"login": "calohmn"}, "path": "core/src/main/java/org/eclipse/hono/tracing/TracingHelper.java", "diffHunk": "@@ -308,6 +312,71 @@ public static SpanContext extractSpanContext(final Tracer tracer, final MultiMap\n         return tracer.extract(Format.Builtin.TEXT_MAP, new MultiMapExtractAdapter(headers));\n     }\n \n+    /**\n+     * Injects a {@code SpanContext} as key-value pairs into a given operation.\n+     * <p>\n+     * This provides a generic way to serialize a span context in any kind of textual data.\n+     * See {@link #extractSpanContext(Tracer, Supplier)} for the corresponding method to deserialize the\n+     * context from that data.\n+     *\n+     * @param tracer The Tracer to use for injecting the context.\n+     * @param spanContext The context to inject.\n+     * @param keyValueConsumer The operation that will receive the key-value pairs representing the context.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public static void injectSpanContext(final Tracer tracer, final SpanContext spanContext,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyMTI4MA=="}, "originalCommit": {"oid": "2312ba43eef534427ea82509932d5ac0f786ae34"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTg5NjE0Mg==", "bodyText": "ok, just wanted to make sure I'm not missing something ;-)", "url": "https://github.com/eclipse/hono/pull/1700#discussion_r365896142", "createdAt": "2020-01-13T16:23:16Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/tracing/TracingHelper.java", "diffHunk": "@@ -308,6 +312,71 @@ public static SpanContext extractSpanContext(final Tracer tracer, final MultiMap\n         return tracer.extract(Format.Builtin.TEXT_MAP, new MultiMapExtractAdapter(headers));\n     }\n \n+    /**\n+     * Injects a {@code SpanContext} as key-value pairs into a given operation.\n+     * <p>\n+     * This provides a generic way to serialize a span context in any kind of textual data.\n+     * See {@link #extractSpanContext(Tracer, Supplier)} for the corresponding method to deserialize the\n+     * context from that data.\n+     *\n+     * @param tracer The Tracer to use for injecting the context.\n+     * @param spanContext The context to inject.\n+     * @param keyValueConsumer The operation that will receive the key-value pairs representing the context.\n+     * @throws NullPointerException if any of the parameters is {@code null}.\n+     */\n+    public static void injectSpanContext(final Tracer tracer, final SpanContext spanContext,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NTEyMTI4MA=="}, "originalCommit": {"oid": "2312ba43eef534427ea82509932d5ac0f786ae34"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3389, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}