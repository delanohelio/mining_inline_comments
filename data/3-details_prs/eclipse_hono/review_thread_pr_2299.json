{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTIxNDk5MTY4", "number": 2299, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozMTo1MVrOE5WUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMjowMVrOE7hB5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI4NTcwMDExOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xNlQwOTozMTo1MVrOHzv9JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOFQxMzo1MDoxMlrOH1uqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTEyNA==", "bodyText": "I had imagined to add some assertions to the existing integration tests that we have for uploading telemetry/event messages to adapters. On the consumer side we would simply need to assert that the consumed messages contain the correct value for the qos application property, right?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r524025124", "createdAt": "2020-11-16T09:31:51Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,46 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks that device QoS level is ignored for events.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testDeviceQosLevelIsIgnored(final VertxTestContext ctx) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa28f017f58edac8b12c5b5a9765a438b18a95ee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDk5NzI0Ng==", "bodyText": "I took a look on how this could possibly be implemented.\nIn Hono's integration tests base classes there is a method called assertAdditionalMessageProperties. As far as I can see this could be the right place for verifying the qos application property.\nFor this an additional abstract method, say getExpectedQoS, could be defined in the base classes and overridden in the test classes.\nFor this approach to work each test subclass needs to focus on testing with a defined qos (as the abstract method can only be implemented once per subclass), like done in the MQTT Adapter tests: there is a subclass TelemetryMqttQoS1IT and TelemetryMqttQoS0IT.\nConsequently I would need to refactor test classes of all adapters so that they follow the pattern in the MQTT Adapter to put this to work.\nWDYT?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r524997246", "createdAt": "2020-11-17T09:15:46Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,46 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks that device QoS level is ignored for events.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testDeviceQosLevelIsIgnored(final VertxTestContext ctx) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTEyNA=="}, "originalCommit": {"oid": "fa28f017f58edac8b12c5b5a9765a438b18a95ee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNTAxMjgyMQ==", "bodyText": "I can also imagine adding an assertQosLevel(Message, int) method to the base test classes which is then invoked in addition to the assertAdditionalMessageProperties method. We would then pass the expected QoS level into the generic testUploadMessages method(s) where the downstream consumer is created. We would then not need to refactor all test classes ...", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r525012821", "createdAt": "2020-11-17T09:38:29Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,46 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks that device QoS level is ignored for events.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testDeviceQosLevelIsIgnored(final VertxTestContext ctx) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTEyNA=="}, "originalCommit": {"oid": "fa28f017f58edac8b12c5b5a9765a438b18a95ee"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjEwMTEwNQ==", "bodyText": "Turned out I couldn't implement this strictly following either my or your proposal, since the test cases the different adapters are implement following different approaches.\nI managed to find something I regard as a as-minimal-as-possible-change by fitting the approach to the test case at hand.", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526101105", "createdAt": "2020-11-18T13:50:12Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,46 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks that device QoS level is ignored for events.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testDeviceQosLevelIsIgnored(final VertxTestContext ctx) throws InterruptedException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNDAyNTEyNA=="}, "originalCommit": {"oid": "fa28f017f58edac8b12c5b5a9765a438b18a95ee"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY3MTY1OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMDowM1rOH2VsFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxMDowM1rOH2VsFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0MDUwMQ==", "bodyText": "can we rename qos to expectedQos?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526740501", "createdAt": "2020-11-19T10:10:03Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "diffHunk": "@@ -81,6 +81,10 @@ private void assertMessageProperties(final VertxTestContext ctx, final Message m\n         assertAdditionalMessageProperties(ctx, msg);\n     }\n \n+    private void assertQosLevel(final VertxTestContext ctx, final Message msg, final ProtonQoS qos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjY5ODAyOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttPublishTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDoxNjoxOVrOH2V8Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo0NjowMVrOH2nxxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NDY2Mw==", "bodyText": "???", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526744663", "createdAt": "2020-11-19T10:16:19Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttPublishTestBase.java", "diffHunk": "@@ -77,6 +85,7 @@\n      *         message. The future will succeed if the message has been\n      *         published successfully.\n      */\n+    // here", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNjg3MQ==", "bodyText": "Thanks for spotting that was a \"note\" I overlooked before committing...", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r527036871", "createdAt": "2020-11-19T16:46:01Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttPublishTestBase.java", "diffHunk": "@@ -77,6 +85,7 @@\n      *         message. The future will succeed if the message has been\n      *         published successfully.\n      */\n+    // here", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc0NDY2Mw=="}, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc1OTcxOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozMTozMVrOH2WiWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozMTozMVrOH2WiWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NDM5NQ==", "bodyText": "qos -> expectedQos", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526754395", "createdAt": "2020-11-19T10:31:31Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/coap/CoapTestBase.java", "diffHunk": "@@ -922,6 +926,25 @@ private void assertMessageProperties(final VertxTestContext ctx, final Message m\n         assertAdditionalMessageProperties(ctx, msg);\n     }\n \n+    private QoS getExpectedQoS(final QoS qos) {\n+        if (qos != null) {\n+            return qos;\n+        }\n+\n+        switch (getMessageType()) {\n+            case CON:\n+                return QoS.AT_LEAST_ONCE;\n+            case NON:\n+                return QoS.AT_MOST_ONCE;\n+            default:\n+                throw new IllegalArgumentException(\"Either QoS must be non-null or message type must be CON or NON!\");\n+        }\n+    }\n+\n+    private void  assertQosLevel(final VertxTestContext ctx, final Message msg, final QoS qos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc2MTU4OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/coap/TelemetryCoapIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozMTo1M1rOH2WjWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozMTo1M1rOH2WjWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NDY0OQ==", "bodyText": "indentation?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526754649", "createdAt": "2020-11-19T10:31:53Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/coap/TelemetryCoapIT.java", "diffHunk": "@@ -80,7 +81,7 @@ protected Type getMessageType() {\n      * @throws InterruptedException if the test fails.\n      */\n     @Test\n-    public void testUploadUsingQoS1(final VertxTestContext ctx) throws InterruptedException {\n+        public void testUploadUsingQoS1(final VertxTestContext ctx) throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc3MDU5OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNDowN1rOH2WonA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNDowN1rOH2WonA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NTk5Ng==", "bodyText": "qos -> expectedQos", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526755996", "createdAt": "2020-11-19T10:34:07Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/HttpTestBase.java", "diffHunk": "@@ -1241,6 +1265,10 @@ private void assertMessageProperties(final VertxTestContext ctx, final Message m\n         });\n     }\n \n+    private void  assertQosLevel(final VertxTestContext ctx, final Message msg, final QoS qos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc3MjI4OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNDozMVrOH2Wplw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozNDozMVrOH2Wplw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1NjI0Nw==", "bodyText": "this is not needed anymore, right?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526756247", "createdAt": "2020-11-19T10:34:31Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/http/EventHttpIT.java", "diffHunk": "@@ -52,4 +63,47 @@ protected void assertAdditionalMessageProperties(final Message msg) {\n \n         assertThat(msg.isDurable()).isTrue();\n     }\n+\n+    /**\n+     * Checks that device QoS level is ignored for events.\n+     *\n+     * @param ctx The test context.\n+     *\n+     * @throws InterruptedException if the test fails.\n+     */\n+    @Test\n+    public void testDeviceQosLevelIsIgnored(final VertxTestContext ctx) throws InterruptedException {\n+        final VertxTestContext setup = new VertxTestContext();\n+        final Tenant tenant = new Tenant();\n+        final MultiMap requestHeaders = MultiMap.caseInsensitiveMultiMap()\n+                .add(HttpHeaders.CONTENT_TYPE, \"text/plain\")\n+                .add(HttpHeaders.AUTHORIZATION, authorization)\n+                .add(HttpHeaders.ORIGIN, ORIGIN_URI)\n+                .add(Constants.HEADER_QOS_LEVEL, String.valueOf(QoS.AT_MOST_ONCE.ordinal()));\n+\n+        helper.registry.addDeviceForTenant(tenantId, tenant, deviceId, PWD).onComplete(setup.completing());\n+\n+        assertThat(setup.awaitCompletion(5, TimeUnit.SECONDS)).isTrue();\n+        if (setup.failed()) {\n+            ctx.failNow(setup.causeOfFailure());\n+            return;\n+        }\n+\n+        testUploadMessages(ctx, tenantId,\n+                msg -> {\n+                    ctx.verify(() -> {\n+                        assertThat(msg.getApplicationProperties().getValue().get(MessageHelper.APP_PROPERTY_QOS))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwMjc5MjU0OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttPublishTestBase.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMDozOToxNVrOH2W1UQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNjo0Njo0M1rOH2n0fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTI0OQ==", "bodyText": "then it is probably not the expected QoS but simply the QoS, right?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r526759249", "createdAt": "2020-11-19T10:39:15Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttPublishTestBase.java", "diffHunk": "@@ -66,6 +67,13 @@\n     // <MQTT message ID, PUBACK handler>\n     private final Map<Integer, Handler<Integer>> pendingMessages = new HashMap<>();\n \n+    /**\n+     * Gets the QoS level with which the MQTT message shall be sent.\n+     *\n+     * @return The QoS level.\n+     */\n+    protected abstract MqttQoS getExpectedQos();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzAzNzU2Nw==", "bodyText": "Actually it is both as the QoS to be expected should be the one with the message was sent. I am fine with renaming though.", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r527037567", "createdAt": "2020-11-19T16:46:43Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/mqtt/MqttPublishTestBase.java", "diffHunk": "@@ -66,6 +67,13 @@\n     // <MQTT message ID, PUBACK handler>\n     private final Map<Integer, Handler<Integer>> pendingMessages = new HashMap<>();\n \n+    /**\n+     * Gets the QoS level with which the MQTT message shall be sent.\n+     *\n+     * @return The QoS level.\n+     */\n+    protected abstract MqttQoS getExpectedQos();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjc1OTI0OQ=="}, "originalCommit": {"oid": "71e90f11c2ecd0c75dc5af73f6860eb13bcf774f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODQyNTk5OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMjoxMjowMVrOH3NRaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNjoxNjo0MFrOH3WW7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MTE3OQ==", "bodyText": "the QoS of the sender is being set when opening the sender link. Setting this property after the link has been established has no impact.", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r527651179", "createdAt": "2020-11-20T12:12:01Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "diffHunk": "@@ -355,6 +360,7 @@ private void testUploadMessages(\n             msg.setAddress(getEndpointName());\n             final Promise<?> sendingComplete = Promise.promise();\n             final Handler<ProtonSender> sendMsgHandler = replenishedSender -> {\n+                replenishedSender.setQoS(senderQoS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4040dbd77318a3d7103455fdcc4d6200f0a336b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4OTA3Nw==", "bodyText": "While it might be true what you are saying, setting this property does have an impact:\nIf you comment this line the test will actually fail, because the forwarded application QoS property does not match the expected value.\nIn order to double check I inserted two debug log statements in VertxBasedAmqpProtocolAdapter on line 1112 and 1116 printing out whether the message is sent as AT_LEAST_ONCE or as AT_MOST_ONCE.\nWhen also removing the AT_LEAST_ONCE QoS in TelemetryAmqpIT's senderQoSTypes() method I observe that all messages are sent with AT_LEAST_ONCE QoS in the AMQP protocol adapter's log and also the test fails.\nI ran the test with: mvn verify -Prun-tests,jaeger,useRunningContainers -Ddocker.keepRunning -Dit.test=TelemetryAmqpIT#testUploadMessagesUsingSaslPlain\nMaybe this is a side-effect? Or is it a problem with my machine?", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r527689077", "createdAt": "2020-11-20T13:27:02Z", "author": {"login": "fkaltner"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "diffHunk": "@@ -355,6 +360,7 @@ private void testUploadMessages(\n             msg.setAddress(getEndpointName());\n             final Promise<?> sendingComplete = Promise.promise();\n             final Handler<ProtonSender> sendMsgHandler = replenishedSender -> {\n+                replenishedSender.setQoS(senderQoS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MTE3OQ=="}, "originalCommit": {"oid": "f4040dbd77318a3d7103455fdcc4d6200f0a336b"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzgwMDA0Ng==", "bodyText": "Oh, you are working on the 1.3.x branch. In 1.3.x the AMQP adapter only supports opening link with sender-settle-mode unsettled (see \n  \n    \n      hono/tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpAdapterTestBase.java\n    \n    \n         Line 123\n      in\n      c63b042\n    \n    \n    \n    \n\n        \n          \n           protected Future<ProtonSender> createProducer(final String target, final ProtonQoS senderQos) { \n        \n    \n  \n\n). We are therefore not able to send settled messages from the test case. I guess it only makes sense to check for the correct QoS level in downstream messages for message being sent with AT_LEAST_ONCE semantics ...\nFor 1.5.0, we have changed the AMQP adapter to now also accept links with snd-settle-mode settled, your test should therefore work on master. However, I am afraid that it will also not work on 1.4.x", "url": "https://github.com/eclipse/hono/pull/2299#discussion_r527800046", "createdAt": "2020-11-20T16:16:40Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/amqp/AmqpUploadTestBase.java", "diffHunk": "@@ -355,6 +360,7 @@ private void testUploadMessages(\n             msg.setAddress(getEndpointName());\n             final Promise<?> sendingComplete = Promise.promise();\n             final Handler<ProtonSender> sendMsgHandler = replenishedSender -> {\n+                replenishedSender.setQoS(senderQoS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY1MTE3OQ=="}, "originalCommit": {"oid": "f4040dbd77318a3d7103455fdcc4d6200f0a336b"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2881, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}