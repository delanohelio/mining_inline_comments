{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2OTQ0OTE5", "number": 1722, "title": "[#1716] Add new resource-limits based on the device connection duration", "bodyText": "This PR is for the issue #1716. This PR extends the Tenant API to support a new additional resource-limit configuration for device connection duration. Also the ResourceLimitChecks API has been extended to validate if the max connection duration of a tenant is reached or not.\nNB: This PR has been raised even though the implementation is not complete, so that the concept can be reviewed at an early stage.", "createdAt": "2020-01-24T17:42:26Z", "url": "https://github.com/eclipse/hono/pull/1722", "merged": true, "mergeCommit": {"oid": "18d410953daa47e74c70de10540433a838617e69"}, "closed": true, "closedAt": "2020-01-30T11:08:43Z", "author": {"login": "kaniyan"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-YXwNAFqTM0ODQ4OTYwMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_YebfgFqTM1MDc0MDkwOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4NDg5NjAx", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-348489601", "createdAt": "2020-01-27T08:15:32Z", "commit": {"oid": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODoxNTozMlrOFh6bVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QwODoyMTo0OVrOFh6jEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNDU5OQ==", "bodyText": "this should also have a default implementation in order to not break backward compatibility ...", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371104599", "createdAt": "2020-01-27T08:15:32Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/ResourceLimitChecks.java", "diffHunk": "@@ -86,4 +86,20 @@\n      *         if the check could not be performed.\n      */\n     Future<Boolean> isMessageLimitReached(TenantObject tenantObject, long payloadSize, SpanContext spanContext);\n+\n+    /**\n+     * Checks if the maximum limit of device connection duration configured for a tenant\n+     * have been reached.\n+     *\n+     * @param tenantObject The tenant configuration to check the limit against.\n+     * @param spanContext The currently active OpenTracing span context that is used to\n+     *                    trace the limits verification or {@code null}\n+     *                    if no span is currently active.\n+     * @return A future indicating the outcome of the check.\n+     *         <p>\n+     *         The future will be failed with a {@link ServiceInvocationException}\n+     *         if the check could not be performed.\n+     * @throws NullPointerException if the tenant object is null.\n+     */\n+    Future<Boolean> isConnectionDurationLimitReached(TenantObject tenantObject, SpanContext spanContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNTQ0Mw==", "bodyText": "I wonder if seconds is an appropriate unit here. What will be typical values?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371105443", "createdAt": "2020-01-27T08:18:15Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -715,6 +717,25 @@ components:\n             \"period\":\n                $ref: '#/components/schemas/Period'\n \n+      ConnectionDuration:\n+         type: object\n+         additionalProperties: false\n+         required:\n+            - effective-since\n+         properties:\n+            \"effective-since\":\n+               type: string\n+               format: date-time\n+               description: The date-time on which the connection duration limit came into effect.\n+            \"max-seconds\":\n+               type: integer\n+               default: -1\n+               description: The maximum number of seconds to be allowed for a tenant for the", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTEwNjU3OQ==", "bodyText": "this looks very similar to DataVolumePeriod, doesn't it?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371106579", "createdAt": "2020-01-27T08:21:49Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ResourceLimitsPeriod.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The period definition corresponding to a resource limit for a tenant.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ResourceLimitsPeriod {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0b531467a5efe6a3d0ad01f59c7309d09e5b5fae", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/0b531467a5efe6a3d0ad01f59c7309d09e5b5fae", "committedDate": "2020-01-24T16:51:39Z", "message": "[#1716] Extend resource limit checks for connection duration.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}, "afterCommit": {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "committedDate": "2020-01-27T12:15:40Z", "message": "[#1716] Extend resource limit checks for connection duration.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ4Njc5OTc5", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-348679979", "createdAt": "2020-01-27T13:59:04Z", "commit": {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxMzo1OTowNVrOFiDh5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yN1QxNDowMTozNlrOFiDnOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1MzczNQ==", "bodyText": "did you omit a getter/setter for period by intention?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371253735", "createdAt": "2020-01-27T13:59:05Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(TenantConstants.FIELD_PERIOD)\n+    private ResourceLimitsPeriod period;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NDExOA==", "bodyText": "isn't there a constant for this value? Is 0 a reasonable value?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371254118", "createdAt": "2020-01-27T13:59:47Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(TenantConstants.FIELD_PERIOD)\n+    private ResourceLimitsPeriod period;\n+\n+    /**\n+     * Gets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @return The instant on which the connection duration limit came into effective or \n+     *         {@code null} if not set.\n+     */\n+    public final Instant getEffectiveSince() {\n+        return effectiveSince;\n+    }\n+\n+    /**\n+     * Sets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @param effectiveSince the point in time on which the connection duration limit came into effect\n+     *                       and it comply to the {@link DateTimeFormatter#ISO_OFFSET_DATE_TIME}.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setEffectiveSince(final Instant effectiveSince) {\n+        this.effectiveSince = effectiveSince;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum device connection duration in minutes to be allowed for the time period \n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @return The maximum number of minutes or {@link TenantConstants#UNLIMITED_MINUTES}\n+     *         if not set.\n+     */\n+    public final long getMaxMinutes(){\n+        return maxMinutes;\n+    }\n+\n+    /**\n+     * Sets the maximum device connection duration in minutes to be allowed for the time period\n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @param maxMinutes The maximum connection duration in minutes to be allowed.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the maximum number of minutes is set to less than -1.\n+     */\n+    public final ConnectionDuration setMaxMinutes(final long maxMinutes) {\n+        if (maxMinutes < -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTI1NTA5OQ==", "bodyText": "I would rather have the name indicate the purpose than the unit of the argument, e.g. setMaxDuration. The parameter name and JavaDoc already indicate the unit, don't they?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371255099", "createdAt": "2020-01-27T14:01:36Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(TenantConstants.FIELD_PERIOD)\n+    private ResourceLimitsPeriod period;\n+\n+    /**\n+     * Gets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @return The instant on which the connection duration limit came into effective or \n+     *         {@code null} if not set.\n+     */\n+    public final Instant getEffectiveSince() {\n+        return effectiveSince;\n+    }\n+\n+    /**\n+     * Sets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @param effectiveSince the point in time on which the connection duration limit came into effect\n+     *                       and it comply to the {@link DateTimeFormatter#ISO_OFFSET_DATE_TIME}.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setEffectiveSince(final Instant effectiveSince) {\n+        this.effectiveSince = effectiveSince;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum device connection duration in minutes to be allowed for the time period \n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @return The maximum number of minutes or {@link TenantConstants#UNLIMITED_MINUTES}\n+     *         if not set.\n+     */\n+    public final long getMaxMinutes(){\n+        return maxMinutes;\n+    }\n+\n+    /**\n+     * Sets the maximum device connection duration in minutes to be allowed for the time period\n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @param maxMinutes The maximum connection duration in minutes to be allowed.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the maximum number of minutes is set to less than -1.\n+     */\n+    public final ConnectionDuration setMaxMinutes(final long maxMinutes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f"}, "originalPosition": 81}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/99c2910ae0aeeccd470585b7e8d8d2a96a7a3f0f", "committedDate": "2020-01-27T12:15:40Z", "message": "[#1716] Extend resource limit checks for connection duration.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}, "afterCommit": {"oid": "ba13983fe371c90f8da18041aea5be6bcc57fc61", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/ba13983fe371c90f8da18041aea5be6bcc57fc61", "committedDate": "2020-01-28T09:25:53Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MjQ4ODEx", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-349248811", "createdAt": "2020-01-28T09:58:34Z", "commit": {"oid": "ba13983fe371c90f8da18041aea5be6bcc57fc61"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwOTo1ODozNVrOFifDSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxMDowMjoxMFrOFifK_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNDY0OQ==", "bodyText": "IMHO this will throw a NullpointerException if the period property is not set (it is defined as optional if I am not mistaken) ...", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371704649", "createdAt": "2020-01-28T09:58:35Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -292,6 +296,108 @@ private Span createSpan(final String name, final SpanContext parent, final Tenan\n                 });\n     }\n \n+    @Override\n+    public Future<Boolean> isConnectionDurationLimitReached(\n+            final TenantObject tenant,\n+            final SpanContext spanContext) {\n+\n+        Objects.requireNonNull(tenant);\n+\n+        final Span span = createSpan(\"verify connection duration limit\", spanContext, tenant);\n+        final Map<String, Object> items = new HashMap<>();\n+\n+        final Promise<Boolean> result = Promise.promise();\n+\n+        if (tenant.getResourceLimits() == null) {\n+            items.put(Fields.EVENT, \"no resource limits configured\");\n+            log.trace(\"no resource limits configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else if (tenant.getResourceLimits().getConnectionDuration() == null) {\n+            items.put(Fields.EVENT, \"no connection duration limit configured\");\n+            log.trace(\"no connection duration limit configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else {\n+            checkConnectionDurationLimit(tenant, items, span, result);\n+        }\n+\n+        return result.future()\n+                .map(b -> {\n+                    items.put(\"limit exceeded\", b);\n+                    span.log(items);\n+                    span.finish();\n+                    return b;\n+                });\n+    }\n+\n+    private void checkConnectionDurationLimit(final TenantObject tenant, final Map<String, Object> items,\n+            final Span span, final Promise<Boolean> result) {\n+        final ConnectionDuration connectionDurationConfig = tenant.getResourceLimits().getConnectionDuration();\n+        final long maxConnectionDurationInMinutes = connectionDurationConfig.getMaxMinutes();\n+        final Instant effectiveSince = connectionDurationConfig.getEffectiveSince();\n+        final PeriodMode periodMode = PeriodMode.from(connectionDurationConfig.getPeriod().getMode());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba13983fe371c90f8da18041aea5be6bcc57fc61"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTcwNjYyMA==", "bodyText": "if this is always the current instant then I do not think that you need to pass it in as a parameter, do you?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371706620", "createdAt": "2020-01-28T10:02:10Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -470,69 +576,61 @@ private Long extractLongValue(final JsonObject response, final Span span) {\n     }\n \n     /**\n-     * Calculates the data volume (in bytes) that is allowed for a tenant for \n-     * the current period based on the mode defined by \n-     * {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * Calculates the effective resource limit for a tenant for the current period from the configured values.\n      * <p>\n-     * In <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n-     * first day of the month then the allowed data volume for the tenant is \n-     * calculated as below. For rest of the months and the <em>days</em> mode,\n-     * the maxBytes defined by {@link TenantConstants#FIELD_MAX_BYTES} is used directly.\n+     * In the <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n+     * first day of the month then the effective resource limit for the tenant is \n+     * calculated as below.\n      * <pre>\n-     *             maxBytes \n+     *             configured limit \n      *   ---------------------------------- x No. of days from effectiveSince till lastDay of the targetDateMonth.\n      *    No. of days in the current month\n      * </pre>\n      * <p>\n-     * \n-     * @param effectiveSince The point of time on which the data volume limit \n-     *                       came into effect.\n-     * @param targetDateTime The target point of time used for the data usage period \n-     *                       calculation.\n+     * For rest of the months and the <em>days</em> mode, the configured limit is used directly.\n+     *\n+     * @param effectiveSince The point of time on which the given resource limit came into effect.\n+     * @param currentDateTime The current date and time.\n      * @param mode The mode of the period. \n-     * @param maxBytes The maximum allowed bytes defined in configuration by \n-     *                 {@link TenantConstants#FIELD_MAX_BYTES}. \n-     * @return The allowed data-volume in bytes.\n+     * @param configuredLimit The configured limit. \n+     * @return The effective resource limit that has been calculated.\n      */\n-    long calculateDataVolume(\n+    long calculateEffectiveLimit(\n             final OffsetDateTime effectiveSince,\n-            final OffsetDateTime targetDateTime,\n+            final OffsetDateTime currentDateTime,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba13983fe371c90f8da18041aea5be6bcc57fc61"}, "originalPosition": 187}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ba13983fe371c90f8da18041aea5be6bcc57fc61", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/ba13983fe371c90f8da18041aea5be6bcc57fc61", "committedDate": "2020-01-28T09:25:53Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}, "afterCommit": {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/0e458cab947321fcc78a11ad2b25e5249ff69b89", "committedDate": "2020-01-28T13:25:20Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDQwMzE0", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-349440314", "createdAt": "2020-01-28T14:57:50Z", "commit": {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDo1Nzo1MFrOFioHWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNTowNTozOVrOFioatA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1MzE0NQ==", "bodyText": "if period is mandatory, can you set it to null?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371853145", "createdAt": "2020-01-28T14:57:50Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ConnectionDuration.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.eclipse.hono.annotation.HonoTimestamp;\n+\n+import java.time.Instant;\n+import java.time.format.DateTimeFormatter;\n+\n+/**\n+ * The resource limits definition corresponding to the connection duration.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ConnectionDuration {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_EFFECTIVE_SINCE, required = true)\n+    @HonoTimestamp\n+    private Instant effectiveSince;\n+\n+    @JsonProperty(TenantConstants.FIELD_MAX_MINUTES)\n+    private long maxMinutes = TenantConstants.UNLIMITED_MINUTES;\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD, required = true)\n+    private ResourceLimitsPeriod period;\n+\n+    /**\n+     * Gets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @return The instant on which the connection duration limit came into effective or \n+     *         {@code null} if not set.\n+     */\n+    public final Instant getEffectiveSince() {\n+        return effectiveSince;\n+    }\n+\n+    /**\n+     * Sets the point in time on which the connection duration limit came into effect.\n+     *\n+     * @param effectiveSince the point in time on which the connection duration limit came into effect\n+     *                       and it comply to the {@link DateTimeFormatter#ISO_OFFSET_DATE_TIME}.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setEffectiveSince(final Instant effectiveSince) {\n+        this.effectiveSince = effectiveSince;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the maximum device connection duration in minutes to be allowed for the time period \n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @return The maximum connection duration in minutes or {@link TenantConstants#UNLIMITED_MINUTES}\n+     *         if not set.\n+     */\n+    public final long getMaxMinutes(){\n+        return maxMinutes;\n+    }\n+\n+    /**\n+     * Sets the maximum device connection duration in minutes to be allowed for the time period\n+     * defined by the {@link TenantConstants#FIELD_PERIOD_MODE} and \n+     * {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}.\n+     *\n+     * @param maxMinutes The maximum connection duration in minutes to be allowed.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the maximum number of minutes is set to less than \n+     *                                  {@link TenantConstants#UNLIMITED_MINUTES}.\n+     */\n+    public final ConnectionDuration setMaxDuration(final long maxMinutes) {\n+        if (maxMinutes < TenantConstants.UNLIMITED_MINUTES) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Maximum minutes must be set to value >= %s\", TenantConstants.UNLIMITED_MINUTES));\n+        }\n+        this.maxMinutes = maxMinutes;\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the period for the connection duration calculation.\n+     *\n+     * @return The period for the connection duration calculation.\n+     */\n+    public final ResourceLimitsPeriod getPeriod() {\n+        return period;\n+    }\n+\n+    /**\n+     * Sets the period for the connection duration calculation.\n+     *\n+     * @param period The period for the connection duration calculation.\n+     * @return a reference to this for fluent use.\n+     */\n+    public final ConnectionDuration setPeriod(final ResourceLimitsPeriod period) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1NDQ1Nw==", "bodyText": "can you set this to null?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371854457", "createdAt": "2020-01-28T14:59:48Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ResourceLimitsPeriod.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * The period definition corresponding to a resource limit for a tenant.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ResourceLimitsPeriod {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_MODE, required = true)\n+    private String mode;\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_NO_OF_DAYS)\n+    private int noOfDays;\n+\n+    /**\n+     * Gets the mode of period for resource limit calculation.\n+     *\n+     * @return The mode of period for resource limit calculation.\n+     */\n+    public final String getMode() {\n+        return mode;\n+    }\n+\n+    /**\n+     * Sets the mode of period for resource limit calculation.\n+     *\n+     * @param mode The mode of period for resource limit calculation.\n+     * @return  a reference to this for fluent use.\n+     */\n+    public final ResourceLimitsPeriod setMode(final String mode) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTg1ODEwMA==", "bodyText": "could this method be moved to ResourceLimitPeriod? It doesn't seem to be tied to a Prometheus specific implementation of checks but provides a rather generic helper, doesn't it?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r371858100", "createdAt": "2020-01-28T15:05:39Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -470,69 +576,61 @@ private Long extractLongValue(final JsonObject response, final Span span) {\n     }\n \n     /**\n-     * Calculates the data volume (in bytes) that is allowed for a tenant for \n-     * the current period based on the mode defined by \n-     * {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * Calculates the effective resource limit for a tenant for the given period from the configured values.\n      * <p>\n-     * In <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n-     * first day of the month then the allowed data volume for the tenant is \n-     * calculated as below. For rest of the months and the <em>days</em> mode,\n-     * the maxBytes defined by {@link TenantConstants#FIELD_MAX_BYTES} is used directly.\n+     * In the <em>monthly</em> mode, if the effectiveSince date doesn't fall on the \n+     * first day of the month then the effective resource limit for the tenant is \n+     * calculated as below.\n      * <pre>\n-     *             maxBytes \n+     *             configured limit \n      *   ---------------------------------- x No. of days from effectiveSince till lastDay of the targetDateMonth.\n      *    No. of days in the current month\n      * </pre>\n      * <p>\n-     * \n-     * @param effectiveSince The point of time on which the data volume limit \n-     *                       came into effect.\n-     * @param targetDateTime The target point of time used for the data usage period \n-     *                       calculation.\n+     * For rest of the months and the <em>days</em> mode, the configured limit is used directly.\n+     *\n+     * @param effectiveSince The point of time on which the given resource limit came into effect.\n+     * @param targetDateTime The target date and time.\n      * @param mode The mode of the period. \n-     * @param maxBytes The maximum allowed bytes defined in configuration by \n-     *                 {@link TenantConstants#FIELD_MAX_BYTES}. \n-     * @return The allowed data-volume in bytes.\n+     * @param configuredLimit The configured limit. \n+     * @return The effective resource limit that has been calculated.\n      */\n-    long calculateDataVolume(\n+    long calculateEffectiveLimit(\n             final OffsetDateTime effectiveSince,\n             final OffsetDateTime targetDateTime,\n             final PeriodMode mode,\n-            final long maxBytes) {\n+            final long configuredLimit) {\n         if (PeriodMode.MONTHLY.equals(mode)\n-                && maxBytes > 0\n+                && configuredLimit > 0\n                 && !targetDateTime.isBefore(effectiveSince)\n                 && YearMonth.from(targetDateTime).equals(YearMonth.from(effectiveSince))\n                 && effectiveSince.getDayOfMonth() != 1) {\n             final OffsetDateTime lastDayOfMonth = effectiveSince.with(TemporalAdjusters.lastDayOfMonth());\n             final long daysBetween = ChronoUnit.DAYS\n                     .between(effectiveSince, lastDayOfMonth) + 1;\n-            return Double.valueOf(Math.ceil(daysBetween * maxBytes / lastDayOfMonth.getDayOfMonth())).longValue();\n+            return Double.valueOf(Math.ceil(daysBetween * configuredLimit / lastDayOfMonth.getDayOfMonth()))\n+                    .longValue();\n         }\n-        return maxBytes;\n+        return configuredLimit;\n     }\n \n     /**\n-     * Calculates the period for which the data usage is to be retrieved from the\n-     * prometheus server based on the mode defined by \n+     * Calculates the period for which the resource usage like volume of used data, connection duration etc. \n+     * is to be retrieved from the Prometheus server based on the mode defined by \n      * {@link TenantConstants#FIELD_PERIOD_MODE}.\n      *\n-     * @param effectiveSince The point of time on which the data volume limit came\n-     *                      into effect.\n-     * @param targetDateTime The target point of time used for the data usage period \n-     *                       calculation.\n-     * @param mode The mode of the period defined by\n-     *                   {@link TenantConstants#FIELD_PERIOD_MODE}.\n-     * @param periodInDays The number of days defined by \n-     *                     {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}. \n-     * @return The period in days for which the data usage is to be calculated.\n+     * @param effectiveSince The point of time on which the resource limit came into effect.\n+     * @param currentDateTime The current date and time used for the resource usage period calculation.\n+     * @param mode The mode of the period defined by {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * @param periodInDays The number of days defined by {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}. \n+     * @return The period in days for which the resource usage is to be calculated.\n      */\n-    long calculateDataUsagePeriod(\n+    long calculateResourceUsagePeriod(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89"}, "originalPosition": 230}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0e458cab947321fcc78a11ad2b25e5249ff69b89", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/0e458cab947321fcc78a11ad2b25e5249ff69b89", "committedDate": "2020-01-28T13:25:20Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch-si.com>"}, "afterCommit": {"oid": "dd5b8cd4ca94c1bb394aae281da2fcd013fd7a3d", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/dd5b8cd4ca94c1bb394aae281da2fcd013fd7a3d", "committedDate": "2020-01-29T12:25:08Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd5b8cd4ca94c1bb394aae281da2fcd013fd7a3d", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/dd5b8cd4ca94c1bb394aae281da2fcd013fd7a3d", "committedDate": "2020-01-29T12:25:08Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}, "afterCommit": {"oid": "5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "committedDate": "2020-01-29T12:41:18Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMDc4NDA1", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-350078405", "createdAt": "2020-01-29T12:46:01Z", "commit": {"oid": "5ceeaf604d524ff1b57ba7068ee354b4257b8dcd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0NjowMVrOFjHImA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxMjo0NjowMVrOFjHImA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjM2MTM2OA==", "bodyText": "I would have expected this method to not be final but instead operate on the instance's fields instead of passing in the mode and periodInDays or doesn't that work?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372361368", "createdAt": "2020-01-29T12:46:01Z", "author": {"login": "sophokles73"}, "path": "core/src/main/java/org/eclipse/hono/util/ResourceLimitsPeriod.java", "diffHunk": "@@ -0,0 +1,172 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.util;\n+\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+import java.time.OffsetDateTime;\n+import java.time.YearMonth;\n+import java.time.temporal.ChronoUnit;\n+import java.util.Objects;\n+\n+/**\n+ * The period definition corresponding to a resource limit for a tenant.\n+ */\n+@JsonInclude(JsonInclude.Include.NON_DEFAULT)\n+public class ResourceLimitsPeriod {\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_MODE, required = true)\n+    private String mode;\n+\n+    @JsonProperty(value = TenantConstants.FIELD_PERIOD_NO_OF_DAYS)\n+    private int noOfDays;\n+\n+    /**\n+     * Gets the mode of period for resource limit calculation.\n+     *\n+     * @return The mode of period for resource limit calculation.\n+     */\n+    public final String getMode() {\n+        return mode;\n+    }\n+\n+    /**\n+     * Sets the mode of period for resource limit calculation.\n+     *\n+     * @param mode The mode of period for resource limit calculation.\n+     * @return  a reference to this for fluent use.\n+     * @throws NullPointerException if mode is {@code null}.\n+     */\n+    public final ResourceLimitsPeriod setMode(final String mode) {\n+        this.mode = Objects.requireNonNull(mode);\n+        return this;\n+    }\n+\n+    /**\n+     * Gets the number of days for which resource usage is calculated.\n+     *\n+     * @return The number of days for a resource limit calculation.\n+     */\n+    public final int getNoOfDays() {\n+        return noOfDays;\n+    }\n+\n+    /**\n+     * Sets the number of days for which resource usage is calculated.\n+     *\n+     * @param noOfDays The number of days for which resource usage is calculated.\n+     * @return  a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the number of days is negative.\n+     */\n+    public final ResourceLimitsPeriod setNoOfDays(final int noOfDays) {\n+        if (noOfDays < 0) {\n+            throw new IllegalArgumentException(\"Number of days property must be  set to value >= 0\");\n+        }\n+        this.noOfDays = noOfDays;\n+        return this;\n+    }\n+\n+    /**\n+     * Calculates the period in days for which the resource usage like volume of used data, \n+     * connection duration etc. is to be calculated based on the mode defined by \n+     * {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     *\n+     * @param effectiveSince The point of time on which the resource limit came into effect.\n+     * @param targetDateTime The target date and time used for the resource usage period calculation.\n+     * @param mode The mode of the period defined by {@link TenantConstants#FIELD_PERIOD_MODE}.\n+     * @param periodInDays The number of days defined by {@link TenantConstants#FIELD_PERIOD_NO_OF_DAYS}. \n+     * @return The period in days for which the resource usage is to be calculated.\n+     * @throws NullPointerException if effectiveSince, targetDateTime or mode is {@code null}.\n+     */\n+    public static long calculateResourceUsagePeriod(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ceeaf604d524ff1b57ba7068ee354b4257b8dcd"}, "originalPosition": 92}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/5ceeaf604d524ff1b57ba7068ee354b4257b8dcd", "committedDate": "2020-01-29T12:41:18Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}, "afterCommit": {"oid": "87a37eb6816af8388b8e6ea409003ef992e121c3", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/87a37eb6816af8388b8e6ea409003ef992e121c3", "committedDate": "2020-01-29T12:56:36Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2188770b24ede3d400d77e9d9830ff7b5a168f1f", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/2188770b24ede3d400d77e9d9830ff7b5a168f1f", "committedDate": "2020-01-29T15:12:15Z", "message": "[#1716] Extend Tenant API for connection duration limit.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa564f28e08391217aa31a71a75db22b70f075b", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/4aa564f28e08391217aa31a71a75db22b70f075b", "committedDate": "2020-01-29T15:12:15Z", "message": "[#1716] Deprecate DataVolumePeriod in favor of ResourceLimitsPeriod.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "87a37eb6816af8388b8e6ea409003ef992e121c3", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/87a37eb6816af8388b8e6ea409003ef992e121c3", "committedDate": "2020-01-29T12:56:36Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}, "afterCommit": {"oid": "8926780230910fe3892b83fcdb72d937fb2cfff5", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/8926780230910fe3892b83fcdb72d937fb2cfff5", "committedDate": "2020-01-29T15:12:15Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwMjc2ODc4", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-350276878", "createdAt": "2020-01-29T17:09:14Z", "commit": {"oid": "8926780230910fe3892b83fcdb72d937fb2cfff5"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzowOToxNFrOFjQd7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQxNzowOToxNFrOFjQd7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjUxNDI4NA==", "bodyText": "this is not a limit but simply the current period's connection duration, isn't it?", "url": "https://github.com/eclipse/hono/pull/1722#discussion_r372514284", "createdAt": "2020-01-29T17:09:14Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/resourcelimits/PrometheusBasedResourceLimitChecks.java", "diffHunk": "@@ -292,6 +296,108 @@ private Span createSpan(final String name, final SpanContext parent, final Tenan\n                 });\n     }\n \n+    @Override\n+    public Future<Boolean> isConnectionDurationLimitReached(\n+            final TenantObject tenant,\n+            final SpanContext spanContext) {\n+\n+        Objects.requireNonNull(tenant);\n+\n+        final Span span = createSpan(\"verify connection duration limit\", spanContext, tenant);\n+        final Map<String, Object> items = new HashMap<>();\n+\n+        final Promise<Boolean> result = Promise.promise();\n+\n+        if (tenant.getResourceLimits() == null) {\n+            items.put(Fields.EVENT, \"no resource limits configured\");\n+            log.trace(\"no resource limits configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else if (tenant.getResourceLimits().getConnectionDuration() == null) {\n+            items.put(Fields.EVENT, \"no connection duration limit configured\");\n+            log.trace(\"no connection duration limit configured for tenant [{}]\", tenant.getTenantId());\n+            result.complete(Boolean.FALSE);\n+        } else {\n+            checkConnectionDurationLimit(tenant, items, span, result);\n+        }\n+\n+        return result.future()\n+                .map(b -> {\n+                    items.put(\"limit exceeded\", b);\n+                    span.log(items);\n+                    span.finish();\n+                    return b;\n+                });\n+    }\n+\n+    private void checkConnectionDurationLimit(final TenantObject tenant, final Map<String, Object> items,\n+            final Span span, final Promise<Boolean> result) {\n+        final ConnectionDuration connectionDurationConfig = tenant.getResourceLimits().getConnectionDuration();\n+        final long maxConnectionDurationInMinutes = connectionDurationConfig.getMaxMinutes();\n+        final Instant effectiveSince = connectionDurationConfig.getEffectiveSince();\n+        final PeriodMode periodMode = PeriodMode.from(connectionDurationConfig.getPeriod().getMode());\n+        final long periodInDays = Optional.ofNullable(connectionDurationConfig.getPeriod())\n+                .map(ResourceLimitsPeriod::getNoOfDays)\n+                .orElse(0);\n+\n+        log.trace(\"connection duration config for the tenant [{}] is [{}:{}, {}:{}, {}:{}, {}:{}]\",\n+                tenant.getTenantId(),\n+                TenantConstants.FIELD_MAX_MINUTES, maxConnectionDurationInMinutes,\n+                TenantConstants.FIELD_EFFECTIVE_SINCE, effectiveSince,\n+                TenantConstants.FIELD_PERIOD_MODE, periodMode,\n+                TenantConstants.FIELD_PERIOD_NO_OF_DAYS, periodInDays);\n+\n+        if (maxConnectionDurationInMinutes == TenantConstants.UNLIMITED_MINUTES || effectiveSince == null || PeriodMode.UNKNOWN.equals(periodMode)) {\n+            result.complete(Boolean.FALSE);\n+        } else {\n+            final long allowedMaxMinutes = getOrAddToCache(limitsCache,\n+                    String.format(\"%s_allowed_max_minutes\", tenant.getTenantId()),\n+                    () -> calculateEffectiveLimit(\n+                            OffsetDateTime.ofInstant(effectiveSince, ZoneOffset.UTC),\n+                            OffsetDateTime.now(ZoneOffset.UTC),\n+                            periodMode,\n+                            maxConnectionDurationInMinutes));\n+            final long connectionDurationUsagePeriod = getOrAddToCache(limitsCache,\n+                    String.format(\"%s_conn_duration_usage_period\", tenant.getTenantId()),\n+                    () -> calculateResourceUsagePeriod(\n+                            OffsetDateTime.ofInstant(effectiveSince, ZoneOffset.UTC),\n+                            OffsetDateTime.now(ZoneOffset.UTC),\n+                            periodMode,\n+                            periodInDays));\n+\n+            items.put(\"current period connection duration limit in minutes\", allowedMaxMinutes);\n+\n+            if (connectionDurationUsagePeriod <= 0) {\n+                result.complete(Boolean.FALSE);\n+            } else {\n+                final String queryParams = String.format(\"minute( sum (increase (%s {tenant=\\\"%s\\\"} [%sd])))\",\n+                        CONNECTIONS_DURATION_METRIC_NAME,\n+                        tenant.getTenantId(),\n+                        connectionDurationUsagePeriod);\n+                final String key = String.format(\"%s_minutes_consumed\", tenant.getTenantId());\n+\n+                Optional.ofNullable(limitsCache)\n+                        .map(ok -> limitsCache.get(key))\n+                        .map(cachedValue -> Future.succeededFuture((long) cachedValue))\n+                        .orElseGet(() -> executeQuery(queryParams, span)\n+                                .map(minutesConnected -> addToCache(limitsCache, key, minutesConnected)))\n+                        .map(minutesConnected -> {\n+                            items.put(\"current period connection duration limit in minutes\", minutesConnected);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8926780230910fe3892b83fcdb72d937fb2cfff5"}, "originalPosition": 110}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8926780230910fe3892b83fcdb72d937fb2cfff5", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/8926780230910fe3892b83fcdb72d937fb2cfff5", "committedDate": "2020-01-29T15:12:15Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}, "afterCommit": {"oid": "576a28cd0050a7bf52f89f3e128965078b493a60", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/576a28cd0050a7bf52f89f3e128965078b493a60", "committedDate": "2020-01-30T09:00:33Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "567f3446f7c30a641874acc7fc44593bdcd292c5", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/567f3446f7c30a641874acc7fc44593bdcd292c5", "committedDate": "2020-01-30T10:19:05Z", "message": "[#1716] Extend resource limit checks for connection duration.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "committedDate": "2020-01-30T10:19:05Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "576a28cd0050a7bf52f89f3e128965078b493a60", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/576a28cd0050a7bf52f89f3e128965078b493a60", "committedDate": "2020-01-30T09:00:33Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}, "afterCommit": {"oid": "8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "author": {"user": {"login": "kaniyan", "name": "Karthees Kalidass"}}, "url": "https://github.com/eclipse/hono/commit/8ac17fe4d9fbe1732be880631b0d07fcf466d81c", "committedDate": "2020-01-30T10:19:05Z", "message": "[#1716] Add tests.\n\nSigned-off-by: Kartheeswaran Kalidass <Kartheeswaran.Kalidass@bosch.io>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUwNzQwOTA5", "url": "https://github.com/eclipse/hono/pull/1722#pullrequestreview-350740909", "createdAt": "2020-01-30T11:03:07Z", "commit": {"oid": "8ac17fe4d9fbe1732be880631b0d07fcf466d81c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 933, "cost": 1, "resetAt": "2021-11-01T13:51:04Z"}}}