{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzU4MjUz", "number": 1769, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NDo0M1rODfg_Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODo1OTowMlrODhcNIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzcyOTU0OnYy", "diffSide": "RIGHT", "path": "site/documentation/content/api/management/device-registry-v1.yaml", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMTo0NDo0M1rOFpQyYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMjo0ODo1N1rOFp1jtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDk3OA==", "bodyText": "I think this should be false for the case where tenant id is supplied as well", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r378810978", "createdAt": "2020-02-13T11:44:43Z", "author": {"login": "dejanb"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -86,7 +86,7 @@ paths:\n                application/json:\n                   schema:\n                      $ref: '#/components/schemas/Tenant'\n-            required: true\n+            required: false", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e26c4d9c7c1424f18d3d56eb1919f6390fafe9d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMjU2Mg==", "bodyText": "Also, we have the same case for the devices endpoint. I would make it consistent between tenants and devices, but keep it required for the credentials. @sophokles73  wdyt?", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r378812562", "createdAt": "2020-02-13T11:48:17Z", "author": {"login": "dejanb"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -86,7 +86,7 @@ paths:\n                application/json:\n                   schema:\n                      $ref: '#/components/schemas/Tenant'\n-            required: true\n+            required: false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDk3OA=="}, "originalCommit": {"oid": "e26c4d9c7c1424f18d3d56eb1919f6390fafe9d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxOTIxMA==", "bodyText": "+1 for keeping it consistent, i.e. do not require a body for devices as well. However, that could go into a separate PR.", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r378819210", "createdAt": "2020-02-13T12:03:16Z", "author": {"login": "sophokles73"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -86,7 +86,7 @@ paths:\n                application/json:\n                   schema:\n                      $ref: '#/components/schemas/Tenant'\n-            required: true\n+            required: false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDk3OA=="}, "originalCommit": {"oid": "e26c4d9c7c1424f18d3d56eb1919f6390fafe9d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgyMjEzOA==", "bodyText": "Sounds good. Let's wrap tenants in this one and tackle devices in the separate one", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r378822138", "createdAt": "2020-02-13T12:10:07Z", "author": {"login": "dejanb"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -86,7 +86,7 @@ paths:\n                application/json:\n                   schema:\n                      $ref: '#/components/schemas/Tenant'\n-            required: true\n+            required: false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDk3OA=="}, "originalCommit": {"oid": "e26c4d9c7c1424f18d3d56eb1919f6390fafe9d7"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQxMzQyOQ==", "bodyText": "@dejanb I have aligned this for when an ID is supplied. I've also updated the devices section to match.\nCreating a device is now as simple as :\ncurl -i -X POST http://localhost:28080/v1/devices/DEFAULT_TENANT", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r379413429", "createdAt": "2020-02-14T12:48:57Z", "author": {"login": "jbtrystram"}, "path": "site/documentation/content/api/management/device-registry-v1.yaml", "diffHunk": "@@ -86,7 +86,7 @@ paths:\n                application/json:\n                   schema:\n                      $ref: '#/components/schemas/Tenant'\n-            required: true\n+            required: false", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODgxMDk3OA=="}, "originalCommit": {"oid": "e26c4d9c7c1424f18d3d56eb1919f6390fafe9d7"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzkyNjMyOnYy", "diffSide": "LEFT", "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1NDo1NFrOFp5Mxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzowMzo0N1rOFqjtfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MzA5NA==", "bodyText": "is there a particular reason why you want to remove this?", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r379473094", "createdAt": "2020-02-14T14:54:54Z", "author": {"login": "sophokles73"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -310,11 +310,6 @@ protected final boolean isValidRequestPayload(final JsonObject payload) {\n      *       or the JsonArray contains elements that are not of type {@link JsonObject}.\n      */\n     protected final void addNotPresentFieldsWithDefaultValuesForTenant(final JsonObject checkedPayload) {\n-        if (!checkedPayload.containsKey(RegistryManagementConstants.FIELD_ENABLED)) {\n-            logger.trace(\"adding 'enabled' key to payload\");\n-            checkedPayload.put(RegistryManagementConstants.FIELD_ENABLED, Boolean.TRUE);\n-        }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5726b62cd34a5629069ebebd7faf66018e27688"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTU5OA==", "bodyText": "Adding the enabled field is already done a few line before, when calling Util.getRequestPayload(JsonObject) which already add the field.", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r380169598", "createdAt": "2020-02-17T13:03:47Z", "author": {"login": "jbtrystram"}, "path": "service-base/src/main/java/org/eclipse/hono/service/management/tenant/AbstractTenantManagementHttpEndpoint.java", "diffHunk": "@@ -310,11 +310,6 @@ protected final boolean isValidRequestPayload(final JsonObject payload) {\n      *       or the JsonArray contains elements that are not of type {@link JsonObject}.\n      */\n     protected final void addNotPresentFieldsWithDefaultValuesForTenant(final JsonObject checkedPayload) {\n-        if (!checkedPayload.containsKey(RegistryManagementConstants.FIELD_ENABLED)) {\n-            logger.trace(\"adding 'enabled' key to payload\");\n-            checkedPayload.put(RegistryManagementConstants.FIELD_ENABLED, Boolean.TRUE);\n-        }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3MzA5NA=="}, "originalCommit": {"oid": "c5726b62cd34a5629069ebebd7faf66018e27688"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NzkzODU3OnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/TenantHttpIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1ODoxNVrOFp5UHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxNDo1ODoxNVrOFp5UHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTQ3NDk3NA==", "bodyText": "this needs to be indented ...", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r379474974", "createdAt": "2020-02-14T14:58:15Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/TenantHttpIT.java", "diffHunk": "@@ -164,6 +165,38 @@ public void testAddTenantSucceedsForEmptyBody(final VertxTestContext context) {\n         .setHandler(context.completing());\n     }\n \n+    /**\n+     * Verifies that the service successfully create a tenant from a request without a body.\n+     *\n+     * @param context The vert.x test context.\n+     */\n+    @Test\n+    public void testAddTenantSucceedsWithNoRequestBody(final VertxTestContext context) {\n+\n+        registry.addTenant(tenantId)\n+                .setHandler(context.completing());\n+    }\n+\n+    /**\n+     * Verifies that the service successfully create a tenant with a generated tenant ID.\n+     *\n+     * @param context The vert.x test context.\n+     */\n+    @Test\n+    public void testAddTenantSucceedsWithAGeneratedId(final VertxTestContext context) {\n+\n+        registry.addTenant(\"\")\n+                .compose(res -> {\n+                    // compare the changed field only\n+                    context.verify(() -> {\n+                        assertNotNull(res.get(\"location\"));\n+                        // update the global tenantId value for cleanup\n+                        tenantId = res.get(\"location\");\n+                    });\n+        return Future.succeededFuture();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5726b62cd34a5629069ebebd7faf66018e27688"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MzkxNzEyOnYy", "diffSide": "RIGHT", "path": "tests/src/test/java/org/eclipse/hono/tests/registry/TenantHttpIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQwODo1OTowMlrOFsK_4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMDowNDoxM1rOFsNOrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2MTg1Nw==", "bodyText": "since you also allow to create a device without providing a body, shouldn't we also add a corresponding test case to the suite for the /devices resources?", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r381861857", "createdAt": "2020-02-20T08:59:02Z", "author": {"login": "sophokles73"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/TenantHttpIT.java", "diffHunk": "@@ -164,6 +165,38 @@ public void testAddTenantSucceedsForEmptyBody(final VertxTestContext context) {\n         .setHandler(context.completing());\n     }\n \n+    /**\n+     * Verifies that the service successfully create a tenant from a request without a body.\n+     *\n+     * @param context The vert.x test context.\n+     */\n+    @Test\n+    public void testAddTenantSucceedsWithNoRequestBody(final VertxTestContext context) {\n+\n+        registry.addTenant(tenantId)\n+                .setHandler(context.completing());\n+    }\n+\n+    /**\n+     * Verifies that the service successfully create a tenant with a generated tenant ID.\n+     *\n+     * @param context The vert.x test context.\n+     */\n+    @Test\n+    public void testAddTenantSucceedsWithAGeneratedId(final VertxTestContext context) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a6fb3b2e7e7575a3364a63bbc1f15bdf265fc95b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg5ODQxMg==", "bodyText": "I added a test", "url": "https://github.com/eclipse/hono/pull/1769#discussion_r381898412", "createdAt": "2020-02-20T10:04:13Z", "author": {"login": "jbtrystram"}, "path": "tests/src/test/java/org/eclipse/hono/tests/registry/TenantHttpIT.java", "diffHunk": "@@ -164,6 +165,38 @@ public void testAddTenantSucceedsForEmptyBody(final VertxTestContext context) {\n         .setHandler(context.completing());\n     }\n \n+    /**\n+     * Verifies that the service successfully create a tenant from a request without a body.\n+     *\n+     * @param context The vert.x test context.\n+     */\n+    @Test\n+    public void testAddTenantSucceedsWithNoRequestBody(final VertxTestContext context) {\n+\n+        registry.addTenant(tenantId)\n+                .setHandler(context.completing());\n+    }\n+\n+    /**\n+     * Verifies that the service successfully create a tenant with a generated tenant ID.\n+     *\n+     * @param context The vert.x test context.\n+     */\n+    @Test\n+    public void testAddTenantSucceedsWithAGeneratedId(final VertxTestContext context) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTg2MTg1Nw=="}, "originalCommit": {"oid": "a6fb3b2e7e7575a3364a63bbc1f15bdf265fc95b"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3431, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}