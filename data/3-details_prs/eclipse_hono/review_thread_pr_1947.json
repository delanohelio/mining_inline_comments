{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0NjQwOTk5", "number": 1947, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyMzoyOFrOD7KH6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0ODowM1rOD7NLyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzU4NDQyOnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyMzoyOFrOGTUCxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxMTozMDoyNVrOGXcCOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNDUxNw==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422904517", "createdAt": "2020-05-11T09:23:28Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MjE0OQ==", "bodyText": "Actually I wanted to mark the class as final and I will update it.", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422992149", "createdAt": "2020-05-11T12:06:59Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNDUxNw=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzIyOTc1Mw==", "bodyText": "@sophokles73 The requested changes are there now. Would you mind taking a look again?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r427229753", "createdAt": "2020-05-19T11:30:25Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNDUxNw=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzU4NjM4OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyMzo1NlrOGTUD7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyMzo1NlrOGTUD7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNDgxMw==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422904813", "createdAt": "2020-05-11T09:23:56Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {\n+        return DEFAULT_CREDENTIALS_COLLECTION_NAME;\n+    }\n+\n+    /**\n+     * Gets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @return The maximum number.\n+     */\n+    public int getMaxBcryptIterations() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzU4OTE2OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNDo0M1rOGTUFvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNDo0M1rOGTUFvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNTI3Nw==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422905277", "createdAt": "2020-05-11T09:24:43Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {\n+        return DEFAULT_CREDENTIALS_COLLECTION_NAME;\n+    }\n+\n+    /**\n+     * Gets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @return The maximum number.\n+     */\n+    public int getMaxBcryptIterations() {\n+        return maxBcryptIterations;\n+    }\n+\n+    /**\n+     * Sets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @param iterations The maximum number.\n+     * @throws IllegalArgumentException if iterations is &lt; 4 or &gt; 31.\n+     */\n+    public void setMaxBcryptIterations(final int iterations) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzU4OTcxOnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNDo1MFrOGTUGDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNDo1MFrOGTUGDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNTM1OQ==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422905359", "createdAt": "2020-05-11T09:24:50Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {\n+        return DEFAULT_CREDENTIALS_COLLECTION_NAME;\n+    }\n+\n+    /**\n+     * Gets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @return The maximum number.\n+     */\n+    public int getMaxBcryptIterations() {\n+        return maxBcryptIterations;\n+    }\n+\n+    /**\n+     * Sets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @param iterations The maximum number.\n+     * @throws IllegalArgumentException if iterations is &lt; 4 or &gt; 31.\n+     */\n+    public void setMaxBcryptIterations(final int iterations) {\n+        if (iterations < 4 || iterations > 31) {\n+            throw new IllegalArgumentException(\"iterations must be > 3 and < 32\");\n+        } else {\n+            maxBcryptIterations = iterations;\n+        }\n+    }\n+\n+\n+    /**\n+     * Gets the list of supported hashing algorithms for pre-hashed passwords.\n+     * <p>\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not contained in this list.\n+     * If the list is empty, the device registry will accept any hashing algorithm.\n+     * <p>\n+     * Default value is an empty list.\n+     *\n+     * @return The supported algorithms.\n+     */\n+    public Set<String> getHashAlgorithmsWhitelist() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzU5MTk1OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNToxOFrOGTUHQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToyNToxOFrOGTUHQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwNTY2NA==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422905664", "createdAt": "2020-05-11T09:25:18Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/config/MongoDbBasedCredentialsConfigProperties.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.config;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Objects;\n+import java.util.Set;\n+\n+/**\n+ * Configuration properties for Hono's credentials service and management APIs.\n+ */\n+public class MongoDbBasedCredentialsConfigProperties extends AbstractMongoDbBasedRegistryConfigProperties {\n+\n+    /**\n+     * The name of the mongodb collection where devices information are stored.\n+     */\n+    private static final String DEFAULT_CREDENTIALS_COLLECTION_NAME = \"credentials\";\n+\n+    private final Set<String> hashAlgorithmsWhitelist = new HashSet<>();\n+\n+    private int maxBcryptIterations = 10;\n+\n+    @Override\n+    protected String getDefaultCollectionName() {\n+        return DEFAULT_CREDENTIALS_COLLECTION_NAME;\n+    }\n+\n+    /**\n+     * Gets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @return The maximum number.\n+     */\n+    public int getMaxBcryptIterations() {\n+        return maxBcryptIterations;\n+    }\n+\n+    /**\n+     * Sets the maximum number of iterations to use for bcrypt\n+     * password hashes.\n+     * <p>\n+     * The default value of this property is 10.\n+     *\n+     * @param iterations The maximum number.\n+     * @throws IllegalArgumentException if iterations is &lt; 4 or &gt; 31.\n+     */\n+    public void setMaxBcryptIterations(final int iterations) {\n+        if (iterations < 4 || iterations > 31) {\n+            throw new IllegalArgumentException(\"iterations must be > 3 and < 32\");\n+        } else {\n+            maxBcryptIterations = iterations;\n+        }\n+    }\n+\n+\n+    /**\n+     * Gets the list of supported hashing algorithms for pre-hashed passwords.\n+     * <p>\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not contained in this list.\n+     * If the list is empty, the device registry will accept any hashing algorithm.\n+     * <p>\n+     * Default value is an empty list.\n+     *\n+     * @return The supported algorithms.\n+     */\n+    public Set<String> getHashAlgorithmsWhitelist() {\n+        return Collections.unmodifiableSet(hashAlgorithmsWhitelist);\n+    }\n+\n+    /**\n+     * Sets the list of supported hashing algorithms for pre-hashed passwords.\n+     * <p>\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not contained in this list.\n+     * If the list is empty, the device registry will accept any hashing algorithm.\n+     * <p>\n+     * Default value is an empty list.\n+     *\n+     * @param hashAlgorithmsWhitelist The algorithms to support.\n+     * @throws NullPointerException if the list is {@code null}.\n+     */\n+    public void setHashAlgorithmsWhitelist(final String[] hashAlgorithmsWhitelist) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzYxMzA1OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMDoyOVrOGTUT6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjowNDozMVrOGTZUUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwODkwNw==", "bodyText": "FIELD_CREDENTIALS_ ...", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422908907", "createdAt": "2020-05-11T09:30:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -25,6 +26,10 @@\n  */\n public final class MongoDbDocumentBuilder {\n \n+    private static final String FILED_CREDENTIALS_AUTH_ID_KEY = String.format(\"%s.%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5MDkyOA==", "bodyText": "Typo error. I will correct it.", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422990928", "createdAt": "2020-05-11T12:04:31Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -25,6 +26,10 @@\n  */\n public final class MongoDbDocumentBuilder {\n \n+    private static final String FILED_CREDENTIALS_AUTH_ID_KEY = String.format(\"%s.%s\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwODkwNw=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzYxMzkwOnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMDo0MFrOGTUUcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMDo0MFrOGTUUcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkwOTA0MA==", "bodyText": "FIELD_CREDENTIALS_ ...", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422909040", "createdAt": "2020-05-11T09:30:40Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/utils/MongoDbDocumentBuilder.java", "diffHunk": "@@ -25,6 +26,10 @@\n  */\n public final class MongoDbDocumentBuilder {\n \n+    private static final String FILED_CREDENTIALS_AUTH_ID_KEY = String.format(\"%s.%s\",\n+            MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, RegistryManagementConstants.FIELD_AUTH_ID);\n+    private static final String FILED_CREDENTIALS_TYPE_KEY = String.format(\"%s.%s\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzYyMTk1OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOTozMjo1MVrOGTUZWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo0NDoyM1rOGTamPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMDI5OA==", "bodyText": "please remove . from the end", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422910298", "createdAt": "2020-05-11T09:32:51Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -36,70 +62,452 @@\n  * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n  * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n  */\n-public class MongoDbBasedCredentialsService implements CredentialsManagementService, CredentialsService, Lifecycle {\n+public final class MongoDbBasedCredentialsService extends AbstractCredentialsManagementService\n+        implements CredentialsService, Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbBasedCredentialsService.class);\n+\n+    private static final String CREDENTIALS_FILTERED_POSITIONAL_OPERATOR = String.format(\"%s.$\",\n+            MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS);\n+    private static final int INDEX_CREATION_MAX_RETRIES = 3;\n+\n+    private final MongoDbBasedCredentialsConfigProperties config;\n+    private final MongoClient mongoClient;\n+    private final MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Creates a new service for configuration properties.\n+     *\n+     * @param vertx The vert.x instance to run on.\n+     * @param mongoClient The client for accessing the Mongo DB instance.\n+     * @param config The properties for configuring this service.\n+     * @param passwordEncoder The password encoder.\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n+     */\n+    public MongoDbBasedCredentialsService(\n+            final Vertx vertx,\n+            final MongoClient mongoClient,\n+            final MongoDbBasedCredentialsConfigProperties config,\n+            final HonoPasswordEncoder passwordEncoder) {\n+\n+        super(Objects.requireNonNull(vertx), Objects.requireNonNull(passwordEncoder));\n+\n+        Objects.requireNonNull(mongoClient);\n+        Objects.requireNonNull(config);\n+\n+        this.mongoClient = mongoClient;\n+        this.config = config;\n+        this.mongoDbCallExecutor = new MongoDbCallExecutor(vertx, mongoClient);\n+    }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Future<Void> start() {\n-        return Future.succeededFuture();\n+        return createIndices()\n+                .map(ok -> {\n+                    LOG.debug(\"MongoDB credentials service started.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMTkwMQ==", "bodyText": "done", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r423011901", "createdAt": "2020-05-11T12:44:23Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -36,70 +62,452 @@\n  * @see <a href=\"https://www.eclipse.org/hono/docs/api/credentials/\">Credentials API</a>\n  * @see <a href=\"https://www.eclipse.org/hono/docs/api/management/\">Device Registry Management API</a>\n  */\n-public class MongoDbBasedCredentialsService implements CredentialsManagementService, CredentialsService, Lifecycle {\n+public final class MongoDbBasedCredentialsService extends AbstractCredentialsManagementService\n+        implements CredentialsService, Lifecycle {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MongoDbBasedCredentialsService.class);\n+\n+    private static final String CREDENTIALS_FILTERED_POSITIONAL_OPERATOR = String.format(\"%s.$\",\n+            MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS);\n+    private static final int INDEX_CREATION_MAX_RETRIES = 3;\n+\n+    private final MongoDbBasedCredentialsConfigProperties config;\n+    private final MongoClient mongoClient;\n+    private final MongoDbCallExecutor mongoDbCallExecutor;\n+\n+    /**\n+     * Creates a new service for configuration properties.\n+     *\n+     * @param vertx The vert.x instance to run on.\n+     * @param mongoClient The client for accessing the Mongo DB instance.\n+     * @param config The properties for configuring this service.\n+     * @param passwordEncoder The password encoder.\n+     * @throws NullPointerException if any of the parameters are {@code null}.\n+     */\n+    public MongoDbBasedCredentialsService(\n+            final Vertx vertx,\n+            final MongoClient mongoClient,\n+            final MongoDbBasedCredentialsConfigProperties config,\n+            final HonoPasswordEncoder passwordEncoder) {\n+\n+        super(Objects.requireNonNull(vertx), Objects.requireNonNull(passwordEncoder));\n+\n+        Objects.requireNonNull(mongoClient);\n+        Objects.requireNonNull(config);\n+\n+        this.mongoClient = mongoClient;\n+        this.config = config;\n+        this.mongoDbCallExecutor = new MongoDbCallExecutor(vertx, mongoClient);\n+    }\n \n     /**\n      * {@inheritDoc}\n      */\n     @Override\n     public Future<Void> start() {\n-        return Future.succeededFuture();\n+        return createIndices()\n+                .map(ok -> {\n+                    LOG.debug(\"MongoDB credentials service started.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjkxMDI5OA=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDAzNzA5OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMjowN1rOGTYWgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMjowN1rOGTYWgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTEwNw==", "bodyText": "this is not the version of the tenant, is it?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422975107", "createdAt": "2020-05-11T11:32:07Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDAzODk4OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMjo0M1rOGTYXoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTozMjo0M1rOGTYXoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk3NTM5Mg==", "bodyText": "there is no secrets parameter ...", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422975392", "createdAt": "2020-05-11T11:32:43Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA3MzkzOnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0Mzo1NVrOGTYtSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoxMzozOFrOGTZl2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDkzNg==", "bodyText": "what's the difference between invoking this method and CommonCredential.getSecrets()?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422980936", "createdAt": "2020-05-11T11:43:55Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });\n+        setCredentials(credentials);\n+\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the tenant.\n+     *\n+     * @param tenantId The tenant's identifier.\n+     * @throws NullPointerException if the tenantId is {@code null}.\n+     */\n+    public void setTenantId(final String tenantId) {\n+        this.tenantId = Objects.requireNonNull(tenantId);\n+    }\n+\n+    /**\n+     * Gets the identifier of the device.\n+     *\n+     * @return The identifier of the device.\n+     */\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the device.\n+     *\n+     * @param deviceId The identifier of the device.\n+     * @throws NullPointerException if the deviceId is {@code null}.\n+     */\n+    public void setDeviceId(final String deviceId) {\n+        this.deviceId = Objects.requireNonNull(deviceId);\n+    }\n+\n+    /**\n+     * Gets the list of credentials.\n+     *\n+     * @return The list of credentials.\n+     */\n+    public List<CommonCredential> getCredentials() {\n+        return credentials;\n+    }\n+\n+    /**\n+     * Sets the list of credentials.\n+     *\n+     * @param credentials A list of credentials.\n+     */\n+    public void setCredentials(final List<CommonCredential> credentials) {\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * Checks whether the credentials to be updated already have secret ids.\n+     *\n+     * @return hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                      otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public boolean hasSecretIds() {\n+        return hasSecretIds;\n+    }\n+\n+    /**\n+     * Sets whether the credentials to be updated already have secret ids.\n+     *\n+     * @param hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                         otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public void setHasSecretIds(final boolean hasSecretIds) {\n+        this.hasSecretIds = hasSecretIds;\n+    }\n+\n+    @JsonIgnore\n+    private List<? extends CommonSecret> getSecrets(final CommonCredential credential) {\n+        if (credential instanceof PasswordCredential) {\n+            return ((PasswordCredential) credential).getSecrets();\n+        } else if (credential instanceof X509CertificateCredential) {\n+            return ((X509CertificateCredential) credential).getSecrets();\n+        } else if (credential instanceof PskCredential) {\n+            return ((PskCredential) credential).getSecrets();\n+        } else {\n+            return ((GenericCredential) credential).getSecrets();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 177}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NTQxOQ==", "bodyText": "protected abstract List<? extends CommonSecret> getSecrets()\nIt has protected access and I couldn't invoke here.", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422995419", "createdAt": "2020-05-11T12:13:38Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });\n+        setCredentials(credentials);\n+\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the tenant.\n+     *\n+     * @param tenantId The tenant's identifier.\n+     * @throws NullPointerException if the tenantId is {@code null}.\n+     */\n+    public void setTenantId(final String tenantId) {\n+        this.tenantId = Objects.requireNonNull(tenantId);\n+    }\n+\n+    /**\n+     * Gets the identifier of the device.\n+     *\n+     * @return The identifier of the device.\n+     */\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the device.\n+     *\n+     * @param deviceId The identifier of the device.\n+     * @throws NullPointerException if the deviceId is {@code null}.\n+     */\n+    public void setDeviceId(final String deviceId) {\n+        this.deviceId = Objects.requireNonNull(deviceId);\n+    }\n+\n+    /**\n+     * Gets the list of credentials.\n+     *\n+     * @return The list of credentials.\n+     */\n+    public List<CommonCredential> getCredentials() {\n+        return credentials;\n+    }\n+\n+    /**\n+     * Sets the list of credentials.\n+     *\n+     * @param credentials A list of credentials.\n+     */\n+    public void setCredentials(final List<CommonCredential> credentials) {\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * Checks whether the credentials to be updated already have secret ids.\n+     *\n+     * @return hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                      otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public boolean hasSecretIds() {\n+        return hasSecretIds;\n+    }\n+\n+    /**\n+     * Sets whether the credentials to be updated already have secret ids.\n+     *\n+     * @param hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                         otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public void setHasSecretIds(final boolean hasSecretIds) {\n+        this.hasSecretIds = hasSecretIds;\n+    }\n+\n+    @JsonIgnore\n+    private List<? extends CommonSecret> getSecrets(final CommonCredential credential) {\n+        if (credential instanceof PasswordCredential) {\n+            return ((PasswordCredential) credential).getSecrets();\n+        } else if (credential instanceof X509CertificateCredential) {\n+            return ((X509CertificateCredential) credential).getSecrets();\n+        } else if (credential instanceof PskCredential) {\n+            return ((PskCredential) credential).getSecrets();\n+        } else {\n+            return ((GenericCredential) credential).getSecrets();\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MDkzNg=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 177}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA4MDY1OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NjoxM1rOGTYxWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoxNjoxOFrOGTZrUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTk3OQ==", "bodyText": "when will this constructor is supposed to be involved? I am asking because there seems to be an expectation for the checks to be invoked as part of certain scenarios ...", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422981979", "createdAt": "2020-05-11T11:46:13Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5NjgxOQ==", "bodyText": "This constructor is supposed to be involved when adding or updating credentials.", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422996819", "createdAt": "2020-05-11T12:16:18Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MTk3OQ=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA4NDcxOnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0NzozOVrOGTYz7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjoyMToxN1rOGTZ1pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MjYzNg==", "bodyText": "I'd rather check the (few) secrets explicitly ...", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422982636", "createdAt": "2020-05-11T11:47:39Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });\n+        setCredentials(credentials);\n+\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the tenant.\n+     *\n+     * @param tenantId The tenant's identifier.\n+     * @throws NullPointerException if the tenantId is {@code null}.\n+     */\n+    public void setTenantId(final String tenantId) {\n+        this.tenantId = Objects.requireNonNull(tenantId);\n+    }\n+\n+    /**\n+     * Gets the identifier of the device.\n+     *\n+     * @return The identifier of the device.\n+     */\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the device.\n+     *\n+     * @param deviceId The identifier of the device.\n+     * @throws NullPointerException if the deviceId is {@code null}.\n+     */\n+    public void setDeviceId(final String deviceId) {\n+        this.deviceId = Objects.requireNonNull(deviceId);\n+    }\n+\n+    /**\n+     * Gets the list of credentials.\n+     *\n+     * @return The list of credentials.\n+     */\n+    public List<CommonCredential> getCredentials() {\n+        return credentials;\n+    }\n+\n+    /**\n+     * Sets the list of credentials.\n+     *\n+     * @param credentials A list of credentials.\n+     */\n+    public void setCredentials(final List<CommonCredential> credentials) {\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * Checks whether the credentials to be updated already have secret ids.\n+     *\n+     * @return hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                      otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public boolean hasSecretIds() {\n+        return hasSecretIds;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 153}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk5OTQ2MQ==", "bodyText": "I didn't get it what do you mean, could you please explain more detailed? I set this flag, if the secrets to be updated contain any secret ids. I use this flag during the update operation, if no secret ids exist then no need to merge and I simply replace the existing document.", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422999461", "createdAt": "2020-05-11T12:21:17Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });\n+        setCredentials(credentials);\n+\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the tenant.\n+     *\n+     * @param tenantId The tenant's identifier.\n+     * @throws NullPointerException if the tenantId is {@code null}.\n+     */\n+    public void setTenantId(final String tenantId) {\n+        this.tenantId = Objects.requireNonNull(tenantId);\n+    }\n+\n+    /**\n+     * Gets the identifier of the device.\n+     *\n+     * @return The identifier of the device.\n+     */\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the device.\n+     *\n+     * @param deviceId The identifier of the device.\n+     * @throws NullPointerException if the deviceId is {@code null}.\n+     */\n+    public void setDeviceId(final String deviceId) {\n+        this.deviceId = Objects.requireNonNull(deviceId);\n+    }\n+\n+    /**\n+     * Gets the list of credentials.\n+     *\n+     * @return The list of credentials.\n+     */\n+    public List<CommonCredential> getCredentials() {\n+        return credentials;\n+    }\n+\n+    /**\n+     * Sets the list of credentials.\n+     *\n+     * @param credentials A list of credentials.\n+     */\n+    public void setCredentials(final List<CommonCredential> credentials) {\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * Checks whether the credentials to be updated already have secret ids.\n+     *\n+     * @return hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                      otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public boolean hasSecretIds() {\n+        return hasSecretIds;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MjYzNg=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 153}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDA4NTg3OnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMTo0ODowM1rOGTY0rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo0MjoxMFrOGTahew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MjgzMA==", "bodyText": "this belongs to the CommonSecret class, doesn't it?", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r422982830", "createdAt": "2020-05-11T11:48:03Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });\n+        setCredentials(credentials);\n+\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the tenant.\n+     *\n+     * @param tenantId The tenant's identifier.\n+     * @throws NullPointerException if the tenantId is {@code null}.\n+     */\n+    public void setTenantId(final String tenantId) {\n+        this.tenantId = Objects.requireNonNull(tenantId);\n+    }\n+\n+    /**\n+     * Gets the identifier of the device.\n+     *\n+     * @return The identifier of the device.\n+     */\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the device.\n+     *\n+     * @param deviceId The identifier of the device.\n+     * @throws NullPointerException if the deviceId is {@code null}.\n+     */\n+    public void setDeviceId(final String deviceId) {\n+        this.deviceId = Objects.requireNonNull(deviceId);\n+    }\n+\n+    /**\n+     * Gets the list of credentials.\n+     *\n+     * @return The list of credentials.\n+     */\n+    public List<CommonCredential> getCredentials() {\n+        return credentials;\n+    }\n+\n+    /**\n+     * Sets the list of credentials.\n+     *\n+     * @param credentials A list of credentials.\n+     */\n+    public void setCredentials(final List<CommonCredential> credentials) {\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * Checks whether the credentials to be updated already have secret ids.\n+     *\n+     * @return hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                      otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public boolean hasSecretIds() {\n+        return hasSecretIds;\n+    }\n+\n+    /**\n+     * Sets whether the credentials to be updated already have secret ids.\n+     *\n+     * @param hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                         otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public void setHasSecretIds(final boolean hasSecretIds) {\n+        this.hasSecretIds = hasSecretIds;\n+    }\n+\n+    @JsonIgnore\n+    private List<? extends CommonSecret> getSecrets(final CommonCredential credential) {\n+        if (credential instanceof PasswordCredential) {\n+            return ((PasswordCredential) credential).getSecrets();\n+        } else if (credential instanceof X509CertificateCredential) {\n+            return ((X509CertificateCredential) credential).getSecrets();\n+        } else if (credential instanceof PskCredential) {\n+            return ((PskCredential) credential).getSecrets();\n+        } else {\n+            return ((GenericCredential) credential).getSecrets();\n+        }\n+    }\n+\n+    @JsonIgnore\n+    private <T extends CommonSecret> T generateSecretId(final T secret) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 180}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxMDY4Mw==", "bodyText": "CommonSecret class already has a provision to set the id using  setId(final String id). The method generateSecretId(...) uses generated uuids as secret ids. IMHO the device registry implementers should be able to choose the nature of the secret ids. Based on this view for me it makes sense to have this method in this class and not in the CommonSecret.", "url": "https://github.com/eclipse/hono/pull/1947#discussion_r423010683", "createdAt": "2020-05-11T12:42:10Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/model/CredentialsDto.java", "diffHunk": "@@ -0,0 +1,220 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+package org.eclipse.hono.deviceregistry.mongodb.model;\n+\n+import java.net.HttpURLConnection;\n+import java.time.Instant;\n+import java.util.List;\n+import java.util.Objects;\n+import java.util.Optional;\n+\n+import org.eclipse.hono.client.ClientErrorException;\n+import org.eclipse.hono.deviceregistry.mongodb.utils.MongoDbDeviceRegistryUtils;\n+import org.eclipse.hono.deviceregistry.util.DeviceRegistryUtils;\n+import org.eclipse.hono.service.management.credentials.CommonCredential;\n+import org.eclipse.hono.service.management.credentials.CommonSecret;\n+import org.eclipse.hono.service.management.credentials.GenericCredential;\n+import org.eclipse.hono.service.management.credentials.PasswordCredential;\n+import org.eclipse.hono.service.management.credentials.PskCredential;\n+import org.eclipse.hono.service.management.credentials.X509CertificateCredential;\n+import org.eclipse.hono.util.RegistryManagementConstants;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * A DTO (Data Transfer Object) class to store credentials information in mongodb.\n+ */\n+public class CredentialsDto extends BaseDto {\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_TENANT_ID, required = true)\n+    private String tenantId;\n+\n+    @JsonProperty(value = RegistryManagementConstants.FIELD_PAYLOAD_DEVICE_ID, required = true)\n+    private String deviceId;\n+\n+    @JsonProperty(value = MongoDbDeviceRegistryUtils.FIELD_CREDENTIALS, required = true)\n+    private List<CommonCredential> credentials;\n+    private boolean hasSecretIds;\n+\n+    /**\n+     * Default constructor for serialisation/deserialization.\n+     */\n+    public CredentialsDto() {\n+        // Explicit default constructor.\n+    }\n+\n+    /**\n+     * Creates a new data transfer object to store credentials information in mongodb.\n+     *\n+     * @param tenantId The tenant identifier.\n+     * @param deviceId The device identifier.\n+     * @param credentials The list of credentials.\n+     * @param version The version of tenant to be sent as request header.\n+     * @throws NullPointerException if any of the parameters except the secrets are {@code null}\n+     * @throws IllegalArgumentException if validation of the given credentials fail.\n+     */\n+    public CredentialsDto(\n+            final String tenantId,\n+            final String deviceId,\n+            final List<CommonCredential> credentials,\n+            final String version) {\n+\n+        setTenantId(tenantId);\n+        setDeviceId(deviceId);\n+\n+        //Validate the given credentials, secrets and generate secret ids if not available.\n+        Optional.ofNullable(credentials)\n+                .ifPresent(ok -> {\n+                    validateForUniqueAuthIdAndType(credentials);\n+                    validateSecretsAndGenerateIds(credentials);\n+                });\n+        setCredentials(credentials);\n+\n+        setVersion(version);\n+        setUpdatedOn(Instant.now());\n+    }\n+\n+    /**\n+     * Gets the identifier of the tenant.\n+     *\n+     * @return The identifier of the tenant.\n+     */\n+    public String getTenantId() {\n+        return tenantId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the tenant.\n+     *\n+     * @param tenantId The tenant's identifier.\n+     * @throws NullPointerException if the tenantId is {@code null}.\n+     */\n+    public void setTenantId(final String tenantId) {\n+        this.tenantId = Objects.requireNonNull(tenantId);\n+    }\n+\n+    /**\n+     * Gets the identifier of the device.\n+     *\n+     * @return The identifier of the device.\n+     */\n+    public String getDeviceId() {\n+        return deviceId;\n+    }\n+\n+    /**\n+     * Sets the identifier of the device.\n+     *\n+     * @param deviceId The identifier of the device.\n+     * @throws NullPointerException if the deviceId is {@code null}.\n+     */\n+    public void setDeviceId(final String deviceId) {\n+        this.deviceId = Objects.requireNonNull(deviceId);\n+    }\n+\n+    /**\n+     * Gets the list of credentials.\n+     *\n+     * @return The list of credentials.\n+     */\n+    public List<CommonCredential> getCredentials() {\n+        return credentials;\n+    }\n+\n+    /**\n+     * Sets the list of credentials.\n+     *\n+     * @param credentials A list of credentials.\n+     */\n+    public void setCredentials(final List<CommonCredential> credentials) {\n+        this.credentials = credentials;\n+    }\n+\n+    /**\n+     * Checks whether the credentials to be updated already have secret ids.\n+     *\n+     * @return hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                      otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public boolean hasSecretIds() {\n+        return hasSecretIds;\n+    }\n+\n+    /**\n+     * Sets whether the credentials to be updated already have secret ids.\n+     *\n+     * @param hasSecretIds {@code true} if any credential already has a secret identifier,\n+     *                         otherwise {@code false}\n+     */\n+    @JsonIgnore\n+    public void setHasSecretIds(final boolean hasSecretIds) {\n+        this.hasSecretIds = hasSecretIds;\n+    }\n+\n+    @JsonIgnore\n+    private List<? extends CommonSecret> getSecrets(final CommonCredential credential) {\n+        if (credential instanceof PasswordCredential) {\n+            return ((PasswordCredential) credential).getSecrets();\n+        } else if (credential instanceof X509CertificateCredential) {\n+            return ((X509CertificateCredential) credential).getSecrets();\n+        } else if (credential instanceof PskCredential) {\n+            return ((PskCredential) credential).getSecrets();\n+        } else {\n+            return ((GenericCredential) credential).getSecrets();\n+        }\n+    }\n+\n+    @JsonIgnore\n+    private <T extends CommonSecret> T generateSecretId(final T secret) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjk4MjgzMA=="}, "originalCommit": {"oid": "d6850e855e2f0fc3e7ee11c6cd30443917301564"}, "originalPosition": 180}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3223, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}