{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyOTkxMjM1", "number": 1804, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozNzoyN1rODk8Ceg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0NTo0M1rODlhVMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDU5MDAyOnYy", "diffSide": "RIGHT", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzozNzoyN1rOFximnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwNzo0MjoxN1rOFxitHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MTQ4NA==", "bodyText": "I would use a HashSet, rather than an array.", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r387491484", "createdAt": "2020-03-04T07:37:27Z", "author": {"login": "ctron"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "diffHunk": "@@ -31,6 +31,7 @@\n     private boolean modificationEnabled = true;\n     private boolean startEmpty = false;\n     private int cacheMaxAge = DEFAULT_MAX_AGE_SECONDS;\n+    private String[] hashAlgorithmsWhitelist = {};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c248f2fccb99d3e6d72869e6751e4b0baaac2175"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MzE0OQ==", "bodyText": "An array is populated without extra work by springboot from a YAML list, or with comma separated values in an environment variable :)\nThat said, the setter method could convert the array to a HashSet.", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r387493149", "createdAt": "2020-03-04T07:42:17Z", "author": {"login": "jbtrystram"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "diffHunk": "@@ -31,6 +31,7 @@\n     private boolean modificationEnabled = true;\n     private boolean startEmpty = false;\n     private int cacheMaxAge = DEFAULT_MAX_AGE_SECONDS;\n+    private String[] hashAlgorithmsWhitelist = {};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzQ5MTQ4NA=="}, "originalCommit": {"oid": "c248f2fccb99d3e6d72869e6751e4b0baaac2175"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMDc1ODk5OnYy", "diffSide": "RIGHT", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0MToxMlrOFxkNDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQwODo0MToxMlrOFxkNDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzUxNzcxMA==", "bodyText": "@ctron WDYT ?", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r387517710", "createdAt": "2020-03-04T08:41:12Z", "author": {"login": "jbtrystram"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "diffHunk": "@@ -164,4 +168,38 @@ public final boolean isStartEmpty() {\n     public final void setStartEmpty(final boolean flag) {\n         this.startEmpty = flag;\n     }\n+\n+    /**\n+     * Get the list of authorised hashing algorithms for already hashed passwords.\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not present in that list.\n+     * If the list is empty, the device registry will accept any hashing algorithm.\n+     * <p>\n+     * Default value is an empty HashSet.\n+     *\n+     * @return The list of authorized algorithms.\n+     */\n+    public Set<String> getHashAlgorithmsWhitelist() {\n+        return hashAlgorithmsWhitelist;\n+    }\n+\n+    /**\n+     * Set the list of authorised hashing algorithms for already hashed passwords.\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not present in that list.\n+     * <p>\n+     * The default value is empty.\n+     *\n+     * @param hashAlgorithmsWhitelist The list of authorized algorithms.\n+     */\n+    public void setHashAlgorithmsWhitelist(final String[] hashAlgorithmsWhitelist) {\n+\n+        final HashSet<String> set = new HashSet<>();\n+\n+        for (String s : hashAlgorithmsWhitelist) {\n+            set.add(s);\n+        }\n+\n+        this.hashAlgorithmsWhitelist = set;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f31de9f66853cd733185ccd40015a295489c616"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY0MjYwOnYy", "diffSide": "RIGHT", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzoyOTo0MVrOFyc_hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNzo0NTozMVrOFyvpDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODEzMg==", "bodyText": "We should probably use set instead of array here as well?", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r388448132", "createdAt": "2020-03-05T17:29:41Z", "author": {"login": "dejanb"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "diffHunk": "@@ -164,4 +168,34 @@ public final boolean isStartEmpty() {\n     public final void setStartEmpty(final boolean flag) {\n         this.startEmpty = flag;\n     }\n+\n+    /**\n+     * Get the list of authorised hashing algorithms for already hashed passwords.\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not present in that list.\n+     * If the list is empty, the device registry will accept any hashing algorithm.\n+     * <p>\n+     * Default value is an empty HashSet.\n+     *\n+     * @return The list of authorized algorithms.\n+     */\n+    public Set<String> getHashAlgorithmsWhitelist() {\n+        return hashAlgorithmsWhitelist;\n+    }\n+\n+    /**\n+     * Set the list of authorised hashing algorithms for already hashed passwords.\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not present in that list.\n+     * <p>\n+     * The default value is empty.\n+     *\n+     * @param hashAlgorithmsWhitelist The list of authorized algorithms.\n+     */\n+    public void setHashAlgorithmsWhitelist(final String[] hashAlgorithmsWhitelist) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed5bdea5c94dca2f8d9d948b8ca1f7516415b4c"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODc1MzY3OA==", "bodyText": "springboot create an array from a YAML list, or comma separated values in an environment variable :)", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r388753678", "createdAt": "2020-03-06T07:45:31Z", "author": {"login": "jbtrystram"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/AbstractFileBasedRegistryConfigProperties.java", "diffHunk": "@@ -164,4 +168,34 @@ public final boolean isStartEmpty() {\n     public final void setStartEmpty(final boolean flag) {\n         this.startEmpty = flag;\n     }\n+\n+    /**\n+     * Get the list of authorised hashing algorithms for already hashed passwords.\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not present in that list.\n+     * If the list is empty, the device registry will accept any hashing algorithm.\n+     * <p>\n+     * Default value is an empty HashSet.\n+     *\n+     * @return The list of authorized algorithms.\n+     */\n+    public Set<String> getHashAlgorithmsWhitelist() {\n+        return hashAlgorithmsWhitelist;\n+    }\n+\n+    /**\n+     * Set the list of authorised hashing algorithms for already hashed passwords.\n+     * The device registry will not accept credentials using a hashing\n+     * algorithm that is not present in that list.\n+     * <p>\n+     * The default value is empty.\n+     *\n+     * @param hashAlgorithmsWhitelist The list of authorized algorithms.\n+     */\n+    public void setHashAlgorithmsWhitelist(final String[] hashAlgorithmsWhitelist) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODEzMg=="}, "originalCommit": {"oid": "3ed5bdea5c94dca2f8d9d948b8ca1f7516415b4c"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjY0ODA2OnYy", "diffSide": "RIGHT", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedCredentialsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMToxMlrOFydC0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzozMToxMlrOFydC0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ0ODk3OA==", "bodyText": "This should be checked before containsOnlySecretId() method call.", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r388448978", "createdAt": "2020-03-05T17:31:12Z", "author": {"login": "dejanb"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedCredentialsService.java", "diffHunk": "@@ -629,6 +631,33 @@ protected void checkCredential(final CommonCredential credential) {\n         }\n     }\n \n+    /**\n+     * Verifies that a hash algorithm in the supplied PasswordSecret is authorised.\n+     * <p>\n+     * The value must be present in the whitelist provided in the configuration\n+     * by {@link #getHashAlgorithmsWhitelist()}\n+     * If the whitelist is empty, any value will be accepted.\n+     *\n+     * @param secret The PasswordSecret object to verify.\n+     * @throws IllegalStateException if the hash algorithm provided in the PasswordSecret is not in the whitelist.\n+     */\n+    protected void verifyHashAlgorithmIsAuthorised(final PasswordSecret secret){\n+\n+        if (getHashAlgorithmsWhitelist().isEmpty()\n+            || secret.containsOnlySecretId()) {\n+            return;\n+        }\n+\n+        Objects.requireNonNull(secret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed5bdea5c94dca2f8d9d948b8ca1f7516415b4c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjcwMDAyOnYy", "diffSide": "RIGHT", "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedCredentialsService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0NTo0M1rOFydiWg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNzo0NTo0M1rOFydiWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODQ1NzA1MA==", "bodyText": "formatting ... space inside if() statement.", "url": "https://github.com/eclipse/hono/pull/1804#discussion_r388457050", "createdAt": "2020-03-05T17:45:43Z", "author": {"login": "dejanb"}, "path": "services/device-registry-file/src/main/java/org/eclipse/hono/deviceregistry/file/FileBasedCredentialsService.java", "diffHunk": "@@ -629,6 +631,33 @@ protected void checkCredential(final CommonCredential credential) {\n         }\n     }\n \n+    /**\n+     * Verifies that a hash algorithm in the supplied PasswordSecret is authorised.\n+     * <p>\n+     * The value must be present in the whitelist provided in the configuration\n+     * by {@link #getHashAlgorithmsWhitelist()}\n+     * If the whitelist is empty, any value will be accepted.\n+     *\n+     * @param secret The PasswordSecret object to verify.\n+     * @throws IllegalStateException if the hash algorithm provided in the PasswordSecret is not in the whitelist.\n+     */\n+    protected void verifyHashAlgorithmIsAuthorised(final PasswordSecret secret){\n+\n+        if (getHashAlgorithmsWhitelist().isEmpty()\n+            || secret.containsOnlySecretId()) {\n+            return;\n+        }\n+\n+        Objects.requireNonNull(secret);\n+        final String hashAlgorithm = secret.getHashFunction();\n+        Objects.requireNonNull(hashAlgorithm);\n+\n+        if ( getHashAlgorithmsWhitelist().contains(hashAlgorithm)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ed5bdea5c94dca2f8d9d948b8ca1f7516415b4c"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3237, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}