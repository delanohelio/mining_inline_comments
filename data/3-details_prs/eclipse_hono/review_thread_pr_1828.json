{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2NjY2MjQ1", "number": 1828, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0ODo1MlrODnD4FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoyOToxNlrODnfSqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg0NTY1OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0ODo1MlrOF01dRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0ODo1MlrOF01dRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjExOA==", "bodyText": "final ?", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390946118", "createdAt": "2020-03-11T12:48:52Z", "author": {"login": "sophokles73"}, "path": "client-device-connection-infinispan/src/main/java/org/eclipse/hono/deviceconnection/infinispan/client/Versioned.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*******************************************************************************\n+ * Copyright (c) 2020 Contributors to the Eclipse Foundation\n+ *\n+ * See the NOTICE file(s) distributed with this work for additional\n+ * information regarding copyright ownership.\n+ *\n+ * This program and the accompanying materials are made available under the\n+ * terms of the Eclipse Public License 2.0 which is available at\n+ * http://www.eclipse.org/legal/epl-2.0\n+ *\n+ * SPDX-License-Identifier: EPL-2.0\n+ *******************************************************************************/\n+\n+package org.eclipse.hono.deviceconnection.infinispan.client;\n+\n+/**\n+ * A versioned entry.\n+ * \n+ * @param <T> The payload type.\n+ */\n+public class Versioned<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f22270cce271059d9003e3d48adf421458d03bc"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg0OTYyOnYy", "diffSide": "RIGHT", "path": "bom/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo0OTo1OFrOF01fsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxNDo0NzozNFrOF06TZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjczOQ==", "bodyText": "what do we need this for?", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390946739", "createdAt": "2020-03-11T12:49:58Z", "author": {"login": "sophokles73"}, "path": "bom/pom.xml", "diffHunk": "@@ -545,6 +545,11 @@\n         <artifactId>infinispan-client-hotrod</artifactId>\n         <version>${infinispan.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.infinispan</groupId>\n+        <artifactId>infinispan-query-dsl</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f22270cce271059d9003e3d48adf421458d03bc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzU4OA==", "bodyText": "see my other comment below", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390947588", "createdAt": "2020-03-11T12:51:32Z", "author": {"login": "calohmn"}, "path": "bom/pom.xml", "diffHunk": "@@ -545,6 +545,11 @@\n         <artifactId>infinispan-client-hotrod</artifactId>\n         <version>${infinispan.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.infinispan</groupId>\n+        <artifactId>infinispan-query-dsl</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjczOQ=="}, "originalCommit": {"oid": "0f22270cce271059d9003e3d48adf421458d03bc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk4MzE4NA==", "bodyText": "IMHO we should define the scope here as test already to make it clear that we use this for testing only", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390983184", "createdAt": "2020-03-11T13:50:17Z", "author": {"login": "sophokles73"}, "path": "bom/pom.xml", "diffHunk": "@@ -545,6 +545,11 @@\n         <artifactId>infinispan-client-hotrod</artifactId>\n         <version>${infinispan.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.infinispan</groupId>\n+        <artifactId>infinispan-query-dsl</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjczOQ=="}, "originalCommit": {"oid": "0f22270cce271059d9003e3d48adf421458d03bc"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTAyNTUwOQ==", "bodyText": "Ok, I've added the scope here.", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391025509", "createdAt": "2020-03-11T14:47:34Z", "author": {"login": "calohmn"}, "path": "bom/pom.xml", "diffHunk": "@@ -545,6 +545,11 @@\n         <artifactId>infinispan-client-hotrod</artifactId>\n         <version>${infinispan.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.infinispan</groupId>\n+        <artifactId>infinispan-query-dsl</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NjczOQ=="}, "originalCommit": {"oid": "0f22270cce271059d9003e3d48adf421458d03bc"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyMjg1Mjk5OnYy", "diffSide": "RIGHT", "path": "client-device-connection-infinispan/src/test/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MDo1NlrOF01hxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMjo1MDo1NlrOF01hxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDk0NzI2OQ==", "bodyText": "Since the HotrodCache class uses a org.infinispan.client.hotrod.RemoteCache field now (instead of org.infinispan.commons.api.BasicCache), this mock had to be changed.\nUnfortunately, the org.infinispan.client.hotrod.RemoteCache has a dependency on the infinispan-query-dsl module (for the retrieveEntriesByQuery method) and without having that module integrated, creating the mock here will fail.\nTherefore I've added infinispan-query-dsl as a test-only dependency (CQ still needed for that). As alternative option, I only see removing this test class.", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r390947269", "createdAt": "2020-03-11T12:50:56Z", "author": {"login": "calohmn"}, "path": "client-device-connection-infinispan/src/test/java/org/eclipse/hono/deviceconnection/infinispan/client/HotrodCacheTest.java", "diffHunk": "@@ -152,10 +161,149 @@ void testPutFails(final VertxTestContext ctx) {\n             }));\n     }\n \n-    private BasicCache<Object, Object> givenAConnectedCache() {\n+    /**\n+     * Verifies that a request to remove a cache entry with a version\n+     * results in the value being removed in the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testRemoveWithVersionSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.removeWithVersion(anyString(), anyLong())).thenReturn(true);\n+        cache.connect()\n+                .compose(c -> c.removeWithVersion(\"key\", 1L))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).removeWithVersion(\"key\", 1L);\n+                        assertThat(v).isTrue();\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to remove a cache entry with a version\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testRemoveWithVersionFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.removeWithVersion(anyString(), anyLong())).thenThrow(new IllegalStateException());\n+        cache.connect()\n+                .compose(c -> c.removeWithVersion(\"key\", 1L))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).removeWithVersion(\"key\", 1L);\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a cache entry along with its version\n+     * results in the value being retrieved from the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetWithVersionSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        @SuppressWarnings(\"unchecked\")\n+        final MetadataValue<Object> metadataValue = mock(MetadataValue.class);\n+        final Object value = \"testValue\";\n+        when(metadataValue.getValue()).thenReturn(value);\n+        final long version = 1L;\n+        when(metadataValue.getVersion()).thenReturn(version);\n+        when(grid.getWithMetadata(anyString())).thenReturn(metadataValue);\n+        cache.connect()\n+                .compose(c -> c.getWithVersion(\"key\"))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getWithMetadata(\"key\");\n+                        assertThat(v.getVersion()).isEqualTo(version);\n+                        assertThat(v.getValue()).isEqualTo(value);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a cache entry along with its version\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetWithVersionFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.getWithMetadata(anyString())).thenThrow(new IllegalStateException());\n+        cache.connect()\n+                .compose(c -> c.getWithVersion(\"key\"))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getWithMetadata(\"key\");\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a map of all cache entries with given keys\n+     * results in the map value being retrieved from the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetAllSucceeds(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        final Map<Object, Object> mapValue = new HashMap<>();\n+        when(grid.getAll(anySet())).thenReturn(mapValue);\n+        final Set<String> keys = Set.of(\"key\");\n+        cache.connect()\n+                .compose(c -> c.getAll(keys))\n+                .setHandler(ctx.succeeding(v -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getAll(keys);\n+                        assertThat(v).isEqualTo(mapValue);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    /**\n+     * Verifies that a request to get a map of all cache entries with given keys\n+     * fails with the root cause for the failure to access the data grid.\n+     *\n+     * @param ctx The vert.x text context.\n+     */\n+    @Test\n+    void testGetAllFails(final VertxTestContext ctx) {\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> grid = givenAConnectedCache();\n+        when(grid.getAll(anySet())).thenThrow(new IllegalStateException());\n+        final Set<String> keys = Set.of(\"key\");\n+        cache.connect()\n+                .compose(c -> c.getAll(keys))\n+                .setHandler(ctx.failing(t -> {\n+                    ctx.verify(() -> {\n+                        verify(grid).getAll(keys);\n+                        assertThat(t).isInstanceOf(IllegalStateException.class);\n+                    });\n+                    ctx.completeNow();\n+                }));\n+    }\n+\n+    private org.infinispan.client.hotrod.RemoteCache<Object, Object> givenAConnectedCache() {\n+        final Configuration configuration = mock(Configuration.class);\n         @SuppressWarnings(\"unchecked\")\n-        final BasicCache<Object, Object> result = mock(BasicCache.class);\n-        when(remoteCacheManager.getCache(anyString())).thenReturn(result);\n+        final org.infinispan.client.hotrod.RemoteCache<Object, Object> result = mock(org.infinispan.client.hotrod.RemoteCache.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0f22270cce271059d9003e3d48adf421458d03bc"}, "originalPosition": 187}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQyNzMzNzM4OnYy", "diffSide": "RIGHT", "path": "services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNDoyOToxNlrOF1hBjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMlQxNzo0NzoyNFrOF1o-4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg==", "bodyText": "the last known gateway id ?", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391659916", "createdAt": "2020-03-12T14:29:16Z", "author": {"login": "sophokles73"}, "path": "services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java", "diffHunk": "@@ -139,4 +139,28 @@ public void testGetLastKnownGatewayForDeviceNotFound(final VertxTestContext ctx)\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "66147524277f3efefad19f2c67040ae81b90b6ea"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTc5MDMwNQ==", "bodyText": "Fixed.", "url": "https://github.com/eclipse/hono/pull/1828#discussion_r391790305", "createdAt": "2020-03-12T17:47:24Z", "author": {"login": "calohmn"}, "path": "services/device-connection/src/test/java/org/eclipse/hono/deviceconnection/infinispan/RemoteCacheBasedDeviceConnectionServiceTest.java", "diffHunk": "@@ -139,4 +139,28 @@ public void testGetLastKnownGatewayForDeviceNotFound(final VertxTestContext ctx)\n             ctx.completeNow();\n         }));\n     }\n+\n+    /**\n+     * Verifies that the last known gateway id can be set via the <em>setCommandHandlingAdapterInstance</em> operation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MTY1OTkxNg=="}, "originalCommit": {"oid": "66147524277f3efefad19f2c67040ae81b90b6ea"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3253, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}