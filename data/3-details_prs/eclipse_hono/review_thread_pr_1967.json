{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NDc0ODcz", "number": 1967, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNzo0NVrOEAAU6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzoxMjozOFrOEAFakg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQwODExOnYy", "diffSide": "RIGHT", "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxNzo0NVrOGbArsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyMjozMVrOGbC9qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkyMw==", "bodyText": "why not getCredentialsDto and use the DTO's API to retrieve the credentials? As the name Data Transfer Object suggests, it should be used to transfer data to/from the persistence store, right? That way we also wouldn't require this method to have knowledge about the internal structure of the JSON document being stored in the DB ...", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r430975923", "createdAt": "2020-05-27T09:17:45Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -190,7 +208,7 @@ public MongoDbBasedCredentialsService(\n         Objects.requireNonNull(deviceKey);\n         Objects.requireNonNull(span);\n \n-        return findCredentials(deviceKey)\n+        return findCredentials(deviceKey, Optional.empty())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1d5587d6199adaf662a49c8c04db25728abcb"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMzI5MA==", "bodyText": "@sophokles73 Sounds good. I have made those changes. Please take a look.", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431013290", "createdAt": "2020-05-27T10:22:31Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-mongodb/src/main/java/org/eclipse/hono/deviceregistry/mongodb/service/MongoDbBasedCredentialsService.java", "diffHunk": "@@ -190,7 +208,7 @@ public MongoDbBasedCredentialsService(\n         Objects.requireNonNull(deviceKey);\n         Objects.requireNonNull(span);\n \n-        return findCredentials(deviceKey)\n+        return findCredentials(deviceKey, Optional.empty())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NTkyMw=="}, "originalCommit": {"oid": "7ef1d5587d6199adaf662a49c8c04db25728abcb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQxMDk2OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxODoyOVrOGbAtlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxODoyOVrOGbAtlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NjQwNQ==", "bodyText": "I like this approach because it increases encapsulation \ud83d\udc4d", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r430976405", "createdAt": "2020-05-27T09:18:29Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,46 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1d5587d6199adaf662a49c8c04db25728abcb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDQxNDA0OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwOToxOToxOVrOGbAvkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMDoyMzowMVrOGbC-oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NjkxMg==", "bodyText": "why don't we simply define a merge method on CommonSecret?", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r430976912", "createdAt": "2020-05-27T09:19:19Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,46 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .map(result -> {\n+                                    if (secret instanceof PasswordSecret) {\n+                                        ((PasswordSecret) secret).merge((PasswordSecret) result);\n+                                    } else if (secret instanceof PskSecret) {\n+                                        ((PskSecret) secret).merge((PskSecret) result);\n+                                    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef1d5587d6199adaf662a49c8c04db25728abcb"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTAxMzUzNw==", "bodyText": "@sophokles73 I have added a merge method to the CommonSecret.", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431013537", "createdAt": "2020-05-27T10:23:01Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,46 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .map(result -> {\n+                                    if (secret instanceof PasswordSecret) {\n+                                        ((PasswordSecret) secret).merge((PasswordSecret) result);\n+                                    } else if (secret instanceof PskSecret) {\n+                                        ((PskSecret) secret).merge((PskSecret) result);\n+                                    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDk3NjkxMg=="}, "originalCommit": {"oid": "7ef1d5587d6199adaf662a49c8c04db25728abcb"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDkwMDU0OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo0OTozOFrOGbFopw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowMToxM1rOGbIQ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NzA2Mw==", "bodyText": "FMPOV we do not need the credentials parameter, do we?", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431057063", "createdAt": "2020-05-27T11:49:38Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,41 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .ifPresentOrElse(secret::merge, () -> {\n+                                    throw new IllegalArgumentException(\n+                                            String.format(\"secret [id: %s] not found\", secret.getId()));\n+                                })));\n+\n+        return this;\n+    }\n+\n+\n+    private Optional<? extends CommonSecret> findSecretById(final CommonCredential credential, final String secretId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDA5Mw==", "bodyText": "This credentials parameter is needed. It is the credential that is received as a parameter for merging in CommonCredential merge(final CommonCredential credential)", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431080093", "createdAt": "2020-05-27T12:31:44Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,41 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .ifPresentOrElse(secret::merge, () -> {\n+                                    throw new IllegalArgumentException(\n+                                            String.format(\"secret [id: %s] not found\", secret.getId()));\n+                                })));\n+\n+        return this;\n+    }\n+\n+\n+    private Optional<? extends CommonSecret> findSecretById(final CommonCredential credential, final String secretId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NzA2Mw=="}, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4OTA4NQ==", "bodyText": "sure, but the other object also is a CommonCredential, isn't it? So the code in the merge operation would simply need to be changed to:\ngetSecrets()\n                .forEach(secret -> Optional.ofNullable(secret.getId())\n                        .ifPresent(secretId -> credential.findSecretById(secretId)\n                                .ifPresentOrElse(secret::merge, () -> {\n                                    throw new IllegalArgumentException(\n                                            String.format(\"secret [id: %s] not found\", secret.getId()));\n                                })));\nor am I mistaken?", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431089085", "createdAt": "2020-05-27T12:46:18Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,41 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .ifPresentOrElse(secret::merge, () -> {\n+                                    throw new IllegalArgumentException(\n+                                            String.format(\"secret [id: %s] not found\", secret.getId()));\n+                                })));\n+\n+        return this;\n+    }\n+\n+\n+    private Optional<? extends CommonSecret> findSecretById(final CommonCredential credential, final String secretId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NzA2Mw=="}, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA5MTU5Ng==", "bodyText": "Now I understood what you meant :-)", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431091596", "createdAt": "2020-05-27T12:50:29Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,41 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .ifPresentOrElse(secret::merge, () -> {\n+                                    throw new IllegalArgumentException(\n+                                            String.format(\"secret [id: %s] not found\", secret.getId()));\n+                                })));\n+\n+        return this;\n+    }\n+\n+\n+    private Optional<? extends CommonSecret> findSecretById(final CommonCredential credential, final String secretId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NzA2Mw=="}, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEwMDEyNA==", "bodyText": "I have made those changes now.", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431100124", "createdAt": "2020-05-27T13:01:13Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonCredential.java", "diffHunk": "@@ -164,4 +167,41 @@ public void checkValidity() {\n     public CommonCredential stripPrivateInfo() {\n         return this;\n     }\n+\n+    /**\n+     * Merges the secrets of the given credential with that of the current one based on the secret ids.\n+     *\n+     * @param credential The credential to be merged.\n+     * @return a reference to this for fluent use.\n+     * @throws IllegalArgumentException if the given credential is invalid and cannot be merged.\n+     * @throws NullPointerException if the given credential is {@code null}.\n+     */\n+    @JsonIgnore\n+    public CommonCredential merge(final CommonCredential credential) {\n+\n+        Objects.requireNonNull(credential);\n+\n+        if (!getType().equals(credential.getType())) {\n+            throw new IllegalArgumentException(\"credential to be merged must be of the same type\");\n+        }\n+\n+        getSecrets()\n+                .forEach(secret -> Optional.ofNullable(secret.getId())\n+                        .ifPresent(secretId -> findSecretById(credential, secretId)\n+                                .ifPresentOrElse(secret::merge, () -> {\n+                                    throw new IllegalArgumentException(\n+                                            String.format(\"secret [id: %s] not found\", secret.getId()));\n+                                })));\n+\n+        return this;\n+    }\n+\n+\n+    private Optional<? extends CommonSecret> findSecretById(final CommonCredential credential, final String secretId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1NzA2Mw=="}, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDkwNDk3OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1MDo1N1rOGbFreA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMjo0NTozMVrOGbHjeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1Nzc4NA==", "bodyText": "My point was to add an empty method at this level which would then be overridden by PasswordSecret and PskSecret. The way you have implemented it couples the generic CommonSecrets to some of its subclasses ...", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431057784", "createdAt": "2020-05-27T11:50:57Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "diffHunk": "@@ -160,4 +160,12 @@ public void checkValidity() {\n             }\n         }\n     }\n+\n+    void merge(final CommonSecret secret) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4ODUwNg==", "bodyText": "I have added an empty method now and overriden that in the PasswordSecret and PskSecret.", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431088506", "createdAt": "2020-05-27T12:45:31Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "diffHunk": "@@ -160,4 +160,12 @@ public void checkValidity() {\n             }\n         }\n     }\n+\n+    void merge(final CommonSecret secret) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1Nzc4NA=="}, "originalCommit": {"oid": "0d5154872c07bbaba5c62cdaaf64b9ded2b0915a"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTI0MTc4OnYy", "diffSide": "RIGHT", "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzoxMjozOFrOGbJHpw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0NjozMVrOGbK54A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExNDE1MQ==", "bodyText": "I think that this method deserves a JavaDoc comment, doesn't it?", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431114151", "createdAt": "2020-05-27T13:12:38Z", "author": {"login": "sophokles73"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "diffHunk": "@@ -160,4 +160,7 @@ public void checkValidity() {\n             }\n         }\n     }\n+\n+    void merge(final CommonSecret secret) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "662fdaf161dc5c17248ea7f70af03195608636cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MzM5Mg==", "bodyText": "I have now added the JavaDoc.", "url": "https://github.com/eclipse/hono/pull/1967#discussion_r431143392", "createdAt": "2020-05-27T13:46:31Z", "author": {"login": "kaniyan"}, "path": "services/device-registry-base/src/main/java/org/eclipse/hono/service/management/credentials/CommonSecret.java", "diffHunk": "@@ -160,4 +160,7 @@ public void checkValidity() {\n             }\n         }\n     }\n+\n+    void merge(final CommonSecret secret) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExNDE1MQ=="}, "originalCommit": {"oid": "662fdaf161dc5c17248ea7f70af03195608636cb"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3115, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}